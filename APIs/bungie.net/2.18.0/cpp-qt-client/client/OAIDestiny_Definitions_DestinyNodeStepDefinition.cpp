/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyNodeStepDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyNodeStepDefinition::OAIDestiny_Definitions_DestinyNodeStepDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyNodeStepDefinition::OAIDestiny_Definitions_DestinyNodeStepDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyNodeStepDefinition::~OAIDestiny_Definitions_DestinyNodeStepDefinition() {}

void OAIDestiny_Definitions_DestinyNodeStepDefinition::initializeModel() {

    m_activation_requirement_isSet = false;
    m_activation_requirement_isValid = false;

    m_affects_level_isSet = false;
    m_affects_level_isValid = false;

    m_affects_quality_isSet = false;
    m_affects_quality_isValid = false;

    m_can_activate_next_step_isSet = false;
    m_can_activate_next_step_isValid = false;

    m_damage_type_isSet = false;
    m_damage_type_isValid = false;

    m_damage_type_hash_isSet = false;
    m_damage_type_hash_isValid = false;

    m_display_properties_isSet = false;
    m_display_properties_isValid = false;

    m_interaction_description_isSet = false;
    m_interaction_description_isValid = false;

    m_is_next_step_random_isSet = false;
    m_is_next_step_random_isValid = false;

    m_next_step_index_isSet = false;
    m_next_step_index_isValid = false;

    m_node_step_hash_isSet = false;
    m_node_step_hash_isValid = false;

    m_perk_hashes_isSet = false;
    m_perk_hashes_isValid = false;

    m_socket_replacements_isSet = false;
    m_socket_replacements_isValid = false;

    m_start_progression_bar_at_progress_isSet = false;
    m_start_progression_bar_at_progress_isValid = false;

    m_stat_hashes_isSet = false;
    m_stat_hashes_isValid = false;

    m_step_groups_isSet = false;
    m_step_groups_isValid = false;

    m_step_index_isSet = false;
    m_step_index_isValid = false;
}

void OAIDestiny_Definitions_DestinyNodeStepDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyNodeStepDefinition::fromJsonObject(QJsonObject json) {

    m_activation_requirement_isValid = ::OpenAPI::fromJsonValue(m_activation_requirement, json[QString("activationRequirement")]);
    m_activation_requirement_isSet = !json[QString("activationRequirement")].isNull() && m_activation_requirement_isValid;

    m_affects_level_isValid = ::OpenAPI::fromJsonValue(m_affects_level, json[QString("affectsLevel")]);
    m_affects_level_isSet = !json[QString("affectsLevel")].isNull() && m_affects_level_isValid;

    m_affects_quality_isValid = ::OpenAPI::fromJsonValue(m_affects_quality, json[QString("affectsQuality")]);
    m_affects_quality_isSet = !json[QString("affectsQuality")].isNull() && m_affects_quality_isValid;

    m_can_activate_next_step_isValid = ::OpenAPI::fromJsonValue(m_can_activate_next_step, json[QString("canActivateNextStep")]);
    m_can_activate_next_step_isSet = !json[QString("canActivateNextStep")].isNull() && m_can_activate_next_step_isValid;

    m_damage_type_isValid = ::OpenAPI::fromJsonValue(m_damage_type, json[QString("damageType")]);
    m_damage_type_isSet = !json[QString("damageType")].isNull() && m_damage_type_isValid;

    m_damage_type_hash_isValid = ::OpenAPI::fromJsonValue(m_damage_type_hash, json[QString("damageTypeHash")]);
    m_damage_type_hash_isSet = !json[QString("damageTypeHash")].isNull() && m_damage_type_hash_isValid;

    m_display_properties_isValid = ::OpenAPI::fromJsonValue(m_display_properties, json[QString("displayProperties")]);
    m_display_properties_isSet = !json[QString("displayProperties")].isNull() && m_display_properties_isValid;

    m_interaction_description_isValid = ::OpenAPI::fromJsonValue(m_interaction_description, json[QString("interactionDescription")]);
    m_interaction_description_isSet = !json[QString("interactionDescription")].isNull() && m_interaction_description_isValid;

    m_is_next_step_random_isValid = ::OpenAPI::fromJsonValue(m_is_next_step_random, json[QString("isNextStepRandom")]);
    m_is_next_step_random_isSet = !json[QString("isNextStepRandom")].isNull() && m_is_next_step_random_isValid;

    m_next_step_index_isValid = ::OpenAPI::fromJsonValue(m_next_step_index, json[QString("nextStepIndex")]);
    m_next_step_index_isSet = !json[QString("nextStepIndex")].isNull() && m_next_step_index_isValid;

    m_node_step_hash_isValid = ::OpenAPI::fromJsonValue(m_node_step_hash, json[QString("nodeStepHash")]);
    m_node_step_hash_isSet = !json[QString("nodeStepHash")].isNull() && m_node_step_hash_isValid;

    m_perk_hashes_isValid = ::OpenAPI::fromJsonValue(m_perk_hashes, json[QString("perkHashes")]);
    m_perk_hashes_isSet = !json[QString("perkHashes")].isNull() && m_perk_hashes_isValid;

    m_socket_replacements_isValid = ::OpenAPI::fromJsonValue(m_socket_replacements, json[QString("socketReplacements")]);
    m_socket_replacements_isSet = !json[QString("socketReplacements")].isNull() && m_socket_replacements_isValid;

    m_start_progression_bar_at_progress_isValid = ::OpenAPI::fromJsonValue(m_start_progression_bar_at_progress, json[QString("startProgressionBarAtProgress")]);
    m_start_progression_bar_at_progress_isSet = !json[QString("startProgressionBarAtProgress")].isNull() && m_start_progression_bar_at_progress_isValid;

    m_stat_hashes_isValid = ::OpenAPI::fromJsonValue(m_stat_hashes, json[QString("statHashes")]);
    m_stat_hashes_isSet = !json[QString("statHashes")].isNull() && m_stat_hashes_isValid;

    m_step_groups_isValid = ::OpenAPI::fromJsonValue(m_step_groups, json[QString("stepGroups")]);
    m_step_groups_isSet = !json[QString("stepGroups")].isNull() && m_step_groups_isValid;

    m_step_index_isValid = ::OpenAPI::fromJsonValue(m_step_index, json[QString("stepIndex")]);
    m_step_index_isSet = !json[QString("stepIndex")].isNull() && m_step_index_isValid;
}

QString OAIDestiny_Definitions_DestinyNodeStepDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyNodeStepDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_requirement.isSet()) {
        obj.insert(QString("activationRequirement"), ::OpenAPI::toJsonValue(m_activation_requirement));
    }
    if (m_affects_level_isSet) {
        obj.insert(QString("affectsLevel"), ::OpenAPI::toJsonValue(m_affects_level));
    }
    if (m_affects_quality_isSet) {
        obj.insert(QString("affectsQuality"), ::OpenAPI::toJsonValue(m_affects_quality));
    }
    if (m_can_activate_next_step_isSet) {
        obj.insert(QString("canActivateNextStep"), ::OpenAPI::toJsonValue(m_can_activate_next_step));
    }
    if (m_damage_type_isSet) {
        obj.insert(QString("damageType"), ::OpenAPI::toJsonValue(m_damage_type));
    }
    if (m_damage_type_hash_isSet) {
        obj.insert(QString("damageTypeHash"), ::OpenAPI::toJsonValue(m_damage_type_hash));
    }
    if (m_display_properties.isSet()) {
        obj.insert(QString("displayProperties"), ::OpenAPI::toJsonValue(m_display_properties));
    }
    if (m_interaction_description_isSet) {
        obj.insert(QString("interactionDescription"), ::OpenAPI::toJsonValue(m_interaction_description));
    }
    if (m_is_next_step_random_isSet) {
        obj.insert(QString("isNextStepRandom"), ::OpenAPI::toJsonValue(m_is_next_step_random));
    }
    if (m_next_step_index_isSet) {
        obj.insert(QString("nextStepIndex"), ::OpenAPI::toJsonValue(m_next_step_index));
    }
    if (m_node_step_hash_isSet) {
        obj.insert(QString("nodeStepHash"), ::OpenAPI::toJsonValue(m_node_step_hash));
    }
    if (m_perk_hashes.size() > 0) {
        obj.insert(QString("perkHashes"), ::OpenAPI::toJsonValue(m_perk_hashes));
    }
    if (m_socket_replacements.size() > 0) {
        obj.insert(QString("socketReplacements"), ::OpenAPI::toJsonValue(m_socket_replacements));
    }
    if (m_start_progression_bar_at_progress_isSet) {
        obj.insert(QString("startProgressionBarAtProgress"), ::OpenAPI::toJsonValue(m_start_progression_bar_at_progress));
    }
    if (m_stat_hashes.size() > 0) {
        obj.insert(QString("statHashes"), ::OpenAPI::toJsonValue(m_stat_hashes));
    }
    if (m_step_groups.isSet()) {
        obj.insert(QString("stepGroups"), ::OpenAPI::toJsonValue(m_step_groups));
    }
    if (m_step_index_isSet) {
        obj.insert(QString("stepIndex"), ::OpenAPI::toJsonValue(m_step_index));
    }
    return obj;
}

OAIDestiny_Definitions_DestinyNodeActivationRequirement OAIDestiny_Definitions_DestinyNodeStepDefinition::getActivationRequirement() const {
    return m_activation_requirement;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setActivationRequirement(const OAIDestiny_Definitions_DestinyNodeActivationRequirement &activation_requirement) {
    m_activation_requirement = activation_requirement;
    m_activation_requirement_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_activation_requirement_Set() const{
    return m_activation_requirement_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_activation_requirement_Valid() const{
    return m_activation_requirement_isValid;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::isAffectsLevel() const {
    return m_affects_level;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setAffectsLevel(const bool &affects_level) {
    m_affects_level = affects_level;
    m_affects_level_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_affects_level_Set() const{
    return m_affects_level_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_affects_level_Valid() const{
    return m_affects_level_isValid;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::isAffectsQuality() const {
    return m_affects_quality;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setAffectsQuality(const bool &affects_quality) {
    m_affects_quality = affects_quality;
    m_affects_quality_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_affects_quality_Set() const{
    return m_affects_quality_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_affects_quality_Valid() const{
    return m_affects_quality_isValid;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::isCanActivateNextStep() const {
    return m_can_activate_next_step;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setCanActivateNextStep(const bool &can_activate_next_step) {
    m_can_activate_next_step = can_activate_next_step;
    m_can_activate_next_step_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_can_activate_next_step_Set() const{
    return m_can_activate_next_step_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_can_activate_next_step_Valid() const{
    return m_can_activate_next_step_isValid;
}

qint32 OAIDestiny_Definitions_DestinyNodeStepDefinition::getDamageType() const {
    return m_damage_type;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setDamageType(const qint32 &damage_type) {
    m_damage_type = damage_type;
    m_damage_type_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_damage_type_Set() const{
    return m_damage_type_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_damage_type_Valid() const{
    return m_damage_type_isValid;
}

qint32 OAIDestiny_Definitions_DestinyNodeStepDefinition::getDamageTypeHash() const {
    return m_damage_type_hash;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setDamageTypeHash(const qint32 &damage_type_hash) {
    m_damage_type_hash = damage_type_hash;
    m_damage_type_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_damage_type_hash_Set() const{
    return m_damage_type_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_damage_type_hash_Valid() const{
    return m_damage_type_hash_isValid;
}

OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition OAIDestiny_Definitions_DestinyNodeStepDefinition::getDisplayProperties() const {
    return m_display_properties;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setDisplayProperties(const OAIDestiny_Definitions_Common_DestinyDisplayPropertiesDefinition &display_properties) {
    m_display_properties = display_properties;
    m_display_properties_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_display_properties_Set() const{
    return m_display_properties_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_display_properties_Valid() const{
    return m_display_properties_isValid;
}

QString OAIDestiny_Definitions_DestinyNodeStepDefinition::getInteractionDescription() const {
    return m_interaction_description;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setInteractionDescription(const QString &interaction_description) {
    m_interaction_description = interaction_description;
    m_interaction_description_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_interaction_description_Set() const{
    return m_interaction_description_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_interaction_description_Valid() const{
    return m_interaction_description_isValid;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::isIsNextStepRandom() const {
    return m_is_next_step_random;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setIsNextStepRandom(const bool &is_next_step_random) {
    m_is_next_step_random = is_next_step_random;
    m_is_next_step_random_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_is_next_step_random_Set() const{
    return m_is_next_step_random_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_is_next_step_random_Valid() const{
    return m_is_next_step_random_isValid;
}

qint32 OAIDestiny_Definitions_DestinyNodeStepDefinition::getNextStepIndex() const {
    return m_next_step_index;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setNextStepIndex(const qint32 &next_step_index) {
    m_next_step_index = next_step_index;
    m_next_step_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_next_step_index_Set() const{
    return m_next_step_index_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_next_step_index_Valid() const{
    return m_next_step_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyNodeStepDefinition::getNodeStepHash() const {
    return m_node_step_hash;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setNodeStepHash(const qint32 &node_step_hash) {
    m_node_step_hash = node_step_hash;
    m_node_step_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_node_step_hash_Set() const{
    return m_node_step_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_node_step_hash_Valid() const{
    return m_node_step_hash_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyNodeStepDefinition::getPerkHashes() const {
    return m_perk_hashes;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setPerkHashes(const QList<qint32> &perk_hashes) {
    m_perk_hashes = perk_hashes;
    m_perk_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_perk_hashes_Set() const{
    return m_perk_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_perk_hashes_Valid() const{
    return m_perk_hashes_isValid;
}

QList<OAIDestiny_Definitions_DestinyNodeSocketReplaceResponse> OAIDestiny_Definitions_DestinyNodeStepDefinition::getSocketReplacements() const {
    return m_socket_replacements;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setSocketReplacements(const QList<OAIDestiny_Definitions_DestinyNodeSocketReplaceResponse> &socket_replacements) {
    m_socket_replacements = socket_replacements;
    m_socket_replacements_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_socket_replacements_Set() const{
    return m_socket_replacements_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_socket_replacements_Valid() const{
    return m_socket_replacements_isValid;
}

qint32 OAIDestiny_Definitions_DestinyNodeStepDefinition::getStartProgressionBarAtProgress() const {
    return m_start_progression_bar_at_progress;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setStartProgressionBarAtProgress(const qint32 &start_progression_bar_at_progress) {
    m_start_progression_bar_at_progress = start_progression_bar_at_progress;
    m_start_progression_bar_at_progress_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_start_progression_bar_at_progress_Set() const{
    return m_start_progression_bar_at_progress_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_start_progression_bar_at_progress_Valid() const{
    return m_start_progression_bar_at_progress_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyNodeStepDefinition::getStatHashes() const {
    return m_stat_hashes;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setStatHashes(const QList<qint32> &stat_hashes) {
    m_stat_hashes = stat_hashes;
    m_stat_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_stat_hashes_Set() const{
    return m_stat_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_stat_hashes_Valid() const{
    return m_stat_hashes_isValid;
}

OAIDestiny_Definitions_DestinyTalentNodeStepGroups OAIDestiny_Definitions_DestinyNodeStepDefinition::getStepGroups() const {
    return m_step_groups;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setStepGroups(const OAIDestiny_Definitions_DestinyTalentNodeStepGroups &step_groups) {
    m_step_groups = step_groups;
    m_step_groups_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_step_groups_Set() const{
    return m_step_groups_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_step_groups_Valid() const{
    return m_step_groups_isValid;
}

qint32 OAIDestiny_Definitions_DestinyNodeStepDefinition::getStepIndex() const {
    return m_step_index;
}
void OAIDestiny_Definitions_DestinyNodeStepDefinition::setStepIndex(const qint32 &step_index) {
    m_step_index = step_index;
    m_step_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_step_index_Set() const{
    return m_step_index_isSet;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::is_step_index_Valid() const{
    return m_step_index_isValid;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_requirement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_affects_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affects_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_activate_next_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_damage_type_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interaction_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_next_step_random_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_step_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_step_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perk_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_socket_replacements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_progression_bar_at_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stat_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyNodeStepDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
