/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Entities_Items_DestinyItemInstanceComponent.h
 *
 * If an item is \&quot;instanced\&quot;, this will contain information about the item&#39;s instance that doesn&#39;t fit easily into other components. One might say this is the \&quot;essential\&quot; instance data for the item.  Items are instanced if they require information or state that can vary. For instance, weapons are Instanced: they are given a unique identifier, uniquely generated stats, and can have their properties altered. Non-instanced items have none of these things: for instance, Glimmer has no unique properties aside from how much of it you own.  You can tell from an item&#39;s definition whether it will be instanced or not by looking at the DestinyInventoryItemDefinition&#39;s definition.inventory.isInstanceItem property.
 */

#ifndef OAIDestiny_Entities_Items_DestinyItemInstanceComponent_H
#define OAIDestiny_Entities_Items_DestinyItemInstanceComponent_H

#include <QJsonObject>

#include "OAIDestiny_DestinyStat.h"
#include "OAIDestiny_Entities_Items_DestinyItemInstanceEnergy.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Entities_Items_DestinyItemInstanceEnergy;
class OAIDestiny_DestinyStat;

class OAIDestiny_Entities_Items_DestinyItemInstanceComponent : public OAIObject {
public:
    OAIDestiny_Entities_Items_DestinyItemInstanceComponent();
    OAIDestiny_Entities_Items_DestinyItemInstanceComponent(QString json);
    ~OAIDestiny_Entities_Items_DestinyItemInstanceComponent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBreakerType() const;
    void setBreakerType(const qint32 &breaker_type);
    bool is_breaker_type_Set() const;
    bool is_breaker_type_Valid() const;

    qint32 getBreakerTypeHash() const;
    void setBreakerTypeHash(const qint32 &breaker_type_hash);
    bool is_breaker_type_hash_Set() const;
    bool is_breaker_type_hash_Valid() const;

    bool isCanEquip() const;
    void setCanEquip(const bool &can_equip);
    bool is_can_equip_Set() const;
    bool is_can_equip_Valid() const;

    qint32 getCannotEquipReason() const;
    void setCannotEquipReason(const qint32 &cannot_equip_reason);
    bool is_cannot_equip_reason_Set() const;
    bool is_cannot_equip_reason_Valid() const;

    qint32 getDamageType() const;
    void setDamageType(const qint32 &damage_type);
    bool is_damage_type_Set() const;
    bool is_damage_type_Valid() const;

    qint32 getDamageTypeHash() const;
    void setDamageTypeHash(const qint32 &damage_type_hash);
    bool is_damage_type_hash_Set() const;
    bool is_damage_type_hash_Valid() const;

    OAIDestiny_Entities_Items_DestinyItemInstanceEnergy getEnergy() const;
    void setEnergy(const OAIDestiny_Entities_Items_DestinyItemInstanceEnergy &energy);
    bool is_energy_Set() const;
    bool is_energy_Valid() const;

    qint32 getEquipRequiredLevel() const;
    void setEquipRequiredLevel(const qint32 &equip_required_level);
    bool is_equip_required_level_Set() const;
    bool is_equip_required_level_Valid() const;

    bool isIsEquipped() const;
    void setIsEquipped(const bool &is_equipped);
    bool is_is_equipped_Set() const;
    bool is_is_equipped_Valid() const;

    qint32 getItemLevel() const;
    void setItemLevel(const qint32 &item_level);
    bool is_item_level_Set() const;
    bool is_item_level_Valid() const;

    OAIDestiny_DestinyStat getPrimaryStat() const;
    void setPrimaryStat(const OAIDestiny_DestinyStat &primary_stat);
    bool is_primary_stat_Set() const;
    bool is_primary_stat_Valid() const;

    qint32 getQuality() const;
    void setQuality(const qint32 &quality);
    bool is_quality_Set() const;
    bool is_quality_Valid() const;

    QList<qint32> getUnlockHashesRequiredToEquip() const;
    void setUnlockHashesRequiredToEquip(const QList<qint32> &unlock_hashes_required_to_equip);
    bool is_unlock_hashes_required_to_equip_Set() const;
    bool is_unlock_hashes_required_to_equip_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_breaker_type;
    bool m_breaker_type_isSet;
    bool m_breaker_type_isValid;

    qint32 m_breaker_type_hash;
    bool m_breaker_type_hash_isSet;
    bool m_breaker_type_hash_isValid;

    bool m_can_equip;
    bool m_can_equip_isSet;
    bool m_can_equip_isValid;

    qint32 m_cannot_equip_reason;
    bool m_cannot_equip_reason_isSet;
    bool m_cannot_equip_reason_isValid;

    qint32 m_damage_type;
    bool m_damage_type_isSet;
    bool m_damage_type_isValid;

    qint32 m_damage_type_hash;
    bool m_damage_type_hash_isSet;
    bool m_damage_type_hash_isValid;

    OAIDestiny_Entities_Items_DestinyItemInstanceEnergy m_energy;
    bool m_energy_isSet;
    bool m_energy_isValid;

    qint32 m_equip_required_level;
    bool m_equip_required_level_isSet;
    bool m_equip_required_level_isValid;

    bool m_is_equipped;
    bool m_is_equipped_isSet;
    bool m_is_equipped_isValid;

    qint32 m_item_level;
    bool m_item_level_isSet;
    bool m_item_level_isValid;

    OAIDestiny_DestinyStat m_primary_stat;
    bool m_primary_stat_isSet;
    bool m_primary_stat_isValid;

    qint32 m_quality;
    bool m_quality_isSet;
    bool m_quality_isValid;

    QList<qint32> m_unlock_hashes_required_to_equip;
    bool m_unlock_hashes_required_to_equip_isSet;
    bool m_unlock_hashes_required_to_equip_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Entities_Items_DestinyItemInstanceComponent)

#endif // OAIDestiny_Entities_Items_DestinyItemInstanceComponent_H
