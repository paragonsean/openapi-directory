/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent.h
 *
 * 
 */

#ifndef OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent_H
#define OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent_H

#include <QJsonObject>

#include "OAIDestiny_Components_Collectibles_DestinyCollectibleComponent.h"
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestiny_Components_Collectibles_DestinyCollectibleComponent;

class OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent : public OAIObject {
public:
    OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent();
    OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent(QString json);
    ~OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, OAIDestiny_Components_Collectibles_DestinyCollectibleComponent> getCollectibles() const;
    void setCollectibles(const QMap<QString, OAIDestiny_Components_Collectibles_DestinyCollectibleComponent> &collectibles);
    bool is_collectibles_Set() const;
    bool is_collectibles_Valid() const;

    qint32 getCollectionBadgesRootNodeHash() const;
    void setCollectionBadgesRootNodeHash(const qint32 &collection_badges_root_node_hash);
    bool is_collection_badges_root_node_hash_Set() const;
    bool is_collection_badges_root_node_hash_Valid() const;

    qint32 getCollectionCategoriesRootNodeHash() const;
    void setCollectionCategoriesRootNodeHash(const qint32 &collection_categories_root_node_hash);
    bool is_collection_categories_root_node_hash_Set() const;
    bool is_collection_categories_root_node_hash_Valid() const;

    QList<qint32> getNewnessFlaggedCollectibleHashes() const;
    void setNewnessFlaggedCollectibleHashes(const QList<qint32> &newness_flagged_collectible_hashes);
    bool is_newness_flagged_collectible_hashes_Set() const;
    bool is_newness_flagged_collectible_hashes_Valid() const;

    QList<qint32> getRecentCollectibleHashes() const;
    void setRecentCollectibleHashes(const QList<qint32> &recent_collectible_hashes);
    bool is_recent_collectible_hashes_Set() const;
    bool is_recent_collectible_hashes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, OAIDestiny_Components_Collectibles_DestinyCollectibleComponent> m_collectibles;
    bool m_collectibles_isSet;
    bool m_collectibles_isValid;

    qint32 m_collection_badges_root_node_hash;
    bool m_collection_badges_root_node_hash_isSet;
    bool m_collection_badges_root_node_hash_isValid;

    qint32 m_collection_categories_root_node_hash;
    bool m_collection_categories_root_node_hash_isSet;
    bool m_collection_categories_root_node_hash_isValid;

    QList<qint32> m_newness_flagged_collectible_hashes;
    bool m_newness_flagged_collectible_hashes_isSet;
    bool m_newness_flagged_collectible_hashes_isValid;

    QList<qint32> m_recent_collectible_hashes;
    bool m_recent_collectible_hashes_isSet;
    bool m_recent_collectible_hashes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent)

#endif // OAIDestiny_Components_Collectibles_DestinyProfileCollectiblesComponent_H
