/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestiny_Definitions_DestinyTalentNodeDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestiny_Definitions_DestinyTalentNodeDefinition::OAIDestiny_Definitions_DestinyTalentNodeDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestiny_Definitions_DestinyTalentNodeDefinition::OAIDestiny_Definitions_DestinyTalentNodeDefinition() {
    this->initializeModel();
}

OAIDestiny_Definitions_DestinyTalentNodeDefinition::~OAIDestiny_Definitions_DestinyTalentNodeDefinition() {}

void OAIDestiny_Definitions_DestinyTalentNodeDefinition::initializeModel() {

    m_auto_unlocks_isSet = false;
    m_auto_unlocks_isValid = false;

    m_binary_pair_node_index_isSet = false;
    m_binary_pair_node_index_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_exclusive_with_node_hashes_isSet = false;
    m_exclusive_with_node_hashes_isValid = false;

    m_group_hash_isSet = false;
    m_group_hash_isValid = false;

    m_ignore_for_completion_isSet = false;
    m_ignore_for_completion_isValid = false;

    m_is_random_isSet = false;
    m_is_random_isValid = false;

    m_is_random_repurchasable_isSet = false;
    m_is_random_repurchasable_isValid = false;

    m_last_step_repeats_isSet = false;
    m_last_step_repeats_isValid = false;

    m_layout_identifier_isSet = false;
    m_layout_identifier_isValid = false;

    m_lore_hash_isSet = false;
    m_lore_hash_isValid = false;

    m_node_hash_isSet = false;
    m_node_hash_isValid = false;

    m_node_index_isSet = false;
    m_node_index_isValid = false;

    m_node_style_identifier_isSet = false;
    m_node_style_identifier_isValid = false;

    m_prerequisite_node_indexes_isSet = false;
    m_prerequisite_node_indexes_isValid = false;

    m_random_activation_requirement_isSet = false;
    m_random_activation_requirement_isValid = false;

    m_random_start_progression_bar_at_progression_isSet = false;
    m_random_start_progression_bar_at_progression_isValid = false;

    m_row_isSet = false;
    m_row_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;
}

void OAIDestiny_Definitions_DestinyTalentNodeDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestiny_Definitions_DestinyTalentNodeDefinition::fromJsonObject(QJsonObject json) {

    m_auto_unlocks_isValid = ::OpenAPI::fromJsonValue(m_auto_unlocks, json[QString("autoUnlocks")]);
    m_auto_unlocks_isSet = !json[QString("autoUnlocks")].isNull() && m_auto_unlocks_isValid;

    m_binary_pair_node_index_isValid = ::OpenAPI::fromJsonValue(m_binary_pair_node_index, json[QString("binaryPairNodeIndex")]);
    m_binary_pair_node_index_isSet = !json[QString("binaryPairNodeIndex")].isNull() && m_binary_pair_node_index_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("column")]);
    m_column_isSet = !json[QString("column")].isNull() && m_column_isValid;

    m_exclusive_with_node_hashes_isValid = ::OpenAPI::fromJsonValue(m_exclusive_with_node_hashes, json[QString("exclusiveWithNodeHashes")]);
    m_exclusive_with_node_hashes_isSet = !json[QString("exclusiveWithNodeHashes")].isNull() && m_exclusive_with_node_hashes_isValid;

    m_group_hash_isValid = ::OpenAPI::fromJsonValue(m_group_hash, json[QString("groupHash")]);
    m_group_hash_isSet = !json[QString("groupHash")].isNull() && m_group_hash_isValid;

    m_ignore_for_completion_isValid = ::OpenAPI::fromJsonValue(m_ignore_for_completion, json[QString("ignoreForCompletion")]);
    m_ignore_for_completion_isSet = !json[QString("ignoreForCompletion")].isNull() && m_ignore_for_completion_isValid;

    m_is_random_isValid = ::OpenAPI::fromJsonValue(m_is_random, json[QString("isRandom")]);
    m_is_random_isSet = !json[QString("isRandom")].isNull() && m_is_random_isValid;

    m_is_random_repurchasable_isValid = ::OpenAPI::fromJsonValue(m_is_random_repurchasable, json[QString("isRandomRepurchasable")]);
    m_is_random_repurchasable_isSet = !json[QString("isRandomRepurchasable")].isNull() && m_is_random_repurchasable_isValid;

    m_last_step_repeats_isValid = ::OpenAPI::fromJsonValue(m_last_step_repeats, json[QString("lastStepRepeats")]);
    m_last_step_repeats_isSet = !json[QString("lastStepRepeats")].isNull() && m_last_step_repeats_isValid;

    m_layout_identifier_isValid = ::OpenAPI::fromJsonValue(m_layout_identifier, json[QString("layoutIdentifier")]);
    m_layout_identifier_isSet = !json[QString("layoutIdentifier")].isNull() && m_layout_identifier_isValid;

    m_lore_hash_isValid = ::OpenAPI::fromJsonValue(m_lore_hash, json[QString("loreHash")]);
    m_lore_hash_isSet = !json[QString("loreHash")].isNull() && m_lore_hash_isValid;

    m_node_hash_isValid = ::OpenAPI::fromJsonValue(m_node_hash, json[QString("nodeHash")]);
    m_node_hash_isSet = !json[QString("nodeHash")].isNull() && m_node_hash_isValid;

    m_node_index_isValid = ::OpenAPI::fromJsonValue(m_node_index, json[QString("nodeIndex")]);
    m_node_index_isSet = !json[QString("nodeIndex")].isNull() && m_node_index_isValid;

    m_node_style_identifier_isValid = ::OpenAPI::fromJsonValue(m_node_style_identifier, json[QString("nodeStyleIdentifier")]);
    m_node_style_identifier_isSet = !json[QString("nodeStyleIdentifier")].isNull() && m_node_style_identifier_isValid;

    m_prerequisite_node_indexes_isValid = ::OpenAPI::fromJsonValue(m_prerequisite_node_indexes, json[QString("prerequisiteNodeIndexes")]);
    m_prerequisite_node_indexes_isSet = !json[QString("prerequisiteNodeIndexes")].isNull() && m_prerequisite_node_indexes_isValid;

    m_random_activation_requirement_isValid = ::OpenAPI::fromJsonValue(m_random_activation_requirement, json[QString("randomActivationRequirement")]);
    m_random_activation_requirement_isSet = !json[QString("randomActivationRequirement")].isNull() && m_random_activation_requirement_isValid;

    m_random_start_progression_bar_at_progression_isValid = ::OpenAPI::fromJsonValue(m_random_start_progression_bar_at_progression, json[QString("randomStartProgressionBarAtProgression")]);
    m_random_start_progression_bar_at_progression_isSet = !json[QString("randomStartProgressionBarAtProgression")].isNull() && m_random_start_progression_bar_at_progression_isValid;

    m_row_isValid = ::OpenAPI::fromJsonValue(m_row, json[QString("row")]);
    m_row_isSet = !json[QString("row")].isNull() && m_row_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;
}

QString OAIDestiny_Definitions_DestinyTalentNodeDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestiny_Definitions_DestinyTalentNodeDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_unlocks_isSet) {
        obj.insert(QString("autoUnlocks"), ::OpenAPI::toJsonValue(m_auto_unlocks));
    }
    if (m_binary_pair_node_index_isSet) {
        obj.insert(QString("binaryPairNodeIndex"), ::OpenAPI::toJsonValue(m_binary_pair_node_index));
    }
    if (m_column_isSet) {
        obj.insert(QString("column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_exclusive_with_node_hashes.size() > 0) {
        obj.insert(QString("exclusiveWithNodeHashes"), ::OpenAPI::toJsonValue(m_exclusive_with_node_hashes));
    }
    if (m_group_hash_isSet) {
        obj.insert(QString("groupHash"), ::OpenAPI::toJsonValue(m_group_hash));
    }
    if (m_ignore_for_completion_isSet) {
        obj.insert(QString("ignoreForCompletion"), ::OpenAPI::toJsonValue(m_ignore_for_completion));
    }
    if (m_is_random_isSet) {
        obj.insert(QString("isRandom"), ::OpenAPI::toJsonValue(m_is_random));
    }
    if (m_is_random_repurchasable_isSet) {
        obj.insert(QString("isRandomRepurchasable"), ::OpenAPI::toJsonValue(m_is_random_repurchasable));
    }
    if (m_last_step_repeats_isSet) {
        obj.insert(QString("lastStepRepeats"), ::OpenAPI::toJsonValue(m_last_step_repeats));
    }
    if (m_layout_identifier_isSet) {
        obj.insert(QString("layoutIdentifier"), ::OpenAPI::toJsonValue(m_layout_identifier));
    }
    if (m_lore_hash_isSet) {
        obj.insert(QString("loreHash"), ::OpenAPI::toJsonValue(m_lore_hash));
    }
    if (m_node_hash_isSet) {
        obj.insert(QString("nodeHash"), ::OpenAPI::toJsonValue(m_node_hash));
    }
    if (m_node_index_isSet) {
        obj.insert(QString("nodeIndex"), ::OpenAPI::toJsonValue(m_node_index));
    }
    if (m_node_style_identifier_isSet) {
        obj.insert(QString("nodeStyleIdentifier"), ::OpenAPI::toJsonValue(m_node_style_identifier));
    }
    if (m_prerequisite_node_indexes.size() > 0) {
        obj.insert(QString("prerequisiteNodeIndexes"), ::OpenAPI::toJsonValue(m_prerequisite_node_indexes));
    }
    if (m_random_activation_requirement.isSet()) {
        obj.insert(QString("randomActivationRequirement"), ::OpenAPI::toJsonValue(m_random_activation_requirement));
    }
    if (m_random_start_progression_bar_at_progression_isSet) {
        obj.insert(QString("randomStartProgressionBarAtProgression"), ::OpenAPI::toJsonValue(m_random_start_progression_bar_at_progression));
    }
    if (m_row_isSet) {
        obj.insert(QString("row"), ::OpenAPI::toJsonValue(m_row));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    return obj;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::isAutoUnlocks() const {
    return m_auto_unlocks;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setAutoUnlocks(const bool &auto_unlocks) {
    m_auto_unlocks = auto_unlocks;
    m_auto_unlocks_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_auto_unlocks_Set() const{
    return m_auto_unlocks_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_auto_unlocks_Valid() const{
    return m_auto_unlocks_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeDefinition::getBinaryPairNodeIndex() const {
    return m_binary_pair_node_index;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setBinaryPairNodeIndex(const qint32 &binary_pair_node_index) {
    m_binary_pair_node_index = binary_pair_node_index;
    m_binary_pair_node_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_binary_pair_node_index_Set() const{
    return m_binary_pair_node_index_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_binary_pair_node_index_Valid() const{
    return m_binary_pair_node_index_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeDefinition::getColumn() const {
    return m_column;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setColumn(const qint32 &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_column_Set() const{
    return m_column_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_column_Valid() const{
    return m_column_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyTalentNodeDefinition::getExclusiveWithNodeHashes() const {
    return m_exclusive_with_node_hashes;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setExclusiveWithNodeHashes(const QList<qint32> &exclusive_with_node_hashes) {
    m_exclusive_with_node_hashes = exclusive_with_node_hashes;
    m_exclusive_with_node_hashes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_exclusive_with_node_hashes_Set() const{
    return m_exclusive_with_node_hashes_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_exclusive_with_node_hashes_Valid() const{
    return m_exclusive_with_node_hashes_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeDefinition::getGroupHash() const {
    return m_group_hash;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setGroupHash(const qint32 &group_hash) {
    m_group_hash = group_hash;
    m_group_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_group_hash_Set() const{
    return m_group_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_group_hash_Valid() const{
    return m_group_hash_isValid;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::isIgnoreForCompletion() const {
    return m_ignore_for_completion;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setIgnoreForCompletion(const bool &ignore_for_completion) {
    m_ignore_for_completion = ignore_for_completion;
    m_ignore_for_completion_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_ignore_for_completion_Set() const{
    return m_ignore_for_completion_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_ignore_for_completion_Valid() const{
    return m_ignore_for_completion_isValid;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::isIsRandom() const {
    return m_is_random;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setIsRandom(const bool &is_random) {
    m_is_random = is_random;
    m_is_random_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_is_random_Set() const{
    return m_is_random_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_is_random_Valid() const{
    return m_is_random_isValid;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::isIsRandomRepurchasable() const {
    return m_is_random_repurchasable;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setIsRandomRepurchasable(const bool &is_random_repurchasable) {
    m_is_random_repurchasable = is_random_repurchasable;
    m_is_random_repurchasable_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_is_random_repurchasable_Set() const{
    return m_is_random_repurchasable_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_is_random_repurchasable_Valid() const{
    return m_is_random_repurchasable_isValid;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::isLastStepRepeats() const {
    return m_last_step_repeats;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setLastStepRepeats(const bool &last_step_repeats) {
    m_last_step_repeats = last_step_repeats;
    m_last_step_repeats_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_last_step_repeats_Set() const{
    return m_last_step_repeats_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_last_step_repeats_Valid() const{
    return m_last_step_repeats_isValid;
}

QString OAIDestiny_Definitions_DestinyTalentNodeDefinition::getLayoutIdentifier() const {
    return m_layout_identifier;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setLayoutIdentifier(const QString &layout_identifier) {
    m_layout_identifier = layout_identifier;
    m_layout_identifier_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_layout_identifier_Set() const{
    return m_layout_identifier_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_layout_identifier_Valid() const{
    return m_layout_identifier_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeDefinition::getLoreHash() const {
    return m_lore_hash;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setLoreHash(const qint32 &lore_hash) {
    m_lore_hash = lore_hash;
    m_lore_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_lore_hash_Set() const{
    return m_lore_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_lore_hash_Valid() const{
    return m_lore_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeDefinition::getNodeHash() const {
    return m_node_hash;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setNodeHash(const qint32 &node_hash) {
    m_node_hash = node_hash;
    m_node_hash_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_node_hash_Set() const{
    return m_node_hash_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_node_hash_Valid() const{
    return m_node_hash_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeDefinition::getNodeIndex() const {
    return m_node_index;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setNodeIndex(const qint32 &node_index) {
    m_node_index = node_index;
    m_node_index_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_node_index_Set() const{
    return m_node_index_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_node_index_Valid() const{
    return m_node_index_isValid;
}

QString OAIDestiny_Definitions_DestinyTalentNodeDefinition::getNodeStyleIdentifier() const {
    return m_node_style_identifier;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setNodeStyleIdentifier(const QString &node_style_identifier) {
    m_node_style_identifier = node_style_identifier;
    m_node_style_identifier_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_node_style_identifier_Set() const{
    return m_node_style_identifier_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_node_style_identifier_Valid() const{
    return m_node_style_identifier_isValid;
}

QList<qint32> OAIDestiny_Definitions_DestinyTalentNodeDefinition::getPrerequisiteNodeIndexes() const {
    return m_prerequisite_node_indexes;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setPrerequisiteNodeIndexes(const QList<qint32> &prerequisite_node_indexes) {
    m_prerequisite_node_indexes = prerequisite_node_indexes;
    m_prerequisite_node_indexes_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_prerequisite_node_indexes_Set() const{
    return m_prerequisite_node_indexes_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_prerequisite_node_indexes_Valid() const{
    return m_prerequisite_node_indexes_isValid;
}

OAIDestiny_Definitions_DestinyNodeActivationRequirement OAIDestiny_Definitions_DestinyTalentNodeDefinition::getRandomActivationRequirement() const {
    return m_random_activation_requirement;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setRandomActivationRequirement(const OAIDestiny_Definitions_DestinyNodeActivationRequirement &random_activation_requirement) {
    m_random_activation_requirement = random_activation_requirement;
    m_random_activation_requirement_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_random_activation_requirement_Set() const{
    return m_random_activation_requirement_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_random_activation_requirement_Valid() const{
    return m_random_activation_requirement_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeDefinition::getRandomStartProgressionBarAtProgression() const {
    return m_random_start_progression_bar_at_progression;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setRandomStartProgressionBarAtProgression(const qint32 &random_start_progression_bar_at_progression) {
    m_random_start_progression_bar_at_progression = random_start_progression_bar_at_progression;
    m_random_start_progression_bar_at_progression_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_random_start_progression_bar_at_progression_Set() const{
    return m_random_start_progression_bar_at_progression_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_random_start_progression_bar_at_progression_Valid() const{
    return m_random_start_progression_bar_at_progression_isValid;
}

qint32 OAIDestiny_Definitions_DestinyTalentNodeDefinition::getRow() const {
    return m_row;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setRow(const qint32 &row) {
    m_row = row;
    m_row_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_row_Set() const{
    return m_row_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_row_Valid() const{
    return m_row_isValid;
}

QList<OAIDestiny_Definitions_DestinyNodeStepDefinition> OAIDestiny_Definitions_DestinyTalentNodeDefinition::getSteps() const {
    return m_steps;
}
void OAIDestiny_Definitions_DestinyTalentNodeDefinition::setSteps(const QList<OAIDestiny_Definitions_DestinyNodeStepDefinition> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::is_steps_Valid() const{
    return m_steps_isValid;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_unlocks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_pair_node_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_with_node_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_for_completion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_random_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_random_repurchasable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_step_repeats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lore_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_style_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prerequisite_node_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_random_activation_requirement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_random_start_progression_bar_at_progression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestiny_Definitions_DestinyTalentNodeDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
