# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokensRewardDisplayProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, image_path: str=None, name: str=None):
        """TokensRewardDisplayProperties - a model defined in OpenAPI

        :param description: The description of this TokensRewardDisplayProperties.
        :param image_path: The image_path of this TokensRewardDisplayProperties.
        :param name: The name of this TokensRewardDisplayProperties.
        """
        self.openapi_types = {
            'description': str,
            'image_path': str,
            'name': str
        }

        self.attribute_map = {
            'description': 'Description',
            'image_path': 'ImagePath',
            'name': 'Name'
        }

        self._description = description
        self._image_path = image_path
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokensRewardDisplayProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tokens.RewardDisplayProperties of this TokensRewardDisplayProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TokensRewardDisplayProperties.


        :return: The description of this TokensRewardDisplayProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TokensRewardDisplayProperties.


        :param description: The description of this TokensRewardDisplayProperties.
        :type description: str
        """

        self._description = description

    @property
    def image_path(self):
        """Gets the image_path of this TokensRewardDisplayProperties.


        :return: The image_path of this TokensRewardDisplayProperties.
        :rtype: str
        """
        return self._image_path

    @image_path.setter
    def image_path(self, image_path):
        """Sets the image_path of this TokensRewardDisplayProperties.


        :param image_path: The image_path of this TokensRewardDisplayProperties.
        :type image_path: str
        """

        self._image_path = image_path

    @property
    def name(self):
        """Gets the name of this TokensRewardDisplayProperties.


        :return: The name of this TokensRewardDisplayProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TokensRewardDisplayProperties.


        :param name: The name of this TokensRewardDisplayProperties.
        :type name: str
        """

        self._name = name
