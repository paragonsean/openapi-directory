# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserCrossSaveUserMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_membership_types: List[int]=None, bungie_global_display_name: str=None, bungie_global_display_name_code: int=None, cross_save_override: int=None, display_name: str=None, is_public: bool=None, membership_id: int=None, membership_type: int=None):
        """UserCrossSaveUserMembership - a model defined in OpenAPI

        :param applicable_membership_types: The applicable_membership_types of this UserCrossSaveUserMembership.
        :param bungie_global_display_name: The bungie_global_display_name of this UserCrossSaveUserMembership.
        :param bungie_global_display_name_code: The bungie_global_display_name_code of this UserCrossSaveUserMembership.
        :param cross_save_override: The cross_save_override of this UserCrossSaveUserMembership.
        :param display_name: The display_name of this UserCrossSaveUserMembership.
        :param is_public: The is_public of this UserCrossSaveUserMembership.
        :param membership_id: The membership_id of this UserCrossSaveUserMembership.
        :param membership_type: The membership_type of this UserCrossSaveUserMembership.
        """
        self.openapi_types = {
            'applicable_membership_types': List[int],
            'bungie_global_display_name': str,
            'bungie_global_display_name_code': int,
            'cross_save_override': int,
            'display_name': str,
            'is_public': bool,
            'membership_id': int,
            'membership_type': int
        }

        self.attribute_map = {
            'applicable_membership_types': 'applicableMembershipTypes',
            'bungie_global_display_name': 'bungieGlobalDisplayName',
            'bungie_global_display_name_code': 'bungieGlobalDisplayNameCode',
            'cross_save_override': 'crossSaveOverride',
            'display_name': 'displayName',
            'is_public': 'isPublic',
            'membership_id': 'membershipId',
            'membership_type': 'membershipType'
        }

        self._applicable_membership_types = applicable_membership_types
        self._bungie_global_display_name = bungie_global_display_name
        self._bungie_global_display_name_code = bungie_global_display_name_code
        self._cross_save_override = cross_save_override
        self._display_name = display_name
        self._is_public = is_public
        self._membership_id = membership_id
        self._membership_type = membership_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserCrossSaveUserMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User.CrossSaveUserMembership of this UserCrossSaveUserMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_membership_types(self):
        """Gets the applicable_membership_types of this UserCrossSaveUserMembership.

        The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list

        :return: The applicable_membership_types of this UserCrossSaveUserMembership.
        :rtype: List[int]
        """
        return self._applicable_membership_types

    @applicable_membership_types.setter
    def applicable_membership_types(self, applicable_membership_types):
        """Sets the applicable_membership_types of this UserCrossSaveUserMembership.

        The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list

        :param applicable_membership_types: The applicable_membership_types of this UserCrossSaveUserMembership.
        :type applicable_membership_types: List[int]
        """

        self._applicable_membership_types = applicable_membership_types

    @property
    def bungie_global_display_name(self):
        """Gets the bungie_global_display_name of this UserCrossSaveUserMembership.

        The bungie global display name, if set.

        :return: The bungie_global_display_name of this UserCrossSaveUserMembership.
        :rtype: str
        """
        return self._bungie_global_display_name

    @bungie_global_display_name.setter
    def bungie_global_display_name(self, bungie_global_display_name):
        """Sets the bungie_global_display_name of this UserCrossSaveUserMembership.

        The bungie global display name, if set.

        :param bungie_global_display_name: The bungie_global_display_name of this UserCrossSaveUserMembership.
        :type bungie_global_display_name: str
        """

        self._bungie_global_display_name = bungie_global_display_name

    @property
    def bungie_global_display_name_code(self):
        """Gets the bungie_global_display_name_code of this UserCrossSaveUserMembership.

        The bungie global display name code, if set.

        :return: The bungie_global_display_name_code of this UserCrossSaveUserMembership.
        :rtype: int
        """
        return self._bungie_global_display_name_code

    @bungie_global_display_name_code.setter
    def bungie_global_display_name_code(self, bungie_global_display_name_code):
        """Sets the bungie_global_display_name_code of this UserCrossSaveUserMembership.

        The bungie global display name code, if set.

        :param bungie_global_display_name_code: The bungie_global_display_name_code of this UserCrossSaveUserMembership.
        :type bungie_global_display_name_code: int
        """

        self._bungie_global_display_name_code = bungie_global_display_name_code

    @property
    def cross_save_override(self):
        """Gets the cross_save_override of this UserCrossSaveUserMembership.

        If there is a cross save override in effect, this value will tell you the type that is overridding this one.

        :return: The cross_save_override of this UserCrossSaveUserMembership.
        :rtype: int
        """
        return self._cross_save_override

    @cross_save_override.setter
    def cross_save_override(self, cross_save_override):
        """Sets the cross_save_override of this UserCrossSaveUserMembership.

        If there is a cross save override in effect, this value will tell you the type that is overridding this one.

        :param cross_save_override: The cross_save_override of this UserCrossSaveUserMembership.
        :type cross_save_override: int
        """

        self._cross_save_override = cross_save_override

    @property
    def display_name(self):
        """Gets the display_name of this UserCrossSaveUserMembership.

        Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.

        :return: The display_name of this UserCrossSaveUserMembership.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserCrossSaveUserMembership.

        Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.

        :param display_name: The display_name of this UserCrossSaveUserMembership.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def is_public(self):
        """Gets the is_public of this UserCrossSaveUserMembership.

        If True, this is a public user membership.

        :return: The is_public of this UserCrossSaveUserMembership.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this UserCrossSaveUserMembership.

        If True, this is a public user membership.

        :param is_public: The is_public of this UserCrossSaveUserMembership.
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def membership_id(self):
        """Gets the membership_id of this UserCrossSaveUserMembership.

        Membership ID as they user is known in the Accounts service

        :return: The membership_id of this UserCrossSaveUserMembership.
        :rtype: int
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this UserCrossSaveUserMembership.

        Membership ID as they user is known in the Accounts service

        :param membership_id: The membership_id of this UserCrossSaveUserMembership.
        :type membership_id: int
        """

        self._membership_id = membership_id

    @property
    def membership_type(self):
        """Gets the membership_type of this UserCrossSaveUserMembership.

        Type of the membership. Not necessarily the native type.

        :return: The membership_type of this UserCrossSaveUserMembership.
        :rtype: int
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this UserCrossSaveUserMembership.

        Type of the membership. Not necessarily the native type.

        :param membership_type: The membership_type of this UserCrossSaveUserMembership.
        :type membership_type: int
        """

        self._membership_type = membership_type
