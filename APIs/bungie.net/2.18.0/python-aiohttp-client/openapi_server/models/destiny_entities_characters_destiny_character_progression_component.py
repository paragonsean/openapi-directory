# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_artifacts_destiny_artifact_character_scoped import DestinyArtifactsDestinyArtifactCharacterScoped
from openapi_server.models.destiny_destiny_progression import DestinyDestinyProgression
from openapi_server.models.destiny_entities_items_destiny_item_perks_component import DestinyEntitiesItemsDestinyItemPerksComponent
from openapi_server.models.destiny_milestones_destiny_milestone import DestinyMilestonesDestinyMilestone
from openapi_server.models.destiny_progression_destiny_faction_progression import DestinyProgressionDestinyFactionProgression
from openapi_server.models.destiny_quests_destiny_objective_progress import DestinyQuestsDestinyObjectiveProgress
from openapi_server.models.destiny_quests_destiny_quest_status import DestinyQuestsDestinyQuestStatus
from openapi_server import util


class DestinyEntitiesCharactersDestinyCharacterProgressionComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checklists: Dict[str, Dict[str, bool]]=None, factions: Dict[str, DestinyProgressionDestinyFactionProgression]=None, milestones: Dict[str, DestinyMilestonesDestinyMilestone]=None, progressions: Dict[str, DestinyDestinyProgression]=None, quests: List[DestinyQuestsDestinyQuestStatus]=None, seasonal_artifact: DestinyArtifactsDestinyArtifactCharacterScoped=None, uninstanced_item_objectives: Dict[str, List[DestinyQuestsDestinyObjectiveProgress]]=None, uninstanced_item_perks: Dict[str, DestinyEntitiesItemsDestinyItemPerksComponent]=None):
        """DestinyEntitiesCharactersDestinyCharacterProgressionComponent - a model defined in OpenAPI

        :param checklists: The checklists of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :param factions: The factions of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :param milestones: The milestones of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :param progressions: The progressions of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :param quests: The quests of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :param seasonal_artifact: The seasonal_artifact of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :param uninstanced_item_objectives: The uninstanced_item_objectives of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :param uninstanced_item_perks: The uninstanced_item_perks of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        """
        self.openapi_types = {
            'checklists': Dict[str, Dict[str, bool]],
            'factions': Dict[str, DestinyProgressionDestinyFactionProgression],
            'milestones': Dict[str, DestinyMilestonesDestinyMilestone],
            'progressions': Dict[str, DestinyDestinyProgression],
            'quests': List[DestinyQuestsDestinyQuestStatus],
            'seasonal_artifact': DestinyArtifactsDestinyArtifactCharacterScoped,
            'uninstanced_item_objectives': Dict[str, List[DestinyQuestsDestinyObjectiveProgress]],
            'uninstanced_item_perks': Dict[str, DestinyEntitiesItemsDestinyItemPerksComponent]
        }

        self.attribute_map = {
            'checklists': 'checklists',
            'factions': 'factions',
            'milestones': 'milestones',
            'progressions': 'progressions',
            'quests': 'quests',
            'seasonal_artifact': 'seasonalArtifact',
            'uninstanced_item_objectives': 'uninstancedItemObjectives',
            'uninstanced_item_perks': 'uninstancedItemPerks'
        }

        self._checklists = checklists
        self._factions = factions
        self._milestones = milestones
        self._progressions = progressions
        self._quests = quests
        self._seasonal_artifact = seasonal_artifact
        self._uninstanced_item_objectives = uninstanced_item_objectives
        self._uninstanced_item_perks = uninstanced_item_perks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyEntitiesCharactersDestinyCharacterProgressionComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Entities.Characters.DestinyCharacterProgressionComponent of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checklists(self):
        """Gets the checklists of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        The set of checklists that can be examined for this specific character, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)  For each checklist returned, its value is itself a Dictionary keyed by the checklist's hash identifier with the value being a boolean indicating if it's been discovered yet.

        :return: The checklists of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :rtype: Dict[str, Dict[str, bool]]
        """
        return self._checklists

    @checklists.setter
    def checklists(self, checklists):
        """Sets the checklists of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        The set of checklists that can be examined for this specific character, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)  For each checklist returned, its value is itself a Dictionary keyed by the checklist's hash identifier with the value being a boolean indicating if it's been discovered yet.

        :param checklists: The checklists of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :type checklists: Dict[str, Dict[str, bool]]
        """

        self._checklists = checklists

    @property
    def factions(self):
        """Gets the factions of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        A dictionary of all known Factions, keyed by the Faction's hash. It contains data about this character's status with the faction.

        :return: The factions of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :rtype: Dict[str, DestinyProgressionDestinyFactionProgression]
        """
        return self._factions

    @factions.setter
    def factions(self, factions):
        """Sets the factions of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        A dictionary of all known Factions, keyed by the Faction's hash. It contains data about this character's status with the faction.

        :param factions: The factions of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :type factions: Dict[str, DestinyProgressionDestinyFactionProgression]
        """

        self._factions = factions

    @property
    def milestones(self):
        """Gets the milestones of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        Milestones are related to the simple progressions shown in the game, but return additional and hopefully helpful information for users about the specifics of the Milestone's status.

        :return: The milestones of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :rtype: Dict[str, DestinyMilestonesDestinyMilestone]
        """
        return self._milestones

    @milestones.setter
    def milestones(self, milestones):
        """Sets the milestones of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        Milestones are related to the simple progressions shown in the game, but return additional and hopefully helpful information for users about the specifics of the Milestone's status.

        :param milestones: The milestones of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :type milestones: Dict[str, DestinyMilestonesDestinyMilestone]
        """

        self._milestones = milestones

    @property
    def progressions(self):
        """Gets the progressions of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        A Dictionary of all known progressions for the Character, keyed by the Progression's hash.  Not all progressions have user-facing data, but those who do will have that data contained in the DestinyProgressionDefinition.

        :return: The progressions of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :rtype: Dict[str, DestinyDestinyProgression]
        """
        return self._progressions

    @progressions.setter
    def progressions(self, progressions):
        """Sets the progressions of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        A Dictionary of all known progressions for the Character, keyed by the Progression's hash.  Not all progressions have user-facing data, but those who do will have that data contained in the DestinyProgressionDefinition.

        :param progressions: The progressions of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :type progressions: Dict[str, DestinyDestinyProgression]
        """

        self._progressions = progressions

    @property
    def quests(self):
        """Gets the quests of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        If the user has any active quests, the quests' statuses will be returned here.   Note that quests have been largely supplanted by Milestones, but that doesn't mean that they won't make a comeback independent of milestones at some point.   (Fun fact: quests came back as I feared they would, but we never looped back to populate this... I'm going to put that in the backlog.)

        :return: The quests of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :rtype: List[DestinyQuestsDestinyQuestStatus]
        """
        return self._quests

    @quests.setter
    def quests(self, quests):
        """Sets the quests of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        If the user has any active quests, the quests' statuses will be returned here.   Note that quests have been largely supplanted by Milestones, but that doesn't mean that they won't make a comeback independent of milestones at some point.   (Fun fact: quests came back as I feared they would, but we never looped back to populate this... I'm going to put that in the backlog.)

        :param quests: The quests of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :type quests: List[DestinyQuestsDestinyQuestStatus]
        """

        self._quests = quests

    @property
    def seasonal_artifact(self):
        """Gets the seasonal_artifact of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        Data related to your progress on the current season's artifact that can vary per character.

        :return: The seasonal_artifact of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :rtype: DestinyArtifactsDestinyArtifactCharacterScoped
        """
        return self._seasonal_artifact

    @seasonal_artifact.setter
    def seasonal_artifact(self, seasonal_artifact):
        """Sets the seasonal_artifact of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        Data related to your progress on the current season's artifact that can vary per character.

        :param seasonal_artifact: The seasonal_artifact of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :type seasonal_artifact: DestinyArtifactsDestinyArtifactCharacterScoped
        """

        self._seasonal_artifact = seasonal_artifact

    @property
    def uninstanced_item_objectives(self):
        """Gets the uninstanced_item_objectives of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        Sometimes, you have items in your inventory that don't have instances, but still have Objective information. This provides you that objective information for uninstanced items.   This dictionary is keyed by the item's hash: which you can use to look up the name and description for the overall task(s) implied by the objective. The value is the list of objectives for this item, and their statuses.

        :return: The uninstanced_item_objectives of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :rtype: Dict[str, List[DestinyQuestsDestinyObjectiveProgress]]
        """
        return self._uninstanced_item_objectives

    @uninstanced_item_objectives.setter
    def uninstanced_item_objectives(self, uninstanced_item_objectives):
        """Sets the uninstanced_item_objectives of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        Sometimes, you have items in your inventory that don't have instances, but still have Objective information. This provides you that objective information for uninstanced items.   This dictionary is keyed by the item's hash: which you can use to look up the name and description for the overall task(s) implied by the objective. The value is the list of objectives for this item, and their statuses.

        :param uninstanced_item_objectives: The uninstanced_item_objectives of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :type uninstanced_item_objectives: Dict[str, List[DestinyQuestsDestinyObjectiveProgress]]
        """

        self._uninstanced_item_objectives = uninstanced_item_objectives

    @property
    def uninstanced_item_perks(self):
        """Gets the uninstanced_item_perks of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        Sometimes, you have items in your inventory that don't have instances, but still have perks (for example: Trials passage cards). This gives you the perk information for uninstanced items.  This dictionary is keyed by item hash, which you can use to look up the corresponding item definition. The value is the list of perks states for the item.

        :return: The uninstanced_item_perks of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :rtype: Dict[str, DestinyEntitiesItemsDestinyItemPerksComponent]
        """
        return self._uninstanced_item_perks

    @uninstanced_item_perks.setter
    def uninstanced_item_perks(self, uninstanced_item_perks):
        """Sets the uninstanced_item_perks of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.

        Sometimes, you have items in your inventory that don't have instances, but still have perks (for example: Trials passage cards). This gives you the perk information for uninstanced items.  This dictionary is keyed by item hash, which you can use to look up the corresponding item definition. The value is the list of perks states for the item.

        :param uninstanced_item_perks: The uninstanced_item_perks of this DestinyEntitiesCharactersDestinyCharacterProgressionComponent.
        :type uninstanced_item_perks: Dict[str, DestinyEntitiesItemsDestinyItemPerksComponent]
        """

        self._uninstanced_item_perks = uninstanced_item_perks
