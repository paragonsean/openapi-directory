# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_challenges_destiny_challenge_status import DestinyChallengesDestinyChallengeStatus
from openapi_server import util


class DestinyDestinyActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_hash: int=None, boolean_activity_options: Dict[str, bool]=None, can_join: bool=None, can_lead: bool=None, challenges: List[DestinyChallengesDestinyChallengeStatus]=None, difficulty_tier: int=None, display_level: int=None, is_completed: bool=None, is_new: bool=None, is_visible: bool=None, loadout_requirement_index: int=None, modifier_hashes: List[int]=None, recommended_light: int=None):
        """DestinyDestinyActivity - a model defined in OpenAPI

        :param activity_hash: The activity_hash of this DestinyDestinyActivity.
        :param boolean_activity_options: The boolean_activity_options of this DestinyDestinyActivity.
        :param can_join: The can_join of this DestinyDestinyActivity.
        :param can_lead: The can_lead of this DestinyDestinyActivity.
        :param challenges: The challenges of this DestinyDestinyActivity.
        :param difficulty_tier: The difficulty_tier of this DestinyDestinyActivity.
        :param display_level: The display_level of this DestinyDestinyActivity.
        :param is_completed: The is_completed of this DestinyDestinyActivity.
        :param is_new: The is_new of this DestinyDestinyActivity.
        :param is_visible: The is_visible of this DestinyDestinyActivity.
        :param loadout_requirement_index: The loadout_requirement_index of this DestinyDestinyActivity.
        :param modifier_hashes: The modifier_hashes of this DestinyDestinyActivity.
        :param recommended_light: The recommended_light of this DestinyDestinyActivity.
        """
        self.openapi_types = {
            'activity_hash': int,
            'boolean_activity_options': Dict[str, bool],
            'can_join': bool,
            'can_lead': bool,
            'challenges': List[DestinyChallengesDestinyChallengeStatus],
            'difficulty_tier': int,
            'display_level': int,
            'is_completed': bool,
            'is_new': bool,
            'is_visible': bool,
            'loadout_requirement_index': int,
            'modifier_hashes': List[int],
            'recommended_light': int
        }

        self.attribute_map = {
            'activity_hash': 'activityHash',
            'boolean_activity_options': 'booleanActivityOptions',
            'can_join': 'canJoin',
            'can_lead': 'canLead',
            'challenges': 'challenges',
            'difficulty_tier': 'difficultyTier',
            'display_level': 'displayLevel',
            'is_completed': 'isCompleted',
            'is_new': 'isNew',
            'is_visible': 'isVisible',
            'loadout_requirement_index': 'loadoutRequirementIndex',
            'modifier_hashes': 'modifierHashes',
            'recommended_light': 'recommendedLight'
        }

        self._activity_hash = activity_hash
        self._boolean_activity_options = boolean_activity_options
        self._can_join = can_join
        self._can_lead = can_lead
        self._challenges = challenges
        self._difficulty_tier = difficulty_tier
        self._display_level = display_level
        self._is_completed = is_completed
        self._is_new = is_new
        self._is_visible = is_visible
        self._loadout_requirement_index = loadout_requirement_index
        self._modifier_hashes = modifier_hashes
        self._recommended_light = recommended_light

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDestinyActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.DestinyActivity of this DestinyDestinyActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_hash(self):
        """Gets the activity_hash of this DestinyDestinyActivity.

        The hash identifier of the Activity. Use this to look up the DestinyActivityDefinition of the activity.

        :return: The activity_hash of this DestinyDestinyActivity.
        :rtype: int
        """
        return self._activity_hash

    @activity_hash.setter
    def activity_hash(self, activity_hash):
        """Sets the activity_hash of this DestinyDestinyActivity.

        The hash identifier of the Activity. Use this to look up the DestinyActivityDefinition of the activity.

        :param activity_hash: The activity_hash of this DestinyDestinyActivity.
        :type activity_hash: int
        """

        self._activity_hash = activity_hash

    @property
    def boolean_activity_options(self):
        """Gets the boolean_activity_options of this DestinyDestinyActivity.

        The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).  As a concrete example of this data, the hashes you get for Raids will correspond to the currently active \"Challenge Mode\".  We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the \"option\" that is enabled/disabled) and the value (whether it's enabled or disabled presently)  On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation.

        :return: The boolean_activity_options of this DestinyDestinyActivity.
        :rtype: Dict[str, bool]
        """
        return self._boolean_activity_options

    @boolean_activity_options.setter
    def boolean_activity_options(self, boolean_activity_options):
        """Sets the boolean_activity_options of this DestinyDestinyActivity.

        The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).  As a concrete example of this data, the hashes you get for Raids will correspond to the currently active \"Challenge Mode\".  We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the \"option\" that is enabled/disabled) and the value (whether it's enabled or disabled presently)  On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation.

        :param boolean_activity_options: The boolean_activity_options of this DestinyDestinyActivity.
        :type boolean_activity_options: Dict[str, bool]
        """

        self._boolean_activity_options = boolean_activity_options

    @property
    def can_join(self):
        """Gets the can_join of this DestinyDestinyActivity.

        If true, the user is allowed to join with another Fireteam in this activity.

        :return: The can_join of this DestinyDestinyActivity.
        :rtype: bool
        """
        return self._can_join

    @can_join.setter
    def can_join(self, can_join):
        """Sets the can_join of this DestinyDestinyActivity.

        If true, the user is allowed to join with another Fireteam in this activity.

        :param can_join: The can_join of this DestinyDestinyActivity.
        :type can_join: bool
        """

        self._can_join = can_join

    @property
    def can_lead(self):
        """Gets the can_lead of this DestinyDestinyActivity.

        If true, the user is allowed to lead a Fireteam into this activity.

        :return: The can_lead of this DestinyDestinyActivity.
        :rtype: bool
        """
        return self._can_lead

    @can_lead.setter
    def can_lead(self, can_lead):
        """Sets the can_lead of this DestinyDestinyActivity.

        If true, the user is allowed to lead a Fireteam into this activity.

        :param can_lead: The can_lead of this DestinyDestinyActivity.
        :type can_lead: bool
        """

        self._can_lead = can_lead

    @property
    def challenges(self):
        """Gets the challenges of this DestinyDestinyActivity.


        :return: The challenges of this DestinyDestinyActivity.
        :rtype: List[DestinyChallengesDestinyChallengeStatus]
        """
        return self._challenges

    @challenges.setter
    def challenges(self, challenges):
        """Sets the challenges of this DestinyDestinyActivity.


        :param challenges: The challenges of this DestinyDestinyActivity.
        :type challenges: List[DestinyChallengesDestinyChallengeStatus]
        """

        self._challenges = challenges

    @property
    def difficulty_tier(self):
        """Gets the difficulty_tier of this DestinyDestinyActivity.

        A DestinyActivityDifficultyTier enum value indicating the difficulty of the activity.

        :return: The difficulty_tier of this DestinyDestinyActivity.
        :rtype: int
        """
        return self._difficulty_tier

    @difficulty_tier.setter
    def difficulty_tier(self, difficulty_tier):
        """Sets the difficulty_tier of this DestinyDestinyActivity.

        A DestinyActivityDifficultyTier enum value indicating the difficulty of the activity.

        :param difficulty_tier: The difficulty_tier of this DestinyDestinyActivity.
        :type difficulty_tier: int
        """

        self._difficulty_tier = difficulty_tier

    @property
    def display_level(self):
        """Gets the display_level of this DestinyDestinyActivity.

        The difficulty level of the activity, if applicable.

        :return: The display_level of this DestinyDestinyActivity.
        :rtype: int
        """
        return self._display_level

    @display_level.setter
    def display_level(self, display_level):
        """Sets the display_level of this DestinyDestinyActivity.

        The difficulty level of the activity, if applicable.

        :param display_level: The display_level of this DestinyDestinyActivity.
        :type display_level: int
        """

        self._display_level = display_level

    @property
    def is_completed(self):
        """Gets the is_completed of this DestinyDestinyActivity.

        If true, we both have the ability to know that the user has completed this activity and they have completed it. Unfortunately, we can't necessarily know this for all activities. As such, this should probably only be used if you already know in advance which specific activities you wish to check.

        :return: The is_completed of this DestinyDestinyActivity.
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed):
        """Sets the is_completed of this DestinyDestinyActivity.

        If true, we both have the ability to know that the user has completed this activity and they have completed it. Unfortunately, we can't necessarily know this for all activities. As such, this should probably only be used if you already know in advance which specific activities you wish to check.

        :param is_completed: The is_completed of this DestinyDestinyActivity.
        :type is_completed: bool
        """

        self._is_completed = is_completed

    @property
    def is_new(self):
        """Gets the is_new of this DestinyDestinyActivity.

        If true, then the activity should have a \"new\" indicator in the Director UI.

        :return: The is_new of this DestinyDestinyActivity.
        :rtype: bool
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this DestinyDestinyActivity.

        If true, then the activity should have a \"new\" indicator in the Director UI.

        :param is_new: The is_new of this DestinyDestinyActivity.
        :type is_new: bool
        """

        self._is_new = is_new

    @property
    def is_visible(self):
        """Gets the is_visible of this DestinyDestinyActivity.

        If true, the user should be able to see this activity.

        :return: The is_visible of this DestinyDestinyActivity.
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this DestinyDestinyActivity.

        If true, the user should be able to see this activity.

        :param is_visible: The is_visible of this DestinyDestinyActivity.
        :type is_visible: bool
        """

        self._is_visible = is_visible

    @property
    def loadout_requirement_index(self):
        """Gets the loadout_requirement_index of this DestinyDestinyActivity.

        If returned, this is the index into the DestinyActivityDefinition's \"loadouts\" property, indicating the currently active loadout requirements.

        :return: The loadout_requirement_index of this DestinyDestinyActivity.
        :rtype: int
        """
        return self._loadout_requirement_index

    @loadout_requirement_index.setter
    def loadout_requirement_index(self, loadout_requirement_index):
        """Sets the loadout_requirement_index of this DestinyDestinyActivity.

        If returned, this is the index into the DestinyActivityDefinition's \"loadouts\" property, indicating the currently active loadout requirements.

        :param loadout_requirement_index: The loadout_requirement_index of this DestinyDestinyActivity.
        :type loadout_requirement_index: int
        """

        self._loadout_requirement_index = loadout_requirement_index

    @property
    def modifier_hashes(self):
        """Gets the modifier_hashes of this DestinyDestinyActivity.

        If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.

        :return: The modifier_hashes of this DestinyDestinyActivity.
        :rtype: List[int]
        """
        return self._modifier_hashes

    @modifier_hashes.setter
    def modifier_hashes(self, modifier_hashes):
        """Sets the modifier_hashes of this DestinyDestinyActivity.

        If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.

        :param modifier_hashes: The modifier_hashes of this DestinyDestinyActivity.
        :type modifier_hashes: List[int]
        """

        self._modifier_hashes = modifier_hashes

    @property
    def recommended_light(self):
        """Gets the recommended_light of this DestinyDestinyActivity.

        The recommended light level for the activity, if applicable.

        :return: The recommended_light of this DestinyDestinyActivity.
        :rtype: int
        """
        return self._recommended_light

    @recommended_light.setter
    def recommended_light(self, recommended_light):
        """Sets the recommended_light of this DestinyDestinyActivity.

        The recommended light level for the activity, if applicable.

        :param recommended_light: The recommended_light of this DestinyDestinyActivity.
        :type recommended_light: int
        """

        self._recommended_light = recommended_light
