# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server import util


class DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity_stat_hash: int=None, cost_stat_hash: int=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, enum_value: int=None, hash: int=None, index: int=None, redacted: bool=None, show_icon: bool=None, transparent_icon_path: str=None):
        """DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition - a model defined in OpenAPI

        :param capacity_stat_hash: The capacity_stat_hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :param cost_stat_hash: The cost_stat_hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :param enum_value: The enum_value of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :param hash: The hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :param index: The index of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :param redacted: The redacted of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :param show_icon: The show_icon of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :param transparent_icon_path: The transparent_icon_path of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        """
        self.openapi_types = {
            'capacity_stat_hash': int,
            'cost_stat_hash': int,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'enum_value': int,
            'hash': int,
            'index': int,
            'redacted': bool,
            'show_icon': bool,
            'transparent_icon_path': str
        }

        self.attribute_map = {
            'capacity_stat_hash': 'capacityStatHash',
            'cost_stat_hash': 'costStatHash',
            'display_properties': 'displayProperties',
            'enum_value': 'enumValue',
            'hash': 'hash',
            'index': 'index',
            'redacted': 'redacted',
            'show_icon': 'showIcon',
            'transparent_icon_path': 'transparentIconPath'
        }

        self._capacity_stat_hash = capacity_stat_hash
        self._cost_stat_hash = cost_stat_hash
        self._display_properties = display_properties
        self._enum_value = enum_value
        self._hash = hash
        self._index = index
        self._redacted = redacted
        self._show_icon = show_icon
        self._transparent_icon_path = transparent_icon_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.EnergyTypes.DestinyEnergyTypeDefinition of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity_stat_hash(self):
        """Gets the capacity_stat_hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        If this Energy Type can be used for determining the Type of Energy that an item can consume, this is the hash for the DestinyInvestmentStatDefinition that represents the stat which holds the Capacity for that energy type. (Note that this is optional because \"Any\" is a valid cost, but not valid for Capacity - an Armor must have a specific Energy Type for determining the energy type that the Armor is restricted to use)

        :return: The capacity_stat_hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :rtype: int
        """
        return self._capacity_stat_hash

    @capacity_stat_hash.setter
    def capacity_stat_hash(self, capacity_stat_hash):
        """Sets the capacity_stat_hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        If this Energy Type can be used for determining the Type of Energy that an item can consume, this is the hash for the DestinyInvestmentStatDefinition that represents the stat which holds the Capacity for that energy type. (Note that this is optional because \"Any\" is a valid cost, but not valid for Capacity - an Armor must have a specific Energy Type for determining the energy type that the Armor is restricted to use)

        :param capacity_stat_hash: The capacity_stat_hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :type capacity_stat_hash: int
        """

        self._capacity_stat_hash = capacity_stat_hash

    @property
    def cost_stat_hash(self):
        """Gets the cost_stat_hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        If this Energy Type can be used as a cost to pay for socketing Armor 2.0 items, this is the hash for the DestinyInvestmentStatDefinition that stores the plug's raw cost.

        :return: The cost_stat_hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :rtype: int
        """
        return self._cost_stat_hash

    @cost_stat_hash.setter
    def cost_stat_hash(self, cost_stat_hash):
        """Sets the cost_stat_hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        If this Energy Type can be used as a cost to pay for socketing Armor 2.0 items, this is the hash for the DestinyInvestmentStatDefinition that stores the plug's raw cost.

        :param cost_stat_hash: The cost_stat_hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :type cost_stat_hash: int
        """

        self._cost_stat_hash = cost_stat_hash

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        The description of the energy type, icon etc...

        :return: The display_properties of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        The description of the energy type, icon etc...

        :param display_properties: The display_properties of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def enum_value(self):
        """Gets the enum_value of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        We have an enumeration for Energy types for quick reference. This is the current definition's Energy type enum value.

        :return: The enum_value of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :rtype: int
        """
        return self._enum_value

    @enum_value.setter
    def enum_value(self, enum_value):
        """Sets the enum_value of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        We have an enumeration for Energy types for quick reference. This is the current definition's Energy type enum value.

        :param enum_value: The enum_value of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :type enum_value: int
        """

        self._enum_value = enum_value

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :type index: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :type redacted: bool
        """

        self._redacted = redacted

    @property
    def show_icon(self):
        """Gets the show_icon of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        If TRUE, the game shows this Energy type's icon. Otherwise, it doesn't. Whether you show it or not is up to you.

        :return: The show_icon of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :rtype: bool
        """
        return self._show_icon

    @show_icon.setter
    def show_icon(self, show_icon):
        """Sets the show_icon of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        If TRUE, the game shows this Energy type's icon. Otherwise, it doesn't. Whether you show it or not is up to you.

        :param show_icon: The show_icon of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :type show_icon: bool
        """

        self._show_icon = show_icon

    @property
    def transparent_icon_path(self):
        """Gets the transparent_icon_path of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        A variant of the icon that is transparent and colorless.

        :return: The transparent_icon_path of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :rtype: str
        """
        return self._transparent_icon_path

    @transparent_icon_path.setter
    def transparent_icon_path(self, transparent_icon_path):
        """Sets the transparent_icon_path of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.

        A variant of the icon that is transparent and colorless.

        :param transparent_icon_path: The transparent_icon_path of this DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.
        :type transparent_icon_path: str
        """

        self._transparent_icon_path = transparent_icon_path
