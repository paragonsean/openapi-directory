# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinyDefinitionsRecordsDestinyRecordCompletionBlock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, score_value: int=None, partial_completion_objective_count_threshold: int=None, should_fire_toast: bool=None, toast_style: int=None):
        """DestinyDefinitionsRecordsDestinyRecordCompletionBlock - a model defined in OpenAPI

        :param score_value: The score_value of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        :param partial_completion_objective_count_threshold: The partial_completion_objective_count_threshold of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        :param should_fire_toast: The should_fire_toast of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        :param toast_style: The toast_style of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        """
        self.openapi_types = {
            'score_value': int,
            'partial_completion_objective_count_threshold': int,
            'should_fire_toast': bool,
            'toast_style': int
        }

        self.attribute_map = {
            'score_value': 'ScoreValue',
            'partial_completion_objective_count_threshold': 'partialCompletionObjectiveCountThreshold',
            'should_fire_toast': 'shouldFireToast',
            'toast_style': 'toastStyle'
        }

        self._score_value = score_value
        self._partial_completion_objective_count_threshold = partial_completion_objective_count_threshold
        self._should_fire_toast = should_fire_toast
        self._toast_style = toast_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsRecordsDestinyRecordCompletionBlock':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.Records.DestinyRecordCompletionBlock of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def score_value(self):
        """Gets the score_value of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.


        :return: The score_value of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        :rtype: int
        """
        return self._score_value

    @score_value.setter
    def score_value(self, score_value):
        """Sets the score_value of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.


        :param score_value: The score_value of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        :type score_value: int
        """

        self._score_value = score_value

    @property
    def partial_completion_objective_count_threshold(self):
        """Gets the partial_completion_objective_count_threshold of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.

        The number of objectives that must be completed before the objective is considered \"complete\"

        :return: The partial_completion_objective_count_threshold of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        :rtype: int
        """
        return self._partial_completion_objective_count_threshold

    @partial_completion_objective_count_threshold.setter
    def partial_completion_objective_count_threshold(self, partial_completion_objective_count_threshold):
        """Sets the partial_completion_objective_count_threshold of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.

        The number of objectives that must be completed before the objective is considered \"complete\"

        :param partial_completion_objective_count_threshold: The partial_completion_objective_count_threshold of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        :type partial_completion_objective_count_threshold: int
        """

        self._partial_completion_objective_count_threshold = partial_completion_objective_count_threshold

    @property
    def should_fire_toast(self):
        """Gets the should_fire_toast of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.


        :return: The should_fire_toast of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        :rtype: bool
        """
        return self._should_fire_toast

    @should_fire_toast.setter
    def should_fire_toast(self, should_fire_toast):
        """Sets the should_fire_toast of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.


        :param should_fire_toast: The should_fire_toast of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        :type should_fire_toast: bool
        """

        self._should_fire_toast = should_fire_toast

    @property
    def toast_style(self):
        """Gets the toast_style of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.


        :return: The toast_style of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        :rtype: int
        """
        return self._toast_style

    @toast_style.setter
    def toast_style(self, toast_style):
        """Sets the toast_style of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.


        :param toast_style: The toast_style of this DestinyDefinitionsRecordsDestinyRecordCompletionBlock.
        :type toast_style: int
        """

        self._toast_style = toast_style
