# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_destiny_item_creation_entry_level_definition import DestinyDefinitionsDestinyItemCreationEntryLevelDefinition
from openapi_server.models.destiny_definitions_destiny_vendor_item_quantity import DestinyDefinitionsDestinyVendorItemQuantity
from openapi_server.models.destiny_definitions_destiny_vendor_item_socket_override import DestinyDefinitionsDestinyVendorItemSocketOverride
from openapi_server.models.destiny_definitions_destiny_vendor_sale_item_action_block_definition import DestinyDefinitionsDestinyVendorSaleItemActionBlockDefinition
from openapi_server import util


class DestinyDefinitionsDestinyVendorItemDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: DestinyDefinitionsDestinyVendorSaleItemActionBlockDefinition=None, category_index: int=None, creation_levels: List[DestinyDefinitionsDestinyItemCreationEntryLevelDefinition]=None, currencies: List[DestinyDefinitionsDestinyVendorItemQuantity]=None, display_category: str=None, display_category_index: int=None, exclusivity: int=None, expiration_tooltip: str=None, failure_indexes: List[int]=None, inventory_bucket_hash: int=None, is_crm: bool=None, is_offer: bool=None, item_hash: int=None, maximum_level: int=None, minimum_level: int=None, original_category_index: int=None, purchasable_scope: int=None, quantity: int=None, redirect_to_sale_indexes: List[int]=None, refund_policy: int=None, refund_time_limit: int=None, socket_overrides: List[DestinyDefinitionsDestinyVendorItemSocketOverride]=None, sort_value: int=None, unpurchasable: bool=None, vendor_item_index: int=None, visibility_scope: int=None):
        """DestinyDefinitionsDestinyVendorItemDefinition - a model defined in OpenAPI

        :param action: The action of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param category_index: The category_index of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param creation_levels: The creation_levels of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param currencies: The currencies of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param display_category: The display_category of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param display_category_index: The display_category_index of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param exclusivity: The exclusivity of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param expiration_tooltip: The expiration_tooltip of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param failure_indexes: The failure_indexes of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param inventory_bucket_hash: The inventory_bucket_hash of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param is_crm: The is_crm of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param is_offer: The is_offer of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param item_hash: The item_hash of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param maximum_level: The maximum_level of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param minimum_level: The minimum_level of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param original_category_index: The original_category_index of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param purchasable_scope: The purchasable_scope of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param quantity: The quantity of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param redirect_to_sale_indexes: The redirect_to_sale_indexes of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param refund_policy: The refund_policy of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param refund_time_limit: The refund_time_limit of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param socket_overrides: The socket_overrides of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param sort_value: The sort_value of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param unpurchasable: The unpurchasable of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param vendor_item_index: The vendor_item_index of this DestinyDefinitionsDestinyVendorItemDefinition.
        :param visibility_scope: The visibility_scope of this DestinyDefinitionsDestinyVendorItemDefinition.
        """
        self.openapi_types = {
            'action': DestinyDefinitionsDestinyVendorSaleItemActionBlockDefinition,
            'category_index': int,
            'creation_levels': List[DestinyDefinitionsDestinyItemCreationEntryLevelDefinition],
            'currencies': List[DestinyDefinitionsDestinyVendorItemQuantity],
            'display_category': str,
            'display_category_index': int,
            'exclusivity': int,
            'expiration_tooltip': str,
            'failure_indexes': List[int],
            'inventory_bucket_hash': int,
            'is_crm': bool,
            'is_offer': bool,
            'item_hash': int,
            'maximum_level': int,
            'minimum_level': int,
            'original_category_index': int,
            'purchasable_scope': int,
            'quantity': int,
            'redirect_to_sale_indexes': List[int],
            'refund_policy': int,
            'refund_time_limit': int,
            'socket_overrides': List[DestinyDefinitionsDestinyVendorItemSocketOverride],
            'sort_value': int,
            'unpurchasable': bool,
            'vendor_item_index': int,
            'visibility_scope': int
        }

        self.attribute_map = {
            'action': 'action',
            'category_index': 'categoryIndex',
            'creation_levels': 'creationLevels',
            'currencies': 'currencies',
            'display_category': 'displayCategory',
            'display_category_index': 'displayCategoryIndex',
            'exclusivity': 'exclusivity',
            'expiration_tooltip': 'expirationTooltip',
            'failure_indexes': 'failureIndexes',
            'inventory_bucket_hash': 'inventoryBucketHash',
            'is_crm': 'isCrm',
            'is_offer': 'isOffer',
            'item_hash': 'itemHash',
            'maximum_level': 'maximumLevel',
            'minimum_level': 'minimumLevel',
            'original_category_index': 'originalCategoryIndex',
            'purchasable_scope': 'purchasableScope',
            'quantity': 'quantity',
            'redirect_to_sale_indexes': 'redirectToSaleIndexes',
            'refund_policy': 'refundPolicy',
            'refund_time_limit': 'refundTimeLimit',
            'socket_overrides': 'socketOverrides',
            'sort_value': 'sortValue',
            'unpurchasable': 'unpurchasable',
            'vendor_item_index': 'vendorItemIndex',
            'visibility_scope': 'visibilityScope'
        }

        self._action = action
        self._category_index = category_index
        self._creation_levels = creation_levels
        self._currencies = currencies
        self._display_category = display_category
        self._display_category_index = display_category_index
        self._exclusivity = exclusivity
        self._expiration_tooltip = expiration_tooltip
        self._failure_indexes = failure_indexes
        self._inventory_bucket_hash = inventory_bucket_hash
        self._is_crm = is_crm
        self._is_offer = is_offer
        self._item_hash = item_hash
        self._maximum_level = maximum_level
        self._minimum_level = minimum_level
        self._original_category_index = original_category_index
        self._purchasable_scope = purchasable_scope
        self._quantity = quantity
        self._redirect_to_sale_indexes = redirect_to_sale_indexes
        self._refund_policy = refund_policy
        self._refund_time_limit = refund_time_limit
        self._socket_overrides = socket_overrides
        self._sort_value = sort_value
        self._unpurchasable = unpurchasable
        self._vendor_item_index = vendor_item_index
        self._visibility_scope = visibility_scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyVendorItemDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyVendorItemDefinition of this DestinyDefinitionsDestinyVendorItemDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this DestinyDefinitionsDestinyVendorItemDefinition.

        The action to be performed when purchasing the item, if it's not just \"buy\".

        :return: The action of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: DestinyDefinitionsDestinyVendorSaleItemActionBlockDefinition
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DestinyDefinitionsDestinyVendorItemDefinition.

        The action to be performed when purchasing the item, if it's not just \"buy\".

        :param action: The action of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type action: DestinyDefinitionsDestinyVendorSaleItemActionBlockDefinition
        """

        self._action = action

    @property
    def category_index(self):
        """Gets the category_index of this DestinyDefinitionsDestinyVendorItemDefinition.

        The index into the DestinyVendorDefinition.categories array, so you can find the category associated with this item.

        :return: The category_index of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._category_index

    @category_index.setter
    def category_index(self, category_index):
        """Sets the category_index of this DestinyDefinitionsDestinyVendorItemDefinition.

        The index into the DestinyVendorDefinition.categories array, so you can find the category associated with this item.

        :param category_index: The category_index of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type category_index: int
        """

        self._category_index = category_index

    @property
    def creation_levels(self):
        """Gets the creation_levels of this DestinyDefinitionsDestinyVendorItemDefinition.

        The Default level at which the item will spawn. Almost always driven by an adjusto these days. Ideally should be singular. It's a long story how this ended up as a list, but there is always either going to be 0:1 of these entities.

        :return: The creation_levels of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: List[DestinyDefinitionsDestinyItemCreationEntryLevelDefinition]
        """
        return self._creation_levels

    @creation_levels.setter
    def creation_levels(self, creation_levels):
        """Sets the creation_levels of this DestinyDefinitionsDestinyVendorItemDefinition.

        The Default level at which the item will spawn. Almost always driven by an adjusto these days. Ideally should be singular. It's a long story how this ended up as a list, but there is always either going to be 0:1 of these entities.

        :param creation_levels: The creation_levels of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type creation_levels: List[DestinyDefinitionsDestinyItemCreationEntryLevelDefinition]
        """

        self._creation_levels = creation_levels

    @property
    def currencies(self):
        """Gets the currencies of this DestinyDefinitionsDestinyVendorItemDefinition.

        This is a pre-compiled aggregation of item value and priceOverrideList, so that we have one place to check for what the purchaser must pay for the item. Use this instead of trying to piece together the price separately.  The somewhat crappy part about this is that, now that item quantity overrides have dynamic modifiers, this will not necessarily be statically true. If you were using this instead of live data, switch to using live data.

        :return: The currencies of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: List[DestinyDefinitionsDestinyVendorItemQuantity]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this DestinyDefinitionsDestinyVendorItemDefinition.

        This is a pre-compiled aggregation of item value and priceOverrideList, so that we have one place to check for what the purchaser must pay for the item. Use this instead of trying to piece together the price separately.  The somewhat crappy part about this is that, now that item quantity overrides have dynamic modifiers, this will not necessarily be statically true. If you were using this instead of live data, switch to using live data.

        :param currencies: The currencies of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type currencies: List[DestinyDefinitionsDestinyVendorItemQuantity]
        """

        self._currencies = currencies

    @property
    def display_category(self):
        """Gets the display_category of this DestinyDefinitionsDestinyVendorItemDefinition.

        The string identifier for the category selling this item.

        :return: The display_category of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: str
        """
        return self._display_category

    @display_category.setter
    def display_category(self, display_category):
        """Sets the display_category of this DestinyDefinitionsDestinyVendorItemDefinition.

        The string identifier for the category selling this item.

        :param display_category: The display_category of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type display_category: str
        """

        self._display_category = display_category

    @property
    def display_category_index(self):
        """Gets the display_category_index of this DestinyDefinitionsDestinyVendorItemDefinition.

        This is an index specifically into the display category, as opposed to the server-side Categories (which do not need to match or pair with each other in any way: server side categories are really just structures for common validation. Display Category will let us more easily categorize items visually)

        :return: The display_category_index of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._display_category_index

    @display_category_index.setter
    def display_category_index(self, display_category_index):
        """Sets the display_category_index of this DestinyDefinitionsDestinyVendorItemDefinition.

        This is an index specifically into the display category, as opposed to the server-side Categories (which do not need to match or pair with each other in any way: server side categories are really just structures for common validation. Display Category will let us more easily categorize items visually)

        :param display_category_index: The display_category_index of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type display_category_index: int
        """

        self._display_category_index = display_category_index

    @property
    def exclusivity(self):
        """Gets the exclusivity of this DestinyDefinitionsDestinyVendorItemDefinition.

        If this item can only be purchased by a given platform, this indicates the platform to which it is restricted.

        :return: The exclusivity of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._exclusivity

    @exclusivity.setter
    def exclusivity(self, exclusivity):
        """Sets the exclusivity of this DestinyDefinitionsDestinyVendorItemDefinition.

        If this item can only be purchased by a given platform, this indicates the platform to which it is restricted.

        :param exclusivity: The exclusivity of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type exclusivity: int
        """

        self._exclusivity = exclusivity

    @property
    def expiration_tooltip(self):
        """Gets the expiration_tooltip of this DestinyDefinitionsDestinyVendorItemDefinition.

        If this item can expire, this is the tooltip message to show with its expiration info.

        :return: The expiration_tooltip of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: str
        """
        return self._expiration_tooltip

    @expiration_tooltip.setter
    def expiration_tooltip(self, expiration_tooltip):
        """Sets the expiration_tooltip of this DestinyDefinitionsDestinyVendorItemDefinition.

        If this item can expire, this is the tooltip message to show with its expiration info.

        :param expiration_tooltip: The expiration_tooltip of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type expiration_tooltip: str
        """

        self._expiration_tooltip = expiration_tooltip

    @property
    def failure_indexes(self):
        """Gets the failure_indexes of this DestinyDefinitionsDestinyVendorItemDefinition.

        An list of indexes into the DestinyVendorDefinition.failureStrings array, indicating the possible failure strings that can be relevant for this item.

        :return: The failure_indexes of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: List[int]
        """
        return self._failure_indexes

    @failure_indexes.setter
    def failure_indexes(self, failure_indexes):
        """Sets the failure_indexes of this DestinyDefinitionsDestinyVendorItemDefinition.

        An list of indexes into the DestinyVendorDefinition.failureStrings array, indicating the possible failure strings that can be relevant for this item.

        :param failure_indexes: The failure_indexes of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type failure_indexes: List[int]
        """

        self._failure_indexes = failure_indexes

    @property
    def inventory_bucket_hash(self):
        """Gets the inventory_bucket_hash of this DestinyDefinitionsDestinyVendorItemDefinition.

        The inventory bucket into which this item will be placed upon purchase.

        :return: The inventory_bucket_hash of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._inventory_bucket_hash

    @inventory_bucket_hash.setter
    def inventory_bucket_hash(self, inventory_bucket_hash):
        """Sets the inventory_bucket_hash of this DestinyDefinitionsDestinyVendorItemDefinition.

        The inventory bucket into which this item will be placed upon purchase.

        :param inventory_bucket_hash: The inventory_bucket_hash of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type inventory_bucket_hash: int
        """

        self._inventory_bucket_hash = inventory_bucket_hash

    @property
    def is_crm(self):
        """Gets the is_crm of this DestinyDefinitionsDestinyVendorItemDefinition.

        If this sale can only be performed as the result of receiving a CRM offer, this is true.

        :return: The is_crm of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: bool
        """
        return self._is_crm

    @is_crm.setter
    def is_crm(self, is_crm):
        """Sets the is_crm of this DestinyDefinitionsDestinyVendorItemDefinition.

        If this sale can only be performed as the result of receiving a CRM offer, this is true.

        :param is_crm: The is_crm of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type is_crm: bool
        """

        self._is_crm = is_crm

    @property
    def is_offer(self):
        """Gets the is_offer of this DestinyDefinitionsDestinyVendorItemDefinition.

        If this sale can only be performed as the result of an offer check, this is true.

        :return: The is_offer of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: bool
        """
        return self._is_offer

    @is_offer.setter
    def is_offer(self, is_offer):
        """Sets the is_offer of this DestinyDefinitionsDestinyVendorItemDefinition.

        If this sale can only be performed as the result of an offer check, this is true.

        :param is_offer: The is_offer of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type is_offer: bool
        """

        self._is_offer = is_offer

    @property
    def item_hash(self):
        """Gets the item_hash of this DestinyDefinitionsDestinyVendorItemDefinition.

        The hash identifier of the item being sold (DestinyInventoryItemDefinition).  Note that a vendor can sell the same item in multiple ways, so don't assume that itemHash is a unique identifier for this entity.

        :return: The item_hash of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._item_hash

    @item_hash.setter
    def item_hash(self, item_hash):
        """Sets the item_hash of this DestinyDefinitionsDestinyVendorItemDefinition.

        The hash identifier of the item being sold (DestinyInventoryItemDefinition).  Note that a vendor can sell the same item in multiple ways, so don't assume that itemHash is a unique identifier for this entity.

        :param item_hash: The item_hash of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type item_hash: int
        """

        self._item_hash = item_hash

    @property
    def maximum_level(self):
        """Gets the maximum_level of this DestinyDefinitionsDestinyVendorItemDefinition.

        The maximum character level at which this item is available for sale.

        :return: The maximum_level of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._maximum_level

    @maximum_level.setter
    def maximum_level(self, maximum_level):
        """Sets the maximum_level of this DestinyDefinitionsDestinyVendorItemDefinition.

        The maximum character level at which this item is available for sale.

        :param maximum_level: The maximum_level of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type maximum_level: int
        """

        self._maximum_level = maximum_level

    @property
    def minimum_level(self):
        """Gets the minimum_level of this DestinyDefinitionsDestinyVendorItemDefinition.

        The minimum character level at which this item is available for sale.

        :return: The minimum_level of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._minimum_level

    @minimum_level.setter
    def minimum_level(self, minimum_level):
        """Sets the minimum_level of this DestinyDefinitionsDestinyVendorItemDefinition.

        The minimum character level at which this item is available for sale.

        :param minimum_level: The minimum_level of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type minimum_level: int
        """

        self._minimum_level = minimum_level

    @property
    def original_category_index(self):
        """Gets the original_category_index of this DestinyDefinitionsDestinyVendorItemDefinition.

        Same as above, but for the original category indexes.

        :return: The original_category_index of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._original_category_index

    @original_category_index.setter
    def original_category_index(self, original_category_index):
        """Sets the original_category_index of this DestinyDefinitionsDestinyVendorItemDefinition.

        Same as above, but for the original category indexes.

        :param original_category_index: The original_category_index of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type original_category_index: int
        """

        self._original_category_index = original_category_index

    @property
    def purchasable_scope(self):
        """Gets the purchasable_scope of this DestinyDefinitionsDestinyVendorItemDefinition.

        Similar to visibilityScope, it represents the most restrictive scope that determines whether the item can be purchased. It will at least be as restrictive as visibilityScope, but could be more restrictive if the item has additional purchase requirements beyond whether it is merely visible or not.  See DestinyGatingScope's documentation for more information.

        :return: The purchasable_scope of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._purchasable_scope

    @purchasable_scope.setter
    def purchasable_scope(self, purchasable_scope):
        """Sets the purchasable_scope of this DestinyDefinitionsDestinyVendorItemDefinition.

        Similar to visibilityScope, it represents the most restrictive scope that determines whether the item can be purchased. It will at least be as restrictive as visibilityScope, but could be more restrictive if the item has additional purchase requirements beyond whether it is merely visible or not.  See DestinyGatingScope's documentation for more information.

        :param purchasable_scope: The purchasable_scope of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type purchasable_scope: int
        """

        self._purchasable_scope = purchasable_scope

    @property
    def quantity(self):
        """Gets the quantity of this DestinyDefinitionsDestinyVendorItemDefinition.

        The amount you will recieve of the item described in itemHash if you make the purchase.

        :return: The quantity of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this DestinyDefinitionsDestinyVendorItemDefinition.

        The amount you will recieve of the item described in itemHash if you make the purchase.

        :param quantity: The quantity of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def redirect_to_sale_indexes(self):
        """Gets the redirect_to_sale_indexes of this DestinyDefinitionsDestinyVendorItemDefinition.

        If this is populated, the purchase of this item should redirect to purchasing these other items instead.

        :return: The redirect_to_sale_indexes of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: List[int]
        """
        return self._redirect_to_sale_indexes

    @redirect_to_sale_indexes.setter
    def redirect_to_sale_indexes(self, redirect_to_sale_indexes):
        """Sets the redirect_to_sale_indexes of this DestinyDefinitionsDestinyVendorItemDefinition.

        If this is populated, the purchase of this item should redirect to purchasing these other items instead.

        :param redirect_to_sale_indexes: The redirect_to_sale_indexes of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type redirect_to_sale_indexes: List[int]
        """

        self._redirect_to_sale_indexes = redirect_to_sale_indexes

    @property
    def refund_policy(self):
        """Gets the refund_policy of this DestinyDefinitionsDestinyVendorItemDefinition.

        If this item can be refunded, this is the policy for what will be refundd, how, and in what time period.

        :return: The refund_policy of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._refund_policy

    @refund_policy.setter
    def refund_policy(self, refund_policy):
        """Sets the refund_policy of this DestinyDefinitionsDestinyVendorItemDefinition.

        If this item can be refunded, this is the policy for what will be refundd, how, and in what time period.

        :param refund_policy: The refund_policy of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type refund_policy: int
        """

        self._refund_policy = refund_policy

    @property
    def refund_time_limit(self):
        """Gets the refund_time_limit of this DestinyDefinitionsDestinyVendorItemDefinition.

        The amount of time before refundability of the newly purchased item will expire.

        :return: The refund_time_limit of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._refund_time_limit

    @refund_time_limit.setter
    def refund_time_limit(self, refund_time_limit):
        """Sets the refund_time_limit of this DestinyDefinitionsDestinyVendorItemDefinition.

        The amount of time before refundability of the newly purchased item will expire.

        :param refund_time_limit: The refund_time_limit of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type refund_time_limit: int
        """

        self._refund_time_limit = refund_time_limit

    @property
    def socket_overrides(self):
        """Gets the socket_overrides of this DestinyDefinitionsDestinyVendorItemDefinition.


        :return: The socket_overrides of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: List[DestinyDefinitionsDestinyVendorItemSocketOverride]
        """
        return self._socket_overrides

    @socket_overrides.setter
    def socket_overrides(self, socket_overrides):
        """Sets the socket_overrides of this DestinyDefinitionsDestinyVendorItemDefinition.


        :param socket_overrides: The socket_overrides of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type socket_overrides: List[DestinyDefinitionsDestinyVendorItemSocketOverride]
        """

        self._socket_overrides = socket_overrides

    @property
    def sort_value(self):
        """Gets the sort_value of this DestinyDefinitionsDestinyVendorItemDefinition.

        *if* the category this item is in supports non-default sorting, this value should represent the sorting value to use, pre-processed and ready to go.

        :return: The sort_value of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._sort_value

    @sort_value.setter
    def sort_value(self, sort_value):
        """Sets the sort_value of this DestinyDefinitionsDestinyVendorItemDefinition.

        *if* the category this item is in supports non-default sorting, this value should represent the sorting value to use, pre-processed and ready to go.

        :param sort_value: The sort_value of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type sort_value: int
        """

        self._sort_value = sort_value

    @property
    def unpurchasable(self):
        """Gets the unpurchasable of this DestinyDefinitionsDestinyVendorItemDefinition.

        If true, this item is some sort of dummy sale item that cannot actually be purchased. It may be a display only item, or some fluff left by a content designer for testing purposes, or something that got disabled because it was a terrible idea. You get the picture. We won't know *why* it can't be purchased, only that it can't be. Sorry.  This is also only whether it's unpurchasable as a static property according to game content. There are other reasons why an item may or may not be purchasable at runtime, so even if this isn't set to True you should trust the runtime value for this sale item over the static definition if this is unset.

        :return: The unpurchasable of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: bool
        """
        return self._unpurchasable

    @unpurchasable.setter
    def unpurchasable(self, unpurchasable):
        """Sets the unpurchasable of this DestinyDefinitionsDestinyVendorItemDefinition.

        If true, this item is some sort of dummy sale item that cannot actually be purchased. It may be a display only item, or some fluff left by a content designer for testing purposes, or something that got disabled because it was a terrible idea. You get the picture. We won't know *why* it can't be purchased, only that it can't be. Sorry.  This is also only whether it's unpurchasable as a static property according to game content. There are other reasons why an item may or may not be purchasable at runtime, so even if this isn't set to True you should trust the runtime value for this sale item over the static definition if this is unset.

        :param unpurchasable: The unpurchasable of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type unpurchasable: bool
        """

        self._unpurchasable = unpurchasable

    @property
    def vendor_item_index(self):
        """Gets the vendor_item_index of this DestinyDefinitionsDestinyVendorItemDefinition.

        The index into the DestinyVendorDefinition.saleList. This is what we use to refer to items being sold throughout live and definition data.

        :return: The vendor_item_index of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._vendor_item_index

    @vendor_item_index.setter
    def vendor_item_index(self, vendor_item_index):
        """Sets the vendor_item_index of this DestinyDefinitionsDestinyVendorItemDefinition.

        The index into the DestinyVendorDefinition.saleList. This is what we use to refer to items being sold throughout live and definition data.

        :param vendor_item_index: The vendor_item_index of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type vendor_item_index: int
        """

        self._vendor_item_index = vendor_item_index

    @property
    def visibility_scope(self):
        """Gets the visibility_scope of this DestinyDefinitionsDestinyVendorItemDefinition.

        The most restrictive scope that determines whether the item is available in the Vendor's inventory. See DestinyGatingScope's documentation for more information.  This can be determined by Unlock gating, or by whether or not the item has purchase level requirements (minimumLevel and maximumLevel properties).

        :return: The visibility_scope of this DestinyDefinitionsDestinyVendorItemDefinition.
        :rtype: int
        """
        return self._visibility_scope

    @visibility_scope.setter
    def visibility_scope(self, visibility_scope):
        """Sets the visibility_scope of this DestinyDefinitionsDestinyVendorItemDefinition.

        The most restrictive scope that determines whether the item is available in the Vendor's inventory. See DestinyGatingScope's documentation for more information.  This can be determined by Unlock gating, or by whether or not the item has purchase level requirements (minimumLevel and maximumLevel properties).

        :param visibility_scope: The visibility_scope of this DestinyDefinitionsDestinyVendorItemDefinition.
        :type visibility_scope: int
        """

        self._visibility_scope = visibility_scope
