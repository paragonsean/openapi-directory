# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_destiny_stat import DestinyDestinyStat
from openapi_server.models.destiny_entities_items_destiny_item_instance_energy import DestinyEntitiesItemsDestinyItemInstanceEnergy
from openapi_server import util


class DestinyEntitiesItemsDestinyItemInstanceComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, breaker_type: int=None, breaker_type_hash: int=None, can_equip: bool=None, cannot_equip_reason: int=None, damage_type: int=None, damage_type_hash: int=None, energy: DestinyEntitiesItemsDestinyItemInstanceEnergy=None, equip_required_level: int=None, is_equipped: bool=None, item_level: int=None, primary_stat: DestinyDestinyStat=None, quality: int=None, unlock_hashes_required_to_equip: List[int]=None):
        """DestinyEntitiesItemsDestinyItemInstanceComponent - a model defined in OpenAPI

        :param breaker_type: The breaker_type of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :param breaker_type_hash: The breaker_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :param can_equip: The can_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :param cannot_equip_reason: The cannot_equip_reason of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :param damage_type: The damage_type of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :param damage_type_hash: The damage_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :param energy: The energy of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :param equip_required_level: The equip_required_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :param is_equipped: The is_equipped of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :param item_level: The item_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :param primary_stat: The primary_stat of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :param quality: The quality of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :param unlock_hashes_required_to_equip: The unlock_hashes_required_to_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        """
        self.openapi_types = {
            'breaker_type': int,
            'breaker_type_hash': int,
            'can_equip': bool,
            'cannot_equip_reason': int,
            'damage_type': int,
            'damage_type_hash': int,
            'energy': DestinyEntitiesItemsDestinyItemInstanceEnergy,
            'equip_required_level': int,
            'is_equipped': bool,
            'item_level': int,
            'primary_stat': DestinyDestinyStat,
            'quality': int,
            'unlock_hashes_required_to_equip': List[int]
        }

        self.attribute_map = {
            'breaker_type': 'breakerType',
            'breaker_type_hash': 'breakerTypeHash',
            'can_equip': 'canEquip',
            'cannot_equip_reason': 'cannotEquipReason',
            'damage_type': 'damageType',
            'damage_type_hash': 'damageTypeHash',
            'energy': 'energy',
            'equip_required_level': 'equipRequiredLevel',
            'is_equipped': 'isEquipped',
            'item_level': 'itemLevel',
            'primary_stat': 'primaryStat',
            'quality': 'quality',
            'unlock_hashes_required_to_equip': 'unlockHashesRequiredToEquip'
        }

        self._breaker_type = breaker_type
        self._breaker_type_hash = breaker_type_hash
        self._can_equip = can_equip
        self._cannot_equip_reason = cannot_equip_reason
        self._damage_type = damage_type
        self._damage_type_hash = damage_type_hash
        self._energy = energy
        self._equip_required_level = equip_required_level
        self._is_equipped = is_equipped
        self._item_level = item_level
        self._primary_stat = primary_stat
        self._quality = quality
        self._unlock_hashes_required_to_equip = unlock_hashes_required_to_equip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyEntitiesItemsDestinyItemInstanceComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Entities.Items.DestinyItemInstanceComponent of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def breaker_type(self):
        """Gets the breaker_type of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        If populated, this item has a breaker type corresponding to the given value. See DestinyBreakerTypeDefinition for more details.

        :return: The breaker_type of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: int
        """
        return self._breaker_type

    @breaker_type.setter
    def breaker_type(self, breaker_type):
        """Sets the breaker_type of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        If populated, this item has a breaker type corresponding to the given value. See DestinyBreakerTypeDefinition for more details.

        :param breaker_type: The breaker_type of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type breaker_type: int
        """
        allowed_values = [0, 1, 2, 3]  # noqa: E501
        if breaker_type not in allowed_values:
            raise ValueError(
                "Invalid value for `breaker_type` ({0}), must be one of {1}"
                .format(breaker_type, allowed_values)
            )

        self._breaker_type = breaker_type

    @property
    def breaker_type_hash(self):
        """Gets the breaker_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        If populated, this is the hash identifier for the item's breaker type. See DestinyBreakerTypeDefinition for more details.

        :return: The breaker_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: int
        """
        return self._breaker_type_hash

    @breaker_type_hash.setter
    def breaker_type_hash(self, breaker_type_hash):
        """Sets the breaker_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        If populated, this is the hash identifier for the item's breaker type. See DestinyBreakerTypeDefinition for more details.

        :param breaker_type_hash: The breaker_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type breaker_type_hash: int
        """

        self._breaker_type_hash = breaker_type_hash

    @property
    def can_equip(self):
        """Gets the can_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        If this is an equippable item, you can check it here. There are permanent as well as transitory reasons why an item might not be able to be equipped: check cannotEquipReason for details.

        :return: The can_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: bool
        """
        return self._can_equip

    @can_equip.setter
    def can_equip(self, can_equip):
        """Sets the can_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        If this is an equippable item, you can check it here. There are permanent as well as transitory reasons why an item might not be able to be equipped: check cannotEquipReason for details.

        :param can_equip: The can_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type can_equip: bool
        """

        self._can_equip = can_equip

    @property
    def cannot_equip_reason(self):
        """Gets the cannot_equip_reason of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        If you cannot equip the item, this is a flags enum that enumerates all of the reasons why you couldn't equip the item. You may need to refine your UI further by using unlockHashesRequiredToEquip and equipRequiredLevel.

        :return: The cannot_equip_reason of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: int
        """
        return self._cannot_equip_reason

    @cannot_equip_reason.setter
    def cannot_equip_reason(self, cannot_equip_reason):
        """Sets the cannot_equip_reason of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        If you cannot equip the item, this is a flags enum that enumerates all of the reasons why you couldn't equip the item. You may need to refine your UI further by using unlockHashesRequiredToEquip and equipRequiredLevel.

        :param cannot_equip_reason: The cannot_equip_reason of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type cannot_equip_reason: int
        """

        self._cannot_equip_reason = cannot_equip_reason

    @property
    def damage_type(self):
        """Gets the damage_type of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        If the item has a damage type, this is the item's current damage type.

        :return: The damage_type of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: int
        """
        return self._damage_type

    @damage_type.setter
    def damage_type(self, damage_type):
        """Sets the damage_type of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        If the item has a damage type, this is the item's current damage type.

        :param damage_type: The damage_type of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type damage_type: int
        """

        self._damage_type = damage_type

    @property
    def damage_type_hash(self):
        """Gets the damage_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        The current damage type's hash, so you can look up localized info and icons for it.

        :return: The damage_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: int
        """
        return self._damage_type_hash

    @damage_type_hash.setter
    def damage_type_hash(self, damage_type_hash):
        """Sets the damage_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        The current damage type's hash, so you can look up localized info and icons for it.

        :param damage_type_hash: The damage_type_hash of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type damage_type_hash: int
        """

        self._damage_type_hash = damage_type_hash

    @property
    def energy(self):
        """Gets the energy of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        IF populated, this item supports Energy mechanics (i.e. Armor 2.0), and these are the current details of its energy type and available capacity to spend energy points.

        :return: The energy of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: DestinyEntitiesItemsDestinyItemInstanceEnergy
        """
        return self._energy

    @energy.setter
    def energy(self, energy):
        """Sets the energy of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        IF populated, this item supports Energy mechanics (i.e. Armor 2.0), and these are the current details of its energy type and available capacity to spend energy points.

        :param energy: The energy of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type energy: DestinyEntitiesItemsDestinyItemInstanceEnergy
        """

        self._energy = energy

    @property
    def equip_required_level(self):
        """Gets the equip_required_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        If the item cannot be equipped until you reach a certain level, that level will be reflected here.

        :return: The equip_required_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: int
        """
        return self._equip_required_level

    @equip_required_level.setter
    def equip_required_level(self, equip_required_level):
        """Sets the equip_required_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        If the item cannot be equipped until you reach a certain level, that level will be reflected here.

        :param equip_required_level: The equip_required_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type equip_required_level: int
        """

        self._equip_required_level = equip_required_level

    @property
    def is_equipped(self):
        """Gets the is_equipped of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        Is the item currently equipped on the given character?

        :return: The is_equipped of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: bool
        """
        return self._is_equipped

    @is_equipped.setter
    def is_equipped(self, is_equipped):
        """Sets the is_equipped of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        Is the item currently equipped on the given character?

        :param is_equipped: The is_equipped of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type is_equipped: bool
        """

        self._is_equipped = is_equipped

    @property
    def item_level(self):
        """Gets the item_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        The Item's \"Level\" has the most significant bearing on its stats, such as Light and Power.

        :return: The item_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: int
        """
        return self._item_level

    @item_level.setter
    def item_level(self, item_level):
        """Sets the item_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        The Item's \"Level\" has the most significant bearing on its stats, such as Light and Power.

        :param item_level: The item_level of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type item_level: int
        """

        self._item_level = item_level

    @property
    def primary_stat(self):
        """Gets the primary_stat of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        The item stat that we consider to be \"primary\" for the item. For instance, this would be \"Attack\" for Weapons or \"Defense\" for armor.

        :return: The primary_stat of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: DestinyDestinyStat
        """
        return self._primary_stat

    @primary_stat.setter
    def primary_stat(self, primary_stat):
        """Sets the primary_stat of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        The item stat that we consider to be \"primary\" for the item. For instance, this would be \"Attack\" for Weapons or \"Defense\" for armor.

        :param primary_stat: The primary_stat of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type primary_stat: DestinyDestinyStat
        """

        self._primary_stat = primary_stat

    @property
    def quality(self):
        """Gets the quality of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        The \"Quality\" of the item has a lesser - but still impactful - bearing on stats like Light and Power.

        :return: The quality of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: int
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        The \"Quality\" of the item has a lesser - but still impactful - bearing on stats like Light and Power.

        :param quality: The quality of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type quality: int
        """

        self._quality = quality

    @property
    def unlock_hashes_required_to_equip(self):
        """Gets the unlock_hashes_required_to_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        Sometimes, there are limitations to equipping that are represented by character-level flags called \"unlocks\".  This is a list of flags that they need in order to equip the item that the character has not met. Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes.

        :return: The unlock_hashes_required_to_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :rtype: List[int]
        """
        return self._unlock_hashes_required_to_equip

    @unlock_hashes_required_to_equip.setter
    def unlock_hashes_required_to_equip(self, unlock_hashes_required_to_equip):
        """Sets the unlock_hashes_required_to_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.

        Sometimes, there are limitations to equipping that are represented by character-level flags called \"unlocks\".  This is a list of flags that they need in order to equip the item that the character has not met. Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes.

        :param unlock_hashes_required_to_equip: The unlock_hashes_required_to_equip of this DestinyEntitiesItemsDestinyItemInstanceComponent.
        :type unlock_hashes_required_to_equip: List[int]
        """

        self._unlock_hashes_required_to_equip = unlock_hashes_required_to_equip
