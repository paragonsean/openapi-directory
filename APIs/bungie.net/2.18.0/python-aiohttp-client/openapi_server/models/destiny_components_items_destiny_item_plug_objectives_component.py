# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_quests_destiny_objective_progress import DestinyQuestsDestinyObjectiveProgress
from openapi_server import util


class DestinyComponentsItemsDestinyItemPlugObjectivesComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, objectives_per_plug: Dict[str, List[DestinyQuestsDestinyObjectiveProgress]]=None):
        """DestinyComponentsItemsDestinyItemPlugObjectivesComponent - a model defined in OpenAPI

        :param objectives_per_plug: The objectives_per_plug of this DestinyComponentsItemsDestinyItemPlugObjectivesComponent.
        """
        self.openapi_types = {
            'objectives_per_plug': Dict[str, List[DestinyQuestsDestinyObjectiveProgress]]
        }

        self.attribute_map = {
            'objectives_per_plug': 'objectivesPerPlug'
        }

        self._objectives_per_plug = objectives_per_plug

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyComponentsItemsDestinyItemPlugObjectivesComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Components.Items.DestinyItemPlugObjectivesComponent of this DestinyComponentsItemsDestinyItemPlugObjectivesComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def objectives_per_plug(self):
        """Gets the objectives_per_plug of this DestinyComponentsItemsDestinyItemPlugObjectivesComponent.

        This set of data is keyed by the Item Hash (DestinyInventoryItemDefinition) of the plug whose objectives are being returned, with the value being the list of those objectives.   What if two plugs with the same hash are returned for an item, you ask?   Good question! They share the same item-scoped state, and as such would have identical objective state as a result. How's that for convenient.   Sometimes, Plugs may have objectives: generally, these are used for flavor and display purposes. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.

        :return: The objectives_per_plug of this DestinyComponentsItemsDestinyItemPlugObjectivesComponent.
        :rtype: Dict[str, List[DestinyQuestsDestinyObjectiveProgress]]
        """
        return self._objectives_per_plug

    @objectives_per_plug.setter
    def objectives_per_plug(self, objectives_per_plug):
        """Sets the objectives_per_plug of this DestinyComponentsItemsDestinyItemPlugObjectivesComponent.

        This set of data is keyed by the Item Hash (DestinyInventoryItemDefinition) of the plug whose objectives are being returned, with the value being the list of those objectives.   What if two plugs with the same hash are returned for an item, you ask?   Good question! They share the same item-scoped state, and as such would have identical objective state as a result. How's that for convenient.   Sometimes, Plugs may have objectives: generally, these are used for flavor and display purposes. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.

        :param objectives_per_plug: The objectives_per_plug of this DestinyComponentsItemsDestinyItemPlugObjectivesComponent.
        :type objectives_per_plug: Dict[str, List[DestinyQuestsDestinyObjectiveProgress]]
        """

        self._objectives_per_plug = objectives_per_plug
