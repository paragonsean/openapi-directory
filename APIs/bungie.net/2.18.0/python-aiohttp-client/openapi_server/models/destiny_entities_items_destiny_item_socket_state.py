# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinyEntitiesItemsDestinyItemSocketState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_fail_indexes: List[int]=None, is_enabled: bool=None, is_visible: bool=None, plug_hash: int=None):
        """DestinyEntitiesItemsDestinyItemSocketState - a model defined in OpenAPI

        :param enable_fail_indexes: The enable_fail_indexes of this DestinyEntitiesItemsDestinyItemSocketState.
        :param is_enabled: The is_enabled of this DestinyEntitiesItemsDestinyItemSocketState.
        :param is_visible: The is_visible of this DestinyEntitiesItemsDestinyItemSocketState.
        :param plug_hash: The plug_hash of this DestinyEntitiesItemsDestinyItemSocketState.
        """
        self.openapi_types = {
            'enable_fail_indexes': List[int],
            'is_enabled': bool,
            'is_visible': bool,
            'plug_hash': int
        }

        self.attribute_map = {
            'enable_fail_indexes': 'enableFailIndexes',
            'is_enabled': 'isEnabled',
            'is_visible': 'isVisible',
            'plug_hash': 'plugHash'
        }

        self._enable_fail_indexes = enable_fail_indexes
        self._is_enabled = is_enabled
        self._is_visible = is_visible
        self._plug_hash = plug_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyEntitiesItemsDestinyItemSocketState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Entities.Items.DestinyItemSocketState of this DestinyEntitiesItemsDestinyItemSocketState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_fail_indexes(self):
        """Gets the enable_fail_indexes of this DestinyEntitiesItemsDestinyItemSocketState.

        If a plug is inserted but not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.

        :return: The enable_fail_indexes of this DestinyEntitiesItemsDestinyItemSocketState.
        :rtype: List[int]
        """
        return self._enable_fail_indexes

    @enable_fail_indexes.setter
    def enable_fail_indexes(self, enable_fail_indexes):
        """Sets the enable_fail_indexes of this DestinyEntitiesItemsDestinyItemSocketState.

        If a plug is inserted but not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.

        :param enable_fail_indexes: The enable_fail_indexes of this DestinyEntitiesItemsDestinyItemSocketState.
        :type enable_fail_indexes: List[int]
        """

        self._enable_fail_indexes = enable_fail_indexes

    @property
    def is_enabled(self):
        """Gets the is_enabled of this DestinyEntitiesItemsDestinyItemSocketState.

        Even if a plug is inserted, it doesn't mean it's enabled.  This flag indicates whether the plug is active and providing its benefits.

        :return: The is_enabled of this DestinyEntitiesItemsDestinyItemSocketState.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this DestinyEntitiesItemsDestinyItemSocketState.

        Even if a plug is inserted, it doesn't mean it's enabled.  This flag indicates whether the plug is active and providing its benefits.

        :param is_enabled: The is_enabled of this DestinyEntitiesItemsDestinyItemSocketState.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_visible(self):
        """Gets the is_visible of this DestinyEntitiesItemsDestinyItemSocketState.

        A plug may theoretically provide benefits but not be visible - for instance, some older items use a plug's damage type perk to modify their own damage type. These, though they are not visible, still affect the item. This field indicates that state.  An invisible plug, while it provides benefits if it is Enabled, cannot be directly modified by the user.

        :return: The is_visible of this DestinyEntitiesItemsDestinyItemSocketState.
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this DestinyEntitiesItemsDestinyItemSocketState.

        A plug may theoretically provide benefits but not be visible - for instance, some older items use a plug's damage type perk to modify their own damage type. These, though they are not visible, still affect the item. This field indicates that state.  An invisible plug, while it provides benefits if it is Enabled, cannot be directly modified by the user.

        :param is_visible: The is_visible of this DestinyEntitiesItemsDestinyItemSocketState.
        :type is_visible: bool
        """

        self._is_visible = is_visible

    @property
    def plug_hash(self):
        """Gets the plug_hash of this DestinyEntitiesItemsDestinyItemSocketState.

        The currently active plug, if any.  Note that, because all plugs are statically defined, its effect on stats and perks can be statically determined using the plug item's definition. The stats and perks can be taken at face value on the plug item as the stats and perks it will provide to the user/item.

        :return: The plug_hash of this DestinyEntitiesItemsDestinyItemSocketState.
        :rtype: int
        """
        return self._plug_hash

    @plug_hash.setter
    def plug_hash(self, plug_hash):
        """Sets the plug_hash of this DestinyEntitiesItemsDestinyItemSocketState.

        The currently active plug, if any.  Note that, because all plugs are statically defined, its effect on stats and perks can be statically determined using the plug item's definition. The stats and perks can be taken at face value on the plug item as the stats and perks it will provide to the user/item.

        :param plug_hash: The plug_hash of this DestinyEntitiesItemsDestinyItemSocketState.
        :type plug_hash: int
        """

        self._plug_hash = plug_hash
