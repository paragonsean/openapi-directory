# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_email_opt_in_definition import UserEmailOptInDefinition
from openapi_server.models.user_email_subscription_definition import UserEmailSubscriptionDefinition
from openapi_server.models.user_email_view_definition import UserEmailViewDefinition
from openapi_server import util


class UserEmailSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, opt_in_definitions: Dict[str, UserEmailOptInDefinition]=None, subscription_definitions: Dict[str, UserEmailSubscriptionDefinition]=None, views: Dict[str, UserEmailViewDefinition]=None):
        """UserEmailSettings - a model defined in OpenAPI

        :param opt_in_definitions: The opt_in_definitions of this UserEmailSettings.
        :param subscription_definitions: The subscription_definitions of this UserEmailSettings.
        :param views: The views of this UserEmailSettings.
        """
        self.openapi_types = {
            'opt_in_definitions': Dict[str, UserEmailOptInDefinition],
            'subscription_definitions': Dict[str, UserEmailSubscriptionDefinition],
            'views': Dict[str, UserEmailViewDefinition]
        }

        self.attribute_map = {
            'opt_in_definitions': 'optInDefinitions',
            'subscription_definitions': 'subscriptionDefinitions',
            'views': 'views'
        }

        self._opt_in_definitions = opt_in_definitions
        self._subscription_definitions = subscription_definitions
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserEmailSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User.EmailSettings of this UserEmailSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def opt_in_definitions(self):
        """Gets the opt_in_definitions of this UserEmailSettings.

        Keyed by the name identifier of the opt-in definition.

        :return: The opt_in_definitions of this UserEmailSettings.
        :rtype: Dict[str, UserEmailOptInDefinition]
        """
        return self._opt_in_definitions

    @opt_in_definitions.setter
    def opt_in_definitions(self, opt_in_definitions):
        """Sets the opt_in_definitions of this UserEmailSettings.

        Keyed by the name identifier of the opt-in definition.

        :param opt_in_definitions: The opt_in_definitions of this UserEmailSettings.
        :type opt_in_definitions: Dict[str, UserEmailOptInDefinition]
        """

        self._opt_in_definitions = opt_in_definitions

    @property
    def subscription_definitions(self):
        """Gets the subscription_definitions of this UserEmailSettings.

        Keyed by the name identifier of the Subscription definition.

        :return: The subscription_definitions of this UserEmailSettings.
        :rtype: Dict[str, UserEmailSubscriptionDefinition]
        """
        return self._subscription_definitions

    @subscription_definitions.setter
    def subscription_definitions(self, subscription_definitions):
        """Sets the subscription_definitions of this UserEmailSettings.

        Keyed by the name identifier of the Subscription definition.

        :param subscription_definitions: The subscription_definitions of this UserEmailSettings.
        :type subscription_definitions: Dict[str, UserEmailSubscriptionDefinition]
        """

        self._subscription_definitions = subscription_definitions

    @property
    def views(self):
        """Gets the views of this UserEmailSettings.

        Keyed by the name identifier of the View definition.

        :return: The views of this UserEmailSettings.
        :rtype: Dict[str, UserEmailViewDefinition]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this UserEmailSettings.

        Keyed by the name identifier of the View definition.

        :param views: The views of this UserEmailSettings.
        :type views: Dict[str, UserEmailViewDefinition]
        """

        self._views = views
