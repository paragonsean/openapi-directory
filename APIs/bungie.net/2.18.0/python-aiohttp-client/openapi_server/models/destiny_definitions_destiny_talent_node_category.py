# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server import util


class DestinyDefinitionsDestinyTalentNodeCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, identifier: str=None, is_lore_driven: bool=None, node_hashes: List[int]=None):
        """DestinyDefinitionsDestinyTalentNodeCategory - a model defined in OpenAPI

        :param display_properties: The display_properties of this DestinyDefinitionsDestinyTalentNodeCategory.
        :param identifier: The identifier of this DestinyDefinitionsDestinyTalentNodeCategory.
        :param is_lore_driven: The is_lore_driven of this DestinyDefinitionsDestinyTalentNodeCategory.
        :param node_hashes: The node_hashes of this DestinyDefinitionsDestinyTalentNodeCategory.
        """
        self.openapi_types = {
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'identifier': str,
            'is_lore_driven': bool,
            'node_hashes': List[int]
        }

        self.attribute_map = {
            'display_properties': 'displayProperties',
            'identifier': 'identifier',
            'is_lore_driven': 'isLoreDriven',
            'node_hashes': 'nodeHashes'
        }

        self._display_properties = display_properties
        self._identifier = identifier
        self._is_lore_driven = is_lore_driven
        self._node_hashes = node_hashes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyTalentNodeCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyTalentNodeCategory of this DestinyDefinitionsDestinyTalentNodeCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyTalentNodeCategory.

        Will contain at least the \"name\", which will be the title of the category. We will likely not have description and an icon yet, but I'm going to keep my options open.

        :return: The display_properties of this DestinyDefinitionsDestinyTalentNodeCategory.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyTalentNodeCategory.

        Will contain at least the \"name\", which will be the title of the category. We will likely not have description and an icon yet, but I'm going to keep my options open.

        :param display_properties: The display_properties of this DestinyDefinitionsDestinyTalentNodeCategory.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def identifier(self):
        """Gets the identifier of this DestinyDefinitionsDestinyTalentNodeCategory.

        Mostly just for debug purposes, but if you find it useful you can have it. This is BNet's manually created identifier for this category.

        :return: The identifier of this DestinyDefinitionsDestinyTalentNodeCategory.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this DestinyDefinitionsDestinyTalentNodeCategory.

        Mostly just for debug purposes, but if you find it useful you can have it. This is BNet's manually created identifier for this category.

        :param identifier: The identifier of this DestinyDefinitionsDestinyTalentNodeCategory.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def is_lore_driven(self):
        """Gets the is_lore_driven of this DestinyDefinitionsDestinyTalentNodeCategory.

        If true, we found the localized content in a related DestinyLoreDefinition instead of local BNet localization files. This is mostly for ease of my own future investigations.

        :return: The is_lore_driven of this DestinyDefinitionsDestinyTalentNodeCategory.
        :rtype: bool
        """
        return self._is_lore_driven

    @is_lore_driven.setter
    def is_lore_driven(self, is_lore_driven):
        """Sets the is_lore_driven of this DestinyDefinitionsDestinyTalentNodeCategory.

        If true, we found the localized content in a related DestinyLoreDefinition instead of local BNet localization files. This is mostly for ease of my own future investigations.

        :param is_lore_driven: The is_lore_driven of this DestinyDefinitionsDestinyTalentNodeCategory.
        :type is_lore_driven: bool
        """

        self._is_lore_driven = is_lore_driven

    @property
    def node_hashes(self):
        """Gets the node_hashes of this DestinyDefinitionsDestinyTalentNodeCategory.

        The set of all hash identifiers for Talent Nodes (DestinyTalentNodeDefinition) in this Talent Grid that are part of this Category.

        :return: The node_hashes of this DestinyDefinitionsDestinyTalentNodeCategory.
        :rtype: List[int]
        """
        return self._node_hashes

    @node_hashes.setter
    def node_hashes(self, node_hashes):
        """Sets the node_hashes of this DestinyDefinitionsDestinyTalentNodeCategory.

        The set of all hash identifiers for Talent Nodes (DestinyTalentNodeDefinition) in this Talent Grid that are part of this Category.

        :param node_hashes: The node_hashes of this DestinyDefinitionsDestinyTalentNodeCategory.
        :type node_hashes: List[int]
        """

        self._node_hashes = node_hashes
