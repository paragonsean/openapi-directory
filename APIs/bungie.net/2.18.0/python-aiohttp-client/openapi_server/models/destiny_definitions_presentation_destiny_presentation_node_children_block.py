# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_presentation_destiny_presentation_node_child_entry import DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry
from openapi_server.models.destiny_definitions_presentation_destiny_presentation_node_collectible_child_entry import DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry
from openapi_server.models.destiny_definitions_presentation_destiny_presentation_node_craftable_child_entry import DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry
from openapi_server.models.destiny_definitions_presentation_destiny_presentation_node_metric_child_entry import DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry
from openapi_server.models.destiny_definitions_presentation_destiny_presentation_node_record_child_entry import DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry
from openapi_server import util


class DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collectibles: List[DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry]=None, craftables: List[DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry]=None, metrics: List[DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry]=None, presentation_nodes: List[DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry]=None, records: List[DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry]=None):
        """DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock - a model defined in OpenAPI

        :param collectibles: The collectibles of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :param craftables: The craftables of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :param metrics: The metrics of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :param presentation_nodes: The presentation_nodes of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :param records: The records of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        """
        self.openapi_types = {
            'collectibles': List[DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry],
            'craftables': List[DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry],
            'metrics': List[DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry],
            'presentation_nodes': List[DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry],
            'records': List[DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry]
        }

        self.attribute_map = {
            'collectibles': 'collectibles',
            'craftables': 'craftables',
            'metrics': 'metrics',
            'presentation_nodes': 'presentationNodes',
            'records': 'records'
        }

        self._collectibles = collectibles
        self._craftables = craftables
        self._metrics = metrics
        self._presentation_nodes = presentation_nodes
        self._records = records

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.Presentation.DestinyPresentationNodeChildrenBlock of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collectibles(self):
        """Gets the collectibles of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.


        :return: The collectibles of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :rtype: List[DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry]
        """
        return self._collectibles

    @collectibles.setter
    def collectibles(self, collectibles):
        """Sets the collectibles of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.


        :param collectibles: The collectibles of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :type collectibles: List[DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry]
        """

        self._collectibles = collectibles

    @property
    def craftables(self):
        """Gets the craftables of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.


        :return: The craftables of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :rtype: List[DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry]
        """
        return self._craftables

    @craftables.setter
    def craftables(self, craftables):
        """Sets the craftables of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.


        :param craftables: The craftables of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :type craftables: List[DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry]
        """

        self._craftables = craftables

    @property
    def metrics(self):
        """Gets the metrics of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.


        :return: The metrics of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :rtype: List[DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.


        :param metrics: The metrics of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :type metrics: List[DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry]
        """

        self._metrics = metrics

    @property
    def presentation_nodes(self):
        """Gets the presentation_nodes of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.


        :return: The presentation_nodes of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :rtype: List[DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry]
        """
        return self._presentation_nodes

    @presentation_nodes.setter
    def presentation_nodes(self, presentation_nodes):
        """Sets the presentation_nodes of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.


        :param presentation_nodes: The presentation_nodes of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :type presentation_nodes: List[DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry]
        """

        self._presentation_nodes = presentation_nodes

    @property
    def records(self):
        """Gets the records of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.


        :return: The records of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :rtype: List[DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.


        :param records: The records of this DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.
        :type records: List[DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry]
        """

        self._records = records
