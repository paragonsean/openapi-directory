# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_animations_destiny_animation_reference import DestinyDefinitionsAnimationsDestinyAnimationReference
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server.models.destiny_definitions_destiny_equipping_block_definition import DestinyDefinitionsDestinyEquippingBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_action_block_definition import DestinyDefinitionsDestinyItemActionBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_crafting_block_definition import DestinyDefinitionsDestinyItemCraftingBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_gearset_block_definition import DestinyDefinitionsDestinyItemGearsetBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_inventory_block_definition import DestinyDefinitionsDestinyItemInventoryBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_investment_stat_definition import DestinyDefinitionsDestinyItemInvestmentStatDefinition
from openapi_server.models.destiny_definitions_destiny_item_metric_block_definition import DestinyDefinitionsDestinyItemMetricBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_objective_block_definition import DestinyDefinitionsDestinyItemObjectiveBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_perk_entry_definition import DestinyDefinitionsDestinyItemPerkEntryDefinition
from openapi_server.models.destiny_definitions_destiny_item_preview_block_definition import DestinyDefinitionsDestinyItemPreviewBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_quality_block_definition import DestinyDefinitionsDestinyItemQualityBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_sack_block_definition import DestinyDefinitionsDestinyItemSackBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_set_block_definition import DestinyDefinitionsDestinyItemSetBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_socket_block_definition import DestinyDefinitionsDestinyItemSocketBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_source_block_definition import DestinyDefinitionsDestinyItemSourceBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_stat_block_definition import DestinyDefinitionsDestinyItemStatBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_summary_block_definition import DestinyDefinitionsDestinyItemSummaryBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_talent_grid_block_definition import DestinyDefinitionsDestinyItemTalentGridBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_tooltip_notification import DestinyDefinitionsDestinyItemTooltipNotification
from openapi_server.models.destiny_definitions_destiny_item_translation_block_definition import DestinyDefinitionsDestinyItemTranslationBlockDefinition
from openapi_server.models.destiny_definitions_destiny_item_value_block_definition import DestinyDefinitionsDestinyItemValueBlockDefinition
from openapi_server.models.destiny_definitions_items_destiny_item_plug_definition import DestinyDefinitionsItemsDestinyItemPlugDefinition
from openapi_server.models.destiny_misc_destiny_color import DestinyMiscDestinyColor
from openapi_server.models.links_hyperlink_reference import LinksHyperlinkReference
from openapi_server import util


class DestinyDefinitionsDestinyInventoryItemDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: DestinyDefinitionsDestinyItemActionBlockDefinition=None, allow_actions: bool=None, animations: List[DestinyDefinitionsAnimationsDestinyAnimationReference]=None, background_color: DestinyMiscDestinyColor=None, breaker_type: int=None, breaker_type_hash: int=None, class_type: int=None, collectible_hash: int=None, crafting: DestinyDefinitionsDestinyItemCraftingBlockDefinition=None, damage_type_hashes: List[int]=None, damage_types: List[int]=None, default_damage_type: int=None, default_damage_type_hash: int=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, display_source: str=None, does_postmaster_pull_have_side_effects: bool=None, emblem_objective_hash: int=None, equippable: bool=None, equipping_block: DestinyDefinitionsDestinyEquippingBlockDefinition=None, flavor_text: str=None, gearset: DestinyDefinitionsDestinyItemGearsetBlockDefinition=None, hash: int=None, icon_watermark: str=None, icon_watermark_shelved: str=None, index: int=None, inventory: DestinyDefinitionsDestinyItemInventoryBlockDefinition=None, investment_stats: List[DestinyDefinitionsDestinyItemInvestmentStatDefinition]=None, is_wrapper: bool=None, item_category_hashes: List[int]=None, item_sub_type: int=None, item_type: int=None, item_type_and_tier_display_name: str=None, item_type_display_name: str=None, links: List[LinksHyperlinkReference]=None, lore_hash: int=None, metrics: DestinyDefinitionsDestinyItemMetricBlockDefinition=None, non_transferrable: bool=None, objectives: DestinyDefinitionsDestinyItemObjectiveBlockDefinition=None, perks: List[DestinyDefinitionsDestinyItemPerkEntryDefinition]=None, plug: DestinyDefinitionsItemsDestinyItemPlugDefinition=None, preview: DestinyDefinitionsDestinyItemPreviewBlockDefinition=None, quality: DestinyDefinitionsDestinyItemQualityBlockDefinition=None, redacted: bool=None, sack: DestinyDefinitionsDestinyItemSackBlockDefinition=None, screenshot: str=None, season_hash: int=None, secondary_icon: str=None, secondary_overlay: str=None, secondary_special: str=None, set_data: DestinyDefinitionsDestinyItemSetBlockDefinition=None, sockets: DestinyDefinitionsDestinyItemSocketBlockDefinition=None, source_data: DestinyDefinitionsDestinyItemSourceBlockDefinition=None, special_item_type: int=None, stats: DestinyDefinitionsDestinyItemStatBlockDefinition=None, summary: DestinyDefinitionsDestinyItemSummaryBlockDefinition=None, summary_item_hash: int=None, talent_grid: DestinyDefinitionsDestinyItemTalentGridBlockDefinition=None, tooltip_notifications: List[DestinyDefinitionsDestinyItemTooltipNotification]=None, tooltip_style: str=None, trait_hashes: List[int]=None, trait_ids: List[str]=None, translation_block: DestinyDefinitionsDestinyItemTranslationBlockDefinition=None, ui_item_display_style: str=None, value: DestinyDefinitionsDestinyItemValueBlockDefinition=None):
        """DestinyDefinitionsDestinyInventoryItemDefinition - a model defined in OpenAPI

        :param action: The action of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param allow_actions: The allow_actions of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param animations: The animations of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param background_color: The background_color of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param breaker_type: The breaker_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param breaker_type_hash: The breaker_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param class_type: The class_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param collectible_hash: The collectible_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param crafting: The crafting of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param damage_type_hashes: The damage_type_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param damage_types: The damage_types of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param default_damage_type: The default_damage_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param default_damage_type_hash: The default_damage_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param display_source: The display_source of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param does_postmaster_pull_have_side_effects: The does_postmaster_pull_have_side_effects of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param emblem_objective_hash: The emblem_objective_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param equippable: The equippable of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param equipping_block: The equipping_block of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param flavor_text: The flavor_text of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param gearset: The gearset of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param hash: The hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param icon_watermark: The icon_watermark of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param icon_watermark_shelved: The icon_watermark_shelved of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param index: The index of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param inventory: The inventory of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param investment_stats: The investment_stats of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param is_wrapper: The is_wrapper of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param item_category_hashes: The item_category_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param item_sub_type: The item_sub_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param item_type: The item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param item_type_and_tier_display_name: The item_type_and_tier_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param item_type_display_name: The item_type_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param links: The links of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param lore_hash: The lore_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param metrics: The metrics of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param non_transferrable: The non_transferrable of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param objectives: The objectives of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param perks: The perks of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param plug: The plug of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param preview: The preview of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param quality: The quality of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param sack: The sack of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param screenshot: The screenshot of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param season_hash: The season_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param secondary_icon: The secondary_icon of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param secondary_overlay: The secondary_overlay of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param secondary_special: The secondary_special of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param set_data: The set_data of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param sockets: The sockets of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param source_data: The source_data of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param special_item_type: The special_item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param stats: The stats of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param summary: The summary of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param summary_item_hash: The summary_item_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param talent_grid: The talent_grid of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param tooltip_notifications: The tooltip_notifications of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param tooltip_style: The tooltip_style of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param trait_hashes: The trait_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param trait_ids: The trait_ids of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param translation_block: The translation_block of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param ui_item_display_style: The ui_item_display_style of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :param value: The value of this DestinyDefinitionsDestinyInventoryItemDefinition.
        """
        self.openapi_types = {
            'action': DestinyDefinitionsDestinyItemActionBlockDefinition,
            'allow_actions': bool,
            'animations': List[DestinyDefinitionsAnimationsDestinyAnimationReference],
            'background_color': DestinyMiscDestinyColor,
            'breaker_type': int,
            'breaker_type_hash': int,
            'class_type': int,
            'collectible_hash': int,
            'crafting': DestinyDefinitionsDestinyItemCraftingBlockDefinition,
            'damage_type_hashes': List[int],
            'damage_types': List[int],
            'default_damage_type': int,
            'default_damage_type_hash': int,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'display_source': str,
            'does_postmaster_pull_have_side_effects': bool,
            'emblem_objective_hash': int,
            'equippable': bool,
            'equipping_block': DestinyDefinitionsDestinyEquippingBlockDefinition,
            'flavor_text': str,
            'gearset': DestinyDefinitionsDestinyItemGearsetBlockDefinition,
            'hash': int,
            'icon_watermark': str,
            'icon_watermark_shelved': str,
            'index': int,
            'inventory': DestinyDefinitionsDestinyItemInventoryBlockDefinition,
            'investment_stats': List[DestinyDefinitionsDestinyItemInvestmentStatDefinition],
            'is_wrapper': bool,
            'item_category_hashes': List[int],
            'item_sub_type': int,
            'item_type': int,
            'item_type_and_tier_display_name': str,
            'item_type_display_name': str,
            'links': List[LinksHyperlinkReference],
            'lore_hash': int,
            'metrics': DestinyDefinitionsDestinyItemMetricBlockDefinition,
            'non_transferrable': bool,
            'objectives': DestinyDefinitionsDestinyItemObjectiveBlockDefinition,
            'perks': List[DestinyDefinitionsDestinyItemPerkEntryDefinition],
            'plug': DestinyDefinitionsItemsDestinyItemPlugDefinition,
            'preview': DestinyDefinitionsDestinyItemPreviewBlockDefinition,
            'quality': DestinyDefinitionsDestinyItemQualityBlockDefinition,
            'redacted': bool,
            'sack': DestinyDefinitionsDestinyItemSackBlockDefinition,
            'screenshot': str,
            'season_hash': int,
            'secondary_icon': str,
            'secondary_overlay': str,
            'secondary_special': str,
            'set_data': DestinyDefinitionsDestinyItemSetBlockDefinition,
            'sockets': DestinyDefinitionsDestinyItemSocketBlockDefinition,
            'source_data': DestinyDefinitionsDestinyItemSourceBlockDefinition,
            'special_item_type': int,
            'stats': DestinyDefinitionsDestinyItemStatBlockDefinition,
            'summary': DestinyDefinitionsDestinyItemSummaryBlockDefinition,
            'summary_item_hash': int,
            'talent_grid': DestinyDefinitionsDestinyItemTalentGridBlockDefinition,
            'tooltip_notifications': List[DestinyDefinitionsDestinyItemTooltipNotification],
            'tooltip_style': str,
            'trait_hashes': List[int],
            'trait_ids': List[str],
            'translation_block': DestinyDefinitionsDestinyItemTranslationBlockDefinition,
            'ui_item_display_style': str,
            'value': DestinyDefinitionsDestinyItemValueBlockDefinition
        }

        self.attribute_map = {
            'action': 'action',
            'allow_actions': 'allowActions',
            'animations': 'animations',
            'background_color': 'backgroundColor',
            'breaker_type': 'breakerType',
            'breaker_type_hash': 'breakerTypeHash',
            'class_type': 'classType',
            'collectible_hash': 'collectibleHash',
            'crafting': 'crafting',
            'damage_type_hashes': 'damageTypeHashes',
            'damage_types': 'damageTypes',
            'default_damage_type': 'defaultDamageType',
            'default_damage_type_hash': 'defaultDamageTypeHash',
            'display_properties': 'displayProperties',
            'display_source': 'displaySource',
            'does_postmaster_pull_have_side_effects': 'doesPostmasterPullHaveSideEffects',
            'emblem_objective_hash': 'emblemObjectiveHash',
            'equippable': 'equippable',
            'equipping_block': 'equippingBlock',
            'flavor_text': 'flavorText',
            'gearset': 'gearset',
            'hash': 'hash',
            'icon_watermark': 'iconWatermark',
            'icon_watermark_shelved': 'iconWatermarkShelved',
            'index': 'index',
            'inventory': 'inventory',
            'investment_stats': 'investmentStats',
            'is_wrapper': 'isWrapper',
            'item_category_hashes': 'itemCategoryHashes',
            'item_sub_type': 'itemSubType',
            'item_type': 'itemType',
            'item_type_and_tier_display_name': 'itemTypeAndTierDisplayName',
            'item_type_display_name': 'itemTypeDisplayName',
            'links': 'links',
            'lore_hash': 'loreHash',
            'metrics': 'metrics',
            'non_transferrable': 'nonTransferrable',
            'objectives': 'objectives',
            'perks': 'perks',
            'plug': 'plug',
            'preview': 'preview',
            'quality': 'quality',
            'redacted': 'redacted',
            'sack': 'sack',
            'screenshot': 'screenshot',
            'season_hash': 'seasonHash',
            'secondary_icon': 'secondaryIcon',
            'secondary_overlay': 'secondaryOverlay',
            'secondary_special': 'secondarySpecial',
            'set_data': 'setData',
            'sockets': 'sockets',
            'source_data': 'sourceData',
            'special_item_type': 'specialItemType',
            'stats': 'stats',
            'summary': 'summary',
            'summary_item_hash': 'summaryItemHash',
            'talent_grid': 'talentGrid',
            'tooltip_notifications': 'tooltipNotifications',
            'tooltip_style': 'tooltipStyle',
            'trait_hashes': 'traitHashes',
            'trait_ids': 'traitIds',
            'translation_block': 'translationBlock',
            'ui_item_display_style': 'uiItemDisplayStyle',
            'value': 'value'
        }

        self._action = action
        self._allow_actions = allow_actions
        self._animations = animations
        self._background_color = background_color
        self._breaker_type = breaker_type
        self._breaker_type_hash = breaker_type_hash
        self._class_type = class_type
        self._collectible_hash = collectible_hash
        self._crafting = crafting
        self._damage_type_hashes = damage_type_hashes
        self._damage_types = damage_types
        self._default_damage_type = default_damage_type
        self._default_damage_type_hash = default_damage_type_hash
        self._display_properties = display_properties
        self._display_source = display_source
        self._does_postmaster_pull_have_side_effects = does_postmaster_pull_have_side_effects
        self._emblem_objective_hash = emblem_objective_hash
        self._equippable = equippable
        self._equipping_block = equipping_block
        self._flavor_text = flavor_text
        self._gearset = gearset
        self._hash = hash
        self._icon_watermark = icon_watermark
        self._icon_watermark_shelved = icon_watermark_shelved
        self._index = index
        self._inventory = inventory
        self._investment_stats = investment_stats
        self._is_wrapper = is_wrapper
        self._item_category_hashes = item_category_hashes
        self._item_sub_type = item_sub_type
        self._item_type = item_type
        self._item_type_and_tier_display_name = item_type_and_tier_display_name
        self._item_type_display_name = item_type_display_name
        self._links = links
        self._lore_hash = lore_hash
        self._metrics = metrics
        self._non_transferrable = non_transferrable
        self._objectives = objectives
        self._perks = perks
        self._plug = plug
        self._preview = preview
        self._quality = quality
        self._redacted = redacted
        self._sack = sack
        self._screenshot = screenshot
        self._season_hash = season_hash
        self._secondary_icon = secondary_icon
        self._secondary_overlay = secondary_overlay
        self._secondary_special = secondary_special
        self._set_data = set_data
        self._sockets = sockets
        self._source_data = source_data
        self._special_item_type = special_item_type
        self._stats = stats
        self._summary = summary
        self._summary_item_hash = summary_item_hash
        self._talent_grid = talent_grid
        self._tooltip_notifications = tooltip_notifications
        self._tooltip_style = tooltip_style
        self._trait_hashes = trait_hashes
        self._trait_ids = trait_ids
        self._translation_block = translation_block
        self._ui_item_display_style = ui_item_display_style
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyInventoryItemDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyInventoryItemDefinition of this DestinyDefinitionsDestinyInventoryItemDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item can be \"used\", this block will be non-null, and will have data related to the action performed when using the item. (Guess what? 99% of the time, this action is \"dismantle\". Shocker)

        :return: The action of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemActionBlockDefinition
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item can be \"used\", this block will be non-null, and will have data related to the action performed when using the item. (Guess what? 99% of the time, this action is \"dismantle\". Shocker)

        :param action: The action of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type action: DestinyDefinitionsDestinyItemActionBlockDefinition
        """

        self._action = action

    @property
    def allow_actions(self):
        """Gets the allow_actions of this DestinyDefinitionsDestinyInventoryItemDefinition.

        BNet may forbid the execution of actions on this item via the API. If that is occurring, allowActions will be set to false.

        :return: The allow_actions of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: bool
        """
        return self._allow_actions

    @allow_actions.setter
    def allow_actions(self, allow_actions):
        """Sets the allow_actions of this DestinyDefinitionsDestinyInventoryItemDefinition.

        BNet may forbid the execution of actions on this item via the API. If that is occurring, allowActions will be set to false.

        :param allow_actions: The allow_actions of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type allow_actions: bool
        """

        self._allow_actions = allow_actions

    @property
    def animations(self):
        """Gets the animations of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If any animations were extracted from game content for this item, these will be the definitions of those animations.

        :return: The animations of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: List[DestinyDefinitionsAnimationsDestinyAnimationReference]
        """
        return self._animations

    @animations.setter
    def animations(self, animations):
        """Sets the animations of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If any animations were extracted from game content for this item, these will be the definitions of those animations.

        :param animations: The animations of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type animations: List[DestinyDefinitionsAnimationsDestinyAnimationReference]
        """

        self._animations = animations

    @property
    def background_color(self):
        """Gets the background_color of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Sometimes, an item will have a background color. Most notably this occurs with Emblems, who use the Background Color for small character nameplates such as the \"friends\" view you see in-game. There are almost certainly other items that have background color as well, though I have not bothered to investigate what items have it nor what purposes they serve: use it as you will.

        :return: The background_color of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyMiscDestinyColor
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Sometimes, an item will have a background color. Most notably this occurs with Emblems, who use the Background Color for small character nameplates such as the \"friends\" view you see in-game. There are almost certainly other items that have background color as well, though I have not bothered to investigate what items have it nor what purposes they serve: use it as you will.

        :param background_color: The background_color of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type background_color: DestinyMiscDestinyColor
        """

        self._background_color = background_color

    @property
    def breaker_type(self):
        """Gets the breaker_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Some weapons and plugs can have a \"Breaker Type\": a special ability that works sort of like damage type vulnerabilities. This is (almost?) always set on items by plugs.

        :return: The breaker_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._breaker_type

    @breaker_type.setter
    def breaker_type(self, breaker_type):
        """Sets the breaker_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Some weapons and plugs can have a \"Breaker Type\": a special ability that works sort of like damage type vulnerabilities. This is (almost?) always set on items by plugs.

        :param breaker_type: The breaker_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type breaker_type: int
        """

        self._breaker_type = breaker_type

    @property
    def breaker_type_hash(self):
        """Gets the breaker_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Since we also have a breaker type definition, this is the hash for that breaker type for your convenience. Whether you use the enum or hash and look up the definition depends on what's cleanest for your code.

        :return: The breaker_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._breaker_type_hash

    @breaker_type_hash.setter
    def breaker_type_hash(self, breaker_type_hash):
        """Sets the breaker_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Since we also have a breaker type definition, this is the hash for that breaker type for your convenience. Whether you use the enum or hash and look up the definition depends on what's cleanest for your code.

        :param breaker_type_hash: The breaker_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type breaker_type_hash: int
        """

        self._breaker_type_hash = breaker_type_hash

    @property
    def class_type(self):
        """Gets the class_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        We run a similarly weak-sauce algorithm to try and determine whether an item is restricted to a specific class. If we find it to be restricted in such a way, we set this classType property to match the class' enumeration value so that users can easily identify class restricted items.  If you see a mis-classed item, please inform the developers in the Bungie API forum.

        :return: The class_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._class_type

    @class_type.setter
    def class_type(self, class_type):
        """Sets the class_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        We run a similarly weak-sauce algorithm to try and determine whether an item is restricted to a specific class. If we find it to be restricted in such a way, we set this classType property to match the class' enumeration value so that users can easily identify class restricted items.  If you see a mis-classed item, please inform the developers in the Bungie API forum.

        :param class_type: The class_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type class_type: int
        """

        self._class_type = class_type

    @property
    def collectible_hash(self):
        """Gets the collectible_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has a collectible related to it, this is the hash identifier of that collectible entry.

        :return: The collectible_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._collectible_hash

    @collectible_hash.setter
    def collectible_hash(self, collectible_hash):
        """Sets the collectible_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has a collectible related to it, this is the hash identifier of that collectible entry.

        :param collectible_hash: The collectible_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type collectible_hash: int
        """

        self._collectible_hash = collectible_hash

    @property
    def crafting(self):
        """Gets the crafting of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Recipe items will have relevant crafting information available here.

        :return: The crafting of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemCraftingBlockDefinition
        """
        return self._crafting

    @crafting.setter
    def crafting(self, crafting):
        """Sets the crafting of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Recipe items will have relevant crafting information available here.

        :param crafting: The crafting of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type crafting: DestinyDefinitionsDestinyItemCraftingBlockDefinition
        """

        self._crafting = crafting

    @property
    def damage_type_hashes(self):
        """Gets the damage_type_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Theoretically, an item can have many possible damage types. In *practice*, this is not true, but just in case weapons start being made that have multiple (for instance, an item where a socket has reusable plugs for every possible damage type that you can choose from freely), this field will return all of the possible damage types that are available to the weapon by default.

        :return: The damage_type_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: List[int]
        """
        return self._damage_type_hashes

    @damage_type_hashes.setter
    def damage_type_hashes(self, damage_type_hashes):
        """Sets the damage_type_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Theoretically, an item can have many possible damage types. In *practice*, this is not true, but just in case weapons start being made that have multiple (for instance, an item where a socket has reusable plugs for every possible damage type that you can choose from freely), this field will return all of the possible damage types that are available to the weapon by default.

        :param damage_type_hashes: The damage_type_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type damage_type_hashes: List[int]
        """

        self._damage_type_hashes = damage_type_hashes

    @property
    def damage_types(self):
        """Gets the damage_types of this DestinyDefinitionsDestinyInventoryItemDefinition.

        This is the list of all damage types that we know ahead of time the item can take on. Unfortunately, this does not preclude the possibility of something funky happening to give the item a damage type that cannot be predicted beforehand: for example, if some designer decides to create arbitrary non-reusable plugs that cause damage type to change.  This damage type prediction will only use the following to determine potential damage types:  - Intrinsic perks  - Talent Node perks  - Known, reusable plugs for sockets

        :return: The damage_types of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: List[int]
        """
        return self._damage_types

    @damage_types.setter
    def damage_types(self, damage_types):
        """Sets the damage_types of this DestinyDefinitionsDestinyInventoryItemDefinition.

        This is the list of all damage types that we know ahead of time the item can take on. Unfortunately, this does not preclude the possibility of something funky happening to give the item a damage type that cannot be predicted beforehand: for example, if some designer decides to create arbitrary non-reusable plugs that cause damage type to change.  This damage type prediction will only use the following to determine potential damage types:  - Intrinsic perks  - Talent Node perks  - Known, reusable plugs for sockets

        :param damage_types: The damage_types of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type damage_types: List[int]
        """

        self._damage_types = damage_types

    @property
    def default_damage_type(self):
        """Gets the default_damage_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has a damage type that could be considered to be default, it will be populated here.  For various upsetting reasons, it's surprisingly cumbersome to figure this out. I hope you're happy.

        :return: The default_damage_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._default_damage_type

    @default_damage_type.setter
    def default_damage_type(self, default_damage_type):
        """Sets the default_damage_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has a damage type that could be considered to be default, it will be populated here.  For various upsetting reasons, it's surprisingly cumbersome to figure this out. I hope you're happy.

        :param default_damage_type: The default_damage_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type default_damage_type: int
        """

        self._default_damage_type = default_damage_type

    @property
    def default_damage_type_hash(self):
        """Gets the default_damage_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Similar to defaultDamageType, but represented as the hash identifier for a DestinyDamageTypeDefinition.  I will likely regret leaving in the enumeration versions of these properties, but for now they're very convenient.

        :return: The default_damage_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._default_damage_type_hash

    @default_damage_type_hash.setter
    def default_damage_type_hash(self, default_damage_type_hash):
        """Sets the default_damage_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Similar to defaultDamageType, but represented as the hash identifier for a DestinyDamageTypeDefinition.  I will likely regret leaving in the enumeration versions of these properties, but for now they're very convenient.

        :param default_damage_type_hash: The default_damage_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type default_damage_type_hash: int
        """

        self._default_damage_type_hash = default_damage_type_hash

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyInventoryItemDefinition.


        :return: The display_properties of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyInventoryItemDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def display_source(self):
        """Gets the display_source of this DestinyDefinitionsDestinyInventoryItemDefinition.

        In theory, it is a localized string telling you about how you can find the item. I really wish this was more consistent. Many times, it has nothing. Sometimes, it's instead a more narrative-forward description of the item. Which is cool, and I wish all properties had that data, but it should really be its own property.

        :return: The display_source of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: str
        """
        return self._display_source

    @display_source.setter
    def display_source(self, display_source):
        """Sets the display_source of this DestinyDefinitionsDestinyInventoryItemDefinition.

        In theory, it is a localized string telling you about how you can find the item. I really wish this was more consistent. Many times, it has nothing. Sometimes, it's instead a more narrative-forward description of the item. Which is cool, and I wish all properties had that data, but it should really be its own property.

        :param display_source: The display_source of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type display_source: str
        """

        self._display_source = display_source

    @property
    def does_postmaster_pull_have_side_effects(self):
        """Gets the does_postmaster_pull_have_side_effects of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The boolean will indicate to us (and you!) whether something *could* happen when you transfer this item from the Postmaster that might be considered a \"destructive\" action.  It is not feasible currently to tell you (or ourelves!) in a consistent way whether this *will* actually cause a destructive action, so we are playing it safe: if it has the potential to do so, we will not allow it to be transferred from the Postmaster by default. You will need to check for this flag before transferring an item from the Postmaster, or else you'll end up receiving an error.

        :return: The does_postmaster_pull_have_side_effects of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: bool
        """
        return self._does_postmaster_pull_have_side_effects

    @does_postmaster_pull_have_side_effects.setter
    def does_postmaster_pull_have_side_effects(self, does_postmaster_pull_have_side_effects):
        """Sets the does_postmaster_pull_have_side_effects of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The boolean will indicate to us (and you!) whether something *could* happen when you transfer this item from the Postmaster that might be considered a \"destructive\" action.  It is not feasible currently to tell you (or ourelves!) in a consistent way whether this *will* actually cause a destructive action, so we are playing it safe: if it has the potential to do so, we will not allow it to be transferred from the Postmaster by default. You will need to check for this flag before transferring an item from the Postmaster, or else you'll end up receiving an error.

        :param does_postmaster_pull_have_side_effects: The does_postmaster_pull_have_side_effects of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type does_postmaster_pull_have_side_effects: bool
        """

        self._does_postmaster_pull_have_side_effects = does_postmaster_pull_have_side_effects

    @property
    def emblem_objective_hash(self):
        """Gets the emblem_objective_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item is an emblem that has a special Objective attached to it - for instance, if the emblem tracks PVP Kills, or what-have-you. This is a bit different from, for example, the Vanguard Kill Tracker mod, which pipes data into the \"art channel\". When I get some time, I would like to standardize these so you can get at the values they expose without having to care about what they're being used for and how they are wired up, but for now here's the raw data.

        :return: The emblem_objective_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._emblem_objective_hash

    @emblem_objective_hash.setter
    def emblem_objective_hash(self, emblem_objective_hash):
        """Sets the emblem_objective_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item is an emblem that has a special Objective attached to it - for instance, if the emblem tracks PVP Kills, or what-have-you. This is a bit different from, for example, the Vanguard Kill Tracker mod, which pipes data into the \"art channel\". When I get some time, I would like to standardize these so you can get at the values they expose without having to care about what they're being used for and how they are wired up, but for now here's the raw data.

        :param emblem_objective_hash: The emblem_objective_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type emblem_objective_hash: int
        """

        self._emblem_objective_hash = emblem_objective_hash

    @property
    def equippable(self):
        """Gets the equippable of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If true, then you will be allowed to equip the item if you pass its other requirements.  This being false means that you cannot equip the item under any circumstances.

        :return: The equippable of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: bool
        """
        return self._equippable

    @equippable.setter
    def equippable(self, equippable):
        """Sets the equippable of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If true, then you will be allowed to equip the item if you pass its other requirements.  This being false means that you cannot equip the item under any circumstances.

        :param equippable: The equippable of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type equippable: bool
        """

        self._equippable = equippable

    @property
    def equipping_block(self):
        """Gets the equipping_block of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can be equipped, this block will be non-null and will be populated with the conditions under which it can be equipped.

        :return: The equipping_block of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyEquippingBlockDefinition
        """
        return self._equipping_block

    @equipping_block.setter
    def equipping_block(self, equipping_block):
        """Sets the equipping_block of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can be equipped, this block will be non-null and will be populated with the conditions under which it can be equipped.

        :param equipping_block: The equipping_block of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type equipping_block: DestinyDefinitionsDestinyEquippingBlockDefinition
        """

        self._equipping_block = equipping_block

    @property
    def flavor_text(self):
        """Gets the flavor_text of this DestinyDefinitionsDestinyInventoryItemDefinition.


        :return: The flavor_text of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: str
        """
        return self._flavor_text

    @flavor_text.setter
    def flavor_text(self, flavor_text):
        """Sets the flavor_text of this DestinyDefinitionsDestinyInventoryItemDefinition.


        :param flavor_text: The flavor_text of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type flavor_text: str
        """

        self._flavor_text = flavor_text

    @property
    def gearset(self):
        """Gets the gearset of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has related items in a \"Gear Set\", this will be non-null and the relationships defined herein.

        :return: The gearset of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemGearsetBlockDefinition
        """
        return self._gearset

    @gearset.setter
    def gearset(self, gearset):
        """Sets the gearset of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has related items in a \"Gear Set\", this will be non-null and the relationships defined herein.

        :param gearset: The gearset of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type gearset: DestinyDefinitionsDestinyItemGearsetBlockDefinition
        """

        self._gearset = gearset

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def icon_watermark(self):
        """Gets the icon_watermark of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If available, this is the original 'active' release watermark overlay for the icon. If the item has different versions, this can be overridden by the 'display version watermark icon' from the 'quality' block. Alternatively, if there is no watermark for the version, and the item version has a power cap below the current season power cap, this can be overridden by the iconWatermarkShelved property.

        :return: The icon_watermark of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: str
        """
        return self._icon_watermark

    @icon_watermark.setter
    def icon_watermark(self, icon_watermark):
        """Sets the icon_watermark of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If available, this is the original 'active' release watermark overlay for the icon. If the item has different versions, this can be overridden by the 'display version watermark icon' from the 'quality' block. Alternatively, if there is no watermark for the version, and the item version has a power cap below the current season power cap, this can be overridden by the iconWatermarkShelved property.

        :param icon_watermark: The icon_watermark of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type icon_watermark: str
        """

        self._icon_watermark = icon_watermark

    @property
    def icon_watermark_shelved(self):
        """Gets the icon_watermark_shelved of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If available, this is the 'shelved' release watermark overlay for the icon. If the item version has a power cap below the current season power cap, it can be treated as 'shelved', and should be shown with this 'shelved' watermark overlay.

        :return: The icon_watermark_shelved of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: str
        """
        return self._icon_watermark_shelved

    @icon_watermark_shelved.setter
    def icon_watermark_shelved(self, icon_watermark_shelved):
        """Sets the icon_watermark_shelved of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If available, this is the 'shelved' release watermark overlay for the icon. If the item version has a power cap below the current season power cap, it can be treated as 'shelved', and should be shown with this 'shelved' watermark overlay.

        :param icon_watermark_shelved: The icon_watermark_shelved of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type icon_watermark_shelved: str
        """

        self._icon_watermark_shelved = icon_watermark_shelved

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type index: int
        """

        self._index = index

    @property
    def inventory(self):
        """Gets the inventory of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can exist in an inventory, this block will be non-null. In practice, every item that currently exists has one of these blocks. But note that it is not necessarily guaranteed.

        :return: The inventory of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemInventoryBlockDefinition
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can exist in an inventory, this block will be non-null. In practice, every item that currently exists has one of these blocks. But note that it is not necessarily guaranteed.

        :param inventory: The inventory of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type inventory: DestinyDefinitionsDestinyItemInventoryBlockDefinition
        """

        self._inventory = inventory

    @property
    def investment_stats(self):
        """Gets the investment_stats of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has stats, this block will be defined. It has the \"raw\" investment stats for the item. These investment stats don't take into account the ways that the items can spawn, nor do they take into account any Stat Group transformations. I have retained them for debugging purposes, but I do not know how useful people will find them.

        :return: The investment_stats of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: List[DestinyDefinitionsDestinyItemInvestmentStatDefinition]
        """
        return self._investment_stats

    @investment_stats.setter
    def investment_stats(self, investment_stats):
        """Sets the investment_stats of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has stats, this block will be defined. It has the \"raw\" investment stats for the item. These investment stats don't take into account the ways that the items can spawn, nor do they take into account any Stat Group transformations. I have retained them for debugging purposes, but I do not know how useful people will find them.

        :param investment_stats: The investment_stats of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type investment_stats: List[DestinyDefinitionsDestinyItemInvestmentStatDefinition]
        """

        self._investment_stats = investment_stats

    @property
    def is_wrapper(self):
        """Gets the is_wrapper of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If true, this is a dummy vendor-wrapped item template. Items purchased from Eververse will be \"wrapped\" by one of these items so that we can safely provide refund capabilities before the item is \"unwrapped\".

        :return: The is_wrapper of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: bool
        """
        return self._is_wrapper

    @is_wrapper.setter
    def is_wrapper(self, is_wrapper):
        """Sets the is_wrapper of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If true, this is a dummy vendor-wrapped item template. Items purchased from Eververse will be \"wrapped\" by one of these items so that we can safely provide refund capabilities before the item is \"unwrapped\".

        :param is_wrapper: The is_wrapper of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type is_wrapper: bool
        """

        self._is_wrapper = is_wrapper

    @property
    def item_category_hashes(self):
        """Gets the item_category_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.

        BNet attempts to make a more formal definition of item \"Categories\", as defined by DestinyItemCategoryDefinition. This is a list of all Categories that we were able to algorithmically determine that this item is a member of. (for instance, that it's a \"Weapon\", that it's an \"Auto Rifle\", etc...)  The algorithm for these is, unfortunately, volatile. If you believe you see a miscategorized item, please let us know on the Bungie API forums.

        :return: The item_category_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: List[int]
        """
        return self._item_category_hashes

    @item_category_hashes.setter
    def item_category_hashes(self, item_category_hashes):
        """Sets the item_category_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.

        BNet attempts to make a more formal definition of item \"Categories\", as defined by DestinyItemCategoryDefinition. This is a list of all Categories that we were able to algorithmically determine that this item is a member of. (for instance, that it's a \"Weapon\", that it's an \"Auto Rifle\", etc...)  The algorithm for these is, unfortunately, volatile. If you believe you see a miscategorized item, please let us know on the Bungie API forums.

        :param item_category_hashes: The item_category_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type item_category_hashes: List[int]
        """

        self._item_category_hashes = item_category_hashes

    @property
    def item_sub_type(self):
        """Gets the item_sub_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        A value indicating the \"sub-type\" of the item. For instance, where an item might have an itemType value \"Weapon\", this will be something more specific like \"Auto Rifle\".  itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.

        :return: The item_sub_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._item_sub_type

    @item_sub_type.setter
    def item_sub_type(self, item_sub_type):
        """Sets the item_sub_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        A value indicating the \"sub-type\" of the item. For instance, where an item might have an itemType value \"Weapon\", this will be something more specific like \"Auto Rifle\".  itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.

        :param item_sub_type: The item_sub_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type item_sub_type: int
        """

        self._item_sub_type = item_sub_type

    @property
    def item_type(self):
        """Gets the item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        A value indicating the \"base\" the of the item. This enum is a useful but dramatic oversimplification of what it means for an item to have a \"Type\". Still, it's handy in many situations.  itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.

        :return: The item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        A value indicating the \"base\" the of the item. This enum is a useful but dramatic oversimplification of what it means for an item to have a \"Type\". Still, it's handy in many situations.  itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.

        :param item_type: The item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type item_type: int
        """

        self._item_type = item_type

    @property
    def item_type_and_tier_display_name(self):
        """Gets the item_type_and_tier_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.

        It became a common enough pattern in our UI to show Item Type and Tier combined into a single localized string that I'm just going to go ahead and start pre-creating these for items.

        :return: The item_type_and_tier_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: str
        """
        return self._item_type_and_tier_display_name

    @item_type_and_tier_display_name.setter
    def item_type_and_tier_display_name(self, item_type_and_tier_display_name):
        """Sets the item_type_and_tier_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.

        It became a common enough pattern in our UI to show Item Type and Tier combined into a single localized string that I'm just going to go ahead and start pre-creating these for items.

        :param item_type_and_tier_display_name: The item_type_and_tier_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type item_type_and_tier_display_name: str
        """

        self._item_type_and_tier_display_name = item_type_and_tier_display_name

    @property
    def item_type_display_name(self):
        """Gets the item_type_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The localized title/name of the item's type. This can be whatever the designers want, and has no guarantee of consistency between items.

        :return: The item_type_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: str
        """
        return self._item_type_display_name

    @item_type_display_name.setter
    def item_type_display_name(self, item_type_display_name):
        """Sets the item_type_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The localized title/name of the item's type. This can be whatever the designers want, and has no guarantee of consistency between items.

        :param item_type_display_name: The item_type_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type item_type_display_name: str
        """

        self._item_type_display_name = item_type_display_name

    @property
    def links(self):
        """Gets the links of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If we added any help or informational URLs about this item, these will be those links.

        :return: The links of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: List[LinksHyperlinkReference]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If we added any help or informational URLs about this item, these will be those links.

        :param links: The links of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type links: List[LinksHyperlinkReference]
        """

        self._links = links

    @property
    def lore_hash(self):
        """Gets the lore_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has any related Lore (DestinyLoreDefinition), this will be the hash identifier you can use to look up the lore definition.

        :return: The lore_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._lore_hash

    @lore_hash.setter
    def lore_hash(self, lore_hash):
        """Sets the lore_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has any related Lore (DestinyLoreDefinition), this will be the hash identifier you can use to look up the lore definition.

        :param lore_hash: The lore_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type lore_hash: int
        """

        self._lore_hash = lore_hash

    @property
    def metrics(self):
        """Gets the metrics of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has available metrics to be shown, this block will be non-null have the appropriate hashes defined.

        :return: The metrics of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemMetricBlockDefinition
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has available metrics to be shown, this block will be non-null have the appropriate hashes defined.

        :param metrics: The metrics of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type metrics: DestinyDefinitionsDestinyItemMetricBlockDefinition
        """

        self._metrics = metrics

    @property
    def non_transferrable(self):
        """Gets the non_transferrable of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The intrinsic transferability of an item.  I hate that this boolean is negative - but there's a reason.  Just because an item is intrinsically transferrable doesn't mean that it can be transferred, and we don't want to imply that this is the only source of that transferability.

        :return: The non_transferrable of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: bool
        """
        return self._non_transferrable

    @non_transferrable.setter
    def non_transferrable(self, non_transferrable):
        """Sets the non_transferrable of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The intrinsic transferability of an item.  I hate that this boolean is negative - but there's a reason.  Just because an item is intrinsically transferrable doesn't mean that it can be transferred, and we don't want to imply that this is the only source of that transferability.

        :param non_transferrable: The non_transferrable of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type non_transferrable: bool
        """

        self._non_transferrable = non_transferrable

    @property
    def objectives(self):
        """Gets the objectives of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has Objectives (extra tasks that can be accomplished related to the item... most frequently when the item is a Quest Step and the Objectives need to be completed to move on to the next Quest Step), this block will be non-null and the objectives defined herein.

        :return: The objectives of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemObjectiveBlockDefinition
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """Sets the objectives of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has Objectives (extra tasks that can be accomplished related to the item... most frequently when the item is a Quest Step and the Objectives need to be completed to move on to the next Quest Step), this block will be non-null and the objectives defined herein.

        :param objectives: The objectives of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type objectives: DestinyDefinitionsDestinyItemObjectiveBlockDefinition
        """

        self._objectives = objectives

    @property
    def perks(self):
        """Gets the perks of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has any *intrinsic* Perks (Perks that it will provide regardless of Sockets, Talent Grid, and other transitory state), they will be defined here.

        :return: The perks of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: List[DestinyDefinitionsDestinyItemPerkEntryDefinition]
        """
        return self._perks

    @perks.setter
    def perks(self, perks):
        """Sets the perks of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has any *intrinsic* Perks (Perks that it will provide regardless of Sockets, Talent Grid, and other transitory state), they will be defined here.

        :param perks: The perks of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type perks: List[DestinyDefinitionsDestinyItemPerkEntryDefinition]
        """

        self._perks = perks

    @property
    def plug(self):
        """Gets the plug of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item *is* a Plug, this will be non-null and the info defined herein. See DestinyItemPlugDefinition for more information.

        :return: The plug of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsItemsDestinyItemPlugDefinition
        """
        return self._plug

    @plug.setter
    def plug(self, plug):
        """Sets the plug of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item *is* a Plug, this will be non-null and the info defined herein. See DestinyItemPlugDefinition for more information.

        :param plug: The plug of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type plug: DestinyDefinitionsItemsDestinyItemPlugDefinition
        """

        self._plug = plug

    @property
    def preview(self):
        """Gets the preview of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can be Used or Acquired to gain other items (for instance, how Eververse Boxes can be consumed to get items from the box), this block will be non-null and will give summary information for the items that can be acquired.

        :return: The preview of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemPreviewBlockDefinition
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can be Used or Acquired to gain other items (for instance, how Eververse Boxes can be consumed to get items from the box), this block will be non-null and will give summary information for the items that can be acquired.

        :param preview: The preview of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type preview: DestinyDefinitionsDestinyItemPreviewBlockDefinition
        """

        self._preview = preview

    @property
    def quality(self):
        """Gets the quality of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can have a level or stats, this block will be non-null and will be populated with default quality (item level, \"quality\", and infusion) data. See the block for more details, there's often less upfront information in D2 so you'll want to be aware of how you use quality and item level on the definition level now.

        :return: The quality of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemQualityBlockDefinition
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can have a level or stats, this block will be non-null and will be populated with default quality (item level, \"quality\", and infusion) data. See the block for more details, there's often less upfront information in D2 so you'll want to be aware of how you use quality and item level on the definition level now.

        :param quality: The quality of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type quality: DestinyDefinitionsDestinyItemQualityBlockDefinition
        """

        self._quality = quality

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type redacted: bool
        """

        self._redacted = redacted

    @property
    def sack(self):
        """Gets the sack of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item is a \"reward sack\" that can be opened to provide other items, this will be non-null and the properties of the sack contained herein.

        :return: The sack of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemSackBlockDefinition
        """
        return self._sack

    @sack.setter
    def sack(self, sack):
        """Sets the sack of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item is a \"reward sack\" that can be opened to provide other items, this will be non-null and the properties of the sack contained herein.

        :param sack: The sack of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type sack: DestinyDefinitionsDestinyItemSackBlockDefinition
        """

        self._sack = sack

    @property
    def screenshot(self):
        """Gets the screenshot of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If we were able to acquire an in-game screenshot for the item, the path to that screenshot will be returned here. Note that not all items have screenshots: particularly not any non-equippable items.

        :return: The screenshot of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: str
        """
        return self._screenshot

    @screenshot.setter
    def screenshot(self, screenshot):
        """Sets the screenshot of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If we were able to acquire an in-game screenshot for the item, the path to that screenshot will be returned here. Note that not all items have screenshots: particularly not any non-equippable items.

        :param screenshot: The screenshot of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type screenshot: str
        """

        self._screenshot = screenshot

    @property
    def season_hash(self):
        """Gets the season_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item is related directly to a Season of Destiny, this is the hash identifier for that season.

        :return: The season_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._season_hash

    @season_hash.setter
    def season_hash(self, season_hash):
        """Sets the season_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item is related directly to a Season of Destiny, this is the hash identifier for that season.

        :param season_hash: The season_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type season_hash: int
        """

        self._season_hash = season_hash

    @property
    def secondary_icon(self):
        """Gets the secondary_icon of this DestinyDefinitionsDestinyInventoryItemDefinition.

        A secondary icon associated with the item. Currently this is used in very context specific applications, such as Emblem Nameplates.

        :return: The secondary_icon of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: str
        """
        return self._secondary_icon

    @secondary_icon.setter
    def secondary_icon(self, secondary_icon):
        """Sets the secondary_icon of this DestinyDefinitionsDestinyInventoryItemDefinition.

        A secondary icon associated with the item. Currently this is used in very context specific applications, such as Emblem Nameplates.

        :param secondary_icon: The secondary_icon of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type secondary_icon: str
        """

        self._secondary_icon = secondary_icon

    @property
    def secondary_overlay(self):
        """Gets the secondary_overlay of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Pulled from the secondary icon, this is the \"secondary background\" of the secondary icon. Confusing? Sure, that's why I call it \"overlay\" here: because as far as it's been used thus far, it has been for an optional overlay image. We'll see if that holds up, but at least for now it explains what this image is a bit better.

        :return: The secondary_overlay of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: str
        """
        return self._secondary_overlay

    @secondary_overlay.setter
    def secondary_overlay(self, secondary_overlay):
        """Sets the secondary_overlay of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Pulled from the secondary icon, this is the \"secondary background\" of the secondary icon. Confusing? Sure, that's why I call it \"overlay\" here: because as far as it's been used thus far, it has been for an optional overlay image. We'll see if that holds up, but at least for now it explains what this image is a bit better.

        :param secondary_overlay: The secondary_overlay of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type secondary_overlay: str
        """

        self._secondary_overlay = secondary_overlay

    @property
    def secondary_special(self):
        """Gets the secondary_special of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Pulled from the Secondary Icon, this is the \"special\" background for the item. For Emblems, this is the background image used on the Details view: but it need not be limited to that for other types of items.

        :return: The secondary_special of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: str
        """
        return self._secondary_special

    @secondary_special.setter
    def secondary_special(self, secondary_special):
        """Sets the secondary_special of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Pulled from the Secondary Icon, this is the \"special\" background for the item. For Emblems, this is the background image used on the Details view: but it need not be limited to that for other types of items.

        :param secondary_special: The secondary_special of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type secondary_special: str
        """

        self._secondary_special = secondary_special

    @property
    def set_data(self):
        """Gets the set_data of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item is a quest, this block will be non-null. In practice, I wish I had called this the Quest block, but at the time it wasn't clear to me whether it would end up being used for purposes other than quests. It will contain data about the steps in the quest, and mechanics we can use for displaying and tracking the quest.

        :return: The set_data of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemSetBlockDefinition
        """
        return self._set_data

    @set_data.setter
    def set_data(self, set_data):
        """Sets the set_data of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item is a quest, this block will be non-null. In practice, I wish I had called this the Quest block, but at the time it wasn't clear to me whether it would end up being used for purposes other than quests. It will contain data about the steps in the quest, and mechanics we can use for displaying and tracking the quest.

        :param set_data: The set_data of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type set_data: DestinyDefinitionsDestinyItemSetBlockDefinition
        """

        self._set_data = set_data

    @property
    def sockets(self):
        """Gets the sockets of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has any Sockets, this will be non-null and the individual sockets on the item will be defined herein.

        :return: The sockets of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemSocketBlockDefinition
        """
        return self._sockets

    @sockets.setter
    def sockets(self, sockets):
        """Sets the sockets of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has any Sockets, this will be non-null and the individual sockets on the item will be defined herein.

        :param sockets: The sockets of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type sockets: DestinyDefinitionsDestinyItemSocketBlockDefinition
        """

        self._sockets = sockets

    @property
    def source_data(self):
        """Gets the source_data of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has a known source, this block will be non-null and populated with source information. Unfortunately, at this time we are not generating sources: that is some aggressively manual work which we didn't have time for, and I'm hoping to get back to at some point in the future.

        :return: The source_data of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemSourceBlockDefinition
        """
        return self._source_data

    @source_data.setter
    def source_data(self, source_data):
        """Sets the source_data of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has a known source, this block will be non-null and populated with source information. Unfortunately, at this time we are not generating sources: that is some aggressively manual work which we didn't have time for, and I'm hoping to get back to at some point in the future.

        :param source_data: The source_data of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type source_data: DestinyDefinitionsDestinyItemSourceBlockDefinition
        """

        self._source_data = source_data

    @property
    def special_item_type(self):
        """Gets the special_item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        In Destiny 1, we identified some items as having particular categories that we'd like to know about for various internal logic purposes. These are defined in SpecialItemType, and while these days the itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.

        :return: The special_item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._special_item_type

    @special_item_type.setter
    def special_item_type(self, special_item_type):
        """Sets the special_item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        In Destiny 1, we identified some items as having particular categories that we'd like to know about for various internal logic purposes. These are defined in SpecialItemType, and while these days the itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.

        :param special_item_type: The special_item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type special_item_type: int
        """

        self._special_item_type = special_item_type

    @property
    def stats(self):
        """Gets the stats of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can have stats (such as a weapon, armor, or vehicle), this block will be non-null and populated with the stats found on the item.

        :return: The stats of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemStatBlockDefinition
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can have stats (such as a weapon, armor, or vehicle), this block will be non-null and populated with the stats found on the item.

        :param stats: The stats of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type stats: DestinyDefinitionsDestinyItemStatBlockDefinition
        """

        self._stats = stats

    @property
    def summary(self):
        """Gets the summary of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Summary data about the item.

        :return: The summary of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemSummaryBlockDefinition
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Summary data about the item.

        :param summary: The summary of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type summary: DestinyDefinitionsDestinyItemSummaryBlockDefinition
        """

        self._summary = summary

    @property
    def summary_item_hash(self):
        """Gets the summary_item_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        There are times when the game will show you a \"summary/vague\" version of an item - such as a description of its type represented as a DestinyInventoryItemDefinition - rather than display the item itself.  This happens sometimes when summarizing possible rewards in a tooltip. This is the item displayed instead, if it exists.

        :return: The summary_item_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: int
        """
        return self._summary_item_hash

    @summary_item_hash.setter
    def summary_item_hash(self, summary_item_hash):
        """Sets the summary_item_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        There are times when the game will show you a \"summary/vague\" version of an item - such as a description of its type represented as a DestinyInventoryItemDefinition - rather than display the item itself.  This happens sometimes when summarizing possible rewards in a tooltip. This is the item displayed instead, if it exists.

        :param summary_item_hash: The summary_item_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type summary_item_hash: int
        """

        self._summary_item_hash = summary_item_hash

    @property
    def talent_grid(self):
        """Gets the talent_grid of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has a Talent Grid, this will be non-null and the properties of the grid defined herein. Note that, while many items still have talent grids, the only ones with meaningful Nodes still on them will be Subclass/\"Build\" items.

        :return: The talent_grid of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemTalentGridBlockDefinition
        """
        return self._talent_grid

    @talent_grid.setter
    def talent_grid(self, talent_grid):
        """Sets the talent_grid of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has a Talent Grid, this will be non-null and the properties of the grid defined herein. Note that, while many items still have talent grids, the only ones with meaningful Nodes still on them will be Subclass/\"Build\" items.

        :param talent_grid: The talent_grid of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type talent_grid: DestinyDefinitionsDestinyItemTalentGridBlockDefinition
        """

        self._talent_grid = talent_grid

    @property
    def tooltip_notifications(self):
        """Gets the tooltip_notifications of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Tooltips that only come up conditionally for the item. Check the live data DestinyItemComponent.tooltipNotificationIndexes property for which of these should be shown at runtime.

        :return: The tooltip_notifications of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: List[DestinyDefinitionsDestinyItemTooltipNotification]
        """
        return self._tooltip_notifications

    @tooltip_notifications.setter
    def tooltip_notifications(self, tooltip_notifications):
        """Sets the tooltip_notifications of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Tooltips that only come up conditionally for the item. Check the live data DestinyItemComponent.tooltipNotificationIndexes property for which of these should be shown at runtime.

        :param tooltip_notifications: The tooltip_notifications of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type tooltip_notifications: List[DestinyDefinitionsDestinyItemTooltipNotification]
        """

        self._tooltip_notifications = tooltip_notifications

    @property
    def tooltip_style(self):
        """Gets the tooltip_style of this DestinyDefinitionsDestinyInventoryItemDefinition.

        An identifier that the game UI uses to determine what type of tooltip to show for the item. These have no corresponding definitions that BNet can link to: so it'll be up to you to interpret and display your UI differently according to these styles (or ignore it).

        :return: The tooltip_style of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: str
        """
        return self._tooltip_style

    @tooltip_style.setter
    def tooltip_style(self, tooltip_style):
        """Sets the tooltip_style of this DestinyDefinitionsDestinyInventoryItemDefinition.

        An identifier that the game UI uses to determine what type of tooltip to show for the item. These have no corresponding definitions that BNet can link to: so it'll be up to you to interpret and display your UI differently according to these styles (or ignore it).

        :param tooltip_style: The tooltip_style of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type tooltip_style: str
        """

        self._tooltip_style = tooltip_style

    @property
    def trait_hashes(self):
        """Gets the trait_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.

        These are the corresponding trait definition hashes for the entries in traitIds.

        :return: The trait_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: List[int]
        """
        return self._trait_hashes

    @trait_hashes.setter
    def trait_hashes(self, trait_hashes):
        """Sets the trait_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.

        These are the corresponding trait definition hashes for the entries in traitIds.

        :param trait_hashes: The trait_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type trait_hashes: List[int]
        """

        self._trait_hashes = trait_hashes

    @property
    def trait_ids(self):
        """Gets the trait_ids of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Traits are metadata tags applied to this item. For example: armor slot, weapon type, foundry, faction, etc. These IDs come from the game and don't map to any content, but should still be useful.

        :return: The trait_ids of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: List[str]
        """
        return self._trait_ids

    @trait_ids.setter
    def trait_ids(self, trait_ids):
        """Sets the trait_ids of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Traits are metadata tags applied to this item. For example: armor slot, weapon type, foundry, faction, etc. These IDs come from the game and don't map to any content, but should still be useful.

        :param trait_ids: The trait_ids of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type trait_ids: List[str]
        """

        self._trait_ids = trait_ids

    @property
    def translation_block(self):
        """Gets the translation_block of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can be rendered, this block will be non-null and will be populated with rendering information.

        :return: The translation_block of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemTranslationBlockDefinition
        """
        return self._translation_block

    @translation_block.setter
    def translation_block(self, translation_block):
        """Sets the translation_block of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can be rendered, this block will be non-null and will be populated with rendering information.

        :param translation_block: The translation_block of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type translation_block: DestinyDefinitionsDestinyItemTranslationBlockDefinition
        """

        self._translation_block = translation_block

    @property
    def ui_item_display_style(self):
        """Gets the ui_item_display_style of this DestinyDefinitionsDestinyInventoryItemDefinition.

        A string identifier that the game's UI uses to determine how the item should be rendered in inventory screens and the like. This could really be anything - at the moment, we don't have the time to really breakdown and maintain all the possible strings this could be, partly because new ones could be added ad hoc. But if you want to use it to dictate your own UI, or look for items with a certain display style, go for it!

        :return: The ui_item_display_style of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: str
        """
        return self._ui_item_display_style

    @ui_item_display_style.setter
    def ui_item_display_style(self, ui_item_display_style):
        """Sets the ui_item_display_style of this DestinyDefinitionsDestinyInventoryItemDefinition.

        A string identifier that the game's UI uses to determine how the item should be rendered in inventory screens and the like. This could really be anything - at the moment, we don't have the time to really breakdown and maintain all the possible strings this could be, partly because new ones could be added ad hoc. But if you want to use it to dictate your own UI, or look for items with a certain display style, go for it!

        :param ui_item_display_style: The ui_item_display_style of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type ui_item_display_style: str
        """

        self._ui_item_display_style = ui_item_display_style

    @property
    def value(self):
        """Gets the value of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The conceptual \"Value\" of an item, if any was defined. See the DestinyItemValueBlockDefinition for more details.

        :return: The value of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :rtype: DestinyDefinitionsDestinyItemValueBlockDefinition
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The conceptual \"Value\" of an item, if any was defined. See the DestinyItemValueBlockDefinition for more details.

        :param value: The value of this DestinyDefinitionsDestinyInventoryItemDefinition.
        :type value: DestinyDefinitionsDestinyItemValueBlockDefinition
        """

        self._value = value
