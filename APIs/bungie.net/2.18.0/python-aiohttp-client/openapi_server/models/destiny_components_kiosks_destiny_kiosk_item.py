# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_quests_destiny_objective_progress import DestinyQuestsDestinyObjectiveProgress
from openapi_server import util


class DestinyComponentsKiosksDestinyKioskItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_acquire: bool=None, failure_indexes: List[int]=None, flavor_objective: DestinyQuestsDestinyObjectiveProgress=None, index: int=None):
        """DestinyComponentsKiosksDestinyKioskItem - a model defined in OpenAPI

        :param can_acquire: The can_acquire of this DestinyComponentsKiosksDestinyKioskItem.
        :param failure_indexes: The failure_indexes of this DestinyComponentsKiosksDestinyKioskItem.
        :param flavor_objective: The flavor_objective of this DestinyComponentsKiosksDestinyKioskItem.
        :param index: The index of this DestinyComponentsKiosksDestinyKioskItem.
        """
        self.openapi_types = {
            'can_acquire': bool,
            'failure_indexes': List[int],
            'flavor_objective': DestinyQuestsDestinyObjectiveProgress,
            'index': int
        }

        self.attribute_map = {
            'can_acquire': 'canAcquire',
            'failure_indexes': 'failureIndexes',
            'flavor_objective': 'flavorObjective',
            'index': 'index'
        }

        self._can_acquire = can_acquire
        self._failure_indexes = failure_indexes
        self._flavor_objective = flavor_objective
        self._index = index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyComponentsKiosksDestinyKioskItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Components.Kiosks.DestinyKioskItem of this DestinyComponentsKiosksDestinyKioskItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_acquire(self):
        """Gets the can_acquire of this DestinyComponentsKiosksDestinyKioskItem.

        If true, the user can not only see the item, but they can acquire it. It is possible that a user can see a kiosk item and not be able to acquire it.

        :return: The can_acquire of this DestinyComponentsKiosksDestinyKioskItem.
        :rtype: bool
        """
        return self._can_acquire

    @can_acquire.setter
    def can_acquire(self, can_acquire):
        """Sets the can_acquire of this DestinyComponentsKiosksDestinyKioskItem.

        If true, the user can not only see the item, but they can acquire it. It is possible that a user can see a kiosk item and not be able to acquire it.

        :param can_acquire: The can_acquire of this DestinyComponentsKiosksDestinyKioskItem.
        :type can_acquire: bool
        """

        self._can_acquire = can_acquire

    @property
    def failure_indexes(self):
        """Gets the failure_indexes of this DestinyComponentsKiosksDestinyKioskItem.

        Indexes into failureStrings for the Vendor, indicating the reasons why it failed if any.

        :return: The failure_indexes of this DestinyComponentsKiosksDestinyKioskItem.
        :rtype: List[int]
        """
        return self._failure_indexes

    @failure_indexes.setter
    def failure_indexes(self, failure_indexes):
        """Sets the failure_indexes of this DestinyComponentsKiosksDestinyKioskItem.

        Indexes into failureStrings for the Vendor, indicating the reasons why it failed if any.

        :param failure_indexes: The failure_indexes of this DestinyComponentsKiosksDestinyKioskItem.
        :type failure_indexes: List[int]
        """

        self._failure_indexes = failure_indexes

    @property
    def flavor_objective(self):
        """Gets the flavor_objective of this DestinyComponentsKiosksDestinyKioskItem.

        I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for \"flavor\" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.

        :return: The flavor_objective of this DestinyComponentsKiosksDestinyKioskItem.
        :rtype: DestinyQuestsDestinyObjectiveProgress
        """
        return self._flavor_objective

    @flavor_objective.setter
    def flavor_objective(self, flavor_objective):
        """Sets the flavor_objective of this DestinyComponentsKiosksDestinyKioskItem.

        I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for \"flavor\" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.

        :param flavor_objective: The flavor_objective of this DestinyComponentsKiosksDestinyKioskItem.
        :type flavor_objective: DestinyQuestsDestinyObjectiveProgress
        """

        self._flavor_objective = flavor_objective

    @property
    def index(self):
        """Gets the index of this DestinyComponentsKiosksDestinyKioskItem.

        The index of the item in the related DestinyVendorDefintion's itemList property, representing the sale.

        :return: The index of this DestinyComponentsKiosksDestinyKioskItem.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyComponentsKiosksDestinyKioskItem.

        The index of the item in the related DestinyVendorDefintion's itemList property, representing the sale.

        :param index: The index of this DestinyComponentsKiosksDestinyKioskItem.
        :type index: int
        """

        self._index = index
