# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, highest_opposing_faction_score: float=None, number_of_opponents: int=None, number_of_players: int=None, score: float=None, start_time: datetime=None):
        """DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity - a model defined in OpenAPI

        :param end_time: The end_time of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :param highest_opposing_faction_score: The highest_opposing_faction_score of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :param number_of_opponents: The number_of_opponents of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :param number_of_players: The number_of_players of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :param score: The score of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :param start_time: The start_time of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        """
        self.openapi_types = {
            'end_time': datetime,
            'highest_opposing_faction_score': float,
            'number_of_opponents': int,
            'number_of_players': int,
            'score': float,
            'start_time': datetime
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'highest_opposing_faction_score': 'highestOpposingFactionScore',
            'number_of_opponents': 'numberOfOpponents',
            'number_of_players': 'numberOfPlayers',
            'score': 'score',
            'start_time': 'startTime'
        }

        self._end_time = end_time
        self._highest_opposing_faction_score = highest_opposing_faction_score
        self._number_of_opponents = number_of_opponents
        self._number_of_players = number_of_players
        self._score = score
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Components.Profiles.DestinyProfileTransitoryCurrentActivity of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.

        If you're still in it but it \"ended\" (like when folks are dancing around the loot after they beat a boss), this is when the activity ended.

        :return: The end_time of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.

        If you're still in it but it \"ended\" (like when folks are dancing around the loot after they beat a boss), this is when the activity ended.

        :param end_time: The end_time of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def highest_opposing_faction_score(self):
        """Gets the highest_opposing_faction_score of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.

        If you have human opponents, this is the highest opposing team's score.

        :return: The highest_opposing_faction_score of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :rtype: float
        """
        return self._highest_opposing_faction_score

    @highest_opposing_faction_score.setter
    def highest_opposing_faction_score(self, highest_opposing_faction_score):
        """Sets the highest_opposing_faction_score of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.

        If you have human opponents, this is the highest opposing team's score.

        :param highest_opposing_faction_score: The highest_opposing_faction_score of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :type highest_opposing_faction_score: float
        """

        self._highest_opposing_faction_score = highest_opposing_faction_score

    @property
    def number_of_opponents(self):
        """Gets the number_of_opponents of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.

        This is how many human or poorly crafted aimbot opponents you have.

        :return: The number_of_opponents of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :rtype: int
        """
        return self._number_of_opponents

    @number_of_opponents.setter
    def number_of_opponents(self, number_of_opponents):
        """Sets the number_of_opponents of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.

        This is how many human or poorly crafted aimbot opponents you have.

        :param number_of_opponents: The number_of_opponents of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :type number_of_opponents: int
        """

        self._number_of_opponents = number_of_opponents

    @property
    def number_of_players(self):
        """Gets the number_of_players of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.

        This is how many human or poorly crafted aimbots are on your team.

        :return: The number_of_players of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :rtype: int
        """
        return self._number_of_players

    @number_of_players.setter
    def number_of_players(self, number_of_players):
        """Sets the number_of_players of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.

        This is how many human or poorly crafted aimbots are on your team.

        :param number_of_players: The number_of_players of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :type number_of_players: int
        """

        self._number_of_players = number_of_players

    @property
    def score(self):
        """Gets the score of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.

        This is what our non-authoritative source thought the score was.

        :return: The score of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.

        This is what our non-authoritative source thought the score was.

        :param score: The score of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :type score: float
        """

        self._score = score

    @property
    def start_time(self):
        """Gets the start_time of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.

        When the activity started.

        :return: The start_time of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.

        When the activity started.

        :param start_time: The start_time of this DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.
        :type start_time: datetime
        """

        self._start_time = start_time
