# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_components_inventory_destiny_platform_silver_component import DestinyComponentsInventoryDestinyPlatformSilverComponent
from openapi_server import util


class DestinyResponsesDestinyProfileUserInfoCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applicable_membership_types: List[int]=None, bungie_global_display_name: str=None, bungie_global_display_name_code: int=None, cross_save_override: int=None, date_last_played: datetime=None, display_name: str=None, icon_path: str=None, is_cross_save_primary: bool=None, is_overridden: bool=None, is_public: bool=None, membership_id: int=None, membership_type: int=None, platform_silver: DestinyComponentsInventoryDestinyPlatformSilverComponent=None, supplemental_display_name: str=None, unpaired_game_versions: int=None):
        """DestinyResponsesDestinyProfileUserInfoCard - a model defined in OpenAPI

        :param applicable_membership_types: The applicable_membership_types of this DestinyResponsesDestinyProfileUserInfoCard.
        :param bungie_global_display_name: The bungie_global_display_name of this DestinyResponsesDestinyProfileUserInfoCard.
        :param bungie_global_display_name_code: The bungie_global_display_name_code of this DestinyResponsesDestinyProfileUserInfoCard.
        :param cross_save_override: The cross_save_override of this DestinyResponsesDestinyProfileUserInfoCard.
        :param date_last_played: The date_last_played of this DestinyResponsesDestinyProfileUserInfoCard.
        :param display_name: The display_name of this DestinyResponsesDestinyProfileUserInfoCard.
        :param icon_path: The icon_path of this DestinyResponsesDestinyProfileUserInfoCard.
        :param is_cross_save_primary: The is_cross_save_primary of this DestinyResponsesDestinyProfileUserInfoCard.
        :param is_overridden: The is_overridden of this DestinyResponsesDestinyProfileUserInfoCard.
        :param is_public: The is_public of this DestinyResponsesDestinyProfileUserInfoCard.
        :param membership_id: The membership_id of this DestinyResponsesDestinyProfileUserInfoCard.
        :param membership_type: The membership_type of this DestinyResponsesDestinyProfileUserInfoCard.
        :param platform_silver: The platform_silver of this DestinyResponsesDestinyProfileUserInfoCard.
        :param supplemental_display_name: The supplemental_display_name of this DestinyResponsesDestinyProfileUserInfoCard.
        :param unpaired_game_versions: The unpaired_game_versions of this DestinyResponsesDestinyProfileUserInfoCard.
        """
        self.openapi_types = {
            'applicable_membership_types': List[int],
            'bungie_global_display_name': str,
            'bungie_global_display_name_code': int,
            'cross_save_override': int,
            'date_last_played': datetime,
            'display_name': str,
            'icon_path': str,
            'is_cross_save_primary': bool,
            'is_overridden': bool,
            'is_public': bool,
            'membership_id': int,
            'membership_type': int,
            'platform_silver': DestinyComponentsInventoryDestinyPlatformSilverComponent,
            'supplemental_display_name': str,
            'unpaired_game_versions': int
        }

        self.attribute_map = {
            'applicable_membership_types': 'applicableMembershipTypes',
            'bungie_global_display_name': 'bungieGlobalDisplayName',
            'bungie_global_display_name_code': 'bungieGlobalDisplayNameCode',
            'cross_save_override': 'crossSaveOverride',
            'date_last_played': 'dateLastPlayed',
            'display_name': 'displayName',
            'icon_path': 'iconPath',
            'is_cross_save_primary': 'isCrossSavePrimary',
            'is_overridden': 'isOverridden',
            'is_public': 'isPublic',
            'membership_id': 'membershipId',
            'membership_type': 'membershipType',
            'platform_silver': 'platformSilver',
            'supplemental_display_name': 'supplementalDisplayName',
            'unpaired_game_versions': 'unpairedGameVersions'
        }

        self._applicable_membership_types = applicable_membership_types
        self._bungie_global_display_name = bungie_global_display_name
        self._bungie_global_display_name_code = bungie_global_display_name_code
        self._cross_save_override = cross_save_override
        self._date_last_played = date_last_played
        self._display_name = display_name
        self._icon_path = icon_path
        self._is_cross_save_primary = is_cross_save_primary
        self._is_overridden = is_overridden
        self._is_public = is_public
        self._membership_id = membership_id
        self._membership_type = membership_type
        self._platform_silver = platform_silver
        self._supplemental_display_name = supplemental_display_name
        self._unpaired_game_versions = unpaired_game_versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyResponsesDestinyProfileUserInfoCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Responses.DestinyProfileUserInfoCard of this DestinyResponsesDestinyProfileUserInfoCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applicable_membership_types(self):
        """Gets the applicable_membership_types of this DestinyResponsesDestinyProfileUserInfoCard.

        The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list

        :return: The applicable_membership_types of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: List[int]
        """
        return self._applicable_membership_types

    @applicable_membership_types.setter
    def applicable_membership_types(self, applicable_membership_types):
        """Sets the applicable_membership_types of this DestinyResponsesDestinyProfileUserInfoCard.

        The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list

        :param applicable_membership_types: The applicable_membership_types of this DestinyResponsesDestinyProfileUserInfoCard.
        :type applicable_membership_types: List[int]
        """

        self._applicable_membership_types = applicable_membership_types

    @property
    def bungie_global_display_name(self):
        """Gets the bungie_global_display_name of this DestinyResponsesDestinyProfileUserInfoCard.

        The bungie global display name, if set.

        :return: The bungie_global_display_name of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: str
        """
        return self._bungie_global_display_name

    @bungie_global_display_name.setter
    def bungie_global_display_name(self, bungie_global_display_name):
        """Sets the bungie_global_display_name of this DestinyResponsesDestinyProfileUserInfoCard.

        The bungie global display name, if set.

        :param bungie_global_display_name: The bungie_global_display_name of this DestinyResponsesDestinyProfileUserInfoCard.
        :type bungie_global_display_name: str
        """

        self._bungie_global_display_name = bungie_global_display_name

    @property
    def bungie_global_display_name_code(self):
        """Gets the bungie_global_display_name_code of this DestinyResponsesDestinyProfileUserInfoCard.

        The bungie global display name code, if set.

        :return: The bungie_global_display_name_code of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: int
        """
        return self._bungie_global_display_name_code

    @bungie_global_display_name_code.setter
    def bungie_global_display_name_code(self, bungie_global_display_name_code):
        """Sets the bungie_global_display_name_code of this DestinyResponsesDestinyProfileUserInfoCard.

        The bungie global display name code, if set.

        :param bungie_global_display_name_code: The bungie_global_display_name_code of this DestinyResponsesDestinyProfileUserInfoCard.
        :type bungie_global_display_name_code: int
        """

        self._bungie_global_display_name_code = bungie_global_display_name_code

    @property
    def cross_save_override(self):
        """Gets the cross_save_override of this DestinyResponsesDestinyProfileUserInfoCard.

        If there is a cross save override in effect, this value will tell you the type that is overridding this one.

        :return: The cross_save_override of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: int
        """
        return self._cross_save_override

    @cross_save_override.setter
    def cross_save_override(self, cross_save_override):
        """Sets the cross_save_override of this DestinyResponsesDestinyProfileUserInfoCard.

        If there is a cross save override in effect, this value will tell you the type that is overridding this one.

        :param cross_save_override: The cross_save_override of this DestinyResponsesDestinyProfileUserInfoCard.
        :type cross_save_override: int
        """

        self._cross_save_override = cross_save_override

    @property
    def date_last_played(self):
        """Gets the date_last_played of this DestinyResponsesDestinyProfileUserInfoCard.


        :return: The date_last_played of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: datetime
        """
        return self._date_last_played

    @date_last_played.setter
    def date_last_played(self, date_last_played):
        """Sets the date_last_played of this DestinyResponsesDestinyProfileUserInfoCard.


        :param date_last_played: The date_last_played of this DestinyResponsesDestinyProfileUserInfoCard.
        :type date_last_played: datetime
        """

        self._date_last_played = date_last_played

    @property
    def display_name(self):
        """Gets the display_name of this DestinyResponsesDestinyProfileUserInfoCard.

        Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.

        :return: The display_name of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DestinyResponsesDestinyProfileUserInfoCard.

        Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.

        :param display_name: The display_name of this DestinyResponsesDestinyProfileUserInfoCard.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def icon_path(self):
        """Gets the icon_path of this DestinyResponsesDestinyProfileUserInfoCard.

        URL the Icon if available.

        :return: The icon_path of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: str
        """
        return self._icon_path

    @icon_path.setter
    def icon_path(self, icon_path):
        """Sets the icon_path of this DestinyResponsesDestinyProfileUserInfoCard.

        URL the Icon if available.

        :param icon_path: The icon_path of this DestinyResponsesDestinyProfileUserInfoCard.
        :type icon_path: str
        """

        self._icon_path = icon_path

    @property
    def is_cross_save_primary(self):
        """Gets the is_cross_save_primary of this DestinyResponsesDestinyProfileUserInfoCard.

        If true, this account is hooked up as the \"Primary\" cross save account for one or more platforms.

        :return: The is_cross_save_primary of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: bool
        """
        return self._is_cross_save_primary

    @is_cross_save_primary.setter
    def is_cross_save_primary(self, is_cross_save_primary):
        """Sets the is_cross_save_primary of this DestinyResponsesDestinyProfileUserInfoCard.

        If true, this account is hooked up as the \"Primary\" cross save account for one or more platforms.

        :param is_cross_save_primary: The is_cross_save_primary of this DestinyResponsesDestinyProfileUserInfoCard.
        :type is_cross_save_primary: bool
        """

        self._is_cross_save_primary = is_cross_save_primary

    @property
    def is_overridden(self):
        """Gets the is_overridden of this DestinyResponsesDestinyProfileUserInfoCard.

        If this profile is being overridden/obscured by Cross Save, this will be set to true. We will still return the profile for display purposes where users need to know the info: it is up to any given area of the app/site to determine if this profile should still be shown.

        :return: The is_overridden of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: bool
        """
        return self._is_overridden

    @is_overridden.setter
    def is_overridden(self, is_overridden):
        """Sets the is_overridden of this DestinyResponsesDestinyProfileUserInfoCard.

        If this profile is being overridden/obscured by Cross Save, this will be set to true. We will still return the profile for display purposes where users need to know the info: it is up to any given area of the app/site to determine if this profile should still be shown.

        :param is_overridden: The is_overridden of this DestinyResponsesDestinyProfileUserInfoCard.
        :type is_overridden: bool
        """

        self._is_overridden = is_overridden

    @property
    def is_public(self):
        """Gets the is_public of this DestinyResponsesDestinyProfileUserInfoCard.

        If True, this is a public user membership.

        :return: The is_public of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this DestinyResponsesDestinyProfileUserInfoCard.

        If True, this is a public user membership.

        :param is_public: The is_public of this DestinyResponsesDestinyProfileUserInfoCard.
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def membership_id(self):
        """Gets the membership_id of this DestinyResponsesDestinyProfileUserInfoCard.

        Membership ID as they user is known in the Accounts service

        :return: The membership_id of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: int
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this DestinyResponsesDestinyProfileUserInfoCard.

        Membership ID as they user is known in the Accounts service

        :param membership_id: The membership_id of this DestinyResponsesDestinyProfileUserInfoCard.
        :type membership_id: int
        """

        self._membership_id = membership_id

    @property
    def membership_type(self):
        """Gets the membership_type of this DestinyResponsesDestinyProfileUserInfoCard.

        Type of the membership. Not necessarily the native type.

        :return: The membership_type of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: int
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this DestinyResponsesDestinyProfileUserInfoCard.

        Type of the membership. Not necessarily the native type.

        :param membership_type: The membership_type of this DestinyResponsesDestinyProfileUserInfoCard.
        :type membership_type: int
        """

        self._membership_type = membership_type

    @property
    def platform_silver(self):
        """Gets the platform_silver of this DestinyResponsesDestinyProfileUserInfoCard.

        This is the silver available on this Profile across any platforms on which they have purchased silver.   This is only available if you are requesting yourself.

        :return: The platform_silver of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: DestinyComponentsInventoryDestinyPlatformSilverComponent
        """
        return self._platform_silver

    @platform_silver.setter
    def platform_silver(self, platform_silver):
        """Sets the platform_silver of this DestinyResponsesDestinyProfileUserInfoCard.

        This is the silver available on this Profile across any platforms on which they have purchased silver.   This is only available if you are requesting yourself.

        :param platform_silver: The platform_silver of this DestinyResponsesDestinyProfileUserInfoCard.
        :type platform_silver: DestinyComponentsInventoryDestinyPlatformSilverComponent
        """

        self._platform_silver = platform_silver

    @property
    def supplemental_display_name(self):
        """Gets the supplemental_display_name of this DestinyResponsesDestinyProfileUserInfoCard.

        A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.

        :return: The supplemental_display_name of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: str
        """
        return self._supplemental_display_name

    @supplemental_display_name.setter
    def supplemental_display_name(self, supplemental_display_name):
        """Sets the supplemental_display_name of this DestinyResponsesDestinyProfileUserInfoCard.

        A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.

        :param supplemental_display_name: The supplemental_display_name of this DestinyResponsesDestinyProfileUserInfoCard.
        :type supplemental_display_name: str
        """

        self._supplemental_display_name = supplemental_display_name

    @property
    def unpaired_game_versions(self):
        """Gets the unpaired_game_versions of this DestinyResponsesDestinyProfileUserInfoCard.

        If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.   For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile's original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.   If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can't get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it.

        :return: The unpaired_game_versions of this DestinyResponsesDestinyProfileUserInfoCard.
        :rtype: int
        """
        return self._unpaired_game_versions

    @unpaired_game_versions.setter
    def unpaired_game_versions(self, unpaired_game_versions):
        """Sets the unpaired_game_versions of this DestinyResponsesDestinyProfileUserInfoCard.

        If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.   For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile's original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.   If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can't get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it.

        :param unpaired_game_versions: The unpaired_game_versions of this DestinyResponsesDestinyProfileUserInfoCard.
        :type unpaired_game_versions: int
        """
        allowed_values = [0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512]  # noqa: E501
        if unpaired_game_versions not in allowed_values:
            raise ValueError(
                "Invalid value for `unpaired_game_versions` ({0}), must be one of {1}"
                .format(unpaired_game_versions, allowed_values)
            )

        self._unpaired_game_versions = unpaired_game_versions
