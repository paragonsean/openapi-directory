# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tokens_reward_availability_model import TokensRewardAvailabilityModel
from openapi_server import util


class TokensUserRewardAvailabilityModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_model: TokensRewardAvailabilityModel=None, is_available_for_user: bool=None, is_unlocked_for_user: bool=None):
        """TokensUserRewardAvailabilityModel - a model defined in OpenAPI

        :param availability_model: The availability_model of this TokensUserRewardAvailabilityModel.
        :param is_available_for_user: The is_available_for_user of this TokensUserRewardAvailabilityModel.
        :param is_unlocked_for_user: The is_unlocked_for_user of this TokensUserRewardAvailabilityModel.
        """
        self.openapi_types = {
            'availability_model': TokensRewardAvailabilityModel,
            'is_available_for_user': bool,
            'is_unlocked_for_user': bool
        }

        self.attribute_map = {
            'availability_model': 'AvailabilityModel',
            'is_available_for_user': 'IsAvailableForUser',
            'is_unlocked_for_user': 'IsUnlockedForUser'
        }

        self._availability_model = availability_model
        self._is_available_for_user = is_available_for_user
        self._is_unlocked_for_user = is_unlocked_for_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokensUserRewardAvailabilityModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tokens.UserRewardAvailabilityModel of this TokensUserRewardAvailabilityModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_model(self):
        """Gets the availability_model of this TokensUserRewardAvailabilityModel.


        :return: The availability_model of this TokensUserRewardAvailabilityModel.
        :rtype: TokensRewardAvailabilityModel
        """
        return self._availability_model

    @availability_model.setter
    def availability_model(self, availability_model):
        """Sets the availability_model of this TokensUserRewardAvailabilityModel.


        :param availability_model: The availability_model of this TokensUserRewardAvailabilityModel.
        :type availability_model: TokensRewardAvailabilityModel
        """

        self._availability_model = availability_model

    @property
    def is_available_for_user(self):
        """Gets the is_available_for_user of this TokensUserRewardAvailabilityModel.


        :return: The is_available_for_user of this TokensUserRewardAvailabilityModel.
        :rtype: bool
        """
        return self._is_available_for_user

    @is_available_for_user.setter
    def is_available_for_user(self, is_available_for_user):
        """Sets the is_available_for_user of this TokensUserRewardAvailabilityModel.


        :param is_available_for_user: The is_available_for_user of this TokensUserRewardAvailabilityModel.
        :type is_available_for_user: bool
        """

        self._is_available_for_user = is_available_for_user

    @property
    def is_unlocked_for_user(self):
        """Gets the is_unlocked_for_user of this TokensUserRewardAvailabilityModel.


        :return: The is_unlocked_for_user of this TokensUserRewardAvailabilityModel.
        :rtype: bool
        """
        return self._is_unlocked_for_user

    @is_unlocked_for_user.setter
    def is_unlocked_for_user(self, is_unlocked_for_user):
        """Sets the is_unlocked_for_user of this TokensUserRewardAvailabilityModel.


        :param is_unlocked_for_user: The is_unlocked_for_user of this TokensUserRewardAvailabilityModel.
        :type is_unlocked_for_user: bool
        """

        self._is_unlocked_for_user = is_unlocked_for_user
