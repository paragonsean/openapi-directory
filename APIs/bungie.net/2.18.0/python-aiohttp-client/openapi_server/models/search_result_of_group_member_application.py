# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.groups_v2_group_member_application import GroupsV2GroupMemberApplication
from openapi_server.models.queries_paged_query import QueriesPagedQuery
from openapi_server import util


class SearchResultOfGroupMemberApplication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_more: bool=None, query: QueriesPagedQuery=None, replacement_continuation_token: str=None, results: List[GroupsV2GroupMemberApplication]=None, total_results: int=None, use_total_results: bool=None):
        """SearchResultOfGroupMemberApplication - a model defined in OpenAPI

        :param has_more: The has_more of this SearchResultOfGroupMemberApplication.
        :param query: The query of this SearchResultOfGroupMemberApplication.
        :param replacement_continuation_token: The replacement_continuation_token of this SearchResultOfGroupMemberApplication.
        :param results: The results of this SearchResultOfGroupMemberApplication.
        :param total_results: The total_results of this SearchResultOfGroupMemberApplication.
        :param use_total_results: The use_total_results of this SearchResultOfGroupMemberApplication.
        """
        self.openapi_types = {
            'has_more': bool,
            'query': QueriesPagedQuery,
            'replacement_continuation_token': str,
            'results': List[GroupsV2GroupMemberApplication],
            'total_results': int,
            'use_total_results': bool
        }

        self.attribute_map = {
            'has_more': 'hasMore',
            'query': 'query',
            'replacement_continuation_token': 'replacementContinuationToken',
            'results': 'results',
            'total_results': 'totalResults',
            'use_total_results': 'useTotalResults'
        }

        self._has_more = has_more
        self._query = query
        self._replacement_continuation_token = replacement_continuation_token
        self._results = results
        self._total_results = total_results
        self._use_total_results = use_total_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResultOfGroupMemberApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResultOfGroupMemberApplication of this SearchResultOfGroupMemberApplication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_more(self):
        """Gets the has_more of this SearchResultOfGroupMemberApplication.


        :return: The has_more of this SearchResultOfGroupMemberApplication.
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this SearchResultOfGroupMemberApplication.


        :param has_more: The has_more of this SearchResultOfGroupMemberApplication.
        :type has_more: bool
        """

        self._has_more = has_more

    @property
    def query(self):
        """Gets the query of this SearchResultOfGroupMemberApplication.


        :return: The query of this SearchResultOfGroupMemberApplication.
        :rtype: QueriesPagedQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchResultOfGroupMemberApplication.


        :param query: The query of this SearchResultOfGroupMemberApplication.
        :type query: QueriesPagedQuery
        """

        self._query = query

    @property
    def replacement_continuation_token(self):
        """Gets the replacement_continuation_token of this SearchResultOfGroupMemberApplication.


        :return: The replacement_continuation_token of this SearchResultOfGroupMemberApplication.
        :rtype: str
        """
        return self._replacement_continuation_token

    @replacement_continuation_token.setter
    def replacement_continuation_token(self, replacement_continuation_token):
        """Sets the replacement_continuation_token of this SearchResultOfGroupMemberApplication.


        :param replacement_continuation_token: The replacement_continuation_token of this SearchResultOfGroupMemberApplication.
        :type replacement_continuation_token: str
        """

        self._replacement_continuation_token = replacement_continuation_token

    @property
    def results(self):
        """Gets the results of this SearchResultOfGroupMemberApplication.


        :return: The results of this SearchResultOfGroupMemberApplication.
        :rtype: List[GroupsV2GroupMemberApplication]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this SearchResultOfGroupMemberApplication.


        :param results: The results of this SearchResultOfGroupMemberApplication.
        :type results: List[GroupsV2GroupMemberApplication]
        """

        self._results = results

    @property
    def total_results(self):
        """Gets the total_results of this SearchResultOfGroupMemberApplication.


        :return: The total_results of this SearchResultOfGroupMemberApplication.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this SearchResultOfGroupMemberApplication.


        :param total_results: The total_results of this SearchResultOfGroupMemberApplication.
        :type total_results: int
        """

        self._total_results = total_results

    @property
    def use_total_results(self):
        """Gets the use_total_results of this SearchResultOfGroupMemberApplication.

        If useTotalResults is true, then totalResults represents an accurate count.  If False, it does not, and may be estimated/only the size of the current page.  Either way, you should probably always only trust hasMore.  This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.

        :return: The use_total_results of this SearchResultOfGroupMemberApplication.
        :rtype: bool
        """
        return self._use_total_results

    @use_total_results.setter
    def use_total_results(self, use_total_results):
        """Sets the use_total_results of this SearchResultOfGroupMemberApplication.

        If useTotalResults is true, then totalResults represents an accurate count.  If False, it does not, and may be estimated/only the size of the current page.  Either way, you should probably always only trust hasMore.  This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.

        :param use_total_results: The use_total_results of this SearchResultOfGroupMemberApplication.
        :type use_total_results: bool
        """

        self._use_total_results = use_total_results
