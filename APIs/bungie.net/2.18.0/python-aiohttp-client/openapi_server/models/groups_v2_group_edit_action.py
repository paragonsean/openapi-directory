# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupsV2GroupEditAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about: str=None, allow_chat: bool=None, avatar_image_index: int=None, callsign: str=None, chat_security: int=None, default_publicity: int=None, enable_invitation_messaging_for_admins: bool=None, homepage: int=None, is_public: bool=None, is_public_topic_admin_only: bool=None, locale: str=None, membership_option: int=None, motto: str=None, name: str=None, tags: str=None, theme: str=None):
        """GroupsV2GroupEditAction - a model defined in OpenAPI

        :param about: The about of this GroupsV2GroupEditAction.
        :param allow_chat: The allow_chat of this GroupsV2GroupEditAction.
        :param avatar_image_index: The avatar_image_index of this GroupsV2GroupEditAction.
        :param callsign: The callsign of this GroupsV2GroupEditAction.
        :param chat_security: The chat_security of this GroupsV2GroupEditAction.
        :param default_publicity: The default_publicity of this GroupsV2GroupEditAction.
        :param enable_invitation_messaging_for_admins: The enable_invitation_messaging_for_admins of this GroupsV2GroupEditAction.
        :param homepage: The homepage of this GroupsV2GroupEditAction.
        :param is_public: The is_public of this GroupsV2GroupEditAction.
        :param is_public_topic_admin_only: The is_public_topic_admin_only of this GroupsV2GroupEditAction.
        :param locale: The locale of this GroupsV2GroupEditAction.
        :param membership_option: The membership_option of this GroupsV2GroupEditAction.
        :param motto: The motto of this GroupsV2GroupEditAction.
        :param name: The name of this GroupsV2GroupEditAction.
        :param tags: The tags of this GroupsV2GroupEditAction.
        :param theme: The theme of this GroupsV2GroupEditAction.
        """
        self.openapi_types = {
            'about': str,
            'allow_chat': bool,
            'avatar_image_index': int,
            'callsign': str,
            'chat_security': int,
            'default_publicity': int,
            'enable_invitation_messaging_for_admins': bool,
            'homepage': int,
            'is_public': bool,
            'is_public_topic_admin_only': bool,
            'locale': str,
            'membership_option': int,
            'motto': str,
            'name': str,
            'tags': str,
            'theme': str
        }

        self.attribute_map = {
            'about': 'about',
            'allow_chat': 'allowChat',
            'avatar_image_index': 'avatarImageIndex',
            'callsign': 'callsign',
            'chat_security': 'chatSecurity',
            'default_publicity': 'defaultPublicity',
            'enable_invitation_messaging_for_admins': 'enableInvitationMessagingForAdmins',
            'homepage': 'homepage',
            'is_public': 'isPublic',
            'is_public_topic_admin_only': 'isPublicTopicAdminOnly',
            'locale': 'locale',
            'membership_option': 'membershipOption',
            'motto': 'motto',
            'name': 'name',
            'tags': 'tags',
            'theme': 'theme'
        }

        self._about = about
        self._allow_chat = allow_chat
        self._avatar_image_index = avatar_image_index
        self._callsign = callsign
        self._chat_security = chat_security
        self._default_publicity = default_publicity
        self._enable_invitation_messaging_for_admins = enable_invitation_messaging_for_admins
        self._homepage = homepage
        self._is_public = is_public
        self._is_public_topic_admin_only = is_public_topic_admin_only
        self._locale = locale
        self._membership_option = membership_option
        self._motto = motto
        self._name = name
        self._tags = tags
        self._theme = theme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupsV2GroupEditAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupsV2.GroupEditAction of this GroupsV2GroupEditAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about(self):
        """Gets the about of this GroupsV2GroupEditAction.


        :return: The about of this GroupsV2GroupEditAction.
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this GroupsV2GroupEditAction.


        :param about: The about of this GroupsV2GroupEditAction.
        :type about: str
        """

        self._about = about

    @property
    def allow_chat(self):
        """Gets the allow_chat of this GroupsV2GroupEditAction.


        :return: The allow_chat of this GroupsV2GroupEditAction.
        :rtype: bool
        """
        return self._allow_chat

    @allow_chat.setter
    def allow_chat(self, allow_chat):
        """Sets the allow_chat of this GroupsV2GroupEditAction.


        :param allow_chat: The allow_chat of this GroupsV2GroupEditAction.
        :type allow_chat: bool
        """

        self._allow_chat = allow_chat

    @property
    def avatar_image_index(self):
        """Gets the avatar_image_index of this GroupsV2GroupEditAction.


        :return: The avatar_image_index of this GroupsV2GroupEditAction.
        :rtype: int
        """
        return self._avatar_image_index

    @avatar_image_index.setter
    def avatar_image_index(self, avatar_image_index):
        """Sets the avatar_image_index of this GroupsV2GroupEditAction.


        :param avatar_image_index: The avatar_image_index of this GroupsV2GroupEditAction.
        :type avatar_image_index: int
        """

        self._avatar_image_index = avatar_image_index

    @property
    def callsign(self):
        """Gets the callsign of this GroupsV2GroupEditAction.


        :return: The callsign of this GroupsV2GroupEditAction.
        :rtype: str
        """
        return self._callsign

    @callsign.setter
    def callsign(self, callsign):
        """Sets the callsign of this GroupsV2GroupEditAction.


        :param callsign: The callsign of this GroupsV2GroupEditAction.
        :type callsign: str
        """

        self._callsign = callsign

    @property
    def chat_security(self):
        """Gets the chat_security of this GroupsV2GroupEditAction.


        :return: The chat_security of this GroupsV2GroupEditAction.
        :rtype: int
        """
        return self._chat_security

    @chat_security.setter
    def chat_security(self, chat_security):
        """Sets the chat_security of this GroupsV2GroupEditAction.


        :param chat_security: The chat_security of this GroupsV2GroupEditAction.
        :type chat_security: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if chat_security not in allowed_values:
            raise ValueError(
                "Invalid value for `chat_security` ({0}), must be one of {1}"
                .format(chat_security, allowed_values)
            )

        self._chat_security = chat_security

    @property
    def default_publicity(self):
        """Gets the default_publicity of this GroupsV2GroupEditAction.


        :return: The default_publicity of this GroupsV2GroupEditAction.
        :rtype: int
        """
        return self._default_publicity

    @default_publicity.setter
    def default_publicity(self, default_publicity):
        """Sets the default_publicity of this GroupsV2GroupEditAction.


        :param default_publicity: The default_publicity of this GroupsV2GroupEditAction.
        :type default_publicity: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if default_publicity not in allowed_values:
            raise ValueError(
                "Invalid value for `default_publicity` ({0}), must be one of {1}"
                .format(default_publicity, allowed_values)
            )

        self._default_publicity = default_publicity

    @property
    def enable_invitation_messaging_for_admins(self):
        """Gets the enable_invitation_messaging_for_admins of this GroupsV2GroupEditAction.


        :return: The enable_invitation_messaging_for_admins of this GroupsV2GroupEditAction.
        :rtype: bool
        """
        return self._enable_invitation_messaging_for_admins

    @enable_invitation_messaging_for_admins.setter
    def enable_invitation_messaging_for_admins(self, enable_invitation_messaging_for_admins):
        """Sets the enable_invitation_messaging_for_admins of this GroupsV2GroupEditAction.


        :param enable_invitation_messaging_for_admins: The enable_invitation_messaging_for_admins of this GroupsV2GroupEditAction.
        :type enable_invitation_messaging_for_admins: bool
        """

        self._enable_invitation_messaging_for_admins = enable_invitation_messaging_for_admins

    @property
    def homepage(self):
        """Gets the homepage of this GroupsV2GroupEditAction.


        :return: The homepage of this GroupsV2GroupEditAction.
        :rtype: int
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this GroupsV2GroupEditAction.


        :param homepage: The homepage of this GroupsV2GroupEditAction.
        :type homepage: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if homepage not in allowed_values:
            raise ValueError(
                "Invalid value for `homepage` ({0}), must be one of {1}"
                .format(homepage, allowed_values)
            )

        self._homepage = homepage

    @property
    def is_public(self):
        """Gets the is_public of this GroupsV2GroupEditAction.


        :return: The is_public of this GroupsV2GroupEditAction.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this GroupsV2GroupEditAction.


        :param is_public: The is_public of this GroupsV2GroupEditAction.
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def is_public_topic_admin_only(self):
        """Gets the is_public_topic_admin_only of this GroupsV2GroupEditAction.


        :return: The is_public_topic_admin_only of this GroupsV2GroupEditAction.
        :rtype: bool
        """
        return self._is_public_topic_admin_only

    @is_public_topic_admin_only.setter
    def is_public_topic_admin_only(self, is_public_topic_admin_only):
        """Sets the is_public_topic_admin_only of this GroupsV2GroupEditAction.


        :param is_public_topic_admin_only: The is_public_topic_admin_only of this GroupsV2GroupEditAction.
        :type is_public_topic_admin_only: bool
        """

        self._is_public_topic_admin_only = is_public_topic_admin_only

    @property
    def locale(self):
        """Gets the locale of this GroupsV2GroupEditAction.


        :return: The locale of this GroupsV2GroupEditAction.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this GroupsV2GroupEditAction.


        :param locale: The locale of this GroupsV2GroupEditAction.
        :type locale: str
        """

        self._locale = locale

    @property
    def membership_option(self):
        """Gets the membership_option of this GroupsV2GroupEditAction.


        :return: The membership_option of this GroupsV2GroupEditAction.
        :rtype: int
        """
        return self._membership_option

    @membership_option.setter
    def membership_option(self, membership_option):
        """Sets the membership_option of this GroupsV2GroupEditAction.


        :param membership_option: The membership_option of this GroupsV2GroupEditAction.
        :type membership_option: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if membership_option not in allowed_values:
            raise ValueError(
                "Invalid value for `membership_option` ({0}), must be one of {1}"
                .format(membership_option, allowed_values)
            )

        self._membership_option = membership_option

    @property
    def motto(self):
        """Gets the motto of this GroupsV2GroupEditAction.


        :return: The motto of this GroupsV2GroupEditAction.
        :rtype: str
        """
        return self._motto

    @motto.setter
    def motto(self, motto):
        """Sets the motto of this GroupsV2GroupEditAction.


        :param motto: The motto of this GroupsV2GroupEditAction.
        :type motto: str
        """

        self._motto = motto

    @property
    def name(self):
        """Gets the name of this GroupsV2GroupEditAction.


        :return: The name of this GroupsV2GroupEditAction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupsV2GroupEditAction.


        :param name: The name of this GroupsV2GroupEditAction.
        :type name: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this GroupsV2GroupEditAction.


        :return: The tags of this GroupsV2GroupEditAction.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GroupsV2GroupEditAction.


        :param tags: The tags of this GroupsV2GroupEditAction.
        :type tags: str
        """

        self._tags = tags

    @property
    def theme(self):
        """Gets the theme of this GroupsV2GroupEditAction.


        :return: The theme of this GroupsV2GroupEditAction.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this GroupsV2GroupEditAction.


        :param theme: The theme of this GroupsV2GroupEditAction.
        :type theme: str
        """

        self._theme = theme
