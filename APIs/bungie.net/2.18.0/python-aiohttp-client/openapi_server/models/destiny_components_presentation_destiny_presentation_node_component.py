# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_quests_destiny_objective_progress import DestinyQuestsDestinyObjectiveProgress
from openapi_server import util


class DestinyComponentsPresentationDestinyPresentationNodeComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completion_value: int=None, objective: DestinyQuestsDestinyObjectiveProgress=None, progress_value: int=None, record_category_score: int=None, state: int=None):
        """DestinyComponentsPresentationDestinyPresentationNodeComponent - a model defined in OpenAPI

        :param completion_value: The completion_value of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :param objective: The objective of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :param progress_value: The progress_value of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :param record_category_score: The record_category_score of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :param state: The state of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        """
        self.openapi_types = {
            'completion_value': int,
            'objective': DestinyQuestsDestinyObjectiveProgress,
            'progress_value': int,
            'record_category_score': int,
            'state': int
        }

        self.attribute_map = {
            'completion_value': 'completionValue',
            'objective': 'objective',
            'progress_value': 'progressValue',
            'record_category_score': 'recordCategoryScore',
            'state': 'state'
        }

        self._completion_value = completion_value
        self._objective = objective
        self._progress_value = progress_value
        self._record_category_score = record_category_score
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyComponentsPresentationDestinyPresentationNodeComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Components.Presentation.DestinyPresentationNodeComponent of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completion_value(self):
        """Gets the completion_value of this DestinyComponentsPresentationDestinyPresentationNodeComponent.

        The value at which the presentation node is considered to be completed.

        :return: The completion_value of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :rtype: int
        """
        return self._completion_value

    @completion_value.setter
    def completion_value(self, completion_value):
        """Sets the completion_value of this DestinyComponentsPresentationDestinyPresentationNodeComponent.

        The value at which the presentation node is considered to be completed.

        :param completion_value: The completion_value of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :type completion_value: int
        """

        self._completion_value = completion_value

    @property
    def objective(self):
        """Gets the objective of this DestinyComponentsPresentationDestinyPresentationNodeComponent.

        An optional property: presentation nodes MAY have objectives, which can be used to infer more human readable data about the progress. However, progressValue and completionValue ought to be considered the canonical values for progress on Progression Nodes.

        :return: The objective of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :rtype: DestinyQuestsDestinyObjectiveProgress
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this DestinyComponentsPresentationDestinyPresentationNodeComponent.

        An optional property: presentation nodes MAY have objectives, which can be used to infer more human readable data about the progress. However, progressValue and completionValue ought to be considered the canonical values for progress on Progression Nodes.

        :param objective: The objective of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :type objective: DestinyQuestsDestinyObjectiveProgress
        """

        self._objective = objective

    @property
    def progress_value(self):
        """Gets the progress_value of this DestinyComponentsPresentationDestinyPresentationNodeComponent.

        How much of the presentation node is considered to be completed so far by the given character/profile.

        :return: The progress_value of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :rtype: int
        """
        return self._progress_value

    @progress_value.setter
    def progress_value(self, progress_value):
        """Sets the progress_value of this DestinyComponentsPresentationDestinyPresentationNodeComponent.

        How much of the presentation node is considered to be completed so far by the given character/profile.

        :param progress_value: The progress_value of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :type progress_value: int
        """

        self._progress_value = progress_value

    @property
    def record_category_score(self):
        """Gets the record_category_score of this DestinyComponentsPresentationDestinyPresentationNodeComponent.

        If available, this is the current score for the record category that this node represents.

        :return: The record_category_score of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :rtype: int
        """
        return self._record_category_score

    @record_category_score.setter
    def record_category_score(self, record_category_score):
        """Sets the record_category_score of this DestinyComponentsPresentationDestinyPresentationNodeComponent.

        If available, this is the current score for the record category that this node represents.

        :param record_category_score: The record_category_score of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :type record_category_score: int
        """

        self._record_category_score = record_category_score

    @property
    def state(self):
        """Gets the state of this DestinyComponentsPresentationDestinyPresentationNodeComponent.


        :return: The state of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DestinyComponentsPresentationDestinyPresentationNodeComponent.


        :param state: The state of this DestinyComponentsPresentationDestinyPresentationNodeComponent.
        :type state: int
        """

        self._state = state
