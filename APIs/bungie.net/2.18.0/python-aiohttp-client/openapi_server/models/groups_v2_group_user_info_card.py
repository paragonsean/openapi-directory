# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupsV2GroupUserInfoCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_seen_display_name: str=None, last_seen_display_name_type: int=None, applicable_membership_types: List[int]=None, bungie_global_display_name: str=None, bungie_global_display_name_code: int=None, cross_save_override: int=None, display_name: str=None, icon_path: str=None, is_public: bool=None, membership_id: int=None, membership_type: int=None, supplemental_display_name: str=None):
        """GroupsV2GroupUserInfoCard - a model defined in OpenAPI

        :param last_seen_display_name: The last_seen_display_name of this GroupsV2GroupUserInfoCard.
        :param last_seen_display_name_type: The last_seen_display_name_type of this GroupsV2GroupUserInfoCard.
        :param applicable_membership_types: The applicable_membership_types of this GroupsV2GroupUserInfoCard.
        :param bungie_global_display_name: The bungie_global_display_name of this GroupsV2GroupUserInfoCard.
        :param bungie_global_display_name_code: The bungie_global_display_name_code of this GroupsV2GroupUserInfoCard.
        :param cross_save_override: The cross_save_override of this GroupsV2GroupUserInfoCard.
        :param display_name: The display_name of this GroupsV2GroupUserInfoCard.
        :param icon_path: The icon_path of this GroupsV2GroupUserInfoCard.
        :param is_public: The is_public of this GroupsV2GroupUserInfoCard.
        :param membership_id: The membership_id of this GroupsV2GroupUserInfoCard.
        :param membership_type: The membership_type of this GroupsV2GroupUserInfoCard.
        :param supplemental_display_name: The supplemental_display_name of this GroupsV2GroupUserInfoCard.
        """
        self.openapi_types = {
            'last_seen_display_name': str,
            'last_seen_display_name_type': int,
            'applicable_membership_types': List[int],
            'bungie_global_display_name': str,
            'bungie_global_display_name_code': int,
            'cross_save_override': int,
            'display_name': str,
            'icon_path': str,
            'is_public': bool,
            'membership_id': int,
            'membership_type': int,
            'supplemental_display_name': str
        }

        self.attribute_map = {
            'last_seen_display_name': 'LastSeenDisplayName',
            'last_seen_display_name_type': 'LastSeenDisplayNameType',
            'applicable_membership_types': 'applicableMembershipTypes',
            'bungie_global_display_name': 'bungieGlobalDisplayName',
            'bungie_global_display_name_code': 'bungieGlobalDisplayNameCode',
            'cross_save_override': 'crossSaveOverride',
            'display_name': 'displayName',
            'icon_path': 'iconPath',
            'is_public': 'isPublic',
            'membership_id': 'membershipId',
            'membership_type': 'membershipType',
            'supplemental_display_name': 'supplementalDisplayName'
        }

        self._last_seen_display_name = last_seen_display_name
        self._last_seen_display_name_type = last_seen_display_name_type
        self._applicable_membership_types = applicable_membership_types
        self._bungie_global_display_name = bungie_global_display_name
        self._bungie_global_display_name_code = bungie_global_display_name_code
        self._cross_save_override = cross_save_override
        self._display_name = display_name
        self._icon_path = icon_path
        self._is_public = is_public
        self._membership_id = membership_id
        self._membership_type = membership_type
        self._supplemental_display_name = supplemental_display_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupsV2GroupUserInfoCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupsV2.GroupUserInfoCard of this GroupsV2GroupUserInfoCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_seen_display_name(self):
        """Gets the last_seen_display_name of this GroupsV2GroupUserInfoCard.

        This will be the display name the clan server last saw the user as. If the account is an active cross save override, this will be the display name to use. Otherwise, this will match the displayName property.

        :return: The last_seen_display_name of this GroupsV2GroupUserInfoCard.
        :rtype: str
        """
        return self._last_seen_display_name

    @last_seen_display_name.setter
    def last_seen_display_name(self, last_seen_display_name):
        """Sets the last_seen_display_name of this GroupsV2GroupUserInfoCard.

        This will be the display name the clan server last saw the user as. If the account is an active cross save override, this will be the display name to use. Otherwise, this will match the displayName property.

        :param last_seen_display_name: The last_seen_display_name of this GroupsV2GroupUserInfoCard.
        :type last_seen_display_name: str
        """

        self._last_seen_display_name = last_seen_display_name

    @property
    def last_seen_display_name_type(self):
        """Gets the last_seen_display_name_type of this GroupsV2GroupUserInfoCard.

        The platform of the LastSeenDisplayName

        :return: The last_seen_display_name_type of this GroupsV2GroupUserInfoCard.
        :rtype: int
        """
        return self._last_seen_display_name_type

    @last_seen_display_name_type.setter
    def last_seen_display_name_type(self, last_seen_display_name_type):
        """Sets the last_seen_display_name_type of this GroupsV2GroupUserInfoCard.

        The platform of the LastSeenDisplayName

        :param last_seen_display_name_type: The last_seen_display_name_type of this GroupsV2GroupUserInfoCard.
        :type last_seen_display_name_type: int
        """

        self._last_seen_display_name_type = last_seen_display_name_type

    @property
    def applicable_membership_types(self):
        """Gets the applicable_membership_types of this GroupsV2GroupUserInfoCard.

        The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list

        :return: The applicable_membership_types of this GroupsV2GroupUserInfoCard.
        :rtype: List[int]
        """
        return self._applicable_membership_types

    @applicable_membership_types.setter
    def applicable_membership_types(self, applicable_membership_types):
        """Sets the applicable_membership_types of this GroupsV2GroupUserInfoCard.

        The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list

        :param applicable_membership_types: The applicable_membership_types of this GroupsV2GroupUserInfoCard.
        :type applicable_membership_types: List[int]
        """

        self._applicable_membership_types = applicable_membership_types

    @property
    def bungie_global_display_name(self):
        """Gets the bungie_global_display_name of this GroupsV2GroupUserInfoCard.

        The bungie global display name, if set.

        :return: The bungie_global_display_name of this GroupsV2GroupUserInfoCard.
        :rtype: str
        """
        return self._bungie_global_display_name

    @bungie_global_display_name.setter
    def bungie_global_display_name(self, bungie_global_display_name):
        """Sets the bungie_global_display_name of this GroupsV2GroupUserInfoCard.

        The bungie global display name, if set.

        :param bungie_global_display_name: The bungie_global_display_name of this GroupsV2GroupUserInfoCard.
        :type bungie_global_display_name: str
        """

        self._bungie_global_display_name = bungie_global_display_name

    @property
    def bungie_global_display_name_code(self):
        """Gets the bungie_global_display_name_code of this GroupsV2GroupUserInfoCard.

        The bungie global display name code, if set.

        :return: The bungie_global_display_name_code of this GroupsV2GroupUserInfoCard.
        :rtype: int
        """
        return self._bungie_global_display_name_code

    @bungie_global_display_name_code.setter
    def bungie_global_display_name_code(self, bungie_global_display_name_code):
        """Sets the bungie_global_display_name_code of this GroupsV2GroupUserInfoCard.

        The bungie global display name code, if set.

        :param bungie_global_display_name_code: The bungie_global_display_name_code of this GroupsV2GroupUserInfoCard.
        :type bungie_global_display_name_code: int
        """

        self._bungie_global_display_name_code = bungie_global_display_name_code

    @property
    def cross_save_override(self):
        """Gets the cross_save_override of this GroupsV2GroupUserInfoCard.

        If there is a cross save override in effect, this value will tell you the type that is overridding this one.

        :return: The cross_save_override of this GroupsV2GroupUserInfoCard.
        :rtype: int
        """
        return self._cross_save_override

    @cross_save_override.setter
    def cross_save_override(self, cross_save_override):
        """Sets the cross_save_override of this GroupsV2GroupUserInfoCard.

        If there is a cross save override in effect, this value will tell you the type that is overridding this one.

        :param cross_save_override: The cross_save_override of this GroupsV2GroupUserInfoCard.
        :type cross_save_override: int
        """

        self._cross_save_override = cross_save_override

    @property
    def display_name(self):
        """Gets the display_name of this GroupsV2GroupUserInfoCard.

        Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.

        :return: The display_name of this GroupsV2GroupUserInfoCard.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GroupsV2GroupUserInfoCard.

        Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.

        :param display_name: The display_name of this GroupsV2GroupUserInfoCard.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def icon_path(self):
        """Gets the icon_path of this GroupsV2GroupUserInfoCard.

        URL the Icon if available.

        :return: The icon_path of this GroupsV2GroupUserInfoCard.
        :rtype: str
        """
        return self._icon_path

    @icon_path.setter
    def icon_path(self, icon_path):
        """Sets the icon_path of this GroupsV2GroupUserInfoCard.

        URL the Icon if available.

        :param icon_path: The icon_path of this GroupsV2GroupUserInfoCard.
        :type icon_path: str
        """

        self._icon_path = icon_path

    @property
    def is_public(self):
        """Gets the is_public of this GroupsV2GroupUserInfoCard.

        If True, this is a public user membership.

        :return: The is_public of this GroupsV2GroupUserInfoCard.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this GroupsV2GroupUserInfoCard.

        If True, this is a public user membership.

        :param is_public: The is_public of this GroupsV2GroupUserInfoCard.
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def membership_id(self):
        """Gets the membership_id of this GroupsV2GroupUserInfoCard.

        Membership ID as they user is known in the Accounts service

        :return: The membership_id of this GroupsV2GroupUserInfoCard.
        :rtype: int
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this GroupsV2GroupUserInfoCard.

        Membership ID as they user is known in the Accounts service

        :param membership_id: The membership_id of this GroupsV2GroupUserInfoCard.
        :type membership_id: int
        """

        self._membership_id = membership_id

    @property
    def membership_type(self):
        """Gets the membership_type of this GroupsV2GroupUserInfoCard.

        Type of the membership. Not necessarily the native type.

        :return: The membership_type of this GroupsV2GroupUserInfoCard.
        :rtype: int
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this GroupsV2GroupUserInfoCard.

        Type of the membership. Not necessarily the native type.

        :param membership_type: The membership_type of this GroupsV2GroupUserInfoCard.
        :type membership_type: int
        """

        self._membership_type = membership_type

    @property
    def supplemental_display_name(self):
        """Gets the supplemental_display_name of this GroupsV2GroupUserInfoCard.

        A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.

        :return: The supplemental_display_name of this GroupsV2GroupUserInfoCard.
        :rtype: str
        """
        return self._supplemental_display_name

    @supplemental_display_name.setter
    def supplemental_display_name(self, supplemental_display_name):
        """Sets the supplemental_display_name of this GroupsV2GroupUserInfoCard.

        A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.

        :param supplemental_display_name: The supplemental_display_name of this GroupsV2GroupUserInfoCard.
        :type supplemental_display_name: str
        """

        self._supplemental_display_name = supplemental_display_name
