# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_general_user import UserGeneralUser
from openapi_server import util


class ForumForumRecruitmentDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fireteam: List[UserGeneralUser]=None, approved: bool=None, conversation_id: int=None, intensity: int=None, kicked_player_ids: List[int]=None, microphone_required: bool=None, player_slots_remaining: int=None, player_slots_total: int=None, tone: int=None, topic_id: int=None):
        """ForumForumRecruitmentDetail - a model defined in OpenAPI

        :param fireteam: The fireteam of this ForumForumRecruitmentDetail.
        :param approved: The approved of this ForumForumRecruitmentDetail.
        :param conversation_id: The conversation_id of this ForumForumRecruitmentDetail.
        :param intensity: The intensity of this ForumForumRecruitmentDetail.
        :param kicked_player_ids: The kicked_player_ids of this ForumForumRecruitmentDetail.
        :param microphone_required: The microphone_required of this ForumForumRecruitmentDetail.
        :param player_slots_remaining: The player_slots_remaining of this ForumForumRecruitmentDetail.
        :param player_slots_total: The player_slots_total of this ForumForumRecruitmentDetail.
        :param tone: The tone of this ForumForumRecruitmentDetail.
        :param topic_id: The topic_id of this ForumForumRecruitmentDetail.
        """
        self.openapi_types = {
            'fireteam': List[UserGeneralUser],
            'approved': bool,
            'conversation_id': int,
            'intensity': int,
            'kicked_player_ids': List[int],
            'microphone_required': bool,
            'player_slots_remaining': int,
            'player_slots_total': int,
            'tone': int,
            'topic_id': int
        }

        self.attribute_map = {
            'fireteam': 'Fireteam',
            'approved': 'approved',
            'conversation_id': 'conversationId',
            'intensity': 'intensity',
            'kicked_player_ids': 'kickedPlayerIds',
            'microphone_required': 'microphoneRequired',
            'player_slots_remaining': 'playerSlotsRemaining',
            'player_slots_total': 'playerSlotsTotal',
            'tone': 'tone',
            'topic_id': 'topicId'
        }

        self._fireteam = fireteam
        self._approved = approved
        self._conversation_id = conversation_id
        self._intensity = intensity
        self._kicked_player_ids = kicked_player_ids
        self._microphone_required = microphone_required
        self._player_slots_remaining = player_slots_remaining
        self._player_slots_total = player_slots_total
        self._tone = tone
        self._topic_id = topic_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForumForumRecruitmentDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Forum.ForumRecruitmentDetail of this ForumForumRecruitmentDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fireteam(self):
        """Gets the fireteam of this ForumForumRecruitmentDetail.


        :return: The fireteam of this ForumForumRecruitmentDetail.
        :rtype: List[UserGeneralUser]
        """
        return self._fireteam

    @fireteam.setter
    def fireteam(self, fireteam):
        """Sets the fireteam of this ForumForumRecruitmentDetail.


        :param fireteam: The fireteam of this ForumForumRecruitmentDetail.
        :type fireteam: List[UserGeneralUser]
        """

        self._fireteam = fireteam

    @property
    def approved(self):
        """Gets the approved of this ForumForumRecruitmentDetail.


        :return: The approved of this ForumForumRecruitmentDetail.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this ForumForumRecruitmentDetail.


        :param approved: The approved of this ForumForumRecruitmentDetail.
        :type approved: bool
        """

        self._approved = approved

    @property
    def conversation_id(self):
        """Gets the conversation_id of this ForumForumRecruitmentDetail.


        :return: The conversation_id of this ForumForumRecruitmentDetail.
        :rtype: int
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this ForumForumRecruitmentDetail.


        :param conversation_id: The conversation_id of this ForumForumRecruitmentDetail.
        :type conversation_id: int
        """

        self._conversation_id = conversation_id

    @property
    def intensity(self):
        """Gets the intensity of this ForumForumRecruitmentDetail.


        :return: The intensity of this ForumForumRecruitmentDetail.
        :rtype: int
        """
        return self._intensity

    @intensity.setter
    def intensity(self, intensity):
        """Sets the intensity of this ForumForumRecruitmentDetail.


        :param intensity: The intensity of this ForumForumRecruitmentDetail.
        :type intensity: int
        """

        self._intensity = intensity

    @property
    def kicked_player_ids(self):
        """Gets the kicked_player_ids of this ForumForumRecruitmentDetail.


        :return: The kicked_player_ids of this ForumForumRecruitmentDetail.
        :rtype: List[int]
        """
        return self._kicked_player_ids

    @kicked_player_ids.setter
    def kicked_player_ids(self, kicked_player_ids):
        """Sets the kicked_player_ids of this ForumForumRecruitmentDetail.


        :param kicked_player_ids: The kicked_player_ids of this ForumForumRecruitmentDetail.
        :type kicked_player_ids: List[int]
        """

        self._kicked_player_ids = kicked_player_ids

    @property
    def microphone_required(self):
        """Gets the microphone_required of this ForumForumRecruitmentDetail.


        :return: The microphone_required of this ForumForumRecruitmentDetail.
        :rtype: bool
        """
        return self._microphone_required

    @microphone_required.setter
    def microphone_required(self, microphone_required):
        """Sets the microphone_required of this ForumForumRecruitmentDetail.


        :param microphone_required: The microphone_required of this ForumForumRecruitmentDetail.
        :type microphone_required: bool
        """

        self._microphone_required = microphone_required

    @property
    def player_slots_remaining(self):
        """Gets the player_slots_remaining of this ForumForumRecruitmentDetail.


        :return: The player_slots_remaining of this ForumForumRecruitmentDetail.
        :rtype: int
        """
        return self._player_slots_remaining

    @player_slots_remaining.setter
    def player_slots_remaining(self, player_slots_remaining):
        """Sets the player_slots_remaining of this ForumForumRecruitmentDetail.


        :param player_slots_remaining: The player_slots_remaining of this ForumForumRecruitmentDetail.
        :type player_slots_remaining: int
        """

        self._player_slots_remaining = player_slots_remaining

    @property
    def player_slots_total(self):
        """Gets the player_slots_total of this ForumForumRecruitmentDetail.


        :return: The player_slots_total of this ForumForumRecruitmentDetail.
        :rtype: int
        """
        return self._player_slots_total

    @player_slots_total.setter
    def player_slots_total(self, player_slots_total):
        """Sets the player_slots_total of this ForumForumRecruitmentDetail.


        :param player_slots_total: The player_slots_total of this ForumForumRecruitmentDetail.
        :type player_slots_total: int
        """

        self._player_slots_total = player_slots_total

    @property
    def tone(self):
        """Gets the tone of this ForumForumRecruitmentDetail.


        :return: The tone of this ForumForumRecruitmentDetail.
        :rtype: int
        """
        return self._tone

    @tone.setter
    def tone(self, tone):
        """Sets the tone of this ForumForumRecruitmentDetail.


        :param tone: The tone of this ForumForumRecruitmentDetail.
        :type tone: int
        """

        self._tone = tone

    @property
    def topic_id(self):
        """Gets the topic_id of this ForumForumRecruitmentDetail.


        :return: The topic_id of this ForumForumRecruitmentDetail.
        :rtype: int
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id):
        """Sets the topic_id of this ForumForumRecruitmentDetail.


        :param topic_id: The topic_id of this ForumForumRecruitmentDetail.
        :type topic_id: int
        """

        self._topic_id = topic_id
