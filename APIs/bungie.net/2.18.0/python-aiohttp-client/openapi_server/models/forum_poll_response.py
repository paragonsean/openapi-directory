# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.forum_poll_result import ForumPollResult
from openapi_server import util


class ForumPollResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, results: List[ForumPollResult]=None, topic_id: int=None, total_votes: int=None):
        """ForumPollResponse - a model defined in OpenAPI

        :param results: The results of this ForumPollResponse.
        :param topic_id: The topic_id of this ForumPollResponse.
        :param total_votes: The total_votes of this ForumPollResponse.
        """
        self.openapi_types = {
            'results': List[ForumPollResult],
            'topic_id': int,
            'total_votes': int
        }

        self.attribute_map = {
            'results': 'results',
            'topic_id': 'topicId',
            'total_votes': 'totalVotes'
        }

        self._results = results
        self._topic_id = topic_id
        self._total_votes = total_votes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForumPollResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Forum.PollResponse of this ForumPollResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def results(self):
        """Gets the results of this ForumPollResponse.


        :return: The results of this ForumPollResponse.
        :rtype: List[ForumPollResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this ForumPollResponse.


        :param results: The results of this ForumPollResponse.
        :type results: List[ForumPollResult]
        """

        self._results = results

    @property
    def topic_id(self):
        """Gets the topic_id of this ForumPollResponse.


        :return: The topic_id of this ForumPollResponse.
        :rtype: int
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id):
        """Sets the topic_id of this ForumPollResponse.


        :param topic_id: The topic_id of this ForumPollResponse.
        :type topic_id: int
        """

        self._topic_id = topic_id

    @property
    def total_votes(self):
        """Gets the total_votes of this ForumPollResponse.


        :return: The total_votes of this ForumPollResponse.
        :rtype: int
        """
        return self._total_votes

    @total_votes.setter
    def total_votes(self, total_votes):
        """Sets the total_votes of this ForumPollResponse.


        :param total_votes: The total_votes of this ForumPollResponse.
        :type total_votes: int
        """

        self._total_votes = total_votes
