# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server import util


class DestinyDefinitionsDestinyClassDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, class_type: int=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, gendered_class_names: Dict[str, str]=None, gendered_class_names_by_gender_hash: Dict[str, str]=None, hash: int=None, index: int=None, mentor_vendor_hash: int=None, redacted: bool=None):
        """DestinyDefinitionsDestinyClassDefinition - a model defined in OpenAPI

        :param class_type: The class_type of this DestinyDefinitionsDestinyClassDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsDestinyClassDefinition.
        :param gendered_class_names: The gendered_class_names of this DestinyDefinitionsDestinyClassDefinition.
        :param gendered_class_names_by_gender_hash: The gendered_class_names_by_gender_hash of this DestinyDefinitionsDestinyClassDefinition.
        :param hash: The hash of this DestinyDefinitionsDestinyClassDefinition.
        :param index: The index of this DestinyDefinitionsDestinyClassDefinition.
        :param mentor_vendor_hash: The mentor_vendor_hash of this DestinyDefinitionsDestinyClassDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyClassDefinition.
        """
        self.openapi_types = {
            'class_type': int,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'gendered_class_names': Dict[str, str],
            'gendered_class_names_by_gender_hash': Dict[str, str],
            'hash': int,
            'index': int,
            'mentor_vendor_hash': int,
            'redacted': bool
        }

        self.attribute_map = {
            'class_type': 'classType',
            'display_properties': 'displayProperties',
            'gendered_class_names': 'genderedClassNames',
            'gendered_class_names_by_gender_hash': 'genderedClassNamesByGenderHash',
            'hash': 'hash',
            'index': 'index',
            'mentor_vendor_hash': 'mentorVendorHash',
            'redacted': 'redacted'
        }

        self._class_type = class_type
        self._display_properties = display_properties
        self._gendered_class_names = gendered_class_names
        self._gendered_class_names_by_gender_hash = gendered_class_names_by_gender_hash
        self._hash = hash
        self._index = index
        self._mentor_vendor_hash = mentor_vendor_hash
        self._redacted = redacted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyClassDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyClassDefinition of this DestinyDefinitionsDestinyClassDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_type(self):
        """Gets the class_type of this DestinyDefinitionsDestinyClassDefinition.

        In Destiny 1, we added a convenience Enumeration for referring to classes. We've kept it, though mostly for posterity. This is the enum value for this definition's class.

        :return: The class_type of this DestinyDefinitionsDestinyClassDefinition.
        :rtype: int
        """
        return self._class_type

    @class_type.setter
    def class_type(self, class_type):
        """Sets the class_type of this DestinyDefinitionsDestinyClassDefinition.

        In Destiny 1, we added a convenience Enumeration for referring to classes. We've kept it, though mostly for posterity. This is the enum value for this definition's class.

        :param class_type: The class_type of this DestinyDefinitionsDestinyClassDefinition.
        :type class_type: int
        """

        self._class_type = class_type

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyClassDefinition.


        :return: The display_properties of this DestinyDefinitionsDestinyClassDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyClassDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsDestinyClassDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def gendered_class_names(self):
        """Gets the gendered_class_names of this DestinyDefinitionsDestinyClassDefinition.

        A localized string referring to the singular form of the Class's name when referred to in gendered form. Keyed by the DestinyGender.

        :return: The gendered_class_names of this DestinyDefinitionsDestinyClassDefinition.
        :rtype: Dict[str, str]
        """
        return self._gendered_class_names

    @gendered_class_names.setter
    def gendered_class_names(self, gendered_class_names):
        """Sets the gendered_class_names of this DestinyDefinitionsDestinyClassDefinition.

        A localized string referring to the singular form of the Class's name when referred to in gendered form. Keyed by the DestinyGender.

        :param gendered_class_names: The gendered_class_names of this DestinyDefinitionsDestinyClassDefinition.
        :type gendered_class_names: Dict[str, str]
        """

        self._gendered_class_names = gendered_class_names

    @property
    def gendered_class_names_by_gender_hash(self):
        """Gets the gendered_class_names_by_gender_hash of this DestinyDefinitionsDestinyClassDefinition.


        :return: The gendered_class_names_by_gender_hash of this DestinyDefinitionsDestinyClassDefinition.
        :rtype: Dict[str, str]
        """
        return self._gendered_class_names_by_gender_hash

    @gendered_class_names_by_gender_hash.setter
    def gendered_class_names_by_gender_hash(self, gendered_class_names_by_gender_hash):
        """Sets the gendered_class_names_by_gender_hash of this DestinyDefinitionsDestinyClassDefinition.


        :param gendered_class_names_by_gender_hash: The gendered_class_names_by_gender_hash of this DestinyDefinitionsDestinyClassDefinition.
        :type gendered_class_names_by_gender_hash: Dict[str, str]
        """

        self._gendered_class_names_by_gender_hash = gendered_class_names_by_gender_hash

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyClassDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyClassDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyClassDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyClassDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyClassDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyClassDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyClassDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyClassDefinition.
        :type index: int
        """

        self._index = index

    @property
    def mentor_vendor_hash(self):
        """Gets the mentor_vendor_hash of this DestinyDefinitionsDestinyClassDefinition.

        Mentors don't really mean anything anymore. Don't expect this to be populated.

        :return: The mentor_vendor_hash of this DestinyDefinitionsDestinyClassDefinition.
        :rtype: int
        """
        return self._mentor_vendor_hash

    @mentor_vendor_hash.setter
    def mentor_vendor_hash(self, mentor_vendor_hash):
        """Sets the mentor_vendor_hash of this DestinyDefinitionsDestinyClassDefinition.

        Mentors don't really mean anything anymore. Don't expect this to be populated.

        :param mentor_vendor_hash: The mentor_vendor_hash of this DestinyDefinitionsDestinyClassDefinition.
        :type mentor_vendor_hash: int
        """

        self._mentor_vendor_hash = mentor_vendor_hash

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyClassDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyClassDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyClassDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyClassDefinition.
        :type redacted: bool
        """

        self._redacted = redacted
