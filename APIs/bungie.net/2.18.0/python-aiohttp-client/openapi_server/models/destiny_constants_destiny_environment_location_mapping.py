# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinyConstantsDestinyEnvironmentLocationMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_source: str=None, activity_hash: int=None, item_hash: int=None, location_hash: int=None, objective_hash: int=None):
        """DestinyConstantsDestinyEnvironmentLocationMapping - a model defined in OpenAPI

        :param activation_source: The activation_source of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :param activity_hash: The activity_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :param item_hash: The item_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :param location_hash: The location_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :param objective_hash: The objective_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.
        """
        self.openapi_types = {
            'activation_source': str,
            'activity_hash': int,
            'item_hash': int,
            'location_hash': int,
            'objective_hash': int
        }

        self.attribute_map = {
            'activation_source': 'activationSource',
            'activity_hash': 'activityHash',
            'item_hash': 'itemHash',
            'location_hash': 'locationHash',
            'objective_hash': 'objectiveHash'
        }

        self._activation_source = activation_source
        self._activity_hash = activity_hash
        self._item_hash = item_hash
        self._location_hash = location_hash
        self._objective_hash = objective_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyConstantsDestinyEnvironmentLocationMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Constants.DestinyEnvironmentLocationMapping of this DestinyConstantsDestinyEnvironmentLocationMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_source(self):
        """Gets the activation_source of this DestinyConstantsDestinyEnvironmentLocationMapping.

        A hint that the UI uses to figure out how this location is activated by the player.

        :return: The activation_source of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :rtype: str
        """
        return self._activation_source

    @activation_source.setter
    def activation_source(self, activation_source):
        """Sets the activation_source of this DestinyConstantsDestinyEnvironmentLocationMapping.

        A hint that the UI uses to figure out how this location is activated by the player.

        :param activation_source: The activation_source of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :type activation_source: str
        """

        self._activation_source = activation_source

    @property
    def activity_hash(self):
        """Gets the activity_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.

        If this is populated, this is the activity you have to be playing in order to see this location appear because of this mapping. (theoretically, a location can have multiple mappings, and some might require you to be in a specific activity when others don't)

        :return: The activity_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :rtype: int
        """
        return self._activity_hash

    @activity_hash.setter
    def activity_hash(self, activity_hash):
        """Sets the activity_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.

        If this is populated, this is the activity you have to be playing in order to see this location appear because of this mapping. (theoretically, a location can have multiple mappings, and some might require you to be in a specific activity when others don't)

        :param activity_hash: The activity_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :type activity_hash: int
        """

        self._activity_hash = activity_hash

    @property
    def item_hash(self):
        """Gets the item_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.

        If this is populated, it is the item that you must possess for this location to be active because of this mapping. (theoretically, a location can have multiple mappings, and some might require an item while others don't)

        :return: The item_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :rtype: int
        """
        return self._item_hash

    @item_hash.setter
    def item_hash(self, item_hash):
        """Sets the item_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.

        If this is populated, it is the item that you must possess for this location to be active because of this mapping. (theoretically, a location can have multiple mappings, and some might require an item while others don't)

        :param item_hash: The item_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :type item_hash: int
        """

        self._item_hash = item_hash

    @property
    def location_hash(self):
        """Gets the location_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.

        The location that is revealed on the director by this mapping.

        :return: The location_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :rtype: int
        """
        return self._location_hash

    @location_hash.setter
    def location_hash(self, location_hash):
        """Sets the location_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.

        The location that is revealed on the director by this mapping.

        :param location_hash: The location_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :type location_hash: int
        """

        self._location_hash = location_hash

    @property
    def objective_hash(self):
        """Gets the objective_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.

        If this is populated, this is an objective related to the location.

        :return: The objective_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :rtype: int
        """
        return self._objective_hash

    @objective_hash.setter
    def objective_hash(self, objective_hash):
        """Sets the objective_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.

        If this is populated, this is an objective related to the location.

        :param objective_hash: The objective_hash of this DestinyConstantsDestinyEnvironmentLocationMapping.
        :type objective_hash: int
        """

        self._objective_hash = objective_hash
