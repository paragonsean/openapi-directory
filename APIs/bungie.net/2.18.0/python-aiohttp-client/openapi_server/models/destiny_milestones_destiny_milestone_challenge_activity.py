# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_challenges_destiny_challenge_status import DestinyChallengesDestinyChallengeStatus
from openapi_server.models.destiny_milestones_destiny_milestone_activity_phase import DestinyMilestonesDestinyMilestoneActivityPhase
from openapi_server import util


class DestinyMilestonesDestinyMilestoneChallengeActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_hash: int=None, boolean_activity_options: Dict[str, bool]=None, challenges: List[DestinyChallengesDestinyChallengeStatus]=None, loadout_requirement_index: int=None, modifier_hashes: List[int]=None, phases: List[DestinyMilestonesDestinyMilestoneActivityPhase]=None):
        """DestinyMilestonesDestinyMilestoneChallengeActivity - a model defined in OpenAPI

        :param activity_hash: The activity_hash of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :param boolean_activity_options: The boolean_activity_options of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :param challenges: The challenges of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :param loadout_requirement_index: The loadout_requirement_index of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :param modifier_hashes: The modifier_hashes of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :param phases: The phases of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        """
        self.openapi_types = {
            'activity_hash': int,
            'boolean_activity_options': Dict[str, bool],
            'challenges': List[DestinyChallengesDestinyChallengeStatus],
            'loadout_requirement_index': int,
            'modifier_hashes': List[int],
            'phases': List[DestinyMilestonesDestinyMilestoneActivityPhase]
        }

        self.attribute_map = {
            'activity_hash': 'activityHash',
            'boolean_activity_options': 'booleanActivityOptions',
            'challenges': 'challenges',
            'loadout_requirement_index': 'loadoutRequirementIndex',
            'modifier_hashes': 'modifierHashes',
            'phases': 'phases'
        }

        self._activity_hash = activity_hash
        self._boolean_activity_options = boolean_activity_options
        self._challenges = challenges
        self._loadout_requirement_index = loadout_requirement_index
        self._modifier_hashes = modifier_hashes
        self._phases = phases

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyMilestonesDestinyMilestoneChallengeActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Milestones.DestinyMilestoneChallengeActivity of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_hash(self):
        """Gets the activity_hash of this DestinyMilestonesDestinyMilestoneChallengeActivity.


        :return: The activity_hash of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :rtype: int
        """
        return self._activity_hash

    @activity_hash.setter
    def activity_hash(self, activity_hash):
        """Sets the activity_hash of this DestinyMilestonesDestinyMilestoneChallengeActivity.


        :param activity_hash: The activity_hash of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :type activity_hash: int
        """

        self._activity_hash = activity_hash

    @property
    def boolean_activity_options(self):
        """Gets the boolean_activity_options of this DestinyMilestonesDestinyMilestoneChallengeActivity.

        The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).  As a concrete example of this data, the hashes you get for Raids will correspond to the currently active \"Challenge Mode\".  We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the \"option\" that is enabled/disabled) and the value (whether it's enabled or disabled presently)  On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation.

        :return: The boolean_activity_options of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :rtype: Dict[str, bool]
        """
        return self._boolean_activity_options

    @boolean_activity_options.setter
    def boolean_activity_options(self, boolean_activity_options):
        """Sets the boolean_activity_options of this DestinyMilestonesDestinyMilestoneChallengeActivity.

        The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).  As a concrete example of this data, the hashes you get for Raids will correspond to the currently active \"Challenge Mode\".  We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the \"option\" that is enabled/disabled) and the value (whether it's enabled or disabled presently)  On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation.

        :param boolean_activity_options: The boolean_activity_options of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :type boolean_activity_options: Dict[str, bool]
        """

        self._boolean_activity_options = boolean_activity_options

    @property
    def challenges(self):
        """Gets the challenges of this DestinyMilestonesDestinyMilestoneChallengeActivity.


        :return: The challenges of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :rtype: List[DestinyChallengesDestinyChallengeStatus]
        """
        return self._challenges

    @challenges.setter
    def challenges(self, challenges):
        """Sets the challenges of this DestinyMilestonesDestinyMilestoneChallengeActivity.


        :param challenges: The challenges of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :type challenges: List[DestinyChallengesDestinyChallengeStatus]
        """

        self._challenges = challenges

    @property
    def loadout_requirement_index(self):
        """Gets the loadout_requirement_index of this DestinyMilestonesDestinyMilestoneChallengeActivity.

        If returned, this is the index into the DestinyActivityDefinition's \"loadouts\" property, indicating the currently active loadout requirements.

        :return: The loadout_requirement_index of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :rtype: int
        """
        return self._loadout_requirement_index

    @loadout_requirement_index.setter
    def loadout_requirement_index(self, loadout_requirement_index):
        """Sets the loadout_requirement_index of this DestinyMilestonesDestinyMilestoneChallengeActivity.

        If returned, this is the index into the DestinyActivityDefinition's \"loadouts\" property, indicating the currently active loadout requirements.

        :param loadout_requirement_index: The loadout_requirement_index of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :type loadout_requirement_index: int
        """

        self._loadout_requirement_index = loadout_requirement_index

    @property
    def modifier_hashes(self):
        """Gets the modifier_hashes of this DestinyMilestonesDestinyMilestoneChallengeActivity.

        If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.

        :return: The modifier_hashes of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :rtype: List[int]
        """
        return self._modifier_hashes

    @modifier_hashes.setter
    def modifier_hashes(self, modifier_hashes):
        """Sets the modifier_hashes of this DestinyMilestonesDestinyMilestoneChallengeActivity.

        If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.

        :param modifier_hashes: The modifier_hashes of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :type modifier_hashes: List[int]
        """

        self._modifier_hashes = modifier_hashes

    @property
    def phases(self):
        """Gets the phases of this DestinyMilestonesDestinyMilestoneChallengeActivity.

        If the Activity has discrete \"phases\" that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.

        :return: The phases of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :rtype: List[DestinyMilestonesDestinyMilestoneActivityPhase]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this DestinyMilestonesDestinyMilestoneChallengeActivity.

        If the Activity has discrete \"phases\" that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.

        :param phases: The phases of this DestinyMilestonesDestinyMilestoneChallengeActivity.
        :type phases: List[DestinyMilestonesDestinyMilestoneActivityPhase]
        """

        self._phases = phases
