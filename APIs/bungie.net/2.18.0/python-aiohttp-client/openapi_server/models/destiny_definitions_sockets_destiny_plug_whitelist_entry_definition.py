# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_hash: int=None, category_identifier: str=None, reinitialization_possible_plug_hashes: List[int]=None):
        """DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition - a model defined in OpenAPI

        :param category_hash: The category_hash of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.
        :param category_identifier: The category_identifier of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.
        :param reinitialization_possible_plug_hashes: The reinitialization_possible_plug_hashes of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.
        """
        self.openapi_types = {
            'category_hash': int,
            'category_identifier': str,
            'reinitialization_possible_plug_hashes': List[int]
        }

        self.attribute_map = {
            'category_hash': 'categoryHash',
            'category_identifier': 'categoryIdentifier',
            'reinitialization_possible_plug_hashes': 'reinitializationPossiblePlugHashes'
        }

        self._category_hash = category_hash
        self._category_identifier = category_identifier
        self._reinitialization_possible_plug_hashes = reinitialization_possible_plug_hashes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.Sockets.DestinyPlugWhitelistEntryDefinition of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_hash(self):
        """Gets the category_hash of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.

        The hash identifier of the Plug Category to compare against the plug item's plug.plugCategoryHash.  Note that this does NOT relate to any Definition in itself, it is only used for comparison purposes.

        :return: The category_hash of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.
        :rtype: int
        """
        return self._category_hash

    @category_hash.setter
    def category_hash(self, category_hash):
        """Sets the category_hash of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.

        The hash identifier of the Plug Category to compare against the plug item's plug.plugCategoryHash.  Note that this does NOT relate to any Definition in itself, it is only used for comparison purposes.

        :param category_hash: The category_hash of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.
        :type category_hash: int
        """

        self._category_hash = category_hash

    @property
    def category_identifier(self):
        """Gets the category_identifier of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.

        The string identifier for the category, which is here mostly for debug purposes.

        :return: The category_identifier of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.
        :rtype: str
        """
        return self._category_identifier

    @category_identifier.setter
    def category_identifier(self, category_identifier):
        """Sets the category_identifier of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.

        The string identifier for the category, which is here mostly for debug purposes.

        :param category_identifier: The category_identifier of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.
        :type category_identifier: str
        """

        self._category_identifier = category_identifier

    @property
    def reinitialization_possible_plug_hashes(self):
        """Gets the reinitialization_possible_plug_hashes of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.

        The list of all plug items (DestinyInventoryItemDefinition) that the socket may randomly be populated with when reinitialized.  Which ones you should actually show are determined by the plug being inserted into the socket, and the socket’s type.  When you inspect the plug that could go into a Masterwork Socket, look up the socket type of the socket being inspected and find the DestinySocketTypeDefinition.  Then, look at the Plugs that can fit in that socket. Find the Whitelist in the DestinySocketTypeDefinition that matches the plug item’s categoryhash.  That whitelist entry will potentially have a new “reinitializationPossiblePlugHashes” property.If it does, that means we know what it will roll if you try to insert this plug into this socket.

        :return: The reinitialization_possible_plug_hashes of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.
        :rtype: List[int]
        """
        return self._reinitialization_possible_plug_hashes

    @reinitialization_possible_plug_hashes.setter
    def reinitialization_possible_plug_hashes(self, reinitialization_possible_plug_hashes):
        """Sets the reinitialization_possible_plug_hashes of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.

        The list of all plug items (DestinyInventoryItemDefinition) that the socket may randomly be populated with when reinitialized.  Which ones you should actually show are determined by the plug being inserted into the socket, and the socket’s type.  When you inspect the plug that could go into a Masterwork Socket, look up the socket type of the socket being inspected and find the DestinySocketTypeDefinition.  Then, look at the Plugs that can fit in that socket. Find the Whitelist in the DestinySocketTypeDefinition that matches the plug item’s categoryhash.  That whitelist entry will potentially have a new “reinitializationPossiblePlugHashes” property.If it does, that means we know what it will roll if you try to insert this plug into this socket.

        :param reinitialization_possible_plug_hashes: The reinitialization_possible_plug_hashes of this DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.
        :type reinitialization_possible_plug_hashes: List[int]
        """

        self._reinitialization_possible_plug_hashes = reinitialization_possible_plug_hashes
