# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ForumPollResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer_slot: int=None, answer_text: str=None, last_vote_date: datetime=None, requesting_user_voted: bool=None, votes: int=None):
        """ForumPollResult - a model defined in OpenAPI

        :param answer_slot: The answer_slot of this ForumPollResult.
        :param answer_text: The answer_text of this ForumPollResult.
        :param last_vote_date: The last_vote_date of this ForumPollResult.
        :param requesting_user_voted: The requesting_user_voted of this ForumPollResult.
        :param votes: The votes of this ForumPollResult.
        """
        self.openapi_types = {
            'answer_slot': int,
            'answer_text': str,
            'last_vote_date': datetime,
            'requesting_user_voted': bool,
            'votes': int
        }

        self.attribute_map = {
            'answer_slot': 'answerSlot',
            'answer_text': 'answerText',
            'last_vote_date': 'lastVoteDate',
            'requesting_user_voted': 'requestingUserVoted',
            'votes': 'votes'
        }

        self._answer_slot = answer_slot
        self._answer_text = answer_text
        self._last_vote_date = last_vote_date
        self._requesting_user_voted = requesting_user_voted
        self._votes = votes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForumPollResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Forum.PollResult of this ForumPollResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer_slot(self):
        """Gets the answer_slot of this ForumPollResult.


        :return: The answer_slot of this ForumPollResult.
        :rtype: int
        """
        return self._answer_slot

    @answer_slot.setter
    def answer_slot(self, answer_slot):
        """Sets the answer_slot of this ForumPollResult.


        :param answer_slot: The answer_slot of this ForumPollResult.
        :type answer_slot: int
        """

        self._answer_slot = answer_slot

    @property
    def answer_text(self):
        """Gets the answer_text of this ForumPollResult.


        :return: The answer_text of this ForumPollResult.
        :rtype: str
        """
        return self._answer_text

    @answer_text.setter
    def answer_text(self, answer_text):
        """Sets the answer_text of this ForumPollResult.


        :param answer_text: The answer_text of this ForumPollResult.
        :type answer_text: str
        """

        self._answer_text = answer_text

    @property
    def last_vote_date(self):
        """Gets the last_vote_date of this ForumPollResult.


        :return: The last_vote_date of this ForumPollResult.
        :rtype: datetime
        """
        return self._last_vote_date

    @last_vote_date.setter
    def last_vote_date(self, last_vote_date):
        """Sets the last_vote_date of this ForumPollResult.


        :param last_vote_date: The last_vote_date of this ForumPollResult.
        :type last_vote_date: datetime
        """

        self._last_vote_date = last_vote_date

    @property
    def requesting_user_voted(self):
        """Gets the requesting_user_voted of this ForumPollResult.


        :return: The requesting_user_voted of this ForumPollResult.
        :rtype: bool
        """
        return self._requesting_user_voted

    @requesting_user_voted.setter
    def requesting_user_voted(self, requesting_user_voted):
        """Sets the requesting_user_voted of this ForumPollResult.


        :param requesting_user_voted: The requesting_user_voted of this ForumPollResult.
        :type requesting_user_voted: bool
        """

        self._requesting_user_voted = requesting_user_voted

    @property
    def votes(self):
        """Gets the votes of this ForumPollResult.


        :return: The votes of this ForumPollResult.
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this ForumPollResult.


        :param votes: The votes of this ForumPollResult.
        :type votes: int
        """

        self._votes = votes
