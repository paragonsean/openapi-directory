# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server.models.destiny_definitions_destiny_node_activation_requirement import DestinyDefinitionsDestinyNodeActivationRequirement
from openapi_server.models.destiny_definitions_destiny_node_socket_replace_response import DestinyDefinitionsDestinyNodeSocketReplaceResponse
from openapi_server.models.destiny_definitions_destiny_talent_node_step_groups import DestinyDefinitionsDestinyTalentNodeStepGroups
from openapi_server import util


class DestinyDefinitionsDestinyNodeStepDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_requirement: DestinyDefinitionsDestinyNodeActivationRequirement=None, affects_level: bool=None, affects_quality: bool=None, can_activate_next_step: bool=None, damage_type: int=None, damage_type_hash: int=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, interaction_description: str=None, is_next_step_random: bool=None, next_step_index: int=None, node_step_hash: int=None, perk_hashes: List[int]=None, socket_replacements: List[DestinyDefinitionsDestinyNodeSocketReplaceResponse]=None, start_progression_bar_at_progress: int=None, stat_hashes: List[int]=None, step_groups: DestinyDefinitionsDestinyTalentNodeStepGroups=None, step_index: int=None):
        """DestinyDefinitionsDestinyNodeStepDefinition - a model defined in OpenAPI

        :param activation_requirement: The activation_requirement of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param affects_level: The affects_level of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param affects_quality: The affects_quality of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param can_activate_next_step: The can_activate_next_step of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param damage_type: The damage_type of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param damage_type_hash: The damage_type_hash of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param interaction_description: The interaction_description of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param is_next_step_random: The is_next_step_random of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param next_step_index: The next_step_index of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param node_step_hash: The node_step_hash of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param perk_hashes: The perk_hashes of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param socket_replacements: The socket_replacements of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param start_progression_bar_at_progress: The start_progression_bar_at_progress of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param stat_hashes: The stat_hashes of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param step_groups: The step_groups of this DestinyDefinitionsDestinyNodeStepDefinition.
        :param step_index: The step_index of this DestinyDefinitionsDestinyNodeStepDefinition.
        """
        self.openapi_types = {
            'activation_requirement': DestinyDefinitionsDestinyNodeActivationRequirement,
            'affects_level': bool,
            'affects_quality': bool,
            'can_activate_next_step': bool,
            'damage_type': int,
            'damage_type_hash': int,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'interaction_description': str,
            'is_next_step_random': bool,
            'next_step_index': int,
            'node_step_hash': int,
            'perk_hashes': List[int],
            'socket_replacements': List[DestinyDefinitionsDestinyNodeSocketReplaceResponse],
            'start_progression_bar_at_progress': int,
            'stat_hashes': List[int],
            'step_groups': DestinyDefinitionsDestinyTalentNodeStepGroups,
            'step_index': int
        }

        self.attribute_map = {
            'activation_requirement': 'activationRequirement',
            'affects_level': 'affectsLevel',
            'affects_quality': 'affectsQuality',
            'can_activate_next_step': 'canActivateNextStep',
            'damage_type': 'damageType',
            'damage_type_hash': 'damageTypeHash',
            'display_properties': 'displayProperties',
            'interaction_description': 'interactionDescription',
            'is_next_step_random': 'isNextStepRandom',
            'next_step_index': 'nextStepIndex',
            'node_step_hash': 'nodeStepHash',
            'perk_hashes': 'perkHashes',
            'socket_replacements': 'socketReplacements',
            'start_progression_bar_at_progress': 'startProgressionBarAtProgress',
            'stat_hashes': 'statHashes',
            'step_groups': 'stepGroups',
            'step_index': 'stepIndex'
        }

        self._activation_requirement = activation_requirement
        self._affects_level = affects_level
        self._affects_quality = affects_quality
        self._can_activate_next_step = can_activate_next_step
        self._damage_type = damage_type
        self._damage_type_hash = damage_type_hash
        self._display_properties = display_properties
        self._interaction_description = interaction_description
        self._is_next_step_random = is_next_step_random
        self._next_step_index = next_step_index
        self._node_step_hash = node_step_hash
        self._perk_hashes = perk_hashes
        self._socket_replacements = socket_replacements
        self._start_progression_bar_at_progress = start_progression_bar_at_progress
        self._stat_hashes = stat_hashes
        self._step_groups = step_groups
        self._step_index = step_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyNodeStepDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyNodeStepDefinition of this DestinyDefinitionsDestinyNodeStepDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_requirement(self):
        """Gets the activation_requirement of this DestinyDefinitionsDestinyNodeStepDefinition.

        If the step has requirements for activation (they almost always do, if nothing else than for the Talent Grid's Progression to have reached a certain level), they will be defined here.

        :return: The activation_requirement of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: DestinyDefinitionsDestinyNodeActivationRequirement
        """
        return self._activation_requirement

    @activation_requirement.setter
    def activation_requirement(self, activation_requirement):
        """Sets the activation_requirement of this DestinyDefinitionsDestinyNodeStepDefinition.

        If the step has requirements for activation (they almost always do, if nothing else than for the Talent Grid's Progression to have reached a certain level), they will be defined here.

        :param activation_requirement: The activation_requirement of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type activation_requirement: DestinyDefinitionsDestinyNodeActivationRequirement
        """

        self._activation_requirement = activation_requirement

    @property
    def affects_level(self):
        """Gets the affects_level of this DestinyDefinitionsDestinyNodeStepDefinition.

        If true, this step can affect the level of the item. See DestinyInventoryItemDefintion for more information about item levels and their effect on stats.

        :return: The affects_level of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: bool
        """
        return self._affects_level

    @affects_level.setter
    def affects_level(self, affects_level):
        """Sets the affects_level of this DestinyDefinitionsDestinyNodeStepDefinition.

        If true, this step can affect the level of the item. See DestinyInventoryItemDefintion for more information about item levels and their effect on stats.

        :param affects_level: The affects_level of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type affects_level: bool
        """

        self._affects_level = affects_level

    @property
    def affects_quality(self):
        """Gets the affects_quality of this DestinyDefinitionsDestinyNodeStepDefinition.

        If this is true, the step affects the item's Quality in some way. See DestinyInventoryItemDefinition for more information about the meaning of Quality. I already made a joke about Zen and the Art of Motorcycle Maintenance elsewhere in the documentation, so I will avoid doing it again. Oops too late

        :return: The affects_quality of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: bool
        """
        return self._affects_quality

    @affects_quality.setter
    def affects_quality(self, affects_quality):
        """Sets the affects_quality of this DestinyDefinitionsDestinyNodeStepDefinition.

        If this is true, the step affects the item's Quality in some way. See DestinyInventoryItemDefinition for more information about the meaning of Quality. I already made a joke about Zen and the Art of Motorcycle Maintenance elsewhere in the documentation, so I will avoid doing it again. Oops too late

        :param affects_quality: The affects_quality of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type affects_quality: bool
        """

        self._affects_quality = affects_quality

    @property
    def can_activate_next_step(self):
        """Gets the can_activate_next_step of this DestinyDefinitionsDestinyNodeStepDefinition.

        There was a time when talent nodes could be activated multiple times, and the effects of subsequent Steps would be compounded on each other, essentially \"upgrading\" the node. We have moved away from this, but theoretically the capability still exists.  I continue to return this in case it is used in the future: if true and this step is the current step in the node, you are allowed to activate the node a second time to receive the benefits of the next step in the node, which will then become the active step.

        :return: The can_activate_next_step of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: bool
        """
        return self._can_activate_next_step

    @can_activate_next_step.setter
    def can_activate_next_step(self, can_activate_next_step):
        """Sets the can_activate_next_step of this DestinyDefinitionsDestinyNodeStepDefinition.

        There was a time when talent nodes could be activated multiple times, and the effects of subsequent Steps would be compounded on each other, essentially \"upgrading\" the node. We have moved away from this, but theoretically the capability still exists.  I continue to return this in case it is used in the future: if true and this step is the current step in the node, you are allowed to activate the node a second time to receive the benefits of the next step in the node, which will then become the active step.

        :param can_activate_next_step: The can_activate_next_step of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type can_activate_next_step: bool
        """

        self._can_activate_next_step = can_activate_next_step

    @property
    def damage_type(self):
        """Gets the damage_type of this DestinyDefinitionsDestinyNodeStepDefinition.

        An enum representing a damage type granted by activating this step, if any.

        :return: The damage_type of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: int
        """
        return self._damage_type

    @damage_type.setter
    def damage_type(self, damage_type):
        """Sets the damage_type of this DestinyDefinitionsDestinyNodeStepDefinition.

        An enum representing a damage type granted by activating this step, if any.

        :param damage_type: The damage_type of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type damage_type: int
        """

        self._damage_type = damage_type

    @property
    def damage_type_hash(self):
        """Gets the damage_type_hash of this DestinyDefinitionsDestinyNodeStepDefinition.

        If the step provides a damage type, this will be the hash identifier used to look up the damage type's DestinyDamageTypeDefinition.

        :return: The damage_type_hash of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: int
        """
        return self._damage_type_hash

    @damage_type_hash.setter
    def damage_type_hash(self, damage_type_hash):
        """Sets the damage_type_hash of this DestinyDefinitionsDestinyNodeStepDefinition.

        If the step provides a damage type, this will be the hash identifier used to look up the damage type's DestinyDamageTypeDefinition.

        :param damage_type_hash: The damage_type_hash of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type damage_type_hash: int
        """

        self._damage_type_hash = damage_type_hash

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyNodeStepDefinition.

        These are the display properties actually used to render the Talent Node. The currently active step's displayProperties are shown.

        :return: The display_properties of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyNodeStepDefinition.

        These are the display properties actually used to render the Talent Node. The currently active step's displayProperties are shown.

        :param display_properties: The display_properties of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def interaction_description(self):
        """Gets the interaction_description of this DestinyDefinitionsDestinyNodeStepDefinition.

        If you can interact with this node in some way, this is the localized description of that interaction.

        :return: The interaction_description of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: str
        """
        return self._interaction_description

    @interaction_description.setter
    def interaction_description(self, interaction_description):
        """Sets the interaction_description of this DestinyDefinitionsDestinyNodeStepDefinition.

        If you can interact with this node in some way, this is the localized description of that interaction.

        :param interaction_description: The interaction_description of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type interaction_description: str
        """

        self._interaction_description = interaction_description

    @property
    def is_next_step_random(self):
        """Gets the is_next_step_random of this DestinyDefinitionsDestinyNodeStepDefinition.

        If true, the next step to be chosen is random, and if you're allowed to activate the next step. (if canActivateNextStep = true)

        :return: The is_next_step_random of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: bool
        """
        return self._is_next_step_random

    @is_next_step_random.setter
    def is_next_step_random(self, is_next_step_random):
        """Sets the is_next_step_random of this DestinyDefinitionsDestinyNodeStepDefinition.

        If true, the next step to be chosen is random, and if you're allowed to activate the next step. (if canActivateNextStep = true)

        :param is_next_step_random: The is_next_step_random of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type is_next_step_random: bool
        """

        self._is_next_step_random = is_next_step_random

    @property
    def next_step_index(self):
        """Gets the next_step_index of this DestinyDefinitionsDestinyNodeStepDefinition.

        The stepIndex of the next step in the talent node, or -1 if this is the last step or if the next step to be chosen is random.  This doesn't really matter anymore unless canActivateNextStep begins to be used again.

        :return: The next_step_index of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: int
        """
        return self._next_step_index

    @next_step_index.setter
    def next_step_index(self, next_step_index):
        """Sets the next_step_index of this DestinyDefinitionsDestinyNodeStepDefinition.

        The stepIndex of the next step in the talent node, or -1 if this is the last step or if the next step to be chosen is random.  This doesn't really matter anymore unless canActivateNextStep begins to be used again.

        :param next_step_index: The next_step_index of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type next_step_index: int
        """

        self._next_step_index = next_step_index

    @property
    def node_step_hash(self):
        """Gets the node_step_hash of this DestinyDefinitionsDestinyNodeStepDefinition.

        The hash of this node step. Unfortunately, while it can be used to uniquely identify the step within a node, it is also content version dependent and should not be relied on without ensuring you have the latest vesion of content.

        :return: The node_step_hash of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: int
        """
        return self._node_step_hash

    @node_step_hash.setter
    def node_step_hash(self, node_step_hash):
        """Sets the node_step_hash of this DestinyDefinitionsDestinyNodeStepDefinition.

        The hash of this node step. Unfortunately, while it can be used to uniquely identify the step within a node, it is also content version dependent and should not be relied on without ensuring you have the latest vesion of content.

        :param node_step_hash: The node_step_hash of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type node_step_hash: int
        """

        self._node_step_hash = node_step_hash

    @property
    def perk_hashes(self):
        """Gets the perk_hashes of this DestinyDefinitionsDestinyNodeStepDefinition.

        The list of hash identifiers for Perks (DestinySandboxPerkDefinition) that are applied when this step is active. Perks provide a variety of benefits and modifications - examine DestinySandboxPerkDefinition to learn more.

        :return: The perk_hashes of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: List[int]
        """
        return self._perk_hashes

    @perk_hashes.setter
    def perk_hashes(self, perk_hashes):
        """Sets the perk_hashes of this DestinyDefinitionsDestinyNodeStepDefinition.

        The list of hash identifiers for Perks (DestinySandboxPerkDefinition) that are applied when this step is active. Perks provide a variety of benefits and modifications - examine DestinySandboxPerkDefinition to learn more.

        :param perk_hashes: The perk_hashes of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type perk_hashes: List[int]
        """

        self._perk_hashes = perk_hashes

    @property
    def socket_replacements(self):
        """Gets the socket_replacements of this DestinyDefinitionsDestinyNodeStepDefinition.

        If this step is activated, this will be a list of information used to replace socket items with new Plugs. See DestinyInventoryItemDefinition for more information about sockets and plugs.

        :return: The socket_replacements of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: List[DestinyDefinitionsDestinyNodeSocketReplaceResponse]
        """
        return self._socket_replacements

    @socket_replacements.setter
    def socket_replacements(self, socket_replacements):
        """Sets the socket_replacements of this DestinyDefinitionsDestinyNodeStepDefinition.

        If this step is activated, this will be a list of information used to replace socket items with new Plugs. See DestinyInventoryItemDefinition for more information about sockets and plugs.

        :param socket_replacements: The socket_replacements of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type socket_replacements: List[DestinyDefinitionsDestinyNodeSocketReplaceResponse]
        """

        self._socket_replacements = socket_replacements

    @property
    def start_progression_bar_at_progress(self):
        """Gets the start_progression_bar_at_progress of this DestinyDefinitionsDestinyNodeStepDefinition.

        When the Talent Grid's progression reaches this value, the circular \"progress bar\" that surrounds the talent node should be shown.  This also indicates the lower bound of said progress bar, with the upper bound being the progress required to reach activationRequirement.gridLevel. (at some point I should precalculate the upper bound and put it in the definition to save people time)

        :return: The start_progression_bar_at_progress of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: int
        """
        return self._start_progression_bar_at_progress

    @start_progression_bar_at_progress.setter
    def start_progression_bar_at_progress(self, start_progression_bar_at_progress):
        """Sets the start_progression_bar_at_progress of this DestinyDefinitionsDestinyNodeStepDefinition.

        When the Talent Grid's progression reaches this value, the circular \"progress bar\" that surrounds the talent node should be shown.  This also indicates the lower bound of said progress bar, with the upper bound being the progress required to reach activationRequirement.gridLevel. (at some point I should precalculate the upper bound and put it in the definition to save people time)

        :param start_progression_bar_at_progress: The start_progression_bar_at_progress of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type start_progression_bar_at_progress: int
        """

        self._start_progression_bar_at_progress = start_progression_bar_at_progress

    @property
    def stat_hashes(self):
        """Gets the stat_hashes of this DestinyDefinitionsDestinyNodeStepDefinition.

        When the step provides stat benefits on the item or character, this is the list of hash identifiers for stats (DestinyStatDefinition) that are provided.

        :return: The stat_hashes of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: List[int]
        """
        return self._stat_hashes

    @stat_hashes.setter
    def stat_hashes(self, stat_hashes):
        """Sets the stat_hashes of this DestinyDefinitionsDestinyNodeStepDefinition.

        When the step provides stat benefits on the item or character, this is the list of hash identifiers for stats (DestinyStatDefinition) that are provided.

        :param stat_hashes: The stat_hashes of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type stat_hashes: List[int]
        """

        self._stat_hashes = stat_hashes

    @property
    def step_groups(self):
        """Gets the step_groups of this DestinyDefinitionsDestinyNodeStepDefinition.

        In Destiny 1, the Armory's Perk Filtering was driven by a concept of TalentNodeStepGroups: categorizations of talent nodes based on their functionality. While the Armory isn't a BNet-facing thing for now, and the new Armory will need to account for Sockets rather than Talent Nodes, this categorization capability feels useful enough to still keep around.

        :return: The step_groups of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: DestinyDefinitionsDestinyTalentNodeStepGroups
        """
        return self._step_groups

    @step_groups.setter
    def step_groups(self, step_groups):
        """Sets the step_groups of this DestinyDefinitionsDestinyNodeStepDefinition.

        In Destiny 1, the Armory's Perk Filtering was driven by a concept of TalentNodeStepGroups: categorizations of talent nodes based on their functionality. While the Armory isn't a BNet-facing thing for now, and the new Armory will need to account for Sockets rather than Talent Nodes, this categorization capability feels useful enough to still keep around.

        :param step_groups: The step_groups of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type step_groups: DestinyDefinitionsDestinyTalentNodeStepGroups
        """

        self._step_groups = step_groups

    @property
    def step_index(self):
        """Gets the step_index of this DestinyDefinitionsDestinyNodeStepDefinition.

        The index of this step in the list of Steps on the Talent Node.  Unfortunately, this is the closest thing we have to an identifier for the Step: steps are not provided a content version agnostic identifier. This means that, when you are dealing with talent nodes, you will need to first ensure that you have the latest version of content.

        :return: The step_index of this DestinyDefinitionsDestinyNodeStepDefinition.
        :rtype: int
        """
        return self._step_index

    @step_index.setter
    def step_index(self, step_index):
        """Sets the step_index of this DestinyDefinitionsDestinyNodeStepDefinition.

        The index of this step in the list of Steps on the Talent Node.  Unfortunately, this is the closest thing we have to an identifier for the Step: steps are not provided a content version agnostic identifier. This means that, when you are dealing with talent nodes, you will need to first ensure that you have the latest version of content.

        :param step_index: The step_index of this DestinyDefinitionsDestinyNodeStepDefinition.
        :type step_index: int
        """

        self._step_index = step_index
