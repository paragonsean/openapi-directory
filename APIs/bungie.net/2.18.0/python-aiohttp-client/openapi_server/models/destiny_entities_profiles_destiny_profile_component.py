# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_user_info_card import UserUserInfoCard
from openapi_server import util


class DestinyEntitiesProfilesDestinyProfileComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_event_card_hash: int=None, character_ids: List[int]=None, current_guardian_rank: int=None, current_season_hash: int=None, current_season_reward_power_cap: int=None, date_last_played: datetime=None, event_card_hashes_owned: List[int]=None, lifetime_highest_guardian_rank: int=None, season_hashes: List[int]=None, user_info: UserUserInfoCard=None, versions_owned: int=None):
        """DestinyEntitiesProfilesDestinyProfileComponent - a model defined in OpenAPI

        :param active_event_card_hash: The active_event_card_hash of this DestinyEntitiesProfilesDestinyProfileComponent.
        :param character_ids: The character_ids of this DestinyEntitiesProfilesDestinyProfileComponent.
        :param current_guardian_rank: The current_guardian_rank of this DestinyEntitiesProfilesDestinyProfileComponent.
        :param current_season_hash: The current_season_hash of this DestinyEntitiesProfilesDestinyProfileComponent.
        :param current_season_reward_power_cap: The current_season_reward_power_cap of this DestinyEntitiesProfilesDestinyProfileComponent.
        :param date_last_played: The date_last_played of this DestinyEntitiesProfilesDestinyProfileComponent.
        :param event_card_hashes_owned: The event_card_hashes_owned of this DestinyEntitiesProfilesDestinyProfileComponent.
        :param lifetime_highest_guardian_rank: The lifetime_highest_guardian_rank of this DestinyEntitiesProfilesDestinyProfileComponent.
        :param season_hashes: The season_hashes of this DestinyEntitiesProfilesDestinyProfileComponent.
        :param user_info: The user_info of this DestinyEntitiesProfilesDestinyProfileComponent.
        :param versions_owned: The versions_owned of this DestinyEntitiesProfilesDestinyProfileComponent.
        """
        self.openapi_types = {
            'active_event_card_hash': int,
            'character_ids': List[int],
            'current_guardian_rank': int,
            'current_season_hash': int,
            'current_season_reward_power_cap': int,
            'date_last_played': datetime,
            'event_card_hashes_owned': List[int],
            'lifetime_highest_guardian_rank': int,
            'season_hashes': List[int],
            'user_info': UserUserInfoCard,
            'versions_owned': int
        }

        self.attribute_map = {
            'active_event_card_hash': 'activeEventCardHash',
            'character_ids': 'characterIds',
            'current_guardian_rank': 'currentGuardianRank',
            'current_season_hash': 'currentSeasonHash',
            'current_season_reward_power_cap': 'currentSeasonRewardPowerCap',
            'date_last_played': 'dateLastPlayed',
            'event_card_hashes_owned': 'eventCardHashesOwned',
            'lifetime_highest_guardian_rank': 'lifetimeHighestGuardianRank',
            'season_hashes': 'seasonHashes',
            'user_info': 'userInfo',
            'versions_owned': 'versionsOwned'
        }

        self._active_event_card_hash = active_event_card_hash
        self._character_ids = character_ids
        self._current_guardian_rank = current_guardian_rank
        self._current_season_hash = current_season_hash
        self._current_season_reward_power_cap = current_season_reward_power_cap
        self._date_last_played = date_last_played
        self._event_card_hashes_owned = event_card_hashes_owned
        self._lifetime_highest_guardian_rank = lifetime_highest_guardian_rank
        self._season_hashes = season_hashes
        self._user_info = user_info
        self._versions_owned = versions_owned

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyEntitiesProfilesDestinyProfileComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Entities.Profiles.DestinyProfileComponent of this DestinyEntitiesProfilesDestinyProfileComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_event_card_hash(self):
        """Gets the active_event_card_hash of this DestinyEntitiesProfilesDestinyProfileComponent.

        If populated, this is a reference to the event card that is currently active.

        :return: The active_event_card_hash of this DestinyEntitiesProfilesDestinyProfileComponent.
        :rtype: int
        """
        return self._active_event_card_hash

    @active_event_card_hash.setter
    def active_event_card_hash(self, active_event_card_hash):
        """Sets the active_event_card_hash of this DestinyEntitiesProfilesDestinyProfileComponent.

        If populated, this is a reference to the event card that is currently active.

        :param active_event_card_hash: The active_event_card_hash of this DestinyEntitiesProfilesDestinyProfileComponent.
        :type active_event_card_hash: int
        """

        self._active_event_card_hash = active_event_card_hash

    @property
    def character_ids(self):
        """Gets the character_ids of this DestinyEntitiesProfilesDestinyProfileComponent.

        A list of the character IDs, for further querying on your part.

        :return: The character_ids of this DestinyEntitiesProfilesDestinyProfileComponent.
        :rtype: List[int]
        """
        return self._character_ids

    @character_ids.setter
    def character_ids(self, character_ids):
        """Sets the character_ids of this DestinyEntitiesProfilesDestinyProfileComponent.

        A list of the character IDs, for further querying on your part.

        :param character_ids: The character_ids of this DestinyEntitiesProfilesDestinyProfileComponent.
        :type character_ids: List[int]
        """

        self._character_ids = character_ids

    @property
    def current_guardian_rank(self):
        """Gets the current_guardian_rank of this DestinyEntitiesProfilesDestinyProfileComponent.

        The 'current' Guardian Rank value, which starts at rank 1.

        :return: The current_guardian_rank of this DestinyEntitiesProfilesDestinyProfileComponent.
        :rtype: int
        """
        return self._current_guardian_rank

    @current_guardian_rank.setter
    def current_guardian_rank(self, current_guardian_rank):
        """Sets the current_guardian_rank of this DestinyEntitiesProfilesDestinyProfileComponent.

        The 'current' Guardian Rank value, which starts at rank 1.

        :param current_guardian_rank: The current_guardian_rank of this DestinyEntitiesProfilesDestinyProfileComponent.
        :type current_guardian_rank: int
        """

        self._current_guardian_rank = current_guardian_rank

    @property
    def current_season_hash(self):
        """Gets the current_season_hash of this DestinyEntitiesProfilesDestinyProfileComponent.

        If populated, this is a reference to the season that is currently active.

        :return: The current_season_hash of this DestinyEntitiesProfilesDestinyProfileComponent.
        :rtype: int
        """
        return self._current_season_hash

    @current_season_hash.setter
    def current_season_hash(self, current_season_hash):
        """Sets the current_season_hash of this DestinyEntitiesProfilesDestinyProfileComponent.

        If populated, this is a reference to the season that is currently active.

        :param current_season_hash: The current_season_hash of this DestinyEntitiesProfilesDestinyProfileComponent.
        :type current_season_hash: int
        """

        self._current_season_hash = current_season_hash

    @property
    def current_season_reward_power_cap(self):
        """Gets the current_season_reward_power_cap of this DestinyEntitiesProfilesDestinyProfileComponent.

        If populated, this is the reward power cap for the current season.

        :return: The current_season_reward_power_cap of this DestinyEntitiesProfilesDestinyProfileComponent.
        :rtype: int
        """
        return self._current_season_reward_power_cap

    @current_season_reward_power_cap.setter
    def current_season_reward_power_cap(self, current_season_reward_power_cap):
        """Sets the current_season_reward_power_cap of this DestinyEntitiesProfilesDestinyProfileComponent.

        If populated, this is the reward power cap for the current season.

        :param current_season_reward_power_cap: The current_season_reward_power_cap of this DestinyEntitiesProfilesDestinyProfileComponent.
        :type current_season_reward_power_cap: int
        """

        self._current_season_reward_power_cap = current_season_reward_power_cap

    @property
    def date_last_played(self):
        """Gets the date_last_played of this DestinyEntitiesProfilesDestinyProfileComponent.

        The last time the user played with any character on this Profile.

        :return: The date_last_played of this DestinyEntitiesProfilesDestinyProfileComponent.
        :rtype: datetime
        """
        return self._date_last_played

    @date_last_played.setter
    def date_last_played(self, date_last_played):
        """Sets the date_last_played of this DestinyEntitiesProfilesDestinyProfileComponent.

        The last time the user played with any character on this Profile.

        :param date_last_played: The date_last_played of this DestinyEntitiesProfilesDestinyProfileComponent.
        :type date_last_played: datetime
        """

        self._date_last_played = date_last_played

    @property
    def event_card_hashes_owned(self):
        """Gets the event_card_hashes_owned of this DestinyEntitiesProfilesDestinyProfileComponent.

        A list of hashes for event cards that a profile owns. Unlike most values in versionsOwned, these stay with the profile across all platforms.

        :return: The event_card_hashes_owned of this DestinyEntitiesProfilesDestinyProfileComponent.
        :rtype: List[int]
        """
        return self._event_card_hashes_owned

    @event_card_hashes_owned.setter
    def event_card_hashes_owned(self, event_card_hashes_owned):
        """Sets the event_card_hashes_owned of this DestinyEntitiesProfilesDestinyProfileComponent.

        A list of hashes for event cards that a profile owns. Unlike most values in versionsOwned, these stay with the profile across all platforms.

        :param event_card_hashes_owned: The event_card_hashes_owned of this DestinyEntitiesProfilesDestinyProfileComponent.
        :type event_card_hashes_owned: List[int]
        """

        self._event_card_hashes_owned = event_card_hashes_owned

    @property
    def lifetime_highest_guardian_rank(self):
        """Gets the lifetime_highest_guardian_rank of this DestinyEntitiesProfilesDestinyProfileComponent.

        The 'lifetime highest' Guardian Rank value, which starts at rank 1.

        :return: The lifetime_highest_guardian_rank of this DestinyEntitiesProfilesDestinyProfileComponent.
        :rtype: int
        """
        return self._lifetime_highest_guardian_rank

    @lifetime_highest_guardian_rank.setter
    def lifetime_highest_guardian_rank(self, lifetime_highest_guardian_rank):
        """Sets the lifetime_highest_guardian_rank of this DestinyEntitiesProfilesDestinyProfileComponent.

        The 'lifetime highest' Guardian Rank value, which starts at rank 1.

        :param lifetime_highest_guardian_rank: The lifetime_highest_guardian_rank of this DestinyEntitiesProfilesDestinyProfileComponent.
        :type lifetime_highest_guardian_rank: int
        """

        self._lifetime_highest_guardian_rank = lifetime_highest_guardian_rank

    @property
    def season_hashes(self):
        """Gets the season_hashes of this DestinyEntitiesProfilesDestinyProfileComponent.

        A list of seasons that this profile owns. Unlike versionsOwned, these stay with the profile across Platforms, and thus will be valid.   It turns out that Stadia Pro subscriptions will give access to seasons but only while playing on Stadia and with an active subscription. So some users (users who have Stadia Pro but choose to play on some other platform) won't see these as available: it will be whatever seasons are available for the platform on which they last played.

        :return: The season_hashes of this DestinyEntitiesProfilesDestinyProfileComponent.
        :rtype: List[int]
        """
        return self._season_hashes

    @season_hashes.setter
    def season_hashes(self, season_hashes):
        """Sets the season_hashes of this DestinyEntitiesProfilesDestinyProfileComponent.

        A list of seasons that this profile owns. Unlike versionsOwned, these stay with the profile across Platforms, and thus will be valid.   It turns out that Stadia Pro subscriptions will give access to seasons but only while playing on Stadia and with an active subscription. So some users (users who have Stadia Pro but choose to play on some other platform) won't see these as available: it will be whatever seasons are available for the platform on which they last played.

        :param season_hashes: The season_hashes of this DestinyEntitiesProfilesDestinyProfileComponent.
        :type season_hashes: List[int]
        """

        self._season_hashes = season_hashes

    @property
    def user_info(self):
        """Gets the user_info of this DestinyEntitiesProfilesDestinyProfileComponent.

        If you need to render the Profile (their platform name, icon, etc...) somewhere, this property contains that information.

        :return: The user_info of this DestinyEntitiesProfilesDestinyProfileComponent.
        :rtype: UserUserInfoCard
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this DestinyEntitiesProfilesDestinyProfileComponent.

        If you need to render the Profile (their platform name, icon, etc...) somewhere, this property contains that information.

        :param user_info: The user_info of this DestinyEntitiesProfilesDestinyProfileComponent.
        :type user_info: UserUserInfoCard
        """

        self._user_info = user_info

    @property
    def versions_owned(self):
        """Gets the versions_owned of this DestinyEntitiesProfilesDestinyProfileComponent.

        If you want to know what expansions they own, this will contain that data.   IMPORTANT: This field may not return the data you're interested in for Cross-Saved users. It returns the last ownership data we saw for this account - which is to say, what they've purchased on the platform on which they last played, which now could be a different platform.   If you don't care about per-platform ownership and only care about whatever platform it seems they are playing on most recently, then this should be \"good enough.\" Otherwise, this should be considered deprecated. We do not have a good alternative to provide at this time with platform specific ownership data for DLC.

        :return: The versions_owned of this DestinyEntitiesProfilesDestinyProfileComponent.
        :rtype: int
        """
        return self._versions_owned

    @versions_owned.setter
    def versions_owned(self, versions_owned):
        """Sets the versions_owned of this DestinyEntitiesProfilesDestinyProfileComponent.

        If you want to know what expansions they own, this will contain that data.   IMPORTANT: This field may not return the data you're interested in for Cross-Saved users. It returns the last ownership data we saw for this account - which is to say, what they've purchased on the platform on which they last played, which now could be a different platform.   If you don't care about per-platform ownership and only care about whatever platform it seems they are playing on most recently, then this should be \"good enough.\" Otherwise, this should be considered deprecated. We do not have a good alternative to provide at this time with platform specific ownership data for DLC.

        :param versions_owned: The versions_owned of this DestinyEntitiesProfilesDestinyProfileComponent.
        :type versions_owned: int
        """

        self._versions_owned = versions_owned
