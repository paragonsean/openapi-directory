# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_comment_summary import ContentCommentSummary
from openapi_server.models.content_content_representation import ContentContentRepresentation
from openapi_server.models.user_general_user import UserGeneralUser
from openapi_server import util


class ContentContentItemPublicContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_comments: bool=None, author: UserGeneralUser=None, auto_english_property_fallback: bool=None, c_type: str=None, cms_path: str=None, comment_summary: ContentCommentSummary=None, content_id: int=None, creation_date: datetime=None, has_age_gate: bool=None, minimum_age: int=None, modify_date: datetime=None, properties: Dict[str, object]=None, rating_image_path: str=None, representations: List[ContentContentRepresentation]=None, tags: List[str]=None):
        """ContentContentItemPublicContract - a model defined in OpenAPI

        :param allow_comments: The allow_comments of this ContentContentItemPublicContract.
        :param author: The author of this ContentContentItemPublicContract.
        :param auto_english_property_fallback: The auto_english_property_fallback of this ContentContentItemPublicContract.
        :param c_type: The c_type of this ContentContentItemPublicContract.
        :param cms_path: The cms_path of this ContentContentItemPublicContract.
        :param comment_summary: The comment_summary of this ContentContentItemPublicContract.
        :param content_id: The content_id of this ContentContentItemPublicContract.
        :param creation_date: The creation_date of this ContentContentItemPublicContract.
        :param has_age_gate: The has_age_gate of this ContentContentItemPublicContract.
        :param minimum_age: The minimum_age of this ContentContentItemPublicContract.
        :param modify_date: The modify_date of this ContentContentItemPublicContract.
        :param properties: The properties of this ContentContentItemPublicContract.
        :param rating_image_path: The rating_image_path of this ContentContentItemPublicContract.
        :param representations: The representations of this ContentContentItemPublicContract.
        :param tags: The tags of this ContentContentItemPublicContract.
        """
        self.openapi_types = {
            'allow_comments': bool,
            'author': UserGeneralUser,
            'auto_english_property_fallback': bool,
            'c_type': str,
            'cms_path': str,
            'comment_summary': ContentCommentSummary,
            'content_id': int,
            'creation_date': datetime,
            'has_age_gate': bool,
            'minimum_age': int,
            'modify_date': datetime,
            'properties': Dict[str, object],
            'rating_image_path': str,
            'representations': List[ContentContentRepresentation],
            'tags': List[str]
        }

        self.attribute_map = {
            'allow_comments': 'allowComments',
            'author': 'author',
            'auto_english_property_fallback': 'autoEnglishPropertyFallback',
            'c_type': 'cType',
            'cms_path': 'cmsPath',
            'comment_summary': 'commentSummary',
            'content_id': 'contentId',
            'creation_date': 'creationDate',
            'has_age_gate': 'hasAgeGate',
            'minimum_age': 'minimumAge',
            'modify_date': 'modifyDate',
            'properties': 'properties',
            'rating_image_path': 'ratingImagePath',
            'representations': 'representations',
            'tags': 'tags'
        }

        self._allow_comments = allow_comments
        self._author = author
        self._auto_english_property_fallback = auto_english_property_fallback
        self._c_type = c_type
        self._cms_path = cms_path
        self._comment_summary = comment_summary
        self._content_id = content_id
        self._creation_date = creation_date
        self._has_age_gate = has_age_gate
        self._minimum_age = minimum_age
        self._modify_date = modify_date
        self._properties = properties
        self._rating_image_path = rating_image_path
        self._representations = representations
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentContentItemPublicContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Content.ContentItemPublicContract of this ContentContentItemPublicContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_comments(self):
        """Gets the allow_comments of this ContentContentItemPublicContract.


        :return: The allow_comments of this ContentContentItemPublicContract.
        :rtype: bool
        """
        return self._allow_comments

    @allow_comments.setter
    def allow_comments(self, allow_comments):
        """Sets the allow_comments of this ContentContentItemPublicContract.


        :param allow_comments: The allow_comments of this ContentContentItemPublicContract.
        :type allow_comments: bool
        """

        self._allow_comments = allow_comments

    @property
    def author(self):
        """Gets the author of this ContentContentItemPublicContract.


        :return: The author of this ContentContentItemPublicContract.
        :rtype: UserGeneralUser
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ContentContentItemPublicContract.


        :param author: The author of this ContentContentItemPublicContract.
        :type author: UserGeneralUser
        """

        self._author = author

    @property
    def auto_english_property_fallback(self):
        """Gets the auto_english_property_fallback of this ContentContentItemPublicContract.


        :return: The auto_english_property_fallback of this ContentContentItemPublicContract.
        :rtype: bool
        """
        return self._auto_english_property_fallback

    @auto_english_property_fallback.setter
    def auto_english_property_fallback(self, auto_english_property_fallback):
        """Sets the auto_english_property_fallback of this ContentContentItemPublicContract.


        :param auto_english_property_fallback: The auto_english_property_fallback of this ContentContentItemPublicContract.
        :type auto_english_property_fallback: bool
        """

        self._auto_english_property_fallback = auto_english_property_fallback

    @property
    def c_type(self):
        """Gets the c_type of this ContentContentItemPublicContract.


        :return: The c_type of this ContentContentItemPublicContract.
        :rtype: str
        """
        return self._c_type

    @c_type.setter
    def c_type(self, c_type):
        """Sets the c_type of this ContentContentItemPublicContract.


        :param c_type: The c_type of this ContentContentItemPublicContract.
        :type c_type: str
        """

        self._c_type = c_type

    @property
    def cms_path(self):
        """Gets the cms_path of this ContentContentItemPublicContract.


        :return: The cms_path of this ContentContentItemPublicContract.
        :rtype: str
        """
        return self._cms_path

    @cms_path.setter
    def cms_path(self, cms_path):
        """Sets the cms_path of this ContentContentItemPublicContract.


        :param cms_path: The cms_path of this ContentContentItemPublicContract.
        :type cms_path: str
        """

        self._cms_path = cms_path

    @property
    def comment_summary(self):
        """Gets the comment_summary of this ContentContentItemPublicContract.


        :return: The comment_summary of this ContentContentItemPublicContract.
        :rtype: ContentCommentSummary
        """
        return self._comment_summary

    @comment_summary.setter
    def comment_summary(self, comment_summary):
        """Sets the comment_summary of this ContentContentItemPublicContract.


        :param comment_summary: The comment_summary of this ContentContentItemPublicContract.
        :type comment_summary: ContentCommentSummary
        """

        self._comment_summary = comment_summary

    @property
    def content_id(self):
        """Gets the content_id of this ContentContentItemPublicContract.


        :return: The content_id of this ContentContentItemPublicContract.
        :rtype: int
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this ContentContentItemPublicContract.


        :param content_id: The content_id of this ContentContentItemPublicContract.
        :type content_id: int
        """

        self._content_id = content_id

    @property
    def creation_date(self):
        """Gets the creation_date of this ContentContentItemPublicContract.


        :return: The creation_date of this ContentContentItemPublicContract.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ContentContentItemPublicContract.


        :param creation_date: The creation_date of this ContentContentItemPublicContract.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def has_age_gate(self):
        """Gets the has_age_gate of this ContentContentItemPublicContract.


        :return: The has_age_gate of this ContentContentItemPublicContract.
        :rtype: bool
        """
        return self._has_age_gate

    @has_age_gate.setter
    def has_age_gate(self, has_age_gate):
        """Sets the has_age_gate of this ContentContentItemPublicContract.


        :param has_age_gate: The has_age_gate of this ContentContentItemPublicContract.
        :type has_age_gate: bool
        """

        self._has_age_gate = has_age_gate

    @property
    def minimum_age(self):
        """Gets the minimum_age of this ContentContentItemPublicContract.


        :return: The minimum_age of this ContentContentItemPublicContract.
        :rtype: int
        """
        return self._minimum_age

    @minimum_age.setter
    def minimum_age(self, minimum_age):
        """Sets the minimum_age of this ContentContentItemPublicContract.


        :param minimum_age: The minimum_age of this ContentContentItemPublicContract.
        :type minimum_age: int
        """

        self._minimum_age = minimum_age

    @property
    def modify_date(self):
        """Gets the modify_date of this ContentContentItemPublicContract.


        :return: The modify_date of this ContentContentItemPublicContract.
        :rtype: datetime
        """
        return self._modify_date

    @modify_date.setter
    def modify_date(self, modify_date):
        """Sets the modify_date of this ContentContentItemPublicContract.


        :param modify_date: The modify_date of this ContentContentItemPublicContract.
        :type modify_date: datetime
        """

        self._modify_date = modify_date

    @property
    def properties(self):
        """Gets the properties of this ContentContentItemPublicContract.

        Firehose content is really a collection of metadata and \"properties\", which are the potentially-but-not-strictly localizable data that comprises the meat of whatever content is being shown.  As Cole Porter would have crooned, \"Anything Goes\" with Firehose properties. They are most often strings, but they can theoretically be anything. They are JSON encoded, and could be JSON structures, simple strings, numbers etc... The Content Type of the item (cType) will describe the properties, and thus how they ought to be deserialized.

        :return: The properties of this ContentContentItemPublicContract.
        :rtype: Dict[str, object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ContentContentItemPublicContract.

        Firehose content is really a collection of metadata and \"properties\", which are the potentially-but-not-strictly localizable data that comprises the meat of whatever content is being shown.  As Cole Porter would have crooned, \"Anything Goes\" with Firehose properties. They are most often strings, but they can theoretically be anything. They are JSON encoded, and could be JSON structures, simple strings, numbers etc... The Content Type of the item (cType) will describe the properties, and thus how they ought to be deserialized.

        :param properties: The properties of this ContentContentItemPublicContract.
        :type properties: Dict[str, object]
        """

        self._properties = properties

    @property
    def rating_image_path(self):
        """Gets the rating_image_path of this ContentContentItemPublicContract.


        :return: The rating_image_path of this ContentContentItemPublicContract.
        :rtype: str
        """
        return self._rating_image_path

    @rating_image_path.setter
    def rating_image_path(self, rating_image_path):
        """Sets the rating_image_path of this ContentContentItemPublicContract.


        :param rating_image_path: The rating_image_path of this ContentContentItemPublicContract.
        :type rating_image_path: str
        """

        self._rating_image_path = rating_image_path

    @property
    def representations(self):
        """Gets the representations of this ContentContentItemPublicContract.


        :return: The representations of this ContentContentItemPublicContract.
        :rtype: List[ContentContentRepresentation]
        """
        return self._representations

    @representations.setter
    def representations(self, representations):
        """Sets the representations of this ContentContentItemPublicContract.


        :param representations: The representations of this ContentContentItemPublicContract.
        :type representations: List[ContentContentRepresentation]
        """

        self._representations = representations

    @property
    def tags(self):
        """Gets the tags of this ContentContentItemPublicContract.

        NOTE: Tags will always be lower case.

        :return: The tags of this ContentContentItemPublicContract.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ContentContentItemPublicContract.

        NOTE: Tags will always be lower case.

        :param tags: The tags of this ContentContentItemPublicContract.
        :type tags: List[str]
        """

        self._tags = tags
