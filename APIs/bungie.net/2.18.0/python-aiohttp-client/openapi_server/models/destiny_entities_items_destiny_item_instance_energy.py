# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinyEntitiesItemsDestinyItemInstanceEnergy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, energy_capacity: int=None, energy_type: int=None, energy_type_hash: int=None, energy_unused: int=None, energy_used: int=None):
        """DestinyEntitiesItemsDestinyItemInstanceEnergy - a model defined in OpenAPI

        :param energy_capacity: The energy_capacity of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :param energy_type: The energy_type of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :param energy_type_hash: The energy_type_hash of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :param energy_unused: The energy_unused of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :param energy_used: The energy_used of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        """
        self.openapi_types = {
            'energy_capacity': int,
            'energy_type': int,
            'energy_type_hash': int,
            'energy_unused': int,
            'energy_used': int
        }

        self.attribute_map = {
            'energy_capacity': 'energyCapacity',
            'energy_type': 'energyType',
            'energy_type_hash': 'energyTypeHash',
            'energy_unused': 'energyUnused',
            'energy_used': 'energyUsed'
        }

        self._energy_capacity = energy_capacity
        self._energy_type = energy_type
        self._energy_type_hash = energy_type_hash
        self._energy_unused = energy_unused
        self._energy_used = energy_used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyEntitiesItemsDestinyItemInstanceEnergy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Entities.Items.DestinyItemInstanceEnergy of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def energy_capacity(self):
        """Gets the energy_capacity of this DestinyEntitiesItemsDestinyItemInstanceEnergy.

        The total capacity of Energy that the item currently has, regardless of if it is currently being used.

        :return: The energy_capacity of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :rtype: int
        """
        return self._energy_capacity

    @energy_capacity.setter
    def energy_capacity(self, energy_capacity):
        """Sets the energy_capacity of this DestinyEntitiesItemsDestinyItemInstanceEnergy.

        The total capacity of Energy that the item currently has, regardless of if it is currently being used.

        :param energy_capacity: The energy_capacity of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :type energy_capacity: int
        """

        self._energy_capacity = energy_capacity

    @property
    def energy_type(self):
        """Gets the energy_type of this DestinyEntitiesItemsDestinyItemInstanceEnergy.

        This is the enum version of the Energy Type value, for convenience.

        :return: The energy_type of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :rtype: int
        """
        return self._energy_type

    @energy_type.setter
    def energy_type(self, energy_type):
        """Sets the energy_type of this DestinyEntitiesItemsDestinyItemInstanceEnergy.

        This is the enum version of the Energy Type value, for convenience.

        :param energy_type: The energy_type of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :type energy_type: int
        """

        self._energy_type = energy_type

    @property
    def energy_type_hash(self):
        """Gets the energy_type_hash of this DestinyEntitiesItemsDestinyItemInstanceEnergy.

        The type of energy for this item. Plugs that require Energy can only be inserted if they have the \"Any\" Energy Type or the matching energy type of this item. This is a reference to the DestinyEnergyTypeDefinition for the energy type, where you can find extended info about it.

        :return: The energy_type_hash of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :rtype: int
        """
        return self._energy_type_hash

    @energy_type_hash.setter
    def energy_type_hash(self, energy_type_hash):
        """Sets the energy_type_hash of this DestinyEntitiesItemsDestinyItemInstanceEnergy.

        The type of energy for this item. Plugs that require Energy can only be inserted if they have the \"Any\" Energy Type or the matching energy type of this item. This is a reference to the DestinyEnergyTypeDefinition for the energy type, where you can find extended info about it.

        :param energy_type_hash: The energy_type_hash of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :type energy_type_hash: int
        """

        self._energy_type_hash = energy_type_hash

    @property
    def energy_unused(self):
        """Gets the energy_unused of this DestinyEntitiesItemsDestinyItemInstanceEnergy.

        The amount of energy still available for inserting new plugs.

        :return: The energy_unused of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :rtype: int
        """
        return self._energy_unused

    @energy_unused.setter
    def energy_unused(self, energy_unused):
        """Sets the energy_unused of this DestinyEntitiesItemsDestinyItemInstanceEnergy.

        The amount of energy still available for inserting new plugs.

        :param energy_unused: The energy_unused of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :type energy_unused: int
        """

        self._energy_unused = energy_unused

    @property
    def energy_used(self):
        """Gets the energy_used of this DestinyEntitiesItemsDestinyItemInstanceEnergy.

        The amount of Energy currently in use by inserted plugs.

        :return: The energy_used of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :rtype: int
        """
        return self._energy_used

    @energy_used.setter
    def energy_used(self, energy_used):
        """Sets the energy_used of this DestinyEntitiesItemsDestinyItemInstanceEnergy.

        The amount of Energy currently in use by inserted plugs.

        :param energy_used: The energy_used of this DestinyEntitiesItemsDestinyItemInstanceEnergy.
        :type energy_used: int
        """

        self._energy_used = energy_used
