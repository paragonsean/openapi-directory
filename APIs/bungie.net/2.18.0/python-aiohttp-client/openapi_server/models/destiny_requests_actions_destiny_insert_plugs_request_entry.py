# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinyRequestsActionsDestinyInsertPlugsRequestEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, plug_item_hash: int=None, socket_array_type: int=None, socket_index: int=None):
        """DestinyRequestsActionsDestinyInsertPlugsRequestEntry - a model defined in OpenAPI

        :param plug_item_hash: The plug_item_hash of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.
        :param socket_array_type: The socket_array_type of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.
        :param socket_index: The socket_index of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.
        """
        self.openapi_types = {
            'plug_item_hash': int,
            'socket_array_type': int,
            'socket_index': int
        }

        self.attribute_map = {
            'plug_item_hash': 'plugItemHash',
            'socket_array_type': 'socketArrayType',
            'socket_index': 'socketIndex'
        }

        self._plug_item_hash = plug_item_hash
        self._socket_array_type = socket_array_type
        self._socket_index = socket_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyRequestsActionsDestinyInsertPlugsRequestEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Requests.Actions.DestinyInsertPlugsRequestEntry of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plug_item_hash(self):
        """Gets the plug_item_hash of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.

        Plugs are never instanced (except in infusion). So with the hash alone, we should be able to: 1) Infer whether the player actually needs to have the item, or if it's a reusable plug 2) Perform any operation needed to use the Plug, including removing the plug item and running reward sheets.

        :return: The plug_item_hash of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.
        :rtype: int
        """
        return self._plug_item_hash

    @plug_item_hash.setter
    def plug_item_hash(self, plug_item_hash):
        """Sets the plug_item_hash of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.

        Plugs are never instanced (except in infusion). So with the hash alone, we should be able to: 1) Infer whether the player actually needs to have the item, or if it's a reusable plug 2) Perform any operation needed to use the Plug, including removing the plug item and running reward sheets.

        :param plug_item_hash: The plug_item_hash of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.
        :type plug_item_hash: int
        """

        self._plug_item_hash = plug_item_hash

    @property
    def socket_array_type(self):
        """Gets the socket_array_type of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.

        This property, combined with the socketIndex, tells us which socket we are referring to (since operations can be performed on both Intrinsic and \"default\" sockets, and they occupy different arrays in the Inventory Item Definition). I know, I know. Don't give me that look.

        :return: The socket_array_type of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.
        :rtype: int
        """
        return self._socket_array_type

    @socket_array_type.setter
    def socket_array_type(self, socket_array_type):
        """Sets the socket_array_type of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.

        This property, combined with the socketIndex, tells us which socket we are referring to (since operations can be performed on both Intrinsic and \"default\" sockets, and they occupy different arrays in the Inventory Item Definition). I know, I know. Don't give me that look.

        :param socket_array_type: The socket_array_type of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.
        :type socket_array_type: int
        """

        self._socket_array_type = socket_array_type

    @property
    def socket_index(self):
        """Gets the socket_index of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.

        The index into the socket array, which identifies the specific socket being operated on. We also need to know the socketArrayType in order to uniquely identify the socket.  Don't point to or try to insert a plug into an infusion socket. It won't work.

        :return: The socket_index of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.
        :rtype: int
        """
        return self._socket_index

    @socket_index.setter
    def socket_index(self, socket_index):
        """Sets the socket_index of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.

        The index into the socket array, which identifies the specific socket being operated on. We also need to know the socketArrayType in order to uniquely identify the socket.  Don't point to or try to insert a plug into an infusion socket. It won't work.

        :param socket_index: The socket_index of this DestinyRequestsActionsDestinyInsertPlugsRequestEntry.
        :type socket_index: int
        """

        self._socket_index = socket_index
