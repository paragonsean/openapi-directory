# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_constants_destiny_environment_location_mapping import DestinyConstantsDestinyEnvironmentLocationMapping
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server.models.destiny_definitions_destiny_activity_challenge_definition import DestinyDefinitionsDestinyActivityChallengeDefinition
from openapi_server.models.destiny_definitions_destiny_activity_graph_list_entry_definition import DestinyDefinitionsDestinyActivityGraphListEntryDefinition
from openapi_server.models.destiny_definitions_destiny_activity_guided_block_definition import DestinyDefinitionsDestinyActivityGuidedBlockDefinition
from openapi_server.models.destiny_definitions_destiny_activity_insertion_point_definition import DestinyDefinitionsDestinyActivityInsertionPointDefinition
from openapi_server.models.destiny_definitions_destiny_activity_loadout_requirement_set import DestinyDefinitionsDestinyActivityLoadoutRequirementSet
from openapi_server.models.destiny_definitions_destiny_activity_matchmaking_block_definition import DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition
from openapi_server.models.destiny_definitions_destiny_activity_modifier_reference_definition import DestinyDefinitionsDestinyActivityModifierReferenceDefinition
from openapi_server.models.destiny_definitions_destiny_activity_playlist_item_definition import DestinyDefinitionsDestinyActivityPlaylistItemDefinition
from openapi_server.models.destiny_definitions_destiny_activity_reward_definition import DestinyDefinitionsDestinyActivityRewardDefinition
from openapi_server.models.destiny_definitions_destiny_activity_unlock_string_definition import DestinyDefinitionsDestinyActivityUnlockStringDefinition
from openapi_server import util


class DestinyDefinitionsDestinyActivityDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_graph_list: List[DestinyDefinitionsDestinyActivityGraphListEntryDefinition]=None, activity_light_level: int=None, activity_location_mappings: List[DestinyConstantsDestinyEnvironmentLocationMapping]=None, activity_mode_hashes: List[int]=None, activity_mode_types: List[int]=None, activity_type_hash: int=None, challenges: List[DestinyDefinitionsDestinyActivityChallengeDefinition]=None, destination_hash: int=None, direct_activity_mode_hash: int=None, direct_activity_mode_type: int=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, guided_game: DestinyDefinitionsDestinyActivityGuidedBlockDefinition=None, hash: int=None, index: int=None, insertion_points: List[DestinyDefinitionsDestinyActivityInsertionPointDefinition]=None, is_playlist: bool=None, is_pv_p: bool=None, loadouts: List[DestinyDefinitionsDestinyActivityLoadoutRequirementSet]=None, matchmaking: DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition=None, modifiers: List[DestinyDefinitionsDestinyActivityModifierReferenceDefinition]=None, optional_unlock_strings: List[DestinyDefinitionsDestinyActivityUnlockStringDefinition]=None, original_display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, pgcr_image: str=None, place_hash: int=None, playlist_items: List[DestinyDefinitionsDestinyActivityPlaylistItemDefinition]=None, redacted: bool=None, release_icon: str=None, release_time: int=None, rewards: List[DestinyDefinitionsDestinyActivityRewardDefinition]=None, selection_screen_display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, tier: int=None):
        """DestinyDefinitionsDestinyActivityDefinition - a model defined in OpenAPI

        :param activity_graph_list: The activity_graph_list of this DestinyDefinitionsDestinyActivityDefinition.
        :param activity_light_level: The activity_light_level of this DestinyDefinitionsDestinyActivityDefinition.
        :param activity_location_mappings: The activity_location_mappings of this DestinyDefinitionsDestinyActivityDefinition.
        :param activity_mode_hashes: The activity_mode_hashes of this DestinyDefinitionsDestinyActivityDefinition.
        :param activity_mode_types: The activity_mode_types of this DestinyDefinitionsDestinyActivityDefinition.
        :param activity_type_hash: The activity_type_hash of this DestinyDefinitionsDestinyActivityDefinition.
        :param challenges: The challenges of this DestinyDefinitionsDestinyActivityDefinition.
        :param destination_hash: The destination_hash of this DestinyDefinitionsDestinyActivityDefinition.
        :param direct_activity_mode_hash: The direct_activity_mode_hash of this DestinyDefinitionsDestinyActivityDefinition.
        :param direct_activity_mode_type: The direct_activity_mode_type of this DestinyDefinitionsDestinyActivityDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsDestinyActivityDefinition.
        :param guided_game: The guided_game of this DestinyDefinitionsDestinyActivityDefinition.
        :param hash: The hash of this DestinyDefinitionsDestinyActivityDefinition.
        :param index: The index of this DestinyDefinitionsDestinyActivityDefinition.
        :param insertion_points: The insertion_points of this DestinyDefinitionsDestinyActivityDefinition.
        :param is_playlist: The is_playlist of this DestinyDefinitionsDestinyActivityDefinition.
        :param is_pv_p: The is_pv_p of this DestinyDefinitionsDestinyActivityDefinition.
        :param loadouts: The loadouts of this DestinyDefinitionsDestinyActivityDefinition.
        :param matchmaking: The matchmaking of this DestinyDefinitionsDestinyActivityDefinition.
        :param modifiers: The modifiers of this DestinyDefinitionsDestinyActivityDefinition.
        :param optional_unlock_strings: The optional_unlock_strings of this DestinyDefinitionsDestinyActivityDefinition.
        :param original_display_properties: The original_display_properties of this DestinyDefinitionsDestinyActivityDefinition.
        :param pgcr_image: The pgcr_image of this DestinyDefinitionsDestinyActivityDefinition.
        :param place_hash: The place_hash of this DestinyDefinitionsDestinyActivityDefinition.
        :param playlist_items: The playlist_items of this DestinyDefinitionsDestinyActivityDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyActivityDefinition.
        :param release_icon: The release_icon of this DestinyDefinitionsDestinyActivityDefinition.
        :param release_time: The release_time of this DestinyDefinitionsDestinyActivityDefinition.
        :param rewards: The rewards of this DestinyDefinitionsDestinyActivityDefinition.
        :param selection_screen_display_properties: The selection_screen_display_properties of this DestinyDefinitionsDestinyActivityDefinition.
        :param tier: The tier of this DestinyDefinitionsDestinyActivityDefinition.
        """
        self.openapi_types = {
            'activity_graph_list': List[DestinyDefinitionsDestinyActivityGraphListEntryDefinition],
            'activity_light_level': int,
            'activity_location_mappings': List[DestinyConstantsDestinyEnvironmentLocationMapping],
            'activity_mode_hashes': List[int],
            'activity_mode_types': List[int],
            'activity_type_hash': int,
            'challenges': List[DestinyDefinitionsDestinyActivityChallengeDefinition],
            'destination_hash': int,
            'direct_activity_mode_hash': int,
            'direct_activity_mode_type': int,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'guided_game': DestinyDefinitionsDestinyActivityGuidedBlockDefinition,
            'hash': int,
            'index': int,
            'insertion_points': List[DestinyDefinitionsDestinyActivityInsertionPointDefinition],
            'is_playlist': bool,
            'is_pv_p': bool,
            'loadouts': List[DestinyDefinitionsDestinyActivityLoadoutRequirementSet],
            'matchmaking': DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition,
            'modifiers': List[DestinyDefinitionsDestinyActivityModifierReferenceDefinition],
            'optional_unlock_strings': List[DestinyDefinitionsDestinyActivityUnlockStringDefinition],
            'original_display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'pgcr_image': str,
            'place_hash': int,
            'playlist_items': List[DestinyDefinitionsDestinyActivityPlaylistItemDefinition],
            'redacted': bool,
            'release_icon': str,
            'release_time': int,
            'rewards': List[DestinyDefinitionsDestinyActivityRewardDefinition],
            'selection_screen_display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'tier': int
        }

        self.attribute_map = {
            'activity_graph_list': 'activityGraphList',
            'activity_light_level': 'activityLightLevel',
            'activity_location_mappings': 'activityLocationMappings',
            'activity_mode_hashes': 'activityModeHashes',
            'activity_mode_types': 'activityModeTypes',
            'activity_type_hash': 'activityTypeHash',
            'challenges': 'challenges',
            'destination_hash': 'destinationHash',
            'direct_activity_mode_hash': 'directActivityModeHash',
            'direct_activity_mode_type': 'directActivityModeType',
            'display_properties': 'displayProperties',
            'guided_game': 'guidedGame',
            'hash': 'hash',
            'index': 'index',
            'insertion_points': 'insertionPoints',
            'is_playlist': 'isPlaylist',
            'is_pv_p': 'isPvP',
            'loadouts': 'loadouts',
            'matchmaking': 'matchmaking',
            'modifiers': 'modifiers',
            'optional_unlock_strings': 'optionalUnlockStrings',
            'original_display_properties': 'originalDisplayProperties',
            'pgcr_image': 'pgcrImage',
            'place_hash': 'placeHash',
            'playlist_items': 'playlistItems',
            'redacted': 'redacted',
            'release_icon': 'releaseIcon',
            'release_time': 'releaseTime',
            'rewards': 'rewards',
            'selection_screen_display_properties': 'selectionScreenDisplayProperties',
            'tier': 'tier'
        }

        self._activity_graph_list = activity_graph_list
        self._activity_light_level = activity_light_level
        self._activity_location_mappings = activity_location_mappings
        self._activity_mode_hashes = activity_mode_hashes
        self._activity_mode_types = activity_mode_types
        self._activity_type_hash = activity_type_hash
        self._challenges = challenges
        self._destination_hash = destination_hash
        self._direct_activity_mode_hash = direct_activity_mode_hash
        self._direct_activity_mode_type = direct_activity_mode_type
        self._display_properties = display_properties
        self._guided_game = guided_game
        self._hash = hash
        self._index = index
        self._insertion_points = insertion_points
        self._is_playlist = is_playlist
        self._is_pv_p = is_pv_p
        self._loadouts = loadouts
        self._matchmaking = matchmaking
        self._modifiers = modifiers
        self._optional_unlock_strings = optional_unlock_strings
        self._original_display_properties = original_display_properties
        self._pgcr_image = pgcr_image
        self._place_hash = place_hash
        self._playlist_items = playlist_items
        self._redacted = redacted
        self._release_icon = release_icon
        self._release_time = release_time
        self._rewards = rewards
        self._selection_screen_display_properties = selection_screen_display_properties
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyActivityDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyActivityDefinition of this DestinyDefinitionsDestinyActivityDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_graph_list(self):
        """Gets the activity_graph_list of this DestinyDefinitionsDestinyActivityDefinition.

        Unfortunately, in practice this is almost never populated. In theory, this is supposed to tell which Activity Graph to show if you bring up the director while in this activity.

        :return: The activity_graph_list of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: List[DestinyDefinitionsDestinyActivityGraphListEntryDefinition]
        """
        return self._activity_graph_list

    @activity_graph_list.setter
    def activity_graph_list(self, activity_graph_list):
        """Sets the activity_graph_list of this DestinyDefinitionsDestinyActivityDefinition.

        Unfortunately, in practice this is almost never populated. In theory, this is supposed to tell which Activity Graph to show if you bring up the director while in this activity.

        :param activity_graph_list: The activity_graph_list of this DestinyDefinitionsDestinyActivityDefinition.
        :type activity_graph_list: List[DestinyDefinitionsDestinyActivityGraphListEntryDefinition]
        """

        self._activity_graph_list = activity_graph_list

    @property
    def activity_light_level(self):
        """Gets the activity_light_level of this DestinyDefinitionsDestinyActivityDefinition.

        The recommended light level for this activity.

        :return: The activity_light_level of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: int
        """
        return self._activity_light_level

    @activity_light_level.setter
    def activity_light_level(self, activity_light_level):
        """Sets the activity_light_level of this DestinyDefinitionsDestinyActivityDefinition.

        The recommended light level for this activity.

        :param activity_light_level: The activity_light_level of this DestinyDefinitionsDestinyActivityDefinition.
        :type activity_light_level: int
        """

        self._activity_light_level = activity_light_level

    @property
    def activity_location_mappings(self):
        """Gets the activity_location_mappings of this DestinyDefinitionsDestinyActivityDefinition.

        A list of location mappings that are affected by this activity. Pulled out of DestinyLocationDefinitions for our/your lookup convenience.

        :return: The activity_location_mappings of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: List[DestinyConstantsDestinyEnvironmentLocationMapping]
        """
        return self._activity_location_mappings

    @activity_location_mappings.setter
    def activity_location_mappings(self, activity_location_mappings):
        """Sets the activity_location_mappings of this DestinyDefinitionsDestinyActivityDefinition.

        A list of location mappings that are affected by this activity. Pulled out of DestinyLocationDefinitions for our/your lookup convenience.

        :param activity_location_mappings: The activity_location_mappings of this DestinyDefinitionsDestinyActivityDefinition.
        :type activity_location_mappings: List[DestinyConstantsDestinyEnvironmentLocationMapping]
        """

        self._activity_location_mappings = activity_location_mappings

    @property
    def activity_mode_hashes(self):
        """Gets the activity_mode_hashes of this DestinyDefinitionsDestinyActivityDefinition.

        The hash identifiers for Activity Modes relevant to this activity.  Note that if this is a playlist, the specific playlist entry chosen will determine the actual activity modes that end up being relevant.

        :return: The activity_mode_hashes of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: List[int]
        """
        return self._activity_mode_hashes

    @activity_mode_hashes.setter
    def activity_mode_hashes(self, activity_mode_hashes):
        """Sets the activity_mode_hashes of this DestinyDefinitionsDestinyActivityDefinition.

        The hash identifiers for Activity Modes relevant to this activity.  Note that if this is a playlist, the specific playlist entry chosen will determine the actual activity modes that end up being relevant.

        :param activity_mode_hashes: The activity_mode_hashes of this DestinyDefinitionsDestinyActivityDefinition.
        :type activity_mode_hashes: List[int]
        """

        self._activity_mode_hashes = activity_mode_hashes

    @property
    def activity_mode_types(self):
        """Gets the activity_mode_types of this DestinyDefinitionsDestinyActivityDefinition.

        The activity modes - if any - in enum form. Because we can't seem to escape the enums.

        :return: The activity_mode_types of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: List[int]
        """
        return self._activity_mode_types

    @activity_mode_types.setter
    def activity_mode_types(self, activity_mode_types):
        """Sets the activity_mode_types of this DestinyDefinitionsDestinyActivityDefinition.

        The activity modes - if any - in enum form. Because we can't seem to escape the enums.

        :param activity_mode_types: The activity_mode_types of this DestinyDefinitionsDestinyActivityDefinition.
        :type activity_mode_types: List[int]
        """

        self._activity_mode_types = activity_mode_types

    @property
    def activity_type_hash(self):
        """Gets the activity_type_hash of this DestinyDefinitionsDestinyActivityDefinition.

        The hash identifier for the Activity Type of this Activity. You may use it to look up the DestinyActivityTypeDefinition for human readable info, but be forewarned: Playlists and many PVP Map Activities will map to generic Activity Types. You'll have to use your knowledge of the Activity Mode being played to get more specific information about what the user is playing.

        :return: The activity_type_hash of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: int
        """
        return self._activity_type_hash

    @activity_type_hash.setter
    def activity_type_hash(self, activity_type_hash):
        """Sets the activity_type_hash of this DestinyDefinitionsDestinyActivityDefinition.

        The hash identifier for the Activity Type of this Activity. You may use it to look up the DestinyActivityTypeDefinition for human readable info, but be forewarned: Playlists and many PVP Map Activities will map to generic Activity Types. You'll have to use your knowledge of the Activity Mode being played to get more specific information about what the user is playing.

        :param activity_type_hash: The activity_type_hash of this DestinyDefinitionsDestinyActivityDefinition.
        :type activity_type_hash: int
        """

        self._activity_type_hash = activity_type_hash

    @property
    def challenges(self):
        """Gets the challenges of this DestinyDefinitionsDestinyActivityDefinition.

        An activity can have many Challenges, of which any subset of them may be active for play at any given period of time. This gives the information about the challenges and data that we use to understand when they're active and what rewards they provide. Sadly, at the moment there's no central definition for challenges: much like \"Skulls\" were in Destiny 1, these are defined on individual activities and there can be many duplicates/near duplicates across the Destiny 2 ecosystem. I have it in mind to centralize these in a future revision of the API, but we are out of time.

        :return: The challenges of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: List[DestinyDefinitionsDestinyActivityChallengeDefinition]
        """
        return self._challenges

    @challenges.setter
    def challenges(self, challenges):
        """Sets the challenges of this DestinyDefinitionsDestinyActivityDefinition.

        An activity can have many Challenges, of which any subset of them may be active for play at any given period of time. This gives the information about the challenges and data that we use to understand when they're active and what rewards they provide. Sadly, at the moment there's no central definition for challenges: much like \"Skulls\" were in Destiny 1, these are defined on individual activities and there can be many duplicates/near duplicates across the Destiny 2 ecosystem. I have it in mind to centralize these in a future revision of the API, but we are out of time.

        :param challenges: The challenges of this DestinyDefinitionsDestinyActivityDefinition.
        :type challenges: List[DestinyDefinitionsDestinyActivityChallengeDefinition]
        """

        self._challenges = challenges

    @property
    def destination_hash(self):
        """Gets the destination_hash of this DestinyDefinitionsDestinyActivityDefinition.

        The hash identifier for the Destination on which this Activity is played. Use it to look up the DestinyDestinationDefinition for human readable info about the destination. A Destination can be thought of as a more specific location than a \"Place\". For instance, if the \"Place\" is Earth, the \"Destination\" would be a specific city or region on Earth.

        :return: The destination_hash of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: int
        """
        return self._destination_hash

    @destination_hash.setter
    def destination_hash(self, destination_hash):
        """Sets the destination_hash of this DestinyDefinitionsDestinyActivityDefinition.

        The hash identifier for the Destination on which this Activity is played. Use it to look up the DestinyDestinationDefinition for human readable info about the destination. A Destination can be thought of as a more specific location than a \"Place\". For instance, if the \"Place\" is Earth, the \"Destination\" would be a specific city or region on Earth.

        :param destination_hash: The destination_hash of this DestinyDefinitionsDestinyActivityDefinition.
        :type destination_hash: int
        """

        self._destination_hash = destination_hash

    @property
    def direct_activity_mode_hash(self):
        """Gets the direct_activity_mode_hash of this DestinyDefinitionsDestinyActivityDefinition.

        If this activity had an activity mode directly defined on it, this will be the hash of that mode.

        :return: The direct_activity_mode_hash of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: int
        """
        return self._direct_activity_mode_hash

    @direct_activity_mode_hash.setter
    def direct_activity_mode_hash(self, direct_activity_mode_hash):
        """Sets the direct_activity_mode_hash of this DestinyDefinitionsDestinyActivityDefinition.

        If this activity had an activity mode directly defined on it, this will be the hash of that mode.

        :param direct_activity_mode_hash: The direct_activity_mode_hash of this DestinyDefinitionsDestinyActivityDefinition.
        :type direct_activity_mode_hash: int
        """

        self._direct_activity_mode_hash = direct_activity_mode_hash

    @property
    def direct_activity_mode_type(self):
        """Gets the direct_activity_mode_type of this DestinyDefinitionsDestinyActivityDefinition.

        If the activity had an activity mode directly defined on it, this will be the enum value of that mode.

        :return: The direct_activity_mode_type of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: int
        """
        return self._direct_activity_mode_type

    @direct_activity_mode_type.setter
    def direct_activity_mode_type(self, direct_activity_mode_type):
        """Sets the direct_activity_mode_type of this DestinyDefinitionsDestinyActivityDefinition.

        If the activity had an activity mode directly defined on it, this will be the enum value of that mode.

        :param direct_activity_mode_type: The direct_activity_mode_type of this DestinyDefinitionsDestinyActivityDefinition.
        :type direct_activity_mode_type: int
        """
        allowed_values = [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91]  # noqa: E501
        if direct_activity_mode_type not in allowed_values:
            raise ValueError(
                "Invalid value for `direct_activity_mode_type` ({0}), must be one of {1}"
                .format(direct_activity_mode_type, allowed_values)
            )

        self._direct_activity_mode_type = direct_activity_mode_type

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyActivityDefinition.

        The title, subtitle, and icon for the activity. We do a little post-processing on this to try and account for Activities where the designers have left this data too minimal to determine what activity is actually being played.

        :return: The display_properties of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyActivityDefinition.

        The title, subtitle, and icon for the activity. We do a little post-processing on this to try and account for Activities where the designers have left this data too minimal to determine what activity is actually being played.

        :param display_properties: The display_properties of this DestinyDefinitionsDestinyActivityDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def guided_game(self):
        """Gets the guided_game of this DestinyDefinitionsDestinyActivityDefinition.

        This block of data, if it exists, provides information about the guided game experience and restrictions for this activity. If it doesn't exist, the game is not able to be played as a guided game.

        :return: The guided_game of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: DestinyDefinitionsDestinyActivityGuidedBlockDefinition
        """
        return self._guided_game

    @guided_game.setter
    def guided_game(self, guided_game):
        """Sets the guided_game of this DestinyDefinitionsDestinyActivityDefinition.

        This block of data, if it exists, provides information about the guided game experience and restrictions for this activity. If it doesn't exist, the game is not able to be played as a guided game.

        :param guided_game: The guided_game of this DestinyDefinitionsDestinyActivityDefinition.
        :type guided_game: DestinyDefinitionsDestinyActivityGuidedBlockDefinition
        """

        self._guided_game = guided_game

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyActivityDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyActivityDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyActivityDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyActivityDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyActivityDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyActivityDefinition.
        :type index: int
        """

        self._index = index

    @property
    def insertion_points(self):
        """Gets the insertion_points of this DestinyDefinitionsDestinyActivityDefinition.

        The list of phases or points of entry into an activity, along with information we can use to determine their gating and availability.

        :return: The insertion_points of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: List[DestinyDefinitionsDestinyActivityInsertionPointDefinition]
        """
        return self._insertion_points

    @insertion_points.setter
    def insertion_points(self, insertion_points):
        """Sets the insertion_points of this DestinyDefinitionsDestinyActivityDefinition.

        The list of phases or points of entry into an activity, along with information we can use to determine their gating and availability.

        :param insertion_points: The insertion_points of this DestinyDefinitionsDestinyActivityDefinition.
        :type insertion_points: List[DestinyDefinitionsDestinyActivityInsertionPointDefinition]
        """

        self._insertion_points = insertion_points

    @property
    def is_playlist(self):
        """Gets the is_playlist of this DestinyDefinitionsDestinyActivityDefinition.

        If True, this Activity is actually a Playlist that refers to multiple possible specific Activities and Activity Modes. For instance, a Crucible Playlist may have references to multiple Activities (Maps) with multiple Activity Modes (specific PvP gameplay modes). If this is true, refer to the playlistItems property for the specific entries in the playlist.

        :return: The is_playlist of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: bool
        """
        return self._is_playlist

    @is_playlist.setter
    def is_playlist(self, is_playlist):
        """Sets the is_playlist of this DestinyDefinitionsDestinyActivityDefinition.

        If True, this Activity is actually a Playlist that refers to multiple possible specific Activities and Activity Modes. For instance, a Crucible Playlist may have references to multiple Activities (Maps) with multiple Activity Modes (specific PvP gameplay modes). If this is true, refer to the playlistItems property for the specific entries in the playlist.

        :param is_playlist: The is_playlist of this DestinyDefinitionsDestinyActivityDefinition.
        :type is_playlist: bool
        """

        self._is_playlist = is_playlist

    @property
    def is_pv_p(self):
        """Gets the is_pv_p of this DestinyDefinitionsDestinyActivityDefinition.

        If true, this activity is a PVP activity or playlist.

        :return: The is_pv_p of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: bool
        """
        return self._is_pv_p

    @is_pv_p.setter
    def is_pv_p(self, is_pv_p):
        """Sets the is_pv_p of this DestinyDefinitionsDestinyActivityDefinition.

        If true, this activity is a PVP activity or playlist.

        :param is_pv_p: The is_pv_p of this DestinyDefinitionsDestinyActivityDefinition.
        :type is_pv_p: bool
        """

        self._is_pv_p = is_pv_p

    @property
    def loadouts(self):
        """Gets the loadouts of this DestinyDefinitionsDestinyActivityDefinition.

        The set of all possible loadout requirements that could be active for this activity. Only one will be active at any given time, and you can discover which one through activity-associated data such as Milestones that have activity info on them.

        :return: The loadouts of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: List[DestinyDefinitionsDestinyActivityLoadoutRequirementSet]
        """
        return self._loadouts

    @loadouts.setter
    def loadouts(self, loadouts):
        """Sets the loadouts of this DestinyDefinitionsDestinyActivityDefinition.

        The set of all possible loadout requirements that could be active for this activity. Only one will be active at any given time, and you can discover which one through activity-associated data such as Milestones that have activity info on them.

        :param loadouts: The loadouts of this DestinyDefinitionsDestinyActivityDefinition.
        :type loadouts: List[DestinyDefinitionsDestinyActivityLoadoutRequirementSet]
        """

        self._loadouts = loadouts

    @property
    def matchmaking(self):
        """Gets the matchmaking of this DestinyDefinitionsDestinyActivityDefinition.

        This block of data provides information about the Activity's matchmaking attributes: how many people can join and such.

        :return: The matchmaking of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition
        """
        return self._matchmaking

    @matchmaking.setter
    def matchmaking(self, matchmaking):
        """Sets the matchmaking of this DestinyDefinitionsDestinyActivityDefinition.

        This block of data provides information about the Activity's matchmaking attributes: how many people can join and such.

        :param matchmaking: The matchmaking of this DestinyDefinitionsDestinyActivityDefinition.
        :type matchmaking: DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition
        """

        self._matchmaking = matchmaking

    @property
    def modifiers(self):
        """Gets the modifiers of this DestinyDefinitionsDestinyActivityDefinition.

        Activities can have Modifiers, as defined in DestinyActivityModifierDefinition. These are references to the modifiers that *can* be applied to that activity, along with data that we use to determine if that modifier is actually active at any given point in time.

        :return: The modifiers of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: List[DestinyDefinitionsDestinyActivityModifierReferenceDefinition]
        """
        return self._modifiers

    @modifiers.setter
    def modifiers(self, modifiers):
        """Sets the modifiers of this DestinyDefinitionsDestinyActivityDefinition.

        Activities can have Modifiers, as defined in DestinyActivityModifierDefinition. These are references to the modifiers that *can* be applied to that activity, along with data that we use to determine if that modifier is actually active at any given point in time.

        :param modifiers: The modifiers of this DestinyDefinitionsDestinyActivityDefinition.
        :type modifiers: List[DestinyDefinitionsDestinyActivityModifierReferenceDefinition]
        """

        self._modifiers = modifiers

    @property
    def optional_unlock_strings(self):
        """Gets the optional_unlock_strings of this DestinyDefinitionsDestinyActivityDefinition.

        If there are status strings related to the activity and based on internal state of the game, account, or character, then this will be the definition of those strings and the states needed in order for the strings to be shown.

        :return: The optional_unlock_strings of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: List[DestinyDefinitionsDestinyActivityUnlockStringDefinition]
        """
        return self._optional_unlock_strings

    @optional_unlock_strings.setter
    def optional_unlock_strings(self, optional_unlock_strings):
        """Sets the optional_unlock_strings of this DestinyDefinitionsDestinyActivityDefinition.

        If there are status strings related to the activity and based on internal state of the game, account, or character, then this will be the definition of those strings and the states needed in order for the strings to be shown.

        :param optional_unlock_strings: The optional_unlock_strings of this DestinyDefinitionsDestinyActivityDefinition.
        :type optional_unlock_strings: List[DestinyDefinitionsDestinyActivityUnlockStringDefinition]
        """

        self._optional_unlock_strings = optional_unlock_strings

    @property
    def original_display_properties(self):
        """Gets the original_display_properties of this DestinyDefinitionsDestinyActivityDefinition.

        The unadulterated form of the display properties, as they ought to be shown in the Director (if the activity appears in the director).

        :return: The original_display_properties of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._original_display_properties

    @original_display_properties.setter
    def original_display_properties(self, original_display_properties):
        """Sets the original_display_properties of this DestinyDefinitionsDestinyActivityDefinition.

        The unadulterated form of the display properties, as they ought to be shown in the Director (if the activity appears in the director).

        :param original_display_properties: The original_display_properties of this DestinyDefinitionsDestinyActivityDefinition.
        :type original_display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._original_display_properties = original_display_properties

    @property
    def pgcr_image(self):
        """Gets the pgcr_image of this DestinyDefinitionsDestinyActivityDefinition.

        When Activities are completed, we generate a \"Post-Game Carnage Report\", or PGCR, with details about what happened in that activity (how many kills someone got, which team won, etc...) We use this image as the background when displaying PGCR information, and often use it when we refer to the Activity in general.

        :return: The pgcr_image of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: str
        """
        return self._pgcr_image

    @pgcr_image.setter
    def pgcr_image(self, pgcr_image):
        """Sets the pgcr_image of this DestinyDefinitionsDestinyActivityDefinition.

        When Activities are completed, we generate a \"Post-Game Carnage Report\", or PGCR, with details about what happened in that activity (how many kills someone got, which team won, etc...) We use this image as the background when displaying PGCR information, and often use it when we refer to the Activity in general.

        :param pgcr_image: The pgcr_image of this DestinyDefinitionsDestinyActivityDefinition.
        :type pgcr_image: str
        """

        self._pgcr_image = pgcr_image

    @property
    def place_hash(self):
        """Gets the place_hash of this DestinyDefinitionsDestinyActivityDefinition.

        The hash identifier for the \"Place\" on which this Activity is played. Use it to look up the DestinyPlaceDefinition for human readable info about the Place. A Place is the largest-scoped concept for location information. For instance, if the \"Place\" is Earth, the \"Destination\" would be a specific city or region on Earth.

        :return: The place_hash of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: int
        """
        return self._place_hash

    @place_hash.setter
    def place_hash(self, place_hash):
        """Sets the place_hash of this DestinyDefinitionsDestinyActivityDefinition.

        The hash identifier for the \"Place\" on which this Activity is played. Use it to look up the DestinyPlaceDefinition for human readable info about the Place. A Place is the largest-scoped concept for location information. For instance, if the \"Place\" is Earth, the \"Destination\" would be a specific city or region on Earth.

        :param place_hash: The place_hash of this DestinyDefinitionsDestinyActivityDefinition.
        :type place_hash: int
        """

        self._place_hash = place_hash

    @property
    def playlist_items(self):
        """Gets the playlist_items of this DestinyDefinitionsDestinyActivityDefinition.

        Represents all of the possible activities that could be played in the Playlist, along with information that we can use to determine if they are active at the present time.

        :return: The playlist_items of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: List[DestinyDefinitionsDestinyActivityPlaylistItemDefinition]
        """
        return self._playlist_items

    @playlist_items.setter
    def playlist_items(self, playlist_items):
        """Sets the playlist_items of this DestinyDefinitionsDestinyActivityDefinition.

        Represents all of the possible activities that could be played in the Playlist, along with information that we can use to determine if they are active at the present time.

        :param playlist_items: The playlist_items of this DestinyDefinitionsDestinyActivityDefinition.
        :type playlist_items: List[DestinyDefinitionsDestinyActivityPlaylistItemDefinition]
        """

        self._playlist_items = playlist_items

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyActivityDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyActivityDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyActivityDefinition.
        :type redacted: bool
        """

        self._redacted = redacted

    @property
    def release_icon(self):
        """Gets the release_icon of this DestinyDefinitionsDestinyActivityDefinition.

        If the activity has an icon associated with a specific release (such as a DLC), this is the path to that release's icon.

        :return: The release_icon of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: str
        """
        return self._release_icon

    @release_icon.setter
    def release_icon(self, release_icon):
        """Sets the release_icon of this DestinyDefinitionsDestinyActivityDefinition.

        If the activity has an icon associated with a specific release (such as a DLC), this is the path to that release's icon.

        :param release_icon: The release_icon of this DestinyDefinitionsDestinyActivityDefinition.
        :type release_icon: str
        """

        self._release_icon = release_icon

    @property
    def release_time(self):
        """Gets the release_time of this DestinyDefinitionsDestinyActivityDefinition.

        If the activity will not be visible until a specific and known time, this will be the seconds since the Epoch when it will become visible.

        :return: The release_time of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: int
        """
        return self._release_time

    @release_time.setter
    def release_time(self, release_time):
        """Sets the release_time of this DestinyDefinitionsDestinyActivityDefinition.

        If the activity will not be visible until a specific and known time, this will be the seconds since the Epoch when it will become visible.

        :param release_time: The release_time of this DestinyDefinitionsDestinyActivityDefinition.
        :type release_time: int
        """

        self._release_time = release_time

    @property
    def rewards(self):
        """Gets the rewards of this DestinyDefinitionsDestinyActivityDefinition.

        The expected possible rewards for the activity. These rewards may or may not be accessible for an individual player based on their character state, the account state, and even the game's state overall. But it is a useful reference for possible rewards you can earn in the activity. These match up to rewards displayed when you hover over the Activity in the in-game Director, and often refer to Placeholder or \"Dummy\" items: items that tell you what you can earn in vague terms rather than what you'll specifically be earning (partly because the game doesn't even know what you'll earn specifically until you roll for it at the end)

        :return: The rewards of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: List[DestinyDefinitionsDestinyActivityRewardDefinition]
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards):
        """Sets the rewards of this DestinyDefinitionsDestinyActivityDefinition.

        The expected possible rewards for the activity. These rewards may or may not be accessible for an individual player based on their character state, the account state, and even the game's state overall. But it is a useful reference for possible rewards you can earn in the activity. These match up to rewards displayed when you hover over the Activity in the in-game Director, and often refer to Placeholder or \"Dummy\" items: items that tell you what you can earn in vague terms rather than what you'll specifically be earning (partly because the game doesn't even know what you'll earn specifically until you roll for it at the end)

        :param rewards: The rewards of this DestinyDefinitionsDestinyActivityDefinition.
        :type rewards: List[DestinyDefinitionsDestinyActivityRewardDefinition]
        """

        self._rewards = rewards

    @property
    def selection_screen_display_properties(self):
        """Gets the selection_screen_display_properties of this DestinyDefinitionsDestinyActivityDefinition.

        The title, subtitle, and icon for the activity as determined by Selection Screen data, if there is any for this activity. There won't be data in this field if the activity is never shown in a selection/options screen.

        :return: The selection_screen_display_properties of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._selection_screen_display_properties

    @selection_screen_display_properties.setter
    def selection_screen_display_properties(self, selection_screen_display_properties):
        """Sets the selection_screen_display_properties of this DestinyDefinitionsDestinyActivityDefinition.

        The title, subtitle, and icon for the activity as determined by Selection Screen data, if there is any for this activity. There won't be data in this field if the activity is never shown in a selection/options screen.

        :param selection_screen_display_properties: The selection_screen_display_properties of this DestinyDefinitionsDestinyActivityDefinition.
        :type selection_screen_display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._selection_screen_display_properties = selection_screen_display_properties

    @property
    def tier(self):
        """Gets the tier of this DestinyDefinitionsDestinyActivityDefinition.

        The difficulty tier of the activity.

        :return: The tier of this DestinyDefinitionsDestinyActivityDefinition.
        :rtype: int
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this DestinyDefinitionsDestinyActivityDefinition.

        The difficulty tier of the activity.

        :param tier: The tier of this DestinyDefinitionsDestinyActivityDefinition.
        :type tier: int
        """

        self._tier = tier
