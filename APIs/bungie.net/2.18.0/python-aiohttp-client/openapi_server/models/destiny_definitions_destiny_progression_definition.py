# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_destiny_progression_display_properties_definition import DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition
from openapi_server.models.destiny_definitions_destiny_progression_reward_item_quantity import DestinyDefinitionsDestinyProgressionRewardItemQuantity
from openapi_server.models.destiny_definitions_destiny_progression_step_definition import DestinyDefinitionsDestinyProgressionStepDefinition
from openapi_server.models.destiny_misc_destiny_color import DestinyMiscDestinyColor
from openapi_server import util


class DestinyDefinitionsDestinyProgressionDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: DestinyMiscDestinyColor=None, display_properties: DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition=None, faction_hash: int=None, hash: int=None, index: int=None, rank_icon: str=None, redacted: bool=None, repeat_last_step: bool=None, reward_items: List[DestinyDefinitionsDestinyProgressionRewardItemQuantity]=None, scope: int=None, source: str=None, steps: List[DestinyDefinitionsDestinyProgressionStepDefinition]=None, visible: bool=None):
        """DestinyDefinitionsDestinyProgressionDefinition - a model defined in OpenAPI

        :param color: The color of this DestinyDefinitionsDestinyProgressionDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsDestinyProgressionDefinition.
        :param faction_hash: The faction_hash of this DestinyDefinitionsDestinyProgressionDefinition.
        :param hash: The hash of this DestinyDefinitionsDestinyProgressionDefinition.
        :param index: The index of this DestinyDefinitionsDestinyProgressionDefinition.
        :param rank_icon: The rank_icon of this DestinyDefinitionsDestinyProgressionDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyProgressionDefinition.
        :param repeat_last_step: The repeat_last_step of this DestinyDefinitionsDestinyProgressionDefinition.
        :param reward_items: The reward_items of this DestinyDefinitionsDestinyProgressionDefinition.
        :param scope: The scope of this DestinyDefinitionsDestinyProgressionDefinition.
        :param source: The source of this DestinyDefinitionsDestinyProgressionDefinition.
        :param steps: The steps of this DestinyDefinitionsDestinyProgressionDefinition.
        :param visible: The visible of this DestinyDefinitionsDestinyProgressionDefinition.
        """
        self.openapi_types = {
            'color': DestinyMiscDestinyColor,
            'display_properties': DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition,
            'faction_hash': int,
            'hash': int,
            'index': int,
            'rank_icon': str,
            'redacted': bool,
            'repeat_last_step': bool,
            'reward_items': List[DestinyDefinitionsDestinyProgressionRewardItemQuantity],
            'scope': int,
            'source': str,
            'steps': List[DestinyDefinitionsDestinyProgressionStepDefinition],
            'visible': bool
        }

        self.attribute_map = {
            'color': 'color',
            'display_properties': 'displayProperties',
            'faction_hash': 'factionHash',
            'hash': 'hash',
            'index': 'index',
            'rank_icon': 'rankIcon',
            'redacted': 'redacted',
            'repeat_last_step': 'repeatLastStep',
            'reward_items': 'rewardItems',
            'scope': 'scope',
            'source': 'source',
            'steps': 'steps',
            'visible': 'visible'
        }

        self._color = color
        self._display_properties = display_properties
        self._faction_hash = faction_hash
        self._hash = hash
        self._index = index
        self._rank_icon = rank_icon
        self._redacted = redacted
        self._repeat_last_step = repeat_last_step
        self._reward_items = reward_items
        self._scope = scope
        self._source = source
        self._steps = steps
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyProgressionDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyProgressionDefinition of this DestinyDefinitionsDestinyProgressionDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this DestinyDefinitionsDestinyProgressionDefinition.

        The #RGB string value for the color related to this progression, if there is one.

        :return: The color of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: DestinyMiscDestinyColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DestinyDefinitionsDestinyProgressionDefinition.

        The #RGB string value for the color related to this progression, if there is one.

        :param color: The color of this DestinyDefinitionsDestinyProgressionDefinition.
        :type color: DestinyMiscDestinyColor
        """

        self._color = color

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyProgressionDefinition.


        :return: The display_properties of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyProgressionDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsDestinyProgressionDefinition.
        :type display_properties: DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def faction_hash(self):
        """Gets the faction_hash of this DestinyDefinitionsDestinyProgressionDefinition.

        If the value exists, this is the hash identifier for the Faction that owns this Progression.  This is purely for convenience, if you're looking at a progression and want to know if and who it's related to in terms of Faction Reputation.

        :return: The faction_hash of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: int
        """
        return self._faction_hash

    @faction_hash.setter
    def faction_hash(self, faction_hash):
        """Sets the faction_hash of this DestinyDefinitionsDestinyProgressionDefinition.

        If the value exists, this is the hash identifier for the Faction that owns this Progression.  This is purely for convenience, if you're looking at a progression and want to know if and who it's related to in terms of Faction Reputation.

        :param faction_hash: The faction_hash of this DestinyDefinitionsDestinyProgressionDefinition.
        :type faction_hash: int
        """

        self._faction_hash = faction_hash

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyProgressionDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyProgressionDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyProgressionDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyProgressionDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyProgressionDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyProgressionDefinition.
        :type index: int
        """

        self._index = index

    @property
    def rank_icon(self):
        """Gets the rank_icon of this DestinyDefinitionsDestinyProgressionDefinition.

        For progressions that have it, this is the rank icon we use in the Companion, displayed above the progressions' rank value.

        :return: The rank_icon of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: str
        """
        return self._rank_icon

    @rank_icon.setter
    def rank_icon(self, rank_icon):
        """Sets the rank_icon of this DestinyDefinitionsDestinyProgressionDefinition.

        For progressions that have it, this is the rank icon we use in the Companion, displayed above the progressions' rank value.

        :param rank_icon: The rank_icon of this DestinyDefinitionsDestinyProgressionDefinition.
        :type rank_icon: str
        """

        self._rank_icon = rank_icon

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyProgressionDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyProgressionDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyProgressionDefinition.
        :type redacted: bool
        """

        self._redacted = redacted

    @property
    def repeat_last_step(self):
        """Gets the repeat_last_step of this DestinyDefinitionsDestinyProgressionDefinition.

        If this is True, then the progression doesn't have a maximum level.

        :return: The repeat_last_step of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: bool
        """
        return self._repeat_last_step

    @repeat_last_step.setter
    def repeat_last_step(self, repeat_last_step):
        """Sets the repeat_last_step of this DestinyDefinitionsDestinyProgressionDefinition.

        If this is True, then the progression doesn't have a maximum level.

        :param repeat_last_step: The repeat_last_step of this DestinyDefinitionsDestinyProgressionDefinition.
        :type repeat_last_step: bool
        """

        self._repeat_last_step = repeat_last_step

    @property
    def reward_items(self):
        """Gets the reward_items of this DestinyDefinitionsDestinyProgressionDefinition.


        :return: The reward_items of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: List[DestinyDefinitionsDestinyProgressionRewardItemQuantity]
        """
        return self._reward_items

    @reward_items.setter
    def reward_items(self, reward_items):
        """Sets the reward_items of this DestinyDefinitionsDestinyProgressionDefinition.


        :param reward_items: The reward_items of this DestinyDefinitionsDestinyProgressionDefinition.
        :type reward_items: List[DestinyDefinitionsDestinyProgressionRewardItemQuantity]
        """

        self._reward_items = reward_items

    @property
    def scope(self):
        """Gets the scope of this DestinyDefinitionsDestinyProgressionDefinition.

        The \"Scope\" of the progression indicates the source of the progression's live data.  See the DestinyProgressionScope enum for more info: but essentially, a Progression can either be backed by a stored value, or it can be a calculated derivative of other values.

        :return: The scope of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: int
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this DestinyDefinitionsDestinyProgressionDefinition.

        The \"Scope\" of the progression indicates the source of the progression's live data.  See the DestinyProgressionScope enum for more info: but essentially, a Progression can either be backed by a stored value, or it can be a calculated derivative of other values.

        :param scope: The scope of this DestinyDefinitionsDestinyProgressionDefinition.
        :type scope: int
        """

        self._scope = scope

    @property
    def source(self):
        """Gets the source of this DestinyDefinitionsDestinyProgressionDefinition.

        If there's a description of how to earn this progression in the local config, this will be that localized description.

        :return: The source of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DestinyDefinitionsDestinyProgressionDefinition.

        If there's a description of how to earn this progression in the local config, this will be that localized description.

        :param source: The source of this DestinyDefinitionsDestinyProgressionDefinition.
        :type source: str
        """

        self._source = source

    @property
    def steps(self):
        """Gets the steps of this DestinyDefinitionsDestinyProgressionDefinition.

        Progressions are divided into Steps, which roughly equate to \"Levels\" in the traditional sense of a Progression. Notably, the last step can be repeated indefinitely if repeatLastStep is true, meaning that the calculation for your level is not as simple as comparing your current progress to the max progress of the steps.   These and more calculations are done for you if you grab live character progression data, such as in the DestinyCharacterProgressionComponent.

        :return: The steps of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: List[DestinyDefinitionsDestinyProgressionStepDefinition]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this DestinyDefinitionsDestinyProgressionDefinition.

        Progressions are divided into Steps, which roughly equate to \"Levels\" in the traditional sense of a Progression. Notably, the last step can be repeated indefinitely if repeatLastStep is true, meaning that the calculation for your level is not as simple as comparing your current progress to the max progress of the steps.   These and more calculations are done for you if you grab live character progression data, such as in the DestinyCharacterProgressionComponent.

        :param steps: The steps of this DestinyDefinitionsDestinyProgressionDefinition.
        :type steps: List[DestinyDefinitionsDestinyProgressionStepDefinition]
        """

        self._steps = steps

    @property
    def visible(self):
        """Gets the visible of this DestinyDefinitionsDestinyProgressionDefinition.

        If true, the Progression is something worth showing to users.  If false, BNet isn't going to show it. But that doesn't mean you can't. We're all friends here.

        :return: The visible of this DestinyDefinitionsDestinyProgressionDefinition.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this DestinyDefinitionsDestinyProgressionDefinition.

        If true, the Progression is something worth showing to users.  If false, BNet isn't going to show it. But that doesn't mean you can't. We're all friends here.

        :param visible: The visible of this DestinyDefinitionsDestinyProgressionDefinition.
        :type visible: bool
        """

        self._visible = visible
