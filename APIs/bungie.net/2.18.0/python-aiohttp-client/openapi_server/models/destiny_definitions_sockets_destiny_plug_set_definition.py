# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server.models.destiny_definitions_destiny_item_socket_entry_plug_item_randomized_definition import DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition
from openapi_server import util


class DestinyDefinitionsSocketsDestinyPlugSetDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, hash: int=None, index: int=None, is_fake_plug_set: bool=None, redacted: bool=None, reusable_plug_items: List[DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition]=None):
        """DestinyDefinitionsSocketsDestinyPlugSetDefinition - a model defined in OpenAPI

        :param display_properties: The display_properties of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :param hash: The hash of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :param index: The index of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :param is_fake_plug_set: The is_fake_plug_set of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :param redacted: The redacted of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :param reusable_plug_items: The reusable_plug_items of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        """
        self.openapi_types = {
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'hash': int,
            'index': int,
            'is_fake_plug_set': bool,
            'redacted': bool,
            'reusable_plug_items': List[DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition]
        }

        self.attribute_map = {
            'display_properties': 'displayProperties',
            'hash': 'hash',
            'index': 'index',
            'is_fake_plug_set': 'isFakePlugSet',
            'redacted': 'redacted',
            'reusable_plug_items': 'reusablePlugItems'
        }

        self._display_properties = display_properties
        self._hash = hash
        self._index = index
        self._is_fake_plug_set = is_fake_plug_set
        self._redacted = redacted
        self._reusable_plug_items = reusable_plug_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsSocketsDestinyPlugSetDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.Sockets.DestinyPlugSetDefinition of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.

        If you want to show these plugs in isolation, these are the display properties for them.

        :return: The display_properties of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.

        If you want to show these plugs in isolation, these are the display properties for them.

        :param display_properties: The display_properties of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :type index: int
        """

        self._index = index

    @property
    def is_fake_plug_set(self):
        """Gets the is_fake_plug_set of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.

        Mostly for our debugging or reporting bugs, BNet is making \"fake\" plug sets in a desperate effort to reduce socket sizes.   If this is true, the plug set was generated by BNet: if it looks wrong, that's a good indicator that it's bungie.net that fucked this up.

        :return: The is_fake_plug_set of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :rtype: bool
        """
        return self._is_fake_plug_set

    @is_fake_plug_set.setter
    def is_fake_plug_set(self, is_fake_plug_set):
        """Sets the is_fake_plug_set of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.

        Mostly for our debugging or reporting bugs, BNet is making \"fake\" plug sets in a desperate effort to reduce socket sizes.   If this is true, the plug set was generated by BNet: if it looks wrong, that's a good indicator that it's bungie.net that fucked this up.

        :param is_fake_plug_set: The is_fake_plug_set of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :type is_fake_plug_set: bool
        """

        self._is_fake_plug_set = is_fake_plug_set

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :type redacted: bool
        """

        self._redacted = redacted

    @property
    def reusable_plug_items(self):
        """Gets the reusable_plug_items of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.

        This is a list of pre-determined plugs that can be plugged into this socket, without the character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.

        :return: The reusable_plug_items of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :rtype: List[DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition]
        """
        return self._reusable_plug_items

    @reusable_plug_items.setter
    def reusable_plug_items(self, reusable_plug_items):
        """Sets the reusable_plug_items of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.

        This is a list of pre-determined plugs that can be plugged into this socket, without the character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.

        :param reusable_plug_items: The reusable_plug_items of this DestinyDefinitionsSocketsDestinyPlugSetDefinition.
        :type reusable_plug_items: List[DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition]
        """

        self._reusable_plug_items = reusable_plug_items
