# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.applications_datapoint import ApplicationsDatapoint
from openapi_server import util


class ApplicationsSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datapoints: List[ApplicationsDatapoint]=None, target: str=None):
        """ApplicationsSeries - a model defined in OpenAPI

        :param datapoints: The datapoints of this ApplicationsSeries.
        :param target: The target of this ApplicationsSeries.
        """
        self.openapi_types = {
            'datapoints': List[ApplicationsDatapoint],
            'target': str
        }

        self.attribute_map = {
            'datapoints': 'datapoints',
            'target': 'target'
        }

        self._datapoints = datapoints
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationsSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Applications.Series of this ApplicationsSeries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datapoints(self):
        """Gets the datapoints of this ApplicationsSeries.

        Collection of samples with time and value.

        :return: The datapoints of this ApplicationsSeries.
        :rtype: List[ApplicationsDatapoint]
        """
        return self._datapoints

    @datapoints.setter
    def datapoints(self, datapoints):
        """Sets the datapoints of this ApplicationsSeries.

        Collection of samples with time and value.

        :param datapoints: The datapoints of this ApplicationsSeries.
        :type datapoints: List[ApplicationsDatapoint]
        """

        self._datapoints = datapoints

    @property
    def target(self):
        """Gets the target of this ApplicationsSeries.

        Target to which to datapoints apply.

        :return: The target of this ApplicationsSeries.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ApplicationsSeries.

        Target to which to datapoints apply.

        :param target: The target of this ApplicationsSeries.
        :type target: str
        """

        self._target = target
