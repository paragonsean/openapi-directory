# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server import util


class DestinyDefinitionsDestinyActivityModeDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_mode_category: int=None, activity_mode_mappings: Dict[str, int]=None, display: bool=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, friendly_name: str=None, hash: int=None, index: int=None, is_aggregate_mode: bool=None, is_team_based: bool=None, mode_type: int=None, order: int=None, parent_hashes: List[int]=None, pgcr_image: str=None, redacted: bool=None):
        """DestinyDefinitionsDestinyActivityModeDefinition - a model defined in OpenAPI

        :param activity_mode_category: The activity_mode_category of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param activity_mode_mappings: The activity_mode_mappings of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param display: The display of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param friendly_name: The friendly_name of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param hash: The hash of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param index: The index of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param is_aggregate_mode: The is_aggregate_mode of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param is_team_based: The is_team_based of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param mode_type: The mode_type of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param order: The order of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param parent_hashes: The parent_hashes of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param pgcr_image: The pgcr_image of this DestinyDefinitionsDestinyActivityModeDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyActivityModeDefinition.
        """
        self.openapi_types = {
            'activity_mode_category': int,
            'activity_mode_mappings': Dict[str, int],
            'display': bool,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'friendly_name': str,
            'hash': int,
            'index': int,
            'is_aggregate_mode': bool,
            'is_team_based': bool,
            'mode_type': int,
            'order': int,
            'parent_hashes': List[int],
            'pgcr_image': str,
            'redacted': bool
        }

        self.attribute_map = {
            'activity_mode_category': 'activityModeCategory',
            'activity_mode_mappings': 'activityModeMappings',
            'display': 'display',
            'display_properties': 'displayProperties',
            'friendly_name': 'friendlyName',
            'hash': 'hash',
            'index': 'index',
            'is_aggregate_mode': 'isAggregateMode',
            'is_team_based': 'isTeamBased',
            'mode_type': 'modeType',
            'order': 'order',
            'parent_hashes': 'parentHashes',
            'pgcr_image': 'pgcrImage',
            'redacted': 'redacted'
        }

        self._activity_mode_category = activity_mode_category
        self._activity_mode_mappings = activity_mode_mappings
        self._display = display
        self._display_properties = display_properties
        self._friendly_name = friendly_name
        self._hash = hash
        self._index = index
        self._is_aggregate_mode = is_aggregate_mode
        self._is_team_based = is_team_based
        self._mode_type = mode_type
        self._order = order
        self._parent_hashes = parent_hashes
        self._pgcr_image = pgcr_image
        self._redacted = redacted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyActivityModeDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyActivityModeDefinition of this DestinyDefinitionsDestinyActivityModeDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_mode_category(self):
        """Gets the activity_mode_category of this DestinyDefinitionsDestinyActivityModeDefinition.

        The type of play being performed in broad terms (PVP, PVE)

        :return: The activity_mode_category of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: int
        """
        return self._activity_mode_category

    @activity_mode_category.setter
    def activity_mode_category(self, activity_mode_category):
        """Sets the activity_mode_category of this DestinyDefinitionsDestinyActivityModeDefinition.

        The type of play being performed in broad terms (PVP, PVE)

        :param activity_mode_category: The activity_mode_category of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type activity_mode_category: int
        """

        self._activity_mode_category = activity_mode_category

    @property
    def activity_mode_mappings(self):
        """Gets the activity_mode_mappings of this DestinyDefinitionsDestinyActivityModeDefinition.

        If this exists, the mode has specific Activities (referred to by the Key) that should instead map to other Activity Modes when they are played. This was useful in D1 for Private Matches, where we wanted to have Private Matches as an activity mode while still referring to the specific mode being played.

        :return: The activity_mode_mappings of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: Dict[str, int]
        """
        return self._activity_mode_mappings

    @activity_mode_mappings.setter
    def activity_mode_mappings(self, activity_mode_mappings):
        """Sets the activity_mode_mappings of this DestinyDefinitionsDestinyActivityModeDefinition.

        If this exists, the mode has specific Activities (referred to by the Key) that should instead map to other Activity Modes when they are played. This was useful in D1 for Private Matches, where we wanted to have Private Matches as an activity mode while still referring to the specific mode being played.

        :param activity_mode_mappings: The activity_mode_mappings of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type activity_mode_mappings: Dict[str, int]
        """

        self._activity_mode_mappings = activity_mode_mappings

    @property
    def display(self):
        """Gets the display of this DestinyDefinitionsDestinyActivityModeDefinition.

        If FALSE, we want to ignore this type when we're showing activity modes in BNet UI. It will still be returned in case 3rd parties want to use it for any purpose.

        :return: The display of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: bool
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this DestinyDefinitionsDestinyActivityModeDefinition.

        If FALSE, we want to ignore this type when we're showing activity modes in BNet UI. It will still be returned in case 3rd parties want to use it for any purpose.

        :param display: The display of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type display: bool
        """

        self._display = display

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyActivityModeDefinition.


        :return: The display_properties of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyActivityModeDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def friendly_name(self):
        """Gets the friendly_name of this DestinyDefinitionsDestinyActivityModeDefinition.

        A Friendly identifier you can use for referring to this Activity Mode. We really only used this in our URLs, so... you know, take that for whatever it's worth.

        :return: The friendly_name of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this DestinyDefinitionsDestinyActivityModeDefinition.

        A Friendly identifier you can use for referring to this Activity Mode. We really only used this in our URLs, so... you know, take that for whatever it's worth.

        :param friendly_name: The friendly_name of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyActivityModeDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyActivityModeDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyActivityModeDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyActivityModeDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type index: int
        """

        self._index = index

    @property
    def is_aggregate_mode(self):
        """Gets the is_aggregate_mode of this DestinyDefinitionsDestinyActivityModeDefinition.

        If true, this mode is an aggregation of other, more specific modes rather than being a mode in itself. This includes modes that group Features/Events rather than Gameplay, such as Trials of The Nine: Trials of the Nine being an Event that is interesting to see aggregate data for, but when you play the activities within Trials of the Nine they are more specific activity modes such as Clash.

        :return: The is_aggregate_mode of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: bool
        """
        return self._is_aggregate_mode

    @is_aggregate_mode.setter
    def is_aggregate_mode(self, is_aggregate_mode):
        """Sets the is_aggregate_mode of this DestinyDefinitionsDestinyActivityModeDefinition.

        If true, this mode is an aggregation of other, more specific modes rather than being a mode in itself. This includes modes that group Features/Events rather than Gameplay, such as Trials of The Nine: Trials of the Nine being an Event that is interesting to see aggregate data for, but when you play the activities within Trials of the Nine they are more specific activity modes such as Clash.

        :param is_aggregate_mode: The is_aggregate_mode of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type is_aggregate_mode: bool
        """

        self._is_aggregate_mode = is_aggregate_mode

    @property
    def is_team_based(self):
        """Gets the is_team_based of this DestinyDefinitionsDestinyActivityModeDefinition.

        If True, this mode has oppositional teams fighting against each other rather than \"Free-For-All\" or Co-operative modes of play.  Note that Aggregate modes are never marked as team based, even if they happen to be team based at the moment. At any time, an aggregate whose subordinates are only team based could be changed so that one or more aren't team based, and then this boolean won't make much sense (the aggregation would become \"sometimes team based\"). Let's not deal with that right now.

        :return: The is_team_based of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: bool
        """
        return self._is_team_based

    @is_team_based.setter
    def is_team_based(self, is_team_based):
        """Sets the is_team_based of this DestinyDefinitionsDestinyActivityModeDefinition.

        If True, this mode has oppositional teams fighting against each other rather than \"Free-For-All\" or Co-operative modes of play.  Note that Aggregate modes are never marked as team based, even if they happen to be team based at the moment. At any time, an aggregate whose subordinates are only team based could be changed so that one or more aren't team based, and then this boolean won't make much sense (the aggregation would become \"sometimes team based\"). Let's not deal with that right now.

        :param is_team_based: The is_team_based of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type is_team_based: bool
        """

        self._is_team_based = is_team_based

    @property
    def mode_type(self):
        """Gets the mode_type of this DestinyDefinitionsDestinyActivityModeDefinition.

        The Enumeration value for this Activity Mode. Pass this identifier into Stats endpoints to get aggregate stats for this mode.

        :return: The mode_type of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: int
        """
        return self._mode_type

    @mode_type.setter
    def mode_type(self, mode_type):
        """Sets the mode_type of this DestinyDefinitionsDestinyActivityModeDefinition.

        The Enumeration value for this Activity Mode. Pass this identifier into Stats endpoints to get aggregate stats for this mode.

        :param mode_type: The mode_type of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type mode_type: int
        """

        self._mode_type = mode_type

    @property
    def order(self):
        """Gets the order of this DestinyDefinitionsDestinyActivityModeDefinition.

        The relative ordering of activity modes.

        :return: The order of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DestinyDefinitionsDestinyActivityModeDefinition.

        The relative ordering of activity modes.

        :param order: The order of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type order: int
        """

        self._order = order

    @property
    def parent_hashes(self):
        """Gets the parent_hashes of this DestinyDefinitionsDestinyActivityModeDefinition.

        The hash identifiers of the DestinyActivityModeDefinitions that represent all of the \"parent\" modes for this mode. For instance, the Nightfall Mode is also a member of AllStrikes and AllPvE.

        :return: The parent_hashes of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: List[int]
        """
        return self._parent_hashes

    @parent_hashes.setter
    def parent_hashes(self, parent_hashes):
        """Sets the parent_hashes of this DestinyDefinitionsDestinyActivityModeDefinition.

        The hash identifiers of the DestinyActivityModeDefinitions that represent all of the \"parent\" modes for this mode. For instance, the Nightfall Mode is also a member of AllStrikes and AllPvE.

        :param parent_hashes: The parent_hashes of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type parent_hashes: List[int]
        """

        self._parent_hashes = parent_hashes

    @property
    def pgcr_image(self):
        """Gets the pgcr_image of this DestinyDefinitionsDestinyActivityModeDefinition.

        If this activity mode has a related PGCR image, this will be the path to said image.

        :return: The pgcr_image of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: str
        """
        return self._pgcr_image

    @pgcr_image.setter
    def pgcr_image(self, pgcr_image):
        """Sets the pgcr_image of this DestinyDefinitionsDestinyActivityModeDefinition.

        If this activity mode has a related PGCR image, this will be the path to said image.

        :param pgcr_image: The pgcr_image of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type pgcr_image: str
        """

        self._pgcr_image = pgcr_image

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyActivityModeDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyActivityModeDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyActivityModeDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyActivityModeDefinition.
        :type redacted: bool
        """

        self._redacted = redacted
