# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinyDefinitionsDestinyMaterialRequirement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, count_is_constant: bool=None, delete_on_action: bool=None, item_hash: int=None, omit_from_requirements: bool=None):
        """DestinyDefinitionsDestinyMaterialRequirement - a model defined in OpenAPI

        :param count: The count of this DestinyDefinitionsDestinyMaterialRequirement.
        :param count_is_constant: The count_is_constant of this DestinyDefinitionsDestinyMaterialRequirement.
        :param delete_on_action: The delete_on_action of this DestinyDefinitionsDestinyMaterialRequirement.
        :param item_hash: The item_hash of this DestinyDefinitionsDestinyMaterialRequirement.
        :param omit_from_requirements: The omit_from_requirements of this DestinyDefinitionsDestinyMaterialRequirement.
        """
        self.openapi_types = {
            'count': int,
            'count_is_constant': bool,
            'delete_on_action': bool,
            'item_hash': int,
            'omit_from_requirements': bool
        }

        self.attribute_map = {
            'count': 'count',
            'count_is_constant': 'countIsConstant',
            'delete_on_action': 'deleteOnAction',
            'item_hash': 'itemHash',
            'omit_from_requirements': 'omitFromRequirements'
        }

        self._count = count
        self._count_is_constant = count_is_constant
        self._delete_on_action = delete_on_action
        self._item_hash = item_hash
        self._omit_from_requirements = omit_from_requirements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyMaterialRequirement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyMaterialRequirement of this DestinyDefinitionsDestinyMaterialRequirement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this DestinyDefinitionsDestinyMaterialRequirement.

        The amount of the material required.

        :return: The count of this DestinyDefinitionsDestinyMaterialRequirement.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DestinyDefinitionsDestinyMaterialRequirement.

        The amount of the material required.

        :param count: The count of this DestinyDefinitionsDestinyMaterialRequirement.
        :type count: int
        """

        self._count = count

    @property
    def count_is_constant(self):
        """Gets the count_is_constant of this DestinyDefinitionsDestinyMaterialRequirement.

        If true, the material requirement count value is constant. Since The Witch Queen expansion, some material requirement counts can be dynamic and will need to be returned with an API call.

        :return: The count_is_constant of this DestinyDefinitionsDestinyMaterialRequirement.
        :rtype: bool
        """
        return self._count_is_constant

    @count_is_constant.setter
    def count_is_constant(self, count_is_constant):
        """Sets the count_is_constant of this DestinyDefinitionsDestinyMaterialRequirement.

        If true, the material requirement count value is constant. Since The Witch Queen expansion, some material requirement counts can be dynamic and will need to be returned with an API call.

        :param count_is_constant: The count_is_constant of this DestinyDefinitionsDestinyMaterialRequirement.
        :type count_is_constant: bool
        """

        self._count_is_constant = count_is_constant

    @property
    def delete_on_action(self):
        """Gets the delete_on_action of this DestinyDefinitionsDestinyMaterialRequirement.

        If True, the material will be removed from the character's inventory when the action is performed.

        :return: The delete_on_action of this DestinyDefinitionsDestinyMaterialRequirement.
        :rtype: bool
        """
        return self._delete_on_action

    @delete_on_action.setter
    def delete_on_action(self, delete_on_action):
        """Sets the delete_on_action of this DestinyDefinitionsDestinyMaterialRequirement.

        If True, the material will be removed from the character's inventory when the action is performed.

        :param delete_on_action: The delete_on_action of this DestinyDefinitionsDestinyMaterialRequirement.
        :type delete_on_action: bool
        """

        self._delete_on_action = delete_on_action

    @property
    def item_hash(self):
        """Gets the item_hash of this DestinyDefinitionsDestinyMaterialRequirement.

        The hash identifier of the material required. Use it to look up the material's DestinyInventoryItemDefinition.

        :return: The item_hash of this DestinyDefinitionsDestinyMaterialRequirement.
        :rtype: int
        """
        return self._item_hash

    @item_hash.setter
    def item_hash(self, item_hash):
        """Sets the item_hash of this DestinyDefinitionsDestinyMaterialRequirement.

        The hash identifier of the material required. Use it to look up the material's DestinyInventoryItemDefinition.

        :param item_hash: The item_hash of this DestinyDefinitionsDestinyMaterialRequirement.
        :type item_hash: int
        """

        self._item_hash = item_hash

    @property
    def omit_from_requirements(self):
        """Gets the omit_from_requirements of this DestinyDefinitionsDestinyMaterialRequirement.

        If True, this requirement is \"silent\": don't bother showing it in a material requirements display. I mean, I'm not your mom: I'm not going to tell you you *can't* show it. But we won't show it in our UI.

        :return: The omit_from_requirements of this DestinyDefinitionsDestinyMaterialRequirement.
        :rtype: bool
        """
        return self._omit_from_requirements

    @omit_from_requirements.setter
    def omit_from_requirements(self, omit_from_requirements):
        """Sets the omit_from_requirements of this DestinyDefinitionsDestinyMaterialRequirement.

        If True, this requirement is \"silent\": don't bother showing it in a material requirements display. I mean, I'm not your mom: I'm not going to tell you you *can't* show it. But we won't show it in our UI.

        :param omit_from_requirements: The omit_from_requirements of this DestinyDefinitionsDestinyMaterialRequirement.
        :type omit_from_requirements: bool
        """

        self._omit_from_requirements = omit_from_requirements
