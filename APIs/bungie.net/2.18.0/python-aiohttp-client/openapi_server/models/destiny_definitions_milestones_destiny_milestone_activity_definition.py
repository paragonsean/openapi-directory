# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_milestones_destiny_milestone_activity_variant_definition import DestinyDefinitionsMilestonesDestinyMilestoneActivityVariantDefinition
from openapi_server import util


class DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conceptual_activity_hash: int=None, variants: Dict[str, DestinyDefinitionsMilestonesDestinyMilestoneActivityVariantDefinition]=None):
        """DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition - a model defined in OpenAPI

        :param conceptual_activity_hash: The conceptual_activity_hash of this DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.
        :param variants: The variants of this DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.
        """
        self.openapi_types = {
            'conceptual_activity_hash': int,
            'variants': Dict[str, DestinyDefinitionsMilestonesDestinyMilestoneActivityVariantDefinition]
        }

        self.attribute_map = {
            'conceptual_activity_hash': 'conceptualActivityHash',
            'variants': 'variants'
        }

        self._conceptual_activity_hash = conceptual_activity_hash
        self._variants = variants

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.Milestones.DestinyMilestoneActivityDefinition of this DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conceptual_activity_hash(self):
        """Gets the conceptual_activity_hash of this DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.

        The \"Conceptual\" activity hash. Basically, we picked the lowest level activity and are treating it as the canonical definition of the activity for rendering purposes.  If you care about the specific difficulty modes and variations, use the activities under \"Variants\".

        :return: The conceptual_activity_hash of this DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.
        :rtype: int
        """
        return self._conceptual_activity_hash

    @conceptual_activity_hash.setter
    def conceptual_activity_hash(self, conceptual_activity_hash):
        """Sets the conceptual_activity_hash of this DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.

        The \"Conceptual\" activity hash. Basically, we picked the lowest level activity and are treating it as the canonical definition of the activity for rendering purposes.  If you care about the specific difficulty modes and variations, use the activities under \"Variants\".

        :param conceptual_activity_hash: The conceptual_activity_hash of this DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.
        :type conceptual_activity_hash: int
        """

        self._conceptual_activity_hash = conceptual_activity_hash

    @property
    def variants(self):
        """Gets the variants of this DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.

        A milestone-referenced activity can have many variants, such as Tiers or alternative modes of play.  Even if there is only a single variant, the details for these are represented within as a variant definition.  It is assumed that, if this DestinyMilestoneActivityDefinition is active, then all variants should be active.  If a Milestone could ever split the variants' active status conditionally, they should all have their own DestinyMilestoneActivityDefinition instead! The potential duplication will be worth it for the obviousness of processing and use.

        :return: The variants of this DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.
        :rtype: Dict[str, DestinyDefinitionsMilestonesDestinyMilestoneActivityVariantDefinition]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.

        A milestone-referenced activity can have many variants, such as Tiers or alternative modes of play.  Even if there is only a single variant, the details for these are represented within as a variant definition.  It is assumed that, if this DestinyMilestoneActivityDefinition is active, then all variants should be active.  If a Milestone could ever split the variants' active status conditionally, they should all have their own DestinyMilestoneActivityDefinition instead! The potential duplication will be worth it for the obviousness of processing and use.

        :param variants: The variants of this DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition.
        :type variants: Dict[str, DestinyDefinitionsMilestonesDestinyMilestoneActivityVariantDefinition]
        """

        self._variants = variants
