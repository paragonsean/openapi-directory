# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server import util


class DestinyDefinitionsDestinyItemCategoryDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecated: bool=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, grant_destiny_breaker_type: int=None, grant_destiny_class: int=None, grant_destiny_item_type: int=None, grant_destiny_sub_type: int=None, group_category_only: bool=None, grouped_category_hashes: List[int]=None, hash: int=None, index: int=None, item_type_regex: str=None, item_type_regex_not: str=None, origin_bucket_identifier: str=None, parent_category_hashes: List[int]=None, plug_category_identifier: str=None, redacted: bool=None, short_title: str=None, trait_id: str=None, visible: bool=None):
        """DestinyDefinitionsDestinyItemCategoryDefinition - a model defined in OpenAPI

        :param deprecated: The deprecated of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param grant_destiny_breaker_type: The grant_destiny_breaker_type of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param grant_destiny_class: The grant_destiny_class of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param grant_destiny_item_type: The grant_destiny_item_type of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param grant_destiny_sub_type: The grant_destiny_sub_type of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param group_category_only: The group_category_only of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param grouped_category_hashes: The grouped_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param hash: The hash of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param index: The index of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param item_type_regex: The item_type_regex of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param item_type_regex_not: The item_type_regex_not of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param origin_bucket_identifier: The origin_bucket_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param parent_category_hashes: The parent_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param plug_category_identifier: The plug_category_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param short_title: The short_title of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param trait_id: The trait_id of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :param visible: The visible of this DestinyDefinitionsDestinyItemCategoryDefinition.
        """
        self.openapi_types = {
            'deprecated': bool,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'grant_destiny_breaker_type': int,
            'grant_destiny_class': int,
            'grant_destiny_item_type': int,
            'grant_destiny_sub_type': int,
            'group_category_only': bool,
            'grouped_category_hashes': List[int],
            'hash': int,
            'index': int,
            'item_type_regex': str,
            'item_type_regex_not': str,
            'origin_bucket_identifier': str,
            'parent_category_hashes': List[int],
            'plug_category_identifier': str,
            'redacted': bool,
            'short_title': str,
            'trait_id': str,
            'visible': bool
        }

        self.attribute_map = {
            'deprecated': 'deprecated',
            'display_properties': 'displayProperties',
            'grant_destiny_breaker_type': 'grantDestinyBreakerType',
            'grant_destiny_class': 'grantDestinyClass',
            'grant_destiny_item_type': 'grantDestinyItemType',
            'grant_destiny_sub_type': 'grantDestinySubType',
            'group_category_only': 'groupCategoryOnly',
            'grouped_category_hashes': 'groupedCategoryHashes',
            'hash': 'hash',
            'index': 'index',
            'item_type_regex': 'itemTypeRegex',
            'item_type_regex_not': 'itemTypeRegexNot',
            'origin_bucket_identifier': 'originBucketIdentifier',
            'parent_category_hashes': 'parentCategoryHashes',
            'plug_category_identifier': 'plugCategoryIdentifier',
            'redacted': 'redacted',
            'short_title': 'shortTitle',
            'trait_id': 'traitId',
            'visible': 'visible'
        }

        self._deprecated = deprecated
        self._display_properties = display_properties
        self._grant_destiny_breaker_type = grant_destiny_breaker_type
        self._grant_destiny_class = grant_destiny_class
        self._grant_destiny_item_type = grant_destiny_item_type
        self._grant_destiny_sub_type = grant_destiny_sub_type
        self._group_category_only = group_category_only
        self._grouped_category_hashes = grouped_category_hashes
        self._hash = hash
        self._index = index
        self._item_type_regex = item_type_regex
        self._item_type_regex_not = item_type_regex_not
        self._origin_bucket_identifier = origin_bucket_identifier
        self._parent_category_hashes = parent_category_hashes
        self._plug_category_identifier = plug_category_identifier
        self._redacted = redacted
        self._short_title = short_title
        self._trait_id = trait_id
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyItemCategoryDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyItemCategoryDefinition of this DestinyDefinitionsDestinyItemCategoryDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecated(self):
        """Gets the deprecated of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If True, this category has been deprecated: it may have no items left, or there may be only legacy items that remain in it which are no longer relevant to the game.

        :return: The deprecated of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If True, this category has been deprecated: it may have no items left, or there may be only legacy items that remain in it which are no longer relevant to the game.

        :param deprecated: The deprecated of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type deprecated: bool
        """

        self._deprecated = deprecated

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyItemCategoryDefinition.


        :return: The display_properties of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyItemCategoryDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def grant_destiny_breaker_type(self):
        """Gets the grant_destiny_breaker_type of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If the item in question has this category, it also should have this breaker type.

        :return: The grant_destiny_breaker_type of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: int
        """
        return self._grant_destiny_breaker_type

    @grant_destiny_breaker_type.setter
    def grant_destiny_breaker_type(self, grant_destiny_breaker_type):
        """Sets the grant_destiny_breaker_type of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If the item in question has this category, it also should have this breaker type.

        :param grant_destiny_breaker_type: The grant_destiny_breaker_type of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type grant_destiny_breaker_type: int
        """

        self._grant_destiny_breaker_type = grant_destiny_breaker_type

    @property
    def grant_destiny_class(self):
        """Gets the grant_destiny_class of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If an item belongs to this category, it will also get this class restriction enum value.  See the other \"grant\"-prefixed properties on this definition for my color commentary.

        :return: The grant_destiny_class of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: int
        """
        return self._grant_destiny_class

    @grant_destiny_class.setter
    def grant_destiny_class(self, grant_destiny_class):
        """Sets the grant_destiny_class of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If an item belongs to this category, it will also get this class restriction enum value.  See the other \"grant\"-prefixed properties on this definition for my color commentary.

        :param grant_destiny_class: The grant_destiny_class of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type grant_destiny_class: int
        """

        self._grant_destiny_class = grant_destiny_class

    @property
    def grant_destiny_item_type(self):
        """Gets the grant_destiny_item_type of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If an item belongs to this category, it will also receive this item type. This is now how DestinyItemType is populated for items: it used to be an even jankier process, but that's a story that requires more alcohol.

        :return: The grant_destiny_item_type of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: int
        """
        return self._grant_destiny_item_type

    @grant_destiny_item_type.setter
    def grant_destiny_item_type(self, grant_destiny_item_type):
        """Sets the grant_destiny_item_type of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If an item belongs to this category, it will also receive this item type. This is now how DestinyItemType is populated for items: it used to be an even jankier process, but that's a story that requires more alcohol.

        :param grant_destiny_item_type: The grant_destiny_item_type of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type grant_destiny_item_type: int
        """

        self._grant_destiny_item_type = grant_destiny_item_type

    @property
    def grant_destiny_sub_type(self):
        """Gets the grant_destiny_sub_type of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If an item belongs to this category, it will also receive this subtype enum value.  I know what you're thinking - what if it belongs to multiple categories that provide sub-types?  The last one processed wins, as is the case with all of these \"grant\" enums. Now you can see one reason why we moved away from these enums... but they're so convenient when they work, aren't they?

        :return: The grant_destiny_sub_type of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: int
        """
        return self._grant_destiny_sub_type

    @grant_destiny_sub_type.setter
    def grant_destiny_sub_type(self, grant_destiny_sub_type):
        """Sets the grant_destiny_sub_type of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If an item belongs to this category, it will also receive this subtype enum value.  I know what you're thinking - what if it belongs to multiple categories that provide sub-types?  The last one processed wins, as is the case with all of these \"grant\" enums. Now you can see one reason why we moved away from these enums... but they're so convenient when they work, aren't they?

        :param grant_destiny_sub_type: The grant_destiny_sub_type of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type grant_destiny_sub_type: int
        """

        self._grant_destiny_sub_type = grant_destiny_sub_type

    @property
    def group_category_only(self):
        """Gets the group_category_only of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If true, this category is only used for grouping, and should not be evaluated with its own checks. Rather, the item only has this category if it has one of its child categories.

        :return: The group_category_only of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: bool
        """
        return self._group_category_only

    @group_category_only.setter
    def group_category_only(self, group_category_only):
        """Sets the group_category_only of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If true, this category is only used for grouping, and should not be evaluated with its own checks. Rather, the item only has this category if it has one of its child categories.

        :param group_category_only: The group_category_only of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type group_category_only: bool
        """

        self._group_category_only = group_category_only

    @property
    def grouped_category_hashes(self):
        """Gets the grouped_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If this category is a \"parent\" category of other categories, those children will have their hashes listed in rendering order here, and can be looked up using these hashes against DestinyItemCategoryDefinition.  In this way, you can build up a visual hierarchy of item categories. That's what we did, and you can do it too. I believe in you. Yes, you, Carl.  (I hope someone named Carl reads this someday)

        :return: The grouped_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: List[int]
        """
        return self._grouped_category_hashes

    @grouped_category_hashes.setter
    def grouped_category_hashes(self, grouped_category_hashes):
        """Sets the grouped_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If this category is a \"parent\" category of other categories, those children will have their hashes listed in rendering order here, and can be looked up using these hashes against DestinyItemCategoryDefinition.  In this way, you can build up a visual hierarchy of item categories. That's what we did, and you can do it too. I believe in you. Yes, you, Carl.  (I hope someone named Carl reads this someday)

        :param grouped_category_hashes: The grouped_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type grouped_category_hashes: List[int]
        """

        self._grouped_category_hashes = grouped_category_hashes

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyItemCategoryDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyItemCategoryDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyItemCategoryDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyItemCategoryDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type index: int
        """

        self._index = index

    @property
    def item_type_regex(self):
        """Gets the item_type_regex of this DestinyDefinitionsDestinyItemCategoryDefinition.

        The janky regular expression we used against the item type to try and discern whether the item belongs to this category.

        :return: The item_type_regex of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: str
        """
        return self._item_type_regex

    @item_type_regex.setter
    def item_type_regex(self, item_type_regex):
        """Sets the item_type_regex of this DestinyDefinitionsDestinyItemCategoryDefinition.

        The janky regular expression we used against the item type to try and discern whether the item belongs to this category.

        :param item_type_regex: The item_type_regex of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type item_type_regex: str
        """

        self._item_type_regex = item_type_regex

    @property
    def item_type_regex_not(self):
        """Gets the item_type_regex_not of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If the item type matches this janky regex, it does *not* belong to this category.

        :return: The item_type_regex_not of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: str
        """
        return self._item_type_regex_not

    @item_type_regex_not.setter
    def item_type_regex_not(self, item_type_regex_not):
        """Sets the item_type_regex_not of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If the item type matches this janky regex, it does *not* belong to this category.

        :param item_type_regex_not: The item_type_regex_not of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type item_type_regex_not: str
        """

        self._item_type_regex_not = item_type_regex_not

    @property
    def origin_bucket_identifier(self):
        """Gets the origin_bucket_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If the item belongs to this bucket, it does belong to this category.

        :return: The origin_bucket_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: str
        """
        return self._origin_bucket_identifier

    @origin_bucket_identifier.setter
    def origin_bucket_identifier(self, origin_bucket_identifier):
        """Sets the origin_bucket_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If the item belongs to this bucket, it does belong to this category.

        :param origin_bucket_identifier: The origin_bucket_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type origin_bucket_identifier: str
        """

        self._origin_bucket_identifier = origin_bucket_identifier

    @property
    def parent_category_hashes(self):
        """Gets the parent_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.

        All item category hashes of \"parent\" categories: categories that contain this as a child through the hierarchy of groupedCategoryHashes. It's a bit redundant, but having this child-centric list speeds up some calculations.

        :return: The parent_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: List[int]
        """
        return self._parent_category_hashes

    @parent_category_hashes.setter
    def parent_category_hashes(self, parent_category_hashes):
        """Sets the parent_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.

        All item category hashes of \"parent\" categories: categories that contain this as a child through the hierarchy of groupedCategoryHashes. It's a bit redundant, but having this child-centric list speeds up some calculations.

        :param parent_category_hashes: The parent_category_hashes of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type parent_category_hashes: List[int]
        """

        self._parent_category_hashes = parent_category_hashes

    @property
    def plug_category_identifier(self):
        """Gets the plug_category_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If the item is a plug, this is the identifier we expect to find associated with it if it is in this category.

        :return: The plug_category_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: str
        """
        return self._plug_category_identifier

    @plug_category_identifier.setter
    def plug_category_identifier(self, plug_category_identifier):
        """Sets the plug_category_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If the item is a plug, this is the identifier we expect to find associated with it if it is in this category.

        :param plug_category_identifier: The plug_category_identifier of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type plug_category_identifier: str
        """

        self._plug_category_identifier = plug_category_identifier

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type redacted: bool
        """

        self._redacted = redacted

    @property
    def short_title(self):
        """Gets the short_title of this DestinyDefinitionsDestinyItemCategoryDefinition.

        A shortened version of the title. The reason why we have this is because the Armory in German had titles that were too long to display in our UI, so these were localized abbreviated versions of those categories. The property still exists today, even though the Armory doesn't exist for D2... yet.

        :return: The short_title of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title):
        """Sets the short_title of this DestinyDefinitionsDestinyItemCategoryDefinition.

        A shortened version of the title. The reason why we have this is because the Armory in German had titles that were too long to display in our UI, so these were localized abbreviated versions of those categories. The property still exists today, even though the Armory doesn't exist for D2... yet.

        :param short_title: The short_title of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type short_title: str
        """

        self._short_title = short_title

    @property
    def trait_id(self):
        """Gets the trait_id of this DestinyDefinitionsDestinyItemCategoryDefinition.

        The traitId that can be found on items that belong to this category.

        :return: The trait_id of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: str
        """
        return self._trait_id

    @trait_id.setter
    def trait_id(self, trait_id):
        """Sets the trait_id of this DestinyDefinitionsDestinyItemCategoryDefinition.

        The traitId that can be found on items that belong to this category.

        :param trait_id: The trait_id of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type trait_id: str
        """

        self._trait_id = trait_id

    @property
    def visible(self):
        """Gets the visible of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If True, this category should be visible in UI. Sometimes we make categories that we don't think are interesting externally. It's up to you if you want to skip on showing them.

        :return: The visible of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this DestinyDefinitionsDestinyItemCategoryDefinition.

        If True, this category should be visible in UI. Sometimes we make categories that we don't think are interesting externally. It's up to you if you want to skip on showing them.

        :param visible: The visible of this DestinyDefinitionsDestinyItemCategoryDefinition.
        :type visible: bool
        """

        self._visible = visible
