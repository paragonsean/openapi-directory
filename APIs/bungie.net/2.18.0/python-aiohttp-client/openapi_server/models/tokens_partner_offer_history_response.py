# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokensPartnerOfferHistoryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_date: datetime=None, is_consumable: bool=None, localized_description: str=None, localized_name: str=None, membership_id: int=None, membership_type: int=None, partner_offer_key: str=None, quantity_applied: int=None):
        """TokensPartnerOfferHistoryResponse - a model defined in OpenAPI

        :param apply_date: The apply_date of this TokensPartnerOfferHistoryResponse.
        :param is_consumable: The is_consumable of this TokensPartnerOfferHistoryResponse.
        :param localized_description: The localized_description of this TokensPartnerOfferHistoryResponse.
        :param localized_name: The localized_name of this TokensPartnerOfferHistoryResponse.
        :param membership_id: The membership_id of this TokensPartnerOfferHistoryResponse.
        :param membership_type: The membership_type of this TokensPartnerOfferHistoryResponse.
        :param partner_offer_key: The partner_offer_key of this TokensPartnerOfferHistoryResponse.
        :param quantity_applied: The quantity_applied of this TokensPartnerOfferHistoryResponse.
        """
        self.openapi_types = {
            'apply_date': datetime,
            'is_consumable': bool,
            'localized_description': str,
            'localized_name': str,
            'membership_id': int,
            'membership_type': int,
            'partner_offer_key': str,
            'quantity_applied': int
        }

        self.attribute_map = {
            'apply_date': 'ApplyDate',
            'is_consumable': 'IsConsumable',
            'localized_description': 'LocalizedDescription',
            'localized_name': 'LocalizedName',
            'membership_id': 'MembershipId',
            'membership_type': 'MembershipType',
            'partner_offer_key': 'PartnerOfferKey',
            'quantity_applied': 'QuantityApplied'
        }

        self._apply_date = apply_date
        self._is_consumable = is_consumable
        self._localized_description = localized_description
        self._localized_name = localized_name
        self._membership_id = membership_id
        self._membership_type = membership_type
        self._partner_offer_key = partner_offer_key
        self._quantity_applied = quantity_applied

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokensPartnerOfferHistoryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tokens.PartnerOfferHistoryResponse of this TokensPartnerOfferHistoryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_date(self):
        """Gets the apply_date of this TokensPartnerOfferHistoryResponse.


        :return: The apply_date of this TokensPartnerOfferHistoryResponse.
        :rtype: datetime
        """
        return self._apply_date

    @apply_date.setter
    def apply_date(self, apply_date):
        """Sets the apply_date of this TokensPartnerOfferHistoryResponse.


        :param apply_date: The apply_date of this TokensPartnerOfferHistoryResponse.
        :type apply_date: datetime
        """

        self._apply_date = apply_date

    @property
    def is_consumable(self):
        """Gets the is_consumable of this TokensPartnerOfferHistoryResponse.


        :return: The is_consumable of this TokensPartnerOfferHistoryResponse.
        :rtype: bool
        """
        return self._is_consumable

    @is_consumable.setter
    def is_consumable(self, is_consumable):
        """Sets the is_consumable of this TokensPartnerOfferHistoryResponse.


        :param is_consumable: The is_consumable of this TokensPartnerOfferHistoryResponse.
        :type is_consumable: bool
        """

        self._is_consumable = is_consumable

    @property
    def localized_description(self):
        """Gets the localized_description of this TokensPartnerOfferHistoryResponse.


        :return: The localized_description of this TokensPartnerOfferHistoryResponse.
        :rtype: str
        """
        return self._localized_description

    @localized_description.setter
    def localized_description(self, localized_description):
        """Sets the localized_description of this TokensPartnerOfferHistoryResponse.


        :param localized_description: The localized_description of this TokensPartnerOfferHistoryResponse.
        :type localized_description: str
        """

        self._localized_description = localized_description

    @property
    def localized_name(self):
        """Gets the localized_name of this TokensPartnerOfferHistoryResponse.


        :return: The localized_name of this TokensPartnerOfferHistoryResponse.
        :rtype: str
        """
        return self._localized_name

    @localized_name.setter
    def localized_name(self, localized_name):
        """Sets the localized_name of this TokensPartnerOfferHistoryResponse.


        :param localized_name: The localized_name of this TokensPartnerOfferHistoryResponse.
        :type localized_name: str
        """

        self._localized_name = localized_name

    @property
    def membership_id(self):
        """Gets the membership_id of this TokensPartnerOfferHistoryResponse.


        :return: The membership_id of this TokensPartnerOfferHistoryResponse.
        :rtype: int
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this TokensPartnerOfferHistoryResponse.


        :param membership_id: The membership_id of this TokensPartnerOfferHistoryResponse.
        :type membership_id: int
        """

        self._membership_id = membership_id

    @property
    def membership_type(self):
        """Gets the membership_type of this TokensPartnerOfferHistoryResponse.


        :return: The membership_type of this TokensPartnerOfferHistoryResponse.
        :rtype: int
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type):
        """Sets the membership_type of this TokensPartnerOfferHistoryResponse.


        :param membership_type: The membership_type of this TokensPartnerOfferHistoryResponse.
        :type membership_type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 10, 254, -1]  # noqa: E501
        if membership_type not in allowed_values:
            raise ValueError(
                "Invalid value for `membership_type` ({0}), must be one of {1}"
                .format(membership_type, allowed_values)
            )

        self._membership_type = membership_type

    @property
    def partner_offer_key(self):
        """Gets the partner_offer_key of this TokensPartnerOfferHistoryResponse.


        :return: The partner_offer_key of this TokensPartnerOfferHistoryResponse.
        :rtype: str
        """
        return self._partner_offer_key

    @partner_offer_key.setter
    def partner_offer_key(self, partner_offer_key):
        """Sets the partner_offer_key of this TokensPartnerOfferHistoryResponse.


        :param partner_offer_key: The partner_offer_key of this TokensPartnerOfferHistoryResponse.
        :type partner_offer_key: str
        """

        self._partner_offer_key = partner_offer_key

    @property
    def quantity_applied(self):
        """Gets the quantity_applied of this TokensPartnerOfferHistoryResponse.


        :return: The quantity_applied of this TokensPartnerOfferHistoryResponse.
        :rtype: int
        """
        return self._quantity_applied

    @quantity_applied.setter
    def quantity_applied(self, quantity_applied):
        """Sets the quantity_applied of this TokensPartnerOfferHistoryResponse.


        :param quantity_applied: The quantity_applied of this TokensPartnerOfferHistoryResponse.
        :type quantity_applied: int
        """

        self._quantity_applied = quantity_applied
