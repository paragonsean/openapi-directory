# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dates_date_range import DatesDateRange
from openapi_server.models.destiny_definitions_destiny_display_category_definition import DestinyDefinitionsDestinyDisplayCategoryDefinition
from openapi_server.models.destiny_definitions_destiny_vendor_accepted_item_definition import DestinyDefinitionsDestinyVendorAcceptedItemDefinition
from openapi_server.models.destiny_definitions_destiny_vendor_action_definition import DestinyDefinitionsDestinyVendorActionDefinition
from openapi_server.models.destiny_definitions_destiny_vendor_category_entry_definition import DestinyDefinitionsDestinyVendorCategoryEntryDefinition
from openapi_server.models.destiny_definitions_destiny_vendor_display_properties_definition import DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition
from openapi_server.models.destiny_definitions_destiny_vendor_group_reference import DestinyDefinitionsDestinyVendorGroupReference
from openapi_server.models.destiny_definitions_destiny_vendor_interaction_definition import DestinyDefinitionsDestinyVendorInteractionDefinition
from openapi_server.models.destiny_definitions_destiny_vendor_inventory_flyout_definition import DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition
from openapi_server.models.destiny_definitions_destiny_vendor_item_definition import DestinyDefinitionsDestinyVendorItemDefinition
from openapi_server.models.destiny_definitions_destiny_vendor_service_definition import DestinyDefinitionsDestinyVendorServiceDefinition
from openapi_server.models.destiny_definitions_vendors_destiny_vendor_location_definition import DestinyDefinitionsVendorsDestinyVendorLocationDefinition
from openapi_server import util


class DestinyDefinitionsDestinyVendorDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_items: List[DestinyDefinitionsDestinyVendorAcceptedItemDefinition]=None, actions: List[DestinyDefinitionsDestinyVendorActionDefinition]=None, buy_string: str=None, categories: List[DestinyDefinitionsDestinyVendorCategoryEntryDefinition]=None, consolidate_categories: bool=None, display_categories: List[DestinyDefinitionsDestinyDisplayCategoryDefinition]=None, display_item_hash: int=None, display_properties: DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition=None, enabled: bool=None, faction_hash: int=None, failure_strings: List[str]=None, groups: List[DestinyDefinitionsDestinyVendorGroupReference]=None, hash: int=None, ignore_sale_item_hashes: List[int]=None, index: int=None, inhibit_buying: bool=None, inhibit_selling: bool=None, interactions: List[DestinyDefinitionsDestinyVendorInteractionDefinition]=None, inventory_flyouts: List[DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition]=None, item_list: List[DestinyDefinitionsDestinyVendorItemDefinition]=None, locations: List[DestinyDefinitionsVendorsDestinyVendorLocationDefinition]=None, original_categories: List[DestinyDefinitionsDestinyVendorCategoryEntryDefinition]=None, redacted: bool=None, reset_interval_minutes: int=None, reset_offset_minutes: int=None, return_with_vendor_request: bool=None, sell_string: str=None, services: List[DestinyDefinitionsDestinyVendorServiceDefinition]=None, unlock_ranges: List[DatesDateRange]=None, vendor_banner: str=None, vendor_identifier: str=None, vendor_portrait: str=None, vendor_progression_type: int=None, vendor_subcategory_identifier: str=None, visible: bool=None):
        """DestinyDefinitionsDestinyVendorDefinition - a model defined in OpenAPI

        :param accepted_items: The accepted_items of this DestinyDefinitionsDestinyVendorDefinition.
        :param actions: The actions of this DestinyDefinitionsDestinyVendorDefinition.
        :param buy_string: The buy_string of this DestinyDefinitionsDestinyVendorDefinition.
        :param categories: The categories of this DestinyDefinitionsDestinyVendorDefinition.
        :param consolidate_categories: The consolidate_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :param display_categories: The display_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :param display_item_hash: The display_item_hash of this DestinyDefinitionsDestinyVendorDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsDestinyVendorDefinition.
        :param enabled: The enabled of this DestinyDefinitionsDestinyVendorDefinition.
        :param faction_hash: The faction_hash of this DestinyDefinitionsDestinyVendorDefinition.
        :param failure_strings: The failure_strings of this DestinyDefinitionsDestinyVendorDefinition.
        :param groups: The groups of this DestinyDefinitionsDestinyVendorDefinition.
        :param hash: The hash of this DestinyDefinitionsDestinyVendorDefinition.
        :param ignore_sale_item_hashes: The ignore_sale_item_hashes of this DestinyDefinitionsDestinyVendorDefinition.
        :param index: The index of this DestinyDefinitionsDestinyVendorDefinition.
        :param inhibit_buying: The inhibit_buying of this DestinyDefinitionsDestinyVendorDefinition.
        :param inhibit_selling: The inhibit_selling of this DestinyDefinitionsDestinyVendorDefinition.
        :param interactions: The interactions of this DestinyDefinitionsDestinyVendorDefinition.
        :param inventory_flyouts: The inventory_flyouts of this DestinyDefinitionsDestinyVendorDefinition.
        :param item_list: The item_list of this DestinyDefinitionsDestinyVendorDefinition.
        :param locations: The locations of this DestinyDefinitionsDestinyVendorDefinition.
        :param original_categories: The original_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyVendorDefinition.
        :param reset_interval_minutes: The reset_interval_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        :param reset_offset_minutes: The reset_offset_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        :param return_with_vendor_request: The return_with_vendor_request of this DestinyDefinitionsDestinyVendorDefinition.
        :param sell_string: The sell_string of this DestinyDefinitionsDestinyVendorDefinition.
        :param services: The services of this DestinyDefinitionsDestinyVendorDefinition.
        :param unlock_ranges: The unlock_ranges of this DestinyDefinitionsDestinyVendorDefinition.
        :param vendor_banner: The vendor_banner of this DestinyDefinitionsDestinyVendorDefinition.
        :param vendor_identifier: The vendor_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        :param vendor_portrait: The vendor_portrait of this DestinyDefinitionsDestinyVendorDefinition.
        :param vendor_progression_type: The vendor_progression_type of this DestinyDefinitionsDestinyVendorDefinition.
        :param vendor_subcategory_identifier: The vendor_subcategory_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        :param visible: The visible of this DestinyDefinitionsDestinyVendorDefinition.
        """
        self.openapi_types = {
            'accepted_items': List[DestinyDefinitionsDestinyVendorAcceptedItemDefinition],
            'actions': List[DestinyDefinitionsDestinyVendorActionDefinition],
            'buy_string': str,
            'categories': List[DestinyDefinitionsDestinyVendorCategoryEntryDefinition],
            'consolidate_categories': bool,
            'display_categories': List[DestinyDefinitionsDestinyDisplayCategoryDefinition],
            'display_item_hash': int,
            'display_properties': DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition,
            'enabled': bool,
            'faction_hash': int,
            'failure_strings': List[str],
            'groups': List[DestinyDefinitionsDestinyVendorGroupReference],
            'hash': int,
            'ignore_sale_item_hashes': List[int],
            'index': int,
            'inhibit_buying': bool,
            'inhibit_selling': bool,
            'interactions': List[DestinyDefinitionsDestinyVendorInteractionDefinition],
            'inventory_flyouts': List[DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition],
            'item_list': List[DestinyDefinitionsDestinyVendorItemDefinition],
            'locations': List[DestinyDefinitionsVendorsDestinyVendorLocationDefinition],
            'original_categories': List[DestinyDefinitionsDestinyVendorCategoryEntryDefinition],
            'redacted': bool,
            'reset_interval_minutes': int,
            'reset_offset_minutes': int,
            'return_with_vendor_request': bool,
            'sell_string': str,
            'services': List[DestinyDefinitionsDestinyVendorServiceDefinition],
            'unlock_ranges': List[DatesDateRange],
            'vendor_banner': str,
            'vendor_identifier': str,
            'vendor_portrait': str,
            'vendor_progression_type': int,
            'vendor_subcategory_identifier': str,
            'visible': bool
        }

        self.attribute_map = {
            'accepted_items': 'acceptedItems',
            'actions': 'actions',
            'buy_string': 'buyString',
            'categories': 'categories',
            'consolidate_categories': 'consolidateCategories',
            'display_categories': 'displayCategories',
            'display_item_hash': 'displayItemHash',
            'display_properties': 'displayProperties',
            'enabled': 'enabled',
            'faction_hash': 'factionHash',
            'failure_strings': 'failureStrings',
            'groups': 'groups',
            'hash': 'hash',
            'ignore_sale_item_hashes': 'ignoreSaleItemHashes',
            'index': 'index',
            'inhibit_buying': 'inhibitBuying',
            'inhibit_selling': 'inhibitSelling',
            'interactions': 'interactions',
            'inventory_flyouts': 'inventoryFlyouts',
            'item_list': 'itemList',
            'locations': 'locations',
            'original_categories': 'originalCategories',
            'redacted': 'redacted',
            'reset_interval_minutes': 'resetIntervalMinutes',
            'reset_offset_minutes': 'resetOffsetMinutes',
            'return_with_vendor_request': 'returnWithVendorRequest',
            'sell_string': 'sellString',
            'services': 'services',
            'unlock_ranges': 'unlockRanges',
            'vendor_banner': 'vendorBanner',
            'vendor_identifier': 'vendorIdentifier',
            'vendor_portrait': 'vendorPortrait',
            'vendor_progression_type': 'vendorProgressionType',
            'vendor_subcategory_identifier': 'vendorSubcategoryIdentifier',
            'visible': 'visible'
        }

        self._accepted_items = accepted_items
        self._actions = actions
        self._buy_string = buy_string
        self._categories = categories
        self._consolidate_categories = consolidate_categories
        self._display_categories = display_categories
        self._display_item_hash = display_item_hash
        self._display_properties = display_properties
        self._enabled = enabled
        self._faction_hash = faction_hash
        self._failure_strings = failure_strings
        self._groups = groups
        self._hash = hash
        self._ignore_sale_item_hashes = ignore_sale_item_hashes
        self._index = index
        self._inhibit_buying = inhibit_buying
        self._inhibit_selling = inhibit_selling
        self._interactions = interactions
        self._inventory_flyouts = inventory_flyouts
        self._item_list = item_list
        self._locations = locations
        self._original_categories = original_categories
        self._redacted = redacted
        self._reset_interval_minutes = reset_interval_minutes
        self._reset_offset_minutes = reset_offset_minutes
        self._return_with_vendor_request = return_with_vendor_request
        self._sell_string = sell_string
        self._services = services
        self._unlock_ranges = unlock_ranges
        self._vendor_banner = vendor_banner
        self._vendor_identifier = vendor_identifier
        self._vendor_portrait = vendor_portrait
        self._vendor_progression_type = vendor_progression_type
        self._vendor_subcategory_identifier = vendor_subcategory_identifier
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyVendorDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyVendorDefinition of this DestinyDefinitionsDestinyVendorDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_items(self):
        """Gets the accepted_items of this DestinyDefinitionsDestinyVendorDefinition.

        If the Vendor is actually a vehicle for the transferring of items (like the Vault and Postmaster vendors), this defines the list of source->destination buckets for transferring.

        :return: The accepted_items of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[DestinyDefinitionsDestinyVendorAcceptedItemDefinition]
        """
        return self._accepted_items

    @accepted_items.setter
    def accepted_items(self, accepted_items):
        """Sets the accepted_items of this DestinyDefinitionsDestinyVendorDefinition.

        If the Vendor is actually a vehicle for the transferring of items (like the Vault and Postmaster vendors), this defines the list of source->destination buckets for transferring.

        :param accepted_items: The accepted_items of this DestinyDefinitionsDestinyVendorDefinition.
        :type accepted_items: List[DestinyDefinitionsDestinyVendorAcceptedItemDefinition]
        """

        self._accepted_items = accepted_items

    @property
    def actions(self):
        """Gets the actions of this DestinyDefinitionsDestinyVendorDefinition.

        Describes \"actions\" that can be performed on a vendor. Currently, none of these exist. But theoretically a Vendor could let you interact with it by performing actions. We'll see what these end up looking like if they ever get used.

        :return: The actions of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[DestinyDefinitionsDestinyVendorActionDefinition]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this DestinyDefinitionsDestinyVendorDefinition.

        Describes \"actions\" that can be performed on a vendor. Currently, none of these exist. But theoretically a Vendor could let you interact with it by performing actions. We'll see what these end up looking like if they ever get used.

        :param actions: The actions of this DestinyDefinitionsDestinyVendorDefinition.
        :type actions: List[DestinyDefinitionsDestinyVendorActionDefinition]
        """

        self._actions = actions

    @property
    def buy_string(self):
        """Gets the buy_string of this DestinyDefinitionsDestinyVendorDefinition.

        If the vendor has a custom localized string describing the \"buy\" action, that is returned here.

        :return: The buy_string of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._buy_string

    @buy_string.setter
    def buy_string(self, buy_string):
        """Sets the buy_string of this DestinyDefinitionsDestinyVendorDefinition.

        If the vendor has a custom localized string describing the \"buy\" action, that is returned here.

        :param buy_string: The buy_string of this DestinyDefinitionsDestinyVendorDefinition.
        :type buy_string: str
        """

        self._buy_string = buy_string

    @property
    def categories(self):
        """Gets the categories of this DestinyDefinitionsDestinyVendorDefinition.

        These are the headers for sections of items that the vendor is selling. When you see items organized by category in the header, it is these categories that it is showing.  Well, technically not *exactly* these. On BNet, it doesn't make sense to have categories be \"paged\" as we do in Destiny, so we run some heuristics to attempt to aggregate pages of categories together.   These are the categories post-concatenation, if the vendor had concatenation applied. If you want the pre-aggregated category data, use originalCategories.

        :return: The categories of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[DestinyDefinitionsDestinyVendorCategoryEntryDefinition]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this DestinyDefinitionsDestinyVendorDefinition.

        These are the headers for sections of items that the vendor is selling. When you see items organized by category in the header, it is these categories that it is showing.  Well, technically not *exactly* these. On BNet, it doesn't make sense to have categories be \"paged\" as we do in Destiny, so we run some heuristics to attempt to aggregate pages of categories together.   These are the categories post-concatenation, if the vendor had concatenation applied. If you want the pre-aggregated category data, use originalCategories.

        :param categories: The categories of this DestinyDefinitionsDestinyVendorDefinition.
        :type categories: List[DestinyDefinitionsDestinyVendorCategoryEntryDefinition]
        """

        self._categories = categories

    @property
    def consolidate_categories(self):
        """Gets the consolidate_categories of this DestinyDefinitionsDestinyVendorDefinition.

        If TRUE, consolidate categories that only differ by trivial properties (such as having minor differences in name)

        :return: The consolidate_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._consolidate_categories

    @consolidate_categories.setter
    def consolidate_categories(self, consolidate_categories):
        """Sets the consolidate_categories of this DestinyDefinitionsDestinyVendorDefinition.

        If TRUE, consolidate categories that only differ by trivial properties (such as having minor differences in name)

        :param consolidate_categories: The consolidate_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :type consolidate_categories: bool
        """

        self._consolidate_categories = consolidate_categories

    @property
    def display_categories(self):
        """Gets the display_categories of this DestinyDefinitionsDestinyVendorDefinition.

        Display Categories are different from \"categories\" in that these are specifically for visual grouping and display of categories in Vendor UI.   The \"categories\" structure is for validation of the contained items, and can be categorized entirely separately from \"Display Categories\", there need be and often will be no meaningful relationship between the two.

        :return: The display_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[DestinyDefinitionsDestinyDisplayCategoryDefinition]
        """
        return self._display_categories

    @display_categories.setter
    def display_categories(self, display_categories):
        """Sets the display_categories of this DestinyDefinitionsDestinyVendorDefinition.

        Display Categories are different from \"categories\" in that these are specifically for visual grouping and display of categories in Vendor UI.   The \"categories\" structure is for validation of the contained items, and can be categorized entirely separately from \"Display Categories\", there need be and often will be no meaningful relationship between the two.

        :param display_categories: The display_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :type display_categories: List[DestinyDefinitionsDestinyDisplayCategoryDefinition]
        """

        self._display_categories = display_categories

    @property
    def display_item_hash(self):
        """Gets the display_item_hash of this DestinyDefinitionsDestinyVendorDefinition.

        If the vendor has an item that should be displayed as the \"featured\" item, this is the hash identifier for that DestinyVendorItemDefinition.  Apparently this is usually a related currency, like a reputation token. But it need not be restricted to that.

        :return: The display_item_hash of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._display_item_hash

    @display_item_hash.setter
    def display_item_hash(self, display_item_hash):
        """Sets the display_item_hash of this DestinyDefinitionsDestinyVendorDefinition.

        If the vendor has an item that should be displayed as the \"featured\" item, this is the hash identifier for that DestinyVendorItemDefinition.  Apparently this is usually a related currency, like a reputation token. But it need not be restricted to that.

        :param display_item_hash: The display_item_hash of this DestinyDefinitionsDestinyVendorDefinition.
        :type display_item_hash: int
        """

        self._display_item_hash = display_item_hash

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyVendorDefinition.


        :return: The display_properties of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyVendorDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsDestinyVendorDefinition.
        :type display_properties: DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def enabled(self):
        """Gets the enabled of this DestinyDefinitionsDestinyVendorDefinition.

        If a vendor is not enabled, we won't even save the vendor's definition, and we won't return any items or info about them. It's as if they don't exist.

        :return: The enabled of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DestinyDefinitionsDestinyVendorDefinition.

        If a vendor is not enabled, we won't even save the vendor's definition, and we won't return any items or info about them. It's as if they don't exist.

        :param enabled: The enabled of this DestinyDefinitionsDestinyVendorDefinition.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def faction_hash(self):
        """Gets the faction_hash of this DestinyDefinitionsDestinyVendorDefinition.

        If the Vendor has a faction, this hash will be valid and point to a DestinyFactionDefinition.  The game UI and BNet often mine the faction definition for additional elements and details to place on the screen, such as the faction's Progression status (aka \"Reputation\").

        :return: The faction_hash of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._faction_hash

    @faction_hash.setter
    def faction_hash(self, faction_hash):
        """Sets the faction_hash of this DestinyDefinitionsDestinyVendorDefinition.

        If the Vendor has a faction, this hash will be valid and point to a DestinyFactionDefinition.  The game UI and BNet often mine the faction definition for additional elements and details to place on the screen, such as the faction's Progression status (aka \"Reputation\").

        :param faction_hash: The faction_hash of this DestinyDefinitionsDestinyVendorDefinition.
        :type faction_hash: int
        """

        self._faction_hash = faction_hash

    @property
    def failure_strings(self):
        """Gets the failure_strings of this DestinyDefinitionsDestinyVendorDefinition.

        If an item can't be purchased from the vendor, there may be many \"custom\"/game state specific reasons why not.  This is a list of localized strings with messages for those custom failures. The live BNet data will return a failureIndexes property for items that can't be purchased: using those values to index into this array, you can show the user the appropriate failure message for the item that can't be bought.

        :return: The failure_strings of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[str]
        """
        return self._failure_strings

    @failure_strings.setter
    def failure_strings(self, failure_strings):
        """Sets the failure_strings of this DestinyDefinitionsDestinyVendorDefinition.

        If an item can't be purchased from the vendor, there may be many \"custom\"/game state specific reasons why not.  This is a list of localized strings with messages for those custom failures. The live BNet data will return a failureIndexes property for items that can't be purchased: using those values to index into this array, you can show the user the appropriate failure message for the item that can't be bought.

        :param failure_strings: The failure_strings of this DestinyDefinitionsDestinyVendorDefinition.
        :type failure_strings: List[str]
        """

        self._failure_strings = failure_strings

    @property
    def groups(self):
        """Gets the groups of this DestinyDefinitionsDestinyVendorDefinition.

        A vendor can be a part of 0 or 1 \"groups\" at a time: a group being a collection of Vendors related by either location or function/purpose. It's used for our our Companion Vendor UI. Only one of these can be active for a Vendor at a time.

        :return: The groups of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[DestinyDefinitionsDestinyVendorGroupReference]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this DestinyDefinitionsDestinyVendorDefinition.

        A vendor can be a part of 0 or 1 \"groups\" at a time: a group being a collection of Vendors related by either location or function/purpose. It's used for our our Companion Vendor UI. Only one of these can be active for a Vendor at a time.

        :param groups: The groups of this DestinyDefinitionsDestinyVendorDefinition.
        :type groups: List[DestinyDefinitionsDestinyVendorGroupReference]
        """

        self._groups = groups

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyVendorDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyVendorDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyVendorDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def ignore_sale_item_hashes(self):
        """Gets the ignore_sale_item_hashes of this DestinyDefinitionsDestinyVendorDefinition.

        Some items don't make sense to return in the API, for example because they represent an action to be performed rather than an item being sold. I'd rather we not do this, but at least in the short term this is a workable workaround.

        :return: The ignore_sale_item_hashes of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[int]
        """
        return self._ignore_sale_item_hashes

    @ignore_sale_item_hashes.setter
    def ignore_sale_item_hashes(self, ignore_sale_item_hashes):
        """Sets the ignore_sale_item_hashes of this DestinyDefinitionsDestinyVendorDefinition.

        Some items don't make sense to return in the API, for example because they represent an action to be performed rather than an item being sold. I'd rather we not do this, but at least in the short term this is a workable workaround.

        :param ignore_sale_item_hashes: The ignore_sale_item_hashes of this DestinyDefinitionsDestinyVendorDefinition.
        :type ignore_sale_item_hashes: List[int]
        """

        self._ignore_sale_item_hashes = ignore_sale_item_hashes

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyVendorDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyVendorDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyVendorDefinition.
        :type index: int
        """

        self._index = index

    @property
    def inhibit_buying(self):
        """Gets the inhibit_buying of this DestinyDefinitionsDestinyVendorDefinition.

        If this is true, you aren't allowed to buy whatever the vendor is selling.

        :return: The inhibit_buying of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._inhibit_buying

    @inhibit_buying.setter
    def inhibit_buying(self, inhibit_buying):
        """Sets the inhibit_buying of this DestinyDefinitionsDestinyVendorDefinition.

        If this is true, you aren't allowed to buy whatever the vendor is selling.

        :param inhibit_buying: The inhibit_buying of this DestinyDefinitionsDestinyVendorDefinition.
        :type inhibit_buying: bool
        """

        self._inhibit_buying = inhibit_buying

    @property
    def inhibit_selling(self):
        """Gets the inhibit_selling of this DestinyDefinitionsDestinyVendorDefinition.

        If this is true, you're not allowed to sell whatever the vendor is buying.

        :return: The inhibit_selling of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._inhibit_selling

    @inhibit_selling.setter
    def inhibit_selling(self, inhibit_selling):
        """Sets the inhibit_selling of this DestinyDefinitionsDestinyVendorDefinition.

        If this is true, you're not allowed to sell whatever the vendor is buying.

        :param inhibit_selling: The inhibit_selling of this DestinyDefinitionsDestinyVendorDefinition.
        :type inhibit_selling: bool
        """

        self._inhibit_selling = inhibit_selling

    @property
    def interactions(self):
        """Gets the interactions of this DestinyDefinitionsDestinyVendorDefinition.

        In addition to selling items, vendors can have \"interactions\": UI where you \"talk\" with the vendor and they offer you a reward, some item, or merely acknowledge via dialog that you did something cool.

        :return: The interactions of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[DestinyDefinitionsDestinyVendorInteractionDefinition]
        """
        return self._interactions

    @interactions.setter
    def interactions(self, interactions):
        """Sets the interactions of this DestinyDefinitionsDestinyVendorDefinition.

        In addition to selling items, vendors can have \"interactions\": UI where you \"talk\" with the vendor and they offer you a reward, some item, or merely acknowledge via dialog that you did something cool.

        :param interactions: The interactions of this DestinyDefinitionsDestinyVendorDefinition.
        :type interactions: List[DestinyDefinitionsDestinyVendorInteractionDefinition]
        """

        self._interactions = interactions

    @property
    def inventory_flyouts(self):
        """Gets the inventory_flyouts of this DestinyDefinitionsDestinyVendorDefinition.

        If the vendor shows you items from your own inventory - such as the Vault vendor does - this data describes the UI around showing those inventory buckets and which ones get shown.

        :return: The inventory_flyouts of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition]
        """
        return self._inventory_flyouts

    @inventory_flyouts.setter
    def inventory_flyouts(self, inventory_flyouts):
        """Sets the inventory_flyouts of this DestinyDefinitionsDestinyVendorDefinition.

        If the vendor shows you items from your own inventory - such as the Vault vendor does - this data describes the UI around showing those inventory buckets and which ones get shown.

        :param inventory_flyouts: The inventory_flyouts of this DestinyDefinitionsDestinyVendorDefinition.
        :type inventory_flyouts: List[DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition]
        """

        self._inventory_flyouts = inventory_flyouts

    @property
    def item_list(self):
        """Gets the item_list of this DestinyDefinitionsDestinyVendorDefinition.

        If the vendor sells items (or merely has a list of items to show like the \"Sack\" vendors do), this is the list of those items that the vendor can sell. From this list, only a subset will be available from the vendor at any given time, selected randomly and reset on the vendor's refresh interval.  Note that a vendor can sell the same item multiple ways: for instance, nothing stops a vendor from selling you some specific weapon but using two different currencies, or the same weapon at multiple \"item levels\".

        :return: The item_list of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[DestinyDefinitionsDestinyVendorItemDefinition]
        """
        return self._item_list

    @item_list.setter
    def item_list(self, item_list):
        """Sets the item_list of this DestinyDefinitionsDestinyVendorDefinition.

        If the vendor sells items (or merely has a list of items to show like the \"Sack\" vendors do), this is the list of those items that the vendor can sell. From this list, only a subset will be available from the vendor at any given time, selected randomly and reset on the vendor's refresh interval.  Note that a vendor can sell the same item multiple ways: for instance, nothing stops a vendor from selling you some specific weapon but using two different currencies, or the same weapon at multiple \"item levels\".

        :param item_list: The item_list of this DestinyDefinitionsDestinyVendorDefinition.
        :type item_list: List[DestinyDefinitionsDestinyVendorItemDefinition]
        """

        self._item_list = item_list

    @property
    def locations(self):
        """Gets the locations of this DestinyDefinitionsDestinyVendorDefinition.

        A vendor can be at different places in the world depending on the game/character/account state. This is the list of possible locations for the vendor, along with conditions we use to determine which one is currently active.

        :return: The locations of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[DestinyDefinitionsVendorsDestinyVendorLocationDefinition]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this DestinyDefinitionsDestinyVendorDefinition.

        A vendor can be at different places in the world depending on the game/character/account state. This is the list of possible locations for the vendor, along with conditions we use to determine which one is currently active.

        :param locations: The locations of this DestinyDefinitionsDestinyVendorDefinition.
        :type locations: List[DestinyDefinitionsVendorsDestinyVendorLocationDefinition]
        """

        self._locations = locations

    @property
    def original_categories(self):
        """Gets the original_categories of this DestinyDefinitionsDestinyVendorDefinition.

        See the categories property for a description of categories and why originalCategories exists.

        :return: The original_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[DestinyDefinitionsDestinyVendorCategoryEntryDefinition]
        """
        return self._original_categories

    @original_categories.setter
    def original_categories(self, original_categories):
        """Sets the original_categories of this DestinyDefinitionsDestinyVendorDefinition.

        See the categories property for a description of categories and why originalCategories exists.

        :param original_categories: The original_categories of this DestinyDefinitionsDestinyVendorDefinition.
        :type original_categories: List[DestinyDefinitionsDestinyVendorCategoryEntryDefinition]
        """

        self._original_categories = original_categories

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyVendorDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyVendorDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyVendorDefinition.
        :type redacted: bool
        """

        self._redacted = redacted

    @property
    def reset_interval_minutes(self):
        """Gets the reset_interval_minutes of this DestinyDefinitionsDestinyVendorDefinition.

        A number used for calculating the frequency of a vendor's inventory resetting/refreshing.  Don't worry about calculating this - we do it on the server side and send you the next refresh date with the live data.

        :return: The reset_interval_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._reset_interval_minutes

    @reset_interval_minutes.setter
    def reset_interval_minutes(self, reset_interval_minutes):
        """Sets the reset_interval_minutes of this DestinyDefinitionsDestinyVendorDefinition.

        A number used for calculating the frequency of a vendor's inventory resetting/refreshing.  Don't worry about calculating this - we do it on the server side and send you the next refresh date with the live data.

        :param reset_interval_minutes: The reset_interval_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        :type reset_interval_minutes: int
        """

        self._reset_interval_minutes = reset_interval_minutes

    @property
    def reset_offset_minutes(self):
        """Gets the reset_offset_minutes of this DestinyDefinitionsDestinyVendorDefinition.

        Again, used for reset/refreshing of inventory. Don't worry too much about it. Unless you want to.

        :return: The reset_offset_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._reset_offset_minutes

    @reset_offset_minutes.setter
    def reset_offset_minutes(self, reset_offset_minutes):
        """Sets the reset_offset_minutes of this DestinyDefinitionsDestinyVendorDefinition.

        Again, used for reset/refreshing of inventory. Don't worry too much about it. Unless you want to.

        :param reset_offset_minutes: The reset_offset_minutes of this DestinyDefinitionsDestinyVendorDefinition.
        :type reset_offset_minutes: int
        """

        self._reset_offset_minutes = reset_offset_minutes

    @property
    def return_with_vendor_request(self):
        """Gets the return_with_vendor_request of this DestinyDefinitionsDestinyVendorDefinition.

        As many of you know, Vendor data has historically been pretty brutal on the BNet servers. In an effort to reduce this workload, only Vendors with this flag set will be returned on Vendor requests. This allows us to filter out Vendors that don't dynamic data that's particularly useful: things like \"Preview/Sack\" vendors, for example, that you can usually suss out the details for using just the definitions themselves.

        :return: The return_with_vendor_request of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._return_with_vendor_request

    @return_with_vendor_request.setter
    def return_with_vendor_request(self, return_with_vendor_request):
        """Sets the return_with_vendor_request of this DestinyDefinitionsDestinyVendorDefinition.

        As many of you know, Vendor data has historically been pretty brutal on the BNet servers. In an effort to reduce this workload, only Vendors with this flag set will be returned on Vendor requests. This allows us to filter out Vendors that don't dynamic data that's particularly useful: things like \"Preview/Sack\" vendors, for example, that you can usually suss out the details for using just the definitions themselves.

        :param return_with_vendor_request: The return_with_vendor_request of this DestinyDefinitionsDestinyVendorDefinition.
        :type return_with_vendor_request: bool
        """

        self._return_with_vendor_request = return_with_vendor_request

    @property
    def sell_string(self):
        """Gets the sell_string of this DestinyDefinitionsDestinyVendorDefinition.

        Ditto for selling. Not that you can sell items to a vendor anymore. Will it come back? Who knows. The string's still there.

        :return: The sell_string of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._sell_string

    @sell_string.setter
    def sell_string(self, sell_string):
        """Sets the sell_string of this DestinyDefinitionsDestinyVendorDefinition.

        Ditto for selling. Not that you can sell items to a vendor anymore. Will it come back? Who knows. The string's still there.

        :param sell_string: The sell_string of this DestinyDefinitionsDestinyVendorDefinition.
        :type sell_string: str
        """

        self._sell_string = sell_string

    @property
    def services(self):
        """Gets the services of this DestinyDefinitionsDestinyVendorDefinition.

        BNet doesn't use this data yet, but it appears to be an optional list of flavor text about services that the Vendor can provide.

        :return: The services of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[DestinyDefinitionsDestinyVendorServiceDefinition]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this DestinyDefinitionsDestinyVendorDefinition.

        BNet doesn't use this data yet, but it appears to be an optional list of flavor text about services that the Vendor can provide.

        :param services: The services of this DestinyDefinitionsDestinyVendorDefinition.
        :type services: List[DestinyDefinitionsDestinyVendorServiceDefinition]
        """

        self._services = services

    @property
    def unlock_ranges(self):
        """Gets the unlock_ranges of this DestinyDefinitionsDestinyVendorDefinition.

        If we were able to predict the dates when this Vendor will be visible/available, this will be the list of those date ranges. Sadly, we're not able to predict this very frequently, so this will often be useless data.

        :return: The unlock_ranges of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: List[DatesDateRange]
        """
        return self._unlock_ranges

    @unlock_ranges.setter
    def unlock_ranges(self, unlock_ranges):
        """Sets the unlock_ranges of this DestinyDefinitionsDestinyVendorDefinition.

        If we were able to predict the dates when this Vendor will be visible/available, this will be the list of those date ranges. Sadly, we're not able to predict this very frequently, so this will often be useless data.

        :param unlock_ranges: The unlock_ranges of this DestinyDefinitionsDestinyVendorDefinition.
        :type unlock_ranges: List[DatesDateRange]
        """

        self._unlock_ranges = unlock_ranges

    @property
    def vendor_banner(self):
        """Gets the vendor_banner of this DestinyDefinitionsDestinyVendorDefinition.

        If the vendor has a custom banner image, that can be found here.

        :return: The vendor_banner of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._vendor_banner

    @vendor_banner.setter
    def vendor_banner(self, vendor_banner):
        """Sets the vendor_banner of this DestinyDefinitionsDestinyVendorDefinition.

        If the vendor has a custom banner image, that can be found here.

        :param vendor_banner: The vendor_banner of this DestinyDefinitionsDestinyVendorDefinition.
        :type vendor_banner: str
        """

        self._vendor_banner = vendor_banner

    @property
    def vendor_identifier(self):
        """Gets the vendor_identifier of this DestinyDefinitionsDestinyVendorDefinition.

        The internal identifier for the Vendor. A holdover from the old days of Vendors, but we don't have time to refactor it away.

        :return: The vendor_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._vendor_identifier

    @vendor_identifier.setter
    def vendor_identifier(self, vendor_identifier):
        """Sets the vendor_identifier of this DestinyDefinitionsDestinyVendorDefinition.

        The internal identifier for the Vendor. A holdover from the old days of Vendors, but we don't have time to refactor it away.

        :param vendor_identifier: The vendor_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        :type vendor_identifier: str
        """

        self._vendor_identifier = vendor_identifier

    @property
    def vendor_portrait(self):
        """Gets the vendor_portrait of this DestinyDefinitionsDestinyVendorDefinition.

        A portrait of the Vendor's smiling mug. Or frothing tentacles.

        :return: The vendor_portrait of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._vendor_portrait

    @vendor_portrait.setter
    def vendor_portrait(self, vendor_portrait):
        """Sets the vendor_portrait of this DestinyDefinitionsDestinyVendorDefinition.

        A portrait of the Vendor's smiling mug. Or frothing tentacles.

        :param vendor_portrait: The vendor_portrait of this DestinyDefinitionsDestinyVendorDefinition.
        :type vendor_portrait: str
        """

        self._vendor_portrait = vendor_portrait

    @property
    def vendor_progression_type(self):
        """Gets the vendor_progression_type of this DestinyDefinitionsDestinyVendorDefinition.

        The type of reward progression that this vendor has. Default - The original rank progression from token redemption. Ritual - Progression from ranks in ritual content. For example: Crucible (Shaxx), Gambit (Drifter), and Battlegrounds (War Table).

        :return: The vendor_progression_type of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: int
        """
        return self._vendor_progression_type

    @vendor_progression_type.setter
    def vendor_progression_type(self, vendor_progression_type):
        """Sets the vendor_progression_type of this DestinyDefinitionsDestinyVendorDefinition.

        The type of reward progression that this vendor has. Default - The original rank progression from token redemption. Ritual - Progression from ranks in ritual content. For example: Crucible (Shaxx), Gambit (Drifter), and Battlegrounds (War Table).

        :param vendor_progression_type: The vendor_progression_type of this DestinyDefinitionsDestinyVendorDefinition.
        :type vendor_progression_type: int
        """

        self._vendor_progression_type = vendor_progression_type

    @property
    def vendor_subcategory_identifier(self):
        """Gets the vendor_subcategory_identifier of this DestinyDefinitionsDestinyVendorDefinition.

        The identifier of the VendorCategoryDefinition for this vendor's subcategory.

        :return: The vendor_subcategory_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: str
        """
        return self._vendor_subcategory_identifier

    @vendor_subcategory_identifier.setter
    def vendor_subcategory_identifier(self, vendor_subcategory_identifier):
        """Sets the vendor_subcategory_identifier of this DestinyDefinitionsDestinyVendorDefinition.

        The identifier of the VendorCategoryDefinition for this vendor's subcategory.

        :param vendor_subcategory_identifier: The vendor_subcategory_identifier of this DestinyDefinitionsDestinyVendorDefinition.
        :type vendor_subcategory_identifier: str
        """

        self._vendor_subcategory_identifier = vendor_subcategory_identifier

    @property
    def visible(self):
        """Gets the visible of this DestinyDefinitionsDestinyVendorDefinition.

        If a vendor is not visible, we still have and will give vendor definition info, but we won't use them for things like Advisors or UI.

        :return: The visible of this DestinyDefinitionsDestinyVendorDefinition.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this DestinyDefinitionsDestinyVendorDefinition.

        If a vendor is not visible, we still have and will give vendor definition info, but we won't use them for things like Advisors or UI.

        :param visible: The visible of this DestinyDefinitionsDestinyVendorDefinition.
        :type visible: bool
        """

        self._visible = visible
