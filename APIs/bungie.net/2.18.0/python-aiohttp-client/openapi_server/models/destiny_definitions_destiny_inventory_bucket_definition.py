# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server import util


class DestinyDefinitionsDestinyInventoryBucketDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_order: int=None, category: int=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, enabled: bool=None, fifo: bool=None, has_transfer_destination: bool=None, hash: int=None, index: int=None, item_count: int=None, location: int=None, redacted: bool=None, scope: int=None):
        """DestinyDefinitionsDestinyInventoryBucketDefinition - a model defined in OpenAPI

        :param bucket_order: The bucket_order of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :param category: The category of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :param enabled: The enabled of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :param fifo: The fifo of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :param has_transfer_destination: The has_transfer_destination of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :param hash: The hash of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :param index: The index of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :param item_count: The item_count of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :param location: The location of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :param scope: The scope of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        """
        self.openapi_types = {
            'bucket_order': int,
            'category': int,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'enabled': bool,
            'fifo': bool,
            'has_transfer_destination': bool,
            'hash': int,
            'index': int,
            'item_count': int,
            'location': int,
            'redacted': bool,
            'scope': int
        }

        self.attribute_map = {
            'bucket_order': 'bucketOrder',
            'category': 'category',
            'display_properties': 'displayProperties',
            'enabled': 'enabled',
            'fifo': 'fifo',
            'has_transfer_destination': 'hasTransferDestination',
            'hash': 'hash',
            'index': 'index',
            'item_count': 'itemCount',
            'location': 'location',
            'redacted': 'redacted',
            'scope': 'scope'
        }

        self._bucket_order = bucket_order
        self._category = category
        self._display_properties = display_properties
        self._enabled = enabled
        self._fifo = fifo
        self._has_transfer_destination = has_transfer_destination
        self._hash = hash
        self._index = index
        self._item_count = item_count
        self._location = location
        self._redacted = redacted
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyInventoryBucketDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyInventoryBucketDefinition of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_order(self):
        """Gets the bucket_order of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        Use this property to provide a quick-and-dirty recommended ordering for buckets in the UI. Most UIs will likely want to forsake this for something more custom and manual.

        :return: The bucket_order of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :rtype: int
        """
        return self._bucket_order

    @bucket_order.setter
    def bucket_order(self, bucket_order):
        """Sets the bucket_order of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        Use this property to provide a quick-and-dirty recommended ordering for buckets in the UI. Most UIs will likely want to forsake this for something more custom and manual.

        :param bucket_order: The bucket_order of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :type bucket_order: int
        """

        self._bucket_order = bucket_order

    @property
    def category(self):
        """Gets the category of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        An enum value for what items can be found in the bucket. See the BucketCategory enum for more details.

        :return: The category of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        An enum value for what items can be found in the bucket. See the BucketCategory enum for more details.

        :param category: The category of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :type category: int
        """

        self._category = category

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyInventoryBucketDefinition.


        :return: The display_properties of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyInventoryBucketDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def enabled(self):
        """Gets the enabled of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        If True, this bucket is enabled. Disabled buckets may include buckets that were included for test purposes, or that were going to be used but then were abandoned but never removed from content *cough*.

        :return: The enabled of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        If True, this bucket is enabled. Disabled buckets may include buckets that were included for test purposes, or that were going to be used but then were abandoned but never removed from content *cough*.

        :param enabled: The enabled of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def fifo(self):
        """Gets the fifo of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        if a FIFO bucket fills up, it will delete the oldest item from said bucket when a new item tries to be added to it. If this is FALSE, the bucket will not allow new items to be placed in it until room is made by the user manually deleting items from it. You can see an example of this with the Postmaster's bucket.

        :return: The fifo of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :rtype: bool
        """
        return self._fifo

    @fifo.setter
    def fifo(self, fifo):
        """Sets the fifo of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        if a FIFO bucket fills up, it will delete the oldest item from said bucket when a new item tries to be added to it. If this is FALSE, the bucket will not allow new items to be placed in it until room is made by the user manually deleting items from it. You can see an example of this with the Postmaster's bucket.

        :param fifo: The fifo of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :type fifo: bool
        """

        self._fifo = fifo

    @property
    def has_transfer_destination(self):
        """Gets the has_transfer_destination of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        If TRUE, there is at least one Vendor that can transfer items to/from this bucket. See the DestinyVendorDefinition's acceptedItems property for more information on how transferring works.

        :return: The has_transfer_destination of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :rtype: bool
        """
        return self._has_transfer_destination

    @has_transfer_destination.setter
    def has_transfer_destination(self, has_transfer_destination):
        """Sets the has_transfer_destination of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        If TRUE, there is at least one Vendor that can transfer items to/from this bucket. See the DestinyVendorDefinition's acceptedItems property for more information on how transferring works.

        :param has_transfer_destination: The has_transfer_destination of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :type has_transfer_destination: bool
        """

        self._has_transfer_destination = has_transfer_destination

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :type index: int
        """

        self._index = index

    @property
    def item_count(self):
        """Gets the item_count of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        The maximum # of item \"slots\" in a bucket. A slot is a given combination of item + quantity.  For instance, a Weapon will always take up a single slot, and always have a quantity of 1. But a material could take up only a single slot with hundreds of quantity.

        :return: The item_count of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        The maximum # of item \"slots\" in a bucket. A slot is a given combination of item + quantity.  For instance, a Weapon will always take up a single slot, and always have a quantity of 1. But a material could take up only a single slot with hundreds of quantity.

        :param item_count: The item_count of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :type item_count: int
        """

        self._item_count = item_count

    @property
    def location(self):
        """Gets the location of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        Sometimes, inventory buckets represent conceptual \"locations\" in the game that might not be expected. This value indicates the conceptual location of the bucket, regardless of where it is actually contained on the character/account.   See ItemLocation for details.   Note that location includes the Vault and the Postmaster (both of whom being just inventory buckets with additional actions that can be performed on them through a Vendor)

        :return: The location of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        Sometimes, inventory buckets represent conceptual \"locations\" in the game that might not be expected. This value indicates the conceptual location of the bucket, regardless of where it is actually contained on the character/account.   See ItemLocation for details.   Note that location includes the Vault and the Postmaster (both of whom being just inventory buckets with additional actions that can be performed on them through a Vendor)

        :param location: The location of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :type location: int
        """

        self._location = location

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :type redacted: bool
        """

        self._redacted = redacted

    @property
    def scope(self):
        """Gets the scope of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        Where the bucket is found. 0 = Character, 1 = Account

        :return: The scope of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :rtype: int
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this DestinyDefinitionsDestinyInventoryBucketDefinition.

        Where the bucket is found. 0 = Character, 1 = Account

        :param scope: The scope of this DestinyDefinitionsDestinyInventoryBucketDefinition.
        :type scope: int
        """

        self._scope = scope
