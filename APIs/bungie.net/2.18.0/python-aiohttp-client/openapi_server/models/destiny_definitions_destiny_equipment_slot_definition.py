# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server.models.destiny_definitions_destiny_art_dye_reference import DestinyDefinitionsDestinyArtDyeReference
from openapi_server import util


class DestinyDefinitionsDestinyEquipmentSlotDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_custom_art_dyes: bool=None, art_dye_channels: List[DestinyDefinitionsDestinyArtDyeReference]=None, bucket_type_hash: int=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, equipment_category_hash: int=None, hash: int=None, index: int=None, redacted: bool=None):
        """DestinyDefinitionsDestinyEquipmentSlotDefinition - a model defined in OpenAPI

        :param apply_custom_art_dyes: The apply_custom_art_dyes of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :param art_dye_channels: The art_dye_channels of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :param bucket_type_hash: The bucket_type_hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :param equipment_category_hash: The equipment_category_hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :param hash: The hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :param index: The index of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        """
        self.openapi_types = {
            'apply_custom_art_dyes': bool,
            'art_dye_channels': List[DestinyDefinitionsDestinyArtDyeReference],
            'bucket_type_hash': int,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'equipment_category_hash': int,
            'hash': int,
            'index': int,
            'redacted': bool
        }

        self.attribute_map = {
            'apply_custom_art_dyes': 'applyCustomArtDyes',
            'art_dye_channels': 'artDyeChannels',
            'bucket_type_hash': 'bucketTypeHash',
            'display_properties': 'displayProperties',
            'equipment_category_hash': 'equipmentCategoryHash',
            'hash': 'hash',
            'index': 'index',
            'redacted': 'redacted'
        }

        self._apply_custom_art_dyes = apply_custom_art_dyes
        self._art_dye_channels = art_dye_channels
        self._bucket_type_hash = bucket_type_hash
        self._display_properties = display_properties
        self._equipment_category_hash = equipment_category_hash
        self._hash = hash
        self._index = index
        self._redacted = redacted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyEquipmentSlotDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyEquipmentSlotDefinition of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_custom_art_dyes(self):
        """Gets the apply_custom_art_dyes of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        If True, equipped items should have their custom art dyes applied when rendering the item. Otherwise, custom art dyes on an item should be ignored if the item is equipped in this slot.

        :return: The apply_custom_art_dyes of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :rtype: bool
        """
        return self._apply_custom_art_dyes

    @apply_custom_art_dyes.setter
    def apply_custom_art_dyes(self, apply_custom_art_dyes):
        """Sets the apply_custom_art_dyes of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        If True, equipped items should have their custom art dyes applied when rendering the item. Otherwise, custom art dyes on an item should be ignored if the item is equipped in this slot.

        :param apply_custom_art_dyes: The apply_custom_art_dyes of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :type apply_custom_art_dyes: bool
        """

        self._apply_custom_art_dyes = apply_custom_art_dyes

    @property
    def art_dye_channels(self):
        """Gets the art_dye_channels of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        The Art Dye Channels that apply to this equipment slot.

        :return: The art_dye_channels of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :rtype: List[DestinyDefinitionsDestinyArtDyeReference]
        """
        return self._art_dye_channels

    @art_dye_channels.setter
    def art_dye_channels(self, art_dye_channels):
        """Sets the art_dye_channels of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        The Art Dye Channels that apply to this equipment slot.

        :param art_dye_channels: The art_dye_channels of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :type art_dye_channels: List[DestinyDefinitionsDestinyArtDyeReference]
        """

        self._art_dye_channels = art_dye_channels

    @property
    def bucket_type_hash(self):
        """Gets the bucket_type_hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        The inventory bucket that owns this equipment slot.

        :return: The bucket_type_hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :rtype: int
        """
        return self._bucket_type_hash

    @bucket_type_hash.setter
    def bucket_type_hash(self, bucket_type_hash):
        """Sets the bucket_type_hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        The inventory bucket that owns this equipment slot.

        :param bucket_type_hash: The bucket_type_hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :type bucket_type_hash: int
        """

        self._bucket_type_hash = bucket_type_hash

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyEquipmentSlotDefinition.


        :return: The display_properties of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyEquipmentSlotDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def equipment_category_hash(self):
        """Gets the equipment_category_hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        These technically point to \"Equipment Category Definitions\". But don't get excited. There's nothing of significant value in those definitions, so I didn't bother to expose them. You can use the hash here to group equipment slots by common functionality, which serves the same purpose as if we had the Equipment Category definitions exposed.

        :return: The equipment_category_hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :rtype: int
        """
        return self._equipment_category_hash

    @equipment_category_hash.setter
    def equipment_category_hash(self, equipment_category_hash):
        """Sets the equipment_category_hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        These technically point to \"Equipment Category Definitions\". But don't get excited. There's nothing of significant value in those definitions, so I didn't bother to expose them. You can use the hash here to group equipment slots by common functionality, which serves the same purpose as if we had the Equipment Category definitions exposed.

        :param equipment_category_hash: The equipment_category_hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :type equipment_category_hash: int
        """

        self._equipment_category_hash = equipment_category_hash

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :type index: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyEquipmentSlotDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyEquipmentSlotDefinition.
        :type redacted: bool
        """

        self._redacted = redacted
