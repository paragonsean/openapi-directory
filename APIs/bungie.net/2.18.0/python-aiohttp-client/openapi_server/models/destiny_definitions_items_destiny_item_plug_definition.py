# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_items_destiny_energy_capacity_entry import DestinyDefinitionsItemsDestinyEnergyCapacityEntry
from openapi_server.models.destiny_definitions_items_destiny_energy_cost_entry import DestinyDefinitionsItemsDestinyEnergyCostEntry
from openapi_server.models.destiny_definitions_items_destiny_parent_item_override import DestinyDefinitionsItemsDestinyParentItemOverride
from openapi_server.models.destiny_definitions_items_destiny_plug_rule_definition import DestinyDefinitionsItemsDestinyPlugRuleDefinition
from openapi_server import util


class DestinyDefinitionsItemsDestinyItemPlugDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_plug_style: int=None, alternate_ui_plug_label: str=None, enabled_material_requirement_hash: int=None, enabled_rules: List[DestinyDefinitionsItemsDestinyPlugRuleDefinition]=None, energy_capacity: DestinyDefinitionsItemsDestinyEnergyCapacityEntry=None, energy_cost: DestinyDefinitionsItemsDestinyEnergyCostEntry=None, insertion_material_requirement_hash: int=None, insertion_rules: List[DestinyDefinitionsItemsDestinyPlugRuleDefinition]=None, is_dummy_plug: bool=None, on_action_recreate_self: bool=None, parent_item_override: DestinyDefinitionsItemsDestinyParentItemOverride=None, plug_availability: int=None, plug_category_hash: int=None, plug_category_identifier: str=None, plug_style: int=None, preview_item_override_hash: int=None, ui_plug_label: str=None):
        """DestinyDefinitionsItemsDestinyItemPlugDefinition - a model defined in OpenAPI

        :param alternate_plug_style: The alternate_plug_style of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param alternate_ui_plug_label: The alternate_ui_plug_label of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param enabled_material_requirement_hash: The enabled_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param enabled_rules: The enabled_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param energy_capacity: The energy_capacity of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param energy_cost: The energy_cost of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param insertion_material_requirement_hash: The insertion_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param insertion_rules: The insertion_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param is_dummy_plug: The is_dummy_plug of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param on_action_recreate_self: The on_action_recreate_self of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param parent_item_override: The parent_item_override of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param plug_availability: The plug_availability of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param plug_category_hash: The plug_category_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param plug_category_identifier: The plug_category_identifier of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param plug_style: The plug_style of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param preview_item_override_hash: The preview_item_override_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :param ui_plug_label: The ui_plug_label of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        """
        self.openapi_types = {
            'alternate_plug_style': int,
            'alternate_ui_plug_label': str,
            'enabled_material_requirement_hash': int,
            'enabled_rules': List[DestinyDefinitionsItemsDestinyPlugRuleDefinition],
            'energy_capacity': DestinyDefinitionsItemsDestinyEnergyCapacityEntry,
            'energy_cost': DestinyDefinitionsItemsDestinyEnergyCostEntry,
            'insertion_material_requirement_hash': int,
            'insertion_rules': List[DestinyDefinitionsItemsDestinyPlugRuleDefinition],
            'is_dummy_plug': bool,
            'on_action_recreate_self': bool,
            'parent_item_override': DestinyDefinitionsItemsDestinyParentItemOverride,
            'plug_availability': int,
            'plug_category_hash': int,
            'plug_category_identifier': str,
            'plug_style': int,
            'preview_item_override_hash': int,
            'ui_plug_label': str
        }

        self.attribute_map = {
            'alternate_plug_style': 'alternatePlugStyle',
            'alternate_ui_plug_label': 'alternateUiPlugLabel',
            'enabled_material_requirement_hash': 'enabledMaterialRequirementHash',
            'enabled_rules': 'enabledRules',
            'energy_capacity': 'energyCapacity',
            'energy_cost': 'energyCost',
            'insertion_material_requirement_hash': 'insertionMaterialRequirementHash',
            'insertion_rules': 'insertionRules',
            'is_dummy_plug': 'isDummyPlug',
            'on_action_recreate_self': 'onActionRecreateSelf',
            'parent_item_override': 'parentItemOverride',
            'plug_availability': 'plugAvailability',
            'plug_category_hash': 'plugCategoryHash',
            'plug_category_identifier': 'plugCategoryIdentifier',
            'plug_style': 'plugStyle',
            'preview_item_override_hash': 'previewItemOverrideHash',
            'ui_plug_label': 'uiPlugLabel'
        }

        self._alternate_plug_style = alternate_plug_style
        self._alternate_ui_plug_label = alternate_ui_plug_label
        self._enabled_material_requirement_hash = enabled_material_requirement_hash
        self._enabled_rules = enabled_rules
        self._energy_capacity = energy_capacity
        self._energy_cost = energy_cost
        self._insertion_material_requirement_hash = insertion_material_requirement_hash
        self._insertion_rules = insertion_rules
        self._is_dummy_plug = is_dummy_plug
        self._on_action_recreate_self = on_action_recreate_self
        self._parent_item_override = parent_item_override
        self._plug_availability = plug_availability
        self._plug_category_hash = plug_category_hash
        self._plug_category_identifier = plug_category_identifier
        self._plug_style = plug_style
        self._preview_item_override_hash = preview_item_override_hash
        self._ui_plug_label = ui_plug_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsItemsDestinyItemPlugDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.Items.DestinyItemPlugDefinition of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_plug_style(self):
        """Gets the alternate_plug_style of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        The alternate plug of the plug: only applies when the item is in states that only the server can know about and control, unfortunately. See AlternateUiPlugLabel for the related label info.

        :return: The alternate_plug_style of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: int
        """
        return self._alternate_plug_style

    @alternate_plug_style.setter
    def alternate_plug_style(self, alternate_plug_style):
        """Sets the alternate_plug_style of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        The alternate plug of the plug: only applies when the item is in states that only the server can know about and control, unfortunately. See AlternateUiPlugLabel for the related label info.

        :param alternate_plug_style: The alternate_plug_style of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type alternate_plug_style: int
        """

        self._alternate_plug_style = alternate_plug_style

    @property
    def alternate_ui_plug_label(self):
        """Gets the alternate_ui_plug_label of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        If the plug meets certain state requirements, it may have an alternative label applied to it. This is the alternative label that will be applied in such a situation.

        :return: The alternate_ui_plug_label of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: str
        """
        return self._alternate_ui_plug_label

    @alternate_ui_plug_label.setter
    def alternate_ui_plug_label(self, alternate_ui_plug_label):
        """Sets the alternate_ui_plug_label of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        If the plug meets certain state requirements, it may have an alternative label applied to it. This is the alternative label that will be applied in such a situation.

        :param alternate_ui_plug_label: The alternate_ui_plug_label of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type alternate_ui_plug_label: str
        """

        self._alternate_ui_plug_label = alternate_ui_plug_label

    @property
    def enabled_material_requirement_hash(self):
        """Gets the enabled_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        It's not enough for the plug to be inserted. It has to be enabled as well. For it to be enabled, it may require materials. This is the hash identifier for the DestinyMaterialRequirementSetDefinition for those requirements, if there is one.

        :return: The enabled_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: int
        """
        return self._enabled_material_requirement_hash

    @enabled_material_requirement_hash.setter
    def enabled_material_requirement_hash(self, enabled_material_requirement_hash):
        """Sets the enabled_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        It's not enough for the plug to be inserted. It has to be enabled as well. For it to be enabled, it may require materials. This is the hash identifier for the DestinyMaterialRequirementSetDefinition for those requirements, if there is one.

        :param enabled_material_requirement_hash: The enabled_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type enabled_material_requirement_hash: int
        """

        self._enabled_material_requirement_hash = enabled_material_requirement_hash

    @property
    def enabled_rules(self):
        """Gets the enabled_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        The rules around whether the plug, once inserted, is enabled and providing its benefits.  The live data DestinyItemPlugComponent.enableFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.

        :return: The enabled_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: List[DestinyDefinitionsItemsDestinyPlugRuleDefinition]
        """
        return self._enabled_rules

    @enabled_rules.setter
    def enabled_rules(self, enabled_rules):
        """Sets the enabled_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        The rules around whether the plug, once inserted, is enabled and providing its benefits.  The live data DestinyItemPlugComponent.enableFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.

        :param enabled_rules: The enabled_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type enabled_rules: List[DestinyDefinitionsItemsDestinyPlugRuleDefinition]
        """

        self._enabled_rules = enabled_rules

    @property
    def energy_capacity(self):
        """Gets the energy_capacity of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        IF not null, this plug provides Energy capacity to the item in which it is socketed. In Armor 2.0 for example, is implemented in a similar way to Masterworks, where visually it's a single area of the UI being clicked on to \"Upgrade\" to higher energy levels, but it's actually socketing new plugs.

        :return: The energy_capacity of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: DestinyDefinitionsItemsDestinyEnergyCapacityEntry
        """
        return self._energy_capacity

    @energy_capacity.setter
    def energy_capacity(self, energy_capacity):
        """Sets the energy_capacity of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        IF not null, this plug provides Energy capacity to the item in which it is socketed. In Armor 2.0 for example, is implemented in a similar way to Masterworks, where visually it's a single area of the UI being clicked on to \"Upgrade\" to higher energy levels, but it's actually socketing new plugs.

        :param energy_capacity: The energy_capacity of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type energy_capacity: DestinyDefinitionsItemsDestinyEnergyCapacityEntry
        """

        self._energy_capacity = energy_capacity

    @property
    def energy_cost(self):
        """Gets the energy_cost of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        IF not null, this plug has an energy cost. This contains the details of that cost.

        :return: The energy_cost of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: DestinyDefinitionsItemsDestinyEnergyCostEntry
        """
        return self._energy_cost

    @energy_cost.setter
    def energy_cost(self, energy_cost):
        """Sets the energy_cost of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        IF not null, this plug has an energy cost. This contains the details of that cost.

        :param energy_cost: The energy_cost of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type energy_cost: DestinyDefinitionsItemsDestinyEnergyCostEntry
        """

        self._energy_cost = energy_cost

    @property
    def insertion_material_requirement_hash(self):
        """Gets the insertion_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        If inserting this plug requires materials, this is the hash identifier for looking up the DestinyMaterialRequirementSetDefinition for those requirements.

        :return: The insertion_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: int
        """
        return self._insertion_material_requirement_hash

    @insertion_material_requirement_hash.setter
    def insertion_material_requirement_hash(self, insertion_material_requirement_hash):
        """Sets the insertion_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        If inserting this plug requires materials, this is the hash identifier for looking up the DestinyMaterialRequirementSetDefinition for those requirements.

        :param insertion_material_requirement_hash: The insertion_material_requirement_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type insertion_material_requirement_hash: int
        """

        self._insertion_material_requirement_hash = insertion_material_requirement_hash

    @property
    def insertion_rules(self):
        """Gets the insertion_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        The rules around when this plug can be inserted into a socket, aside from the socket's individual restrictions.  The live data DestinyItemPlugComponent.insertFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.

        :return: The insertion_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: List[DestinyDefinitionsItemsDestinyPlugRuleDefinition]
        """
        return self._insertion_rules

    @insertion_rules.setter
    def insertion_rules(self, insertion_rules):
        """Sets the insertion_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        The rules around when this plug can be inserted into a socket, aside from the socket's individual restrictions.  The live data DestinyItemPlugComponent.insertFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.

        :param insertion_rules: The insertion_rules of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type insertion_rules: List[DestinyDefinitionsItemsDestinyPlugRuleDefinition]
        """

        self._insertion_rules = insertion_rules

    @property
    def is_dummy_plug(self):
        """Gets the is_dummy_plug of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        If TRUE, this plug is used for UI display purposes only, and doesn't have any interesting effects of its own.

        :return: The is_dummy_plug of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: bool
        """
        return self._is_dummy_plug

    @is_dummy_plug.setter
    def is_dummy_plug(self, is_dummy_plug):
        """Sets the is_dummy_plug of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        If TRUE, this plug is used for UI display purposes only, and doesn't have any interesting effects of its own.

        :param is_dummy_plug: The is_dummy_plug of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type is_dummy_plug: bool
        """

        self._is_dummy_plug = is_dummy_plug

    @property
    def on_action_recreate_self(self):
        """Gets the on_action_recreate_self of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        If you successfully socket the item, this will determine whether or not you get \"refunded\" on the plug.

        :return: The on_action_recreate_self of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: bool
        """
        return self._on_action_recreate_self

    @on_action_recreate_self.setter
    def on_action_recreate_self(self, on_action_recreate_self):
        """Sets the on_action_recreate_self of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        If you successfully socket the item, this will determine whether or not you get \"refunded\" on the plug.

        :param on_action_recreate_self: The on_action_recreate_self of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type on_action_recreate_self: bool
        """

        self._on_action_recreate_self = on_action_recreate_self

    @property
    def parent_item_override(self):
        """Gets the parent_item_override of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        Do you ever get the feeling that a system has become so overburdened by edge cases that it probably should have become some other system entirely? So do I!  In totally unrelated news, Plugs can now override properties of their parent items. This is some of the relevant definition data for those overrides.  If this is populated, it will have the override data to be applied when this plug is applied to an item.

        :return: The parent_item_override of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: DestinyDefinitionsItemsDestinyParentItemOverride
        """
        return self._parent_item_override

    @parent_item_override.setter
    def parent_item_override(self, parent_item_override):
        """Sets the parent_item_override of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        Do you ever get the feeling that a system has become so overburdened by edge cases that it probably should have become some other system entirely? So do I!  In totally unrelated news, Plugs can now override properties of their parent items. This is some of the relevant definition data for those overrides.  If this is populated, it will have the override data to be applied when this plug is applied to an item.

        :param parent_item_override: The parent_item_override of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type parent_item_override: DestinyDefinitionsItemsDestinyParentItemOverride
        """

        self._parent_item_override = parent_item_override

    @property
    def plug_availability(self):
        """Gets the plug_availability of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        Indicates the rules about when this plug can be used. See the PlugAvailabilityMode enumeration for more information!

        :return: The plug_availability of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: int
        """
        return self._plug_availability

    @plug_availability.setter
    def plug_availability(self, plug_availability):
        """Sets the plug_availability of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        Indicates the rules about when this plug can be used. See the PlugAvailabilityMode enumeration for more information!

        :param plug_availability: The plug_availability of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type plug_availability: int
        """

        self._plug_availability = plug_availability

    @property
    def plug_category_hash(self):
        """Gets the plug_category_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        The hash for the plugCategoryIdentifier. You can use this instead if you wish: I put both in the definition for debugging purposes.

        :return: The plug_category_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: int
        """
        return self._plug_category_hash

    @plug_category_hash.setter
    def plug_category_hash(self, plug_category_hash):
        """Sets the plug_category_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        The hash for the plugCategoryIdentifier. You can use this instead if you wish: I put both in the definition for debugging purposes.

        :param plug_category_hash: The plug_category_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type plug_category_hash: int
        """

        self._plug_category_hash = plug_category_hash

    @property
    def plug_category_identifier(self):
        """Gets the plug_category_identifier of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        The string identifier for the plug's category. Use the socket's DestinySocketTypeDefinition.plugWhitelist to determine whether this plug can be inserted into the socket.

        :return: The plug_category_identifier of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: str
        """
        return self._plug_category_identifier

    @plug_category_identifier.setter
    def plug_category_identifier(self, plug_category_identifier):
        """Sets the plug_category_identifier of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        The string identifier for the plug's category. Use the socket's DestinySocketTypeDefinition.plugWhitelist to determine whether this plug can be inserted into the socket.

        :param plug_category_identifier: The plug_category_identifier of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type plug_category_identifier: str
        """

        self._plug_category_identifier = plug_category_identifier

    @property
    def plug_style(self):
        """Gets the plug_style of this DestinyDefinitionsItemsDestinyItemPlugDefinition.


        :return: The plug_style of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: int
        """
        return self._plug_style

    @plug_style.setter
    def plug_style(self, plug_style):
        """Sets the plug_style of this DestinyDefinitionsItemsDestinyItemPlugDefinition.


        :param plug_style: The plug_style of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type plug_style: int
        """

        self._plug_style = plug_style

    @property
    def preview_item_override_hash(self):
        """Gets the preview_item_override_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        In the game, if you're inspecting a plug item directly, this will be the item shown with the plug attached. Look up the DestinyInventoryItemDefinition for this hash for the item.

        :return: The preview_item_override_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: int
        """
        return self._preview_item_override_hash

    @preview_item_override_hash.setter
    def preview_item_override_hash(self, preview_item_override_hash):
        """Sets the preview_item_override_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        In the game, if you're inspecting a plug item directly, this will be the item shown with the plug attached. Look up the DestinyInventoryItemDefinition for this hash for the item.

        :param preview_item_override_hash: The preview_item_override_hash of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type preview_item_override_hash: int
        """

        self._preview_item_override_hash = preview_item_override_hash

    @property
    def ui_plug_label(self):
        """Gets the ui_plug_label of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        Plugs can have arbitrary, UI-defined identifiers that the UI designers use to determine the style applied to plugs. Unfortunately, we have neither a definitive list of these labels nor advance warning of when new labels might be applied or how that relates to how they get rendered. If you want to, you can refer to known labels to change your own styles: but know that new ones can be created arbitrarily, and we have no way of associating the labels with any specific UI style guidance... you'll have to piece that together on your end. Or do what we do, and just show plugs more generically, without specialized styles.

        :return: The ui_plug_label of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :rtype: str
        """
        return self._ui_plug_label

    @ui_plug_label.setter
    def ui_plug_label(self, ui_plug_label):
        """Sets the ui_plug_label of this DestinyDefinitionsItemsDestinyItemPlugDefinition.

        Plugs can have arbitrary, UI-defined identifiers that the UI designers use to determine the style applied to plugs. Unfortunately, we have neither a definitive list of these labels nor advance warning of when new labels might be applied or how that relates to how they get rendered. If you want to, you can refer to known labels to change your own styles: but know that new ones can be created arbitrarily, and we have no way of associating the labels with any specific UI style guidance... you'll have to piece that together on your end. Or do what we do, and just show plugs more generically, without specialized styles.

        :param ui_plug_label: The ui_plug_label of this DestinyDefinitionsItemsDestinyItemPlugDefinition.
        :type ui_plug_label: str
        """

        self._ui_plug_label = ui_plug_label
