# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ignores_ignore_response import IgnoresIgnoreResponse
from openapi_server import util


class ForumPostResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_pinned: bool=None, ignore_status: IgnoresIgnoreResponse=None, is_active: bool=None, is_announcement: bool=None, last_reply_timestamp: datetime=None, latest_reply_author_id: int=None, latest_reply_post_id: int=None, locale: str=None, popularity: int=None, thumbnail: str=None, url_media_type: int=None, user_has_muted_post: bool=None, user_has_rated: bool=None, user_rating: int=None):
        """ForumPostResponse - a model defined in OpenAPI

        :param is_pinned: The is_pinned of this ForumPostResponse.
        :param ignore_status: The ignore_status of this ForumPostResponse.
        :param is_active: The is_active of this ForumPostResponse.
        :param is_announcement: The is_announcement of this ForumPostResponse.
        :param last_reply_timestamp: The last_reply_timestamp of this ForumPostResponse.
        :param latest_reply_author_id: The latest_reply_author_id of this ForumPostResponse.
        :param latest_reply_post_id: The latest_reply_post_id of this ForumPostResponse.
        :param locale: The locale of this ForumPostResponse.
        :param popularity: The popularity of this ForumPostResponse.
        :param thumbnail: The thumbnail of this ForumPostResponse.
        :param url_media_type: The url_media_type of this ForumPostResponse.
        :param user_has_muted_post: The user_has_muted_post of this ForumPostResponse.
        :param user_has_rated: The user_has_rated of this ForumPostResponse.
        :param user_rating: The user_rating of this ForumPostResponse.
        """
        self.openapi_types = {
            'is_pinned': bool,
            'ignore_status': IgnoresIgnoreResponse,
            'is_active': bool,
            'is_announcement': bool,
            'last_reply_timestamp': datetime,
            'latest_reply_author_id': int,
            'latest_reply_post_id': int,
            'locale': str,
            'popularity': int,
            'thumbnail': str,
            'url_media_type': int,
            'user_has_muted_post': bool,
            'user_has_rated': bool,
            'user_rating': int
        }

        self.attribute_map = {
            'is_pinned': 'IsPinned',
            'ignore_status': 'ignoreStatus',
            'is_active': 'isActive',
            'is_announcement': 'isAnnouncement',
            'last_reply_timestamp': 'lastReplyTimestamp',
            'latest_reply_author_id': 'latestReplyAuthorId',
            'latest_reply_post_id': 'latestReplyPostId',
            'locale': 'locale',
            'popularity': 'popularity',
            'thumbnail': 'thumbnail',
            'url_media_type': 'urlMediaType',
            'user_has_muted_post': 'userHasMutedPost',
            'user_has_rated': 'userHasRated',
            'user_rating': 'userRating'
        }

        self._is_pinned = is_pinned
        self._ignore_status = ignore_status
        self._is_active = is_active
        self._is_announcement = is_announcement
        self._last_reply_timestamp = last_reply_timestamp
        self._latest_reply_author_id = latest_reply_author_id
        self._latest_reply_post_id = latest_reply_post_id
        self._locale = locale
        self._popularity = popularity
        self._thumbnail = thumbnail
        self._url_media_type = url_media_type
        self._user_has_muted_post = user_has_muted_post
        self._user_has_rated = user_has_rated
        self._user_rating = user_rating

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForumPostResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Forum.PostResponse of this ForumPostResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_pinned(self):
        """Gets the is_pinned of this ForumPostResponse.


        :return: The is_pinned of this ForumPostResponse.
        :rtype: bool
        """
        return self._is_pinned

    @is_pinned.setter
    def is_pinned(self, is_pinned):
        """Sets the is_pinned of this ForumPostResponse.


        :param is_pinned: The is_pinned of this ForumPostResponse.
        :type is_pinned: bool
        """

        self._is_pinned = is_pinned

    @property
    def ignore_status(self):
        """Gets the ignore_status of this ForumPostResponse.


        :return: The ignore_status of this ForumPostResponse.
        :rtype: IgnoresIgnoreResponse
        """
        return self._ignore_status

    @ignore_status.setter
    def ignore_status(self, ignore_status):
        """Sets the ignore_status of this ForumPostResponse.


        :param ignore_status: The ignore_status of this ForumPostResponse.
        :type ignore_status: IgnoresIgnoreResponse
        """

        self._ignore_status = ignore_status

    @property
    def is_active(self):
        """Gets the is_active of this ForumPostResponse.


        :return: The is_active of this ForumPostResponse.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ForumPostResponse.


        :param is_active: The is_active of this ForumPostResponse.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_announcement(self):
        """Gets the is_announcement of this ForumPostResponse.


        :return: The is_announcement of this ForumPostResponse.
        :rtype: bool
        """
        return self._is_announcement

    @is_announcement.setter
    def is_announcement(self, is_announcement):
        """Sets the is_announcement of this ForumPostResponse.


        :param is_announcement: The is_announcement of this ForumPostResponse.
        :type is_announcement: bool
        """

        self._is_announcement = is_announcement

    @property
    def last_reply_timestamp(self):
        """Gets the last_reply_timestamp of this ForumPostResponse.


        :return: The last_reply_timestamp of this ForumPostResponse.
        :rtype: datetime
        """
        return self._last_reply_timestamp

    @last_reply_timestamp.setter
    def last_reply_timestamp(self, last_reply_timestamp):
        """Sets the last_reply_timestamp of this ForumPostResponse.


        :param last_reply_timestamp: The last_reply_timestamp of this ForumPostResponse.
        :type last_reply_timestamp: datetime
        """

        self._last_reply_timestamp = last_reply_timestamp

    @property
    def latest_reply_author_id(self):
        """Gets the latest_reply_author_id of this ForumPostResponse.


        :return: The latest_reply_author_id of this ForumPostResponse.
        :rtype: int
        """
        return self._latest_reply_author_id

    @latest_reply_author_id.setter
    def latest_reply_author_id(self, latest_reply_author_id):
        """Sets the latest_reply_author_id of this ForumPostResponse.


        :param latest_reply_author_id: The latest_reply_author_id of this ForumPostResponse.
        :type latest_reply_author_id: int
        """

        self._latest_reply_author_id = latest_reply_author_id

    @property
    def latest_reply_post_id(self):
        """Gets the latest_reply_post_id of this ForumPostResponse.


        :return: The latest_reply_post_id of this ForumPostResponse.
        :rtype: int
        """
        return self._latest_reply_post_id

    @latest_reply_post_id.setter
    def latest_reply_post_id(self, latest_reply_post_id):
        """Sets the latest_reply_post_id of this ForumPostResponse.


        :param latest_reply_post_id: The latest_reply_post_id of this ForumPostResponse.
        :type latest_reply_post_id: int
        """

        self._latest_reply_post_id = latest_reply_post_id

    @property
    def locale(self):
        """Gets the locale of this ForumPostResponse.


        :return: The locale of this ForumPostResponse.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this ForumPostResponse.


        :param locale: The locale of this ForumPostResponse.
        :type locale: str
        """

        self._locale = locale

    @property
    def popularity(self):
        """Gets the popularity of this ForumPostResponse.


        :return: The popularity of this ForumPostResponse.
        :rtype: int
        """
        return self._popularity

    @popularity.setter
    def popularity(self, popularity):
        """Sets the popularity of this ForumPostResponse.


        :param popularity: The popularity of this ForumPostResponse.
        :type popularity: int
        """

        self._popularity = popularity

    @property
    def thumbnail(self):
        """Gets the thumbnail of this ForumPostResponse.


        :return: The thumbnail of this ForumPostResponse.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this ForumPostResponse.


        :param thumbnail: The thumbnail of this ForumPostResponse.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def url_media_type(self):
        """Gets the url_media_type of this ForumPostResponse.


        :return: The url_media_type of this ForumPostResponse.
        :rtype: int
        """
        return self._url_media_type

    @url_media_type.setter
    def url_media_type(self, url_media_type):
        """Sets the url_media_type of this ForumPostResponse.


        :param url_media_type: The url_media_type of this ForumPostResponse.
        :type url_media_type: int
        """

        self._url_media_type = url_media_type

    @property
    def user_has_muted_post(self):
        """Gets the user_has_muted_post of this ForumPostResponse.


        :return: The user_has_muted_post of this ForumPostResponse.
        :rtype: bool
        """
        return self._user_has_muted_post

    @user_has_muted_post.setter
    def user_has_muted_post(self, user_has_muted_post):
        """Sets the user_has_muted_post of this ForumPostResponse.


        :param user_has_muted_post: The user_has_muted_post of this ForumPostResponse.
        :type user_has_muted_post: bool
        """

        self._user_has_muted_post = user_has_muted_post

    @property
    def user_has_rated(self):
        """Gets the user_has_rated of this ForumPostResponse.


        :return: The user_has_rated of this ForumPostResponse.
        :rtype: bool
        """
        return self._user_has_rated

    @user_has_rated.setter
    def user_has_rated(self, user_has_rated):
        """Sets the user_has_rated of this ForumPostResponse.


        :param user_has_rated: The user_has_rated of this ForumPostResponse.
        :type user_has_rated: bool
        """

        self._user_has_rated = user_has_rated

    @property
    def user_rating(self):
        """Gets the user_rating of this ForumPostResponse.


        :return: The user_rating of this ForumPostResponse.
        :rtype: int
        """
        return self._user_rating

    @user_rating.setter
    def user_rating(self, user_rating):
        """Sets the user_rating of this ForumPostResponse.


        :param user_rating: The user_rating of this ForumPostResponse.
        :type user_rating: int
        """

        self._user_rating = user_rating
