# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_destiny_progression import DestinyDestinyProgression
from openapi_server.models.destiny_destiny_talent_node import DestinyDestinyTalentNode
from openapi_server import util


class DestinyEntitiesItemsDestinyItemTalentGridComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, grid_progression: DestinyDestinyProgression=None, is_grid_complete: bool=None, nodes: List[DestinyDestinyTalentNode]=None, talent_grid_hash: int=None):
        """DestinyEntitiesItemsDestinyItemTalentGridComponent - a model defined in OpenAPI

        :param grid_progression: The grid_progression of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :param is_grid_complete: The is_grid_complete of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :param nodes: The nodes of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :param talent_grid_hash: The talent_grid_hash of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        """
        self.openapi_types = {
            'grid_progression': DestinyDestinyProgression,
            'is_grid_complete': bool,
            'nodes': List[DestinyDestinyTalentNode],
            'talent_grid_hash': int
        }

        self.attribute_map = {
            'grid_progression': 'gridProgression',
            'is_grid_complete': 'isGridComplete',
            'nodes': 'nodes',
            'talent_grid_hash': 'talentGridHash'
        }

        self._grid_progression = grid_progression
        self._is_grid_complete = is_grid_complete
        self._nodes = nodes
        self._talent_grid_hash = talent_grid_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyEntitiesItemsDestinyItemTalentGridComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Entities.Items.DestinyItemTalentGridComponent of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grid_progression(self):
        """Gets the grid_progression of this DestinyEntitiesItemsDestinyItemTalentGridComponent.

        If the item has a progression, it will be detailed here. A progression means that the item can gain experience. Thresholds of experience are what determines whether and when a talent node can be activated.

        :return: The grid_progression of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :rtype: DestinyDestinyProgression
        """
        return self._grid_progression

    @grid_progression.setter
    def grid_progression(self, grid_progression):
        """Sets the grid_progression of this DestinyEntitiesItemsDestinyItemTalentGridComponent.

        If the item has a progression, it will be detailed here. A progression means that the item can gain experience. Thresholds of experience are what determines whether and when a talent node can be activated.

        :param grid_progression: The grid_progression of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :type grid_progression: DestinyDestinyProgression
        """

        self._grid_progression = grid_progression

    @property
    def is_grid_complete(self):
        """Gets the is_grid_complete of this DestinyEntitiesItemsDestinyItemTalentGridComponent.

        Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.  Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive set has an activated node, and every non-exclusive set node has been activated)

        :return: The is_grid_complete of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :rtype: bool
        """
        return self._is_grid_complete

    @is_grid_complete.setter
    def is_grid_complete(self, is_grid_complete):
        """Sets the is_grid_complete of this DestinyEntitiesItemsDestinyItemTalentGridComponent.

        Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.  Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive set has an activated node, and every non-exclusive set node has been activated)

        :param is_grid_complete: The is_grid_complete of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :type is_grid_complete: bool
        """

        self._is_grid_complete = is_grid_complete

    @property
    def nodes(self):
        """Gets the nodes of this DestinyEntitiesItemsDestinyItemTalentGridComponent.

        Detailed information about the individual nodes in the talent grid.  A node represents a single visual \"pip\" in the talent grid or Build detail view, though each node may have multiple \"steps\" which indicate the actual bonuses and visual representation of that node.

        :return: The nodes of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :rtype: List[DestinyDestinyTalentNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this DestinyEntitiesItemsDestinyItemTalentGridComponent.

        Detailed information about the individual nodes in the talent grid.  A node represents a single visual \"pip\" in the talent grid or Build detail view, though each node may have multiple \"steps\" which indicate the actual bonuses and visual representation of that node.

        :param nodes: The nodes of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :type nodes: List[DestinyDestinyTalentNode]
        """

        self._nodes = nodes

    @property
    def talent_grid_hash(self):
        """Gets the talent_grid_hash of this DestinyEntitiesItemsDestinyItemTalentGridComponent.

        Most items don't have useful talent grids anymore, but Builds in particular still do.  You can use this hash to lookup the DestinyTalentGridDefinition attached to this item, which will be crucial for understanding the node values on the item.

        :return: The talent_grid_hash of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :rtype: int
        """
        return self._talent_grid_hash

    @talent_grid_hash.setter
    def talent_grid_hash(self, talent_grid_hash):
        """Sets the talent_grid_hash of this DestinyEntitiesItemsDestinyItemTalentGridComponent.

        Most items don't have useful talent grids anymore, but Builds in particular still do.  You can use this hash to lookup the DestinyTalentGridDefinition attached to this item, which will be crucial for understanding the node values on the item.

        :param talent_grid_hash: The talent_grid_hash of this DestinyEntitiesItemsDestinyItemTalentGridComponent.
        :type talent_grid_hash: int
        """

        self._talent_grid_hash = talent_grid_hash
