# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_milestones_destiny_milestone_activity_completion_status import DestinyMilestonesDestinyMilestoneActivityCompletionStatus
from openapi_server import util


class DestinyMilestonesDestinyMilestoneActivityVariant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_hash: int=None, activity_mode_hash: int=None, activity_mode_type: int=None, completion_status: DestinyMilestonesDestinyMilestoneActivityCompletionStatus=None):
        """DestinyMilestonesDestinyMilestoneActivityVariant - a model defined in OpenAPI

        :param activity_hash: The activity_hash of this DestinyMilestonesDestinyMilestoneActivityVariant.
        :param activity_mode_hash: The activity_mode_hash of this DestinyMilestonesDestinyMilestoneActivityVariant.
        :param activity_mode_type: The activity_mode_type of this DestinyMilestonesDestinyMilestoneActivityVariant.
        :param completion_status: The completion_status of this DestinyMilestonesDestinyMilestoneActivityVariant.
        """
        self.openapi_types = {
            'activity_hash': int,
            'activity_mode_hash': int,
            'activity_mode_type': int,
            'completion_status': DestinyMilestonesDestinyMilestoneActivityCompletionStatus
        }

        self.attribute_map = {
            'activity_hash': 'activityHash',
            'activity_mode_hash': 'activityModeHash',
            'activity_mode_type': 'activityModeType',
            'completion_status': 'completionStatus'
        }

        self._activity_hash = activity_hash
        self._activity_mode_hash = activity_mode_hash
        self._activity_mode_type = activity_mode_type
        self._completion_status = completion_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyMilestonesDestinyMilestoneActivityVariant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Milestones.DestinyMilestoneActivityVariant of this DestinyMilestonesDestinyMilestoneActivityVariant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_hash(self):
        """Gets the activity_hash of this DestinyMilestonesDestinyMilestoneActivityVariant.

        The hash for the specific variant of the activity related to this milestone. You can pull more detailed static info from the DestinyActivityDefinition, such as difficulty level.

        :return: The activity_hash of this DestinyMilestonesDestinyMilestoneActivityVariant.
        :rtype: int
        """
        return self._activity_hash

    @activity_hash.setter
    def activity_hash(self, activity_hash):
        """Sets the activity_hash of this DestinyMilestonesDestinyMilestoneActivityVariant.

        The hash for the specific variant of the activity related to this milestone. You can pull more detailed static info from the DestinyActivityDefinition, such as difficulty level.

        :param activity_hash: The activity_hash of this DestinyMilestonesDestinyMilestoneActivityVariant.
        :type activity_hash: int
        """

        self._activity_hash = activity_hash

    @property
    def activity_mode_hash(self):
        """Gets the activity_mode_hash of this DestinyMilestonesDestinyMilestoneActivityVariant.

        The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.

        :return: The activity_mode_hash of this DestinyMilestonesDestinyMilestoneActivityVariant.
        :rtype: int
        """
        return self._activity_mode_hash

    @activity_mode_hash.setter
    def activity_mode_hash(self, activity_mode_hash):
        """Sets the activity_mode_hash of this DestinyMilestonesDestinyMilestoneActivityVariant.

        The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.

        :param activity_mode_hash: The activity_mode_hash of this DestinyMilestonesDestinyMilestoneActivityVariant.
        :type activity_mode_hash: int
        """

        self._activity_mode_hash = activity_mode_hash

    @property
    def activity_mode_type(self):
        """Gets the activity_mode_type of this DestinyMilestonesDestinyMilestoneActivityVariant.

        The enumeration equivalent of the most specific Activity Mode under which this activity is played.

        :return: The activity_mode_type of this DestinyMilestonesDestinyMilestoneActivityVariant.
        :rtype: int
        """
        return self._activity_mode_type

    @activity_mode_type.setter
    def activity_mode_type(self, activity_mode_type):
        """Sets the activity_mode_type of this DestinyMilestonesDestinyMilestoneActivityVariant.

        The enumeration equivalent of the most specific Activity Mode under which this activity is played.

        :param activity_mode_type: The activity_mode_type of this DestinyMilestonesDestinyMilestoneActivityVariant.
        :type activity_mode_type: int
        """
        allowed_values = [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91]  # noqa: E501
        if activity_mode_type not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_mode_type` ({0}), must be one of {1}"
                .format(activity_mode_type, allowed_values)
            )

        self._activity_mode_type = activity_mode_type

    @property
    def completion_status(self):
        """Gets the completion_status of this DestinyMilestonesDestinyMilestoneActivityVariant.

        An OPTIONAL component: if it makes sense to talk about this activity variant in terms of whether or not it has been completed or what progress you have made in it, this will be returned. Otherwise, this will be NULL.

        :return: The completion_status of this DestinyMilestonesDestinyMilestoneActivityVariant.
        :rtype: DestinyMilestonesDestinyMilestoneActivityCompletionStatus
        """
        return self._completion_status

    @completion_status.setter
    def completion_status(self, completion_status):
        """Sets the completion_status of this DestinyMilestonesDestinyMilestoneActivityVariant.

        An OPTIONAL component: if it makes sense to talk about this activity variant in terms of whether or not it has been completed or what progress you have made in it, this will be returned. Otherwise, this will be NULL.

        :param completion_status: The completion_status of this DestinyMilestonesDestinyMilestoneActivityVariant.
        :type completion_status: DestinyMilestonesDestinyMilestoneActivityCompletionStatus
        """

        self._completion_status = completion_status
