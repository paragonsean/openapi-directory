# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server.models.destiny_definitions_common_destiny_position_definition import DestinyDefinitionsCommonDestinyPositionDefinition
from openapi_server.models.destiny_definitions_director_destiny_activity_graph_node_activity_definition import DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition
from openapi_server.models.destiny_definitions_director_destiny_activity_graph_node_featuring_state_definition import DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition
from openapi_server.models.destiny_definitions_director_destiny_activity_graph_node_state_entry import DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry
from openapi_server import util


class DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activities: List[DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition]=None, featuring_states: List[DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition]=None, node_id: int=None, override_display: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, position: DestinyDefinitionsCommonDestinyPositionDefinition=None, states: List[DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry]=None):
        """DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition - a model defined in OpenAPI

        :param activities: The activities of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :param featuring_states: The featuring_states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :param node_id: The node_id of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :param override_display: The override_display of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :param position: The position of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :param states: The states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        """
        self.openapi_types = {
            'activities': List[DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition],
            'featuring_states': List[DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition],
            'node_id': int,
            'override_display': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'position': DestinyDefinitionsCommonDestinyPositionDefinition,
            'states': List[DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry]
        }

        self.attribute_map = {
            'activities': 'activities',
            'featuring_states': 'featuringStates',
            'node_id': 'nodeId',
            'override_display': 'overrideDisplay',
            'position': 'position',
            'states': 'states'
        }

        self._activities = activities
        self._featuring_states = featuring_states
        self._node_id = node_id
        self._override_display = override_display
        self._position = position
        self._states = states

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.Director.DestinyActivityGraphNodeDefinition of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activities(self):
        """Gets the activities of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.

        The node may have various possible activities that could be active for it, however only one may be active at a time. See the DestinyActivityGraphNodeActivityDefinition for details.

        :return: The activities of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :rtype: List[DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.

        The node may have various possible activities that could be active for it, however only one may be active at a time. See the DestinyActivityGraphNodeActivityDefinition for details.

        :param activities: The activities of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :type activities: List[DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition]
        """

        self._activities = activities

    @property
    def featuring_states(self):
        """Gets the featuring_states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.

        The node may have various visual accents placed on it, or styles applied. These are the list of possible styles that the Node can have. The game iterates through each, looking for the first one that passes a check of the required game/character/account state in order to show that style, and then renders the node in that style.

        :return: The featuring_states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :rtype: List[DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition]
        """
        return self._featuring_states

    @featuring_states.setter
    def featuring_states(self, featuring_states):
        """Sets the featuring_states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.

        The node may have various visual accents placed on it, or styles applied. These are the list of possible styles that the Node can have. The game iterates through each, looking for the first one that passes a check of the required game/character/account state in order to show that style, and then renders the node in that style.

        :param featuring_states: The featuring_states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :type featuring_states: List[DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition]
        """

        self._featuring_states = featuring_states

    @property
    def node_id(self):
        """Gets the node_id of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.

        An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.

        :return: The node_id of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.

        An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.

        :param node_id: The node_id of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :type node_id: int
        """

        self._node_id = node_id

    @property
    def override_display(self):
        """Gets the override_display of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.

        The node *may* have display properties that override the active Activity's display properties.

        :return: The override_display of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._override_display

    @override_display.setter
    def override_display(self, override_display):
        """Sets the override_display of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.

        The node *may* have display properties that override the active Activity's display properties.

        :param override_display: The override_display of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :type override_display: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._override_display = override_display

    @property
    def position(self):
        """Gets the position of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.

        The position on the map for this node.

        :return: The position of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :rtype: DestinyDefinitionsCommonDestinyPositionDefinition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.

        The position on the map for this node.

        :param position: The position of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :type position: DestinyDefinitionsCommonDestinyPositionDefinition
        """

        self._position = position

    @property
    def states(self):
        """Gets the states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.

        Represents possible states that the graph node can be in. These are combined with some checking that happens in the game client and server to determine which state is actually active at any given time.

        :return: The states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :rtype: List[DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.

        Represents possible states that the graph node can be in. These are combined with some checking that happens in the game client and server to determine which state is actually active at any given time.

        :param states: The states of this DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.
        :type states: List[DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry]
        """

        self._states = states
