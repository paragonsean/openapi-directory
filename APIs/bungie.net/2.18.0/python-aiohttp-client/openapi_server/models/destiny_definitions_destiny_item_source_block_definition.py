# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_destiny_item_vendor_source_reference import DestinyDefinitionsDestinyItemVendorSourceReference
from openapi_server.models.destiny_definitions_sources_destiny_item_source_definition import DestinyDefinitionsSourcesDestinyItemSourceDefinition
from openapi_server import util


class DestinyDefinitionsDestinyItemSourceBlockDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclusive: int=None, source_hashes: List[int]=None, sources: List[DestinyDefinitionsSourcesDestinyItemSourceDefinition]=None, vendor_sources: List[DestinyDefinitionsDestinyItemVendorSourceReference]=None):
        """DestinyDefinitionsDestinyItemSourceBlockDefinition - a model defined in OpenAPI

        :param exclusive: The exclusive of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        :param source_hashes: The source_hashes of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        :param sources: The sources of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        :param vendor_sources: The vendor_sources of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        """
        self.openapi_types = {
            'exclusive': int,
            'source_hashes': List[int],
            'sources': List[DestinyDefinitionsSourcesDestinyItemSourceDefinition],
            'vendor_sources': List[DestinyDefinitionsDestinyItemVendorSourceReference]
        }

        self.attribute_map = {
            'exclusive': 'exclusive',
            'source_hashes': 'sourceHashes',
            'sources': 'sources',
            'vendor_sources': 'vendorSources'
        }

        self._exclusive = exclusive
        self._source_hashes = source_hashes
        self._sources = sources
        self._vendor_sources = vendor_sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyItemSourceBlockDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyItemSourceBlockDefinition of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclusive(self):
        """Gets the exclusive of this DestinyDefinitionsDestinyItemSourceBlockDefinition.

        If we found that this item is exclusive to a specific platform, this will be set to the BungieMembershipType enumeration that matches that platform.

        :return: The exclusive of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        :rtype: int
        """
        return self._exclusive

    @exclusive.setter
    def exclusive(self, exclusive):
        """Sets the exclusive of this DestinyDefinitionsDestinyItemSourceBlockDefinition.

        If we found that this item is exclusive to a specific platform, this will be set to the BungieMembershipType enumeration that matches that platform.

        :param exclusive: The exclusive of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        :type exclusive: int
        """

        self._exclusive = exclusive

    @property
    def source_hashes(self):
        """Gets the source_hashes of this DestinyDefinitionsDestinyItemSourceBlockDefinition.

        The list of hash identifiers for Reward Sources that hint where the item can be found (DestinyRewardSourceDefinition).

        :return: The source_hashes of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        :rtype: List[int]
        """
        return self._source_hashes

    @source_hashes.setter
    def source_hashes(self, source_hashes):
        """Sets the source_hashes of this DestinyDefinitionsDestinyItemSourceBlockDefinition.

        The list of hash identifiers for Reward Sources that hint where the item can be found (DestinyRewardSourceDefinition).

        :param source_hashes: The source_hashes of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        :type source_hashes: List[int]
        """

        self._source_hashes = source_hashes

    @property
    def sources(self):
        """Gets the sources of this DestinyDefinitionsDestinyItemSourceBlockDefinition.

        A collection of details about the stats that were computed for the ways we found that the item could be spawned.

        :return: The sources of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        :rtype: List[DestinyDefinitionsSourcesDestinyItemSourceDefinition]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this DestinyDefinitionsDestinyItemSourceBlockDefinition.

        A collection of details about the stats that were computed for the ways we found that the item could be spawned.

        :param sources: The sources of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        :type sources: List[DestinyDefinitionsSourcesDestinyItemSourceDefinition]
        """

        self._sources = sources

    @property
    def vendor_sources(self):
        """Gets the vendor_sources of this DestinyDefinitionsDestinyItemSourceBlockDefinition.

        A denormalized reference back to vendors that potentially sell this item.

        :return: The vendor_sources of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        :rtype: List[DestinyDefinitionsDestinyItemVendorSourceReference]
        """
        return self._vendor_sources

    @vendor_sources.setter
    def vendor_sources(self, vendor_sources):
        """Sets the vendor_sources of this DestinyDefinitionsDestinyItemSourceBlockDefinition.

        A denormalized reference back to vendors that potentially sell this item.

        :param vendor_sources: The vendor_sources of this DestinyDefinitionsDestinyItemSourceBlockDefinition.
        :type vendor_sources: List[DestinyDefinitionsDestinyItemVendorSourceReference]
        """

        self._vendor_sources = vendor_sources
