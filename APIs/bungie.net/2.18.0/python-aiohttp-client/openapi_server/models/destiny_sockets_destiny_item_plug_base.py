# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinySocketsDestinyItemPlugBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_insert: bool=None, enable_fail_indexes: List[int]=None, enabled: bool=None, insert_fail_indexes: List[int]=None, plug_item_hash: int=None):
        """DestinySocketsDestinyItemPlugBase - a model defined in OpenAPI

        :param can_insert: The can_insert of this DestinySocketsDestinyItemPlugBase.
        :param enable_fail_indexes: The enable_fail_indexes of this DestinySocketsDestinyItemPlugBase.
        :param enabled: The enabled of this DestinySocketsDestinyItemPlugBase.
        :param insert_fail_indexes: The insert_fail_indexes of this DestinySocketsDestinyItemPlugBase.
        :param plug_item_hash: The plug_item_hash of this DestinySocketsDestinyItemPlugBase.
        """
        self.openapi_types = {
            'can_insert': bool,
            'enable_fail_indexes': List[int],
            'enabled': bool,
            'insert_fail_indexes': List[int],
            'plug_item_hash': int
        }

        self.attribute_map = {
            'can_insert': 'canInsert',
            'enable_fail_indexes': 'enableFailIndexes',
            'enabled': 'enabled',
            'insert_fail_indexes': 'insertFailIndexes',
            'plug_item_hash': 'plugItemHash'
        }

        self._can_insert = can_insert
        self._enable_fail_indexes = enable_fail_indexes
        self._enabled = enabled
        self._insert_fail_indexes = insert_fail_indexes
        self._plug_item_hash = plug_item_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinySocketsDestinyItemPlugBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Sockets.DestinyItemPlugBase of this DestinySocketsDestinyItemPlugBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_insert(self):
        """Gets the can_insert of this DestinySocketsDestinyItemPlugBase.

        If true, this plug has met all of its insertion requirements. Big if true.

        :return: The can_insert of this DestinySocketsDestinyItemPlugBase.
        :rtype: bool
        """
        return self._can_insert

    @can_insert.setter
    def can_insert(self, can_insert):
        """Sets the can_insert of this DestinySocketsDestinyItemPlugBase.

        If true, this plug has met all of its insertion requirements. Big if true.

        :param can_insert: The can_insert of this DestinySocketsDestinyItemPlugBase.
        :type can_insert: bool
        """

        self._can_insert = can_insert

    @property
    def enable_fail_indexes(self):
        """Gets the enable_fail_indexes of this DestinySocketsDestinyItemPlugBase.

        If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.  This list will be empty if the plug is enabled.

        :return: The enable_fail_indexes of this DestinySocketsDestinyItemPlugBase.
        :rtype: List[int]
        """
        return self._enable_fail_indexes

    @enable_fail_indexes.setter
    def enable_fail_indexes(self, enable_fail_indexes):
        """Sets the enable_fail_indexes of this DestinySocketsDestinyItemPlugBase.

        If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.  This list will be empty if the plug is enabled.

        :param enable_fail_indexes: The enable_fail_indexes of this DestinySocketsDestinyItemPlugBase.
        :type enable_fail_indexes: List[int]
        """

        self._enable_fail_indexes = enable_fail_indexes

    @property
    def enabled(self):
        """Gets the enabled of this DestinySocketsDestinyItemPlugBase.

        If true, this plug will provide its benefits while inserted.

        :return: The enabled of this DestinySocketsDestinyItemPlugBase.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DestinySocketsDestinyItemPlugBase.

        If true, this plug will provide its benefits while inserted.

        :param enabled: The enabled of this DestinySocketsDestinyItemPlugBase.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def insert_fail_indexes(self):
        """Gets the insert_fail_indexes of this DestinySocketsDestinyItemPlugBase.

        If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.  This list will be empty if the plug can be inserted.

        :return: The insert_fail_indexes of this DestinySocketsDestinyItemPlugBase.
        :rtype: List[int]
        """
        return self._insert_fail_indexes

    @insert_fail_indexes.setter
    def insert_fail_indexes(self, insert_fail_indexes):
        """Sets the insert_fail_indexes of this DestinySocketsDestinyItemPlugBase.

        If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.  This list will be empty if the plug can be inserted.

        :param insert_fail_indexes: The insert_fail_indexes of this DestinySocketsDestinyItemPlugBase.
        :type insert_fail_indexes: List[int]
        """

        self._insert_fail_indexes = insert_fail_indexes

    @property
    def plug_item_hash(self):
        """Gets the plug_item_hash of this DestinySocketsDestinyItemPlugBase.

        The hash identifier of the DestinyInventoryItemDefinition that represents this plug.

        :return: The plug_item_hash of this DestinySocketsDestinyItemPlugBase.
        :rtype: int
        """
        return self._plug_item_hash

    @plug_item_hash.setter
    def plug_item_hash(self, plug_item_hash):
        """Sets the plug_item_hash of this DestinySocketsDestinyItemPlugBase.

        The hash identifier of the DestinyInventoryItemDefinition that represents this plug.

        :param plug_item_hash: The plug_item_hash of this DestinySocketsDestinyItemPlugBase.
        :type plug_item_hash: int
        """

        self._plug_item_hash = plug_item_hash
