# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.single_component_response_of_destiny_item_component import SingleComponentResponseOfDestinyItemComponent
from openapi_server.models.single_component_response_of_destiny_item_instance_component import SingleComponentResponseOfDestinyItemInstanceComponent
from openapi_server.models.single_component_response_of_destiny_item_objectives_component import SingleComponentResponseOfDestinyItemObjectivesComponent
from openapi_server.models.single_component_response_of_destiny_item_perks_component import SingleComponentResponseOfDestinyItemPerksComponent
from openapi_server.models.single_component_response_of_destiny_item_plug_objectives_component import SingleComponentResponseOfDestinyItemPlugObjectivesComponent
from openapi_server.models.single_component_response_of_destiny_item_render_component import SingleComponentResponseOfDestinyItemRenderComponent
from openapi_server.models.single_component_response_of_destiny_item_reusable_plugs_component import SingleComponentResponseOfDestinyItemReusablePlugsComponent
from openapi_server.models.single_component_response_of_destiny_item_sockets_component import SingleComponentResponseOfDestinyItemSocketsComponent
from openapi_server.models.single_component_response_of_destiny_item_stats_component import SingleComponentResponseOfDestinyItemStatsComponent
from openapi_server.models.single_component_response_of_destiny_item_talent_grid_component import SingleComponentResponseOfDestinyItemTalentGridComponent
from openapi_server import util


class DestinyResponsesDestinyItemResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_id: int=None, instance: SingleComponentResponseOfDestinyItemInstanceComponent=None, item: SingleComponentResponseOfDestinyItemComponent=None, objectives: SingleComponentResponseOfDestinyItemObjectivesComponent=None, perks: SingleComponentResponseOfDestinyItemPerksComponent=None, plug_objectives: SingleComponentResponseOfDestinyItemPlugObjectivesComponent=None, render_data: SingleComponentResponseOfDestinyItemRenderComponent=None, reusable_plugs: SingleComponentResponseOfDestinyItemReusablePlugsComponent=None, sockets: SingleComponentResponseOfDestinyItemSocketsComponent=None, stats: SingleComponentResponseOfDestinyItemStatsComponent=None, talent_grid: SingleComponentResponseOfDestinyItemTalentGridComponent=None):
        """DestinyResponsesDestinyItemResponse - a model defined in OpenAPI

        :param character_id: The character_id of this DestinyResponsesDestinyItemResponse.
        :param instance: The instance of this DestinyResponsesDestinyItemResponse.
        :param item: The item of this DestinyResponsesDestinyItemResponse.
        :param objectives: The objectives of this DestinyResponsesDestinyItemResponse.
        :param perks: The perks of this DestinyResponsesDestinyItemResponse.
        :param plug_objectives: The plug_objectives of this DestinyResponsesDestinyItemResponse.
        :param render_data: The render_data of this DestinyResponsesDestinyItemResponse.
        :param reusable_plugs: The reusable_plugs of this DestinyResponsesDestinyItemResponse.
        :param sockets: The sockets of this DestinyResponsesDestinyItemResponse.
        :param stats: The stats of this DestinyResponsesDestinyItemResponse.
        :param talent_grid: The talent_grid of this DestinyResponsesDestinyItemResponse.
        """
        self.openapi_types = {
            'character_id': int,
            'instance': SingleComponentResponseOfDestinyItemInstanceComponent,
            'item': SingleComponentResponseOfDestinyItemComponent,
            'objectives': SingleComponentResponseOfDestinyItemObjectivesComponent,
            'perks': SingleComponentResponseOfDestinyItemPerksComponent,
            'plug_objectives': SingleComponentResponseOfDestinyItemPlugObjectivesComponent,
            'render_data': SingleComponentResponseOfDestinyItemRenderComponent,
            'reusable_plugs': SingleComponentResponseOfDestinyItemReusablePlugsComponent,
            'sockets': SingleComponentResponseOfDestinyItemSocketsComponent,
            'stats': SingleComponentResponseOfDestinyItemStatsComponent,
            'talent_grid': SingleComponentResponseOfDestinyItemTalentGridComponent
        }

        self.attribute_map = {
            'character_id': 'characterId',
            'instance': 'instance',
            'item': 'item',
            'objectives': 'objectives',
            'perks': 'perks',
            'plug_objectives': 'plugObjectives',
            'render_data': 'renderData',
            'reusable_plugs': 'reusablePlugs',
            'sockets': 'sockets',
            'stats': 'stats',
            'talent_grid': 'talentGrid'
        }

        self._character_id = character_id
        self._instance = instance
        self._item = item
        self._objectives = objectives
        self._perks = perks
        self._plug_objectives = plug_objectives
        self._render_data = render_data
        self._reusable_plugs = reusable_plugs
        self._sockets = sockets
        self._stats = stats
        self._talent_grid = talent_grid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyResponsesDestinyItemResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Responses.DestinyItemResponse of this DestinyResponsesDestinyItemResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_id(self):
        """Gets the character_id of this DestinyResponsesDestinyItemResponse.

        If the item is on a character, this will return the ID of the character that is holding the item.

        :return: The character_id of this DestinyResponsesDestinyItemResponse.
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this DestinyResponsesDestinyItemResponse.

        If the item is on a character, this will return the ID of the character that is holding the item.

        :param character_id: The character_id of this DestinyResponsesDestinyItemResponse.
        :type character_id: int
        """

        self._character_id = character_id

    @property
    def instance(self):
        """Gets the instance of this DestinyResponsesDestinyItemResponse.

        Basic instance data for the item.  COMPONENT TYPE: ItemInstances

        :return: The instance of this DestinyResponsesDestinyItemResponse.
        :rtype: SingleComponentResponseOfDestinyItemInstanceComponent
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this DestinyResponsesDestinyItemResponse.

        Basic instance data for the item.  COMPONENT TYPE: ItemInstances

        :param instance: The instance of this DestinyResponsesDestinyItemResponse.
        :type instance: SingleComponentResponseOfDestinyItemInstanceComponent
        """

        self._instance = instance

    @property
    def item(self):
        """Gets the item of this DestinyResponsesDestinyItemResponse.

        Common data for the item relevant to its non-instanced properties.  COMPONENT TYPE: ItemCommonData

        :return: The item of this DestinyResponsesDestinyItemResponse.
        :rtype: SingleComponentResponseOfDestinyItemComponent
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this DestinyResponsesDestinyItemResponse.

        Common data for the item relevant to its non-instanced properties.  COMPONENT TYPE: ItemCommonData

        :param item: The item of this DestinyResponsesDestinyItemResponse.
        :type item: SingleComponentResponseOfDestinyItemComponent
        """

        self._item = item

    @property
    def objectives(self):
        """Gets the objectives of this DestinyResponsesDestinyItemResponse.

        Information specifically about the item's objectives.  COMPONENT TYPE: ItemObjectives

        :return: The objectives of this DestinyResponsesDestinyItemResponse.
        :rtype: SingleComponentResponseOfDestinyItemObjectivesComponent
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """Sets the objectives of this DestinyResponsesDestinyItemResponse.

        Information specifically about the item's objectives.  COMPONENT TYPE: ItemObjectives

        :param objectives: The objectives of this DestinyResponsesDestinyItemResponse.
        :type objectives: SingleComponentResponseOfDestinyItemObjectivesComponent
        """

        self._objectives = objectives

    @property
    def perks(self):
        """Gets the perks of this DestinyResponsesDestinyItemResponse.

        Information specifically about the perks currently active on the item.  COMPONENT TYPE: ItemPerks

        :return: The perks of this DestinyResponsesDestinyItemResponse.
        :rtype: SingleComponentResponseOfDestinyItemPerksComponent
        """
        return self._perks

    @perks.setter
    def perks(self, perks):
        """Sets the perks of this DestinyResponsesDestinyItemResponse.

        Information specifically about the perks currently active on the item.  COMPONENT TYPE: ItemPerks

        :param perks: The perks of this DestinyResponsesDestinyItemResponse.
        :type perks: SingleComponentResponseOfDestinyItemPerksComponent
        """

        self._perks = perks

    @property
    def plug_objectives(self):
        """Gets the plug_objectives of this DestinyResponsesDestinyItemResponse.

        Information about objectives on Plugs for a given item. See the component's documentation for more info.  COMPONENT TYPE: ItemPlugObjectives

        :return: The plug_objectives of this DestinyResponsesDestinyItemResponse.
        :rtype: SingleComponentResponseOfDestinyItemPlugObjectivesComponent
        """
        return self._plug_objectives

    @plug_objectives.setter
    def plug_objectives(self, plug_objectives):
        """Sets the plug_objectives of this DestinyResponsesDestinyItemResponse.

        Information about objectives on Plugs for a given item. See the component's documentation for more info.  COMPONENT TYPE: ItemPlugObjectives

        :param plug_objectives: The plug_objectives of this DestinyResponsesDestinyItemResponse.
        :type plug_objectives: SingleComponentResponseOfDestinyItemPlugObjectivesComponent
        """

        self._plug_objectives = plug_objectives

    @property
    def render_data(self):
        """Gets the render_data of this DestinyResponsesDestinyItemResponse.

        Information about how to render the item in 3D.  COMPONENT TYPE: ItemRenderData

        :return: The render_data of this DestinyResponsesDestinyItemResponse.
        :rtype: SingleComponentResponseOfDestinyItemRenderComponent
        """
        return self._render_data

    @render_data.setter
    def render_data(self, render_data):
        """Sets the render_data of this DestinyResponsesDestinyItemResponse.

        Information about how to render the item in 3D.  COMPONENT TYPE: ItemRenderData

        :param render_data: The render_data of this DestinyResponsesDestinyItemResponse.
        :type render_data: SingleComponentResponseOfDestinyItemRenderComponent
        """

        self._render_data = render_data

    @property
    def reusable_plugs(self):
        """Gets the reusable_plugs of this DestinyResponsesDestinyItemResponse.

        Information about the Reusable Plugs for sockets on an item. These are plugs that you can insert into the given socket regardless of if you actually own an instance of that plug: they are logic-driven plugs rather than inventory-driven.   These may need to be combined with Plug Set component data to get a full picture of available plugs on a given socket.   COMPONENT TYPE: ItemReusablePlugs

        :return: The reusable_plugs of this DestinyResponsesDestinyItemResponse.
        :rtype: SingleComponentResponseOfDestinyItemReusablePlugsComponent
        """
        return self._reusable_plugs

    @reusable_plugs.setter
    def reusable_plugs(self, reusable_plugs):
        """Sets the reusable_plugs of this DestinyResponsesDestinyItemResponse.

        Information about the Reusable Plugs for sockets on an item. These are plugs that you can insert into the given socket regardless of if you actually own an instance of that plug: they are logic-driven plugs rather than inventory-driven.   These may need to be combined with Plug Set component data to get a full picture of available plugs on a given socket.   COMPONENT TYPE: ItemReusablePlugs

        :param reusable_plugs: The reusable_plugs of this DestinyResponsesDestinyItemResponse.
        :type reusable_plugs: SingleComponentResponseOfDestinyItemReusablePlugsComponent
        """

        self._reusable_plugs = reusable_plugs

    @property
    def sockets(self):
        """Gets the sockets of this DestinyResponsesDestinyItemResponse.

        Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.  COMPONENT TYPE: ItemSockets

        :return: The sockets of this DestinyResponsesDestinyItemResponse.
        :rtype: SingleComponentResponseOfDestinyItemSocketsComponent
        """
        return self._sockets

    @sockets.setter
    def sockets(self, sockets):
        """Sets the sockets of this DestinyResponsesDestinyItemResponse.

        Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.  COMPONENT TYPE: ItemSockets

        :param sockets: The sockets of this DestinyResponsesDestinyItemResponse.
        :type sockets: SingleComponentResponseOfDestinyItemSocketsComponent
        """

        self._sockets = sockets

    @property
    def stats(self):
        """Gets the stats of this DestinyResponsesDestinyItemResponse.

        Information about the computed stats of the item: power, defense, etc...  COMPONENT TYPE: ItemStats

        :return: The stats of this DestinyResponsesDestinyItemResponse.
        :rtype: SingleComponentResponseOfDestinyItemStatsComponent
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this DestinyResponsesDestinyItemResponse.

        Information about the computed stats of the item: power, defense, etc...  COMPONENT TYPE: ItemStats

        :param stats: The stats of this DestinyResponsesDestinyItemResponse.
        :type stats: SingleComponentResponseOfDestinyItemStatsComponent
        """

        self._stats = stats

    @property
    def talent_grid(self):
        """Gets the talent_grid of this DestinyResponsesDestinyItemResponse.

        Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character's \"Builds\".  COMPONENT TYPE: ItemTalentGrids

        :return: The talent_grid of this DestinyResponsesDestinyItemResponse.
        :rtype: SingleComponentResponseOfDestinyItemTalentGridComponent
        """
        return self._talent_grid

    @talent_grid.setter
    def talent_grid(self, talent_grid):
        """Sets the talent_grid of this DestinyResponsesDestinyItemResponse.

        Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character's \"Builds\".  COMPONENT TYPE: ItemTalentGrids

        :param talent_grid: The talent_grid of this DestinyResponsesDestinyItemResponse.
        :type talent_grid: SingleComponentResponseOfDestinyItemTalentGridComponent
        """

        self._talent_grid = talent_grid
