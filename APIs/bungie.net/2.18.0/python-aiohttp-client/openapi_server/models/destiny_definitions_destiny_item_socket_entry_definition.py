# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_destiny_item_socket_entry_plug_item_definition import DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition
from openapi_server import util


class DestinyDefinitionsDestinyItemSocketEntryDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_visible: bool=None, hide_perks_in_item_tooltip: bool=None, plug_sources: int=None, prevent_initialization_on_vendor_purchase: bool=None, randomized_plug_set_hash: int=None, reusable_plug_items: List[DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition]=None, reusable_plug_set_hash: int=None, single_initial_item_hash: int=None, socket_type_hash: int=None):
        """DestinyDefinitionsDestinyItemSocketEntryDefinition - a model defined in OpenAPI

        :param default_visible: The default_visible of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :param hide_perks_in_item_tooltip: The hide_perks_in_item_tooltip of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :param plug_sources: The plug_sources of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :param prevent_initialization_on_vendor_purchase: The prevent_initialization_on_vendor_purchase of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :param randomized_plug_set_hash: The randomized_plug_set_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :param reusable_plug_items: The reusable_plug_items of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :param reusable_plug_set_hash: The reusable_plug_set_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :param single_initial_item_hash: The single_initial_item_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :param socket_type_hash: The socket_type_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        """
        self.openapi_types = {
            'default_visible': bool,
            'hide_perks_in_item_tooltip': bool,
            'plug_sources': int,
            'prevent_initialization_on_vendor_purchase': bool,
            'randomized_plug_set_hash': int,
            'reusable_plug_items': List[DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition],
            'reusable_plug_set_hash': int,
            'single_initial_item_hash': int,
            'socket_type_hash': int
        }

        self.attribute_map = {
            'default_visible': 'defaultVisible',
            'hide_perks_in_item_tooltip': 'hidePerksInItemTooltip',
            'plug_sources': 'plugSources',
            'prevent_initialization_on_vendor_purchase': 'preventInitializationOnVendorPurchase',
            'randomized_plug_set_hash': 'randomizedPlugSetHash',
            'reusable_plug_items': 'reusablePlugItems',
            'reusable_plug_set_hash': 'reusablePlugSetHash',
            'single_initial_item_hash': 'singleInitialItemHash',
            'socket_type_hash': 'socketTypeHash'
        }

        self._default_visible = default_visible
        self._hide_perks_in_item_tooltip = hide_perks_in_item_tooltip
        self._plug_sources = plug_sources
        self._prevent_initialization_on_vendor_purchase = prevent_initialization_on_vendor_purchase
        self._randomized_plug_set_hash = randomized_plug_set_hash
        self._reusable_plug_items = reusable_plug_items
        self._reusable_plug_set_hash = reusable_plug_set_hash
        self._single_initial_item_hash = single_initial_item_hash
        self._socket_type_hash = socket_type_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyItemSocketEntryDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyItemSocketEntryDefinition of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_visible(self):
        """Gets the default_visible of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        If true, then this socket is visible in the item's \"default\" state. If you have an instance, you should always check the runtime state, as that can override this visibility setting: but if you're looking at the item on a conceptual level, this property can be useful for hiding data such as legacy sockets - which remain defined on items for infrastructure purposes, but can be confusing for users to see.

        :return: The default_visible of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :rtype: bool
        """
        return self._default_visible

    @default_visible.setter
    def default_visible(self, default_visible):
        """Sets the default_visible of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        If true, then this socket is visible in the item's \"default\" state. If you have an instance, you should always check the runtime state, as that can override this visibility setting: but if you're looking at the item on a conceptual level, this property can be useful for hiding data such as legacy sockets - which remain defined on items for infrastructure purposes, but can be confusing for users to see.

        :param default_visible: The default_visible of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :type default_visible: bool
        """

        self._default_visible = default_visible

    @property
    def hide_perks_in_item_tooltip(self):
        """Gets the hide_perks_in_item_tooltip of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        If this is true, the perks provided by this socket shouldn't be shown in the item's tooltip. This might be useful if it's providing a hidden bonus, or if the bonus is less important than other benefits on the item.

        :return: The hide_perks_in_item_tooltip of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :rtype: bool
        """
        return self._hide_perks_in_item_tooltip

    @hide_perks_in_item_tooltip.setter
    def hide_perks_in_item_tooltip(self, hide_perks_in_item_tooltip):
        """Sets the hide_perks_in_item_tooltip of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        If this is true, the perks provided by this socket shouldn't be shown in the item's tooltip. This might be useful if it's providing a hidden bonus, or if the bonus is less important than other benefits on the item.

        :param hide_perks_in_item_tooltip: The hide_perks_in_item_tooltip of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :type hide_perks_in_item_tooltip: bool
        """

        self._hide_perks_in_item_tooltip = hide_perks_in_item_tooltip

    @property
    def plug_sources(self):
        """Gets the plug_sources of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        Indicates where you should go to get plugs for this socket. This will affect how you populate your UI, as well as what plugs are valid for this socket. It's an alternative to having to check for the existence of certain properties (reusablePlugItems for example) to infer where plugs should come from.

        :return: The plug_sources of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :rtype: int
        """
        return self._plug_sources

    @plug_sources.setter
    def plug_sources(self, plug_sources):
        """Sets the plug_sources of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        Indicates where you should go to get plugs for this socket. This will affect how you populate your UI, as well as what plugs are valid for this socket. It's an alternative to having to check for the existence of certain properties (reusablePlugItems for example) to infer where plugs should come from.

        :param plug_sources: The plug_sources of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :type plug_sources: int
        """

        self._plug_sources = plug_sources

    @property
    def prevent_initialization_on_vendor_purchase(self):
        """Gets the prevent_initialization_on_vendor_purchase of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        If this is true, then the socket will not be initialized with a plug if the item is purchased from a Vendor.  Remember that Vendors are much more than conceptual vendors: they include \"Collection Kiosks\" and other entities. See DestinyVendorDefinition for more information.

        :return: The prevent_initialization_on_vendor_purchase of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :rtype: bool
        """
        return self._prevent_initialization_on_vendor_purchase

    @prevent_initialization_on_vendor_purchase.setter
    def prevent_initialization_on_vendor_purchase(self, prevent_initialization_on_vendor_purchase):
        """Sets the prevent_initialization_on_vendor_purchase of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        If this is true, then the socket will not be initialized with a plug if the item is purchased from a Vendor.  Remember that Vendors are much more than conceptual vendors: they include \"Collection Kiosks\" and other entities. See DestinyVendorDefinition for more information.

        :param prevent_initialization_on_vendor_purchase: The prevent_initialization_on_vendor_purchase of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :type prevent_initialization_on_vendor_purchase: bool
        """

        self._prevent_initialization_on_vendor_purchase = prevent_initialization_on_vendor_purchase

    @property
    def randomized_plug_set_hash(self):
        """Gets the randomized_plug_set_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        This field replaces \"randomizedPlugItems\" as of Shadowkeep launch. If a socket has randomized plugs, this is a pointer to the set of plugs that could be used, as defined in DestinyPlugSetDefinition.   If null, the item has no randomized plugs.

        :return: The randomized_plug_set_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :rtype: int
        """
        return self._randomized_plug_set_hash

    @randomized_plug_set_hash.setter
    def randomized_plug_set_hash(self, randomized_plug_set_hash):
        """Sets the randomized_plug_set_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        This field replaces \"randomizedPlugItems\" as of Shadowkeep launch. If a socket has randomized plugs, this is a pointer to the set of plugs that could be used, as defined in DestinyPlugSetDefinition.   If null, the item has no randomized plugs.

        :param randomized_plug_set_hash: The randomized_plug_set_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :type randomized_plug_set_hash: int
        """

        self._randomized_plug_set_hash = randomized_plug_set_hash

    @property
    def reusable_plug_items(self):
        """Gets the reusable_plug_items of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        This is a list of pre-determined plugs that can *always* be plugged into this socket, without the character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.

        :return: The reusable_plug_items of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :rtype: List[DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition]
        """
        return self._reusable_plug_items

    @reusable_plug_items.setter
    def reusable_plug_items(self, reusable_plug_items):
        """Sets the reusable_plug_items of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        This is a list of pre-determined plugs that can *always* be plugged into this socket, without the character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.

        :param reusable_plug_items: The reusable_plug_items of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :type reusable_plug_items: List[DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition]
        """

        self._reusable_plug_items = reusable_plug_items

    @property
    def reusable_plug_set_hash(self):
        """Gets the reusable_plug_set_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        If this socket's plugs come from a reusable DestinyPlugSetDefinition, this is the identifier for that set. We added this concept to reduce some major duplication that's going to come from sockets as replacements for what was once implemented as large sets of items and kiosks (like Emotes).   As of Shadowkeep, these will come up much more frequently and be driven by game content rather than custom curation.

        :return: The reusable_plug_set_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :rtype: int
        """
        return self._reusable_plug_set_hash

    @reusable_plug_set_hash.setter
    def reusable_plug_set_hash(self, reusable_plug_set_hash):
        """Sets the reusable_plug_set_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        If this socket's plugs come from a reusable DestinyPlugSetDefinition, this is the identifier for that set. We added this concept to reduce some major duplication that's going to come from sockets as replacements for what was once implemented as large sets of items and kiosks (like Emotes).   As of Shadowkeep, these will come up much more frequently and be driven by game content rather than custom curation.

        :param reusable_plug_set_hash: The reusable_plug_set_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :type reusable_plug_set_hash: int
        """

        self._reusable_plug_set_hash = reusable_plug_set_hash

    @property
    def single_initial_item_hash(self):
        """Gets the single_initial_item_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        If a valid hash, this is the hash identifier for the DestinyInventoryItemDefinition representing the Plug that will be initially inserted into the item on item creation. Otherwise, this Socket will either start without a plug inserted, or will have one randomly inserted.

        :return: The single_initial_item_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :rtype: int
        """
        return self._single_initial_item_hash

    @single_initial_item_hash.setter
    def single_initial_item_hash(self, single_initial_item_hash):
        """Sets the single_initial_item_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        If a valid hash, this is the hash identifier for the DestinyInventoryItemDefinition representing the Plug that will be initially inserted into the item on item creation. Otherwise, this Socket will either start without a plug inserted, or will have one randomly inserted.

        :param single_initial_item_hash: The single_initial_item_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :type single_initial_item_hash: int
        """

        self._single_initial_item_hash = single_initial_item_hash

    @property
    def socket_type_hash(self):
        """Gets the socket_type_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        All sockets have a type, and this is the hash identifier for this particular type. Use it to look up the DestinySocketTypeDefinition: read there for more information on how socket types affect the behavior of the socket.

        :return: The socket_type_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :rtype: int
        """
        return self._socket_type_hash

    @socket_type_hash.setter
    def socket_type_hash(self, socket_type_hash):
        """Sets the socket_type_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.

        All sockets have a type, and this is the hash identifier for this particular type. Use it to look up the DestinySocketTypeDefinition: read there for more information on how socket types affect the behavior of the socket.

        :param socket_type_hash: The socket_type_hash of this DestinyDefinitionsDestinyItemSocketEntryDefinition.
        :type socket_type_hash: int
        """

        self._socket_type_hash = socket_type_hash
