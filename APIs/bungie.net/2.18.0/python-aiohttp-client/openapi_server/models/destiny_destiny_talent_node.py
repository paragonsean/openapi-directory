# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_destiny_material_requirement import DestinyDefinitionsDestinyMaterialRequirement
from openapi_server.models.destiny_destiny_talent_node_stat_block import DestinyDestinyTalentNodeStatBlock
from openapi_server import util


class DestinyDestinyTalentNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_grid_level: int=None, hidden: bool=None, is_activated: bool=None, materials_to_upgrade: List[DestinyDefinitionsDestinyMaterialRequirement]=None, node_hash: int=None, node_index: int=None, node_stats_block: DestinyDestinyTalentNodeStatBlock=None, progress_percent: float=None, state: int=None, step_index: int=None):
        """DestinyDestinyTalentNode - a model defined in OpenAPI

        :param activation_grid_level: The activation_grid_level of this DestinyDestinyTalentNode.
        :param hidden: The hidden of this DestinyDestinyTalentNode.
        :param is_activated: The is_activated of this DestinyDestinyTalentNode.
        :param materials_to_upgrade: The materials_to_upgrade of this DestinyDestinyTalentNode.
        :param node_hash: The node_hash of this DestinyDestinyTalentNode.
        :param node_index: The node_index of this DestinyDestinyTalentNode.
        :param node_stats_block: The node_stats_block of this DestinyDestinyTalentNode.
        :param progress_percent: The progress_percent of this DestinyDestinyTalentNode.
        :param state: The state of this DestinyDestinyTalentNode.
        :param step_index: The step_index of this DestinyDestinyTalentNode.
        """
        self.openapi_types = {
            'activation_grid_level': int,
            'hidden': bool,
            'is_activated': bool,
            'materials_to_upgrade': List[DestinyDefinitionsDestinyMaterialRequirement],
            'node_hash': int,
            'node_index': int,
            'node_stats_block': DestinyDestinyTalentNodeStatBlock,
            'progress_percent': float,
            'state': int,
            'step_index': int
        }

        self.attribute_map = {
            'activation_grid_level': 'activationGridLevel',
            'hidden': 'hidden',
            'is_activated': 'isActivated',
            'materials_to_upgrade': 'materialsToUpgrade',
            'node_hash': 'nodeHash',
            'node_index': 'nodeIndex',
            'node_stats_block': 'nodeStatsBlock',
            'progress_percent': 'progressPercent',
            'state': 'state',
            'step_index': 'stepIndex'
        }

        self._activation_grid_level = activation_grid_level
        self._hidden = hidden
        self._is_activated = is_activated
        self._materials_to_upgrade = materials_to_upgrade
        self._node_hash = node_hash
        self._node_index = node_index
        self._node_stats_block = node_stats_block
        self._progress_percent = progress_percent
        self._state = state
        self._step_index = step_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDestinyTalentNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.DestinyTalentNode of this DestinyDestinyTalentNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_grid_level(self):
        """Gets the activation_grid_level of this DestinyDestinyTalentNode.

        The progression level required on the Talent Grid in order to be able to activate this talent node. Talent Grids have their own Progression - similar to Character Level, but in this case it is experience related to the item itself.

        :return: The activation_grid_level of this DestinyDestinyTalentNode.
        :rtype: int
        """
        return self._activation_grid_level

    @activation_grid_level.setter
    def activation_grid_level(self, activation_grid_level):
        """Sets the activation_grid_level of this DestinyDestinyTalentNode.

        The progression level required on the Talent Grid in order to be able to activate this talent node. Talent Grids have their own Progression - similar to Character Level, but in this case it is experience related to the item itself.

        :param activation_grid_level: The activation_grid_level of this DestinyDestinyTalentNode.
        :type activation_grid_level: int
        """

        self._activation_grid_level = activation_grid_level

    @property
    def hidden(self):
        """Gets the hidden of this DestinyDestinyTalentNode.

        Whether or not the talent node is actually visible in the game's UI. Whether you want to show it in your own UI is up to you! I'm not gonna tell you who to sock it to.

        :return: The hidden of this DestinyDestinyTalentNode.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this DestinyDestinyTalentNode.

        Whether or not the talent node is actually visible in the game's UI. Whether you want to show it in your own UI is up to you! I'm not gonna tell you who to sock it to.

        :param hidden: The hidden of this DestinyDestinyTalentNode.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def is_activated(self):
        """Gets the is_activated of this DestinyDestinyTalentNode.

        If true, the node is activated: it's current step then provides its benefits.

        :return: The is_activated of this DestinyDestinyTalentNode.
        :rtype: bool
        """
        return self._is_activated

    @is_activated.setter
    def is_activated(self, is_activated):
        """Sets the is_activated of this DestinyDestinyTalentNode.

        If true, the node is activated: it's current step then provides its benefits.

        :param is_activated: The is_activated of this DestinyDestinyTalentNode.
        :type is_activated: bool
        """

        self._is_activated = is_activated

    @property
    def materials_to_upgrade(self):
        """Gets the materials_to_upgrade of this DestinyDestinyTalentNode.

        If the node has material requirements to be activated, this is the list of those requirements.

        :return: The materials_to_upgrade of this DestinyDestinyTalentNode.
        :rtype: List[DestinyDefinitionsDestinyMaterialRequirement]
        """
        return self._materials_to_upgrade

    @materials_to_upgrade.setter
    def materials_to_upgrade(self, materials_to_upgrade):
        """Sets the materials_to_upgrade of this DestinyDestinyTalentNode.

        If the node has material requirements to be activated, this is the list of those requirements.

        :param materials_to_upgrade: The materials_to_upgrade of this DestinyDestinyTalentNode.
        :type materials_to_upgrade: List[DestinyDefinitionsDestinyMaterialRequirement]
        """

        self._materials_to_upgrade = materials_to_upgrade

    @property
    def node_hash(self):
        """Gets the node_hash of this DestinyDestinyTalentNode.

        The hash of the Talent Node being referred to (in DestinyTalentGridDefinition.nodes). Deceptively CONTENT VERSION DEPENDENT. We have no guarantee of the hash's immutability between content versions.

        :return: The node_hash of this DestinyDestinyTalentNode.
        :rtype: int
        """
        return self._node_hash

    @node_hash.setter
    def node_hash(self, node_hash):
        """Sets the node_hash of this DestinyDestinyTalentNode.

        The hash of the Talent Node being referred to (in DestinyTalentGridDefinition.nodes). Deceptively CONTENT VERSION DEPENDENT. We have no guarantee of the hash's immutability between content versions.

        :param node_hash: The node_hash of this DestinyDestinyTalentNode.
        :type node_hash: int
        """

        self._node_hash = node_hash

    @property
    def node_index(self):
        """Gets the node_index of this DestinyDestinyTalentNode.

        The index of the Talent Node being referred to (an index into DestinyTalentGridDefinition.nodes[]). CONTENT VERSION DEPENDENT.

        :return: The node_index of this DestinyDestinyTalentNode.
        :rtype: int
        """
        return self._node_index

    @node_index.setter
    def node_index(self, node_index):
        """Sets the node_index of this DestinyDestinyTalentNode.

        The index of the Talent Node being referred to (an index into DestinyTalentGridDefinition.nodes[]). CONTENT VERSION DEPENDENT.

        :param node_index: The node_index of this DestinyDestinyTalentNode.
        :type node_index: int
        """

        self._node_index = node_index

    @property
    def node_stats_block(self):
        """Gets the node_stats_block of this DestinyDestinyTalentNode.

        This property has some history. A talent grid can provide stats on both the item it's related to and the character equipping the item. This returns data about those stat bonuses.

        :return: The node_stats_block of this DestinyDestinyTalentNode.
        :rtype: DestinyDestinyTalentNodeStatBlock
        """
        return self._node_stats_block

    @node_stats_block.setter
    def node_stats_block(self, node_stats_block):
        """Sets the node_stats_block of this DestinyDestinyTalentNode.

        This property has some history. A talent grid can provide stats on both the item it's related to and the character equipping the item. This returns data about those stat bonuses.

        :param node_stats_block: The node_stats_block of this DestinyDestinyTalentNode.
        :type node_stats_block: DestinyDestinyTalentNodeStatBlock
        """

        self._node_stats_block = node_stats_block

    @property
    def progress_percent(self):
        """Gets the progress_percent of this DestinyDestinyTalentNode.

        If you want to show a progress bar or circle for how close this talent node is to being activate-able, this is the percentage to show. It follows the node's underlying rules about when the progress bar should first show up, and when it should be filled.

        :return: The progress_percent of this DestinyDestinyTalentNode.
        :rtype: float
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this DestinyDestinyTalentNode.

        If you want to show a progress bar or circle for how close this talent node is to being activate-able, this is the percentage to show. It follows the node's underlying rules about when the progress bar should first show up, and when it should be filled.

        :param progress_percent: The progress_percent of this DestinyDestinyTalentNode.
        :type progress_percent: float
        """

        self._progress_percent = progress_percent

    @property
    def state(self):
        """Gets the state of this DestinyDestinyTalentNode.

        An DestinyTalentNodeState enum value indicating the node's state: whether it can be activated or swapped, and why not if neither can be performed.

        :return: The state of this DestinyDestinyTalentNode.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DestinyDestinyTalentNode.

        An DestinyTalentNodeState enum value indicating the node's state: whether it can be activated or swapped, and why not if neither can be performed.

        :param state: The state of this DestinyDestinyTalentNode.
        :type state: int
        """

        self._state = state

    @property
    def step_index(self):
        """Gets the step_index of this DestinyDestinyTalentNode.

        The currently relevant Step for the node. It is this step that has rendering data for the node and the benefits that are provided if the node is activated. (the actual rules for benefits provided are extremely complicated in theory, but with how Talent Grids are being used in Destiny 2 you don't have to worry about a lot of those old Destiny 1 rules.) This is an index into: DestinyTalentGridDefinition.nodes[nodeIndex].steps[stepIndex]

        :return: The step_index of this DestinyDestinyTalentNode.
        :rtype: int
        """
        return self._step_index

    @step_index.setter
    def step_index(self, step_index):
        """Sets the step_index of this DestinyDestinyTalentNode.

        The currently relevant Step for the node. It is this step that has rendering data for the node and the benefits that are provided if the node is activated. (the actual rules for benefits provided are extremely complicated in theory, but with how Talent Grids are being used in Destiny 2 you don't have to worry about a lot of those old Destiny 1 rules.) This is an index into: DestinyTalentGridDefinition.nodes[nodeIndex].steps[stepIndex]

        :param step_index: The step_index of this DestinyDestinyTalentNode.
        :type step_index: int
        """

        self._step_index = step_index
