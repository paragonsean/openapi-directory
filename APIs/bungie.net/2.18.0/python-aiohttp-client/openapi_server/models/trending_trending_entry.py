# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrendingTrendingEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_date: datetime=None, display_name: str=None, end_date: datetime=None, entity_type: int=None, feature_image: str=None, identifier: str=None, image: str=None, is_featured: bool=None, items: List[TrendingTrendingEntry]=None, link: str=None, mp4_video: str=None, start_date: datetime=None, tagline: str=None, webm_video: str=None, weight: float=None):
        """TrendingTrendingEntry - a model defined in OpenAPI

        :param creation_date: The creation_date of this TrendingTrendingEntry.
        :param display_name: The display_name of this TrendingTrendingEntry.
        :param end_date: The end_date of this TrendingTrendingEntry.
        :param entity_type: The entity_type of this TrendingTrendingEntry.
        :param feature_image: The feature_image of this TrendingTrendingEntry.
        :param identifier: The identifier of this TrendingTrendingEntry.
        :param image: The image of this TrendingTrendingEntry.
        :param is_featured: The is_featured of this TrendingTrendingEntry.
        :param items: The items of this TrendingTrendingEntry.
        :param link: The link of this TrendingTrendingEntry.
        :param mp4_video: The mp4_video of this TrendingTrendingEntry.
        :param start_date: The start_date of this TrendingTrendingEntry.
        :param tagline: The tagline of this TrendingTrendingEntry.
        :param webm_video: The webm_video of this TrendingTrendingEntry.
        :param weight: The weight of this TrendingTrendingEntry.
        """
        self.openapi_types = {
            'creation_date': datetime,
            'display_name': str,
            'end_date': datetime,
            'entity_type': int,
            'feature_image': str,
            'identifier': str,
            'image': str,
            'is_featured': bool,
            'items': List[TrendingTrendingEntry],
            'link': str,
            'mp4_video': str,
            'start_date': datetime,
            'tagline': str,
            'webm_video': str,
            'weight': float
        }

        self.attribute_map = {
            'creation_date': 'creationDate',
            'display_name': 'displayName',
            'end_date': 'endDate',
            'entity_type': 'entityType',
            'feature_image': 'featureImage',
            'identifier': 'identifier',
            'image': 'image',
            'is_featured': 'isFeatured',
            'items': 'items',
            'link': 'link',
            'mp4_video': 'mp4Video',
            'start_date': 'startDate',
            'tagline': 'tagline',
            'webm_video': 'webmVideo',
            'weight': 'weight'
        }

        self._creation_date = creation_date
        self._display_name = display_name
        self._end_date = end_date
        self._entity_type = entity_type
        self._feature_image = feature_image
        self._identifier = identifier
        self._image = image
        self._is_featured = is_featured
        self._items = items
        self._link = link
        self._mp4_video = mp4_video
        self._start_date = start_date
        self._tagline = tagline
        self._webm_video = webm_video
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrendingTrendingEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trending.TrendingEntry of this TrendingTrendingEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_date(self):
        """Gets the creation_date of this TrendingTrendingEntry.

        If the entry has a date at which it was created, this is that date.

        :return: The creation_date of this TrendingTrendingEntry.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this TrendingTrendingEntry.

        If the entry has a date at which it was created, this is that date.

        :param creation_date: The creation_date of this TrendingTrendingEntry.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def display_name(self):
        """Gets the display_name of this TrendingTrendingEntry.

        The localized \"display name/article title/'primary localized identifier'\" of the entity.

        :return: The display_name of this TrendingTrendingEntry.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TrendingTrendingEntry.

        The localized \"display name/article title/'primary localized identifier'\" of the entity.

        :param display_name: The display_name of this TrendingTrendingEntry.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def end_date(self):
        """Gets the end_date of this TrendingTrendingEntry.


        :return: The end_date of this TrendingTrendingEntry.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TrendingTrendingEntry.


        :param end_date: The end_date of this TrendingTrendingEntry.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def entity_type(self):
        """Gets the entity_type of this TrendingTrendingEntry.

        An enum - unfortunately - dictating all of the possible kinds of trending items that you might get in your result set, in case you want to do custom rendering or call to get the details of the item.

        :return: The entity_type of this TrendingTrendingEntry.
        :rtype: int
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this TrendingTrendingEntry.

        An enum - unfortunately - dictating all of the possible kinds of trending items that you might get in your result set, in case you want to do custom rendering or call to get the details of the item.

        :param entity_type: The entity_type of this TrendingTrendingEntry.
        :type entity_type: int
        """

        self._entity_type = entity_type

    @property
    def feature_image(self):
        """Gets the feature_image of this TrendingTrendingEntry.

        If isFeatured, this image will be populated with whatever the featured image is. Note that this will likely be a very large image, so don't use it all the time.

        :return: The feature_image of this TrendingTrendingEntry.
        :rtype: str
        """
        return self._feature_image

    @feature_image.setter
    def feature_image(self, feature_image):
        """Sets the feature_image of this TrendingTrendingEntry.

        If isFeatured, this image will be populated with whatever the featured image is. Note that this will likely be a very large image, so don't use it all the time.

        :param feature_image: The feature_image of this TrendingTrendingEntry.
        :type feature_image: str
        """

        self._feature_image = feature_image

    @property
    def identifier(self):
        """Gets the identifier of this TrendingTrendingEntry.

        We don't know whether the identifier will be a string, a uint, or a long... so we're going to cast it all to a string. But either way, we need any trending item created to have a single unique identifier for its type.

        :return: The identifier of this TrendingTrendingEntry.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this TrendingTrendingEntry.

        We don't know whether the identifier will be a string, a uint, or a long... so we're going to cast it all to a string. But either way, we need any trending item created to have a single unique identifier for its type.

        :param identifier: The identifier of this TrendingTrendingEntry.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def image(self):
        """Gets the image of this TrendingTrendingEntry.


        :return: The image of this TrendingTrendingEntry.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this TrendingTrendingEntry.


        :param image: The image of this TrendingTrendingEntry.
        :type image: str
        """

        self._image = image

    @property
    def is_featured(self):
        """Gets the is_featured of this TrendingTrendingEntry.


        :return: The is_featured of this TrendingTrendingEntry.
        :rtype: bool
        """
        return self._is_featured

    @is_featured.setter
    def is_featured(self, is_featured):
        """Sets the is_featured of this TrendingTrendingEntry.


        :param is_featured: The is_featured of this TrendingTrendingEntry.
        :type is_featured: bool
        """

        self._is_featured = is_featured

    @property
    def items(self):
        """Gets the items of this TrendingTrendingEntry.

        If the item is of entityType TrendingEntryType.Container, it may have items - also Trending Entries - contained within it. This is the ordered list of those to display under the Container's header.

        :return: The items of this TrendingTrendingEntry.
        :rtype: List[TrendingTrendingEntry]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this TrendingTrendingEntry.

        If the item is of entityType TrendingEntryType.Container, it may have items - also Trending Entries - contained within it. This is the ordered list of those to display under the Container's header.

        :param items: The items of this TrendingTrendingEntry.
        :type items: List[TrendingTrendingEntry]
        """

        self._items = items

    @property
    def link(self):
        """Gets the link of this TrendingTrendingEntry.


        :return: The link of this TrendingTrendingEntry.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this TrendingTrendingEntry.


        :param link: The link of this TrendingTrendingEntry.
        :type link: str
        """

        self._link = link

    @property
    def mp4_video(self):
        """Gets the mp4_video of this TrendingTrendingEntry.

        If this is populated, the entry has a related MP4 video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo

        :return: The mp4_video of this TrendingTrendingEntry.
        :rtype: str
        """
        return self._mp4_video

    @mp4_video.setter
    def mp4_video(self, mp4_video):
        """Sets the mp4_video of this TrendingTrendingEntry.

        If this is populated, the entry has a related MP4 video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo

        :param mp4_video: The mp4_video of this TrendingTrendingEntry.
        :type mp4_video: str
        """

        self._mp4_video = mp4_video

    @property
    def start_date(self):
        """Gets the start_date of this TrendingTrendingEntry.


        :return: The start_date of this TrendingTrendingEntry.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TrendingTrendingEntry.


        :param start_date: The start_date of this TrendingTrendingEntry.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def tagline(self):
        """Gets the tagline of this TrendingTrendingEntry.

        If the entity has a localized tagline/subtitle/motto/whatever, that is found here.

        :return: The tagline of this TrendingTrendingEntry.
        :rtype: str
        """
        return self._tagline

    @tagline.setter
    def tagline(self, tagline):
        """Sets the tagline of this TrendingTrendingEntry.

        If the entity has a localized tagline/subtitle/motto/whatever, that is found here.

        :param tagline: The tagline of this TrendingTrendingEntry.
        :type tagline: str
        """

        self._tagline = tagline

    @property
    def webm_video(self):
        """Gets the webm_video of this TrendingTrendingEntry.

        If this is populated, the entry has a related WebM video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo

        :return: The webm_video of this TrendingTrendingEntry.
        :rtype: str
        """
        return self._webm_video

    @webm_video.setter
    def webm_video(self, webm_video):
        """Sets the webm_video of this TrendingTrendingEntry.

        If this is populated, the entry has a related WebM video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo

        :param webm_video: The webm_video of this TrendingTrendingEntry.
        :type webm_video: str
        """

        self._webm_video = webm_video

    @property
    def weight(self):
        """Gets the weight of this TrendingTrendingEntry.

        The weighted score of this trending item.

        :return: The weight of this TrendingTrendingEntry.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this TrendingTrendingEntry.

        The weighted score of this trending item.

        :param weight: The weight of this TrendingTrendingEntry.
        :type weight: float
        """

        self._weight = weight
