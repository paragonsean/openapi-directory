# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.groups_v2_group_member import GroupsV2GroupMember
from openapi_server.models.groups_v2_group_potential_member import GroupsV2GroupPotentialMember
from openapi_server.models.groups_v2_group_v2 import GroupsV2GroupV2
from openapi_server import util


class GroupsV2GroupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alliance_status: int=None, allied_ids: List[int]=None, current_user_member_map: Dict[str, GroupsV2GroupMember]=None, current_user_memberships_inactive_for_destiny: bool=None, current_user_potential_member_map: Dict[str, GroupsV2GroupPotentialMember]=None, detail: GroupsV2GroupV2=None, founder: GroupsV2GroupMember=None, group_join_invite_count: int=None, parent_group: GroupsV2GroupV2=None):
        """GroupsV2GroupResponse - a model defined in OpenAPI

        :param alliance_status: The alliance_status of this GroupsV2GroupResponse.
        :param allied_ids: The allied_ids of this GroupsV2GroupResponse.
        :param current_user_member_map: The current_user_member_map of this GroupsV2GroupResponse.
        :param current_user_memberships_inactive_for_destiny: The current_user_memberships_inactive_for_destiny of this GroupsV2GroupResponse.
        :param current_user_potential_member_map: The current_user_potential_member_map of this GroupsV2GroupResponse.
        :param detail: The detail of this GroupsV2GroupResponse.
        :param founder: The founder of this GroupsV2GroupResponse.
        :param group_join_invite_count: The group_join_invite_count of this GroupsV2GroupResponse.
        :param parent_group: The parent_group of this GroupsV2GroupResponse.
        """
        self.openapi_types = {
            'alliance_status': int,
            'allied_ids': List[int],
            'current_user_member_map': Dict[str, GroupsV2GroupMember],
            'current_user_memberships_inactive_for_destiny': bool,
            'current_user_potential_member_map': Dict[str, GroupsV2GroupPotentialMember],
            'detail': GroupsV2GroupV2,
            'founder': GroupsV2GroupMember,
            'group_join_invite_count': int,
            'parent_group': GroupsV2GroupV2
        }

        self.attribute_map = {
            'alliance_status': 'allianceStatus',
            'allied_ids': 'alliedIds',
            'current_user_member_map': 'currentUserMemberMap',
            'current_user_memberships_inactive_for_destiny': 'currentUserMembershipsInactiveForDestiny',
            'current_user_potential_member_map': 'currentUserPotentialMemberMap',
            'detail': 'detail',
            'founder': 'founder',
            'group_join_invite_count': 'groupJoinInviteCount',
            'parent_group': 'parentGroup'
        }

        self._alliance_status = alliance_status
        self._allied_ids = allied_ids
        self._current_user_member_map = current_user_member_map
        self._current_user_memberships_inactive_for_destiny = current_user_memberships_inactive_for_destiny
        self._current_user_potential_member_map = current_user_potential_member_map
        self._detail = detail
        self._founder = founder
        self._group_join_invite_count = group_join_invite_count
        self._parent_group = parent_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupsV2GroupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupsV2.GroupResponse of this GroupsV2GroupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alliance_status(self):
        """Gets the alliance_status of this GroupsV2GroupResponse.


        :return: The alliance_status of this GroupsV2GroupResponse.
        :rtype: int
        """
        return self._alliance_status

    @alliance_status.setter
    def alliance_status(self, alliance_status):
        """Sets the alliance_status of this GroupsV2GroupResponse.


        :param alliance_status: The alliance_status of this GroupsV2GroupResponse.
        :type alliance_status: int
        """

        self._alliance_status = alliance_status

    @property
    def allied_ids(self):
        """Gets the allied_ids of this GroupsV2GroupResponse.


        :return: The allied_ids of this GroupsV2GroupResponse.
        :rtype: List[int]
        """
        return self._allied_ids

    @allied_ids.setter
    def allied_ids(self, allied_ids):
        """Sets the allied_ids of this GroupsV2GroupResponse.


        :param allied_ids: The allied_ids of this GroupsV2GroupResponse.
        :type allied_ids: List[int]
        """

        self._allied_ids = allied_ids

    @property
    def current_user_member_map(self):
        """Gets the current_user_member_map of this GroupsV2GroupResponse.

        This property will be populated if the authenticated user is a member of the group. Note that because of account linking, a user can sometimes be part of a clan more than once. As such, this returns the highest member type available.

        :return: The current_user_member_map of this GroupsV2GroupResponse.
        :rtype: Dict[str, GroupsV2GroupMember]
        """
        return self._current_user_member_map

    @current_user_member_map.setter
    def current_user_member_map(self, current_user_member_map):
        """Sets the current_user_member_map of this GroupsV2GroupResponse.

        This property will be populated if the authenticated user is a member of the group. Note that because of account linking, a user can sometimes be part of a clan more than once. As such, this returns the highest member type available.

        :param current_user_member_map: The current_user_member_map of this GroupsV2GroupResponse.
        :type current_user_member_map: Dict[str, GroupsV2GroupMember]
        """

        self._current_user_member_map = current_user_member_map

    @property
    def current_user_memberships_inactive_for_destiny(self):
        """Gets the current_user_memberships_inactive_for_destiny of this GroupsV2GroupResponse.

        A convenience property that indicates if every membership you (the current user) have that is a part of this group are part of an account that is considered inactive - for example, overridden accounts in Cross Save.

        :return: The current_user_memberships_inactive_for_destiny of this GroupsV2GroupResponse.
        :rtype: bool
        """
        return self._current_user_memberships_inactive_for_destiny

    @current_user_memberships_inactive_for_destiny.setter
    def current_user_memberships_inactive_for_destiny(self, current_user_memberships_inactive_for_destiny):
        """Sets the current_user_memberships_inactive_for_destiny of this GroupsV2GroupResponse.

        A convenience property that indicates if every membership you (the current user) have that is a part of this group are part of an account that is considered inactive - for example, overridden accounts in Cross Save.

        :param current_user_memberships_inactive_for_destiny: The current_user_memberships_inactive_for_destiny of this GroupsV2GroupResponse.
        :type current_user_memberships_inactive_for_destiny: bool
        """

        self._current_user_memberships_inactive_for_destiny = current_user_memberships_inactive_for_destiny

    @property
    def current_user_potential_member_map(self):
        """Gets the current_user_potential_member_map of this GroupsV2GroupResponse.

        This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join. Note that because of account linking, a user can sometimes be part of a clan more than once.

        :return: The current_user_potential_member_map of this GroupsV2GroupResponse.
        :rtype: Dict[str, GroupsV2GroupPotentialMember]
        """
        return self._current_user_potential_member_map

    @current_user_potential_member_map.setter
    def current_user_potential_member_map(self, current_user_potential_member_map):
        """Sets the current_user_potential_member_map of this GroupsV2GroupResponse.

        This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join. Note that because of account linking, a user can sometimes be part of a clan more than once.

        :param current_user_potential_member_map: The current_user_potential_member_map of this GroupsV2GroupResponse.
        :type current_user_potential_member_map: Dict[str, GroupsV2GroupPotentialMember]
        """

        self._current_user_potential_member_map = current_user_potential_member_map

    @property
    def detail(self):
        """Gets the detail of this GroupsV2GroupResponse.


        :return: The detail of this GroupsV2GroupResponse.
        :rtype: GroupsV2GroupV2
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this GroupsV2GroupResponse.


        :param detail: The detail of this GroupsV2GroupResponse.
        :type detail: GroupsV2GroupV2
        """

        self._detail = detail

    @property
    def founder(self):
        """Gets the founder of this GroupsV2GroupResponse.


        :return: The founder of this GroupsV2GroupResponse.
        :rtype: GroupsV2GroupMember
        """
        return self._founder

    @founder.setter
    def founder(self, founder):
        """Sets the founder of this GroupsV2GroupResponse.


        :param founder: The founder of this GroupsV2GroupResponse.
        :type founder: GroupsV2GroupMember
        """

        self._founder = founder

    @property
    def group_join_invite_count(self):
        """Gets the group_join_invite_count of this GroupsV2GroupResponse.


        :return: The group_join_invite_count of this GroupsV2GroupResponse.
        :rtype: int
        """
        return self._group_join_invite_count

    @group_join_invite_count.setter
    def group_join_invite_count(self, group_join_invite_count):
        """Sets the group_join_invite_count of this GroupsV2GroupResponse.


        :param group_join_invite_count: The group_join_invite_count of this GroupsV2GroupResponse.
        :type group_join_invite_count: int
        """

        self._group_join_invite_count = group_join_invite_count

    @property
    def parent_group(self):
        """Gets the parent_group of this GroupsV2GroupResponse.


        :return: The parent_group of this GroupsV2GroupResponse.
        :rtype: GroupsV2GroupV2
        """
        return self._parent_group

    @parent_group.setter
    def parent_group(self, parent_group):
        """Sets the parent_group of this GroupsV2GroupResponse.


        :param parent_group: The parent_group of this GroupsV2GroupResponse.
        :type parent_group: GroupsV2GroupV2
        """

        self._parent_group = parent_group
