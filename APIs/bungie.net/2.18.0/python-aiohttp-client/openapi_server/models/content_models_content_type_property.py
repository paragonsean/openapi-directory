# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_models_content_type_default_value import ContentModelsContentTypeDefaultValue
from openapi_server import util


class ContentModelsContentTypeProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, bind_to_property: str=None, bound_regex: str=None, child_properties: List[ContentModelsContentTypeProperty]=None, content_type_allowed: str=None, datatype: int=None, default_values: List[ContentModelsContentTypeDefaultValue]=None, enabled: bool=None, entitytype: str=None, fallback: bool=None, is_combo: bool=None, is_external_allowed: bool=None, is_image: bool=None, is_title: bool=None, is_video: bool=None, legal_content_types: List[str]=None, localizable: bool=None, max_byte_length: int=None, max_file_size: int=None, max_height: int=None, max_length: int=None, max_width: int=None, min_height: int=None, min_width: int=None, name: str=None, order: int=None, property_description: str=None, property_section: str=None, readable_name: str=None, regexp: str=None, representation_selection: Dict[str, str]=None, representation_validation_string: str=None, required: bool=None, root_property_name: str=None, rss_attribute: str=None, suppress_property: bool=None, validate_as: str=None, value: str=None, visible: bool=None, visible_dependency: str=None, visible_on: str=None, weight: int=None):
        """ContentModelsContentTypeProperty - a model defined in OpenAPI

        :param attributes: The attributes of this ContentModelsContentTypeProperty.
        :param bind_to_property: The bind_to_property of this ContentModelsContentTypeProperty.
        :param bound_regex: The bound_regex of this ContentModelsContentTypeProperty.
        :param child_properties: The child_properties of this ContentModelsContentTypeProperty.
        :param content_type_allowed: The content_type_allowed of this ContentModelsContentTypeProperty.
        :param datatype: The datatype of this ContentModelsContentTypeProperty.
        :param default_values: The default_values of this ContentModelsContentTypeProperty.
        :param enabled: The enabled of this ContentModelsContentTypeProperty.
        :param entitytype: The entitytype of this ContentModelsContentTypeProperty.
        :param fallback: The fallback of this ContentModelsContentTypeProperty.
        :param is_combo: The is_combo of this ContentModelsContentTypeProperty.
        :param is_external_allowed: The is_external_allowed of this ContentModelsContentTypeProperty.
        :param is_image: The is_image of this ContentModelsContentTypeProperty.
        :param is_title: The is_title of this ContentModelsContentTypeProperty.
        :param is_video: The is_video of this ContentModelsContentTypeProperty.
        :param legal_content_types: The legal_content_types of this ContentModelsContentTypeProperty.
        :param localizable: The localizable of this ContentModelsContentTypeProperty.
        :param max_byte_length: The max_byte_length of this ContentModelsContentTypeProperty.
        :param max_file_size: The max_file_size of this ContentModelsContentTypeProperty.
        :param max_height: The max_height of this ContentModelsContentTypeProperty.
        :param max_length: The max_length of this ContentModelsContentTypeProperty.
        :param max_width: The max_width of this ContentModelsContentTypeProperty.
        :param min_height: The min_height of this ContentModelsContentTypeProperty.
        :param min_width: The min_width of this ContentModelsContentTypeProperty.
        :param name: The name of this ContentModelsContentTypeProperty.
        :param order: The order of this ContentModelsContentTypeProperty.
        :param property_description: The property_description of this ContentModelsContentTypeProperty.
        :param property_section: The property_section of this ContentModelsContentTypeProperty.
        :param readable_name: The readable_name of this ContentModelsContentTypeProperty.
        :param regexp: The regexp of this ContentModelsContentTypeProperty.
        :param representation_selection: The representation_selection of this ContentModelsContentTypeProperty.
        :param representation_validation_string: The representation_validation_string of this ContentModelsContentTypeProperty.
        :param required: The required of this ContentModelsContentTypeProperty.
        :param root_property_name: The root_property_name of this ContentModelsContentTypeProperty.
        :param rss_attribute: The rss_attribute of this ContentModelsContentTypeProperty.
        :param suppress_property: The suppress_property of this ContentModelsContentTypeProperty.
        :param validate_as: The validate_as of this ContentModelsContentTypeProperty.
        :param value: The value of this ContentModelsContentTypeProperty.
        :param visible: The visible of this ContentModelsContentTypeProperty.
        :param visible_dependency: The visible_dependency of this ContentModelsContentTypeProperty.
        :param visible_on: The visible_on of this ContentModelsContentTypeProperty.
        :param weight: The weight of this ContentModelsContentTypeProperty.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'bind_to_property': str,
            'bound_regex': str,
            'child_properties': List[ContentModelsContentTypeProperty],
            'content_type_allowed': str,
            'datatype': int,
            'default_values': List[ContentModelsContentTypeDefaultValue],
            'enabled': bool,
            'entitytype': str,
            'fallback': bool,
            'is_combo': bool,
            'is_external_allowed': bool,
            'is_image': bool,
            'is_title': bool,
            'is_video': bool,
            'legal_content_types': List[str],
            'localizable': bool,
            'max_byte_length': int,
            'max_file_size': int,
            'max_height': int,
            'max_length': int,
            'max_width': int,
            'min_height': int,
            'min_width': int,
            'name': str,
            'order': int,
            'property_description': str,
            'property_section': str,
            'readable_name': str,
            'regexp': str,
            'representation_selection': Dict[str, str],
            'representation_validation_string': str,
            'required': bool,
            'root_property_name': str,
            'rss_attribute': str,
            'suppress_property': bool,
            'validate_as': str,
            'value': str,
            'visible': bool,
            'visible_dependency': str,
            'visible_on': str,
            'weight': int
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'bind_to_property': 'bindToProperty',
            'bound_regex': 'boundRegex',
            'child_properties': 'childProperties',
            'content_type_allowed': 'contentTypeAllowed',
            'datatype': 'datatype',
            'default_values': 'defaultValues',
            'enabled': 'enabled',
            'entitytype': 'entitytype',
            'fallback': 'fallback',
            'is_combo': 'isCombo',
            'is_external_allowed': 'isExternalAllowed',
            'is_image': 'isImage',
            'is_title': 'isTitle',
            'is_video': 'isVideo',
            'legal_content_types': 'legalContentTypes',
            'localizable': 'localizable',
            'max_byte_length': 'maxByteLength',
            'max_file_size': 'maxFileSize',
            'max_height': 'maxHeight',
            'max_length': 'maxLength',
            'max_width': 'maxWidth',
            'min_height': 'minHeight',
            'min_width': 'minWidth',
            'name': 'name',
            'order': 'order',
            'property_description': 'propertyDescription',
            'property_section': 'propertySection',
            'readable_name': 'readableName',
            'regexp': 'regexp',
            'representation_selection': 'representationSelection',
            'representation_validation_string': 'representationValidationString',
            'required': 'required',
            'root_property_name': 'rootPropertyName',
            'rss_attribute': 'rssAttribute',
            'suppress_property': 'suppressProperty',
            'validate_as': 'validateAs',
            'value': 'value',
            'visible': 'visible',
            'visible_dependency': 'visibleDependency',
            'visible_on': 'visibleOn',
            'weight': 'weight'
        }

        self._attributes = attributes
        self._bind_to_property = bind_to_property
        self._bound_regex = bound_regex
        self._child_properties = child_properties
        self._content_type_allowed = content_type_allowed
        self._datatype = datatype
        self._default_values = default_values
        self._enabled = enabled
        self._entitytype = entitytype
        self._fallback = fallback
        self._is_combo = is_combo
        self._is_external_allowed = is_external_allowed
        self._is_image = is_image
        self._is_title = is_title
        self._is_video = is_video
        self._legal_content_types = legal_content_types
        self._localizable = localizable
        self._max_byte_length = max_byte_length
        self._max_file_size = max_file_size
        self._max_height = max_height
        self._max_length = max_length
        self._max_width = max_width
        self._min_height = min_height
        self._min_width = min_width
        self._name = name
        self._order = order
        self._property_description = property_description
        self._property_section = property_section
        self._readable_name = readable_name
        self._regexp = regexp
        self._representation_selection = representation_selection
        self._representation_validation_string = representation_validation_string
        self._required = required
        self._root_property_name = root_property_name
        self._rss_attribute = rss_attribute
        self._suppress_property = suppress_property
        self._validate_as = validate_as
        self._value = value
        self._visible = visible
        self._visible_dependency = visible_dependency
        self._visible_on = visible_on
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentModelsContentTypeProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Content.Models.ContentTypeProperty of this ContentModelsContentTypeProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this ContentModelsContentTypeProperty.


        :return: The attributes of this ContentModelsContentTypeProperty.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ContentModelsContentTypeProperty.


        :param attributes: The attributes of this ContentModelsContentTypeProperty.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def bind_to_property(self):
        """Gets the bind_to_property of this ContentModelsContentTypeProperty.


        :return: The bind_to_property of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._bind_to_property

    @bind_to_property.setter
    def bind_to_property(self, bind_to_property):
        """Sets the bind_to_property of this ContentModelsContentTypeProperty.


        :param bind_to_property: The bind_to_property of this ContentModelsContentTypeProperty.
        :type bind_to_property: str
        """

        self._bind_to_property = bind_to_property

    @property
    def bound_regex(self):
        """Gets the bound_regex of this ContentModelsContentTypeProperty.


        :return: The bound_regex of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._bound_regex

    @bound_regex.setter
    def bound_regex(self, bound_regex):
        """Sets the bound_regex of this ContentModelsContentTypeProperty.


        :param bound_regex: The bound_regex of this ContentModelsContentTypeProperty.
        :type bound_regex: str
        """

        self._bound_regex = bound_regex

    @property
    def child_properties(self):
        """Gets the child_properties of this ContentModelsContentTypeProperty.


        :return: The child_properties of this ContentModelsContentTypeProperty.
        :rtype: List[ContentModelsContentTypeProperty]
        """
        return self._child_properties

    @child_properties.setter
    def child_properties(self, child_properties):
        """Sets the child_properties of this ContentModelsContentTypeProperty.


        :param child_properties: The child_properties of this ContentModelsContentTypeProperty.
        :type child_properties: List[ContentModelsContentTypeProperty]
        """

        self._child_properties = child_properties

    @property
    def content_type_allowed(self):
        """Gets the content_type_allowed of this ContentModelsContentTypeProperty.


        :return: The content_type_allowed of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._content_type_allowed

    @content_type_allowed.setter
    def content_type_allowed(self, content_type_allowed):
        """Sets the content_type_allowed of this ContentModelsContentTypeProperty.


        :param content_type_allowed: The content_type_allowed of this ContentModelsContentTypeProperty.
        :type content_type_allowed: str
        """

        self._content_type_allowed = content_type_allowed

    @property
    def datatype(self):
        """Gets the datatype of this ContentModelsContentTypeProperty.


        :return: The datatype of this ContentModelsContentTypeProperty.
        :rtype: int
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """Sets the datatype of this ContentModelsContentTypeProperty.


        :param datatype: The datatype of this ContentModelsContentTypeProperty.
        :type datatype: int
        """

        self._datatype = datatype

    @property
    def default_values(self):
        """Gets the default_values of this ContentModelsContentTypeProperty.


        :return: The default_values of this ContentModelsContentTypeProperty.
        :rtype: List[ContentModelsContentTypeDefaultValue]
        """
        return self._default_values

    @default_values.setter
    def default_values(self, default_values):
        """Sets the default_values of this ContentModelsContentTypeProperty.


        :param default_values: The default_values of this ContentModelsContentTypeProperty.
        :type default_values: List[ContentModelsContentTypeDefaultValue]
        """

        self._default_values = default_values

    @property
    def enabled(self):
        """Gets the enabled of this ContentModelsContentTypeProperty.


        :return: The enabled of this ContentModelsContentTypeProperty.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ContentModelsContentTypeProperty.


        :param enabled: The enabled of this ContentModelsContentTypeProperty.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def entitytype(self):
        """Gets the entitytype of this ContentModelsContentTypeProperty.


        :return: The entitytype of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._entitytype

    @entitytype.setter
    def entitytype(self, entitytype):
        """Sets the entitytype of this ContentModelsContentTypeProperty.


        :param entitytype: The entitytype of this ContentModelsContentTypeProperty.
        :type entitytype: str
        """

        self._entitytype = entitytype

    @property
    def fallback(self):
        """Gets the fallback of this ContentModelsContentTypeProperty.


        :return: The fallback of this ContentModelsContentTypeProperty.
        :rtype: bool
        """
        return self._fallback

    @fallback.setter
    def fallback(self, fallback):
        """Sets the fallback of this ContentModelsContentTypeProperty.


        :param fallback: The fallback of this ContentModelsContentTypeProperty.
        :type fallback: bool
        """

        self._fallback = fallback

    @property
    def is_combo(self):
        """Gets the is_combo of this ContentModelsContentTypeProperty.


        :return: The is_combo of this ContentModelsContentTypeProperty.
        :rtype: bool
        """
        return self._is_combo

    @is_combo.setter
    def is_combo(self, is_combo):
        """Sets the is_combo of this ContentModelsContentTypeProperty.


        :param is_combo: The is_combo of this ContentModelsContentTypeProperty.
        :type is_combo: bool
        """

        self._is_combo = is_combo

    @property
    def is_external_allowed(self):
        """Gets the is_external_allowed of this ContentModelsContentTypeProperty.


        :return: The is_external_allowed of this ContentModelsContentTypeProperty.
        :rtype: bool
        """
        return self._is_external_allowed

    @is_external_allowed.setter
    def is_external_allowed(self, is_external_allowed):
        """Sets the is_external_allowed of this ContentModelsContentTypeProperty.


        :param is_external_allowed: The is_external_allowed of this ContentModelsContentTypeProperty.
        :type is_external_allowed: bool
        """

        self._is_external_allowed = is_external_allowed

    @property
    def is_image(self):
        """Gets the is_image of this ContentModelsContentTypeProperty.


        :return: The is_image of this ContentModelsContentTypeProperty.
        :rtype: bool
        """
        return self._is_image

    @is_image.setter
    def is_image(self, is_image):
        """Sets the is_image of this ContentModelsContentTypeProperty.


        :param is_image: The is_image of this ContentModelsContentTypeProperty.
        :type is_image: bool
        """

        self._is_image = is_image

    @property
    def is_title(self):
        """Gets the is_title of this ContentModelsContentTypeProperty.


        :return: The is_title of this ContentModelsContentTypeProperty.
        :rtype: bool
        """
        return self._is_title

    @is_title.setter
    def is_title(self, is_title):
        """Sets the is_title of this ContentModelsContentTypeProperty.


        :param is_title: The is_title of this ContentModelsContentTypeProperty.
        :type is_title: bool
        """

        self._is_title = is_title

    @property
    def is_video(self):
        """Gets the is_video of this ContentModelsContentTypeProperty.


        :return: The is_video of this ContentModelsContentTypeProperty.
        :rtype: bool
        """
        return self._is_video

    @is_video.setter
    def is_video(self, is_video):
        """Sets the is_video of this ContentModelsContentTypeProperty.


        :param is_video: The is_video of this ContentModelsContentTypeProperty.
        :type is_video: bool
        """

        self._is_video = is_video

    @property
    def legal_content_types(self):
        """Gets the legal_content_types of this ContentModelsContentTypeProperty.


        :return: The legal_content_types of this ContentModelsContentTypeProperty.
        :rtype: List[str]
        """
        return self._legal_content_types

    @legal_content_types.setter
    def legal_content_types(self, legal_content_types):
        """Sets the legal_content_types of this ContentModelsContentTypeProperty.


        :param legal_content_types: The legal_content_types of this ContentModelsContentTypeProperty.
        :type legal_content_types: List[str]
        """

        self._legal_content_types = legal_content_types

    @property
    def localizable(self):
        """Gets the localizable of this ContentModelsContentTypeProperty.


        :return: The localizable of this ContentModelsContentTypeProperty.
        :rtype: bool
        """
        return self._localizable

    @localizable.setter
    def localizable(self, localizable):
        """Sets the localizable of this ContentModelsContentTypeProperty.


        :param localizable: The localizable of this ContentModelsContentTypeProperty.
        :type localizable: bool
        """

        self._localizable = localizable

    @property
    def max_byte_length(self):
        """Gets the max_byte_length of this ContentModelsContentTypeProperty.


        :return: The max_byte_length of this ContentModelsContentTypeProperty.
        :rtype: int
        """
        return self._max_byte_length

    @max_byte_length.setter
    def max_byte_length(self, max_byte_length):
        """Sets the max_byte_length of this ContentModelsContentTypeProperty.


        :param max_byte_length: The max_byte_length of this ContentModelsContentTypeProperty.
        :type max_byte_length: int
        """

        self._max_byte_length = max_byte_length

    @property
    def max_file_size(self):
        """Gets the max_file_size of this ContentModelsContentTypeProperty.


        :return: The max_file_size of this ContentModelsContentTypeProperty.
        :rtype: int
        """
        return self._max_file_size

    @max_file_size.setter
    def max_file_size(self, max_file_size):
        """Sets the max_file_size of this ContentModelsContentTypeProperty.


        :param max_file_size: The max_file_size of this ContentModelsContentTypeProperty.
        :type max_file_size: int
        """

        self._max_file_size = max_file_size

    @property
    def max_height(self):
        """Gets the max_height of this ContentModelsContentTypeProperty.


        :return: The max_height of this ContentModelsContentTypeProperty.
        :rtype: int
        """
        return self._max_height

    @max_height.setter
    def max_height(self, max_height):
        """Sets the max_height of this ContentModelsContentTypeProperty.


        :param max_height: The max_height of this ContentModelsContentTypeProperty.
        :type max_height: int
        """

        self._max_height = max_height

    @property
    def max_length(self):
        """Gets the max_length of this ContentModelsContentTypeProperty.


        :return: The max_length of this ContentModelsContentTypeProperty.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this ContentModelsContentTypeProperty.


        :param max_length: The max_length of this ContentModelsContentTypeProperty.
        :type max_length: int
        """

        self._max_length = max_length

    @property
    def max_width(self):
        """Gets the max_width of this ContentModelsContentTypeProperty.


        :return: The max_width of this ContentModelsContentTypeProperty.
        :rtype: int
        """
        return self._max_width

    @max_width.setter
    def max_width(self, max_width):
        """Sets the max_width of this ContentModelsContentTypeProperty.


        :param max_width: The max_width of this ContentModelsContentTypeProperty.
        :type max_width: int
        """

        self._max_width = max_width

    @property
    def min_height(self):
        """Gets the min_height of this ContentModelsContentTypeProperty.


        :return: The min_height of this ContentModelsContentTypeProperty.
        :rtype: int
        """
        return self._min_height

    @min_height.setter
    def min_height(self, min_height):
        """Sets the min_height of this ContentModelsContentTypeProperty.


        :param min_height: The min_height of this ContentModelsContentTypeProperty.
        :type min_height: int
        """

        self._min_height = min_height

    @property
    def min_width(self):
        """Gets the min_width of this ContentModelsContentTypeProperty.


        :return: The min_width of this ContentModelsContentTypeProperty.
        :rtype: int
        """
        return self._min_width

    @min_width.setter
    def min_width(self, min_width):
        """Sets the min_width of this ContentModelsContentTypeProperty.


        :param min_width: The min_width of this ContentModelsContentTypeProperty.
        :type min_width: int
        """

        self._min_width = min_width

    @property
    def name(self):
        """Gets the name of this ContentModelsContentTypeProperty.


        :return: The name of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentModelsContentTypeProperty.


        :param name: The name of this ContentModelsContentTypeProperty.
        :type name: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this ContentModelsContentTypeProperty.


        :return: The order of this ContentModelsContentTypeProperty.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ContentModelsContentTypeProperty.


        :param order: The order of this ContentModelsContentTypeProperty.
        :type order: int
        """

        self._order = order

    @property
    def property_description(self):
        """Gets the property_description of this ContentModelsContentTypeProperty.


        :return: The property_description of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._property_description

    @property_description.setter
    def property_description(self, property_description):
        """Sets the property_description of this ContentModelsContentTypeProperty.


        :param property_description: The property_description of this ContentModelsContentTypeProperty.
        :type property_description: str
        """

        self._property_description = property_description

    @property
    def property_section(self):
        """Gets the property_section of this ContentModelsContentTypeProperty.


        :return: The property_section of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._property_section

    @property_section.setter
    def property_section(self, property_section):
        """Sets the property_section of this ContentModelsContentTypeProperty.


        :param property_section: The property_section of this ContentModelsContentTypeProperty.
        :type property_section: str
        """

        self._property_section = property_section

    @property
    def readable_name(self):
        """Gets the readable_name of this ContentModelsContentTypeProperty.


        :return: The readable_name of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._readable_name

    @readable_name.setter
    def readable_name(self, readable_name):
        """Sets the readable_name of this ContentModelsContentTypeProperty.


        :param readable_name: The readable_name of this ContentModelsContentTypeProperty.
        :type readable_name: str
        """

        self._readable_name = readable_name

    @property
    def regexp(self):
        """Gets the regexp of this ContentModelsContentTypeProperty.


        :return: The regexp of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._regexp

    @regexp.setter
    def regexp(self, regexp):
        """Sets the regexp of this ContentModelsContentTypeProperty.


        :param regexp: The regexp of this ContentModelsContentTypeProperty.
        :type regexp: str
        """

        self._regexp = regexp

    @property
    def representation_selection(self):
        """Gets the representation_selection of this ContentModelsContentTypeProperty.


        :return: The representation_selection of this ContentModelsContentTypeProperty.
        :rtype: Dict[str, str]
        """
        return self._representation_selection

    @representation_selection.setter
    def representation_selection(self, representation_selection):
        """Sets the representation_selection of this ContentModelsContentTypeProperty.


        :param representation_selection: The representation_selection of this ContentModelsContentTypeProperty.
        :type representation_selection: Dict[str, str]
        """

        self._representation_selection = representation_selection

    @property
    def representation_validation_string(self):
        """Gets the representation_validation_string of this ContentModelsContentTypeProperty.


        :return: The representation_validation_string of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._representation_validation_string

    @representation_validation_string.setter
    def representation_validation_string(self, representation_validation_string):
        """Sets the representation_validation_string of this ContentModelsContentTypeProperty.


        :param representation_validation_string: The representation_validation_string of this ContentModelsContentTypeProperty.
        :type representation_validation_string: str
        """

        self._representation_validation_string = representation_validation_string

    @property
    def required(self):
        """Gets the required of this ContentModelsContentTypeProperty.


        :return: The required of this ContentModelsContentTypeProperty.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ContentModelsContentTypeProperty.


        :param required: The required of this ContentModelsContentTypeProperty.
        :type required: bool
        """

        self._required = required

    @property
    def root_property_name(self):
        """Gets the root_property_name of this ContentModelsContentTypeProperty.


        :return: The root_property_name of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._root_property_name

    @root_property_name.setter
    def root_property_name(self, root_property_name):
        """Sets the root_property_name of this ContentModelsContentTypeProperty.


        :param root_property_name: The root_property_name of this ContentModelsContentTypeProperty.
        :type root_property_name: str
        """

        self._root_property_name = root_property_name

    @property
    def rss_attribute(self):
        """Gets the rss_attribute of this ContentModelsContentTypeProperty.


        :return: The rss_attribute of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._rss_attribute

    @rss_attribute.setter
    def rss_attribute(self, rss_attribute):
        """Sets the rss_attribute of this ContentModelsContentTypeProperty.


        :param rss_attribute: The rss_attribute of this ContentModelsContentTypeProperty.
        :type rss_attribute: str
        """

        self._rss_attribute = rss_attribute

    @property
    def suppress_property(self):
        """Gets the suppress_property of this ContentModelsContentTypeProperty.


        :return: The suppress_property of this ContentModelsContentTypeProperty.
        :rtype: bool
        """
        return self._suppress_property

    @suppress_property.setter
    def suppress_property(self, suppress_property):
        """Sets the suppress_property of this ContentModelsContentTypeProperty.


        :param suppress_property: The suppress_property of this ContentModelsContentTypeProperty.
        :type suppress_property: bool
        """

        self._suppress_property = suppress_property

    @property
    def validate_as(self):
        """Gets the validate_as of this ContentModelsContentTypeProperty.


        :return: The validate_as of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._validate_as

    @validate_as.setter
    def validate_as(self, validate_as):
        """Sets the validate_as of this ContentModelsContentTypeProperty.


        :param validate_as: The validate_as of this ContentModelsContentTypeProperty.
        :type validate_as: str
        """

        self._validate_as = validate_as

    @property
    def value(self):
        """Gets the value of this ContentModelsContentTypeProperty.


        :return: The value of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ContentModelsContentTypeProperty.


        :param value: The value of this ContentModelsContentTypeProperty.
        :type value: str
        """

        self._value = value

    @property
    def visible(self):
        """Gets the visible of this ContentModelsContentTypeProperty.


        :return: The visible of this ContentModelsContentTypeProperty.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ContentModelsContentTypeProperty.


        :param visible: The visible of this ContentModelsContentTypeProperty.
        :type visible: bool
        """

        self._visible = visible

    @property
    def visible_dependency(self):
        """Gets the visible_dependency of this ContentModelsContentTypeProperty.


        :return: The visible_dependency of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._visible_dependency

    @visible_dependency.setter
    def visible_dependency(self, visible_dependency):
        """Sets the visible_dependency of this ContentModelsContentTypeProperty.


        :param visible_dependency: The visible_dependency of this ContentModelsContentTypeProperty.
        :type visible_dependency: str
        """

        self._visible_dependency = visible_dependency

    @property
    def visible_on(self):
        """Gets the visible_on of this ContentModelsContentTypeProperty.


        :return: The visible_on of this ContentModelsContentTypeProperty.
        :rtype: str
        """
        return self._visible_on

    @visible_on.setter
    def visible_on(self, visible_on):
        """Sets the visible_on of this ContentModelsContentTypeProperty.


        :param visible_on: The visible_on of this ContentModelsContentTypeProperty.
        :type visible_on: str
        """

        self._visible_on = visible_on

    @property
    def weight(self):
        """Gets the weight of this ContentModelsContentTypeProperty.


        :return: The weight of this ContentModelsContentTypeProperty.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ContentModelsContentTypeProperty.


        :param weight: The weight of this ContentModelsContentTypeProperty.
        :type weight: int
        """

        self._weight = weight
