# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_sockets_destiny_item_plug_base import DestinySocketsDestinyItemPlugBase
from openapi_server import util


class DestinyComponentsItemsDestinyItemReusablePlugsComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, plugs: Dict[str, List[DestinySocketsDestinyItemPlugBase]]=None):
        """DestinyComponentsItemsDestinyItemReusablePlugsComponent - a model defined in OpenAPI

        :param plugs: The plugs of this DestinyComponentsItemsDestinyItemReusablePlugsComponent.
        """
        self.openapi_types = {
            'plugs': Dict[str, List[DestinySocketsDestinyItemPlugBase]]
        }

        self.attribute_map = {
            'plugs': 'plugs'
        }

        self._plugs = plugs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyComponentsItemsDestinyItemReusablePlugsComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Components.Items.DestinyItemReusablePlugsComponent of this DestinyComponentsItemsDestinyItemReusablePlugsComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plugs(self):
        """Gets the plugs of this DestinyComponentsItemsDestinyItemReusablePlugsComponent.

        If the item supports reusable plugs, this is the list of plugs that are allowed to be used for the socket, and any relevant information about whether they are \"enabled\", whether they are allowed to be inserted, and any other information such as objectives.   A Reusable Plug is a plug that you can always insert into this socket as long as its insertion rules are passed, regardless of whether or not you have the plug in your inventory. An example of it failing an insertion rule would be if it has an Objective that needs to be completed before it can be inserted, and that objective hasn't been completed yet.   In practice, a socket will *either* have reusable plugs *or* it will allow for plugs in your inventory to be inserted. See DestinyInventoryItemDefinition.socket for more info.   KEY = The INDEX into the item's list of sockets. VALUE = The set of plugs for that socket.   If a socket doesn't have any reusable plugs defined at the item scope, there will be no entry for that socket.

        :return: The plugs of this DestinyComponentsItemsDestinyItemReusablePlugsComponent.
        :rtype: Dict[str, List[DestinySocketsDestinyItemPlugBase]]
        """
        return self._plugs

    @plugs.setter
    def plugs(self, plugs):
        """Sets the plugs of this DestinyComponentsItemsDestinyItemReusablePlugsComponent.

        If the item supports reusable plugs, this is the list of plugs that are allowed to be used for the socket, and any relevant information about whether they are \"enabled\", whether they are allowed to be inserted, and any other information such as objectives.   A Reusable Plug is a plug that you can always insert into this socket as long as its insertion rules are passed, regardless of whether or not you have the plug in your inventory. An example of it failing an insertion rule would be if it has an Objective that needs to be completed before it can be inserted, and that objective hasn't been completed yet.   In practice, a socket will *either* have reusable plugs *or* it will allow for plugs in your inventory to be inserted. See DestinyInventoryItemDefinition.socket for more info.   KEY = The INDEX into the item's list of sockets. VALUE = The set of plugs for that socket.   If a socket doesn't have any reusable plugs defined at the item scope, there will be no entry for that socket.

        :param plugs: The plugs of this DestinyComponentsItemsDestinyItemReusablePlugsComponent.
        :type plugs: Dict[str, List[DestinySocketsDestinyItemPlugBase]]
        """

        self._plugs = plugs
