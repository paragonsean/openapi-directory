# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_destiny_inventory_item_stat_definition import DestinyDefinitionsDestinyInventoryItemStatDefinition
from openapi_server import util


class DestinyDefinitionsDestinyItemStatBlockDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_primary_stat_display: bool=None, has_displayable_stats: bool=None, primary_base_stat_hash: int=None, stat_group_hash: int=None, stats: Dict[str, DestinyDefinitionsDestinyInventoryItemStatDefinition]=None):
        """DestinyDefinitionsDestinyItemStatBlockDefinition - a model defined in OpenAPI

        :param disable_primary_stat_display: The disable_primary_stat_display of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :param has_displayable_stats: The has_displayable_stats of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :param primary_base_stat_hash: The primary_base_stat_hash of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :param stat_group_hash: The stat_group_hash of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :param stats: The stats of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        """
        self.openapi_types = {
            'disable_primary_stat_display': bool,
            'has_displayable_stats': bool,
            'primary_base_stat_hash': int,
            'stat_group_hash': int,
            'stats': Dict[str, DestinyDefinitionsDestinyInventoryItemStatDefinition]
        }

        self.attribute_map = {
            'disable_primary_stat_display': 'disablePrimaryStatDisplay',
            'has_displayable_stats': 'hasDisplayableStats',
            'primary_base_stat_hash': 'primaryBaseStatHash',
            'stat_group_hash': 'statGroupHash',
            'stats': 'stats'
        }

        self._disable_primary_stat_display = disable_primary_stat_display
        self._has_displayable_stats = has_displayable_stats
        self._primary_base_stat_hash = primary_base_stat_hash
        self._stat_group_hash = stat_group_hash
        self._stats = stats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyItemStatBlockDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyItemStatBlockDefinition of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_primary_stat_display(self):
        """Gets the disable_primary_stat_display of this DestinyDefinitionsDestinyItemStatBlockDefinition.

        If true, the game won't show the \"primary\" stat on this item when you inspect it.  NOTE: This is being manually mapped, because I happen to want it in a block that isn't going to directly create this derivative block.

        :return: The disable_primary_stat_display of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :rtype: bool
        """
        return self._disable_primary_stat_display

    @disable_primary_stat_display.setter
    def disable_primary_stat_display(self, disable_primary_stat_display):
        """Sets the disable_primary_stat_display of this DestinyDefinitionsDestinyItemStatBlockDefinition.

        If true, the game won't show the \"primary\" stat on this item when you inspect it.  NOTE: This is being manually mapped, because I happen to want it in a block that isn't going to directly create this derivative block.

        :param disable_primary_stat_display: The disable_primary_stat_display of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :type disable_primary_stat_display: bool
        """

        self._disable_primary_stat_display = disable_primary_stat_display

    @property
    def has_displayable_stats(self):
        """Gets the has_displayable_stats of this DestinyDefinitionsDestinyItemStatBlockDefinition.

        A quick and lazy way to determine whether any stat other than the \"primary\" stat is actually visible on the item. Items often have stats that we return in case people find them useful, but they're not part of the \"Stat Group\" and thus we wouldn't display them in our UI. If this is False, then we're not going to display any of these stats other than the primary one.

        :return: The has_displayable_stats of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :rtype: bool
        """
        return self._has_displayable_stats

    @has_displayable_stats.setter
    def has_displayable_stats(self, has_displayable_stats):
        """Sets the has_displayable_stats of this DestinyDefinitionsDestinyItemStatBlockDefinition.

        A quick and lazy way to determine whether any stat other than the \"primary\" stat is actually visible on the item. Items often have stats that we return in case people find them useful, but they're not part of the \"Stat Group\" and thus we wouldn't display them in our UI. If this is False, then we're not going to display any of these stats other than the primary one.

        :param has_displayable_stats: The has_displayable_stats of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :type has_displayable_stats: bool
        """

        self._has_displayable_stats = has_displayable_stats

    @property
    def primary_base_stat_hash(self):
        """Gets the primary_base_stat_hash of this DestinyDefinitionsDestinyItemStatBlockDefinition.

        This stat is determined to be the \"primary\" stat, and can be looked up in the stats or any other stat collection related to the item.  Use this hash to look up the stat's value using DestinyInventoryItemDefinition.stats.stats, and the renderable data for the primary stat in the related DestinyStatDefinition.

        :return: The primary_base_stat_hash of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :rtype: int
        """
        return self._primary_base_stat_hash

    @primary_base_stat_hash.setter
    def primary_base_stat_hash(self, primary_base_stat_hash):
        """Sets the primary_base_stat_hash of this DestinyDefinitionsDestinyItemStatBlockDefinition.

        This stat is determined to be the \"primary\" stat, and can be looked up in the stats or any other stat collection related to the item.  Use this hash to look up the stat's value using DestinyInventoryItemDefinition.stats.stats, and the renderable data for the primary stat in the related DestinyStatDefinition.

        :param primary_base_stat_hash: The primary_base_stat_hash of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :type primary_base_stat_hash: int
        """

        self._primary_base_stat_hash = primary_base_stat_hash

    @property
    def stat_group_hash(self):
        """Gets the stat_group_hash of this DestinyDefinitionsDestinyItemStatBlockDefinition.

        If the item's stats are meant to be modified by a DestinyStatGroupDefinition, this will be the identifier for that definition.  If you are using live data or precomputed stats data on the DestinyInventoryItemDefinition.stats.stats property, you don't have to worry about statGroupHash and how it alters stats: the already altered stats are provided to you. But if you want to see how the sausage gets made, or perform computations yourself, this is valuable information.

        :return: The stat_group_hash of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :rtype: int
        """
        return self._stat_group_hash

    @stat_group_hash.setter
    def stat_group_hash(self, stat_group_hash):
        """Sets the stat_group_hash of this DestinyDefinitionsDestinyItemStatBlockDefinition.

        If the item's stats are meant to be modified by a DestinyStatGroupDefinition, this will be the identifier for that definition.  If you are using live data or precomputed stats data on the DestinyInventoryItemDefinition.stats.stats property, you don't have to worry about statGroupHash and how it alters stats: the already altered stats are provided to you. But if you want to see how the sausage gets made, or perform computations yourself, this is valuable information.

        :param stat_group_hash: The stat_group_hash of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :type stat_group_hash: int
        """

        self._stat_group_hash = stat_group_hash

    @property
    def stats(self):
        """Gets the stats of this DestinyDefinitionsDestinyItemStatBlockDefinition.

        If you are looking for precomputed values for the stats on a weapon, this is where they are stored. Technically these are the \"Display\" stat values. Please see DestinyStatsDefinition for what Display Stat Values means, it's a very long story... but essentially these are the closest values BNet can get to the item stats that you see in-game.  These stats are keyed by the DestinyStatDefinition's hash identifier for the stat that's found on the item.

        :return: The stats of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :rtype: Dict[str, DestinyDefinitionsDestinyInventoryItemStatDefinition]
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this DestinyDefinitionsDestinyItemStatBlockDefinition.

        If you are looking for precomputed values for the stats on a weapon, this is where they are stored. Technically these are the \"Display\" stat values. Please see DestinyStatsDefinition for what Display Stat Values means, it's a very long story... but essentially these are the closest values BNet can get to the item stats that you see in-game.  These stats are keyed by the DestinyStatDefinition's hash identifier for the stat that's found on the item.

        :param stats: The stats of this DestinyDefinitionsDestinyItemStatBlockDefinition.
        :type stats: Dict[str, DestinyDefinitionsDestinyInventoryItemStatDefinition]
        """

        self._stats = stats
