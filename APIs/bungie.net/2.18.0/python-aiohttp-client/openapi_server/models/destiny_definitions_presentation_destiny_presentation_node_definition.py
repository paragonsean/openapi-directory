# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server.models.destiny_definitions_presentation_destiny_presentation_node_children_block import DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock
from openapi_server.models.destiny_definitions_presentation_destiny_presentation_node_requirements_block import DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock
from openapi_server import util


class DestinyDefinitionsPresentationDestinyPresentationNodeDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock=None, completion_record_hash: int=None, disable_child_subscreen_navigation: bool=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, display_style: int=None, hash: int=None, index: int=None, max_category_record_score: int=None, node_type: int=None, objective_hash: int=None, original_icon: str=None, parent_node_hashes: List[int]=None, presentation_node_type: int=None, redacted: bool=None, requirements: DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock=None, root_view_icon: str=None, scope: int=None, screen_style: int=None, trait_hashes: List[int]=None, trait_ids: List[str]=None):
        """DestinyDefinitionsPresentationDestinyPresentationNodeDefinition - a model defined in OpenAPI

        :param children: The children of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param completion_record_hash: The completion_record_hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param disable_child_subscreen_navigation: The disable_child_subscreen_navigation of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param display_style: The display_style of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param hash: The hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param index: The index of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param max_category_record_score: The max_category_record_score of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param node_type: The node_type of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param objective_hash: The objective_hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param original_icon: The original_icon of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param parent_node_hashes: The parent_node_hashes of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param presentation_node_type: The presentation_node_type of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param redacted: The redacted of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param requirements: The requirements of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param root_view_icon: The root_view_icon of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param scope: The scope of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param screen_style: The screen_style of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param trait_hashes: The trait_hashes of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :param trait_ids: The trait_ids of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        """
        self.openapi_types = {
            'children': DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock,
            'completion_record_hash': int,
            'disable_child_subscreen_navigation': bool,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'display_style': int,
            'hash': int,
            'index': int,
            'max_category_record_score': int,
            'node_type': int,
            'objective_hash': int,
            'original_icon': str,
            'parent_node_hashes': List[int],
            'presentation_node_type': int,
            'redacted': bool,
            'requirements': DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock,
            'root_view_icon': str,
            'scope': int,
            'screen_style': int,
            'trait_hashes': List[int],
            'trait_ids': List[str]
        }

        self.attribute_map = {
            'children': 'children',
            'completion_record_hash': 'completionRecordHash',
            'disable_child_subscreen_navigation': 'disableChildSubscreenNavigation',
            'display_properties': 'displayProperties',
            'display_style': 'displayStyle',
            'hash': 'hash',
            'index': 'index',
            'max_category_record_score': 'maxCategoryRecordScore',
            'node_type': 'nodeType',
            'objective_hash': 'objectiveHash',
            'original_icon': 'originalIcon',
            'parent_node_hashes': 'parentNodeHashes',
            'presentation_node_type': 'presentationNodeType',
            'redacted': 'redacted',
            'requirements': 'requirements',
            'root_view_icon': 'rootViewIcon',
            'scope': 'scope',
            'screen_style': 'screenStyle',
            'trait_hashes': 'traitHashes',
            'trait_ids': 'traitIds'
        }

        self._children = children
        self._completion_record_hash = completion_record_hash
        self._disable_child_subscreen_navigation = disable_child_subscreen_navigation
        self._display_properties = display_properties
        self._display_style = display_style
        self._hash = hash
        self._index = index
        self._max_category_record_score = max_category_record_score
        self._node_type = node_type
        self._objective_hash = objective_hash
        self._original_icon = original_icon
        self._parent_node_hashes = parent_node_hashes
        self._presentation_node_type = presentation_node_type
        self._redacted = redacted
        self._requirements = requirements
        self._root_view_icon = root_view_icon
        self._scope = scope
        self._screen_style = screen_style
        self._trait_hashes = trait_hashes
        self._trait_ids = trait_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsPresentationDestinyPresentationNodeDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.Presentation.DestinyPresentationNodeDefinition of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        The child entities contained by this presentation node.

        :return: The children of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        The child entities contained by this presentation node.

        :param children: The children of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type children: DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock
        """

        self._children = children

    @property
    def completion_record_hash(self):
        """Gets the completion_record_hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        If this presentation node has an associated \"Record\" that you can accomplish for completing its children, this is the identifier of that Record.

        :return: The completion_record_hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: int
        """
        return self._completion_record_hash

    @completion_record_hash.setter
    def completion_record_hash(self, completion_record_hash):
        """Sets the completion_record_hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        If this presentation node has an associated \"Record\" that you can accomplish for completing its children, this is the identifier of that Record.

        :param completion_record_hash: The completion_record_hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type completion_record_hash: int
        """

        self._completion_record_hash = completion_record_hash

    @property
    def disable_child_subscreen_navigation(self):
        """Gets the disable_child_subscreen_navigation of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        If this presentation node has children, but the game doesn't let you inspect the details of those children, that is indicated here.

        :return: The disable_child_subscreen_navigation of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: bool
        """
        return self._disable_child_subscreen_navigation

    @disable_child_subscreen_navigation.setter
    def disable_child_subscreen_navigation(self, disable_child_subscreen_navigation):
        """Sets the disable_child_subscreen_navigation of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        If this presentation node has children, but the game doesn't let you inspect the details of those children, that is indicated here.

        :param disable_child_subscreen_navigation: The disable_child_subscreen_navigation of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type disable_child_subscreen_navigation: bool
        """

        self._disable_child_subscreen_navigation = disable_child_subscreen_navigation

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.


        :return: The display_properties of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def display_style(self):
        """Gets the display_style of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        A hint for how to display this presentation node when it's shown in a list.

        :return: The display_style of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: int
        """
        return self._display_style

    @display_style.setter
    def display_style(self, display_style):
        """Sets the display_style of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        A hint for how to display this presentation node when it's shown in a list.

        :param display_style: The display_style of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type display_style: int
        """

        self._display_style = display_style

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type index: int
        """

        self._index = index

    @property
    def max_category_record_score(self):
        """Gets the max_category_record_score of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.


        :return: The max_category_record_score of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: int
        """
        return self._max_category_record_score

    @max_category_record_score.setter
    def max_category_record_score(self, max_category_record_score):
        """Sets the max_category_record_score of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.


        :param max_category_record_score: The max_category_record_score of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type max_category_record_score: int
        """

        self._max_category_record_score = max_category_record_score

    @property
    def node_type(self):
        """Gets the node_type of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.


        :return: The node_type of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: int
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.


        :param node_type: The node_type of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type node_type: int
        """

        self._node_type = node_type

    @property
    def objective_hash(self):
        """Gets the objective_hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        If this presentation node shows a related objective (for instance, if it tracks the progress of its children), the objective being tracked is indicated here.

        :return: The objective_hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: int
        """
        return self._objective_hash

    @objective_hash.setter
    def objective_hash(self, objective_hash):
        """Sets the objective_hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        If this presentation node shows a related objective (for instance, if it tracks the progress of its children), the objective being tracked is indicated here.

        :param objective_hash: The objective_hash of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type objective_hash: int
        """

        self._objective_hash = objective_hash

    @property
    def original_icon(self):
        """Gets the original_icon of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        The original icon for this presentation node, before we futzed with it.

        :return: The original_icon of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: str
        """
        return self._original_icon

    @original_icon.setter
    def original_icon(self, original_icon):
        """Sets the original_icon of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        The original icon for this presentation node, before we futzed with it.

        :param original_icon: The original_icon of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type original_icon: str
        """

        self._original_icon = original_icon

    @property
    def parent_node_hashes(self):
        """Gets the parent_node_hashes of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.

        :return: The parent_node_hashes of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: List[int]
        """
        return self._parent_node_hashes

    @parent_node_hashes.setter
    def parent_node_hashes(self, parent_node_hashes):
        """Sets the parent_node_hashes of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.

        :param parent_node_hashes: The parent_node_hashes of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type parent_node_hashes: List[int]
        """

        self._parent_node_hashes = parent_node_hashes

    @property
    def presentation_node_type(self):
        """Gets the presentation_node_type of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.


        :return: The presentation_node_type of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: int
        """
        return self._presentation_node_type

    @presentation_node_type.setter
    def presentation_node_type(self, presentation_node_type):
        """Sets the presentation_node_type of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.


        :param presentation_node_type: The presentation_node_type of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type presentation_node_type: int
        """

        self._presentation_node_type = presentation_node_type

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type redacted: bool
        """

        self._redacted = redacted

    @property
    def requirements(self):
        """Gets the requirements of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        The requirements for being able to interact with this presentation node and its children.

        :return: The requirements of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        The requirements for being able to interact with this presentation node and its children.

        :param requirements: The requirements of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type requirements: DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock
        """

        self._requirements = requirements

    @property
    def root_view_icon(self):
        """Gets the root_view_icon of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        Some presentation nodes are meant to be explicitly shown on the \"root\" or \"entry\" screens for the feature to which they are related. You should use this icon when showing them on such a view, if you have a similar \"entry point\" view in your UI. If you don't have a UI, then I guess it doesn't matter either way does it?

        :return: The root_view_icon of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: str
        """
        return self._root_view_icon

    @root_view_icon.setter
    def root_view_icon(self, root_view_icon):
        """Sets the root_view_icon of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        Some presentation nodes are meant to be explicitly shown on the \"root\" or \"entry\" screens for the feature to which they are related. You should use this icon when showing them on such a view, if you have a similar \"entry point\" view in your UI. If you don't have a UI, then I guess it doesn't matter either way does it?

        :param root_view_icon: The root_view_icon of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type root_view_icon: str
        """

        self._root_view_icon = root_view_icon

    @property
    def scope(self):
        """Gets the scope of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        Indicates whether this presentation node's state is determined on a per-character or on an account-wide basis.

        :return: The scope of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: int
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        Indicates whether this presentation node's state is determined on a per-character or on an account-wide basis.

        :param scope: The scope of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type scope: int
        """

        self._scope = scope

    @property
    def screen_style(self):
        """Gets the screen_style of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        A hint for how to display this presentation node when it's shown in its own detail screen.

        :return: The screen_style of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: int
        """
        return self._screen_style

    @screen_style.setter
    def screen_style(self, screen_style):
        """Sets the screen_style of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.

        A hint for how to display this presentation node when it's shown in its own detail screen.

        :param screen_style: The screen_style of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type screen_style: int
        """

        self._screen_style = screen_style

    @property
    def trait_hashes(self):
        """Gets the trait_hashes of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.


        :return: The trait_hashes of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: List[int]
        """
        return self._trait_hashes

    @trait_hashes.setter
    def trait_hashes(self, trait_hashes):
        """Sets the trait_hashes of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.


        :param trait_hashes: The trait_hashes of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type trait_hashes: List[int]
        """

        self._trait_hashes = trait_hashes

    @property
    def trait_ids(self):
        """Gets the trait_ids of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.


        :return: The trait_ids of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :rtype: List[str]
        """
        return self._trait_ids

    @trait_ids.setter
    def trait_ids(self, trait_ids):
        """Sets the trait_ids of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.


        :param trait_ids: The trait_ids of this DestinyDefinitionsPresentationDestinyPresentationNodeDefinition.
        :type trait_ids: List[str]
        """

        self._trait_ids = trait_ids
