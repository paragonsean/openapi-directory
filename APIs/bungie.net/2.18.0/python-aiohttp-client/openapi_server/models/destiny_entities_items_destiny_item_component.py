# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_quests_destiny_objective_progress import DestinyQuestsDestinyObjectiveProgress
from openapi_server import util


class DestinyEntitiesItemsDestinyItemComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bind_status: int=None, bucket_hash: int=None, expiration_date: datetime=None, is_wrapper: bool=None, item_hash: int=None, item_instance_id: int=None, item_value_visibility: List[bool]=None, location: int=None, lockable: bool=None, metric_hash: int=None, metric_objective: DestinyQuestsDestinyObjectiveProgress=None, override_style_item_hash: int=None, quantity: int=None, state: int=None, tooltip_notification_indexes: List[int]=None, transfer_status: int=None, version_number: int=None):
        """DestinyEntitiesItemsDestinyItemComponent - a model defined in OpenAPI

        :param bind_status: The bind_status of this DestinyEntitiesItemsDestinyItemComponent.
        :param bucket_hash: The bucket_hash of this DestinyEntitiesItemsDestinyItemComponent.
        :param expiration_date: The expiration_date of this DestinyEntitiesItemsDestinyItemComponent.
        :param is_wrapper: The is_wrapper of this DestinyEntitiesItemsDestinyItemComponent.
        :param item_hash: The item_hash of this DestinyEntitiesItemsDestinyItemComponent.
        :param item_instance_id: The item_instance_id of this DestinyEntitiesItemsDestinyItemComponent.
        :param item_value_visibility: The item_value_visibility of this DestinyEntitiesItemsDestinyItemComponent.
        :param location: The location of this DestinyEntitiesItemsDestinyItemComponent.
        :param lockable: The lockable of this DestinyEntitiesItemsDestinyItemComponent.
        :param metric_hash: The metric_hash of this DestinyEntitiesItemsDestinyItemComponent.
        :param metric_objective: The metric_objective of this DestinyEntitiesItemsDestinyItemComponent.
        :param override_style_item_hash: The override_style_item_hash of this DestinyEntitiesItemsDestinyItemComponent.
        :param quantity: The quantity of this DestinyEntitiesItemsDestinyItemComponent.
        :param state: The state of this DestinyEntitiesItemsDestinyItemComponent.
        :param tooltip_notification_indexes: The tooltip_notification_indexes of this DestinyEntitiesItemsDestinyItemComponent.
        :param transfer_status: The transfer_status of this DestinyEntitiesItemsDestinyItemComponent.
        :param version_number: The version_number of this DestinyEntitiesItemsDestinyItemComponent.
        """
        self.openapi_types = {
            'bind_status': int,
            'bucket_hash': int,
            'expiration_date': datetime,
            'is_wrapper': bool,
            'item_hash': int,
            'item_instance_id': int,
            'item_value_visibility': List[bool],
            'location': int,
            'lockable': bool,
            'metric_hash': int,
            'metric_objective': DestinyQuestsDestinyObjectiveProgress,
            'override_style_item_hash': int,
            'quantity': int,
            'state': int,
            'tooltip_notification_indexes': List[int],
            'transfer_status': int,
            'version_number': int
        }

        self.attribute_map = {
            'bind_status': 'bindStatus',
            'bucket_hash': 'bucketHash',
            'expiration_date': 'expirationDate',
            'is_wrapper': 'isWrapper',
            'item_hash': 'itemHash',
            'item_instance_id': 'itemInstanceId',
            'item_value_visibility': 'itemValueVisibility',
            'location': 'location',
            'lockable': 'lockable',
            'metric_hash': 'metricHash',
            'metric_objective': 'metricObjective',
            'override_style_item_hash': 'overrideStyleItemHash',
            'quantity': 'quantity',
            'state': 'state',
            'tooltip_notification_indexes': 'tooltipNotificationIndexes',
            'transfer_status': 'transferStatus',
            'version_number': 'versionNumber'
        }

        self._bind_status = bind_status
        self._bucket_hash = bucket_hash
        self._expiration_date = expiration_date
        self._is_wrapper = is_wrapper
        self._item_hash = item_hash
        self._item_instance_id = item_instance_id
        self._item_value_visibility = item_value_visibility
        self._location = location
        self._lockable = lockable
        self._metric_hash = metric_hash
        self._metric_objective = metric_objective
        self._override_style_item_hash = override_style_item_hash
        self._quantity = quantity
        self._state = state
        self._tooltip_notification_indexes = tooltip_notification_indexes
        self._transfer_status = transfer_status
        self._version_number = version_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyEntitiesItemsDestinyItemComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Entities.Items.DestinyItemComponent of this DestinyEntitiesItemsDestinyItemComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bind_status(self):
        """Gets the bind_status of this DestinyEntitiesItemsDestinyItemComponent.

        If the item is bound to a location, it will be specified in this enum.

        :return: The bind_status of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: int
        """
        return self._bind_status

    @bind_status.setter
    def bind_status(self, bind_status):
        """Sets the bind_status of this DestinyEntitiesItemsDestinyItemComponent.

        If the item is bound to a location, it will be specified in this enum.

        :param bind_status: The bind_status of this DestinyEntitiesItemsDestinyItemComponent.
        :type bind_status: int
        """

        self._bind_status = bind_status

    @property
    def bucket_hash(self):
        """Gets the bucket_hash of this DestinyEntitiesItemsDestinyItemComponent.

        The hash identifier for the specific inventory bucket in which the item is located.

        :return: The bucket_hash of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: int
        """
        return self._bucket_hash

    @bucket_hash.setter
    def bucket_hash(self, bucket_hash):
        """Sets the bucket_hash of this DestinyEntitiesItemsDestinyItemComponent.

        The hash identifier for the specific inventory bucket in which the item is located.

        :param bucket_hash: The bucket_hash of this DestinyEntitiesItemsDestinyItemComponent.
        :type bucket_hash: int
        """

        self._bucket_hash = bucket_hash

    @property
    def expiration_date(self):
        """Gets the expiration_date of this DestinyEntitiesItemsDestinyItemComponent.

        If the item can expire, this is the date at which it will/did expire.

        :return: The expiration_date of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this DestinyEntitiesItemsDestinyItemComponent.

        If the item can expire, this is the date at which it will/did expire.

        :param expiration_date: The expiration_date of this DestinyEntitiesItemsDestinyItemComponent.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def is_wrapper(self):
        """Gets the is_wrapper of this DestinyEntitiesItemsDestinyItemComponent.

        If this is true, the object is actually a \"wrapper\" of the object it's representing. This means that it's not the actual item itself, but rather an item that must be \"opened\" in game before you have and can use the item.   Wrappers are an evolution of \"bundles\", which give an easy way to let you preview the contents of what you purchased while still letting you get a refund before you \"open\" it.

        :return: The is_wrapper of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: bool
        """
        return self._is_wrapper

    @is_wrapper.setter
    def is_wrapper(self, is_wrapper):
        """Sets the is_wrapper of this DestinyEntitiesItemsDestinyItemComponent.

        If this is true, the object is actually a \"wrapper\" of the object it's representing. This means that it's not the actual item itself, but rather an item that must be \"opened\" in game before you have and can use the item.   Wrappers are an evolution of \"bundles\", which give an easy way to let you preview the contents of what you purchased while still letting you get a refund before you \"open\" it.

        :param is_wrapper: The is_wrapper of this DestinyEntitiesItemsDestinyItemComponent.
        :type is_wrapper: bool
        """

        self._is_wrapper = is_wrapper

    @property
    def item_hash(self):
        """Gets the item_hash of this DestinyEntitiesItemsDestinyItemComponent.

        The identifier for the item's definition, which is where most of the useful static information for the item can be found.

        :return: The item_hash of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: int
        """
        return self._item_hash

    @item_hash.setter
    def item_hash(self, item_hash):
        """Sets the item_hash of this DestinyEntitiesItemsDestinyItemComponent.

        The identifier for the item's definition, which is where most of the useful static information for the item can be found.

        :param item_hash: The item_hash of this DestinyEntitiesItemsDestinyItemComponent.
        :type item_hash: int
        """

        self._item_hash = item_hash

    @property
    def item_instance_id(self):
        """Gets the item_instance_id of this DestinyEntitiesItemsDestinyItemComponent.

        If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size.

        :return: The item_instance_id of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: int
        """
        return self._item_instance_id

    @item_instance_id.setter
    def item_instance_id(self, item_instance_id):
        """Sets the item_instance_id of this DestinyEntitiesItemsDestinyItemComponent.

        If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size.

        :param item_instance_id: The item_instance_id of this DestinyEntitiesItemsDestinyItemComponent.
        :type item_instance_id: int
        """

        self._item_instance_id = item_instance_id

    @property
    def item_value_visibility(self):
        """Gets the item_value_visibility of this DestinyEntitiesItemsDestinyItemComponent.

        If available, a list that describes which item values (rewards) should be shown (true) or hidden (false).

        :return: The item_value_visibility of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: List[bool]
        """
        return self._item_value_visibility

    @item_value_visibility.setter
    def item_value_visibility(self, item_value_visibility):
        """Sets the item_value_visibility of this DestinyEntitiesItemsDestinyItemComponent.

        If available, a list that describes which item values (rewards) should be shown (true) or hidden (false).

        :param item_value_visibility: The item_value_visibility of this DestinyEntitiesItemsDestinyItemComponent.
        :type item_value_visibility: List[bool]
        """

        self._item_value_visibility = item_value_visibility

    @property
    def location(self):
        """Gets the location of this DestinyEntitiesItemsDestinyItemComponent.

        An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items.

        :return: The location of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DestinyEntitiesItemsDestinyItemComponent.

        An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items.

        :param location: The location of this DestinyEntitiesItemsDestinyItemComponent.
        :type location: int
        """

        self._location = location

    @property
    def lockable(self):
        """Gets the lockable of this DestinyEntitiesItemsDestinyItemComponent.

        If the item can be locked, this will indicate that state.

        :return: The lockable of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: bool
        """
        return self._lockable

    @lockable.setter
    def lockable(self, lockable):
        """Sets the lockable of this DestinyEntitiesItemsDestinyItemComponent.

        If the item can be locked, this will indicate that state.

        :param lockable: The lockable of this DestinyEntitiesItemsDestinyItemComponent.
        :type lockable: bool
        """

        self._lockable = lockable

    @property
    def metric_hash(self):
        """Gets the metric_hash of this DestinyEntitiesItemsDestinyItemComponent.

        The identifier for the currently-selected metric definition, to be displayed on the emblem nameplate.

        :return: The metric_hash of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: int
        """
        return self._metric_hash

    @metric_hash.setter
    def metric_hash(self, metric_hash):
        """Sets the metric_hash of this DestinyEntitiesItemsDestinyItemComponent.

        The identifier for the currently-selected metric definition, to be displayed on the emblem nameplate.

        :param metric_hash: The metric_hash of this DestinyEntitiesItemsDestinyItemComponent.
        :type metric_hash: int
        """

        self._metric_hash = metric_hash

    @property
    def metric_objective(self):
        """Gets the metric_objective of this DestinyEntitiesItemsDestinyItemComponent.

        The objective progress for the currently-selected metric definition, to be displayed on the emblem nameplate.

        :return: The metric_objective of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: DestinyQuestsDestinyObjectiveProgress
        """
        return self._metric_objective

    @metric_objective.setter
    def metric_objective(self, metric_objective):
        """Sets the metric_objective of this DestinyEntitiesItemsDestinyItemComponent.

        The objective progress for the currently-selected metric definition, to be displayed on the emblem nameplate.

        :param metric_objective: The metric_objective of this DestinyEntitiesItemsDestinyItemComponent.
        :type metric_objective: DestinyQuestsDestinyObjectiveProgress
        """

        self._metric_objective = metric_objective

    @property
    def override_style_item_hash(self):
        """Gets the override_style_item_hash of this DestinyEntitiesItemsDestinyItemComponent.

        If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.  If you don't do this, certain items whose styles are being overridden by socketed items - such as the \"Recycle Shader\" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.

        :return: The override_style_item_hash of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: int
        """
        return self._override_style_item_hash

    @override_style_item_hash.setter
    def override_style_item_hash(self, override_style_item_hash):
        """Sets the override_style_item_hash of this DestinyEntitiesItemsDestinyItemComponent.

        If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.  If you don't do this, certain items whose styles are being overridden by socketed items - such as the \"Recycle Shader\" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.

        :param override_style_item_hash: The override_style_item_hash of this DestinyEntitiesItemsDestinyItemComponent.
        :type override_style_item_hash: int
        """

        self._override_style_item_hash = override_style_item_hash

    @property
    def quantity(self):
        """Gets the quantity of this DestinyEntitiesItemsDestinyItemComponent.

        The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)

        :return: The quantity of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this DestinyEntitiesItemsDestinyItemComponent.

        The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)

        :param quantity: The quantity of this DestinyEntitiesItemsDestinyItemComponent.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def state(self):
        """Gets the state of this DestinyEntitiesItemsDestinyItemComponent.

        A flags enumeration indicating the transient/custom states of the item that affect how it is rendered: whether it's tracked or locked for example, or whether it has a masterwork plug inserted.

        :return: The state of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DestinyEntitiesItemsDestinyItemComponent.

        A flags enumeration indicating the transient/custom states of the item that affect how it is rendered: whether it's tracked or locked for example, or whether it has a masterwork plug inserted.

        :param state: The state of this DestinyEntitiesItemsDestinyItemComponent.
        :type state: int
        """

        self._state = state

    @property
    def tooltip_notification_indexes(self):
        """Gets the tooltip_notification_indexes of this DestinyEntitiesItemsDestinyItemComponent.

        If this is populated, it is a list of indexes into DestinyInventoryItemDefinition.tooltipNotifications for any special tooltip messages that need to be shown for this item.

        :return: The tooltip_notification_indexes of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: List[int]
        """
        return self._tooltip_notification_indexes

    @tooltip_notification_indexes.setter
    def tooltip_notification_indexes(self, tooltip_notification_indexes):
        """Sets the tooltip_notification_indexes of this DestinyEntitiesItemsDestinyItemComponent.

        If this is populated, it is a list of indexes into DestinyInventoryItemDefinition.tooltipNotifications for any special tooltip messages that need to be shown for this item.

        :param tooltip_notification_indexes: The tooltip_notification_indexes of this DestinyEntitiesItemsDestinyItemComponent.
        :type tooltip_notification_indexes: List[int]
        """

        self._tooltip_notification_indexes = tooltip_notification_indexes

    @property
    def transfer_status(self):
        """Gets the transfer_status of this DestinyEntitiesItemsDestinyItemComponent.

        If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer).

        :return: The transfer_status of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: int
        """
        return self._transfer_status

    @transfer_status.setter
    def transfer_status(self, transfer_status):
        """Sets the transfer_status of this DestinyEntitiesItemsDestinyItemComponent.

        If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer).

        :param transfer_status: The transfer_status of this DestinyEntitiesItemsDestinyItemComponent.
        :type transfer_status: int
        """

        self._transfer_status = transfer_status

    @property
    def version_number(self):
        """Gets the version_number of this DestinyEntitiesItemsDestinyItemComponent.

        The version of this item, used to index into the versions list in the item definition quality block.

        :return: The version_number of this DestinyEntitiesItemsDestinyItemComponent.
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this DestinyEntitiesItemsDestinyItemComponent.

        The version of this item, used to index into the versions list in the item definition quality block.

        :param version_number: The version_number of this DestinyEntitiesItemsDestinyItemComponent.
        :type version_number: int
        """

        self._version_number = version_number
