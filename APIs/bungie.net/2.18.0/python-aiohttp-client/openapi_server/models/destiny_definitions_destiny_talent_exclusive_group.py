# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinyDefinitionsDestinyTalentExclusiveGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_hash: int=None, lore_hash: int=None, node_hashes: List[int]=None, opposing_group_hashes: List[int]=None, opposing_node_hashes: List[int]=None):
        """DestinyDefinitionsDestinyTalentExclusiveGroup - a model defined in OpenAPI

        :param group_hash: The group_hash of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :param lore_hash: The lore_hash of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :param node_hashes: The node_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :param opposing_group_hashes: The opposing_group_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :param opposing_node_hashes: The opposing_node_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        """
        self.openapi_types = {
            'group_hash': int,
            'lore_hash': int,
            'node_hashes': List[int],
            'opposing_group_hashes': List[int],
            'opposing_node_hashes': List[int]
        }

        self.attribute_map = {
            'group_hash': 'groupHash',
            'lore_hash': 'loreHash',
            'node_hashes': 'nodeHashes',
            'opposing_group_hashes': 'opposingGroupHashes',
            'opposing_node_hashes': 'opposingNodeHashes'
        }

        self._group_hash = group_hash
        self._lore_hash = lore_hash
        self._node_hashes = node_hashes
        self._opposing_group_hashes = opposing_group_hashes
        self._opposing_node_hashes = opposing_node_hashes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyTalentExclusiveGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyTalentExclusiveGroup of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_hash(self):
        """Gets the group_hash of this DestinyDefinitionsDestinyTalentExclusiveGroup.

        The identifier for this exclusive group. Only guaranteed unique within the talent grid, not globally.

        :return: The group_hash of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :rtype: int
        """
        return self._group_hash

    @group_hash.setter
    def group_hash(self, group_hash):
        """Sets the group_hash of this DestinyDefinitionsDestinyTalentExclusiveGroup.

        The identifier for this exclusive group. Only guaranteed unique within the talent grid, not globally.

        :param group_hash: The group_hash of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :type group_hash: int
        """

        self._group_hash = group_hash

    @property
    def lore_hash(self):
        """Gets the lore_hash of this DestinyDefinitionsDestinyTalentExclusiveGroup.

        If this group has an associated piece of lore to show next to it, this will be the identifier for that DestinyLoreDefinition.

        :return: The lore_hash of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :rtype: int
        """
        return self._lore_hash

    @lore_hash.setter
    def lore_hash(self, lore_hash):
        """Sets the lore_hash of this DestinyDefinitionsDestinyTalentExclusiveGroup.

        If this group has an associated piece of lore to show next to it, this will be the identifier for that DestinyLoreDefinition.

        :param lore_hash: The lore_hash of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :type lore_hash: int
        """

        self._lore_hash = lore_hash

    @property
    def node_hashes(self):
        """Gets the node_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.

        A quick reference of the talent nodes that are part of this group, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)

        :return: The node_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :rtype: List[int]
        """
        return self._node_hashes

    @node_hashes.setter
    def node_hashes(self, node_hashes):
        """Sets the node_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.

        A quick reference of the talent nodes that are part of this group, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)

        :param node_hashes: The node_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :type node_hashes: List[int]
        """

        self._node_hashes = node_hashes

    @property
    def opposing_group_hashes(self):
        """Gets the opposing_group_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.

        A quick reference of Groups whose nodes will be deactivated if any node in this group is activated.

        :return: The opposing_group_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :rtype: List[int]
        """
        return self._opposing_group_hashes

    @opposing_group_hashes.setter
    def opposing_group_hashes(self, opposing_group_hashes):
        """Sets the opposing_group_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.

        A quick reference of Groups whose nodes will be deactivated if any node in this group is activated.

        :param opposing_group_hashes: The opposing_group_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :type opposing_group_hashes: List[int]
        """

        self._opposing_group_hashes = opposing_group_hashes

    @property
    def opposing_node_hashes(self):
        """Gets the opposing_node_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.

        A quick reference of Nodes that will be deactivated if any node in this group is activated, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)

        :return: The opposing_node_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :rtype: List[int]
        """
        return self._opposing_node_hashes

    @opposing_node_hashes.setter
    def opposing_node_hashes(self, opposing_node_hashes):
        """Sets the opposing_node_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.

        A quick reference of Nodes that will be deactivated if any node in this group is activated, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)

        :param opposing_node_hashes: The opposing_node_hashes of this DestinyDefinitionsDestinyTalentExclusiveGroup.
        :type opposing_node_hashes: List[int]
        """

        self._opposing_node_hashes = opposing_node_hashes
