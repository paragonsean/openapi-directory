# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_quests_destiny_objective_progress import DestinyQuestsDestinyObjectiveProgress
from openapi_server import util


class DestinyComponentsItemsDestinyItemPlugComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_insert: bool=None, enable_fail_indexes: List[int]=None, enabled: bool=None, insert_fail_indexes: List[int]=None, plug_item_hash: int=None, plug_objectives: List[DestinyQuestsDestinyObjectiveProgress]=None):
        """DestinyComponentsItemsDestinyItemPlugComponent - a model defined in OpenAPI

        :param can_insert: The can_insert of this DestinyComponentsItemsDestinyItemPlugComponent.
        :param enable_fail_indexes: The enable_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        :param enabled: The enabled of this DestinyComponentsItemsDestinyItemPlugComponent.
        :param insert_fail_indexes: The insert_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        :param plug_item_hash: The plug_item_hash of this DestinyComponentsItemsDestinyItemPlugComponent.
        :param plug_objectives: The plug_objectives of this DestinyComponentsItemsDestinyItemPlugComponent.
        """
        self.openapi_types = {
            'can_insert': bool,
            'enable_fail_indexes': List[int],
            'enabled': bool,
            'insert_fail_indexes': List[int],
            'plug_item_hash': int,
            'plug_objectives': List[DestinyQuestsDestinyObjectiveProgress]
        }

        self.attribute_map = {
            'can_insert': 'canInsert',
            'enable_fail_indexes': 'enableFailIndexes',
            'enabled': 'enabled',
            'insert_fail_indexes': 'insertFailIndexes',
            'plug_item_hash': 'plugItemHash',
            'plug_objectives': 'plugObjectives'
        }

        self._can_insert = can_insert
        self._enable_fail_indexes = enable_fail_indexes
        self._enabled = enabled
        self._insert_fail_indexes = insert_fail_indexes
        self._plug_item_hash = plug_item_hash
        self._plug_objectives = plug_objectives

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyComponentsItemsDestinyItemPlugComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Components.Items.DestinyItemPlugComponent of this DestinyComponentsItemsDestinyItemPlugComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_insert(self):
        """Gets the can_insert of this DestinyComponentsItemsDestinyItemPlugComponent.

        If true, this plug has met all of its insertion requirements. Big if true.

        :return: The can_insert of this DestinyComponentsItemsDestinyItemPlugComponent.
        :rtype: bool
        """
        return self._can_insert

    @can_insert.setter
    def can_insert(self, can_insert):
        """Sets the can_insert of this DestinyComponentsItemsDestinyItemPlugComponent.

        If true, this plug has met all of its insertion requirements. Big if true.

        :param can_insert: The can_insert of this DestinyComponentsItemsDestinyItemPlugComponent.
        :type can_insert: bool
        """

        self._can_insert = can_insert

    @property
    def enable_fail_indexes(self):
        """Gets the enable_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.

        If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.  This list will be empty if the plug is enabled.

        :return: The enable_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        :rtype: List[int]
        """
        return self._enable_fail_indexes

    @enable_fail_indexes.setter
    def enable_fail_indexes(self, enable_fail_indexes):
        """Sets the enable_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.

        If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.  This list will be empty if the plug is enabled.

        :param enable_fail_indexes: The enable_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        :type enable_fail_indexes: List[int]
        """

        self._enable_fail_indexes = enable_fail_indexes

    @property
    def enabled(self):
        """Gets the enabled of this DestinyComponentsItemsDestinyItemPlugComponent.

        If true, this plug will provide its benefits while inserted.

        :return: The enabled of this DestinyComponentsItemsDestinyItemPlugComponent.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DestinyComponentsItemsDestinyItemPlugComponent.

        If true, this plug will provide its benefits while inserted.

        :param enabled: The enabled of this DestinyComponentsItemsDestinyItemPlugComponent.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def insert_fail_indexes(self):
        """Gets the insert_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.

        If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.  This list will be empty if the plug can be inserted.

        :return: The insert_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        :rtype: List[int]
        """
        return self._insert_fail_indexes

    @insert_fail_indexes.setter
    def insert_fail_indexes(self, insert_fail_indexes):
        """Sets the insert_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.

        If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.  This list will be empty if the plug can be inserted.

        :param insert_fail_indexes: The insert_fail_indexes of this DestinyComponentsItemsDestinyItemPlugComponent.
        :type insert_fail_indexes: List[int]
        """

        self._insert_fail_indexes = insert_fail_indexes

    @property
    def plug_item_hash(self):
        """Gets the plug_item_hash of this DestinyComponentsItemsDestinyItemPlugComponent.

        The hash identifier of the DestinyInventoryItemDefinition that represents this plug.

        :return: The plug_item_hash of this DestinyComponentsItemsDestinyItemPlugComponent.
        :rtype: int
        """
        return self._plug_item_hash

    @plug_item_hash.setter
    def plug_item_hash(self, plug_item_hash):
        """Sets the plug_item_hash of this DestinyComponentsItemsDestinyItemPlugComponent.

        The hash identifier of the DestinyInventoryItemDefinition that represents this plug.

        :param plug_item_hash: The plug_item_hash of this DestinyComponentsItemsDestinyItemPlugComponent.
        :type plug_item_hash: int
        """

        self._plug_item_hash = plug_item_hash

    @property
    def plug_objectives(self):
        """Gets the plug_objectives of this DestinyComponentsItemsDestinyItemPlugComponent.

        Sometimes, Plugs may have objectives: these are often used for flavor and display purposes, but they can be used for any arbitrary purpose (both fortunately and unfortunately). Recently (with Season 2) they were expanded in use to be used as the \"gating\" for whether the plug can be inserted at all. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.

        :return: The plug_objectives of this DestinyComponentsItemsDestinyItemPlugComponent.
        :rtype: List[DestinyQuestsDestinyObjectiveProgress]
        """
        return self._plug_objectives

    @plug_objectives.setter
    def plug_objectives(self, plug_objectives):
        """Sets the plug_objectives of this DestinyComponentsItemsDestinyItemPlugComponent.

        Sometimes, Plugs may have objectives: these are often used for flavor and display purposes, but they can be used for any arbitrary purpose (both fortunately and unfortunately). Recently (with Season 2) they were expanded in use to be used as the \"gating\" for whether the plug can be inserted at all. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.

        :param plug_objectives: The plug_objectives of this DestinyComponentsItemsDestinyItemPlugComponent.
        :type plug_objectives: List[DestinyQuestsDestinyObjectiveProgress]
        """

        self._plug_objectives = plug_objectives
