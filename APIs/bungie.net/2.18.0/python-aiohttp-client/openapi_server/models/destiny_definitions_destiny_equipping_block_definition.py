# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinyDefinitionsDestinyEquippingBlockDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ammo_type: int=None, attributes: int=None, display_strings: List[str]=None, equipment_slot_type_hash: int=None, gearset_item_hash: int=None, unique_label: str=None, unique_label_hash: int=None):
        """DestinyDefinitionsDestinyEquippingBlockDefinition - a model defined in OpenAPI

        :param ammo_type: The ammo_type of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :param attributes: The attributes of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :param display_strings: The display_strings of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :param equipment_slot_type_hash: The equipment_slot_type_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :param gearset_item_hash: The gearset_item_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :param unique_label: The unique_label of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :param unique_label_hash: The unique_label_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        """
        self.openapi_types = {
            'ammo_type': int,
            'attributes': int,
            'display_strings': List[str],
            'equipment_slot_type_hash': int,
            'gearset_item_hash': int,
            'unique_label': str,
            'unique_label_hash': int
        }

        self.attribute_map = {
            'ammo_type': 'ammoType',
            'attributes': 'attributes',
            'display_strings': 'displayStrings',
            'equipment_slot_type_hash': 'equipmentSlotTypeHash',
            'gearset_item_hash': 'gearsetItemHash',
            'unique_label': 'uniqueLabel',
            'unique_label_hash': 'uniqueLabelHash'
        }

        self._ammo_type = ammo_type
        self._attributes = attributes
        self._display_strings = display_strings
        self._equipment_slot_type_hash = equipment_slot_type_hash
        self._gearset_item_hash = gearset_item_hash
        self._unique_label = unique_label
        self._unique_label_hash = unique_label_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyEquippingBlockDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyEquippingBlockDefinition of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ammo_type(self):
        """Gets the ammo_type of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.

        :return: The ammo_type of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :rtype: int
        """
        return self._ammo_type

    @ammo_type.setter
    def ammo_type(self, ammo_type):
        """Sets the ammo_type of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.

        :param ammo_type: The ammo_type of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :type ammo_type: int
        """

        self._ammo_type = ammo_type

    @property
    def attributes(self):
        """Gets the attributes of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        These are custom attributes on the equippability of the item.  For now, this can only be \"equip on acquire\", which would mean that the item will be automatically equipped as soon as you pick it up.

        :return: The attributes of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :rtype: int
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        These are custom attributes on the equippability of the item.  For now, this can only be \"equip on acquire\", which would mean that the item will be automatically equipped as soon as you pick it up.

        :param attributes: The attributes of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :type attributes: int
        """

        self._attributes = attributes

    @property
    def display_strings(self):
        """Gets the display_strings of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.

        :return: The display_strings of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :rtype: List[str]
        """
        return self._display_strings

    @display_strings.setter
    def display_strings(self, display_strings):
        """Sets the display_strings of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.

        :param display_strings: The display_strings of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :type display_strings: List[str]
        """

        self._display_strings = display_strings

    @property
    def equipment_slot_type_hash(self):
        """Gets the equipment_slot_type_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.

        :return: The equipment_slot_type_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :rtype: int
        """
        return self._equipment_slot_type_hash

    @equipment_slot_type_hash.setter
    def equipment_slot_type_hash(self, equipment_slot_type_hash):
        """Sets the equipment_slot_type_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.

        :param equipment_slot_type_hash: The equipment_slot_type_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :type equipment_slot_type_hash: int
        """

        self._equipment_slot_type_hash = equipment_slot_type_hash

    @property
    def gearset_item_hash(self):
        """Gets the gearset_item_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        If the item is part of a gearset, this is a reference to that gearset item.

        :return: The gearset_item_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :rtype: int
        """
        return self._gearset_item_hash

    @gearset_item_hash.setter
    def gearset_item_hash(self, gearset_item_hash):
        """Sets the gearset_item_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        If the item is part of a gearset, this is a reference to that gearset item.

        :param gearset_item_hash: The gearset_item_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :type gearset_item_hash: int
        """

        self._gearset_item_hash = gearset_item_hash

    @property
    def unique_label(self):
        """Gets the unique_label of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        If defined, this is the label used to check if the item has other items of matching types already equipped.   For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied).

        :return: The unique_label of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :rtype: str
        """
        return self._unique_label

    @unique_label.setter
    def unique_label(self, unique_label):
        """Sets the unique_label of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        If defined, this is the label used to check if the item has other items of matching types already equipped.   For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied).

        :param unique_label: The unique_label of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :type unique_label: str
        """

        self._unique_label = unique_label

    @property
    def unique_label_hash(self):
        """Gets the unique_label_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        The hash of that unique label. Does not point to a specific definition.

        :return: The unique_label_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :rtype: int
        """
        return self._unique_label_hash

    @unique_label_hash.setter
    def unique_label_hash(self, unique_label_hash):
        """Sets the unique_label_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.

        The hash of that unique label. Does not point to a specific definition.

        :param unique_label_hash: The unique_label_hash of this DestinyDefinitionsDestinyEquippingBlockDefinition.
        :type unique_label_hash: int
        """

        self._unique_label_hash = unique_label_hash
