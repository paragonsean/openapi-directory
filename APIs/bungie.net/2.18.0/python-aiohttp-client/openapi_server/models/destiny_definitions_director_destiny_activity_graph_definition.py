# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_director_destiny_activity_graph_art_element_definition import DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition
from openapi_server.models.destiny_definitions_director_destiny_activity_graph_connection_definition import DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition
from openapi_server.models.destiny_definitions_director_destiny_activity_graph_display_objective_definition import DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition
from openapi_server.models.destiny_definitions_director_destiny_activity_graph_display_progression_definition import DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition
from openapi_server.models.destiny_definitions_director_destiny_activity_graph_node_definition import DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition
from openapi_server.models.destiny_definitions_director_destiny_linked_graph_definition import DestinyDefinitionsDirectorDestinyLinkedGraphDefinition
from openapi_server import util


class DestinyDefinitionsDirectorDestinyActivityGraphDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, art_elements: List[DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition]=None, connections: List[DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition]=None, display_objectives: List[DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition]=None, display_progressions: List[DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition]=None, hash: int=None, index: int=None, linked_graphs: List[DestinyDefinitionsDirectorDestinyLinkedGraphDefinition]=None, nodes: List[DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition]=None, redacted: bool=None):
        """DestinyDefinitionsDirectorDestinyActivityGraphDefinition - a model defined in OpenAPI

        :param art_elements: The art_elements of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :param connections: The connections of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :param display_objectives: The display_objectives of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :param display_progressions: The display_progressions of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :param hash: The hash of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :param index: The index of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :param linked_graphs: The linked_graphs of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :param nodes: The nodes of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        """
        self.openapi_types = {
            'art_elements': List[DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition],
            'connections': List[DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition],
            'display_objectives': List[DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition],
            'display_progressions': List[DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition],
            'hash': int,
            'index': int,
            'linked_graphs': List[DestinyDefinitionsDirectorDestinyLinkedGraphDefinition],
            'nodes': List[DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition],
            'redacted': bool
        }

        self.attribute_map = {
            'art_elements': 'artElements',
            'connections': 'connections',
            'display_objectives': 'displayObjectives',
            'display_progressions': 'displayProgressions',
            'hash': 'hash',
            'index': 'index',
            'linked_graphs': 'linkedGraphs',
            'nodes': 'nodes',
            'redacted': 'redacted'
        }

        self._art_elements = art_elements
        self._connections = connections
        self._display_objectives = display_objectives
        self._display_progressions = display_progressions
        self._hash = hash
        self._index = index
        self._linked_graphs = linked_graphs
        self._nodes = nodes
        self._redacted = redacted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDirectorDestinyActivityGraphDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.Director.DestinyActivityGraphDefinition of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def art_elements(self):
        """Gets the art_elements of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        Represents one-off/special UI elements that appear on the map.

        :return: The art_elements of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :rtype: List[DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition]
        """
        return self._art_elements

    @art_elements.setter
    def art_elements(self, art_elements):
        """Sets the art_elements of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        Represents one-off/special UI elements that appear on the map.

        :param art_elements: The art_elements of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :type art_elements: List[DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition]
        """

        self._art_elements = art_elements

    @property
    def connections(self):
        """Gets the connections of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        Represents connections between graph nodes. However, it lacks context that we'd need to make good use of it.

        :return: The connections of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :rtype: List[DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        Represents connections between graph nodes. However, it lacks context that we'd need to make good use of it.

        :param connections: The connections of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :type connections: List[DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition]
        """

        self._connections = connections

    @property
    def display_objectives(self):
        """Gets the display_objectives of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        Objectives can display on maps, and this is supposedly metadata for that. I have not had the time to analyze the details of what is useful within however: we could be missing important data to make this work. Expect this property to be expanded on later if possible.

        :return: The display_objectives of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :rtype: List[DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition]
        """
        return self._display_objectives

    @display_objectives.setter
    def display_objectives(self, display_objectives):
        """Sets the display_objectives of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        Objectives can display on maps, and this is supposedly metadata for that. I have not had the time to analyze the details of what is useful within however: we could be missing important data to make this work. Expect this property to be expanded on later if possible.

        :param display_objectives: The display_objectives of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :type display_objectives: List[DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition]
        """

        self._display_objectives = display_objectives

    @property
    def display_progressions(self):
        """Gets the display_progressions of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        Progressions can also display on maps, but similarly to displayObjectives we appear to lack some required information and context right now. We will have to look into it later and add more data if possible.

        :return: The display_progressions of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :rtype: List[DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition]
        """
        return self._display_progressions

    @display_progressions.setter
    def display_progressions(self, display_progressions):
        """Sets the display_progressions of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        Progressions can also display on maps, but similarly to displayObjectives we appear to lack some required information and context right now. We will have to look into it later and add more data if possible.

        :param display_progressions: The display_progressions of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :type display_progressions: List[DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition]
        """

        self._display_progressions = display_progressions

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :type index: int
        """

        self._index = index

    @property
    def linked_graphs(self):
        """Gets the linked_graphs of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        Represents links between this Activity Graph and other ones.

        :return: The linked_graphs of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :rtype: List[DestinyDefinitionsDirectorDestinyLinkedGraphDefinition]
        """
        return self._linked_graphs

    @linked_graphs.setter
    def linked_graphs(self, linked_graphs):
        """Sets the linked_graphs of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        Represents links between this Activity Graph and other ones.

        :param linked_graphs: The linked_graphs of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :type linked_graphs: List[DestinyDefinitionsDirectorDestinyLinkedGraphDefinition]
        """

        self._linked_graphs = linked_graphs

    @property
    def nodes(self):
        """Gets the nodes of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        These represent the visual \"nodes\" on the map's view. These are the activities you can click on in the map.

        :return: The nodes of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :rtype: List[DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        These represent the visual \"nodes\" on the map's view. These are the activities you can click on in the map.

        :param nodes: The nodes of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :type nodes: List[DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition]
        """

        self._nodes = nodes

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDirectorDestinyActivityGraphDefinition.
        :type redacted: bool
        """

        self._redacted = redacted
