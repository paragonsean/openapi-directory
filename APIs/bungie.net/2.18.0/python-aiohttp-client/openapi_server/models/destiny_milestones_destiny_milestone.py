# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_milestones_destiny_milestone_challenge_activity import DestinyMilestonesDestinyMilestoneChallengeActivity
from openapi_server.models.destiny_milestones_destiny_milestone_quest import DestinyMilestonesDestinyMilestoneQuest
from openapi_server.models.destiny_milestones_destiny_milestone_reward_category import DestinyMilestonesDestinyMilestoneRewardCategory
from openapi_server.models.destiny_milestones_destiny_milestone_vendor import DestinyMilestonesDestinyMilestoneVendor
from openapi_server import util


class DestinyMilestonesDestinyMilestone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activities: List[DestinyMilestonesDestinyMilestoneChallengeActivity]=None, available_quests: List[DestinyMilestonesDestinyMilestoneQuest]=None, end_date: datetime=None, milestone_hash: int=None, order: int=None, rewards: List[DestinyMilestonesDestinyMilestoneRewardCategory]=None, start_date: datetime=None, values: Dict[str, float]=None, vendor_hashes: List[int]=None, vendors: List[DestinyMilestonesDestinyMilestoneVendor]=None):
        """DestinyMilestonesDestinyMilestone - a model defined in OpenAPI

        :param activities: The activities of this DestinyMilestonesDestinyMilestone.
        :param available_quests: The available_quests of this DestinyMilestonesDestinyMilestone.
        :param end_date: The end_date of this DestinyMilestonesDestinyMilestone.
        :param milestone_hash: The milestone_hash of this DestinyMilestonesDestinyMilestone.
        :param order: The order of this DestinyMilestonesDestinyMilestone.
        :param rewards: The rewards of this DestinyMilestonesDestinyMilestone.
        :param start_date: The start_date of this DestinyMilestonesDestinyMilestone.
        :param values: The values of this DestinyMilestonesDestinyMilestone.
        :param vendor_hashes: The vendor_hashes of this DestinyMilestonesDestinyMilestone.
        :param vendors: The vendors of this DestinyMilestonesDestinyMilestone.
        """
        self.openapi_types = {
            'activities': List[DestinyMilestonesDestinyMilestoneChallengeActivity],
            'available_quests': List[DestinyMilestonesDestinyMilestoneQuest],
            'end_date': datetime,
            'milestone_hash': int,
            'order': int,
            'rewards': List[DestinyMilestonesDestinyMilestoneRewardCategory],
            'start_date': datetime,
            'values': Dict[str, float],
            'vendor_hashes': List[int],
            'vendors': List[DestinyMilestonesDestinyMilestoneVendor]
        }

        self.attribute_map = {
            'activities': 'activities',
            'available_quests': 'availableQuests',
            'end_date': 'endDate',
            'milestone_hash': 'milestoneHash',
            'order': 'order',
            'rewards': 'rewards',
            'start_date': 'startDate',
            'values': 'values',
            'vendor_hashes': 'vendorHashes',
            'vendors': 'vendors'
        }

        self._activities = activities
        self._available_quests = available_quests
        self._end_date = end_date
        self._milestone_hash = milestone_hash
        self._order = order
        self._rewards = rewards
        self._start_date = start_date
        self._values = values
        self._vendor_hashes = vendor_hashes
        self._vendors = vendors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyMilestonesDestinyMilestone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Milestones.DestinyMilestone of this DestinyMilestonesDestinyMilestone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activities(self):
        """Gets the activities of this DestinyMilestonesDestinyMilestone.

        The currently active Activities in this milestone, when the Milestone is driven by Challenges.  Not all Milestones have Challenges, but when they do this will indicate the Activities and Challenges under those Activities related to this Milestone.

        :return: The activities of this DestinyMilestonesDestinyMilestone.
        :rtype: List[DestinyMilestonesDestinyMilestoneChallengeActivity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this DestinyMilestonesDestinyMilestone.

        The currently active Activities in this milestone, when the Milestone is driven by Challenges.  Not all Milestones have Challenges, but when they do this will indicate the Activities and Challenges under those Activities related to this Milestone.

        :param activities: The activities of this DestinyMilestonesDestinyMilestone.
        :type activities: List[DestinyMilestonesDestinyMilestoneChallengeActivity]
        """

        self._activities = activities

    @property
    def available_quests(self):
        """Gets the available_quests of this DestinyMilestonesDestinyMilestone.

        Indicates what quests are available for this Milestone. Usually this will be only a single Quest, but some quests have multiple available that you can choose from at any given time. All possible quests for a milestone can be found in the DestinyMilestoneDefinition, but they must be combined with this Live data to determine which one(s) are actually active right now. It is possible for Milestones to not have any quests.

        :return: The available_quests of this DestinyMilestonesDestinyMilestone.
        :rtype: List[DestinyMilestonesDestinyMilestoneQuest]
        """
        return self._available_quests

    @available_quests.setter
    def available_quests(self, available_quests):
        """Sets the available_quests of this DestinyMilestonesDestinyMilestone.

        Indicates what quests are available for this Milestone. Usually this will be only a single Quest, but some quests have multiple available that you can choose from at any given time. All possible quests for a milestone can be found in the DestinyMilestoneDefinition, but they must be combined with this Live data to determine which one(s) are actually active right now. It is possible for Milestones to not have any quests.

        :param available_quests: The available_quests of this DestinyMilestonesDestinyMilestone.
        :type available_quests: List[DestinyMilestonesDestinyMilestoneQuest]
        """

        self._available_quests = available_quests

    @property
    def end_date(self):
        """Gets the end_date of this DestinyMilestonesDestinyMilestone.

        If known, this is the date when the event will next end or repeat. It will only be populated for events with fixed and repeating start and end dates.

        :return: The end_date of this DestinyMilestonesDestinyMilestone.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DestinyMilestonesDestinyMilestone.

        If known, this is the date when the event will next end or repeat. It will only be populated for events with fixed and repeating start and end dates.

        :param end_date: The end_date of this DestinyMilestonesDestinyMilestone.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def milestone_hash(self):
        """Gets the milestone_hash of this DestinyMilestonesDestinyMilestone.

        The unique identifier for the Milestone. Use it to look up the DestinyMilestoneDefinition, so you can combine the other data in this contract with static definition data.

        :return: The milestone_hash of this DestinyMilestonesDestinyMilestone.
        :rtype: int
        """
        return self._milestone_hash

    @milestone_hash.setter
    def milestone_hash(self, milestone_hash):
        """Sets the milestone_hash of this DestinyMilestonesDestinyMilestone.

        The unique identifier for the Milestone. Use it to look up the DestinyMilestoneDefinition, so you can combine the other data in this contract with static definition data.

        :param milestone_hash: The milestone_hash of this DestinyMilestonesDestinyMilestone.
        :type milestone_hash: int
        """

        self._milestone_hash = milestone_hash

    @property
    def order(self):
        """Gets the order of this DestinyMilestonesDestinyMilestone.

        Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.

        :return: The order of this DestinyMilestonesDestinyMilestone.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DestinyMilestonesDestinyMilestone.

        Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.

        :param order: The order of this DestinyMilestonesDestinyMilestone.
        :type order: int
        """

        self._order = order

    @property
    def rewards(self):
        """Gets the rewards of this DestinyMilestonesDestinyMilestone.

        If the entity to which this component is attached has known active Rewards for the player, this will detail information about those rewards, keyed by the RewardEntry Hash. (See DestinyMilestoneDefinition for more information about Reward Entries) Note that these rewards are not for the Quests related to the Milestone. Think of these as \"overview/checklist\" rewards that may be provided for Milestones that may provide rewards for performing a variety of tasks that aren't under a specific Quest.

        :return: The rewards of this DestinyMilestonesDestinyMilestone.
        :rtype: List[DestinyMilestonesDestinyMilestoneRewardCategory]
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards):
        """Sets the rewards of this DestinyMilestonesDestinyMilestone.

        If the entity to which this component is attached has known active Rewards for the player, this will detail information about those rewards, keyed by the RewardEntry Hash. (See DestinyMilestoneDefinition for more information about Reward Entries) Note that these rewards are not for the Quests related to the Milestone. Think of these as \"overview/checklist\" rewards that may be provided for Milestones that may provide rewards for performing a variety of tasks that aren't under a specific Quest.

        :param rewards: The rewards of this DestinyMilestonesDestinyMilestone.
        :type rewards: List[DestinyMilestonesDestinyMilestoneRewardCategory]
        """

        self._rewards = rewards

    @property
    def start_date(self):
        """Gets the start_date of this DestinyMilestonesDestinyMilestone.

        If known, this is the date when the event last began or refreshed. It will only be populated for events with fixed and repeating start and end dates.

        :return: The start_date of this DestinyMilestonesDestinyMilestone.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DestinyMilestonesDestinyMilestone.

        If known, this is the date when the event last began or refreshed. It will only be populated for events with fixed and repeating start and end dates.

        :param start_date: The start_date of this DestinyMilestonesDestinyMilestone.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def values(self):
        """Gets the values of this DestinyMilestonesDestinyMilestone.

        Milestones may have arbitrary key/value pairs associated with them, for data that users will want to know about but that doesn't fit neatly into any of the common components such as Quests. A good example of this would be - if this existed in Destiny 1 - the number of wins you currently have on your Trials of Osiris ticket. Looking in the DestinyMilestoneDefinition, you can use the string identifier of this dictionary to look up more info about the value, including localized string content for displaying the value. The value in the dictionary is the floating point number. The definition will tell you how to format this number.

        :return: The values of this DestinyMilestonesDestinyMilestone.
        :rtype: Dict[str, float]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this DestinyMilestonesDestinyMilestone.

        Milestones may have arbitrary key/value pairs associated with them, for data that users will want to know about but that doesn't fit neatly into any of the common components such as Quests. A good example of this would be - if this existed in Destiny 1 - the number of wins you currently have on your Trials of Osiris ticket. Looking in the DestinyMilestoneDefinition, you can use the string identifier of this dictionary to look up more info about the value, including localized string content for displaying the value. The value in the dictionary is the floating point number. The definition will tell you how to format this number.

        :param values: The values of this DestinyMilestonesDestinyMilestone.
        :type values: Dict[str, float]
        """

        self._values = values

    @property
    def vendor_hashes(self):
        """Gets the vendor_hashes of this DestinyMilestonesDestinyMilestone.

        A milestone may have one or more active vendors that are \"related\" to it (that provide rewards, or that are the initiators of the Milestone). I already regret this, even as I'm typing it. [I told you I'd regret this] You see, sometimes a milestone may be directly correlated with a set of vendors that provide varying tiers of rewards. The player may not be able to interact with one or more of those vendors. This will return the hashes of the Vendors that the player *can* interact with, allowing you to show their current inventory as rewards or related items to the Milestone or its activities.  Before we even use it, it's already deprecated! How much of a bummer is that? We need more data.

        :return: The vendor_hashes of this DestinyMilestonesDestinyMilestone.
        :rtype: List[int]
        """
        return self._vendor_hashes

    @vendor_hashes.setter
    def vendor_hashes(self, vendor_hashes):
        """Sets the vendor_hashes of this DestinyMilestonesDestinyMilestone.

        A milestone may have one or more active vendors that are \"related\" to it (that provide rewards, or that are the initiators of the Milestone). I already regret this, even as I'm typing it. [I told you I'd regret this] You see, sometimes a milestone may be directly correlated with a set of vendors that provide varying tiers of rewards. The player may not be able to interact with one or more of those vendors. This will return the hashes of the Vendors that the player *can* interact with, allowing you to show their current inventory as rewards or related items to the Milestone or its activities.  Before we even use it, it's already deprecated! How much of a bummer is that? We need more data.

        :param vendor_hashes: The vendor_hashes of this DestinyMilestonesDestinyMilestone.
        :type vendor_hashes: List[int]
        """

        self._vendor_hashes = vendor_hashes

    @property
    def vendors(self):
        """Gets the vendors of this DestinyMilestonesDestinyMilestone.

        Replaces vendorHashes, which I knew was going to be trouble the day it walked in the door. This will return not only what Vendors are active and relevant to the activity (in an implied order that you can choose to ignore), but also other data - for example, if the Vendor is featuring a specific item relevant to this event that you should show with them.

        :return: The vendors of this DestinyMilestonesDestinyMilestone.
        :rtype: List[DestinyMilestonesDestinyMilestoneVendor]
        """
        return self._vendors

    @vendors.setter
    def vendors(self, vendors):
        """Sets the vendors of this DestinyMilestonesDestinyMilestone.

        Replaces vendorHashes, which I knew was going to be trouble the day it walked in the door. This will return not only what Vendors are active and relevant to the activity (in an implied order that you can choose to ignore), but also other data - for example, if the Vendor is featuring a specific item relevant to this event that you should show with them.

        :param vendors: The vendors of this DestinyMilestonesDestinyMilestone.
        :type vendors: List[DestinyMilestonesDestinyMilestoneVendor]
        """

        self._vendors = vendors
