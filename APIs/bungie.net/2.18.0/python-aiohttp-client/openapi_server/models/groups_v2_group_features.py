# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupsV2GroupFeatures(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: int=None, host_guided_game_permission_override: int=None, invite_permission_override: bool=None, join_level: int=None, maximum_members: int=None, maximum_memberships_of_group_type: int=None, membership_types: List[int]=None, update_banner_permission_override: bool=None, update_culture_permission_override: bool=None):
        """GroupsV2GroupFeatures - a model defined in OpenAPI

        :param capabilities: The capabilities of this GroupsV2GroupFeatures.
        :param host_guided_game_permission_override: The host_guided_game_permission_override of this GroupsV2GroupFeatures.
        :param invite_permission_override: The invite_permission_override of this GroupsV2GroupFeatures.
        :param join_level: The join_level of this GroupsV2GroupFeatures.
        :param maximum_members: The maximum_members of this GroupsV2GroupFeatures.
        :param maximum_memberships_of_group_type: The maximum_memberships_of_group_type of this GroupsV2GroupFeatures.
        :param membership_types: The membership_types of this GroupsV2GroupFeatures.
        :param update_banner_permission_override: The update_banner_permission_override of this GroupsV2GroupFeatures.
        :param update_culture_permission_override: The update_culture_permission_override of this GroupsV2GroupFeatures.
        """
        self.openapi_types = {
            'capabilities': int,
            'host_guided_game_permission_override': int,
            'invite_permission_override': bool,
            'join_level': int,
            'maximum_members': int,
            'maximum_memberships_of_group_type': int,
            'membership_types': List[int],
            'update_banner_permission_override': bool,
            'update_culture_permission_override': bool
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'host_guided_game_permission_override': 'hostGuidedGamePermissionOverride',
            'invite_permission_override': 'invitePermissionOverride',
            'join_level': 'joinLevel',
            'maximum_members': 'maximumMembers',
            'maximum_memberships_of_group_type': 'maximumMembershipsOfGroupType',
            'membership_types': 'membershipTypes',
            'update_banner_permission_override': 'updateBannerPermissionOverride',
            'update_culture_permission_override': 'updateCulturePermissionOverride'
        }

        self._capabilities = capabilities
        self._host_guided_game_permission_override = host_guided_game_permission_override
        self._invite_permission_override = invite_permission_override
        self._join_level = join_level
        self._maximum_members = maximum_members
        self._maximum_memberships_of_group_type = maximum_memberships_of_group_type
        self._membership_types = membership_types
        self._update_banner_permission_override = update_banner_permission_override
        self._update_culture_permission_override = update_culture_permission_override

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupsV2GroupFeatures':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupsV2.GroupFeatures of this GroupsV2GroupFeatures.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this GroupsV2GroupFeatures.


        :return: The capabilities of this GroupsV2GroupFeatures.
        :rtype: int
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this GroupsV2GroupFeatures.


        :param capabilities: The capabilities of this GroupsV2GroupFeatures.
        :type capabilities: int
        """

        self._capabilities = capabilities

    @property
    def host_guided_game_permission_override(self):
        """Gets the host_guided_game_permission_override of this GroupsV2GroupFeatures.

        Minimum Member Level allowed to host guided games  Always Allowed: Founder, Acting Founder, Admin  Allowed Overrides: None, Member, Beginner  Default is Member for clans, None for groups, although this means nothing for groups.

        :return: The host_guided_game_permission_override of this GroupsV2GroupFeatures.
        :rtype: int
        """
        return self._host_guided_game_permission_override

    @host_guided_game_permission_override.setter
    def host_guided_game_permission_override(self, host_guided_game_permission_override):
        """Sets the host_guided_game_permission_override of this GroupsV2GroupFeatures.

        Minimum Member Level allowed to host guided games  Always Allowed: Founder, Acting Founder, Admin  Allowed Overrides: None, Member, Beginner  Default is Member for clans, None for groups, although this means nothing for groups.

        :param host_guided_game_permission_override: The host_guided_game_permission_override of this GroupsV2GroupFeatures.
        :type host_guided_game_permission_override: int
        """

        self._host_guided_game_permission_override = host_guided_game_permission_override

    @property
    def invite_permission_override(self):
        """Gets the invite_permission_override of this GroupsV2GroupFeatures.

        Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.

        :return: The invite_permission_override of this GroupsV2GroupFeatures.
        :rtype: bool
        """
        return self._invite_permission_override

    @invite_permission_override.setter
    def invite_permission_override(self, invite_permission_override):
        """Sets the invite_permission_override of this GroupsV2GroupFeatures.

        Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.

        :param invite_permission_override: The invite_permission_override of this GroupsV2GroupFeatures.
        :type invite_permission_override: bool
        """

        self._invite_permission_override = invite_permission_override

    @property
    def join_level(self):
        """Gets the join_level of this GroupsV2GroupFeatures.

        Level to join a member at when accepting an invite, application, or joining an open clan  Default is Beginner.

        :return: The join_level of this GroupsV2GroupFeatures.
        :rtype: int
        """
        return self._join_level

    @join_level.setter
    def join_level(self, join_level):
        """Sets the join_level of this GroupsV2GroupFeatures.

        Level to join a member at when accepting an invite, application, or joining an open clan  Default is Beginner.

        :param join_level: The join_level of this GroupsV2GroupFeatures.
        :type join_level: int
        """

        self._join_level = join_level

    @property
    def maximum_members(self):
        """Gets the maximum_members of this GroupsV2GroupFeatures.


        :return: The maximum_members of this GroupsV2GroupFeatures.
        :rtype: int
        """
        return self._maximum_members

    @maximum_members.setter
    def maximum_members(self, maximum_members):
        """Sets the maximum_members of this GroupsV2GroupFeatures.


        :param maximum_members: The maximum_members of this GroupsV2GroupFeatures.
        :type maximum_members: int
        """

        self._maximum_members = maximum_members

    @property
    def maximum_memberships_of_group_type(self):
        """Gets the maximum_memberships_of_group_type of this GroupsV2GroupFeatures.

        Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.

        :return: The maximum_memberships_of_group_type of this GroupsV2GroupFeatures.
        :rtype: int
        """
        return self._maximum_memberships_of_group_type

    @maximum_memberships_of_group_type.setter
    def maximum_memberships_of_group_type(self, maximum_memberships_of_group_type):
        """Sets the maximum_memberships_of_group_type of this GroupsV2GroupFeatures.

        Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.

        :param maximum_memberships_of_group_type: The maximum_memberships_of_group_type of this GroupsV2GroupFeatures.
        :type maximum_memberships_of_group_type: int
        """

        self._maximum_memberships_of_group_type = maximum_memberships_of_group_type

    @property
    def membership_types(self):
        """Gets the membership_types of this GroupsV2GroupFeatures.


        :return: The membership_types of this GroupsV2GroupFeatures.
        :rtype: List[int]
        """
        return self._membership_types

    @membership_types.setter
    def membership_types(self, membership_types):
        """Sets the membership_types of this GroupsV2GroupFeatures.


        :param membership_types: The membership_types of this GroupsV2GroupFeatures.
        :type membership_types: List[int]
        """

        self._membership_types = membership_types

    @property
    def update_banner_permission_override(self):
        """Gets the update_banner_permission_override of this GroupsV2GroupFeatures.

        Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.

        :return: The update_banner_permission_override of this GroupsV2GroupFeatures.
        :rtype: bool
        """
        return self._update_banner_permission_override

    @update_banner_permission_override.setter
    def update_banner_permission_override(self, update_banner_permission_override):
        """Sets the update_banner_permission_override of this GroupsV2GroupFeatures.

        Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.

        :param update_banner_permission_override: The update_banner_permission_override of this GroupsV2GroupFeatures.
        :type update_banner_permission_override: bool
        """

        self._update_banner_permission_override = update_banner_permission_override

    @property
    def update_culture_permission_override(self):
        """Gets the update_culture_permission_override of this GroupsV2GroupFeatures.

        Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.

        :return: The update_culture_permission_override of this GroupsV2GroupFeatures.
        :rtype: bool
        """
        return self._update_culture_permission_override

    @update_culture_permission_override.setter
    def update_culture_permission_override(self, update_culture_permission_override):
        """Sets the update_culture_permission_override of this GroupsV2GroupFeatures.

        Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don't  Default is false for clans, true for groups.

        :param update_culture_permission_override: The update_culture_permission_override of this GroupsV2GroupFeatures.
        :type update_culture_permission_override: bool
        """

        self._update_culture_permission_override = update_culture_permission_override
