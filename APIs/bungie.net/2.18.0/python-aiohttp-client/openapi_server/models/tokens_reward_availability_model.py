# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_records_destiny_record_definition import DestinyDefinitionsRecordsDestinyRecordDefinition
from openapi_server.models.tokens_collectible_definitions import TokensCollectibleDefinitions
from openapi_server import util


class TokensRewardAvailabilityModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collectible_definitions: List[TokensCollectibleDefinitions]=None, decrypted_token: str=None, game_earn_by_date: datetime=None, has_existing_code: bool=None, has_offer: bool=None, is_loyalty_reward: bool=None, is_offer: bool=None, offer_applied: bool=None, record_definitions: List[DestinyDefinitionsRecordsDestinyRecordDefinition]=None, redemption_end_date: datetime=None, shopify_end_date: datetime=None):
        """TokensRewardAvailabilityModel - a model defined in OpenAPI

        :param collectible_definitions: The collectible_definitions of this TokensRewardAvailabilityModel.
        :param decrypted_token: The decrypted_token of this TokensRewardAvailabilityModel.
        :param game_earn_by_date: The game_earn_by_date of this TokensRewardAvailabilityModel.
        :param has_existing_code: The has_existing_code of this TokensRewardAvailabilityModel.
        :param has_offer: The has_offer of this TokensRewardAvailabilityModel.
        :param is_loyalty_reward: The is_loyalty_reward of this TokensRewardAvailabilityModel.
        :param is_offer: The is_offer of this TokensRewardAvailabilityModel.
        :param offer_applied: The offer_applied of this TokensRewardAvailabilityModel.
        :param record_definitions: The record_definitions of this TokensRewardAvailabilityModel.
        :param redemption_end_date: The redemption_end_date of this TokensRewardAvailabilityModel.
        :param shopify_end_date: The shopify_end_date of this TokensRewardAvailabilityModel.
        """
        self.openapi_types = {
            'collectible_definitions': List[TokensCollectibleDefinitions],
            'decrypted_token': str,
            'game_earn_by_date': datetime,
            'has_existing_code': bool,
            'has_offer': bool,
            'is_loyalty_reward': bool,
            'is_offer': bool,
            'offer_applied': bool,
            'record_definitions': List[DestinyDefinitionsRecordsDestinyRecordDefinition],
            'redemption_end_date': datetime,
            'shopify_end_date': datetime
        }

        self.attribute_map = {
            'collectible_definitions': 'CollectibleDefinitions',
            'decrypted_token': 'DecryptedToken',
            'game_earn_by_date': 'GameEarnByDate',
            'has_existing_code': 'HasExistingCode',
            'has_offer': 'HasOffer',
            'is_loyalty_reward': 'IsLoyaltyReward',
            'is_offer': 'IsOffer',
            'offer_applied': 'OfferApplied',
            'record_definitions': 'RecordDefinitions',
            'redemption_end_date': 'RedemptionEndDate',
            'shopify_end_date': 'ShopifyEndDate'
        }

        self._collectible_definitions = collectible_definitions
        self._decrypted_token = decrypted_token
        self._game_earn_by_date = game_earn_by_date
        self._has_existing_code = has_existing_code
        self._has_offer = has_offer
        self._is_loyalty_reward = is_loyalty_reward
        self._is_offer = is_offer
        self._offer_applied = offer_applied
        self._record_definitions = record_definitions
        self._redemption_end_date = redemption_end_date
        self._shopify_end_date = shopify_end_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokensRewardAvailabilityModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tokens.RewardAvailabilityModel of this TokensRewardAvailabilityModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collectible_definitions(self):
        """Gets the collectible_definitions of this TokensRewardAvailabilityModel.


        :return: The collectible_definitions of this TokensRewardAvailabilityModel.
        :rtype: List[TokensCollectibleDefinitions]
        """
        return self._collectible_definitions

    @collectible_definitions.setter
    def collectible_definitions(self, collectible_definitions):
        """Sets the collectible_definitions of this TokensRewardAvailabilityModel.


        :param collectible_definitions: The collectible_definitions of this TokensRewardAvailabilityModel.
        :type collectible_definitions: List[TokensCollectibleDefinitions]
        """

        self._collectible_definitions = collectible_definitions

    @property
    def decrypted_token(self):
        """Gets the decrypted_token of this TokensRewardAvailabilityModel.


        :return: The decrypted_token of this TokensRewardAvailabilityModel.
        :rtype: str
        """
        return self._decrypted_token

    @decrypted_token.setter
    def decrypted_token(self, decrypted_token):
        """Sets the decrypted_token of this TokensRewardAvailabilityModel.


        :param decrypted_token: The decrypted_token of this TokensRewardAvailabilityModel.
        :type decrypted_token: str
        """

        self._decrypted_token = decrypted_token

    @property
    def game_earn_by_date(self):
        """Gets the game_earn_by_date of this TokensRewardAvailabilityModel.


        :return: The game_earn_by_date of this TokensRewardAvailabilityModel.
        :rtype: datetime
        """
        return self._game_earn_by_date

    @game_earn_by_date.setter
    def game_earn_by_date(self, game_earn_by_date):
        """Sets the game_earn_by_date of this TokensRewardAvailabilityModel.


        :param game_earn_by_date: The game_earn_by_date of this TokensRewardAvailabilityModel.
        :type game_earn_by_date: datetime
        """

        self._game_earn_by_date = game_earn_by_date

    @property
    def has_existing_code(self):
        """Gets the has_existing_code of this TokensRewardAvailabilityModel.


        :return: The has_existing_code of this TokensRewardAvailabilityModel.
        :rtype: bool
        """
        return self._has_existing_code

    @has_existing_code.setter
    def has_existing_code(self, has_existing_code):
        """Sets the has_existing_code of this TokensRewardAvailabilityModel.


        :param has_existing_code: The has_existing_code of this TokensRewardAvailabilityModel.
        :type has_existing_code: bool
        """

        self._has_existing_code = has_existing_code

    @property
    def has_offer(self):
        """Gets the has_offer of this TokensRewardAvailabilityModel.


        :return: The has_offer of this TokensRewardAvailabilityModel.
        :rtype: bool
        """
        return self._has_offer

    @has_offer.setter
    def has_offer(self, has_offer):
        """Sets the has_offer of this TokensRewardAvailabilityModel.


        :param has_offer: The has_offer of this TokensRewardAvailabilityModel.
        :type has_offer: bool
        """

        self._has_offer = has_offer

    @property
    def is_loyalty_reward(self):
        """Gets the is_loyalty_reward of this TokensRewardAvailabilityModel.


        :return: The is_loyalty_reward of this TokensRewardAvailabilityModel.
        :rtype: bool
        """
        return self._is_loyalty_reward

    @is_loyalty_reward.setter
    def is_loyalty_reward(self, is_loyalty_reward):
        """Sets the is_loyalty_reward of this TokensRewardAvailabilityModel.


        :param is_loyalty_reward: The is_loyalty_reward of this TokensRewardAvailabilityModel.
        :type is_loyalty_reward: bool
        """

        self._is_loyalty_reward = is_loyalty_reward

    @property
    def is_offer(self):
        """Gets the is_offer of this TokensRewardAvailabilityModel.


        :return: The is_offer of this TokensRewardAvailabilityModel.
        :rtype: bool
        """
        return self._is_offer

    @is_offer.setter
    def is_offer(self, is_offer):
        """Sets the is_offer of this TokensRewardAvailabilityModel.


        :param is_offer: The is_offer of this TokensRewardAvailabilityModel.
        :type is_offer: bool
        """

        self._is_offer = is_offer

    @property
    def offer_applied(self):
        """Gets the offer_applied of this TokensRewardAvailabilityModel.


        :return: The offer_applied of this TokensRewardAvailabilityModel.
        :rtype: bool
        """
        return self._offer_applied

    @offer_applied.setter
    def offer_applied(self, offer_applied):
        """Sets the offer_applied of this TokensRewardAvailabilityModel.


        :param offer_applied: The offer_applied of this TokensRewardAvailabilityModel.
        :type offer_applied: bool
        """

        self._offer_applied = offer_applied

    @property
    def record_definitions(self):
        """Gets the record_definitions of this TokensRewardAvailabilityModel.


        :return: The record_definitions of this TokensRewardAvailabilityModel.
        :rtype: List[DestinyDefinitionsRecordsDestinyRecordDefinition]
        """
        return self._record_definitions

    @record_definitions.setter
    def record_definitions(self, record_definitions):
        """Sets the record_definitions of this TokensRewardAvailabilityModel.


        :param record_definitions: The record_definitions of this TokensRewardAvailabilityModel.
        :type record_definitions: List[DestinyDefinitionsRecordsDestinyRecordDefinition]
        """

        self._record_definitions = record_definitions

    @property
    def redemption_end_date(self):
        """Gets the redemption_end_date of this TokensRewardAvailabilityModel.


        :return: The redemption_end_date of this TokensRewardAvailabilityModel.
        :rtype: datetime
        """
        return self._redemption_end_date

    @redemption_end_date.setter
    def redemption_end_date(self, redemption_end_date):
        """Sets the redemption_end_date of this TokensRewardAvailabilityModel.


        :param redemption_end_date: The redemption_end_date of this TokensRewardAvailabilityModel.
        :type redemption_end_date: datetime
        """

        self._redemption_end_date = redemption_end_date

    @property
    def shopify_end_date(self):
        """Gets the shopify_end_date of this TokensRewardAvailabilityModel.


        :return: The shopify_end_date of this TokensRewardAvailabilityModel.
        :rtype: datetime
        """
        return self._shopify_end_date

    @shopify_end_date.setter
    def shopify_end_date(self, shopify_end_date):
        """Sets the shopify_end_date of this TokensRewardAvailabilityModel.


        :param shopify_end_date: The shopify_end_date of this TokensRewardAvailabilityModel.
        :type shopify_end_date: datetime
        """

        self._shopify_end_date = shopify_end_date
