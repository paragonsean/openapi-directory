# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_destiny_location_release_definition import DestinyDefinitionsDestinyLocationReleaseDefinition
from openapi_server import util


class DestinyDefinitionsDestinyLocationDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hash: int=None, index: int=None, location_releases: List[DestinyDefinitionsDestinyLocationReleaseDefinition]=None, redacted: bool=None, vendor_hash: int=None):
        """DestinyDefinitionsDestinyLocationDefinition - a model defined in OpenAPI

        :param hash: The hash of this DestinyDefinitionsDestinyLocationDefinition.
        :param index: The index of this DestinyDefinitionsDestinyLocationDefinition.
        :param location_releases: The location_releases of this DestinyDefinitionsDestinyLocationDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyLocationDefinition.
        :param vendor_hash: The vendor_hash of this DestinyDefinitionsDestinyLocationDefinition.
        """
        self.openapi_types = {
            'hash': int,
            'index': int,
            'location_releases': List[DestinyDefinitionsDestinyLocationReleaseDefinition],
            'redacted': bool,
            'vendor_hash': int
        }

        self.attribute_map = {
            'hash': 'hash',
            'index': 'index',
            'location_releases': 'locationReleases',
            'redacted': 'redacted',
            'vendor_hash': 'vendorHash'
        }

        self._hash = hash
        self._index = index
        self._location_releases = location_releases
        self._redacted = redacted
        self._vendor_hash = vendor_hash

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyLocationDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyLocationDefinition of this DestinyDefinitionsDestinyLocationDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyLocationDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyLocationDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyLocationDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyLocationDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyLocationDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyLocationDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyLocationDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyLocationDefinition.
        :type index: int
        """

        self._index = index

    @property
    def location_releases(self):
        """Gets the location_releases of this DestinyDefinitionsDestinyLocationDefinition.

        A Location may refer to different specific spots in the world based on the world's current state. This is a list of those potential spots, and the data we can use at runtime to determine which one of the spots is the currently valid one.

        :return: The location_releases of this DestinyDefinitionsDestinyLocationDefinition.
        :rtype: List[DestinyDefinitionsDestinyLocationReleaseDefinition]
        """
        return self._location_releases

    @location_releases.setter
    def location_releases(self, location_releases):
        """Sets the location_releases of this DestinyDefinitionsDestinyLocationDefinition.

        A Location may refer to different specific spots in the world based on the world's current state. This is a list of those potential spots, and the data we can use at runtime to determine which one of the spots is the currently valid one.

        :param location_releases: The location_releases of this DestinyDefinitionsDestinyLocationDefinition.
        :type location_releases: List[DestinyDefinitionsDestinyLocationReleaseDefinition]
        """

        self._location_releases = location_releases

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyLocationDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyLocationDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyLocationDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyLocationDefinition.
        :type redacted: bool
        """

        self._redacted = redacted

    @property
    def vendor_hash(self):
        """Gets the vendor_hash of this DestinyDefinitionsDestinyLocationDefinition.

        If the location has a Vendor on it, this is the hash identifier for that Vendor. Look them up with DestinyVendorDefinition.

        :return: The vendor_hash of this DestinyDefinitionsDestinyLocationDefinition.
        :rtype: int
        """
        return self._vendor_hash

    @vendor_hash.setter
    def vendor_hash(self, vendor_hash):
        """Sets the vendor_hash of this DestinyDefinitionsDestinyLocationDefinition.

        If the location has a Vendor on it, this is the hash identifier for that Vendor. Look them up with DestinyVendorDefinition.

        :param vendor_hash: The vendor_hash of this DestinyDefinitionsDestinyLocationDefinition.
        :type vendor_hash: int
        """

        self._vendor_hash = vendor_hash
