# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_quests_destiny_objective_progress import DestinyQuestsDestinyObjectiveProgress
from openapi_server import util


class DestinyEntitiesItemsDestinyItemObjectivesComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_completed: datetime=None, flavor_objective: DestinyQuestsDestinyObjectiveProgress=None, objectives: List[DestinyQuestsDestinyObjectiveProgress]=None):
        """DestinyEntitiesItemsDestinyItemObjectivesComponent - a model defined in OpenAPI

        :param date_completed: The date_completed of this DestinyEntitiesItemsDestinyItemObjectivesComponent.
        :param flavor_objective: The flavor_objective of this DestinyEntitiesItemsDestinyItemObjectivesComponent.
        :param objectives: The objectives of this DestinyEntitiesItemsDestinyItemObjectivesComponent.
        """
        self.openapi_types = {
            'date_completed': datetime,
            'flavor_objective': DestinyQuestsDestinyObjectiveProgress,
            'objectives': List[DestinyQuestsDestinyObjectiveProgress]
        }

        self.attribute_map = {
            'date_completed': 'dateCompleted',
            'flavor_objective': 'flavorObjective',
            'objectives': 'objectives'
        }

        self._date_completed = date_completed
        self._flavor_objective = flavor_objective
        self._objectives = objectives

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyEntitiesItemsDestinyItemObjectivesComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Entities.Items.DestinyItemObjectivesComponent of this DestinyEntitiesItemsDestinyItemObjectivesComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_completed(self):
        """Gets the date_completed of this DestinyEntitiesItemsDestinyItemObjectivesComponent.

        If we have any information on when these objectives were completed, this will be the date of that completion. This won't be on many items, but could be interesting for some items that do store this information.

        :return: The date_completed of this DestinyEntitiesItemsDestinyItemObjectivesComponent.
        :rtype: datetime
        """
        return self._date_completed

    @date_completed.setter
    def date_completed(self, date_completed):
        """Sets the date_completed of this DestinyEntitiesItemsDestinyItemObjectivesComponent.

        If we have any information on when these objectives were completed, this will be the date of that completion. This won't be on many items, but could be interesting for some items that do store this information.

        :param date_completed: The date_completed of this DestinyEntitiesItemsDestinyItemObjectivesComponent.
        :type date_completed: datetime
        """

        self._date_completed = date_completed

    @property
    def flavor_objective(self):
        """Gets the flavor_objective of this DestinyEntitiesItemsDestinyItemObjectivesComponent.

        I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for \"flavor\" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.

        :return: The flavor_objective of this DestinyEntitiesItemsDestinyItemObjectivesComponent.
        :rtype: DestinyQuestsDestinyObjectiveProgress
        """
        return self._flavor_objective

    @flavor_objective.setter
    def flavor_objective(self, flavor_objective):
        """Sets the flavor_objective of this DestinyEntitiesItemsDestinyItemObjectivesComponent.

        I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for \"flavor\" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.

        :param flavor_objective: The flavor_objective of this DestinyEntitiesItemsDestinyItemObjectivesComponent.
        :type flavor_objective: DestinyQuestsDestinyObjectiveProgress
        """

        self._flavor_objective = flavor_objective

    @property
    def objectives(self):
        """Gets the objectives of this DestinyEntitiesItemsDestinyItemObjectivesComponent.

        If the item has a hard association with objectives, your progress on them will be defined here.   Objectives are our standard way to describe a series of tasks that have to be completed for a reward.

        :return: The objectives of this DestinyEntitiesItemsDestinyItemObjectivesComponent.
        :rtype: List[DestinyQuestsDestinyObjectiveProgress]
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """Sets the objectives of this DestinyEntitiesItemsDestinyItemObjectivesComponent.

        If the item has a hard association with objectives, your progress on them will be defined here.   Objectives are our standard way to describe a series of tasks that have to be completed for a reward.

        :param objectives: The objectives of this DestinyEntitiesItemsDestinyItemObjectivesComponent.
        :type objectives: List[DestinyQuestsDestinyObjectiveProgress]
        """

        self._objectives = objectives
