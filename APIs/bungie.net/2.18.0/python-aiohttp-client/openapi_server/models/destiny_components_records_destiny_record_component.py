# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_quests_destiny_objective_progress import DestinyQuestsDestinyObjectiveProgress
from openapi_server import util


class DestinyComponentsRecordsDestinyRecordComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_count: int=None, interval_objectives: List[DestinyQuestsDestinyObjectiveProgress]=None, intervals_redeemed_count: int=None, objectives: List[DestinyQuestsDestinyObjectiveProgress]=None, reward_visibilty: List[bool]=None, state: int=None):
        """DestinyComponentsRecordsDestinyRecordComponent - a model defined in OpenAPI

        :param completed_count: The completed_count of this DestinyComponentsRecordsDestinyRecordComponent.
        :param interval_objectives: The interval_objectives of this DestinyComponentsRecordsDestinyRecordComponent.
        :param intervals_redeemed_count: The intervals_redeemed_count of this DestinyComponentsRecordsDestinyRecordComponent.
        :param objectives: The objectives of this DestinyComponentsRecordsDestinyRecordComponent.
        :param reward_visibilty: The reward_visibilty of this DestinyComponentsRecordsDestinyRecordComponent.
        :param state: The state of this DestinyComponentsRecordsDestinyRecordComponent.
        """
        self.openapi_types = {
            'completed_count': int,
            'interval_objectives': List[DestinyQuestsDestinyObjectiveProgress],
            'intervals_redeemed_count': int,
            'objectives': List[DestinyQuestsDestinyObjectiveProgress],
            'reward_visibilty': List[bool],
            'state': int
        }

        self.attribute_map = {
            'completed_count': 'completedCount',
            'interval_objectives': 'intervalObjectives',
            'intervals_redeemed_count': 'intervalsRedeemedCount',
            'objectives': 'objectives',
            'reward_visibilty': 'rewardVisibilty',
            'state': 'state'
        }

        self._completed_count = completed_count
        self._interval_objectives = interval_objectives
        self._intervals_redeemed_count = intervals_redeemed_count
        self._objectives = objectives
        self._reward_visibilty = reward_visibilty
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyComponentsRecordsDestinyRecordComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Components.Records.DestinyRecordComponent of this DestinyComponentsRecordsDestinyRecordComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_count(self):
        """Gets the completed_count of this DestinyComponentsRecordsDestinyRecordComponent.

        If available, this is the number of times this record has been completed. For example, the number of times a seal title has been gilded.

        :return: The completed_count of this DestinyComponentsRecordsDestinyRecordComponent.
        :rtype: int
        """
        return self._completed_count

    @completed_count.setter
    def completed_count(self, completed_count):
        """Sets the completed_count of this DestinyComponentsRecordsDestinyRecordComponent.

        If available, this is the number of times this record has been completed. For example, the number of times a seal title has been gilded.

        :param completed_count: The completed_count of this DestinyComponentsRecordsDestinyRecordComponent.
        :type completed_count: int
        """

        self._completed_count = completed_count

    @property
    def interval_objectives(self):
        """Gets the interval_objectives of this DestinyComponentsRecordsDestinyRecordComponent.


        :return: The interval_objectives of this DestinyComponentsRecordsDestinyRecordComponent.
        :rtype: List[DestinyQuestsDestinyObjectiveProgress]
        """
        return self._interval_objectives

    @interval_objectives.setter
    def interval_objectives(self, interval_objectives):
        """Sets the interval_objectives of this DestinyComponentsRecordsDestinyRecordComponent.


        :param interval_objectives: The interval_objectives of this DestinyComponentsRecordsDestinyRecordComponent.
        :type interval_objectives: List[DestinyQuestsDestinyObjectiveProgress]
        """

        self._interval_objectives = interval_objectives

    @property
    def intervals_redeemed_count(self):
        """Gets the intervals_redeemed_count of this DestinyComponentsRecordsDestinyRecordComponent.


        :return: The intervals_redeemed_count of this DestinyComponentsRecordsDestinyRecordComponent.
        :rtype: int
        """
        return self._intervals_redeemed_count

    @intervals_redeemed_count.setter
    def intervals_redeemed_count(self, intervals_redeemed_count):
        """Sets the intervals_redeemed_count of this DestinyComponentsRecordsDestinyRecordComponent.


        :param intervals_redeemed_count: The intervals_redeemed_count of this DestinyComponentsRecordsDestinyRecordComponent.
        :type intervals_redeemed_count: int
        """

        self._intervals_redeemed_count = intervals_redeemed_count

    @property
    def objectives(self):
        """Gets the objectives of this DestinyComponentsRecordsDestinyRecordComponent.


        :return: The objectives of this DestinyComponentsRecordsDestinyRecordComponent.
        :rtype: List[DestinyQuestsDestinyObjectiveProgress]
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """Sets the objectives of this DestinyComponentsRecordsDestinyRecordComponent.


        :param objectives: The objectives of this DestinyComponentsRecordsDestinyRecordComponent.
        :type objectives: List[DestinyQuestsDestinyObjectiveProgress]
        """

        self._objectives = objectives

    @property
    def reward_visibilty(self):
        """Gets the reward_visibilty of this DestinyComponentsRecordsDestinyRecordComponent.

        If available, a list that describes which reward rewards should be shown (true) or hidden (false). This property is for regular record rewards, and not for interval objective rewards.

        :return: The reward_visibilty of this DestinyComponentsRecordsDestinyRecordComponent.
        :rtype: List[bool]
        """
        return self._reward_visibilty

    @reward_visibilty.setter
    def reward_visibilty(self, reward_visibilty):
        """Sets the reward_visibilty of this DestinyComponentsRecordsDestinyRecordComponent.

        If available, a list that describes which reward rewards should be shown (true) or hidden (false). This property is for regular record rewards, and not for interval objective rewards.

        :param reward_visibilty: The reward_visibilty of this DestinyComponentsRecordsDestinyRecordComponent.
        :type reward_visibilty: List[bool]
        """

        self._reward_visibilty = reward_visibilty

    @property
    def state(self):
        """Gets the state of this DestinyComponentsRecordsDestinyRecordComponent.


        :return: The state of this DestinyComponentsRecordsDestinyRecordComponent.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DestinyComponentsRecordsDestinyRecordComponent.


        :param state: The state of this DestinyComponentsRecordsDestinyRecordComponent.
        :type state: int
        """

        self._state = state
