# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_item_component_set_ofuint32 import DestinyItemComponentSetOfuint32
from openapi_server.models.single_component_response_of_destiny_collectibles_component import SingleComponentResponseOfDestinyCollectiblesComponent
from openapi_server import util


class DestinyResponsesDestinyCollectibleNodeDetailResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collectible_item_components: DestinyItemComponentSetOfuint32=None, collectibles: SingleComponentResponseOfDestinyCollectiblesComponent=None):
        """DestinyResponsesDestinyCollectibleNodeDetailResponse - a model defined in OpenAPI

        :param collectible_item_components: The collectible_item_components of this DestinyResponsesDestinyCollectibleNodeDetailResponse.
        :param collectibles: The collectibles of this DestinyResponsesDestinyCollectibleNodeDetailResponse.
        """
        self.openapi_types = {
            'collectible_item_components': DestinyItemComponentSetOfuint32,
            'collectibles': SingleComponentResponseOfDestinyCollectiblesComponent
        }

        self.attribute_map = {
            'collectible_item_components': 'collectibleItemComponents',
            'collectibles': 'collectibles'
        }

        self._collectible_item_components = collectible_item_components
        self._collectibles = collectibles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyResponsesDestinyCollectibleNodeDetailResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Responses.DestinyCollectibleNodeDetailResponse of this DestinyResponsesDestinyCollectibleNodeDetailResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collectible_item_components(self):
        """Gets the collectible_item_components of this DestinyResponsesDestinyCollectibleNodeDetailResponse.

        Item components, keyed by the item hash of the items pointed at collectibles found under the requested Presentation Node.  NOTE: I had a lot of hemming and hawing about whether these should be keyed by collectible hash or item hash... but ultimately having it be keyed by item hash meant that UI that already uses DestinyItemComponentSet data wouldn't have to have a special override to do the collectible -> item lookup once you delve into an item's details, and it also meant that you didn't have to remember that the Hash being used as the key for plugSets was different from the Hash being used for the other Dictionaries. As a result, using the Item Hash felt like the least crappy solution.  We may all come to regret this decision. We will see.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]

        :return: The collectible_item_components of this DestinyResponsesDestinyCollectibleNodeDetailResponse.
        :rtype: DestinyItemComponentSetOfuint32
        """
        return self._collectible_item_components

    @collectible_item_components.setter
    def collectible_item_components(self, collectible_item_components):
        """Sets the collectible_item_components of this DestinyResponsesDestinyCollectibleNodeDetailResponse.

        Item components, keyed by the item hash of the items pointed at collectibles found under the requested Presentation Node.  NOTE: I had a lot of hemming and hawing about whether these should be keyed by collectible hash or item hash... but ultimately having it be keyed by item hash meant that UI that already uses DestinyItemComponentSet data wouldn't have to have a special override to do the collectible -> item lookup once you delve into an item's details, and it also meant that you didn't have to remember that the Hash being used as the key for plugSets was different from the Hash being used for the other Dictionaries. As a result, using the Item Hash felt like the least crappy solution.  We may all come to regret this decision. We will see.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]

        :param collectible_item_components: The collectible_item_components of this DestinyResponsesDestinyCollectibleNodeDetailResponse.
        :type collectible_item_components: DestinyItemComponentSetOfuint32
        """

        self._collectible_item_components = collectible_item_components

    @property
    def collectibles(self):
        """Gets the collectibles of this DestinyResponsesDestinyCollectibleNodeDetailResponse.

        COMPONENT TYPE: Collectibles

        :return: The collectibles of this DestinyResponsesDestinyCollectibleNodeDetailResponse.
        :rtype: SingleComponentResponseOfDestinyCollectiblesComponent
        """
        return self._collectibles

    @collectibles.setter
    def collectibles(self, collectibles):
        """Sets the collectibles of this DestinyResponsesDestinyCollectibleNodeDetailResponse.

        COMPONENT TYPE: Collectibles

        :param collectibles: The collectibles of this DestinyResponsesDestinyCollectibleNodeDetailResponse.
        :type collectibles: SingleComponentResponseOfDestinyCollectiblesComponent
        """

        self._collectibles = collectibles
