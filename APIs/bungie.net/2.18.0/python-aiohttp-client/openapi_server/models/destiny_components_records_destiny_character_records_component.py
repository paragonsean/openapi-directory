# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_components_records_destiny_record_component import DestinyComponentsRecordsDestinyRecordComponent
from openapi_server import util


class DestinyComponentsRecordsDestinyCharacterRecordsComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, featured_record_hashes: List[int]=None, record_categories_root_node_hash: int=None, record_seals_root_node_hash: int=None, records: Dict[str, DestinyComponentsRecordsDestinyRecordComponent]=None):
        """DestinyComponentsRecordsDestinyCharacterRecordsComponent - a model defined in OpenAPI

        :param featured_record_hashes: The featured_record_hashes of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        :param record_categories_root_node_hash: The record_categories_root_node_hash of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        :param record_seals_root_node_hash: The record_seals_root_node_hash of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        :param records: The records of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        """
        self.openapi_types = {
            'featured_record_hashes': List[int],
            'record_categories_root_node_hash': int,
            'record_seals_root_node_hash': int,
            'records': Dict[str, DestinyComponentsRecordsDestinyRecordComponent]
        }

        self.attribute_map = {
            'featured_record_hashes': 'featuredRecordHashes',
            'record_categories_root_node_hash': 'recordCategoriesRootNodeHash',
            'record_seals_root_node_hash': 'recordSealsRootNodeHash',
            'records': 'records'
        }

        self._featured_record_hashes = featured_record_hashes
        self._record_categories_root_node_hash = record_categories_root_node_hash
        self._record_seals_root_node_hash = record_seals_root_node_hash
        self._records = records

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyComponentsRecordsDestinyCharacterRecordsComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Components.Records.DestinyCharacterRecordsComponent of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def featured_record_hashes(self):
        """Gets the featured_record_hashes of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.


        :return: The featured_record_hashes of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        :rtype: List[int]
        """
        return self._featured_record_hashes

    @featured_record_hashes.setter
    def featured_record_hashes(self, featured_record_hashes):
        """Sets the featured_record_hashes of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.


        :param featured_record_hashes: The featured_record_hashes of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        :type featured_record_hashes: List[int]
        """

        self._featured_record_hashes = featured_record_hashes

    @property
    def record_categories_root_node_hash(self):
        """Gets the record_categories_root_node_hash of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.

        The hash for the root presentation node definition of Triumph categories.

        :return: The record_categories_root_node_hash of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        :rtype: int
        """
        return self._record_categories_root_node_hash

    @record_categories_root_node_hash.setter
    def record_categories_root_node_hash(self, record_categories_root_node_hash):
        """Sets the record_categories_root_node_hash of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.

        The hash for the root presentation node definition of Triumph categories.

        :param record_categories_root_node_hash: The record_categories_root_node_hash of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        :type record_categories_root_node_hash: int
        """

        self._record_categories_root_node_hash = record_categories_root_node_hash

    @property
    def record_seals_root_node_hash(self):
        """Gets the record_seals_root_node_hash of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.

        The hash for the root presentation node definition of Triumph Seals.

        :return: The record_seals_root_node_hash of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        :rtype: int
        """
        return self._record_seals_root_node_hash

    @record_seals_root_node_hash.setter
    def record_seals_root_node_hash(self, record_seals_root_node_hash):
        """Sets the record_seals_root_node_hash of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.

        The hash for the root presentation node definition of Triumph Seals.

        :param record_seals_root_node_hash: The record_seals_root_node_hash of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        :type record_seals_root_node_hash: int
        """

        self._record_seals_root_node_hash = record_seals_root_node_hash

    @property
    def records(self):
        """Gets the records of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.


        :return: The records of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        :rtype: Dict[str, DestinyComponentsRecordsDestinyRecordComponent]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.


        :param records: The records of this DestinyComponentsRecordsDestinyCharacterRecordsComponent.
        :type records: Dict[str, DestinyComponentsRecordsDestinyRecordComponent]
        """

        self._records = records
