# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContentNewsArticleRssItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, html_content: str=None, image_path: str=None, link: str=None, optional_mobile_image_path: str=None, pub_date: datetime=None, title: str=None, unique_identifier: str=None):
        """ContentNewsArticleRssItem - a model defined in OpenAPI

        :param description: The description of this ContentNewsArticleRssItem.
        :param html_content: The html_content of this ContentNewsArticleRssItem.
        :param image_path: The image_path of this ContentNewsArticleRssItem.
        :param link: The link of this ContentNewsArticleRssItem.
        :param optional_mobile_image_path: The optional_mobile_image_path of this ContentNewsArticleRssItem.
        :param pub_date: The pub_date of this ContentNewsArticleRssItem.
        :param title: The title of this ContentNewsArticleRssItem.
        :param unique_identifier: The unique_identifier of this ContentNewsArticleRssItem.
        """
        self.openapi_types = {
            'description': str,
            'html_content': str,
            'image_path': str,
            'link': str,
            'optional_mobile_image_path': str,
            'pub_date': datetime,
            'title': str,
            'unique_identifier': str
        }

        self.attribute_map = {
            'description': 'Description',
            'html_content': 'HtmlContent',
            'image_path': 'ImagePath',
            'link': 'Link',
            'optional_mobile_image_path': 'OptionalMobileImagePath',
            'pub_date': 'PubDate',
            'title': 'Title',
            'unique_identifier': 'UniqueIdentifier'
        }

        self._description = description
        self._html_content = html_content
        self._image_path = image_path
        self._link = link
        self._optional_mobile_image_path = optional_mobile_image_path
        self._pub_date = pub_date
        self._title = title
        self._unique_identifier = unique_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentNewsArticleRssItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Content.NewsArticleRssItem of this ContentNewsArticleRssItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ContentNewsArticleRssItem.


        :return: The description of this ContentNewsArticleRssItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContentNewsArticleRssItem.


        :param description: The description of this ContentNewsArticleRssItem.
        :type description: str
        """

        self._description = description

    @property
    def html_content(self):
        """Gets the html_content of this ContentNewsArticleRssItem.


        :return: The html_content of this ContentNewsArticleRssItem.
        :rtype: str
        """
        return self._html_content

    @html_content.setter
    def html_content(self, html_content):
        """Sets the html_content of this ContentNewsArticleRssItem.


        :param html_content: The html_content of this ContentNewsArticleRssItem.
        :type html_content: str
        """

        self._html_content = html_content

    @property
    def image_path(self):
        """Gets the image_path of this ContentNewsArticleRssItem.


        :return: The image_path of this ContentNewsArticleRssItem.
        :rtype: str
        """
        return self._image_path

    @image_path.setter
    def image_path(self, image_path):
        """Sets the image_path of this ContentNewsArticleRssItem.


        :param image_path: The image_path of this ContentNewsArticleRssItem.
        :type image_path: str
        """

        self._image_path = image_path

    @property
    def link(self):
        """Gets the link of this ContentNewsArticleRssItem.


        :return: The link of this ContentNewsArticleRssItem.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ContentNewsArticleRssItem.


        :param link: The link of this ContentNewsArticleRssItem.
        :type link: str
        """

        self._link = link

    @property
    def optional_mobile_image_path(self):
        """Gets the optional_mobile_image_path of this ContentNewsArticleRssItem.


        :return: The optional_mobile_image_path of this ContentNewsArticleRssItem.
        :rtype: str
        """
        return self._optional_mobile_image_path

    @optional_mobile_image_path.setter
    def optional_mobile_image_path(self, optional_mobile_image_path):
        """Sets the optional_mobile_image_path of this ContentNewsArticleRssItem.


        :param optional_mobile_image_path: The optional_mobile_image_path of this ContentNewsArticleRssItem.
        :type optional_mobile_image_path: str
        """

        self._optional_mobile_image_path = optional_mobile_image_path

    @property
    def pub_date(self):
        """Gets the pub_date of this ContentNewsArticleRssItem.


        :return: The pub_date of this ContentNewsArticleRssItem.
        :rtype: datetime
        """
        return self._pub_date

    @pub_date.setter
    def pub_date(self, pub_date):
        """Sets the pub_date of this ContentNewsArticleRssItem.


        :param pub_date: The pub_date of this ContentNewsArticleRssItem.
        :type pub_date: datetime
        """

        self._pub_date = pub_date

    @property
    def title(self):
        """Gets the title of this ContentNewsArticleRssItem.


        :return: The title of this ContentNewsArticleRssItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ContentNewsArticleRssItem.


        :param title: The title of this ContentNewsArticleRssItem.
        :type title: str
        """

        self._title = title

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this ContentNewsArticleRssItem.


        :return: The unique_identifier of this ContentNewsArticleRssItem.
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this ContentNewsArticleRssItem.


        :param unique_identifier: The unique_identifier of this ContentNewsArticleRssItem.
        :type unique_identifier: str
        """

        self._unique_identifier = unique_identifier
