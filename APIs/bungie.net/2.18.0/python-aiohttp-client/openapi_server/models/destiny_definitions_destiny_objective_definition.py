# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server.models.destiny_definitions_destiny_objective_perk_entry_definition import DestinyDefinitionsDestinyObjectivePerkEntryDefinition
from openapi_server.models.destiny_definitions_destiny_objective_stat_entry_definition import DestinyDefinitionsDestinyObjectiveStatEntryDefinition
from openapi_server import util


class DestinyDefinitionsDestinyObjectiveDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_negative_value: bool=None, allow_overcompletion: bool=None, allow_value_change_when_completed: bool=None, completed_value_style: int=None, completion_value: int=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, hash: int=None, in_progress_value_style: int=None, index: int=None, is_counting_downward: bool=None, location_hash: int=None, minimum_visibility_threshold: int=None, perks: DestinyDefinitionsDestinyObjectivePerkEntryDefinition=None, progress_description: str=None, redacted: bool=None, scope: int=None, show_value_on_complete: bool=None, stats: DestinyDefinitionsDestinyObjectiveStatEntryDefinition=None, ui_label: str=None, ui_style: int=None, value_style: int=None):
        """DestinyDefinitionsDestinyObjectiveDefinition - a model defined in OpenAPI

        :param allow_negative_value: The allow_negative_value of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param allow_overcompletion: The allow_overcompletion of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param allow_value_change_when_completed: The allow_value_change_when_completed of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param completed_value_style: The completed_value_style of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param completion_value: The completion_value of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param hash: The hash of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param in_progress_value_style: The in_progress_value_style of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param index: The index of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param is_counting_downward: The is_counting_downward of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param location_hash: The location_hash of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param minimum_visibility_threshold: The minimum_visibility_threshold of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param perks: The perks of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param progress_description: The progress_description of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param scope: The scope of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param show_value_on_complete: The show_value_on_complete of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param stats: The stats of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param ui_label: The ui_label of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param ui_style: The ui_style of this DestinyDefinitionsDestinyObjectiveDefinition.
        :param value_style: The value_style of this DestinyDefinitionsDestinyObjectiveDefinition.
        """
        self.openapi_types = {
            'allow_negative_value': bool,
            'allow_overcompletion': bool,
            'allow_value_change_when_completed': bool,
            'completed_value_style': int,
            'completion_value': int,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'hash': int,
            'in_progress_value_style': int,
            'index': int,
            'is_counting_downward': bool,
            'location_hash': int,
            'minimum_visibility_threshold': int,
            'perks': DestinyDefinitionsDestinyObjectivePerkEntryDefinition,
            'progress_description': str,
            'redacted': bool,
            'scope': int,
            'show_value_on_complete': bool,
            'stats': DestinyDefinitionsDestinyObjectiveStatEntryDefinition,
            'ui_label': str,
            'ui_style': int,
            'value_style': int
        }

        self.attribute_map = {
            'allow_negative_value': 'allowNegativeValue',
            'allow_overcompletion': 'allowOvercompletion',
            'allow_value_change_when_completed': 'allowValueChangeWhenCompleted',
            'completed_value_style': 'completedValueStyle',
            'completion_value': 'completionValue',
            'display_properties': 'displayProperties',
            'hash': 'hash',
            'in_progress_value_style': 'inProgressValueStyle',
            'index': 'index',
            'is_counting_downward': 'isCountingDownward',
            'location_hash': 'locationHash',
            'minimum_visibility_threshold': 'minimumVisibilityThreshold',
            'perks': 'perks',
            'progress_description': 'progressDescription',
            'redacted': 'redacted',
            'scope': 'scope',
            'show_value_on_complete': 'showValueOnComplete',
            'stats': 'stats',
            'ui_label': 'uiLabel',
            'ui_style': 'uiStyle',
            'value_style': 'valueStyle'
        }

        self._allow_negative_value = allow_negative_value
        self._allow_overcompletion = allow_overcompletion
        self._allow_value_change_when_completed = allow_value_change_when_completed
        self._completed_value_style = completed_value_style
        self._completion_value = completion_value
        self._display_properties = display_properties
        self._hash = hash
        self._in_progress_value_style = in_progress_value_style
        self._index = index
        self._is_counting_downward = is_counting_downward
        self._location_hash = location_hash
        self._minimum_visibility_threshold = minimum_visibility_threshold
        self._perks = perks
        self._progress_description = progress_description
        self._redacted = redacted
        self._scope = scope
        self._show_value_on_complete = show_value_on_complete
        self._stats = stats
        self._ui_label = ui_label
        self._ui_style = ui_style
        self._value_style = value_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyObjectiveDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyObjectiveDefinition of this DestinyDefinitionsDestinyObjectiveDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_negative_value(self):
        """Gets the allow_negative_value of this DestinyDefinitionsDestinyObjectiveDefinition.

        If true, the value is allowed to go negative.

        :return: The allow_negative_value of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: bool
        """
        return self._allow_negative_value

    @allow_negative_value.setter
    def allow_negative_value(self, allow_negative_value):
        """Sets the allow_negative_value of this DestinyDefinitionsDestinyObjectiveDefinition.

        If true, the value is allowed to go negative.

        :param allow_negative_value: The allow_negative_value of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type allow_negative_value: bool
        """

        self._allow_negative_value = allow_negative_value

    @property
    def allow_overcompletion(self):
        """Gets the allow_overcompletion of this DestinyDefinitionsDestinyObjectiveDefinition.

        If True, the progress will continue even beyond the point where the objective met its minimum completion requirements. Your UI will have to accommodate it.

        :return: The allow_overcompletion of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: bool
        """
        return self._allow_overcompletion

    @allow_overcompletion.setter
    def allow_overcompletion(self, allow_overcompletion):
        """Sets the allow_overcompletion of this DestinyDefinitionsDestinyObjectiveDefinition.

        If True, the progress will continue even beyond the point where the objective met its minimum completion requirements. Your UI will have to accommodate it.

        :param allow_overcompletion: The allow_overcompletion of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type allow_overcompletion: bool
        """

        self._allow_overcompletion = allow_overcompletion

    @property
    def allow_value_change_when_completed(self):
        """Gets the allow_value_change_when_completed of this DestinyDefinitionsDestinyObjectiveDefinition.

        If true, you can effectively \"un-complete\" this objective if you lose progress after crossing the completion threshold.   If False, once you complete the task it will remain completed forever by locking the value.

        :return: The allow_value_change_when_completed of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: bool
        """
        return self._allow_value_change_when_completed

    @allow_value_change_when_completed.setter
    def allow_value_change_when_completed(self, allow_value_change_when_completed):
        """Sets the allow_value_change_when_completed of this DestinyDefinitionsDestinyObjectiveDefinition.

        If true, you can effectively \"un-complete\" this objective if you lose progress after crossing the completion threshold.   If False, once you complete the task it will remain completed forever by locking the value.

        :param allow_value_change_when_completed: The allow_value_change_when_completed of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type allow_value_change_when_completed: bool
        """

        self._allow_value_change_when_completed = allow_value_change_when_completed

    @property
    def completed_value_style(self):
        """Gets the completed_value_style of this DestinyDefinitionsDestinyObjectiveDefinition.

        The style to use when the objective is completed.

        :return: The completed_value_style of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: int
        """
        return self._completed_value_style

    @completed_value_style.setter
    def completed_value_style(self, completed_value_style):
        """Sets the completed_value_style of this DestinyDefinitionsDestinyObjectiveDefinition.

        The style to use when the objective is completed.

        :param completed_value_style: The completed_value_style of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type completed_value_style: int
        """

        self._completed_value_style = completed_value_style

    @property
    def completion_value(self):
        """Gets the completion_value of this DestinyDefinitionsDestinyObjectiveDefinition.

        The value that the unlock value defined in unlockValueHash must reach in order for the objective to be considered Completed. Used in calculating progress and completion status.

        :return: The completion_value of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: int
        """
        return self._completion_value

    @completion_value.setter
    def completion_value(self, completion_value):
        """Sets the completion_value of this DestinyDefinitionsDestinyObjectiveDefinition.

        The value that the unlock value defined in unlockValueHash must reach in order for the objective to be considered Completed. Used in calculating progress and completion status.

        :param completion_value: The completion_value of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type completion_value: int
        """

        self._completion_value = completion_value

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyObjectiveDefinition.

        Ideally, this should tell you what your task is. I'm not going to lie to you though. Sometimes this doesn't have useful information at all. Which sucks, but there's nothing either of us can do about it.

        :return: The display_properties of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyObjectiveDefinition.

        Ideally, this should tell you what your task is. I'm not going to lie to you though. Sometimes this doesn't have useful information at all. Which sucks, but there's nothing either of us can do about it.

        :param display_properties: The display_properties of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyObjectiveDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyObjectiveDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def in_progress_value_style(self):
        """Gets the in_progress_value_style of this DestinyDefinitionsDestinyObjectiveDefinition.

        The style to use when the objective is still in progress.

        :return: The in_progress_value_style of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: int
        """
        return self._in_progress_value_style

    @in_progress_value_style.setter
    def in_progress_value_style(self, in_progress_value_style):
        """Sets the in_progress_value_style of this DestinyDefinitionsDestinyObjectiveDefinition.

        The style to use when the objective is still in progress.

        :param in_progress_value_style: The in_progress_value_style of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type in_progress_value_style: int
        """

        self._in_progress_value_style = in_progress_value_style

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyObjectiveDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyObjectiveDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type index: int
        """

        self._index = index

    @property
    def is_counting_downward(self):
        """Gets the is_counting_downward of this DestinyDefinitionsDestinyObjectiveDefinition.

        If true, completion means having an unlock value less than or equal to the completionValue.  If False, completion means having an unlock value greater than or equal to the completionValue.

        :return: The is_counting_downward of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: bool
        """
        return self._is_counting_downward

    @is_counting_downward.setter
    def is_counting_downward(self, is_counting_downward):
        """Sets the is_counting_downward of this DestinyDefinitionsDestinyObjectiveDefinition.

        If true, completion means having an unlock value less than or equal to the completionValue.  If False, completion means having an unlock value greater than or equal to the completionValue.

        :param is_counting_downward: The is_counting_downward of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type is_counting_downward: bool
        """

        self._is_counting_downward = is_counting_downward

    @property
    def location_hash(self):
        """Gets the location_hash of this DestinyDefinitionsDestinyObjectiveDefinition.

        OPTIONAL: a hash identifier for the location at which this objective must be accomplished, if there is a location defined. Look up the DestinyLocationDefinition for this hash for that additional location info.

        :return: The location_hash of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: int
        """
        return self._location_hash

    @location_hash.setter
    def location_hash(self, location_hash):
        """Sets the location_hash of this DestinyDefinitionsDestinyObjectiveDefinition.

        OPTIONAL: a hash identifier for the location at which this objective must be accomplished, if there is a location defined. Look up the DestinyLocationDefinition for this hash for that additional location info.

        :param location_hash: The location_hash of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type location_hash: int
        """

        self._location_hash = location_hash

    @property
    def minimum_visibility_threshold(self):
        """Gets the minimum_visibility_threshold of this DestinyDefinitionsDestinyObjectiveDefinition.

        If nonzero, this is the minimum value at which the objective's progression should be shown. Otherwise, don't show it yet.

        :return: The minimum_visibility_threshold of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: int
        """
        return self._minimum_visibility_threshold

    @minimum_visibility_threshold.setter
    def minimum_visibility_threshold(self, minimum_visibility_threshold):
        """Sets the minimum_visibility_threshold of this DestinyDefinitionsDestinyObjectiveDefinition.

        If nonzero, this is the minimum value at which the objective's progression should be shown. Otherwise, don't show it yet.

        :param minimum_visibility_threshold: The minimum_visibility_threshold of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type minimum_visibility_threshold: int
        """

        self._minimum_visibility_threshold = minimum_visibility_threshold

    @property
    def perks(self):
        """Gets the perks of this DestinyDefinitionsDestinyObjectiveDefinition.

        If this objective enables Perks intrinsically, the conditions for that enabling are defined here.

        :return: The perks of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: DestinyDefinitionsDestinyObjectivePerkEntryDefinition
        """
        return self._perks

    @perks.setter
    def perks(self, perks):
        """Sets the perks of this DestinyDefinitionsDestinyObjectiveDefinition.

        If this objective enables Perks intrinsically, the conditions for that enabling are defined here.

        :param perks: The perks of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type perks: DestinyDefinitionsDestinyObjectivePerkEntryDefinition
        """

        self._perks = perks

    @property
    def progress_description(self):
        """Gets the progress_description of this DestinyDefinitionsDestinyObjectiveDefinition.

        Text to describe the progress bar.

        :return: The progress_description of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: str
        """
        return self._progress_description

    @progress_description.setter
    def progress_description(self, progress_description):
        """Sets the progress_description of this DestinyDefinitionsDestinyObjectiveDefinition.

        Text to describe the progress bar.

        :param progress_description: The progress_description of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type progress_description: str
        """

        self._progress_description = progress_description

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyObjectiveDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyObjectiveDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type redacted: bool
        """

        self._redacted = redacted

    @property
    def scope(self):
        """Gets the scope of this DestinyDefinitionsDestinyObjectiveDefinition.

        A shortcut for determining the most restrictive gating that this Objective is set to use. This includes both the dynamic determination of progress and of completion values. See the DestinyGatingScope enum's documentation for more details.

        :return: The scope of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: int
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this DestinyDefinitionsDestinyObjectiveDefinition.

        A shortcut for determining the most restrictive gating that this Objective is set to use. This includes both the dynamic determination of progress and of completion values. See the DestinyGatingScope enum's documentation for more details.

        :param scope: The scope of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type scope: int
        """

        self._scope = scope

    @property
    def show_value_on_complete(self):
        """Gets the show_value_on_complete of this DestinyDefinitionsDestinyObjectiveDefinition.

        If True, you should continue showing the progression value in the UI after it's complete. I mean, we already do that in BNet anyways, but if you want to be better behaved than us you could honor this flag.

        :return: The show_value_on_complete of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: bool
        """
        return self._show_value_on_complete

    @show_value_on_complete.setter
    def show_value_on_complete(self, show_value_on_complete):
        """Sets the show_value_on_complete of this DestinyDefinitionsDestinyObjectiveDefinition.

        If True, you should continue showing the progression value in the UI after it's complete. I mean, we already do that in BNet anyways, but if you want to be better behaved than us you could honor this flag.

        :param show_value_on_complete: The show_value_on_complete of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type show_value_on_complete: bool
        """

        self._show_value_on_complete = show_value_on_complete

    @property
    def stats(self):
        """Gets the stats of this DestinyDefinitionsDestinyObjectiveDefinition.

        If this objective enables modifications on a player's stats intrinsically, the conditions are defined here.

        :return: The stats of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: DestinyDefinitionsDestinyObjectiveStatEntryDefinition
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this DestinyDefinitionsDestinyObjectiveDefinition.

        If this objective enables modifications on a player's stats intrinsically, the conditions are defined here.

        :param stats: The stats of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type stats: DestinyDefinitionsDestinyObjectiveStatEntryDefinition
        """

        self._stats = stats

    @property
    def ui_label(self):
        """Gets the ui_label of this DestinyDefinitionsDestinyObjectiveDefinition.

        Objectives can have arbitrary UI-defined identifiers that define the style applied to objectives. For convenience, known UI labels will be defined in the uiStyle enum value.

        :return: The ui_label of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: str
        """
        return self._ui_label

    @ui_label.setter
    def ui_label(self, ui_label):
        """Sets the ui_label of this DestinyDefinitionsDestinyObjectiveDefinition.

        Objectives can have arbitrary UI-defined identifiers that define the style applied to objectives. For convenience, known UI labels will be defined in the uiStyle enum value.

        :param ui_label: The ui_label of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type ui_label: str
        """

        self._ui_label = ui_label

    @property
    def ui_style(self):
        """Gets the ui_style of this DestinyDefinitionsDestinyObjectiveDefinition.

        If the objective has a known UI label value, this property will represent it.

        :return: The ui_style of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: int
        """
        return self._ui_style

    @ui_style.setter
    def ui_style(self, ui_style):
        """Sets the ui_style of this DestinyDefinitionsDestinyObjectiveDefinition.

        If the objective has a known UI label value, this property will represent it.

        :param ui_style: The ui_style of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type ui_style: int
        """

        self._ui_style = ui_style

    @property
    def value_style(self):
        """Gets the value_style of this DestinyDefinitionsDestinyObjectiveDefinition.

        The UI style applied to the objective. It's an enum, take a look at DestinyUnlockValueUIStyle for details of the possible styles. Use this info as you wish to customize your UI.  DEPRECATED: This is no longer populated by Destiny 2 game content. Please use inProgressValueStyle and completedValueStyle instead.

        :return: The value_style of this DestinyDefinitionsDestinyObjectiveDefinition.
        :rtype: int
        """
        return self._value_style

    @value_style.setter
    def value_style(self, value_style):
        """Sets the value_style of this DestinyDefinitionsDestinyObjectiveDefinition.

        The UI style applied to the objective. It's an enum, take a look at DestinyUnlockValueUIStyle for details of the possible styles. Use this info as you wish to customize your UI.  DEPRECATED: This is no longer populated by Destiny 2 game content. Please use inProgressValueStyle and completedValueStyle instead.

        :param value_style: The value_style of this DestinyDefinitionsDestinyObjectiveDefinition.
        :type value_style: int
        """

        self._value_style = value_style
