# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server import util


class DestinyDefinitionsTraitsDestinyTraitDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_hint: str=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, hash: int=None, index: int=None, redacted: bool=None):
        """DestinyDefinitionsTraitsDestinyTraitDefinition - a model defined in OpenAPI

        :param display_hint: The display_hint of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :param hash: The hash of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :param index: The index of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :param redacted: The redacted of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        """
        self.openapi_types = {
            'display_hint': str,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'hash': int,
            'index': int,
            'redacted': bool
        }

        self.attribute_map = {
            'display_hint': 'displayHint',
            'display_properties': 'displayProperties',
            'hash': 'hash',
            'index': 'index',
            'redacted': 'redacted'
        }

        self._display_hint = display_hint
        self._display_properties = display_properties
        self._hash = hash
        self._index = index
        self._redacted = redacted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsTraitsDestinyTraitDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.Traits.DestinyTraitDefinition of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_hint(self):
        """Gets the display_hint of this DestinyDefinitionsTraitsDestinyTraitDefinition.

        An identifier for how this trait can be displayed. For example: a 'keyword' hint to show an explanation for certain related terms.

        :return: The display_hint of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :rtype: str
        """
        return self._display_hint

    @display_hint.setter
    def display_hint(self, display_hint):
        """Sets the display_hint of this DestinyDefinitionsTraitsDestinyTraitDefinition.

        An identifier for how this trait can be displayed. For example: a 'keyword' hint to show an explanation for certain related terms.

        :param display_hint: The display_hint of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :type display_hint: str
        """

        self._display_hint = display_hint

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsTraitsDestinyTraitDefinition.


        :return: The display_properties of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsTraitsDestinyTraitDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsTraitsDestinyTraitDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsTraitsDestinyTraitDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsTraitsDestinyTraitDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsTraitsDestinyTraitDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :type index: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsTraitsDestinyTraitDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsTraitsDestinyTraitDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsTraitsDestinyTraitDefinition.
        :type redacted: bool
        """

        self._redacted = redacted
