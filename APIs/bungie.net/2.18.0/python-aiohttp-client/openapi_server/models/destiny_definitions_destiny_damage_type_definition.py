# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server.models.destiny_misc_destiny_color import DestinyMiscDestinyColor
from openapi_server import util


class DestinyDefinitionsDestinyDamageTypeDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: DestinyMiscDestinyColor=None, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, enum_value: int=None, hash: int=None, index: int=None, redacted: bool=None, show_icon: bool=None, transparent_icon_path: str=None):
        """DestinyDefinitionsDestinyDamageTypeDefinition - a model defined in OpenAPI

        :param color: The color of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :param display_properties: The display_properties of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :param enum_value: The enum_value of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :param hash: The hash of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :param index: The index of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :param show_icon: The show_icon of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :param transparent_icon_path: The transparent_icon_path of this DestinyDefinitionsDestinyDamageTypeDefinition.
        """
        self.openapi_types = {
            'color': DestinyMiscDestinyColor,
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'enum_value': int,
            'hash': int,
            'index': int,
            'redacted': bool,
            'show_icon': bool,
            'transparent_icon_path': str
        }

        self.attribute_map = {
            'color': 'color',
            'display_properties': 'displayProperties',
            'enum_value': 'enumValue',
            'hash': 'hash',
            'index': 'index',
            'redacted': 'redacted',
            'show_icon': 'showIcon',
            'transparent_icon_path': 'transparentIconPath'
        }

        self._color = color
        self._display_properties = display_properties
        self._enum_value = enum_value
        self._hash = hash
        self._index = index
        self._redacted = redacted
        self._show_icon = show_icon
        self._transparent_icon_path = transparent_icon_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyDamageTypeDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyDamageTypeDefinition of this DestinyDefinitionsDestinyDamageTypeDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this DestinyDefinitionsDestinyDamageTypeDefinition.

        A color associated with the damage type. The displayProperties icon is tinted with a color close to this.

        :return: The color of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :rtype: DestinyMiscDestinyColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DestinyDefinitionsDestinyDamageTypeDefinition.

        A color associated with the damage type. The displayProperties icon is tinted with a color close to this.

        :param color: The color of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :type color: DestinyMiscDestinyColor
        """

        self._color = color

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyDamageTypeDefinition.

        The description of the damage type, icon etc...

        :return: The display_properties of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyDamageTypeDefinition.

        The description of the damage type, icon etc...

        :param display_properties: The display_properties of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def enum_value(self):
        """Gets the enum_value of this DestinyDefinitionsDestinyDamageTypeDefinition.

        We have an enumeration for damage types for quick reference. This is the current definition's damage type enum value.

        :return: The enum_value of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :rtype: int
        """
        return self._enum_value

    @enum_value.setter
    def enum_value(self, enum_value):
        """Sets the enum_value of this DestinyDefinitionsDestinyDamageTypeDefinition.

        We have an enumeration for damage types for quick reference. This is the current definition's damage type enum value.

        :param enum_value: The enum_value of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :type enum_value: int
        """

        self._enum_value = enum_value

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyDamageTypeDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyDamageTypeDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyDamageTypeDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyDamageTypeDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :type index: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyDamageTypeDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyDamageTypeDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :type redacted: bool
        """

        self._redacted = redacted

    @property
    def show_icon(self):
        """Gets the show_icon of this DestinyDefinitionsDestinyDamageTypeDefinition.

        If TRUE, the game shows this damage type's icon. Otherwise, it doesn't. Whether you show it or not is up to you.

        :return: The show_icon of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :rtype: bool
        """
        return self._show_icon

    @show_icon.setter
    def show_icon(self, show_icon):
        """Sets the show_icon of this DestinyDefinitionsDestinyDamageTypeDefinition.

        If TRUE, the game shows this damage type's icon. Otherwise, it doesn't. Whether you show it or not is up to you.

        :param show_icon: The show_icon of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :type show_icon: bool
        """

        self._show_icon = show_icon

    @property
    def transparent_icon_path(self):
        """Gets the transparent_icon_path of this DestinyDefinitionsDestinyDamageTypeDefinition.

        A variant of the icon that is transparent and colorless.

        :return: The transparent_icon_path of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :rtype: str
        """
        return self._transparent_icon_path

    @transparent_icon_path.setter
    def transparent_icon_path(self, transparent_icon_path):
        """Sets the transparent_icon_path of this DestinyDefinitionsDestinyDamageTypeDefinition.

        A variant of the icon that is transparent and colorless.

        :param transparent_icon_path: The transparent_icon_path of this DestinyDefinitionsDestinyDamageTypeDefinition.
        :type transparent_icon_path: str
        """

        self._transparent_icon_path = transparent_icon_path
