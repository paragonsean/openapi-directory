# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.forum_forum_recruitment_detail import ForumForumRecruitmentDetail
from openapi_server.models.forum_poll_response import ForumPollResponse
from openapi_server.models.forum_post_response import ForumPostResponse
from openapi_server.models.groups_v2_group_response import GroupsV2GroupResponse
from openapi_server.models.queries_paged_query import QueriesPagedQuery
from openapi_server.models.tags_models_contracts_tag_response import TagsModelsContractsTagResponse
from openapi_server.models.user_general_user import UserGeneralUser
from openapi_server import util


class ForumPostSearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authors: List[UserGeneralUser]=None, available_pages: int=None, groups: List[GroupsV2GroupResponse]=None, has_more: bool=None, polls: List[ForumPollResponse]=None, query: QueriesPagedQuery=None, recruitment_details: List[ForumForumRecruitmentDetail]=None, related_posts: List[ForumPostResponse]=None, replacement_continuation_token: str=None, results: List[ForumPostResponse]=None, searched_tags: List[TagsModelsContractsTagResponse]=None, total_results: int=None, use_total_results: bool=None):
        """ForumPostSearchResponse - a model defined in OpenAPI

        :param authors: The authors of this ForumPostSearchResponse.
        :param available_pages: The available_pages of this ForumPostSearchResponse.
        :param groups: The groups of this ForumPostSearchResponse.
        :param has_more: The has_more of this ForumPostSearchResponse.
        :param polls: The polls of this ForumPostSearchResponse.
        :param query: The query of this ForumPostSearchResponse.
        :param recruitment_details: The recruitment_details of this ForumPostSearchResponse.
        :param related_posts: The related_posts of this ForumPostSearchResponse.
        :param replacement_continuation_token: The replacement_continuation_token of this ForumPostSearchResponse.
        :param results: The results of this ForumPostSearchResponse.
        :param searched_tags: The searched_tags of this ForumPostSearchResponse.
        :param total_results: The total_results of this ForumPostSearchResponse.
        :param use_total_results: The use_total_results of this ForumPostSearchResponse.
        """
        self.openapi_types = {
            'authors': List[UserGeneralUser],
            'available_pages': int,
            'groups': List[GroupsV2GroupResponse],
            'has_more': bool,
            'polls': List[ForumPollResponse],
            'query': QueriesPagedQuery,
            'recruitment_details': List[ForumForumRecruitmentDetail],
            'related_posts': List[ForumPostResponse],
            'replacement_continuation_token': str,
            'results': List[ForumPostResponse],
            'searched_tags': List[TagsModelsContractsTagResponse],
            'total_results': int,
            'use_total_results': bool
        }

        self.attribute_map = {
            'authors': 'authors',
            'available_pages': 'availablePages',
            'groups': 'groups',
            'has_more': 'hasMore',
            'polls': 'polls',
            'query': 'query',
            'recruitment_details': 'recruitmentDetails',
            'related_posts': 'relatedPosts',
            'replacement_continuation_token': 'replacementContinuationToken',
            'results': 'results',
            'searched_tags': 'searchedTags',
            'total_results': 'totalResults',
            'use_total_results': 'useTotalResults'
        }

        self._authors = authors
        self._available_pages = available_pages
        self._groups = groups
        self._has_more = has_more
        self._polls = polls
        self._query = query
        self._recruitment_details = recruitment_details
        self._related_posts = related_posts
        self._replacement_continuation_token = replacement_continuation_token
        self._results = results
        self._searched_tags = searched_tags
        self._total_results = total_results
        self._use_total_results = use_total_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForumPostSearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Forum.PostSearchResponse of this ForumPostSearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authors(self):
        """Gets the authors of this ForumPostSearchResponse.


        :return: The authors of this ForumPostSearchResponse.
        :rtype: List[UserGeneralUser]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this ForumPostSearchResponse.


        :param authors: The authors of this ForumPostSearchResponse.
        :type authors: List[UserGeneralUser]
        """

        self._authors = authors

    @property
    def available_pages(self):
        """Gets the available_pages of this ForumPostSearchResponse.


        :return: The available_pages of this ForumPostSearchResponse.
        :rtype: int
        """
        return self._available_pages

    @available_pages.setter
    def available_pages(self, available_pages):
        """Sets the available_pages of this ForumPostSearchResponse.


        :param available_pages: The available_pages of this ForumPostSearchResponse.
        :type available_pages: int
        """

        self._available_pages = available_pages

    @property
    def groups(self):
        """Gets the groups of this ForumPostSearchResponse.


        :return: The groups of this ForumPostSearchResponse.
        :rtype: List[GroupsV2GroupResponse]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ForumPostSearchResponse.


        :param groups: The groups of this ForumPostSearchResponse.
        :type groups: List[GroupsV2GroupResponse]
        """

        self._groups = groups

    @property
    def has_more(self):
        """Gets the has_more of this ForumPostSearchResponse.


        :return: The has_more of this ForumPostSearchResponse.
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this ForumPostSearchResponse.


        :param has_more: The has_more of this ForumPostSearchResponse.
        :type has_more: bool
        """

        self._has_more = has_more

    @property
    def polls(self):
        """Gets the polls of this ForumPostSearchResponse.


        :return: The polls of this ForumPostSearchResponse.
        :rtype: List[ForumPollResponse]
        """
        return self._polls

    @polls.setter
    def polls(self, polls):
        """Sets the polls of this ForumPostSearchResponse.


        :param polls: The polls of this ForumPostSearchResponse.
        :type polls: List[ForumPollResponse]
        """

        self._polls = polls

    @property
    def query(self):
        """Gets the query of this ForumPostSearchResponse.


        :return: The query of this ForumPostSearchResponse.
        :rtype: QueriesPagedQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ForumPostSearchResponse.


        :param query: The query of this ForumPostSearchResponse.
        :type query: QueriesPagedQuery
        """

        self._query = query

    @property
    def recruitment_details(self):
        """Gets the recruitment_details of this ForumPostSearchResponse.


        :return: The recruitment_details of this ForumPostSearchResponse.
        :rtype: List[ForumForumRecruitmentDetail]
        """
        return self._recruitment_details

    @recruitment_details.setter
    def recruitment_details(self, recruitment_details):
        """Sets the recruitment_details of this ForumPostSearchResponse.


        :param recruitment_details: The recruitment_details of this ForumPostSearchResponse.
        :type recruitment_details: List[ForumForumRecruitmentDetail]
        """

        self._recruitment_details = recruitment_details

    @property
    def related_posts(self):
        """Gets the related_posts of this ForumPostSearchResponse.


        :return: The related_posts of this ForumPostSearchResponse.
        :rtype: List[ForumPostResponse]
        """
        return self._related_posts

    @related_posts.setter
    def related_posts(self, related_posts):
        """Sets the related_posts of this ForumPostSearchResponse.


        :param related_posts: The related_posts of this ForumPostSearchResponse.
        :type related_posts: List[ForumPostResponse]
        """

        self._related_posts = related_posts

    @property
    def replacement_continuation_token(self):
        """Gets the replacement_continuation_token of this ForumPostSearchResponse.


        :return: The replacement_continuation_token of this ForumPostSearchResponse.
        :rtype: str
        """
        return self._replacement_continuation_token

    @replacement_continuation_token.setter
    def replacement_continuation_token(self, replacement_continuation_token):
        """Sets the replacement_continuation_token of this ForumPostSearchResponse.


        :param replacement_continuation_token: The replacement_continuation_token of this ForumPostSearchResponse.
        :type replacement_continuation_token: str
        """

        self._replacement_continuation_token = replacement_continuation_token

    @property
    def results(self):
        """Gets the results of this ForumPostSearchResponse.


        :return: The results of this ForumPostSearchResponse.
        :rtype: List[ForumPostResponse]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this ForumPostSearchResponse.


        :param results: The results of this ForumPostSearchResponse.
        :type results: List[ForumPostResponse]
        """

        self._results = results

    @property
    def searched_tags(self):
        """Gets the searched_tags of this ForumPostSearchResponse.


        :return: The searched_tags of this ForumPostSearchResponse.
        :rtype: List[TagsModelsContractsTagResponse]
        """
        return self._searched_tags

    @searched_tags.setter
    def searched_tags(self, searched_tags):
        """Sets the searched_tags of this ForumPostSearchResponse.


        :param searched_tags: The searched_tags of this ForumPostSearchResponse.
        :type searched_tags: List[TagsModelsContractsTagResponse]
        """

        self._searched_tags = searched_tags

    @property
    def total_results(self):
        """Gets the total_results of this ForumPostSearchResponse.


        :return: The total_results of this ForumPostSearchResponse.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this ForumPostSearchResponse.


        :param total_results: The total_results of this ForumPostSearchResponse.
        :type total_results: int
        """

        self._total_results = total_results

    @property
    def use_total_results(self):
        """Gets the use_total_results of this ForumPostSearchResponse.

        If useTotalResults is true, then totalResults represents an accurate count.  If False, it does not, and may be estimated/only the size of the current page.  Either way, you should probably always only trust hasMore.  This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.

        :return: The use_total_results of this ForumPostSearchResponse.
        :rtype: bool
        """
        return self._use_total_results

    @use_total_results.setter
    def use_total_results(self, use_total_results):
        """Sets the use_total_results of this ForumPostSearchResponse.

        If useTotalResults is true, then totalResults represents an accurate count.  If False, it does not, and may be estimated/only the size of the current page.  Either way, you should probably always only trust hasMore.  This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.

        :param use_total_results: The use_total_results of this ForumPostSearchResponse.
        :type use_total_results: bool
        """

        self._use_total_results = use_total_results
