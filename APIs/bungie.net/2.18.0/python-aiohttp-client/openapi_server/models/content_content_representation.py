# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContentContentRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, path: str=None, validation_string: str=None):
        """ContentContentRepresentation - a model defined in OpenAPI

        :param name: The name of this ContentContentRepresentation.
        :param path: The path of this ContentContentRepresentation.
        :param validation_string: The validation_string of this ContentContentRepresentation.
        """
        self.openapi_types = {
            'name': str,
            'path': str,
            'validation_string': str
        }

        self.attribute_map = {
            'name': 'name',
            'path': 'path',
            'validation_string': 'validationString'
        }

        self._name = name
        self._path = path
        self._validation_string = validation_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentContentRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Content.ContentRepresentation of this ContentContentRepresentation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ContentContentRepresentation.


        :return: The name of this ContentContentRepresentation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentContentRepresentation.


        :param name: The name of this ContentContentRepresentation.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this ContentContentRepresentation.


        :return: The path of this ContentContentRepresentation.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ContentContentRepresentation.


        :param path: The path of this ContentContentRepresentation.
        :type path: str
        """

        self._path = path

    @property
    def validation_string(self):
        """Gets the validation_string of this ContentContentRepresentation.


        :return: The validation_string of this ContentContentRepresentation.
        :rtype: str
        """
        return self._validation_string

    @validation_string.setter
    def validation_string(self, validation_string):
        """Sets the validation_string of this ContentContentRepresentation.


        :param validation_string: The validation_string of this ContentContentRepresentation.
        :type validation_string: str
        """

        self._validation_string = validation_string
