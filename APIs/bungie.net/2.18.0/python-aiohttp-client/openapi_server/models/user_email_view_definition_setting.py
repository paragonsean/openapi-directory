# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_e_mail_setting_localization import UserEMailSettingLocalization
from openapi_server.models.user_email_subscription_definition import UserEmailSubscriptionDefinition
from openapi_server import util


class UserEmailViewDefinitionSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, localization: Dict[str, UserEMailSettingLocalization]=None, name: str=None, opt_in_aggregate_value: int=None, set_by_default: bool=None, subscriptions: List[UserEmailSubscriptionDefinition]=None):
        """UserEmailViewDefinitionSetting - a model defined in OpenAPI

        :param localization: The localization of this UserEmailViewDefinitionSetting.
        :param name: The name of this UserEmailViewDefinitionSetting.
        :param opt_in_aggregate_value: The opt_in_aggregate_value of this UserEmailViewDefinitionSetting.
        :param set_by_default: The set_by_default of this UserEmailViewDefinitionSetting.
        :param subscriptions: The subscriptions of this UserEmailViewDefinitionSetting.
        """
        self.openapi_types = {
            'localization': Dict[str, UserEMailSettingLocalization],
            'name': str,
            'opt_in_aggregate_value': int,
            'set_by_default': bool,
            'subscriptions': List[UserEmailSubscriptionDefinition]
        }

        self.attribute_map = {
            'localization': 'localization',
            'name': 'name',
            'opt_in_aggregate_value': 'optInAggregateValue',
            'set_by_default': 'setByDefault',
            'subscriptions': 'subscriptions'
        }

        self._localization = localization
        self._name = name
        self._opt_in_aggregate_value = opt_in_aggregate_value
        self._set_by_default = set_by_default
        self._subscriptions = subscriptions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserEmailViewDefinitionSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User.EmailViewDefinitionSetting of this UserEmailViewDefinitionSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def localization(self):
        """Gets the localization of this UserEmailViewDefinitionSetting.

        A dictionary of localized text for the EMail setting, keyed by the locale.

        :return: The localization of this UserEmailViewDefinitionSetting.
        :rtype: Dict[str, UserEMailSettingLocalization]
        """
        return self._localization

    @localization.setter
    def localization(self, localization):
        """Sets the localization of this UserEmailViewDefinitionSetting.

        A dictionary of localized text for the EMail setting, keyed by the locale.

        :param localization: The localization of this UserEmailViewDefinitionSetting.
        :type localization: Dict[str, UserEMailSettingLocalization]
        """

        self._localization = localization

    @property
    def name(self):
        """Gets the name of this UserEmailViewDefinitionSetting.

        The identifier for this UI Setting, which can be used to relate it to custom strings or other data as desired.

        :return: The name of this UserEmailViewDefinitionSetting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserEmailViewDefinitionSetting.

        The identifier for this UI Setting, which can be used to relate it to custom strings or other data as desired.

        :param name: The name of this UserEmailViewDefinitionSetting.
        :type name: str
        """

        self._name = name

    @property
    def opt_in_aggregate_value(self):
        """Gets the opt_in_aggregate_value of this UserEmailViewDefinitionSetting.

        The OptInFlags value to set or clear if this setting is set or cleared in the UI. It is the aggregate of all underlying opt-in flags related to this setting.

        :return: The opt_in_aggregate_value of this UserEmailViewDefinitionSetting.
        :rtype: int
        """
        return self._opt_in_aggregate_value

    @opt_in_aggregate_value.setter
    def opt_in_aggregate_value(self, opt_in_aggregate_value):
        """Sets the opt_in_aggregate_value of this UserEmailViewDefinitionSetting.

        The OptInFlags value to set or clear if this setting is set or cleared in the UI. It is the aggregate of all underlying opt-in flags related to this setting.

        :param opt_in_aggregate_value: The opt_in_aggregate_value of this UserEmailViewDefinitionSetting.
        :type opt_in_aggregate_value: int
        """

        self._opt_in_aggregate_value = opt_in_aggregate_value

    @property
    def set_by_default(self):
        """Gets the set_by_default of this UserEmailViewDefinitionSetting.

        If true, this setting should be set by default if the user hasn't chosen whether it's set or cleared yet.

        :return: The set_by_default of this UserEmailViewDefinitionSetting.
        :rtype: bool
        """
        return self._set_by_default

    @set_by_default.setter
    def set_by_default(self, set_by_default):
        """Sets the set_by_default of this UserEmailViewDefinitionSetting.

        If true, this setting should be set by default if the user hasn't chosen whether it's set or cleared yet.

        :param set_by_default: The set_by_default of this UserEmailViewDefinitionSetting.
        :type set_by_default: bool
        """

        self._set_by_default = set_by_default

    @property
    def subscriptions(self):
        """Gets the subscriptions of this UserEmailViewDefinitionSetting.

        The subscriptions to show as children of this setting, if any.

        :return: The subscriptions of this UserEmailViewDefinitionSetting.
        :rtype: List[UserEmailSubscriptionDefinition]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this UserEmailViewDefinitionSetting.

        The subscriptions to show as children of this setting, if any.

        :param subscriptions: The subscriptions of this UserEmailViewDefinitionSetting.
        :type subscriptions: List[UserEmailSubscriptionDefinition]
        """

        self._subscriptions = subscriptions
