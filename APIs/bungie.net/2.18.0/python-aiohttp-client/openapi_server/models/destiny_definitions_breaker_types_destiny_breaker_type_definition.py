# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
from openapi_server import util


class DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition=None, enum_value: int=None, hash: int=None, index: int=None, redacted: bool=None):
        """DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition - a model defined in OpenAPI

        :param display_properties: The display_properties of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :param enum_value: The enum_value of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :param hash: The hash of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :param index: The index of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :param redacted: The redacted of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        """
        self.openapi_types = {
            'display_properties': DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition,
            'enum_value': int,
            'hash': int,
            'index': int,
            'redacted': bool
        }

        self.attribute_map = {
            'display_properties': 'displayProperties',
            'enum_value': 'enumValue',
            'hash': 'hash',
            'index': 'index',
            'redacted': 'redacted'
        }

        self._display_properties = display_properties
        self._enum_value = enum_value
        self._hash = hash
        self._index = index
        self._redacted = redacted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.BreakerTypes.DestinyBreakerTypeDefinition of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.


        :return: The display_properties of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :type display_properties: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def enum_value(self):
        """Gets the enum_value of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.

        We have an enumeration for Breaker types for quick reference. This is the current definition's breaker type enum value.

        :return: The enum_value of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :rtype: int
        """
        return self._enum_value

    @enum_value.setter
    def enum_value(self, enum_value):
        """Sets the enum_value of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.

        We have an enumeration for Breaker types for quick reference. This is the current definition's breaker type enum value.

        :param enum_value: The enum_value of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :type enum_value: int
        """

        self._enum_value = enum_value

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :type index: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition.
        :type redacted: bool
        """

        self._redacted = redacted
