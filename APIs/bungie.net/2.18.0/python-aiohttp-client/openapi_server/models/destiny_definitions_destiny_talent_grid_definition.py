# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_destiny_talent_exclusive_group import DestinyDefinitionsDestinyTalentExclusiveGroup
from openapi_server.models.destiny_definitions_destiny_talent_node_category import DestinyDefinitionsDestinyTalentNodeCategory
from openapi_server.models.destiny_definitions_destiny_talent_node_definition import DestinyDefinitionsDestinyTalentNodeDefinition
from openapi_server.models.destiny_definitions_destiny_talent_node_exclusive_set_definition import DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition
from openapi_server import util


class DestinyDefinitionsDestinyTalentGridDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclusive_sets: List[DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition]=None, grid_level_per_column: int=None, groups: Dict[str, DestinyDefinitionsDestinyTalentExclusiveGroup]=None, hash: int=None, independent_node_indexes: List[int]=None, index: int=None, max_grid_level: int=None, node_categories: List[DestinyDefinitionsDestinyTalentNodeCategory]=None, nodes: List[DestinyDefinitionsDestinyTalentNodeDefinition]=None, progression_hash: int=None, redacted: bool=None):
        """DestinyDefinitionsDestinyTalentGridDefinition - a model defined in OpenAPI

        :param exclusive_sets: The exclusive_sets of this DestinyDefinitionsDestinyTalentGridDefinition.
        :param grid_level_per_column: The grid_level_per_column of this DestinyDefinitionsDestinyTalentGridDefinition.
        :param groups: The groups of this DestinyDefinitionsDestinyTalentGridDefinition.
        :param hash: The hash of this DestinyDefinitionsDestinyTalentGridDefinition.
        :param independent_node_indexes: The independent_node_indexes of this DestinyDefinitionsDestinyTalentGridDefinition.
        :param index: The index of this DestinyDefinitionsDestinyTalentGridDefinition.
        :param max_grid_level: The max_grid_level of this DestinyDefinitionsDestinyTalentGridDefinition.
        :param node_categories: The node_categories of this DestinyDefinitionsDestinyTalentGridDefinition.
        :param nodes: The nodes of this DestinyDefinitionsDestinyTalentGridDefinition.
        :param progression_hash: The progression_hash of this DestinyDefinitionsDestinyTalentGridDefinition.
        :param redacted: The redacted of this DestinyDefinitionsDestinyTalentGridDefinition.
        """
        self.openapi_types = {
            'exclusive_sets': List[DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition],
            'grid_level_per_column': int,
            'groups': Dict[str, DestinyDefinitionsDestinyTalentExclusiveGroup],
            'hash': int,
            'independent_node_indexes': List[int],
            'index': int,
            'max_grid_level': int,
            'node_categories': List[DestinyDefinitionsDestinyTalentNodeCategory],
            'nodes': List[DestinyDefinitionsDestinyTalentNodeDefinition],
            'progression_hash': int,
            'redacted': bool
        }

        self.attribute_map = {
            'exclusive_sets': 'exclusiveSets',
            'grid_level_per_column': 'gridLevelPerColumn',
            'groups': 'groups',
            'hash': 'hash',
            'independent_node_indexes': 'independentNodeIndexes',
            'index': 'index',
            'max_grid_level': 'maxGridLevel',
            'node_categories': 'nodeCategories',
            'nodes': 'nodes',
            'progression_hash': 'progressionHash',
            'redacted': 'redacted'
        }

        self._exclusive_sets = exclusive_sets
        self._grid_level_per_column = grid_level_per_column
        self._groups = groups
        self._hash = hash
        self._independent_node_indexes = independent_node_indexes
        self._index = index
        self._max_grid_level = max_grid_level
        self._node_categories = node_categories
        self._nodes = nodes
        self._progression_hash = progression_hash
        self._redacted = redacted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyTalentGridDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyTalentGridDefinition of this DestinyDefinitionsDestinyTalentGridDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclusive_sets(self):
        """Gets the exclusive_sets of this DestinyDefinitionsDestinyTalentGridDefinition.

        Talent Nodes can exist in \"exclusive sets\": these are sets of nodes in which only a single node in the set can be activated at any given time. Activating a node in this set will automatically deactivate the other nodes in the set (referred to as a \"Swap\").  If a node in the exclusive set has already been activated, the game will not charge you materials to activate another node in the set, even if you have never activated it before, because you already paid the cost to activate one node in the set.  Not to be confused with Exclusive Groups. (how the heck do we NOT get confused by that? Jeez) See the groups property for information about that only-tangentially-related concept.

        :return: The exclusive_sets of this DestinyDefinitionsDestinyTalentGridDefinition.
        :rtype: List[DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition]
        """
        return self._exclusive_sets

    @exclusive_sets.setter
    def exclusive_sets(self, exclusive_sets):
        """Sets the exclusive_sets of this DestinyDefinitionsDestinyTalentGridDefinition.

        Talent Nodes can exist in \"exclusive sets\": these are sets of nodes in which only a single node in the set can be activated at any given time. Activating a node in this set will automatically deactivate the other nodes in the set (referred to as a \"Swap\").  If a node in the exclusive set has already been activated, the game will not charge you materials to activate another node in the set, even if you have never activated it before, because you already paid the cost to activate one node in the set.  Not to be confused with Exclusive Groups. (how the heck do we NOT get confused by that? Jeez) See the groups property for information about that only-tangentially-related concept.

        :param exclusive_sets: The exclusive_sets of this DestinyDefinitionsDestinyTalentGridDefinition.
        :type exclusive_sets: List[DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition]
        """

        self._exclusive_sets = exclusive_sets

    @property
    def grid_level_per_column(self):
        """Gets the grid_level_per_column of this DestinyDefinitionsDestinyTalentGridDefinition.

        The meaning of this has been lost in the sands of time: it still exists as a property, but appears to be unused in the modern UI of talent grids. It used to imply that each visual \"column\" of talent nodes required identical progression levels in order to be activated. Returning this value in case it is still useful to someone? Perhaps it's just a bit of interesting history.

        :return: The grid_level_per_column of this DestinyDefinitionsDestinyTalentGridDefinition.
        :rtype: int
        """
        return self._grid_level_per_column

    @grid_level_per_column.setter
    def grid_level_per_column(self, grid_level_per_column):
        """Sets the grid_level_per_column of this DestinyDefinitionsDestinyTalentGridDefinition.

        The meaning of this has been lost in the sands of time: it still exists as a property, but appears to be unused in the modern UI of talent grids. It used to imply that each visual \"column\" of talent nodes required identical progression levels in order to be activated. Returning this value in case it is still useful to someone? Perhaps it's just a bit of interesting history.

        :param grid_level_per_column: The grid_level_per_column of this DestinyDefinitionsDestinyTalentGridDefinition.
        :type grid_level_per_column: int
        """

        self._grid_level_per_column = grid_level_per_column

    @property
    def groups(self):
        """Gets the groups of this DestinyDefinitionsDestinyTalentGridDefinition.

        Talent Nodes can have \"Exclusive Groups\". These are not to be confused with Exclusive Sets (see exclusiveSets property).  Look at the definition of DestinyTalentExclusiveGroup for more information and how they work. These groups are keyed by the \"groupHash\" from DestinyTalentExclusiveGroup.

        :return: The groups of this DestinyDefinitionsDestinyTalentGridDefinition.
        :rtype: Dict[str, DestinyDefinitionsDestinyTalentExclusiveGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this DestinyDefinitionsDestinyTalentGridDefinition.

        Talent Nodes can have \"Exclusive Groups\". These are not to be confused with Exclusive Sets (see exclusiveSets property).  Look at the definition of DestinyTalentExclusiveGroup for more information and how they work. These groups are keyed by the \"groupHash\" from DestinyTalentExclusiveGroup.

        :param groups: The groups of this DestinyDefinitionsDestinyTalentGridDefinition.
        :type groups: Dict[str, DestinyDefinitionsDestinyTalentExclusiveGroup]
        """

        self._groups = groups

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyTalentGridDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :return: The hash of this DestinyDefinitionsDestinyTalentGridDefinition.
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyTalentGridDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.

        :param hash: The hash of this DestinyDefinitionsDestinyTalentGridDefinition.
        :type hash: int
        """

        self._hash = hash

    @property
    def independent_node_indexes(self):
        """Gets the independent_node_indexes of this DestinyDefinitionsDestinyTalentGridDefinition.

        This is a quick reference to the indexes of nodes that are not part of exclusive sets. Handy for knowing which talent nodes can only be activated directly, rather than via swapping.

        :return: The independent_node_indexes of this DestinyDefinitionsDestinyTalentGridDefinition.
        :rtype: List[int]
        """
        return self._independent_node_indexes

    @independent_node_indexes.setter
    def independent_node_indexes(self, independent_node_indexes):
        """Sets the independent_node_indexes of this DestinyDefinitionsDestinyTalentGridDefinition.

        This is a quick reference to the indexes of nodes that are not part of exclusive sets. Handy for knowing which talent nodes can only be activated directly, rather than via swapping.

        :param independent_node_indexes: The independent_node_indexes of this DestinyDefinitionsDestinyTalentGridDefinition.
        :type independent_node_indexes: List[int]
        """

        self._independent_node_indexes = independent_node_indexes

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyTalentGridDefinition.

        The index of the entity as it was found in the investment tables.

        :return: The index of this DestinyDefinitionsDestinyTalentGridDefinition.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyTalentGridDefinition.

        The index of the entity as it was found in the investment tables.

        :param index: The index of this DestinyDefinitionsDestinyTalentGridDefinition.
        :type index: int
        """

        self._index = index

    @property
    def max_grid_level(self):
        """Gets the max_grid_level of this DestinyDefinitionsDestinyTalentGridDefinition.

        The maximum possible level of the Talent Grid: at this level, any nodes are allowed to be activated.

        :return: The max_grid_level of this DestinyDefinitionsDestinyTalentGridDefinition.
        :rtype: int
        """
        return self._max_grid_level

    @max_grid_level.setter
    def max_grid_level(self, max_grid_level):
        """Sets the max_grid_level of this DestinyDefinitionsDestinyTalentGridDefinition.

        The maximum possible level of the Talent Grid: at this level, any nodes are allowed to be activated.

        :param max_grid_level: The max_grid_level of this DestinyDefinitionsDestinyTalentGridDefinition.
        :type max_grid_level: int
        """

        self._max_grid_level = max_grid_level

    @property
    def node_categories(self):
        """Gets the node_categories of this DestinyDefinitionsDestinyTalentGridDefinition.

        BNet wants to show talent nodes grouped by similar purpose with localized titles. This is the ordered list of those categories: if you want to show nodes by category, you can iterate over this list, render the displayProperties for the category as the title, and then iterate over the talent nodes referenced by the category to show the related nodes.  Note that this is different from Exclusive Groups or Sets, because these categories also incorporate \"Independent\" nodes that belong to neither sets nor groups. These are purely for visual grouping of nodes rather than functional grouping.

        :return: The node_categories of this DestinyDefinitionsDestinyTalentGridDefinition.
        :rtype: List[DestinyDefinitionsDestinyTalentNodeCategory]
        """
        return self._node_categories

    @node_categories.setter
    def node_categories(self, node_categories):
        """Sets the node_categories of this DestinyDefinitionsDestinyTalentGridDefinition.

        BNet wants to show talent nodes grouped by similar purpose with localized titles. This is the ordered list of those categories: if you want to show nodes by category, you can iterate over this list, render the displayProperties for the category as the title, and then iterate over the talent nodes referenced by the category to show the related nodes.  Note that this is different from Exclusive Groups or Sets, because these categories also incorporate \"Independent\" nodes that belong to neither sets nor groups. These are purely for visual grouping of nodes rather than functional grouping.

        :param node_categories: The node_categories of this DestinyDefinitionsDestinyTalentGridDefinition.
        :type node_categories: List[DestinyDefinitionsDestinyTalentNodeCategory]
        """

        self._node_categories = node_categories

    @property
    def nodes(self):
        """Gets the nodes of this DestinyDefinitionsDestinyTalentGridDefinition.

        The list of Talent Nodes on the Grid (recall that Nodes themselves are really just locations in the UI to show whatever their current Step is. You will only know the current step for a node by retrieving instanced data through platform calls to the API that return DestinyItemTalentGridComponent).

        :return: The nodes of this DestinyDefinitionsDestinyTalentGridDefinition.
        :rtype: List[DestinyDefinitionsDestinyTalentNodeDefinition]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this DestinyDefinitionsDestinyTalentGridDefinition.

        The list of Talent Nodes on the Grid (recall that Nodes themselves are really just locations in the UI to show whatever their current Step is. You will only know the current step for a node by retrieving instanced data through platform calls to the API that return DestinyItemTalentGridComponent).

        :param nodes: The nodes of this DestinyDefinitionsDestinyTalentGridDefinition.
        :type nodes: List[DestinyDefinitionsDestinyTalentNodeDefinition]
        """

        self._nodes = nodes

    @property
    def progression_hash(self):
        """Gets the progression_hash of this DestinyDefinitionsDestinyTalentGridDefinition.

        The hash identifier of the Progression (DestinyProgressionDefinition) that drives whether and when Talent Nodes can be activated on the Grid. Items will have instances of this Progression, and will gain experience that will eventually cause the grid to increase in level. As the grid's level increases, it will cross the threshold where nodes can be activated. See DestinyTalentGridStepDefinition's activation requirements for more information.

        :return: The progression_hash of this DestinyDefinitionsDestinyTalentGridDefinition.
        :rtype: int
        """
        return self._progression_hash

    @progression_hash.setter
    def progression_hash(self, progression_hash):
        """Sets the progression_hash of this DestinyDefinitionsDestinyTalentGridDefinition.

        The hash identifier of the Progression (DestinyProgressionDefinition) that drives whether and when Talent Nodes can be activated on the Grid. Items will have instances of this Progression, and will gain experience that will eventually cause the grid to increase in level. As the grid's level increases, it will cross the threshold where nodes can be activated. See DestinyTalentGridStepDefinition's activation requirements for more information.

        :param progression_hash: The progression_hash of this DestinyDefinitionsDestinyTalentGridDefinition.
        :type progression_hash: int
        """

        self._progression_hash = progression_hash

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyTalentGridDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :return: The redacted of this DestinyDefinitionsDestinyTalentGridDefinition.
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyTalentGridDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!

        :param redacted: The redacted of this DestinyDefinitionsDestinyTalentGridDefinition.
        :type redacted: bool
        """

        self._redacted = redacted
