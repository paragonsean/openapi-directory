# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destiny_definitions_common_destiny_icon_sequence_definition import DestinyDefinitionsCommonDestinyIconSequenceDefinition
from openapi_server.models.destiny_definitions_destiny_vendor_requirement_display_entry_definition import DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition
from openapi_server import util


class DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, has_icon: bool=None, high_res_icon: str=None, icon: str=None, icon_sequences: List[DestinyDefinitionsCommonDestinyIconSequenceDefinition]=None, large_icon: str=None, large_transparent_icon: str=None, map_icon: str=None, name: str=None, original_icon: str=None, requirements_display: List[DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition]=None, small_transparent_icon: str=None, subtitle: str=None):
        """DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition - a model defined in OpenAPI

        :param description: The description of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :param has_icon: The has_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :param high_res_icon: The high_res_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :param icon: The icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :param icon_sequences: The icon_sequences of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :param large_icon: The large_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :param large_transparent_icon: The large_transparent_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :param map_icon: The map_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :param name: The name of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :param original_icon: The original_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :param requirements_display: The requirements_display of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :param small_transparent_icon: The small_transparent_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :param subtitle: The subtitle of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        """
        self.openapi_types = {
            'description': str,
            'has_icon': bool,
            'high_res_icon': str,
            'icon': str,
            'icon_sequences': List[DestinyDefinitionsCommonDestinyIconSequenceDefinition],
            'large_icon': str,
            'large_transparent_icon': str,
            'map_icon': str,
            'name': str,
            'original_icon': str,
            'requirements_display': List[DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition],
            'small_transparent_icon': str,
            'subtitle': str
        }

        self.attribute_map = {
            'description': 'description',
            'has_icon': 'hasIcon',
            'high_res_icon': 'highResIcon',
            'icon': 'icon',
            'icon_sequences': 'iconSequences',
            'large_icon': 'largeIcon',
            'large_transparent_icon': 'largeTransparentIcon',
            'map_icon': 'mapIcon',
            'name': 'name',
            'original_icon': 'originalIcon',
            'requirements_display': 'requirementsDisplay',
            'small_transparent_icon': 'smallTransparentIcon',
            'subtitle': 'subtitle'
        }

        self._description = description
        self._has_icon = has_icon
        self._high_res_icon = high_res_icon
        self._icon = icon
        self._icon_sequences = icon_sequences
        self._large_icon = large_icon
        self._large_transparent_icon = large_transparent_icon
        self._map_icon = map_icon
        self._name = name
        self._original_icon = original_icon
        self._requirements_display = requirements_display
        self._small_transparent_icon = small_transparent_icon
        self._subtitle = subtitle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Destiny.Definitions.DestinyVendorDisplayPropertiesDefinition of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :return: The description of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :param description: The description of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type description: str
        """

        self._description = description

    @property
    def has_icon(self):
        """Gets the has_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :return: The has_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: bool
        """
        return self._has_icon

    @has_icon.setter
    def has_icon(self, has_icon):
        """Sets the has_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :param has_icon: The has_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type has_icon: bool
        """

        self._has_icon = has_icon

    @property
    def high_res_icon(self):
        """Gets the high_res_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        If this item has a high-res icon (at least for now, many things won't), then the path to that icon will be here.

        :return: The high_res_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: str
        """
        return self._high_res_icon

    @high_res_icon.setter
    def high_res_icon(self, high_res_icon):
        """Sets the high_res_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        If this item has a high-res icon (at least for now, many things won't), then the path to that icon will be here.

        :param high_res_icon: The high_res_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type high_res_icon: str
        """

        self._high_res_icon = high_res_icon

    @property
    def icon(self):
        """Gets the icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        Note that \"icon\" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.  They are currently represented as 96px x 96px images.

        :return: The icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        Note that \"icon\" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.  They are currently represented as 96px x 96px images.

        :param icon: The icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type icon: str
        """

        self._icon = icon

    @property
    def icon_sequences(self):
        """Gets the icon_sequences of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :return: The icon_sequences of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: List[DestinyDefinitionsCommonDestinyIconSequenceDefinition]
        """
        return self._icon_sequences

    @icon_sequences.setter
    def icon_sequences(self, icon_sequences):
        """Sets the icon_sequences of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :param icon_sequences: The icon_sequences of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type icon_sequences: List[DestinyDefinitionsCommonDestinyIconSequenceDefinition]
        """

        self._icon_sequences = icon_sequences

    @property
    def large_icon(self):
        """Gets the large_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        I regret calling this a \"large icon\". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon.

        :return: The large_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: str
        """
        return self._large_icon

    @large_icon.setter
    def large_icon(self, large_icon):
        """Sets the large_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        I regret calling this a \"large icon\". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon.

        :param large_icon: The large_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type large_icon: str
        """

        self._large_icon = large_icon

    @property
    def large_transparent_icon(self):
        """Gets the large_transparent_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        This is apparently the \"Watermark\". I am not certain offhand where this is actually used in the Game UI, but some people may find it useful.

        :return: The large_transparent_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: str
        """
        return self._large_transparent_icon

    @large_transparent_icon.setter
    def large_transparent_icon(self, large_transparent_icon):
        """Sets the large_transparent_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        This is apparently the \"Watermark\". I am not certain offhand where this is actually used in the Game UI, but some people may find it useful.

        :param large_transparent_icon: The large_transparent_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type large_transparent_icon: str
        """

        self._large_transparent_icon = large_transparent_icon

    @property
    def map_icon(self):
        """Gets the map_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        This is the icon used in the map overview, when the vendor is located on the map.

        :return: The map_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: str
        """
        return self._map_icon

    @map_icon.setter
    def map_icon(self, map_icon):
        """Sets the map_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        This is the icon used in the map overview, when the vendor is located on the map.

        :param map_icon: The map_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type map_icon: str
        """

        self._map_icon = map_icon

    @property
    def name(self):
        """Gets the name of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :return: The name of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :param name: The name of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type name: str
        """

        self._name = name

    @property
    def original_icon(self):
        """Gets the original_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use.

        :return: The original_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: str
        """
        return self._original_icon

    @original_icon.setter
    def original_icon(self, original_icon):
        """Sets the original_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use.

        :param original_icon: The original_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type original_icon: str
        """

        self._original_icon = original_icon

    @property
    def requirements_display(self):
        """Gets the requirements_display of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        Vendors, in addition to expected display property data, may also show some \"common requirements\" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.

        :return: The requirements_display of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: List[DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition]
        """
        return self._requirements_display

    @requirements_display.setter
    def requirements_display(self, requirements_display):
        """Sets the requirements_display of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        Vendors, in addition to expected display property data, may also show some \"common requirements\" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.

        :param requirements_display: The requirements_display of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type requirements_display: List[DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition]
        """

        self._requirements_display = requirements_display

    @property
    def small_transparent_icon(self):
        """Gets the small_transparent_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        This is the icon used in parts of the game UI such as the vendor's waypoint.

        :return: The small_transparent_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: str
        """
        return self._small_transparent_icon

    @small_transparent_icon.setter
    def small_transparent_icon(self, small_transparent_icon):
        """Sets the small_transparent_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        This is the icon used in parts of the game UI such as the vendor's waypoint.

        :param small_transparent_icon: The small_transparent_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type small_transparent_icon: str
        """

        self._small_transparent_icon = small_transparent_icon

    @property
    def subtitle(self):
        """Gets the subtitle of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :return: The subtitle of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :param subtitle: The subtitle of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.
        :type subtitle: str
        """

        self._subtitle = subtitle
