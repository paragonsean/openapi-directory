# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.applications_application_developer import ApplicationsApplicationDeveloper
from openapi_server import util


class ApplicationsApplication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: int=None, creation_date: datetime=None, first_published: datetime=None, link: str=None, name: str=None, origin: str=None, override_authorize_view_name: str=None, redirect_url: str=None, scope: int=None, status: int=None, status_changed: datetime=None, team: List[ApplicationsApplicationDeveloper]=None):
        """ApplicationsApplication - a model defined in OpenAPI

        :param application_id: The application_id of this ApplicationsApplication.
        :param creation_date: The creation_date of this ApplicationsApplication.
        :param first_published: The first_published of this ApplicationsApplication.
        :param link: The link of this ApplicationsApplication.
        :param name: The name of this ApplicationsApplication.
        :param origin: The origin of this ApplicationsApplication.
        :param override_authorize_view_name: The override_authorize_view_name of this ApplicationsApplication.
        :param redirect_url: The redirect_url of this ApplicationsApplication.
        :param scope: The scope of this ApplicationsApplication.
        :param status: The status of this ApplicationsApplication.
        :param status_changed: The status_changed of this ApplicationsApplication.
        :param team: The team of this ApplicationsApplication.
        """
        self.openapi_types = {
            'application_id': int,
            'creation_date': datetime,
            'first_published': datetime,
            'link': str,
            'name': str,
            'origin': str,
            'override_authorize_view_name': str,
            'redirect_url': str,
            'scope': int,
            'status': int,
            'status_changed': datetime,
            'team': List[ApplicationsApplicationDeveloper]
        }

        self.attribute_map = {
            'application_id': 'applicationId',
            'creation_date': 'creationDate',
            'first_published': 'firstPublished',
            'link': 'link',
            'name': 'name',
            'origin': 'origin',
            'override_authorize_view_name': 'overrideAuthorizeViewName',
            'redirect_url': 'redirectUrl',
            'scope': 'scope',
            'status': 'status',
            'status_changed': 'statusChanged',
            'team': 'team'
        }

        self._application_id = application_id
        self._creation_date = creation_date
        self._first_published = first_published
        self._link = link
        self._name = name
        self._origin = origin
        self._override_authorize_view_name = override_authorize_view_name
        self._redirect_url = redirect_url
        self._scope = scope
        self._status = status
        self._status_changed = status_changed
        self._team = team

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationsApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Applications.Application of this ApplicationsApplication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationsApplication.

        Unique ID assigned to the application

        :return: The application_id of this ApplicationsApplication.
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationsApplication.

        Unique ID assigned to the application

        :param application_id: The application_id of this ApplicationsApplication.
        :type application_id: int
        """

        self._application_id = application_id

    @property
    def creation_date(self):
        """Gets the creation_date of this ApplicationsApplication.

        Date the application was first added to our database.

        :return: The creation_date of this ApplicationsApplication.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ApplicationsApplication.

        Date the application was first added to our database.

        :param creation_date: The creation_date of this ApplicationsApplication.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def first_published(self):
        """Gets the first_published of this ApplicationsApplication.

        Date the first time the application status entered the 'Public' status.

        :return: The first_published of this ApplicationsApplication.
        :rtype: datetime
        """
        return self._first_published

    @first_published.setter
    def first_published(self, first_published):
        """Sets the first_published of this ApplicationsApplication.

        Date the first time the application status entered the 'Public' status.

        :param first_published: The first_published of this ApplicationsApplication.
        :type first_published: datetime
        """

        self._first_published = first_published

    @property
    def link(self):
        """Gets the link of this ApplicationsApplication.

        Link to website for the application where a user can learn more about the app.

        :return: The link of this ApplicationsApplication.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ApplicationsApplication.

        Link to website for the application where a user can learn more about the app.

        :param link: The link of this ApplicationsApplication.
        :type link: str
        """

        self._link = link

    @property
    def name(self):
        """Gets the name of this ApplicationsApplication.

        Name of the application

        :return: The name of this ApplicationsApplication.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationsApplication.

        Name of the application

        :param name: The name of this ApplicationsApplication.
        :type name: str
        """

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this ApplicationsApplication.

        Value of the Origin header sent in requests generated by this application.

        :return: The origin of this ApplicationsApplication.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ApplicationsApplication.

        Value of the Origin header sent in requests generated by this application.

        :param origin: The origin of this ApplicationsApplication.
        :type origin: str
        """

        self._origin = origin

    @property
    def override_authorize_view_name(self):
        """Gets the override_authorize_view_name of this ApplicationsApplication.

        An optional override for the Authorize view name.

        :return: The override_authorize_view_name of this ApplicationsApplication.
        :rtype: str
        """
        return self._override_authorize_view_name

    @override_authorize_view_name.setter
    def override_authorize_view_name(self, override_authorize_view_name):
        """Sets the override_authorize_view_name of this ApplicationsApplication.

        An optional override for the Authorize view name.

        :param override_authorize_view_name: The override_authorize_view_name of this ApplicationsApplication.
        :type override_authorize_view_name: str
        """

        self._override_authorize_view_name = override_authorize_view_name

    @property
    def redirect_url(self):
        """Gets the redirect_url of this ApplicationsApplication.

        URL used to pass the user's authorization code to the application

        :return: The redirect_url of this ApplicationsApplication.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this ApplicationsApplication.

        URL used to pass the user's authorization code to the application

        :param redirect_url: The redirect_url of this ApplicationsApplication.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def scope(self):
        """Gets the scope of this ApplicationsApplication.

        Permissions the application needs to work

        :return: The scope of this ApplicationsApplication.
        :rtype: int
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ApplicationsApplication.

        Permissions the application needs to work

        :param scope: The scope of this ApplicationsApplication.
        :type scope: int
        """

        self._scope = scope

    @property
    def status(self):
        """Gets the status of this ApplicationsApplication.

        Current status of the application.

        :return: The status of this ApplicationsApplication.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApplicationsApplication.

        Current status of the application.

        :param status: The status of this ApplicationsApplication.
        :type status: int
        """

        self._status = status

    @property
    def status_changed(self):
        """Gets the status_changed of this ApplicationsApplication.

        Date the application status last changed.

        :return: The status_changed of this ApplicationsApplication.
        :rtype: datetime
        """
        return self._status_changed

    @status_changed.setter
    def status_changed(self, status_changed):
        """Sets the status_changed of this ApplicationsApplication.

        Date the application status last changed.

        :param status_changed: The status_changed of this ApplicationsApplication.
        :type status_changed: datetime
        """

        self._status_changed = status_changed

    @property
    def team(self):
        """Gets the team of this ApplicationsApplication.

        List of team members who manage this application on Bungie.net. Will always consist of at least the application owner.

        :return: The team of this ApplicationsApplication.
        :rtype: List[ApplicationsApplicationDeveloper]
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this ApplicationsApplication.

        List of team members who manage this application on Bungie.net. Will always consist of at least the application owner.

        :param team: The team of this ApplicationsApplication.
        :type team: List[ApplicationsApplicationDeveloper]
        """

        self._team = team
