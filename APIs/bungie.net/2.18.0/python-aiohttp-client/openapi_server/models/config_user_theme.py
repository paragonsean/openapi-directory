# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigUserTheme(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_theme_description: str=None, user_theme_id: int=None, user_theme_name: str=None):
        """ConfigUserTheme - a model defined in OpenAPI

        :param user_theme_description: The user_theme_description of this ConfigUserTheme.
        :param user_theme_id: The user_theme_id of this ConfigUserTheme.
        :param user_theme_name: The user_theme_name of this ConfigUserTheme.
        """
        self.openapi_types = {
            'user_theme_description': str,
            'user_theme_id': int,
            'user_theme_name': str
        }

        self.attribute_map = {
            'user_theme_description': 'userThemeDescription',
            'user_theme_id': 'userThemeId',
            'user_theme_name': 'userThemeName'
        }

        self._user_theme_description = user_theme_description
        self._user_theme_id = user_theme_id
        self._user_theme_name = user_theme_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigUserTheme':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Config.UserTheme of this ConfigUserTheme.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_theme_description(self):
        """Gets the user_theme_description of this ConfigUserTheme.


        :return: The user_theme_description of this ConfigUserTheme.
        :rtype: str
        """
        return self._user_theme_description

    @user_theme_description.setter
    def user_theme_description(self, user_theme_description):
        """Sets the user_theme_description of this ConfigUserTheme.


        :param user_theme_description: The user_theme_description of this ConfigUserTheme.
        :type user_theme_description: str
        """

        self._user_theme_description = user_theme_description

    @property
    def user_theme_id(self):
        """Gets the user_theme_id of this ConfigUserTheme.


        :return: The user_theme_id of this ConfigUserTheme.
        :rtype: int
        """
        return self._user_theme_id

    @user_theme_id.setter
    def user_theme_id(self, user_theme_id):
        """Sets the user_theme_id of this ConfigUserTheme.


        :param user_theme_id: The user_theme_id of this ConfigUserTheme.
        :type user_theme_id: int
        """

        self._user_theme_id = user_theme_id

    @property
    def user_theme_name(self):
        """Gets the user_theme_name of this ConfigUserTheme.


        :return: The user_theme_name of this ConfigUserTheme.
        :rtype: str
        """
        return self._user_theme_name

    @user_theme_name.setter
    def user_theme_name(self, user_theme_name):
        """Sets the user_theme_name of this ConfigUserTheme.


        :param user_theme_name: The user_theme_name of this ConfigUserTheme.
        :type user_theme_name: str
        """

        self._user_theme_name = user_theme_name
