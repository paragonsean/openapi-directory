/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyMiscDestinyColor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * All damage types that are possible in the game are defined here, along with localized info and icons as needed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyDamageTypeDefinition {
  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private DestinyMiscDestinyColor color;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_ENUM_VALUE = "enumValue";
  @SerializedName(SERIALIZED_NAME_ENUM_VALUE)
  private Integer enumValue;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_SHOW_ICON = "showIcon";
  @SerializedName(SERIALIZED_NAME_SHOW_ICON)
  private Boolean showIcon;

  public static final String SERIALIZED_NAME_TRANSPARENT_ICON_PATH = "transparentIconPath";
  @SerializedName(SERIALIZED_NAME_TRANSPARENT_ICON_PATH)
  private String transparentIconPath;

  public DestinyDefinitionsDestinyDamageTypeDefinition() {
  }

  public DestinyDefinitionsDestinyDamageTypeDefinition color(DestinyMiscDestinyColor color) {
    this.color = color;
    return this;
  }

  /**
   * A color associated with the damage type. The displayProperties icon is tinted with a color close to this.
   * @return color
   */
  @javax.annotation.Nullable
  public DestinyMiscDestinyColor getColor() {
    return color;
  }

  public void setColor(DestinyMiscDestinyColor color) {
    this.color = color;
  }


  public DestinyDefinitionsDestinyDamageTypeDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * The description of the damage type, icon etc...
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinyDamageTypeDefinition enumValue(Integer enumValue) {
    this.enumValue = enumValue;
    return this;
  }

  /**
   * We have an enumeration for damage types for quick reference. This is the current definition&#39;s damage type enum value.
   * @return enumValue
   */
  @javax.annotation.Nullable
  public Integer getEnumValue() {
    return enumValue;
  }

  public void setEnumValue(Integer enumValue) {
    this.enumValue = enumValue;
  }


  public DestinyDefinitionsDestinyDamageTypeDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDestinyDamageTypeDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinyDamageTypeDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsDestinyDamageTypeDefinition showIcon(Boolean showIcon) {
    this.showIcon = showIcon;
    return this;
  }

  /**
   * If TRUE, the game shows this damage type&#39;s icon. Otherwise, it doesn&#39;t. Whether you show it or not is up to you.
   * @return showIcon
   */
  @javax.annotation.Nullable
  public Boolean getShowIcon() {
    return showIcon;
  }

  public void setShowIcon(Boolean showIcon) {
    this.showIcon = showIcon;
  }


  public DestinyDefinitionsDestinyDamageTypeDefinition transparentIconPath(String transparentIconPath) {
    this.transparentIconPath = transparentIconPath;
    return this;
  }

  /**
   * A variant of the icon that is transparent and colorless.
   * @return transparentIconPath
   */
  @javax.annotation.Nullable
  public String getTransparentIconPath() {
    return transparentIconPath;
  }

  public void setTransparentIconPath(String transparentIconPath) {
    this.transparentIconPath = transparentIconPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyDamageTypeDefinition destinyDefinitionsDestinyDamageTypeDefinition = (DestinyDefinitionsDestinyDamageTypeDefinition) o;
    return Objects.equals(this.color, destinyDefinitionsDestinyDamageTypeDefinition.color) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinyDamageTypeDefinition.displayProperties) &&
        Objects.equals(this.enumValue, destinyDefinitionsDestinyDamageTypeDefinition.enumValue) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyDamageTypeDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinyDamageTypeDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyDamageTypeDefinition.redacted) &&
        Objects.equals(this.showIcon, destinyDefinitionsDestinyDamageTypeDefinition.showIcon) &&
        Objects.equals(this.transparentIconPath, destinyDefinitionsDestinyDamageTypeDefinition.transparentIconPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, displayProperties, enumValue, hash, index, redacted, showIcon, transparentIconPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyDamageTypeDefinition {\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    enumValue: ").append(toIndentedString(enumValue)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    showIcon: ").append(toIndentedString(showIcon)).append("\n");
    sb.append("    transparentIconPath: ").append(toIndentedString(transparentIconPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("color");
    openapiFields.add("displayProperties");
    openapiFields.add("enumValue");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("redacted");
    openapiFields.add("showIcon");
    openapiFields.add("transparentIconPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyDamageTypeDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyDamageTypeDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyDamageTypeDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyDamageTypeDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyDamageTypeDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyDamageTypeDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        DestinyMiscDestinyColor.validateJsonElement(jsonObj.get("color"));
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      if ((jsonObj.get("transparentIconPath") != null && !jsonObj.get("transparentIconPath").isJsonNull()) && !jsonObj.get("transparentIconPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transparentIconPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transparentIconPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyDamageTypeDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyDamageTypeDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyDamageTypeDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyDamageTypeDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyDamageTypeDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyDamageTypeDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyDamageTypeDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyDamageTypeDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyDamageTypeDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyDamageTypeDefinition
   */
  public static DestinyDefinitionsDestinyDamageTypeDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyDamageTypeDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyDamageTypeDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

