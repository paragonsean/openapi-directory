/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The actual activity to be redirected to when you click on the node. Note that a node can have many Activities attached to it: but only one will be active at any given time. The list of Node Activities will be traversed, and the first one found to be active will be displayed. This way, a node can layer multiple variants of an activity on top of each other. For instance, one node can control the weekly Crucible Playlist. There are multiple possible playlists, but only one is active for the week.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition {
  public static final String SERIALIZED_NAME_ACTIVITY_HASH = "activityHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_HASH)
  private Integer activityHash;

  public static final String SERIALIZED_NAME_NODE_ACTIVITY_ID = "nodeActivityId";
  @SerializedName(SERIALIZED_NAME_NODE_ACTIVITY_ID)
  private Integer nodeActivityId;

  public DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition() {
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition activityHash(Integer activityHash) {
    this.activityHash = activityHash;
    return this;
  }

  /**
   * The activity that will be activated if the user clicks on this node. Controls all activity-related information displayed on the node if it is active (the text shown in the tooltip etc)
   * @return activityHash
   */
  @javax.annotation.Nullable
  public Integer getActivityHash() {
    return activityHash;
  }

  public void setActivityHash(Integer activityHash) {
    this.activityHash = activityHash;
  }


  public DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition nodeActivityId(Integer nodeActivityId) {
    this.nodeActivityId = nodeActivityId;
    return this;
  }

  /**
   * An identifier for this node activity. It is only guaranteed to be unique within the Activity Graph.
   * @return nodeActivityId
   */
  @javax.annotation.Nullable
  public Integer getNodeActivityId() {
    return nodeActivityId;
  }

  public void setNodeActivityId(Integer nodeActivityId) {
    this.nodeActivityId = nodeActivityId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition destinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition = (DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition) o;
    return Objects.equals(this.activityHash, destinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition.activityHash) &&
        Objects.equals(this.nodeActivityId, destinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition.nodeActivityId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityHash, nodeActivityId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition {\n");
    sb.append("    activityHash: ").append(toIndentedString(activityHash)).append("\n");
    sb.append("    nodeActivityId: ").append(toIndentedString(nodeActivityId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityHash");
    openapiFields.add("nodeActivityId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition is not found in the empty JSON string", DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition
   */
  public static DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

