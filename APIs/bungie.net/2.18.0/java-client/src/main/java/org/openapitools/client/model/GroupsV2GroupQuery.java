/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NOTE: GroupQuery, as of Destiny 2, has essentially two totally different and incompatible \&quot;modes\&quot;.  If you are querying for a group, you can pass any of the properties below.  If you are querying for a Clan, you MUST NOT pass any of the following properties (they must be null or undefined in your request, not just empty string/default values):  - groupMemberCountFilter - localeFilter - tagText  If you pass these, you will get a useless InvalidParameters error.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupsV2GroupQuery {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private Integer creationDate;

  public static final String SERIALIZED_NAME_CURRENT_PAGE = "currentPage";
  @SerializedName(SERIALIZED_NAME_CURRENT_PAGE)
  private Integer currentPage;

  /**
   * Gets or Sets groupMemberCountFilter
   */
  @JsonAdapter(GroupMemberCountFilterEnum.Adapter.class)
  public enum GroupMemberCountFilterEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    GroupMemberCountFilterEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupMemberCountFilterEnum fromValue(Integer value) {
      for (GroupMemberCountFilterEnum b : GroupMemberCountFilterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupMemberCountFilterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupMemberCountFilterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupMemberCountFilterEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return GroupMemberCountFilterEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      GroupMemberCountFilterEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROUP_MEMBER_COUNT_FILTER = "groupMemberCountFilter";
  @SerializedName(SERIALIZED_NAME_GROUP_MEMBER_COUNT_FILTER)
  private GroupMemberCountFilterEnum groupMemberCountFilter;

  public static final String SERIALIZED_NAME_GROUP_TYPE = "groupType";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE)
  private Integer groupType;

  public static final String SERIALIZED_NAME_ITEMS_PER_PAGE = "itemsPerPage";
  @SerializedName(SERIALIZED_NAME_ITEMS_PER_PAGE)
  private Integer itemsPerPage;

  public static final String SERIALIZED_NAME_LOCALE_FILTER = "localeFilter";
  @SerializedName(SERIALIZED_NAME_LOCALE_FILTER)
  private String localeFilter;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUEST_CONTINUATION_TOKEN = "requestContinuationToken";
  @SerializedName(SERIALIZED_NAME_REQUEST_CONTINUATION_TOKEN)
  private String requestContinuationToken;

  public static final String SERIALIZED_NAME_SORT_BY = "sortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  private Integer sortBy;

  public static final String SERIALIZED_NAME_TAG_TEXT = "tagText";
  @SerializedName(SERIALIZED_NAME_TAG_TEXT)
  private String tagText;

  public GroupsV2GroupQuery() {
  }

  public GroupsV2GroupQuery creationDate(Integer creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public Integer getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(Integer creationDate) {
    this.creationDate = creationDate;
  }


  public GroupsV2GroupQuery currentPage(Integer currentPage) {
    this.currentPage = currentPage;
    return this;
  }

  /**
   * Get currentPage
   * @return currentPage
   */
  @javax.annotation.Nullable
  public Integer getCurrentPage() {
    return currentPage;
  }

  public void setCurrentPage(Integer currentPage) {
    this.currentPage = currentPage;
  }


  public GroupsV2GroupQuery groupMemberCountFilter(GroupMemberCountFilterEnum groupMemberCountFilter) {
    this.groupMemberCountFilter = groupMemberCountFilter;
    return this;
  }

  /**
   * Get groupMemberCountFilter
   * @return groupMemberCountFilter
   */
  @javax.annotation.Nullable
  public GroupMemberCountFilterEnum getGroupMemberCountFilter() {
    return groupMemberCountFilter;
  }

  public void setGroupMemberCountFilter(GroupMemberCountFilterEnum groupMemberCountFilter) {
    this.groupMemberCountFilter = groupMemberCountFilter;
  }


  public GroupsV2GroupQuery groupType(Integer groupType) {
    this.groupType = groupType;
    return this;
  }

  /**
   * Get groupType
   * @return groupType
   */
  @javax.annotation.Nullable
  public Integer getGroupType() {
    return groupType;
  }

  public void setGroupType(Integer groupType) {
    this.groupType = groupType;
  }


  public GroupsV2GroupQuery itemsPerPage(Integer itemsPerPage) {
    this.itemsPerPage = itemsPerPage;
    return this;
  }

  /**
   * Get itemsPerPage
   * @return itemsPerPage
   */
  @javax.annotation.Nullable
  public Integer getItemsPerPage() {
    return itemsPerPage;
  }

  public void setItemsPerPage(Integer itemsPerPage) {
    this.itemsPerPage = itemsPerPage;
  }


  public GroupsV2GroupQuery localeFilter(String localeFilter) {
    this.localeFilter = localeFilter;
    return this;
  }

  /**
   * Get localeFilter
   * @return localeFilter
   */
  @javax.annotation.Nullable
  public String getLocaleFilter() {
    return localeFilter;
  }

  public void setLocaleFilter(String localeFilter) {
    this.localeFilter = localeFilter;
  }


  public GroupsV2GroupQuery name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GroupsV2GroupQuery requestContinuationToken(String requestContinuationToken) {
    this.requestContinuationToken = requestContinuationToken;
    return this;
  }

  /**
   * Get requestContinuationToken
   * @return requestContinuationToken
   */
  @javax.annotation.Nullable
  public String getRequestContinuationToken() {
    return requestContinuationToken;
  }

  public void setRequestContinuationToken(String requestContinuationToken) {
    this.requestContinuationToken = requestContinuationToken;
  }


  public GroupsV2GroupQuery sortBy(Integer sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  /**
   * Get sortBy
   * @return sortBy
   */
  @javax.annotation.Nullable
  public Integer getSortBy() {
    return sortBy;
  }

  public void setSortBy(Integer sortBy) {
    this.sortBy = sortBy;
  }


  public GroupsV2GroupQuery tagText(String tagText) {
    this.tagText = tagText;
    return this;
  }

  /**
   * Get tagText
   * @return tagText
   */
  @javax.annotation.Nullable
  public String getTagText() {
    return tagText;
  }

  public void setTagText(String tagText) {
    this.tagText = tagText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupsV2GroupQuery groupsV2GroupQuery = (GroupsV2GroupQuery) o;
    return Objects.equals(this.creationDate, groupsV2GroupQuery.creationDate) &&
        Objects.equals(this.currentPage, groupsV2GroupQuery.currentPage) &&
        Objects.equals(this.groupMemberCountFilter, groupsV2GroupQuery.groupMemberCountFilter) &&
        Objects.equals(this.groupType, groupsV2GroupQuery.groupType) &&
        Objects.equals(this.itemsPerPage, groupsV2GroupQuery.itemsPerPage) &&
        Objects.equals(this.localeFilter, groupsV2GroupQuery.localeFilter) &&
        Objects.equals(this.name, groupsV2GroupQuery.name) &&
        Objects.equals(this.requestContinuationToken, groupsV2GroupQuery.requestContinuationToken) &&
        Objects.equals(this.sortBy, groupsV2GroupQuery.sortBy) &&
        Objects.equals(this.tagText, groupsV2GroupQuery.tagText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, currentPage, groupMemberCountFilter, groupType, itemsPerPage, localeFilter, name, requestContinuationToken, sortBy, tagText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupsV2GroupQuery {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    currentPage: ").append(toIndentedString(currentPage)).append("\n");
    sb.append("    groupMemberCountFilter: ").append(toIndentedString(groupMemberCountFilter)).append("\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    itemsPerPage: ").append(toIndentedString(itemsPerPage)).append("\n");
    sb.append("    localeFilter: ").append(toIndentedString(localeFilter)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    requestContinuationToken: ").append(toIndentedString(requestContinuationToken)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    tagText: ").append(toIndentedString(tagText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("currentPage");
    openapiFields.add("groupMemberCountFilter");
    openapiFields.add("groupType");
    openapiFields.add("itemsPerPage");
    openapiFields.add("localeFilter");
    openapiFields.add("name");
    openapiFields.add("requestContinuationToken");
    openapiFields.add("sortBy");
    openapiFields.add("tagText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupsV2GroupQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupsV2GroupQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupsV2GroupQuery is not found in the empty JSON string", GroupsV2GroupQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupsV2GroupQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupsV2GroupQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `groupMemberCountFilter`
      if (jsonObj.get("groupMemberCountFilter") != null && !jsonObj.get("groupMemberCountFilter").isJsonNull()) {
        GroupMemberCountFilterEnum.validateJsonElement(jsonObj.get("groupMemberCountFilter"));
      }
      if ((jsonObj.get("localeFilter") != null && !jsonObj.get("localeFilter").isJsonNull()) && !jsonObj.get("localeFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localeFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localeFilter").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("requestContinuationToken") != null && !jsonObj.get("requestContinuationToken").isJsonNull()) && !jsonObj.get("requestContinuationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestContinuationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestContinuationToken").toString()));
      }
      if ((jsonObj.get("tagText") != null && !jsonObj.get("tagText").isJsonNull()) && !jsonObj.get("tagText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupsV2GroupQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupsV2GroupQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupsV2GroupQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupsV2GroupQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupsV2GroupQuery>() {
           @Override
           public void write(JsonWriter out, GroupsV2GroupQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupsV2GroupQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupsV2GroupQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupsV2GroupQuery
   * @throws IOException if the JSON string is invalid with respect to GroupsV2GroupQuery
   */
  public static GroupsV2GroupQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupsV2GroupQuery.class);
  }

  /**
   * Convert an instance of GroupsV2GroupQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

