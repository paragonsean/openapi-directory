/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of a category of rewards, that contains many individual rewards.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition {
  public static final String SERIALIZED_NAME_CATEGORY_HASH = "categoryHash";
  @SerializedName(SERIALIZED_NAME_CATEGORY_HASH)
  private Integer categoryHash;

  public static final String SERIALIZED_NAME_CATEGORY_IDENTIFIER = "categoryIdentifier";
  @SerializedName(SERIALIZED_NAME_CATEGORY_IDENTIFIER)
  private String categoryIdentifier;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_REWARD_ENTRIES = "rewardEntries";
  @SerializedName(SERIALIZED_NAME_REWARD_ENTRIES)
  private Map<String, DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition> rewardEntries = new HashMap<>();

  public DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition() {
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition categoryHash(Integer categoryHash) {
    this.categoryHash = categoryHash;
    return this;
  }

  /**
   * Identifies the reward category. Only guaranteed unique within this specific component!
   * @return categoryHash
   */
  @javax.annotation.Nullable
  public Integer getCategoryHash() {
    return categoryHash;
  }

  public void setCategoryHash(Integer categoryHash) {
    this.categoryHash = categoryHash;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition categoryIdentifier(String categoryIdentifier) {
    this.categoryIdentifier = categoryIdentifier;
    return this;
  }

  /**
   * The string identifier for the category, if you want to use it for some end. Guaranteed unique within the specific component.
   * @return categoryIdentifier
   */
  @javax.annotation.Nullable
  public String getCategoryIdentifier() {
    return categoryIdentifier;
  }

  public void setCategoryIdentifier(String categoryIdentifier) {
    this.categoryIdentifier = categoryIdentifier;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Hopefully this is obvious by now.
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * If you want to use BNet&#39;s recommended order for rendering categories programmatically, use this value and compare it to other categories to determine the order in which they should be rendered. I don&#39;t feel great about putting this here, I won&#39;t lie.
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition rewardEntries(Map<String, DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition> rewardEntries) {
    this.rewardEntries = rewardEntries;
    return this;
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition putRewardEntriesItem(String key, DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition rewardEntriesItem) {
    if (this.rewardEntries == null) {
      this.rewardEntries = new HashMap<>();
    }
    this.rewardEntries.put(key, rewardEntriesItem);
    return this;
  }

  /**
   * If this milestone can provide rewards, this will define the sets of rewards that can be earned, the conditions under which they can be acquired, internal data that we&#39;ll use at runtime to determine whether you&#39;ve already earned or redeemed this set of rewards, and the category that this reward should be placed under.
   * @return rewardEntries
   */
  @javax.annotation.Nullable
  public Map<String, DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition> getRewardEntries() {
    return rewardEntries;
  }

  public void setRewardEntries(Map<String, DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition> rewardEntries) {
    this.rewardEntries = rewardEntries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition destinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition = (DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition) o;
    return Objects.equals(this.categoryHash, destinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.categoryHash) &&
        Objects.equals(this.categoryIdentifier, destinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.categoryIdentifier) &&
        Objects.equals(this.displayProperties, destinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.displayProperties) &&
        Objects.equals(this.order, destinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.order) &&
        Objects.equals(this.rewardEntries, destinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.rewardEntries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryHash, categoryIdentifier, displayProperties, order, rewardEntries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition {\n");
    sb.append("    categoryHash: ").append(toIndentedString(categoryHash)).append("\n");
    sb.append("    categoryIdentifier: ").append(toIndentedString(categoryIdentifier)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    rewardEntries: ").append(toIndentedString(rewardEntries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryHash");
    openapiFields.add("categoryIdentifier");
    openapiFields.add("displayProperties");
    openapiFields.add("order");
    openapiFields.add("rewardEntries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition is not found in the empty JSON string", DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryIdentifier") != null && !jsonObj.get("categoryIdentifier").isJsonNull()) && !jsonObj.get("categoryIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryIdentifier").toString()));
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition
   */
  public static DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

