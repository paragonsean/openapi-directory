/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a plug \&quot;Category\&quot; that is allowed to be plugged into a socket of this type.  This should be compared against a given plug item&#39;s DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item&#39;s category.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition {
  public static final String SERIALIZED_NAME_CATEGORY_HASH = "categoryHash";
  @SerializedName(SERIALIZED_NAME_CATEGORY_HASH)
  private Integer categoryHash;

  public static final String SERIALIZED_NAME_CATEGORY_IDENTIFIER = "categoryIdentifier";
  @SerializedName(SERIALIZED_NAME_CATEGORY_IDENTIFIER)
  private String categoryIdentifier;

  public static final String SERIALIZED_NAME_REINITIALIZATION_POSSIBLE_PLUG_HASHES = "reinitializationPossiblePlugHashes";
  @SerializedName(SERIALIZED_NAME_REINITIALIZATION_POSSIBLE_PLUG_HASHES)
  private List<Integer> reinitializationPossiblePlugHashes = new ArrayList<>();

  public DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition() {
  }

  public DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition categoryHash(Integer categoryHash) {
    this.categoryHash = categoryHash;
    return this;
  }

  /**
   * The hash identifier of the Plug Category to compare against the plug item&#39;s plug.plugCategoryHash.  Note that this does NOT relate to any Definition in itself, it is only used for comparison purposes.
   * @return categoryHash
   */
  @javax.annotation.Nullable
  public Integer getCategoryHash() {
    return categoryHash;
  }

  public void setCategoryHash(Integer categoryHash) {
    this.categoryHash = categoryHash;
  }


  public DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition categoryIdentifier(String categoryIdentifier) {
    this.categoryIdentifier = categoryIdentifier;
    return this;
  }

  /**
   * The string identifier for the category, which is here mostly for debug purposes.
   * @return categoryIdentifier
   */
  @javax.annotation.Nullable
  public String getCategoryIdentifier() {
    return categoryIdentifier;
  }

  public void setCategoryIdentifier(String categoryIdentifier) {
    this.categoryIdentifier = categoryIdentifier;
  }


  public DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition reinitializationPossiblePlugHashes(List<Integer> reinitializationPossiblePlugHashes) {
    this.reinitializationPossiblePlugHashes = reinitializationPossiblePlugHashes;
    return this;
  }

  public DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition addReinitializationPossiblePlugHashesItem(Integer reinitializationPossiblePlugHashesItem) {
    if (this.reinitializationPossiblePlugHashes == null) {
      this.reinitializationPossiblePlugHashes = new ArrayList<>();
    }
    this.reinitializationPossiblePlugHashes.add(reinitializationPossiblePlugHashesItem);
    return this;
  }

  /**
   * The list of all plug items (DestinyInventoryItemDefinition) that the socket may randomly be populated with when reinitialized.  Which ones you should actually show are determined by the plug being inserted into the socket, and the socket’s type.  When you inspect the plug that could go into a Masterwork Socket, look up the socket type of the socket being inspected and find the DestinySocketTypeDefinition.  Then, look at the Plugs that can fit in that socket. Find the Whitelist in the DestinySocketTypeDefinition that matches the plug item’s categoryhash.  That whitelist entry will potentially have a new “reinitializationPossiblePlugHashes” property.If it does, that means we know what it will roll if you try to insert this plug into this socket.
   * @return reinitializationPossiblePlugHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getReinitializationPossiblePlugHashes() {
    return reinitializationPossiblePlugHashes;
  }

  public void setReinitializationPossiblePlugHashes(List<Integer> reinitializationPossiblePlugHashes) {
    this.reinitializationPossiblePlugHashes = reinitializationPossiblePlugHashes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition destinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition = (DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition) o;
    return Objects.equals(this.categoryHash, destinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.categoryHash) &&
        Objects.equals(this.categoryIdentifier, destinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.categoryIdentifier) &&
        Objects.equals(this.reinitializationPossiblePlugHashes, destinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.reinitializationPossiblePlugHashes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryHash, categoryIdentifier, reinitializationPossiblePlugHashes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition {\n");
    sb.append("    categoryHash: ").append(toIndentedString(categoryHash)).append("\n");
    sb.append("    categoryIdentifier: ").append(toIndentedString(categoryIdentifier)).append("\n");
    sb.append("    reinitializationPossiblePlugHashes: ").append(toIndentedString(reinitializationPossiblePlugHashes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryHash");
    openapiFields.add("categoryIdentifier");
    openapiFields.add("reinitializationPossiblePlugHashes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition is not found in the empty JSON string", DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryIdentifier") != null && !jsonObj.get("categoryIdentifier").isJsonNull()) && !jsonObj.get("categoryIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryIdentifier").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reinitializationPossiblePlugHashes") != null && !jsonObj.get("reinitializationPossiblePlugHashes").isJsonNull() && !jsonObj.get("reinitializationPossiblePlugHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reinitializationPossiblePlugHashes` to be an array in the JSON string but got `%s`", jsonObj.get("reinitializationPossiblePlugHashes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition
   */
  public static DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

