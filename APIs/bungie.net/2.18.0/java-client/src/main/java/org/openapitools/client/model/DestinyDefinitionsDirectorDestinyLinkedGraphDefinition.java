/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyUnlockExpressionDefinition;
import org.openapitools.client.model.DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This describes links between the current graph and others, as well as when that link is relevant.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDirectorDestinyLinkedGraphDefinition {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LINKED_GRAPH_ID = "linkedGraphId";
  @SerializedName(SERIALIZED_NAME_LINKED_GRAPH_ID)
  private Integer linkedGraphId;

  public static final String SERIALIZED_NAME_LINKED_GRAPHS = "linkedGraphs";
  @SerializedName(SERIALIZED_NAME_LINKED_GRAPHS)
  private List<DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition> linkedGraphs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OVERVIEW = "overview";
  @SerializedName(SERIALIZED_NAME_OVERVIEW)
  private String overview;

  public static final String SERIALIZED_NAME_UNLOCK_EXPRESSION = "unlockExpression";
  @SerializedName(SERIALIZED_NAME_UNLOCK_EXPRESSION)
  private DestinyDefinitionsDestinyUnlockExpressionDefinition unlockExpression;

  public DestinyDefinitionsDirectorDestinyLinkedGraphDefinition() {
  }

  public DestinyDefinitionsDirectorDestinyLinkedGraphDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DestinyDefinitionsDirectorDestinyLinkedGraphDefinition linkedGraphId(Integer linkedGraphId) {
    this.linkedGraphId = linkedGraphId;
    return this;
  }

  /**
   * Get linkedGraphId
   * @return linkedGraphId
   */
  @javax.annotation.Nullable
  public Integer getLinkedGraphId() {
    return linkedGraphId;
  }

  public void setLinkedGraphId(Integer linkedGraphId) {
    this.linkedGraphId = linkedGraphId;
  }


  public DestinyDefinitionsDirectorDestinyLinkedGraphDefinition linkedGraphs(List<DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition> linkedGraphs) {
    this.linkedGraphs = linkedGraphs;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyLinkedGraphDefinition addLinkedGraphsItem(DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition linkedGraphsItem) {
    if (this.linkedGraphs == null) {
      this.linkedGraphs = new ArrayList<>();
    }
    this.linkedGraphs.add(linkedGraphsItem);
    return this;
  }

  /**
   * Get linkedGraphs
   * @return linkedGraphs
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition> getLinkedGraphs() {
    return linkedGraphs;
  }

  public void setLinkedGraphs(List<DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition> linkedGraphs) {
    this.linkedGraphs = linkedGraphs;
  }


  public DestinyDefinitionsDirectorDestinyLinkedGraphDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DestinyDefinitionsDirectorDestinyLinkedGraphDefinition overview(String overview) {
    this.overview = overview;
    return this;
  }

  /**
   * Get overview
   * @return overview
   */
  @javax.annotation.Nullable
  public String getOverview() {
    return overview;
  }

  public void setOverview(String overview) {
    this.overview = overview;
  }


  public DestinyDefinitionsDirectorDestinyLinkedGraphDefinition unlockExpression(DestinyDefinitionsDestinyUnlockExpressionDefinition unlockExpression) {
    this.unlockExpression = unlockExpression;
    return this;
  }

  /**
   * Get unlockExpression
   * @return unlockExpression
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsDestinyUnlockExpressionDefinition getUnlockExpression() {
    return unlockExpression;
  }

  public void setUnlockExpression(DestinyDefinitionsDestinyUnlockExpressionDefinition unlockExpression) {
    this.unlockExpression = unlockExpression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDirectorDestinyLinkedGraphDefinition destinyDefinitionsDirectorDestinyLinkedGraphDefinition = (DestinyDefinitionsDirectorDestinyLinkedGraphDefinition) o;
    return Objects.equals(this.description, destinyDefinitionsDirectorDestinyLinkedGraphDefinition.description) &&
        Objects.equals(this.linkedGraphId, destinyDefinitionsDirectorDestinyLinkedGraphDefinition.linkedGraphId) &&
        Objects.equals(this.linkedGraphs, destinyDefinitionsDirectorDestinyLinkedGraphDefinition.linkedGraphs) &&
        Objects.equals(this.name, destinyDefinitionsDirectorDestinyLinkedGraphDefinition.name) &&
        Objects.equals(this.overview, destinyDefinitionsDirectorDestinyLinkedGraphDefinition.overview) &&
        Objects.equals(this.unlockExpression, destinyDefinitionsDirectorDestinyLinkedGraphDefinition.unlockExpression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, linkedGraphId, linkedGraphs, name, overview, unlockExpression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDirectorDestinyLinkedGraphDefinition {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    linkedGraphId: ").append(toIndentedString(linkedGraphId)).append("\n");
    sb.append("    linkedGraphs: ").append(toIndentedString(linkedGraphs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    overview: ").append(toIndentedString(overview)).append("\n");
    sb.append("    unlockExpression: ").append(toIndentedString(unlockExpression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("linkedGraphId");
    openapiFields.add("linkedGraphs");
    openapiFields.add("name");
    openapiFields.add("overview");
    openapiFields.add("unlockExpression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDirectorDestinyLinkedGraphDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDirectorDestinyLinkedGraphDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDirectorDestinyLinkedGraphDefinition is not found in the empty JSON string", DestinyDefinitionsDirectorDestinyLinkedGraphDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDirectorDestinyLinkedGraphDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDirectorDestinyLinkedGraphDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("linkedGraphs") != null && !jsonObj.get("linkedGraphs").isJsonNull()) {
        JsonArray jsonArraylinkedGraphs = jsonObj.getAsJsonArray("linkedGraphs");
        if (jsonArraylinkedGraphs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("linkedGraphs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `linkedGraphs` to be an array in the JSON string but got `%s`", jsonObj.get("linkedGraphs").toString()));
          }

          // validate the optional field `linkedGraphs` (array)
          for (int i = 0; i < jsonArraylinkedGraphs.size(); i++) {
            DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition.validateJsonElement(jsonArraylinkedGraphs.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("overview") != null && !jsonObj.get("overview").isJsonNull()) && !jsonObj.get("overview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overview").toString()));
      }
      // validate the optional field `unlockExpression`
      if (jsonObj.get("unlockExpression") != null && !jsonObj.get("unlockExpression").isJsonNull()) {
        DestinyDefinitionsDestinyUnlockExpressionDefinition.validateJsonElement(jsonObj.get("unlockExpression"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDirectorDestinyLinkedGraphDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDirectorDestinyLinkedGraphDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDirectorDestinyLinkedGraphDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDirectorDestinyLinkedGraphDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDirectorDestinyLinkedGraphDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDirectorDestinyLinkedGraphDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDirectorDestinyLinkedGraphDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDirectorDestinyLinkedGraphDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDirectorDestinyLinkedGraphDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDirectorDestinyLinkedGraphDefinition
   */
  public static DestinyDefinitionsDirectorDestinyLinkedGraphDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDirectorDestinyLinkedGraphDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDirectorDestinyLinkedGraphDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

