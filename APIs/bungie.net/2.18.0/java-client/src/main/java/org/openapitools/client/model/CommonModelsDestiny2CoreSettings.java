/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommonModelsDestiny2CoreSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommonModelsDestiny2CoreSettings {
  public static final String SERIALIZED_NAME_ACTIVE_SEALS_ROOT_NODE_HASH = "activeSealsRootNodeHash";
  @SerializedName(SERIALIZED_NAME_ACTIVE_SEALS_ROOT_NODE_HASH)
  private Integer activeSealsRootNodeHash;

  public static final String SERIALIZED_NAME_ACTIVE_TRIUMPHS_ROOT_NODE_HASH = "activeTriumphsRootNodeHash";
  @SerializedName(SERIALIZED_NAME_ACTIVE_TRIUMPHS_ROOT_NODE_HASH)
  private Integer activeTriumphsRootNodeHash;

  public static final String SERIALIZED_NAME_AMMO_TYPE_HEAVY_ICON = "ammoTypeHeavyIcon";
  @SerializedName(SERIALIZED_NAME_AMMO_TYPE_HEAVY_ICON)
  private String ammoTypeHeavyIcon;

  public static final String SERIALIZED_NAME_AMMO_TYPE_PRIMARY_ICON = "ammoTypePrimaryIcon";
  @SerializedName(SERIALIZED_NAME_AMMO_TYPE_PRIMARY_ICON)
  private String ammoTypePrimaryIcon;

  public static final String SERIALIZED_NAME_AMMO_TYPE_SPECIAL_ICON = "ammoTypeSpecialIcon";
  @SerializedName(SERIALIZED_NAME_AMMO_TYPE_SPECIAL_ICON)
  private String ammoTypeSpecialIcon;

  public static final String SERIALIZED_NAME_BADGES_ROOT_NODE = "badgesRootNode";
  @SerializedName(SERIALIZED_NAME_BADGES_ROOT_NODE)
  private Integer badgesRootNode;

  public static final String SERIALIZED_NAME_COLLECTION_ROOT_NODE = "collectionRootNode";
  @SerializedName(SERIALIZED_NAME_COLLECTION_ROOT_NODE)
  private Integer collectionRootNode;

  public static final String SERIALIZED_NAME_CRAFTING_ROOT_NODE_HASH = "craftingRootNodeHash";
  @SerializedName(SERIALIZED_NAME_CRAFTING_ROOT_NODE_HASH)
  private Integer craftingRootNodeHash;

  public static final String SERIALIZED_NAME_CURRENT_RANK_PROGRESSION_HASHES = "currentRankProgressionHashes";
  @SerializedName(SERIALIZED_NAME_CURRENT_RANK_PROGRESSION_HASHES)
  private List<Integer> currentRankProgressionHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_SEASON_HASH = "currentSeasonHash";
  @SerializedName(SERIALIZED_NAME_CURRENT_SEASON_HASH)
  private Integer currentSeasonHash;

  public static final String SERIALIZED_NAME_CURRENT_SEASONAL_ARTIFACT_HASH = "currentSeasonalArtifactHash";
  @SerializedName(SERIALIZED_NAME_CURRENT_SEASONAL_ARTIFACT_HASH)
  private Integer currentSeasonalArtifactHash;

  public static final String SERIALIZED_NAME_EXOTIC_CATALYSTS_ROOT_NODE_HASH = "exoticCatalystsRootNodeHash";
  @SerializedName(SERIALIZED_NAME_EXOTIC_CATALYSTS_ROOT_NODE_HASH)
  private Integer exoticCatalystsRootNodeHash;

  public static final String SERIALIZED_NAME_FUTURE_SEASON_HASHES = "futureSeasonHashes";
  @SerializedName(SERIALIZED_NAME_FUTURE_SEASON_HASHES)
  private List<Integer> futureSeasonHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_GUARDIAN_RANK_CONSTANTS_HASH = "guardianRankConstantsHash";
  @SerializedName(SERIALIZED_NAME_GUARDIAN_RANK_CONSTANTS_HASH)
  private Integer guardianRankConstantsHash;

  public static final String SERIALIZED_NAME_GUARDIAN_RANKS_ROOT_NODE_HASH = "guardianRanksRootNodeHash";
  @SerializedName(SERIALIZED_NAME_GUARDIAN_RANKS_ROOT_NODE_HASH)
  private Integer guardianRanksRootNodeHash;

  public static final String SERIALIZED_NAME_INSERT_PLUG_FREE_BLOCKED_SOCKET_TYPE_HASHES = "insertPlugFreeBlockedSocketTypeHashes";
  @SerializedName(SERIALIZED_NAME_INSERT_PLUG_FREE_BLOCKED_SOCKET_TYPE_HASHES)
  private List<Integer> insertPlugFreeBlockedSocketTypeHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSERT_PLUG_FREE_PROTECTED_PLUG_ITEM_HASHES = "insertPlugFreeProtectedPlugItemHashes";
  @SerializedName(SERIALIZED_NAME_INSERT_PLUG_FREE_PROTECTED_PLUG_ITEM_HASHES)
  private List<Integer> insertPlugFreeProtectedPlugItemHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGACY_SEALS_ROOT_NODE_HASH = "legacySealsRootNodeHash";
  @SerializedName(SERIALIZED_NAME_LEGACY_SEALS_ROOT_NODE_HASH)
  private Integer legacySealsRootNodeHash;

  public static final String SERIALIZED_NAME_LEGACY_TRIUMPHS_ROOT_NODE_HASH = "legacyTriumphsRootNodeHash";
  @SerializedName(SERIALIZED_NAME_LEGACY_TRIUMPHS_ROOT_NODE_HASH)
  private Integer legacyTriumphsRootNodeHash;

  public static final String SERIALIZED_NAME_LOADOUT_CONSTANTS_HASH = "loadoutConstantsHash";
  @SerializedName(SERIALIZED_NAME_LOADOUT_CONSTANTS_HASH)
  private Integer loadoutConstantsHash;

  public static final String SERIALIZED_NAME_LORE_ROOT_NODE_HASH = "loreRootNodeHash";
  @SerializedName(SERIALIZED_NAME_LORE_ROOT_NODE_HASH)
  private Integer loreRootNodeHash;

  public static final String SERIALIZED_NAME_MEDALS_ROOT_NODE = "medalsRootNode";
  @SerializedName(SERIALIZED_NAME_MEDALS_ROOT_NODE)
  private Integer medalsRootNode;

  public static final String SERIALIZED_NAME_MEDALS_ROOT_NODE_HASH = "medalsRootNodeHash";
  @SerializedName(SERIALIZED_NAME_MEDALS_ROOT_NODE_HASH)
  private Integer medalsRootNodeHash;

  public static final String SERIALIZED_NAME_METRICS_ROOT_NODE = "metricsRootNode";
  @SerializedName(SERIALIZED_NAME_METRICS_ROOT_NODE)
  private Integer metricsRootNode;

  public static final String SERIALIZED_NAME_PAST_SEASON_HASHES = "pastSeasonHashes";
  @SerializedName(SERIALIZED_NAME_PAST_SEASON_HASHES)
  private List<Integer> pastSeasonHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECORDS_ROOT_NODE = "recordsRootNode";
  @SerializedName(SERIALIZED_NAME_RECORDS_ROOT_NODE)
  private Integer recordsRootNode;

  public static final String SERIALIZED_NAME_SEASONAL_CHALLENGES_PRESENTATION_NODE_HASH = "seasonalChallengesPresentationNodeHash";
  @SerializedName(SERIALIZED_NAME_SEASONAL_CHALLENGES_PRESENTATION_NODE_HASH)
  private Integer seasonalChallengesPresentationNodeHash;

  public static final String SERIALIZED_NAME_UNDISCOVERED_COLLECTIBLE_IMAGE = "undiscoveredCollectibleImage";
  @SerializedName(SERIALIZED_NAME_UNDISCOVERED_COLLECTIBLE_IMAGE)
  private String undiscoveredCollectibleImage;

  public CommonModelsDestiny2CoreSettings() {
  }

  public CommonModelsDestiny2CoreSettings activeSealsRootNodeHash(Integer activeSealsRootNodeHash) {
    this.activeSealsRootNodeHash = activeSealsRootNodeHash;
    return this;
  }

  /**
   * Get activeSealsRootNodeHash
   * @return activeSealsRootNodeHash
   */
  @javax.annotation.Nullable
  public Integer getActiveSealsRootNodeHash() {
    return activeSealsRootNodeHash;
  }

  public void setActiveSealsRootNodeHash(Integer activeSealsRootNodeHash) {
    this.activeSealsRootNodeHash = activeSealsRootNodeHash;
  }


  public CommonModelsDestiny2CoreSettings activeTriumphsRootNodeHash(Integer activeTriumphsRootNodeHash) {
    this.activeTriumphsRootNodeHash = activeTriumphsRootNodeHash;
    return this;
  }

  /**
   * Get activeTriumphsRootNodeHash
   * @return activeTriumphsRootNodeHash
   */
  @javax.annotation.Nullable
  public Integer getActiveTriumphsRootNodeHash() {
    return activeTriumphsRootNodeHash;
  }

  public void setActiveTriumphsRootNodeHash(Integer activeTriumphsRootNodeHash) {
    this.activeTriumphsRootNodeHash = activeTriumphsRootNodeHash;
  }


  public CommonModelsDestiny2CoreSettings ammoTypeHeavyIcon(String ammoTypeHeavyIcon) {
    this.ammoTypeHeavyIcon = ammoTypeHeavyIcon;
    return this;
  }

  /**
   * Get ammoTypeHeavyIcon
   * @return ammoTypeHeavyIcon
   */
  @javax.annotation.Nullable
  public String getAmmoTypeHeavyIcon() {
    return ammoTypeHeavyIcon;
  }

  public void setAmmoTypeHeavyIcon(String ammoTypeHeavyIcon) {
    this.ammoTypeHeavyIcon = ammoTypeHeavyIcon;
  }


  public CommonModelsDestiny2CoreSettings ammoTypePrimaryIcon(String ammoTypePrimaryIcon) {
    this.ammoTypePrimaryIcon = ammoTypePrimaryIcon;
    return this;
  }

  /**
   * Get ammoTypePrimaryIcon
   * @return ammoTypePrimaryIcon
   */
  @javax.annotation.Nullable
  public String getAmmoTypePrimaryIcon() {
    return ammoTypePrimaryIcon;
  }

  public void setAmmoTypePrimaryIcon(String ammoTypePrimaryIcon) {
    this.ammoTypePrimaryIcon = ammoTypePrimaryIcon;
  }


  public CommonModelsDestiny2CoreSettings ammoTypeSpecialIcon(String ammoTypeSpecialIcon) {
    this.ammoTypeSpecialIcon = ammoTypeSpecialIcon;
    return this;
  }

  /**
   * Get ammoTypeSpecialIcon
   * @return ammoTypeSpecialIcon
   */
  @javax.annotation.Nullable
  public String getAmmoTypeSpecialIcon() {
    return ammoTypeSpecialIcon;
  }

  public void setAmmoTypeSpecialIcon(String ammoTypeSpecialIcon) {
    this.ammoTypeSpecialIcon = ammoTypeSpecialIcon;
  }


  public CommonModelsDestiny2CoreSettings badgesRootNode(Integer badgesRootNode) {
    this.badgesRootNode = badgesRootNode;
    return this;
  }

  /**
   * Get badgesRootNode
   * @return badgesRootNode
   */
  @javax.annotation.Nullable
  public Integer getBadgesRootNode() {
    return badgesRootNode;
  }

  public void setBadgesRootNode(Integer badgesRootNode) {
    this.badgesRootNode = badgesRootNode;
  }


  public CommonModelsDestiny2CoreSettings collectionRootNode(Integer collectionRootNode) {
    this.collectionRootNode = collectionRootNode;
    return this;
  }

  /**
   * Get collectionRootNode
   * @return collectionRootNode
   */
  @javax.annotation.Nullable
  public Integer getCollectionRootNode() {
    return collectionRootNode;
  }

  public void setCollectionRootNode(Integer collectionRootNode) {
    this.collectionRootNode = collectionRootNode;
  }


  public CommonModelsDestiny2CoreSettings craftingRootNodeHash(Integer craftingRootNodeHash) {
    this.craftingRootNodeHash = craftingRootNodeHash;
    return this;
  }

  /**
   * Get craftingRootNodeHash
   * @return craftingRootNodeHash
   */
  @javax.annotation.Nullable
  public Integer getCraftingRootNodeHash() {
    return craftingRootNodeHash;
  }

  public void setCraftingRootNodeHash(Integer craftingRootNodeHash) {
    this.craftingRootNodeHash = craftingRootNodeHash;
  }


  public CommonModelsDestiny2CoreSettings currentRankProgressionHashes(List<Integer> currentRankProgressionHashes) {
    this.currentRankProgressionHashes = currentRankProgressionHashes;
    return this;
  }

  public CommonModelsDestiny2CoreSettings addCurrentRankProgressionHashesItem(Integer currentRankProgressionHashesItem) {
    if (this.currentRankProgressionHashes == null) {
      this.currentRankProgressionHashes = new ArrayList<>();
    }
    this.currentRankProgressionHashes.add(currentRankProgressionHashesItem);
    return this;
  }

  /**
   * Get currentRankProgressionHashes
   * @return currentRankProgressionHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getCurrentRankProgressionHashes() {
    return currentRankProgressionHashes;
  }

  public void setCurrentRankProgressionHashes(List<Integer> currentRankProgressionHashes) {
    this.currentRankProgressionHashes = currentRankProgressionHashes;
  }


  public CommonModelsDestiny2CoreSettings currentSeasonHash(Integer currentSeasonHash) {
    this.currentSeasonHash = currentSeasonHash;
    return this;
  }

  /**
   * Get currentSeasonHash
   * @return currentSeasonHash
   */
  @javax.annotation.Nullable
  public Integer getCurrentSeasonHash() {
    return currentSeasonHash;
  }

  public void setCurrentSeasonHash(Integer currentSeasonHash) {
    this.currentSeasonHash = currentSeasonHash;
  }


  public CommonModelsDestiny2CoreSettings currentSeasonalArtifactHash(Integer currentSeasonalArtifactHash) {
    this.currentSeasonalArtifactHash = currentSeasonalArtifactHash;
    return this;
  }

  /**
   * Get currentSeasonalArtifactHash
   * @return currentSeasonalArtifactHash
   */
  @javax.annotation.Nullable
  public Integer getCurrentSeasonalArtifactHash() {
    return currentSeasonalArtifactHash;
  }

  public void setCurrentSeasonalArtifactHash(Integer currentSeasonalArtifactHash) {
    this.currentSeasonalArtifactHash = currentSeasonalArtifactHash;
  }


  public CommonModelsDestiny2CoreSettings exoticCatalystsRootNodeHash(Integer exoticCatalystsRootNodeHash) {
    this.exoticCatalystsRootNodeHash = exoticCatalystsRootNodeHash;
    return this;
  }

  /**
   * Get exoticCatalystsRootNodeHash
   * @return exoticCatalystsRootNodeHash
   */
  @javax.annotation.Nullable
  public Integer getExoticCatalystsRootNodeHash() {
    return exoticCatalystsRootNodeHash;
  }

  public void setExoticCatalystsRootNodeHash(Integer exoticCatalystsRootNodeHash) {
    this.exoticCatalystsRootNodeHash = exoticCatalystsRootNodeHash;
  }


  public CommonModelsDestiny2CoreSettings futureSeasonHashes(List<Integer> futureSeasonHashes) {
    this.futureSeasonHashes = futureSeasonHashes;
    return this;
  }

  public CommonModelsDestiny2CoreSettings addFutureSeasonHashesItem(Integer futureSeasonHashesItem) {
    if (this.futureSeasonHashes == null) {
      this.futureSeasonHashes = new ArrayList<>();
    }
    this.futureSeasonHashes.add(futureSeasonHashesItem);
    return this;
  }

  /**
   * Get futureSeasonHashes
   * @return futureSeasonHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getFutureSeasonHashes() {
    return futureSeasonHashes;
  }

  public void setFutureSeasonHashes(List<Integer> futureSeasonHashes) {
    this.futureSeasonHashes = futureSeasonHashes;
  }


  public CommonModelsDestiny2CoreSettings guardianRankConstantsHash(Integer guardianRankConstantsHash) {
    this.guardianRankConstantsHash = guardianRankConstantsHash;
    return this;
  }

  /**
   * Get guardianRankConstantsHash
   * @return guardianRankConstantsHash
   */
  @javax.annotation.Nullable
  public Integer getGuardianRankConstantsHash() {
    return guardianRankConstantsHash;
  }

  public void setGuardianRankConstantsHash(Integer guardianRankConstantsHash) {
    this.guardianRankConstantsHash = guardianRankConstantsHash;
  }


  public CommonModelsDestiny2CoreSettings guardianRanksRootNodeHash(Integer guardianRanksRootNodeHash) {
    this.guardianRanksRootNodeHash = guardianRanksRootNodeHash;
    return this;
  }

  /**
   * Get guardianRanksRootNodeHash
   * @return guardianRanksRootNodeHash
   */
  @javax.annotation.Nullable
  public Integer getGuardianRanksRootNodeHash() {
    return guardianRanksRootNodeHash;
  }

  public void setGuardianRanksRootNodeHash(Integer guardianRanksRootNodeHash) {
    this.guardianRanksRootNodeHash = guardianRanksRootNodeHash;
  }


  public CommonModelsDestiny2CoreSettings insertPlugFreeBlockedSocketTypeHashes(List<Integer> insertPlugFreeBlockedSocketTypeHashes) {
    this.insertPlugFreeBlockedSocketTypeHashes = insertPlugFreeBlockedSocketTypeHashes;
    return this;
  }

  public CommonModelsDestiny2CoreSettings addInsertPlugFreeBlockedSocketTypeHashesItem(Integer insertPlugFreeBlockedSocketTypeHashesItem) {
    if (this.insertPlugFreeBlockedSocketTypeHashes == null) {
      this.insertPlugFreeBlockedSocketTypeHashes = new ArrayList<>();
    }
    this.insertPlugFreeBlockedSocketTypeHashes.add(insertPlugFreeBlockedSocketTypeHashesItem);
    return this;
  }

  /**
   * Get insertPlugFreeBlockedSocketTypeHashes
   * @return insertPlugFreeBlockedSocketTypeHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getInsertPlugFreeBlockedSocketTypeHashes() {
    return insertPlugFreeBlockedSocketTypeHashes;
  }

  public void setInsertPlugFreeBlockedSocketTypeHashes(List<Integer> insertPlugFreeBlockedSocketTypeHashes) {
    this.insertPlugFreeBlockedSocketTypeHashes = insertPlugFreeBlockedSocketTypeHashes;
  }


  public CommonModelsDestiny2CoreSettings insertPlugFreeProtectedPlugItemHashes(List<Integer> insertPlugFreeProtectedPlugItemHashes) {
    this.insertPlugFreeProtectedPlugItemHashes = insertPlugFreeProtectedPlugItemHashes;
    return this;
  }

  public CommonModelsDestiny2CoreSettings addInsertPlugFreeProtectedPlugItemHashesItem(Integer insertPlugFreeProtectedPlugItemHashesItem) {
    if (this.insertPlugFreeProtectedPlugItemHashes == null) {
      this.insertPlugFreeProtectedPlugItemHashes = new ArrayList<>();
    }
    this.insertPlugFreeProtectedPlugItemHashes.add(insertPlugFreeProtectedPlugItemHashesItem);
    return this;
  }

  /**
   * Get insertPlugFreeProtectedPlugItemHashes
   * @return insertPlugFreeProtectedPlugItemHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getInsertPlugFreeProtectedPlugItemHashes() {
    return insertPlugFreeProtectedPlugItemHashes;
  }

  public void setInsertPlugFreeProtectedPlugItemHashes(List<Integer> insertPlugFreeProtectedPlugItemHashes) {
    this.insertPlugFreeProtectedPlugItemHashes = insertPlugFreeProtectedPlugItemHashes;
  }


  public CommonModelsDestiny2CoreSettings legacySealsRootNodeHash(Integer legacySealsRootNodeHash) {
    this.legacySealsRootNodeHash = legacySealsRootNodeHash;
    return this;
  }

  /**
   * Get legacySealsRootNodeHash
   * @return legacySealsRootNodeHash
   */
  @javax.annotation.Nullable
  public Integer getLegacySealsRootNodeHash() {
    return legacySealsRootNodeHash;
  }

  public void setLegacySealsRootNodeHash(Integer legacySealsRootNodeHash) {
    this.legacySealsRootNodeHash = legacySealsRootNodeHash;
  }


  public CommonModelsDestiny2CoreSettings legacyTriumphsRootNodeHash(Integer legacyTriumphsRootNodeHash) {
    this.legacyTriumphsRootNodeHash = legacyTriumphsRootNodeHash;
    return this;
  }

  /**
   * Get legacyTriumphsRootNodeHash
   * @return legacyTriumphsRootNodeHash
   */
  @javax.annotation.Nullable
  public Integer getLegacyTriumphsRootNodeHash() {
    return legacyTriumphsRootNodeHash;
  }

  public void setLegacyTriumphsRootNodeHash(Integer legacyTriumphsRootNodeHash) {
    this.legacyTriumphsRootNodeHash = legacyTriumphsRootNodeHash;
  }


  public CommonModelsDestiny2CoreSettings loadoutConstantsHash(Integer loadoutConstantsHash) {
    this.loadoutConstantsHash = loadoutConstantsHash;
    return this;
  }

  /**
   * Get loadoutConstantsHash
   * @return loadoutConstantsHash
   */
  @javax.annotation.Nullable
  public Integer getLoadoutConstantsHash() {
    return loadoutConstantsHash;
  }

  public void setLoadoutConstantsHash(Integer loadoutConstantsHash) {
    this.loadoutConstantsHash = loadoutConstantsHash;
  }


  public CommonModelsDestiny2CoreSettings loreRootNodeHash(Integer loreRootNodeHash) {
    this.loreRootNodeHash = loreRootNodeHash;
    return this;
  }

  /**
   * Get loreRootNodeHash
   * @return loreRootNodeHash
   */
  @javax.annotation.Nullable
  public Integer getLoreRootNodeHash() {
    return loreRootNodeHash;
  }

  public void setLoreRootNodeHash(Integer loreRootNodeHash) {
    this.loreRootNodeHash = loreRootNodeHash;
  }


  public CommonModelsDestiny2CoreSettings medalsRootNode(Integer medalsRootNode) {
    this.medalsRootNode = medalsRootNode;
    return this;
  }

  /**
   * Get medalsRootNode
   * @return medalsRootNode
   */
  @javax.annotation.Nullable
  public Integer getMedalsRootNode() {
    return medalsRootNode;
  }

  public void setMedalsRootNode(Integer medalsRootNode) {
    this.medalsRootNode = medalsRootNode;
  }


  public CommonModelsDestiny2CoreSettings medalsRootNodeHash(Integer medalsRootNodeHash) {
    this.medalsRootNodeHash = medalsRootNodeHash;
    return this;
  }

  /**
   * Get medalsRootNodeHash
   * @return medalsRootNodeHash
   */
  @javax.annotation.Nullable
  public Integer getMedalsRootNodeHash() {
    return medalsRootNodeHash;
  }

  public void setMedalsRootNodeHash(Integer medalsRootNodeHash) {
    this.medalsRootNodeHash = medalsRootNodeHash;
  }


  public CommonModelsDestiny2CoreSettings metricsRootNode(Integer metricsRootNode) {
    this.metricsRootNode = metricsRootNode;
    return this;
  }

  /**
   * Get metricsRootNode
   * @return metricsRootNode
   */
  @javax.annotation.Nullable
  public Integer getMetricsRootNode() {
    return metricsRootNode;
  }

  public void setMetricsRootNode(Integer metricsRootNode) {
    this.metricsRootNode = metricsRootNode;
  }


  public CommonModelsDestiny2CoreSettings pastSeasonHashes(List<Integer> pastSeasonHashes) {
    this.pastSeasonHashes = pastSeasonHashes;
    return this;
  }

  public CommonModelsDestiny2CoreSettings addPastSeasonHashesItem(Integer pastSeasonHashesItem) {
    if (this.pastSeasonHashes == null) {
      this.pastSeasonHashes = new ArrayList<>();
    }
    this.pastSeasonHashes.add(pastSeasonHashesItem);
    return this;
  }

  /**
   * Get pastSeasonHashes
   * @return pastSeasonHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getPastSeasonHashes() {
    return pastSeasonHashes;
  }

  public void setPastSeasonHashes(List<Integer> pastSeasonHashes) {
    this.pastSeasonHashes = pastSeasonHashes;
  }


  public CommonModelsDestiny2CoreSettings recordsRootNode(Integer recordsRootNode) {
    this.recordsRootNode = recordsRootNode;
    return this;
  }

  /**
   * Get recordsRootNode
   * @return recordsRootNode
   */
  @javax.annotation.Nullable
  public Integer getRecordsRootNode() {
    return recordsRootNode;
  }

  public void setRecordsRootNode(Integer recordsRootNode) {
    this.recordsRootNode = recordsRootNode;
  }


  public CommonModelsDestiny2CoreSettings seasonalChallengesPresentationNodeHash(Integer seasonalChallengesPresentationNodeHash) {
    this.seasonalChallengesPresentationNodeHash = seasonalChallengesPresentationNodeHash;
    return this;
  }

  /**
   * Get seasonalChallengesPresentationNodeHash
   * @return seasonalChallengesPresentationNodeHash
   */
  @javax.annotation.Nullable
  public Integer getSeasonalChallengesPresentationNodeHash() {
    return seasonalChallengesPresentationNodeHash;
  }

  public void setSeasonalChallengesPresentationNodeHash(Integer seasonalChallengesPresentationNodeHash) {
    this.seasonalChallengesPresentationNodeHash = seasonalChallengesPresentationNodeHash;
  }


  public CommonModelsDestiny2CoreSettings undiscoveredCollectibleImage(String undiscoveredCollectibleImage) {
    this.undiscoveredCollectibleImage = undiscoveredCollectibleImage;
    return this;
  }

  /**
   * Get undiscoveredCollectibleImage
   * @return undiscoveredCollectibleImage
   */
  @javax.annotation.Nullable
  public String getUndiscoveredCollectibleImage() {
    return undiscoveredCollectibleImage;
  }

  public void setUndiscoveredCollectibleImage(String undiscoveredCollectibleImage) {
    this.undiscoveredCollectibleImage = undiscoveredCollectibleImage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonModelsDestiny2CoreSettings commonModelsDestiny2CoreSettings = (CommonModelsDestiny2CoreSettings) o;
    return Objects.equals(this.activeSealsRootNodeHash, commonModelsDestiny2CoreSettings.activeSealsRootNodeHash) &&
        Objects.equals(this.activeTriumphsRootNodeHash, commonModelsDestiny2CoreSettings.activeTriumphsRootNodeHash) &&
        Objects.equals(this.ammoTypeHeavyIcon, commonModelsDestiny2CoreSettings.ammoTypeHeavyIcon) &&
        Objects.equals(this.ammoTypePrimaryIcon, commonModelsDestiny2CoreSettings.ammoTypePrimaryIcon) &&
        Objects.equals(this.ammoTypeSpecialIcon, commonModelsDestiny2CoreSettings.ammoTypeSpecialIcon) &&
        Objects.equals(this.badgesRootNode, commonModelsDestiny2CoreSettings.badgesRootNode) &&
        Objects.equals(this.collectionRootNode, commonModelsDestiny2CoreSettings.collectionRootNode) &&
        Objects.equals(this.craftingRootNodeHash, commonModelsDestiny2CoreSettings.craftingRootNodeHash) &&
        Objects.equals(this.currentRankProgressionHashes, commonModelsDestiny2CoreSettings.currentRankProgressionHashes) &&
        Objects.equals(this.currentSeasonHash, commonModelsDestiny2CoreSettings.currentSeasonHash) &&
        Objects.equals(this.currentSeasonalArtifactHash, commonModelsDestiny2CoreSettings.currentSeasonalArtifactHash) &&
        Objects.equals(this.exoticCatalystsRootNodeHash, commonModelsDestiny2CoreSettings.exoticCatalystsRootNodeHash) &&
        Objects.equals(this.futureSeasonHashes, commonModelsDestiny2CoreSettings.futureSeasonHashes) &&
        Objects.equals(this.guardianRankConstantsHash, commonModelsDestiny2CoreSettings.guardianRankConstantsHash) &&
        Objects.equals(this.guardianRanksRootNodeHash, commonModelsDestiny2CoreSettings.guardianRanksRootNodeHash) &&
        Objects.equals(this.insertPlugFreeBlockedSocketTypeHashes, commonModelsDestiny2CoreSettings.insertPlugFreeBlockedSocketTypeHashes) &&
        Objects.equals(this.insertPlugFreeProtectedPlugItemHashes, commonModelsDestiny2CoreSettings.insertPlugFreeProtectedPlugItemHashes) &&
        Objects.equals(this.legacySealsRootNodeHash, commonModelsDestiny2CoreSettings.legacySealsRootNodeHash) &&
        Objects.equals(this.legacyTriumphsRootNodeHash, commonModelsDestiny2CoreSettings.legacyTriumphsRootNodeHash) &&
        Objects.equals(this.loadoutConstantsHash, commonModelsDestiny2CoreSettings.loadoutConstantsHash) &&
        Objects.equals(this.loreRootNodeHash, commonModelsDestiny2CoreSettings.loreRootNodeHash) &&
        Objects.equals(this.medalsRootNode, commonModelsDestiny2CoreSettings.medalsRootNode) &&
        Objects.equals(this.medalsRootNodeHash, commonModelsDestiny2CoreSettings.medalsRootNodeHash) &&
        Objects.equals(this.metricsRootNode, commonModelsDestiny2CoreSettings.metricsRootNode) &&
        Objects.equals(this.pastSeasonHashes, commonModelsDestiny2CoreSettings.pastSeasonHashes) &&
        Objects.equals(this.recordsRootNode, commonModelsDestiny2CoreSettings.recordsRootNode) &&
        Objects.equals(this.seasonalChallengesPresentationNodeHash, commonModelsDestiny2CoreSettings.seasonalChallengesPresentationNodeHash) &&
        Objects.equals(this.undiscoveredCollectibleImage, commonModelsDestiny2CoreSettings.undiscoveredCollectibleImage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeSealsRootNodeHash, activeTriumphsRootNodeHash, ammoTypeHeavyIcon, ammoTypePrimaryIcon, ammoTypeSpecialIcon, badgesRootNode, collectionRootNode, craftingRootNodeHash, currentRankProgressionHashes, currentSeasonHash, currentSeasonalArtifactHash, exoticCatalystsRootNodeHash, futureSeasonHashes, guardianRankConstantsHash, guardianRanksRootNodeHash, insertPlugFreeBlockedSocketTypeHashes, insertPlugFreeProtectedPlugItemHashes, legacySealsRootNodeHash, legacyTriumphsRootNodeHash, loadoutConstantsHash, loreRootNodeHash, medalsRootNode, medalsRootNodeHash, metricsRootNode, pastSeasonHashes, recordsRootNode, seasonalChallengesPresentationNodeHash, undiscoveredCollectibleImage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonModelsDestiny2CoreSettings {\n");
    sb.append("    activeSealsRootNodeHash: ").append(toIndentedString(activeSealsRootNodeHash)).append("\n");
    sb.append("    activeTriumphsRootNodeHash: ").append(toIndentedString(activeTriumphsRootNodeHash)).append("\n");
    sb.append("    ammoTypeHeavyIcon: ").append(toIndentedString(ammoTypeHeavyIcon)).append("\n");
    sb.append("    ammoTypePrimaryIcon: ").append(toIndentedString(ammoTypePrimaryIcon)).append("\n");
    sb.append("    ammoTypeSpecialIcon: ").append(toIndentedString(ammoTypeSpecialIcon)).append("\n");
    sb.append("    badgesRootNode: ").append(toIndentedString(badgesRootNode)).append("\n");
    sb.append("    collectionRootNode: ").append(toIndentedString(collectionRootNode)).append("\n");
    sb.append("    craftingRootNodeHash: ").append(toIndentedString(craftingRootNodeHash)).append("\n");
    sb.append("    currentRankProgressionHashes: ").append(toIndentedString(currentRankProgressionHashes)).append("\n");
    sb.append("    currentSeasonHash: ").append(toIndentedString(currentSeasonHash)).append("\n");
    sb.append("    currentSeasonalArtifactHash: ").append(toIndentedString(currentSeasonalArtifactHash)).append("\n");
    sb.append("    exoticCatalystsRootNodeHash: ").append(toIndentedString(exoticCatalystsRootNodeHash)).append("\n");
    sb.append("    futureSeasonHashes: ").append(toIndentedString(futureSeasonHashes)).append("\n");
    sb.append("    guardianRankConstantsHash: ").append(toIndentedString(guardianRankConstantsHash)).append("\n");
    sb.append("    guardianRanksRootNodeHash: ").append(toIndentedString(guardianRanksRootNodeHash)).append("\n");
    sb.append("    insertPlugFreeBlockedSocketTypeHashes: ").append(toIndentedString(insertPlugFreeBlockedSocketTypeHashes)).append("\n");
    sb.append("    insertPlugFreeProtectedPlugItemHashes: ").append(toIndentedString(insertPlugFreeProtectedPlugItemHashes)).append("\n");
    sb.append("    legacySealsRootNodeHash: ").append(toIndentedString(legacySealsRootNodeHash)).append("\n");
    sb.append("    legacyTriumphsRootNodeHash: ").append(toIndentedString(legacyTriumphsRootNodeHash)).append("\n");
    sb.append("    loadoutConstantsHash: ").append(toIndentedString(loadoutConstantsHash)).append("\n");
    sb.append("    loreRootNodeHash: ").append(toIndentedString(loreRootNodeHash)).append("\n");
    sb.append("    medalsRootNode: ").append(toIndentedString(medalsRootNode)).append("\n");
    sb.append("    medalsRootNodeHash: ").append(toIndentedString(medalsRootNodeHash)).append("\n");
    sb.append("    metricsRootNode: ").append(toIndentedString(metricsRootNode)).append("\n");
    sb.append("    pastSeasonHashes: ").append(toIndentedString(pastSeasonHashes)).append("\n");
    sb.append("    recordsRootNode: ").append(toIndentedString(recordsRootNode)).append("\n");
    sb.append("    seasonalChallengesPresentationNodeHash: ").append(toIndentedString(seasonalChallengesPresentationNodeHash)).append("\n");
    sb.append("    undiscoveredCollectibleImage: ").append(toIndentedString(undiscoveredCollectibleImage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeSealsRootNodeHash");
    openapiFields.add("activeTriumphsRootNodeHash");
    openapiFields.add("ammoTypeHeavyIcon");
    openapiFields.add("ammoTypePrimaryIcon");
    openapiFields.add("ammoTypeSpecialIcon");
    openapiFields.add("badgesRootNode");
    openapiFields.add("collectionRootNode");
    openapiFields.add("craftingRootNodeHash");
    openapiFields.add("currentRankProgressionHashes");
    openapiFields.add("currentSeasonHash");
    openapiFields.add("currentSeasonalArtifactHash");
    openapiFields.add("exoticCatalystsRootNodeHash");
    openapiFields.add("futureSeasonHashes");
    openapiFields.add("guardianRankConstantsHash");
    openapiFields.add("guardianRanksRootNodeHash");
    openapiFields.add("insertPlugFreeBlockedSocketTypeHashes");
    openapiFields.add("insertPlugFreeProtectedPlugItemHashes");
    openapiFields.add("legacySealsRootNodeHash");
    openapiFields.add("legacyTriumphsRootNodeHash");
    openapiFields.add("loadoutConstantsHash");
    openapiFields.add("loreRootNodeHash");
    openapiFields.add("medalsRootNode");
    openapiFields.add("medalsRootNodeHash");
    openapiFields.add("metricsRootNode");
    openapiFields.add("pastSeasonHashes");
    openapiFields.add("recordsRootNode");
    openapiFields.add("seasonalChallengesPresentationNodeHash");
    openapiFields.add("undiscoveredCollectibleImage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommonModelsDestiny2CoreSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommonModelsDestiny2CoreSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonModelsDestiny2CoreSettings is not found in the empty JSON string", CommonModelsDestiny2CoreSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommonModelsDestiny2CoreSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonModelsDestiny2CoreSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ammoTypeHeavyIcon") != null && !jsonObj.get("ammoTypeHeavyIcon").isJsonNull()) && !jsonObj.get("ammoTypeHeavyIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ammoTypeHeavyIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ammoTypeHeavyIcon").toString()));
      }
      if ((jsonObj.get("ammoTypePrimaryIcon") != null && !jsonObj.get("ammoTypePrimaryIcon").isJsonNull()) && !jsonObj.get("ammoTypePrimaryIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ammoTypePrimaryIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ammoTypePrimaryIcon").toString()));
      }
      if ((jsonObj.get("ammoTypeSpecialIcon") != null && !jsonObj.get("ammoTypeSpecialIcon").isJsonNull()) && !jsonObj.get("ammoTypeSpecialIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ammoTypeSpecialIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ammoTypeSpecialIcon").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("currentRankProgressionHashes") != null && !jsonObj.get("currentRankProgressionHashes").isJsonNull() && !jsonObj.get("currentRankProgressionHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentRankProgressionHashes` to be an array in the JSON string but got `%s`", jsonObj.get("currentRankProgressionHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("futureSeasonHashes") != null && !jsonObj.get("futureSeasonHashes").isJsonNull() && !jsonObj.get("futureSeasonHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `futureSeasonHashes` to be an array in the JSON string but got `%s`", jsonObj.get("futureSeasonHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("insertPlugFreeBlockedSocketTypeHashes") != null && !jsonObj.get("insertPlugFreeBlockedSocketTypeHashes").isJsonNull() && !jsonObj.get("insertPlugFreeBlockedSocketTypeHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `insertPlugFreeBlockedSocketTypeHashes` to be an array in the JSON string but got `%s`", jsonObj.get("insertPlugFreeBlockedSocketTypeHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("insertPlugFreeProtectedPlugItemHashes") != null && !jsonObj.get("insertPlugFreeProtectedPlugItemHashes").isJsonNull() && !jsonObj.get("insertPlugFreeProtectedPlugItemHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `insertPlugFreeProtectedPlugItemHashes` to be an array in the JSON string but got `%s`", jsonObj.get("insertPlugFreeProtectedPlugItemHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pastSeasonHashes") != null && !jsonObj.get("pastSeasonHashes").isJsonNull() && !jsonObj.get("pastSeasonHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pastSeasonHashes` to be an array in the JSON string but got `%s`", jsonObj.get("pastSeasonHashes").toString()));
      }
      if ((jsonObj.get("undiscoveredCollectibleImage") != null && !jsonObj.get("undiscoveredCollectibleImage").isJsonNull()) && !jsonObj.get("undiscoveredCollectibleImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `undiscoveredCollectibleImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("undiscoveredCollectibleImage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonModelsDestiny2CoreSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonModelsDestiny2CoreSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonModelsDestiny2CoreSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonModelsDestiny2CoreSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonModelsDestiny2CoreSettings>() {
           @Override
           public void write(JsonWriter out, CommonModelsDestiny2CoreSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonModelsDestiny2CoreSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommonModelsDestiny2CoreSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommonModelsDestiny2CoreSettings
   * @throws IOException if the JSON string is invalid with respect to CommonModelsDestiny2CoreSettings
   */
  public static CommonModelsDestiny2CoreSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonModelsDestiny2CoreSettings.class);
  }

  /**
   * Convert an instance of CommonModelsDestiny2CoreSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

