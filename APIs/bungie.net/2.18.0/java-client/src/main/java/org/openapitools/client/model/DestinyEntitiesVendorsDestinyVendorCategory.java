/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the category and items currently sold in that category.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyEntitiesVendorsDestinyVendorCategory {
  public static final String SERIALIZED_NAME_DISPLAY_CATEGORY_INDEX = "displayCategoryIndex";
  @SerializedName(SERIALIZED_NAME_DISPLAY_CATEGORY_INDEX)
  private Integer displayCategoryIndex;

  public static final String SERIALIZED_NAME_ITEM_INDEXES = "itemIndexes";
  @SerializedName(SERIALIZED_NAME_ITEM_INDEXES)
  private List<Integer> itemIndexes = new ArrayList<>();

  public DestinyEntitiesVendorsDestinyVendorCategory() {
  }

  public DestinyEntitiesVendorsDestinyVendorCategory displayCategoryIndex(Integer displayCategoryIndex) {
    this.displayCategoryIndex = displayCategoryIndex;
    return this;
  }

  /**
   * An index into the DestinyVendorDefinition.displayCategories property, so you can grab the display data for this category.
   * @return displayCategoryIndex
   */
  @javax.annotation.Nullable
  public Integer getDisplayCategoryIndex() {
    return displayCategoryIndex;
  }

  public void setDisplayCategoryIndex(Integer displayCategoryIndex) {
    this.displayCategoryIndex = displayCategoryIndex;
  }


  public DestinyEntitiesVendorsDestinyVendorCategory itemIndexes(List<Integer> itemIndexes) {
    this.itemIndexes = itemIndexes;
    return this;
  }

  public DestinyEntitiesVendorsDestinyVendorCategory addItemIndexesItem(Integer itemIndexesItem) {
    if (this.itemIndexes == null) {
      this.itemIndexes = new ArrayList<>();
    }
    this.itemIndexes.add(itemIndexesItem);
    return this;
  }

  /**
   * An ordered list of indexes into items being sold in this category (DestinyVendorDefinition.itemList) which will contain more information about the items being sold themselves. Can also be used to index into DestinyVendorSaleItemComponent data, if you asked for that data to be returned.
   * @return itemIndexes
   */
  @javax.annotation.Nullable
  public List<Integer> getItemIndexes() {
    return itemIndexes;
  }

  public void setItemIndexes(List<Integer> itemIndexes) {
    this.itemIndexes = itemIndexes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesVendorsDestinyVendorCategory destinyEntitiesVendorsDestinyVendorCategory = (DestinyEntitiesVendorsDestinyVendorCategory) o;
    return Objects.equals(this.displayCategoryIndex, destinyEntitiesVendorsDestinyVendorCategory.displayCategoryIndex) &&
        Objects.equals(this.itemIndexes, destinyEntitiesVendorsDestinyVendorCategory.itemIndexes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayCategoryIndex, itemIndexes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesVendorsDestinyVendorCategory {\n");
    sb.append("    displayCategoryIndex: ").append(toIndentedString(displayCategoryIndex)).append("\n");
    sb.append("    itemIndexes: ").append(toIndentedString(itemIndexes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayCategoryIndex");
    openapiFields.add("itemIndexes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyEntitiesVendorsDestinyVendorCategory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyEntitiesVendorsDestinyVendorCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyEntitiesVendorsDestinyVendorCategory is not found in the empty JSON string", DestinyEntitiesVendorsDestinyVendorCategory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyEntitiesVendorsDestinyVendorCategory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyEntitiesVendorsDestinyVendorCategory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("itemIndexes") != null && !jsonObj.get("itemIndexes").isJsonNull() && !jsonObj.get("itemIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("itemIndexes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyEntitiesVendorsDestinyVendorCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyEntitiesVendorsDestinyVendorCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyEntitiesVendorsDestinyVendorCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyEntitiesVendorsDestinyVendorCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyEntitiesVendorsDestinyVendorCategory>() {
           @Override
           public void write(JsonWriter out, DestinyEntitiesVendorsDestinyVendorCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyEntitiesVendorsDestinyVendorCategory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyEntitiesVendorsDestinyVendorCategory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyEntitiesVendorsDestinyVendorCategory
   * @throws IOException if the JSON string is invalid with respect to DestinyEntitiesVendorsDestinyVendorCategory
   */
  public static DestinyEntitiesVendorsDestinyVendorCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyEntitiesVendorsDestinyVendorCategory.class);
  }

  /**
   * Convert an instance of DestinyEntitiesVendorsDestinyVendorCategory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

