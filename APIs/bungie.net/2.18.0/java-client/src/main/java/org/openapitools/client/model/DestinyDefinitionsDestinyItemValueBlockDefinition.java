/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDestinyItemQuantity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This defines an item&#39;s \&quot;Value\&quot;. Unfortunately, this appears to be used in different ways depending on the way that the item itself is used.  For items being sold at a Vendor, this is the default \&quot;sale price\&quot; of the item. These days, the vendor itself almost always sets the price, but it still possible for the price to fall back to this value. For quests, it is a preview of rewards you can gain by completing the quest. For dummy items, if the itemValue refers to an Emblem, it is the emblem that should be shown as the reward. (jeez louise)  It will likely be used in a number of other ways in the future, it appears to be a bucket where they put arbitrary items and quantities into the item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemValueBlockDefinition {
  public static final String SERIALIZED_NAME_ITEM_VALUE = "itemValue";
  @SerializedName(SERIALIZED_NAME_ITEM_VALUE)
  private List<DestinyDestinyItemQuantity> itemValue = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE_DESCRIPTION = "valueDescription";
  @SerializedName(SERIALIZED_NAME_VALUE_DESCRIPTION)
  private String valueDescription;

  public DestinyDefinitionsDestinyItemValueBlockDefinition() {
  }

  public DestinyDefinitionsDestinyItemValueBlockDefinition itemValue(List<DestinyDestinyItemQuantity> itemValue) {
    this.itemValue = itemValue;
    return this;
  }

  public DestinyDefinitionsDestinyItemValueBlockDefinition addItemValueItem(DestinyDestinyItemQuantity itemValueItem) {
    if (this.itemValue == null) {
      this.itemValue = new ArrayList<>();
    }
    this.itemValue.add(itemValueItem);
    return this;
  }

  /**
   * References to the items that make up this item&#39;s \&quot;value\&quot;, and the quantity.
   * @return itemValue
   */
  @javax.annotation.Nullable
  public List<DestinyDestinyItemQuantity> getItemValue() {
    return itemValue;
  }

  public void setItemValue(List<DestinyDestinyItemQuantity> itemValue) {
    this.itemValue = itemValue;
  }


  public DestinyDefinitionsDestinyItemValueBlockDefinition valueDescription(String valueDescription) {
    this.valueDescription = valueDescription;
    return this;
  }

  /**
   * If there&#39;s a localized text description of the value provided, this will be said description.
   * @return valueDescription
   */
  @javax.annotation.Nullable
  public String getValueDescription() {
    return valueDescription;
  }

  public void setValueDescription(String valueDescription) {
    this.valueDescription = valueDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemValueBlockDefinition destinyDefinitionsDestinyItemValueBlockDefinition = (DestinyDefinitionsDestinyItemValueBlockDefinition) o;
    return Objects.equals(this.itemValue, destinyDefinitionsDestinyItemValueBlockDefinition.itemValue) &&
        Objects.equals(this.valueDescription, destinyDefinitionsDestinyItemValueBlockDefinition.valueDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemValue, valueDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemValueBlockDefinition {\n");
    sb.append("    itemValue: ").append(toIndentedString(itemValue)).append("\n");
    sb.append("    valueDescription: ").append(toIndentedString(valueDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemValue");
    openapiFields.add("valueDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemValueBlockDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemValueBlockDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemValueBlockDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemValueBlockDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemValueBlockDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemValueBlockDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("itemValue") != null && !jsonObj.get("itemValue").isJsonNull()) {
        JsonArray jsonArrayitemValue = jsonObj.getAsJsonArray("itemValue");
        if (jsonArrayitemValue != null) {
          // ensure the json data is an array
          if (!jsonObj.get("itemValue").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `itemValue` to be an array in the JSON string but got `%s`", jsonObj.get("itemValue").toString()));
          }

          // validate the optional field `itemValue` (array)
          for (int i = 0; i < jsonArrayitemValue.size(); i++) {
            DestinyDestinyItemQuantity.validateJsonElement(jsonArrayitemValue.get(i));
          };
        }
      }
      if ((jsonObj.get("valueDescription") != null && !jsonObj.get("valueDescription").isJsonNull()) && !jsonObj.get("valueDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemValueBlockDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemValueBlockDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemValueBlockDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemValueBlockDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemValueBlockDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemValueBlockDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemValueBlockDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemValueBlockDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemValueBlockDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemValueBlockDefinition
   */
  public static DestinyDefinitionsDestinyItemValueBlockDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemValueBlockDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemValueBlockDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

