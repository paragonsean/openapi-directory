/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsItemsDestinyDerivedItemDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A shortcut for the fact that some items have a \&quot;Preview Vendor\&quot; - See DestinyInventoryItemDefinition.preview.previewVendorHash - that is intended to be used to show what items you can get as a result of acquiring or using this item.  A common example of this in Destiny 1 was Eververse \&quot;Boxes,\&quot; which could have many possible items. This \&quot;Preview Vendor\&quot; is not a vendor you can actually see in the game, but it defines categories and sale items for all of the possible items you could get from the Box so that the game can show them to you. We summarize that info here so that you don&#39;t have to do that Vendor lookup and aggregation manually.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition {
  public static final String SERIALIZED_NAME_CATEGORY_DESCRIPTION = "categoryDescription";
  @SerializedName(SERIALIZED_NAME_CATEGORY_DESCRIPTION)
  private String categoryDescription;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<DestinyDefinitionsItemsDestinyDerivedItemDefinition> items = new ArrayList<>();

  public DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition() {
  }

  public DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition categoryDescription(String categoryDescription) {
    this.categoryDescription = categoryDescription;
    return this;
  }

  /**
   * The localized string for the category title. This will be something describing the items you can get as a group, or your likelihood/the quantity you&#39;ll get.
   * @return categoryDescription
   */
  @javax.annotation.Nullable
  public String getCategoryDescription() {
    return categoryDescription;
  }

  public void setCategoryDescription(String categoryDescription) {
    this.categoryDescription = categoryDescription;
  }


  public DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition items(List<DestinyDefinitionsItemsDestinyDerivedItemDefinition> items) {
    this.items = items;
    return this;
  }

  public DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition addItemsItem(DestinyDefinitionsItemsDestinyDerivedItemDefinition itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * This is the list of all of the items for this category and the basic properties we&#39;ll know about them.
   * @return items
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsItemsDestinyDerivedItemDefinition> getItems() {
    return items;
  }

  public void setItems(List<DestinyDefinitionsItemsDestinyDerivedItemDefinition> items) {
    this.items = items;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition destinyDefinitionsItemsDestinyDerivedItemCategoryDefinition = (DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition) o;
    return Objects.equals(this.categoryDescription, destinyDefinitionsItemsDestinyDerivedItemCategoryDefinition.categoryDescription) &&
        Objects.equals(this.items, destinyDefinitionsItemsDestinyDerivedItemCategoryDefinition.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryDescription, items);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition {\n");
    sb.append("    categoryDescription: ").append(toIndentedString(categoryDescription)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoryDescription");
    openapiFields.add("items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition is not found in the empty JSON string", DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("categoryDescription") != null && !jsonObj.get("categoryDescription").isJsonNull()) && !jsonObj.get("categoryDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryDescription").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            DestinyDefinitionsItemsDestinyDerivedItemDefinition.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition
   */
  public static DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

