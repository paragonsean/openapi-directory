/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorCategoryOverlayDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is the definition for a single Vendor Category, into which Sale Items are grouped.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyVendorCategoryEntryDefinition {
  public static final String SERIALIZED_NAME_BUY_STRING_OVERRIDE = "buyStringOverride";
  @SerializedName(SERIALIZED_NAME_BUY_STRING_OVERRIDE)
  private String buyStringOverride;

  public static final String SERIALIZED_NAME_CATEGORY_HASH = "categoryHash";
  @SerializedName(SERIALIZED_NAME_CATEGORY_HASH)
  private Integer categoryHash;

  public static final String SERIALIZED_NAME_CATEGORY_INDEX = "categoryIndex";
  @SerializedName(SERIALIZED_NAME_CATEGORY_INDEX)
  private Integer categoryIndex;

  public static final String SERIALIZED_NAME_DISABLED_DESCRIPTION = "disabledDescription";
  @SerializedName(SERIALIZED_NAME_DISABLED_DESCRIPTION)
  private String disabledDescription;

  public static final String SERIALIZED_NAME_DISPLAY_TITLE = "displayTitle";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TITLE)
  private String displayTitle;

  public static final String SERIALIZED_NAME_HIDE_FROM_REGULAR_PURCHASE = "hideFromRegularPurchase";
  @SerializedName(SERIALIZED_NAME_HIDE_FROM_REGULAR_PURCHASE)
  private Boolean hideFromRegularPurchase;

  public static final String SERIALIZED_NAME_HIDE_IF_NO_CURRENCY = "hideIfNoCurrency";
  @SerializedName(SERIALIZED_NAME_HIDE_IF_NO_CURRENCY)
  private Boolean hideIfNoCurrency;

  public static final String SERIALIZED_NAME_IS_DISPLAY_ONLY = "isDisplayOnly";
  @SerializedName(SERIALIZED_NAME_IS_DISPLAY_ONLY)
  private Boolean isDisplayOnly;

  public static final String SERIALIZED_NAME_IS_PREVIEW = "isPreview";
  @SerializedName(SERIALIZED_NAME_IS_PREVIEW)
  private Boolean isPreview;

  public static final String SERIALIZED_NAME_OVERLAY = "overlay";
  @SerializedName(SERIALIZED_NAME_OVERLAY)
  private DestinyDefinitionsDestinyVendorCategoryOverlayDefinition overlay;

  public static final String SERIALIZED_NAME_QUANTITY_AVAILABLE = "quantityAvailable";
  @SerializedName(SERIALIZED_NAME_QUANTITY_AVAILABLE)
  private Integer quantityAvailable;

  public static final String SERIALIZED_NAME_RESET_INTERVAL_MINUTES_OVERRIDE = "resetIntervalMinutesOverride";
  @SerializedName(SERIALIZED_NAME_RESET_INTERVAL_MINUTES_OVERRIDE)
  private Integer resetIntervalMinutesOverride;

  public static final String SERIALIZED_NAME_RESET_OFFSET_MINUTES_OVERRIDE = "resetOffsetMinutesOverride";
  @SerializedName(SERIALIZED_NAME_RESET_OFFSET_MINUTES_OVERRIDE)
  private Integer resetOffsetMinutesOverride;

  public static final String SERIALIZED_NAME_SHOW_UNAVAILABLE_ITEMS = "showUnavailableItems";
  @SerializedName(SERIALIZED_NAME_SHOW_UNAVAILABLE_ITEMS)
  private Boolean showUnavailableItems;

  public static final String SERIALIZED_NAME_SORT_VALUE = "sortValue";
  @SerializedName(SERIALIZED_NAME_SORT_VALUE)
  private Integer sortValue;

  public static final String SERIALIZED_NAME_VENDOR_ITEM_INDEXES = "vendorItemIndexes";
  @SerializedName(SERIALIZED_NAME_VENDOR_ITEM_INDEXES)
  private List<Integer> vendorItemIndexes = new ArrayList<>();

  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition() {
  }

  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition buyStringOverride(String buyStringOverride) {
    this.buyStringOverride = buyStringOverride;
    return this;
  }

  /**
   * The localized string for making purchases from this category, if it is different from the vendor&#39;s string for purchasing.
   * @return buyStringOverride
   */
  @javax.annotation.Nullable
  public String getBuyStringOverride() {
    return buyStringOverride;
  }

  public void setBuyStringOverride(String buyStringOverride) {
    this.buyStringOverride = buyStringOverride;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition categoryHash(Integer categoryHash) {
    this.categoryHash = categoryHash;
    return this;
  }

  /**
   * The hashed identifier for the category.
   * @return categoryHash
   */
  @javax.annotation.Nullable
  public Integer getCategoryHash() {
    return categoryHash;
  }

  public void setCategoryHash(Integer categoryHash) {
    this.categoryHash = categoryHash;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition categoryIndex(Integer categoryIndex) {
    this.categoryIndex = categoryIndex;
    return this;
  }

  /**
   * The index of the category in the original category definitions for the vendor.
   * @return categoryIndex
   */
  @javax.annotation.Nullable
  public Integer getCategoryIndex() {
    return categoryIndex;
  }

  public void setCategoryIndex(Integer categoryIndex) {
    this.categoryIndex = categoryIndex;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition disabledDescription(String disabledDescription) {
    this.disabledDescription = disabledDescription;
    return this;
  }

  /**
   * If the category is disabled, this is the localized description to show.
   * @return disabledDescription
   */
  @javax.annotation.Nullable
  public String getDisabledDescription() {
    return disabledDescription;
  }

  public void setDisabledDescription(String disabledDescription) {
    this.disabledDescription = disabledDescription;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition displayTitle(String displayTitle) {
    this.displayTitle = displayTitle;
    return this;
  }

  /**
   * The localized title of the category.
   * @return displayTitle
   */
  @javax.annotation.Nullable
  public String getDisplayTitle() {
    return displayTitle;
  }

  public void setDisplayTitle(String displayTitle) {
    this.displayTitle = displayTitle;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition hideFromRegularPurchase(Boolean hideFromRegularPurchase) {
    this.hideFromRegularPurchase = hideFromRegularPurchase;
    return this;
  }

  /**
   * True if this category doesn&#39;t allow purchases.
   * @return hideFromRegularPurchase
   */
  @javax.annotation.Nullable
  public Boolean getHideFromRegularPurchase() {
    return hideFromRegularPurchase;
  }

  public void setHideFromRegularPurchase(Boolean hideFromRegularPurchase) {
    this.hideFromRegularPurchase = hideFromRegularPurchase;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition hideIfNoCurrency(Boolean hideIfNoCurrency) {
    this.hideIfNoCurrency = hideIfNoCurrency;
    return this;
  }

  /**
   * If you don&#39;t have the currency required to buy items from this category, should the items be hidden?
   * @return hideIfNoCurrency
   */
  @javax.annotation.Nullable
  public Boolean getHideIfNoCurrency() {
    return hideIfNoCurrency;
  }

  public void setHideIfNoCurrency(Boolean hideIfNoCurrency) {
    this.hideIfNoCurrency = hideIfNoCurrency;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition isDisplayOnly(Boolean isDisplayOnly) {
    this.isDisplayOnly = isDisplayOnly;
    return this;
  }

  /**
   * If true, this category only displays items: you can&#39;t purchase anything in them.
   * @return isDisplayOnly
   */
  @javax.annotation.Nullable
  public Boolean getIsDisplayOnly() {
    return isDisplayOnly;
  }

  public void setIsDisplayOnly(Boolean isDisplayOnly) {
    this.isDisplayOnly = isDisplayOnly;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition isPreview(Boolean isPreview) {
    this.isPreview = isPreview;
    return this;
  }

  /**
   * Sometimes a category isn&#39;t actually used to sell items, but rather to preview them. This implies different UI (and manual placement of the category in the UI) in the game, and special treatment.
   * @return isPreview
   */
  @javax.annotation.Nullable
  public Boolean getIsPreview() {
    return isPreview;
  }

  public void setIsPreview(Boolean isPreview) {
    this.isPreview = isPreview;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition overlay(DestinyDefinitionsDestinyVendorCategoryOverlayDefinition overlay) {
    this.overlay = overlay;
    return this;
  }

  /**
   * If this category has an overlay prompt that should appear, this contains the details of that prompt.
   * @return overlay
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsDestinyVendorCategoryOverlayDefinition getOverlay() {
    return overlay;
  }

  public void setOverlay(DestinyDefinitionsDestinyVendorCategoryOverlayDefinition overlay) {
    this.overlay = overlay;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition quantityAvailable(Integer quantityAvailable) {
    this.quantityAvailable = quantityAvailable;
    return this;
  }

  /**
   * The amount of items that will be available when this category is shown.
   * @return quantityAvailable
   */
  @javax.annotation.Nullable
  public Integer getQuantityAvailable() {
    return quantityAvailable;
  }

  public void setQuantityAvailable(Integer quantityAvailable) {
    this.quantityAvailable = quantityAvailable;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition resetIntervalMinutesOverride(Integer resetIntervalMinutesOverride) {
    this.resetIntervalMinutesOverride = resetIntervalMinutesOverride;
    return this;
  }

  /**
   * Get resetIntervalMinutesOverride
   * @return resetIntervalMinutesOverride
   */
  @javax.annotation.Nullable
  public Integer getResetIntervalMinutesOverride() {
    return resetIntervalMinutesOverride;
  }

  public void setResetIntervalMinutesOverride(Integer resetIntervalMinutesOverride) {
    this.resetIntervalMinutesOverride = resetIntervalMinutesOverride;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition resetOffsetMinutesOverride(Integer resetOffsetMinutesOverride) {
    this.resetOffsetMinutesOverride = resetOffsetMinutesOverride;
    return this;
  }

  /**
   * Get resetOffsetMinutesOverride
   * @return resetOffsetMinutesOverride
   */
  @javax.annotation.Nullable
  public Integer getResetOffsetMinutesOverride() {
    return resetOffsetMinutesOverride;
  }

  public void setResetOffsetMinutesOverride(Integer resetOffsetMinutesOverride) {
    this.resetOffsetMinutesOverride = resetOffsetMinutesOverride;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition showUnavailableItems(Boolean showUnavailableItems) {
    this.showUnavailableItems = showUnavailableItems;
    return this;
  }

  /**
   * If items aren&#39;t up for sale in this category, should we still show them (greyed out)?
   * @return showUnavailableItems
   */
  @javax.annotation.Nullable
  public Boolean getShowUnavailableItems() {
    return showUnavailableItems;
  }

  public void setShowUnavailableItems(Boolean showUnavailableItems) {
    this.showUnavailableItems = showUnavailableItems;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition sortValue(Integer sortValue) {
    this.sortValue = sortValue;
    return this;
  }

  /**
   * Used in sorting items in vendors... but there&#39;s a lot more to it. Just go with the order provided in the itemIndexes property on the DestinyVendorCategoryComponent instead, it should be more reliable than trying to recalculate it yourself.
   * @return sortValue
   */
  @javax.annotation.Nullable
  public Integer getSortValue() {
    return sortValue;
  }

  public void setSortValue(Integer sortValue) {
    this.sortValue = sortValue;
  }


  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition vendorItemIndexes(List<Integer> vendorItemIndexes) {
    this.vendorItemIndexes = vendorItemIndexes;
    return this;
  }

  public DestinyDefinitionsDestinyVendorCategoryEntryDefinition addVendorItemIndexesItem(Integer vendorItemIndexesItem) {
    if (this.vendorItemIndexes == null) {
      this.vendorItemIndexes = new ArrayList<>();
    }
    this.vendorItemIndexes.add(vendorItemIndexesItem);
    return this;
  }

  /**
   * A shortcut for the vendor item indexes sold under this category. Saves us from some expensive reorganization at runtime.
   * @return vendorItemIndexes
   */
  @javax.annotation.Nullable
  public List<Integer> getVendorItemIndexes() {
    return vendorItemIndexes;
  }

  public void setVendorItemIndexes(List<Integer> vendorItemIndexes) {
    this.vendorItemIndexes = vendorItemIndexes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyVendorCategoryEntryDefinition destinyDefinitionsDestinyVendorCategoryEntryDefinition = (DestinyDefinitionsDestinyVendorCategoryEntryDefinition) o;
    return Objects.equals(this.buyStringOverride, destinyDefinitionsDestinyVendorCategoryEntryDefinition.buyStringOverride) &&
        Objects.equals(this.categoryHash, destinyDefinitionsDestinyVendorCategoryEntryDefinition.categoryHash) &&
        Objects.equals(this.categoryIndex, destinyDefinitionsDestinyVendorCategoryEntryDefinition.categoryIndex) &&
        Objects.equals(this.disabledDescription, destinyDefinitionsDestinyVendorCategoryEntryDefinition.disabledDescription) &&
        Objects.equals(this.displayTitle, destinyDefinitionsDestinyVendorCategoryEntryDefinition.displayTitle) &&
        Objects.equals(this.hideFromRegularPurchase, destinyDefinitionsDestinyVendorCategoryEntryDefinition.hideFromRegularPurchase) &&
        Objects.equals(this.hideIfNoCurrency, destinyDefinitionsDestinyVendorCategoryEntryDefinition.hideIfNoCurrency) &&
        Objects.equals(this.isDisplayOnly, destinyDefinitionsDestinyVendorCategoryEntryDefinition.isDisplayOnly) &&
        Objects.equals(this.isPreview, destinyDefinitionsDestinyVendorCategoryEntryDefinition.isPreview) &&
        Objects.equals(this.overlay, destinyDefinitionsDestinyVendorCategoryEntryDefinition.overlay) &&
        Objects.equals(this.quantityAvailable, destinyDefinitionsDestinyVendorCategoryEntryDefinition.quantityAvailable) &&
        Objects.equals(this.resetIntervalMinutesOverride, destinyDefinitionsDestinyVendorCategoryEntryDefinition.resetIntervalMinutesOverride) &&
        Objects.equals(this.resetOffsetMinutesOverride, destinyDefinitionsDestinyVendorCategoryEntryDefinition.resetOffsetMinutesOverride) &&
        Objects.equals(this.showUnavailableItems, destinyDefinitionsDestinyVendorCategoryEntryDefinition.showUnavailableItems) &&
        Objects.equals(this.sortValue, destinyDefinitionsDestinyVendorCategoryEntryDefinition.sortValue) &&
        Objects.equals(this.vendorItemIndexes, destinyDefinitionsDestinyVendorCategoryEntryDefinition.vendorItemIndexes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buyStringOverride, categoryHash, categoryIndex, disabledDescription, displayTitle, hideFromRegularPurchase, hideIfNoCurrency, isDisplayOnly, isPreview, overlay, quantityAvailable, resetIntervalMinutesOverride, resetOffsetMinutesOverride, showUnavailableItems, sortValue, vendorItemIndexes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyVendorCategoryEntryDefinition {\n");
    sb.append("    buyStringOverride: ").append(toIndentedString(buyStringOverride)).append("\n");
    sb.append("    categoryHash: ").append(toIndentedString(categoryHash)).append("\n");
    sb.append("    categoryIndex: ").append(toIndentedString(categoryIndex)).append("\n");
    sb.append("    disabledDescription: ").append(toIndentedString(disabledDescription)).append("\n");
    sb.append("    displayTitle: ").append(toIndentedString(displayTitle)).append("\n");
    sb.append("    hideFromRegularPurchase: ").append(toIndentedString(hideFromRegularPurchase)).append("\n");
    sb.append("    hideIfNoCurrency: ").append(toIndentedString(hideIfNoCurrency)).append("\n");
    sb.append("    isDisplayOnly: ").append(toIndentedString(isDisplayOnly)).append("\n");
    sb.append("    isPreview: ").append(toIndentedString(isPreview)).append("\n");
    sb.append("    overlay: ").append(toIndentedString(overlay)).append("\n");
    sb.append("    quantityAvailable: ").append(toIndentedString(quantityAvailable)).append("\n");
    sb.append("    resetIntervalMinutesOverride: ").append(toIndentedString(resetIntervalMinutesOverride)).append("\n");
    sb.append("    resetOffsetMinutesOverride: ").append(toIndentedString(resetOffsetMinutesOverride)).append("\n");
    sb.append("    showUnavailableItems: ").append(toIndentedString(showUnavailableItems)).append("\n");
    sb.append("    sortValue: ").append(toIndentedString(sortValue)).append("\n");
    sb.append("    vendorItemIndexes: ").append(toIndentedString(vendorItemIndexes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buyStringOverride");
    openapiFields.add("categoryHash");
    openapiFields.add("categoryIndex");
    openapiFields.add("disabledDescription");
    openapiFields.add("displayTitle");
    openapiFields.add("hideFromRegularPurchase");
    openapiFields.add("hideIfNoCurrency");
    openapiFields.add("isDisplayOnly");
    openapiFields.add("isPreview");
    openapiFields.add("overlay");
    openapiFields.add("quantityAvailable");
    openapiFields.add("resetIntervalMinutesOverride");
    openapiFields.add("resetOffsetMinutesOverride");
    openapiFields.add("showUnavailableItems");
    openapiFields.add("sortValue");
    openapiFields.add("vendorItemIndexes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyVendorCategoryEntryDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyVendorCategoryEntryDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyVendorCategoryEntryDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyVendorCategoryEntryDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyVendorCategoryEntryDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyVendorCategoryEntryDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buyStringOverride") != null && !jsonObj.get("buyStringOverride").isJsonNull()) && !jsonObj.get("buyStringOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyStringOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyStringOverride").toString()));
      }
      if ((jsonObj.get("disabledDescription") != null && !jsonObj.get("disabledDescription").isJsonNull()) && !jsonObj.get("disabledDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disabledDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disabledDescription").toString()));
      }
      if ((jsonObj.get("displayTitle") != null && !jsonObj.get("displayTitle").isJsonNull()) && !jsonObj.get("displayTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayTitle").toString()));
      }
      // validate the optional field `overlay`
      if (jsonObj.get("overlay") != null && !jsonObj.get("overlay").isJsonNull()) {
        DestinyDefinitionsDestinyVendorCategoryOverlayDefinition.validateJsonElement(jsonObj.get("overlay"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vendorItemIndexes") != null && !jsonObj.get("vendorItemIndexes").isJsonNull() && !jsonObj.get("vendorItemIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorItemIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("vendorItemIndexes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyVendorCategoryEntryDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyVendorCategoryEntryDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyVendorCategoryEntryDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyVendorCategoryEntryDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyVendorCategoryEntryDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyVendorCategoryEntryDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyVendorCategoryEntryDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyVendorCategoryEntryDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyVendorCategoryEntryDefinition
   */
  public static DestinyDefinitionsDestinyVendorCategoryEntryDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyVendorCategoryEntryDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyVendorCategoryEntryDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

