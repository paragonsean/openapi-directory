/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsPresentationDestinyPresentationChildBlock;
import org.openapitools.client.model.DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock;
import org.openapitools.client.model.DestinyDefinitionsRecordsDestinyRecordCompletionBlock;
import org.openapitools.client.model.DestinyDefinitionsRecordsDestinyRecordExpirationBlock;
import org.openapitools.client.model.DestinyDefinitionsRecordsDestinyRecordIntervalBlock;
import org.openapitools.client.model.DestinyDefinitionsRecordsDestinyRecordTitleBlock;
import org.openapitools.client.model.DestinyDefinitionsRecordsSchemaRecordStateBlock;
import org.openapitools.client.model.DestinyDestinyItemQuantity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsRecordsDestinyRecordDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsRecordsDestinyRecordDefinition {
  public static final String SERIALIZED_NAME_COMPLETION_INFO = "completionInfo";
  @SerializedName(SERIALIZED_NAME_COMPLETION_INFO)
  private DestinyDefinitionsRecordsDestinyRecordCompletionBlock completionInfo;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_EXPIRATION_INFO = "expirationInfo";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_INFO)
  private DestinyDefinitionsRecordsDestinyRecordExpirationBlock expirationInfo;

  public static final String SERIALIZED_NAME_FOR_TITLE_GILDING = "forTitleGilding";
  @SerializedName(SERIALIZED_NAME_FOR_TITLE_GILDING)
  private Boolean forTitleGilding;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_INTERVAL_INFO = "intervalInfo";
  @SerializedName(SERIALIZED_NAME_INTERVAL_INFO)
  private DestinyDefinitionsRecordsDestinyRecordIntervalBlock intervalInfo;

  public static final String SERIALIZED_NAME_LORE_HASH = "loreHash";
  @SerializedName(SERIALIZED_NAME_LORE_HASH)
  private Integer loreHash;

  public static final String SERIALIZED_NAME_OBJECTIVE_HASHES = "objectiveHashes";
  @SerializedName(SERIALIZED_NAME_OBJECTIVE_HASHES)
  private List<Integer> objectiveHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT_NODE_HASHES = "parentNodeHashes";
  @SerializedName(SERIALIZED_NAME_PARENT_NODE_HASHES)
  private List<Integer> parentNodeHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRESENTATION_INFO = "presentationInfo";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_INFO)
  private DestinyDefinitionsPresentationDestinyPresentationChildBlock presentationInfo;

  public static final String SERIALIZED_NAME_PRESENTATION_NODE_TYPE = "presentationNodeType";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_NODE_TYPE)
  private Integer presentationNodeType;

  public static final String SERIALIZED_NAME_RECORD_VALUE_STYLE = "recordValueStyle";
  @SerializedName(SERIALIZED_NAME_RECORD_VALUE_STYLE)
  private Integer recordValueStyle;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_REQUIREMENTS = "requirements";
  @SerializedName(SERIALIZED_NAME_REQUIREMENTS)
  private DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock requirements;

  public static final String SERIALIZED_NAME_REWARD_ITEMS = "rewardItems";
  @SerializedName(SERIALIZED_NAME_REWARD_ITEMS)
  private List<DestinyDestinyItemQuantity> rewardItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private Integer scope;

  public static final String SERIALIZED_NAME_SHOULD_SHOW_LARGE_ICONS = "shouldShowLargeIcons";
  @SerializedName(SERIALIZED_NAME_SHOULD_SHOW_LARGE_ICONS)
  private Boolean shouldShowLargeIcons;

  public static final String SERIALIZED_NAME_STATE_INFO = "stateInfo";
  @SerializedName(SERIALIZED_NAME_STATE_INFO)
  private DestinyDefinitionsRecordsSchemaRecordStateBlock stateInfo;

  public static final String SERIALIZED_NAME_TITLE_INFO = "titleInfo";
  @SerializedName(SERIALIZED_NAME_TITLE_INFO)
  private DestinyDefinitionsRecordsDestinyRecordTitleBlock titleInfo;

  public static final String SERIALIZED_NAME_TRAIT_HASHES = "traitHashes";
  @SerializedName(SERIALIZED_NAME_TRAIT_HASHES)
  private List<Integer> traitHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRAIT_IDS = "traitIds";
  @SerializedName(SERIALIZED_NAME_TRAIT_IDS)
  private List<String> traitIds = new ArrayList<>();

  public DestinyDefinitionsRecordsDestinyRecordDefinition() {
  }

  public DestinyDefinitionsRecordsDestinyRecordDefinition completionInfo(DestinyDefinitionsRecordsDestinyRecordCompletionBlock completionInfo) {
    this.completionInfo = completionInfo;
    return this;
  }

  /**
   * Get completionInfo
   * @return completionInfo
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsRecordsDestinyRecordCompletionBlock getCompletionInfo() {
    return completionInfo;
  }

  public void setCompletionInfo(DestinyDefinitionsRecordsDestinyRecordCompletionBlock completionInfo) {
    this.completionInfo = completionInfo;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition expirationInfo(DestinyDefinitionsRecordsDestinyRecordExpirationBlock expirationInfo) {
    this.expirationInfo = expirationInfo;
    return this;
  }

  /**
   * Get expirationInfo
   * @return expirationInfo
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsRecordsDestinyRecordExpirationBlock getExpirationInfo() {
    return expirationInfo;
  }

  public void setExpirationInfo(DestinyDefinitionsRecordsDestinyRecordExpirationBlock expirationInfo) {
    this.expirationInfo = expirationInfo;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition forTitleGilding(Boolean forTitleGilding) {
    this.forTitleGilding = forTitleGilding;
    return this;
  }

  /**
   * Get forTitleGilding
   * @return forTitleGilding
   */
  @javax.annotation.Nullable
  public Boolean getForTitleGilding() {
    return forTitleGilding;
  }

  public void setForTitleGilding(Boolean forTitleGilding) {
    this.forTitleGilding = forTitleGilding;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition intervalInfo(DestinyDefinitionsRecordsDestinyRecordIntervalBlock intervalInfo) {
    this.intervalInfo = intervalInfo;
    return this;
  }

  /**
   * Some records have multiple &#39;interval&#39; objectives, and the record may be claimed at each completed interval
   * @return intervalInfo
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsRecordsDestinyRecordIntervalBlock getIntervalInfo() {
    return intervalInfo;
  }

  public void setIntervalInfo(DestinyDefinitionsRecordsDestinyRecordIntervalBlock intervalInfo) {
    this.intervalInfo = intervalInfo;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition loreHash(Integer loreHash) {
    this.loreHash = loreHash;
    return this;
  }

  /**
   * Get loreHash
   * @return loreHash
   */
  @javax.annotation.Nullable
  public Integer getLoreHash() {
    return loreHash;
  }

  public void setLoreHash(Integer loreHash) {
    this.loreHash = loreHash;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition objectiveHashes(List<Integer> objectiveHashes) {
    this.objectiveHashes = objectiveHashes;
    return this;
  }

  public DestinyDefinitionsRecordsDestinyRecordDefinition addObjectiveHashesItem(Integer objectiveHashesItem) {
    if (this.objectiveHashes == null) {
      this.objectiveHashes = new ArrayList<>();
    }
    this.objectiveHashes.add(objectiveHashesItem);
    return this;
  }

  /**
   * Get objectiveHashes
   * @return objectiveHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getObjectiveHashes() {
    return objectiveHashes;
  }

  public void setObjectiveHashes(List<Integer> objectiveHashes) {
    this.objectiveHashes = objectiveHashes;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition parentNodeHashes(List<Integer> parentNodeHashes) {
    this.parentNodeHashes = parentNodeHashes;
    return this;
  }

  public DestinyDefinitionsRecordsDestinyRecordDefinition addParentNodeHashesItem(Integer parentNodeHashesItem) {
    if (this.parentNodeHashes == null) {
      this.parentNodeHashes = new ArrayList<>();
    }
    this.parentNodeHashes.add(parentNodeHashesItem);
    return this;
  }

  /**
   * A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
   * @return parentNodeHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getParentNodeHashes() {
    return parentNodeHashes;
  }

  public void setParentNodeHashes(List<Integer> parentNodeHashes) {
    this.parentNodeHashes = parentNodeHashes;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition presentationInfo(DestinyDefinitionsPresentationDestinyPresentationChildBlock presentationInfo) {
    this.presentationInfo = presentationInfo;
    return this;
  }

  /**
   * Get presentationInfo
   * @return presentationInfo
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsPresentationDestinyPresentationChildBlock getPresentationInfo() {
    return presentationInfo;
  }

  public void setPresentationInfo(DestinyDefinitionsPresentationDestinyPresentationChildBlock presentationInfo) {
    this.presentationInfo = presentationInfo;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition presentationNodeType(Integer presentationNodeType) {
    this.presentationNodeType = presentationNodeType;
    return this;
  }

  /**
   * Get presentationNodeType
   * @return presentationNodeType
   */
  @javax.annotation.Nullable
  public Integer getPresentationNodeType() {
    return presentationNodeType;
  }

  public void setPresentationNodeType(Integer presentationNodeType) {
    this.presentationNodeType = presentationNodeType;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition recordValueStyle(Integer recordValueStyle) {
    this.recordValueStyle = recordValueStyle;
    return this;
  }

  /**
   * Get recordValueStyle
   * @return recordValueStyle
   */
  @javax.annotation.Nullable
  public Integer getRecordValueStyle() {
    return recordValueStyle;
  }

  public void setRecordValueStyle(Integer recordValueStyle) {
    this.recordValueStyle = recordValueStyle;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition requirements(DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock requirements) {
    this.requirements = requirements;
    return this;
  }

  /**
   * Get requirements
   * @return requirements
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock getRequirements() {
    return requirements;
  }

  public void setRequirements(DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock requirements) {
    this.requirements = requirements;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition rewardItems(List<DestinyDestinyItemQuantity> rewardItems) {
    this.rewardItems = rewardItems;
    return this;
  }

  public DestinyDefinitionsRecordsDestinyRecordDefinition addRewardItemsItem(DestinyDestinyItemQuantity rewardItemsItem) {
    if (this.rewardItems == null) {
      this.rewardItems = new ArrayList<>();
    }
    this.rewardItems.add(rewardItemsItem);
    return this;
  }

  /**
   * If there is any publicly available information about rewards earned for achieving this record, this is the list of those items.   However, note that some records intentionally have \&quot;hidden\&quot; rewards. These will not be returned in this list.
   * @return rewardItems
   */
  @javax.annotation.Nullable
  public List<DestinyDestinyItemQuantity> getRewardItems() {
    return rewardItems;
  }

  public void setRewardItems(List<DestinyDestinyItemQuantity> rewardItems) {
    this.rewardItems = rewardItems;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition scope(Integer scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Indicates whether this Record&#39;s state is determined on a per-character or on an account-wide basis.
   * @return scope
   */
  @javax.annotation.Nullable
  public Integer getScope() {
    return scope;
  }

  public void setScope(Integer scope) {
    this.scope = scope;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition shouldShowLargeIcons(Boolean shouldShowLargeIcons) {
    this.shouldShowLargeIcons = shouldShowLargeIcons;
    return this;
  }

  /**
   * A hint to show a large icon for a reward
   * @return shouldShowLargeIcons
   */
  @javax.annotation.Nullable
  public Boolean getShouldShowLargeIcons() {
    return shouldShowLargeIcons;
  }

  public void setShouldShowLargeIcons(Boolean shouldShowLargeIcons) {
    this.shouldShowLargeIcons = shouldShowLargeIcons;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition stateInfo(DestinyDefinitionsRecordsSchemaRecordStateBlock stateInfo) {
    this.stateInfo = stateInfo;
    return this;
  }

  /**
   * Get stateInfo
   * @return stateInfo
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsRecordsSchemaRecordStateBlock getStateInfo() {
    return stateInfo;
  }

  public void setStateInfo(DestinyDefinitionsRecordsSchemaRecordStateBlock stateInfo) {
    this.stateInfo = stateInfo;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition titleInfo(DestinyDefinitionsRecordsDestinyRecordTitleBlock titleInfo) {
    this.titleInfo = titleInfo;
    return this;
  }

  /**
   * Get titleInfo
   * @return titleInfo
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsRecordsDestinyRecordTitleBlock getTitleInfo() {
    return titleInfo;
  }

  public void setTitleInfo(DestinyDefinitionsRecordsDestinyRecordTitleBlock titleInfo) {
    this.titleInfo = titleInfo;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition traitHashes(List<Integer> traitHashes) {
    this.traitHashes = traitHashes;
    return this;
  }

  public DestinyDefinitionsRecordsDestinyRecordDefinition addTraitHashesItem(Integer traitHashesItem) {
    if (this.traitHashes == null) {
      this.traitHashes = new ArrayList<>();
    }
    this.traitHashes.add(traitHashesItem);
    return this;
  }

  /**
   * Get traitHashes
   * @return traitHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getTraitHashes() {
    return traitHashes;
  }

  public void setTraitHashes(List<Integer> traitHashes) {
    this.traitHashes = traitHashes;
  }


  public DestinyDefinitionsRecordsDestinyRecordDefinition traitIds(List<String> traitIds) {
    this.traitIds = traitIds;
    return this;
  }

  public DestinyDefinitionsRecordsDestinyRecordDefinition addTraitIdsItem(String traitIdsItem) {
    if (this.traitIds == null) {
      this.traitIds = new ArrayList<>();
    }
    this.traitIds.add(traitIdsItem);
    return this;
  }

  /**
   * Get traitIds
   * @return traitIds
   */
  @javax.annotation.Nullable
  public List<String> getTraitIds() {
    return traitIds;
  }

  public void setTraitIds(List<String> traitIds) {
    this.traitIds = traitIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsRecordsDestinyRecordDefinition destinyDefinitionsRecordsDestinyRecordDefinition = (DestinyDefinitionsRecordsDestinyRecordDefinition) o;
    return Objects.equals(this.completionInfo, destinyDefinitionsRecordsDestinyRecordDefinition.completionInfo) &&
        Objects.equals(this.displayProperties, destinyDefinitionsRecordsDestinyRecordDefinition.displayProperties) &&
        Objects.equals(this.expirationInfo, destinyDefinitionsRecordsDestinyRecordDefinition.expirationInfo) &&
        Objects.equals(this.forTitleGilding, destinyDefinitionsRecordsDestinyRecordDefinition.forTitleGilding) &&
        Objects.equals(this.hash, destinyDefinitionsRecordsDestinyRecordDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsRecordsDestinyRecordDefinition.index) &&
        Objects.equals(this.intervalInfo, destinyDefinitionsRecordsDestinyRecordDefinition.intervalInfo) &&
        Objects.equals(this.loreHash, destinyDefinitionsRecordsDestinyRecordDefinition.loreHash) &&
        Objects.equals(this.objectiveHashes, destinyDefinitionsRecordsDestinyRecordDefinition.objectiveHashes) &&
        Objects.equals(this.parentNodeHashes, destinyDefinitionsRecordsDestinyRecordDefinition.parentNodeHashes) &&
        Objects.equals(this.presentationInfo, destinyDefinitionsRecordsDestinyRecordDefinition.presentationInfo) &&
        Objects.equals(this.presentationNodeType, destinyDefinitionsRecordsDestinyRecordDefinition.presentationNodeType) &&
        Objects.equals(this.recordValueStyle, destinyDefinitionsRecordsDestinyRecordDefinition.recordValueStyle) &&
        Objects.equals(this.redacted, destinyDefinitionsRecordsDestinyRecordDefinition.redacted) &&
        Objects.equals(this.requirements, destinyDefinitionsRecordsDestinyRecordDefinition.requirements) &&
        Objects.equals(this.rewardItems, destinyDefinitionsRecordsDestinyRecordDefinition.rewardItems) &&
        Objects.equals(this.scope, destinyDefinitionsRecordsDestinyRecordDefinition.scope) &&
        Objects.equals(this.shouldShowLargeIcons, destinyDefinitionsRecordsDestinyRecordDefinition.shouldShowLargeIcons) &&
        Objects.equals(this.stateInfo, destinyDefinitionsRecordsDestinyRecordDefinition.stateInfo) &&
        Objects.equals(this.titleInfo, destinyDefinitionsRecordsDestinyRecordDefinition.titleInfo) &&
        Objects.equals(this.traitHashes, destinyDefinitionsRecordsDestinyRecordDefinition.traitHashes) &&
        Objects.equals(this.traitIds, destinyDefinitionsRecordsDestinyRecordDefinition.traitIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionInfo, displayProperties, expirationInfo, forTitleGilding, hash, index, intervalInfo, loreHash, objectiveHashes, parentNodeHashes, presentationInfo, presentationNodeType, recordValueStyle, redacted, requirements, rewardItems, scope, shouldShowLargeIcons, stateInfo, titleInfo, traitHashes, traitIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsRecordsDestinyRecordDefinition {\n");
    sb.append("    completionInfo: ").append(toIndentedString(completionInfo)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    expirationInfo: ").append(toIndentedString(expirationInfo)).append("\n");
    sb.append("    forTitleGilding: ").append(toIndentedString(forTitleGilding)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    intervalInfo: ").append(toIndentedString(intervalInfo)).append("\n");
    sb.append("    loreHash: ").append(toIndentedString(loreHash)).append("\n");
    sb.append("    objectiveHashes: ").append(toIndentedString(objectiveHashes)).append("\n");
    sb.append("    parentNodeHashes: ").append(toIndentedString(parentNodeHashes)).append("\n");
    sb.append("    presentationInfo: ").append(toIndentedString(presentationInfo)).append("\n");
    sb.append("    presentationNodeType: ").append(toIndentedString(presentationNodeType)).append("\n");
    sb.append("    recordValueStyle: ").append(toIndentedString(recordValueStyle)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    requirements: ").append(toIndentedString(requirements)).append("\n");
    sb.append("    rewardItems: ").append(toIndentedString(rewardItems)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    shouldShowLargeIcons: ").append(toIndentedString(shouldShowLargeIcons)).append("\n");
    sb.append("    stateInfo: ").append(toIndentedString(stateInfo)).append("\n");
    sb.append("    titleInfo: ").append(toIndentedString(titleInfo)).append("\n");
    sb.append("    traitHashes: ").append(toIndentedString(traitHashes)).append("\n");
    sb.append("    traitIds: ").append(toIndentedString(traitIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completionInfo");
    openapiFields.add("displayProperties");
    openapiFields.add("expirationInfo");
    openapiFields.add("forTitleGilding");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("intervalInfo");
    openapiFields.add("loreHash");
    openapiFields.add("objectiveHashes");
    openapiFields.add("parentNodeHashes");
    openapiFields.add("presentationInfo");
    openapiFields.add("presentationNodeType");
    openapiFields.add("recordValueStyle");
    openapiFields.add("redacted");
    openapiFields.add("requirements");
    openapiFields.add("rewardItems");
    openapiFields.add("scope");
    openapiFields.add("shouldShowLargeIcons");
    openapiFields.add("stateInfo");
    openapiFields.add("titleInfo");
    openapiFields.add("traitHashes");
    openapiFields.add("traitIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsRecordsDestinyRecordDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsRecordsDestinyRecordDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsRecordsDestinyRecordDefinition is not found in the empty JSON string", DestinyDefinitionsRecordsDestinyRecordDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsRecordsDestinyRecordDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsRecordsDestinyRecordDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `completionInfo`
      if (jsonObj.get("completionInfo") != null && !jsonObj.get("completionInfo").isJsonNull()) {
        DestinyDefinitionsRecordsDestinyRecordCompletionBlock.validateJsonElement(jsonObj.get("completionInfo"));
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      // validate the optional field `expirationInfo`
      if (jsonObj.get("expirationInfo") != null && !jsonObj.get("expirationInfo").isJsonNull()) {
        DestinyDefinitionsRecordsDestinyRecordExpirationBlock.validateJsonElement(jsonObj.get("expirationInfo"));
      }
      // validate the optional field `intervalInfo`
      if (jsonObj.get("intervalInfo") != null && !jsonObj.get("intervalInfo").isJsonNull()) {
        DestinyDefinitionsRecordsDestinyRecordIntervalBlock.validateJsonElement(jsonObj.get("intervalInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("objectiveHashes") != null && !jsonObj.get("objectiveHashes").isJsonNull() && !jsonObj.get("objectiveHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectiveHashes` to be an array in the JSON string but got `%s`", jsonObj.get("objectiveHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parentNodeHashes") != null && !jsonObj.get("parentNodeHashes").isJsonNull() && !jsonObj.get("parentNodeHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentNodeHashes` to be an array in the JSON string but got `%s`", jsonObj.get("parentNodeHashes").toString()));
      }
      // validate the optional field `presentationInfo`
      if (jsonObj.get("presentationInfo") != null && !jsonObj.get("presentationInfo").isJsonNull()) {
        DestinyDefinitionsPresentationDestinyPresentationChildBlock.validateJsonElement(jsonObj.get("presentationInfo"));
      }
      // validate the optional field `requirements`
      if (jsonObj.get("requirements") != null && !jsonObj.get("requirements").isJsonNull()) {
        DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock.validateJsonElement(jsonObj.get("requirements"));
      }
      if (jsonObj.get("rewardItems") != null && !jsonObj.get("rewardItems").isJsonNull()) {
        JsonArray jsonArrayrewardItems = jsonObj.getAsJsonArray("rewardItems");
        if (jsonArrayrewardItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rewardItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rewardItems` to be an array in the JSON string but got `%s`", jsonObj.get("rewardItems").toString()));
          }

          // validate the optional field `rewardItems` (array)
          for (int i = 0; i < jsonArrayrewardItems.size(); i++) {
            DestinyDestinyItemQuantity.validateJsonElement(jsonArrayrewardItems.get(i));
          };
        }
      }
      // validate the optional field `stateInfo`
      if (jsonObj.get("stateInfo") != null && !jsonObj.get("stateInfo").isJsonNull()) {
        DestinyDefinitionsRecordsSchemaRecordStateBlock.validateJsonElement(jsonObj.get("stateInfo"));
      }
      // validate the optional field `titleInfo`
      if (jsonObj.get("titleInfo") != null && !jsonObj.get("titleInfo").isJsonNull()) {
        DestinyDefinitionsRecordsDestinyRecordTitleBlock.validateJsonElement(jsonObj.get("titleInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("traitHashes") != null && !jsonObj.get("traitHashes").isJsonNull() && !jsonObj.get("traitHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `traitHashes` to be an array in the JSON string but got `%s`", jsonObj.get("traitHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("traitIds") != null && !jsonObj.get("traitIds").isJsonNull() && !jsonObj.get("traitIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `traitIds` to be an array in the JSON string but got `%s`", jsonObj.get("traitIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsRecordsDestinyRecordDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsRecordsDestinyRecordDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsRecordsDestinyRecordDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsRecordsDestinyRecordDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsRecordsDestinyRecordDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsRecordsDestinyRecordDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsRecordsDestinyRecordDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsRecordsDestinyRecordDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsRecordsDestinyRecordDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsRecordsDestinyRecordDefinition
   */
  public static DestinyDefinitionsRecordsDestinyRecordDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsRecordsDestinyRecordDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsRecordsDestinyRecordDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

