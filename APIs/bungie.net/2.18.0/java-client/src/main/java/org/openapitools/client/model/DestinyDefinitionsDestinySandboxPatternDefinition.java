/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyArrangementRegionFilterDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsDestinySandboxPatternDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinySandboxPatternDefinition {
  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<DestinyDefinitionsDestinyArrangementRegionFilterDefinition> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_PATTERN_GLOBAL_TAG_ID_HASH = "patternGlobalTagIdHash";
  @SerializedName(SERIALIZED_NAME_PATTERN_GLOBAL_TAG_ID_HASH)
  private Integer patternGlobalTagIdHash;

  public static final String SERIALIZED_NAME_PATTERN_HASH = "patternHash";
  @SerializedName(SERIALIZED_NAME_PATTERN_HASH)
  private Integer patternHash;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_WEAPON_CONTENT_GROUP_HASH = "weaponContentGroupHash";
  @SerializedName(SERIALIZED_NAME_WEAPON_CONTENT_GROUP_HASH)
  private Integer weaponContentGroupHash;

  public static final String SERIALIZED_NAME_WEAPON_TRANSLATION_GROUP_HASH = "weaponTranslationGroupHash";
  @SerializedName(SERIALIZED_NAME_WEAPON_TRANSLATION_GROUP_HASH)
  private Integer weaponTranslationGroupHash;

  public static final String SERIALIZED_NAME_WEAPON_TYPE = "weaponType";
  @SerializedName(SERIALIZED_NAME_WEAPON_TYPE)
  private Integer weaponType;

  public static final String SERIALIZED_NAME_WEAPON_TYPE_HASH = "weaponTypeHash";
  @SerializedName(SERIALIZED_NAME_WEAPON_TYPE_HASH)
  private Integer weaponTypeHash;

  public DestinyDefinitionsDestinySandboxPatternDefinition() {
  }

  public DestinyDefinitionsDestinySandboxPatternDefinition filters(List<DestinyDefinitionsDestinyArrangementRegionFilterDefinition> filters) {
    this.filters = filters;
    return this;
  }

  public DestinyDefinitionsDestinySandboxPatternDefinition addFiltersItem(DestinyDefinitionsDestinyArrangementRegionFilterDefinition filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyArrangementRegionFilterDefinition> getFilters() {
    return filters;
  }

  public void setFilters(List<DestinyDefinitionsDestinyArrangementRegionFilterDefinition> filters) {
    this.filters = filters;
  }


  public DestinyDefinitionsDestinySandboxPatternDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDestinySandboxPatternDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinySandboxPatternDefinition patternGlobalTagIdHash(Integer patternGlobalTagIdHash) {
    this.patternGlobalTagIdHash = patternGlobalTagIdHash;
    return this;
  }

  /**
   * Get patternGlobalTagIdHash
   * @return patternGlobalTagIdHash
   */
  @javax.annotation.Nullable
  public Integer getPatternGlobalTagIdHash() {
    return patternGlobalTagIdHash;
  }

  public void setPatternGlobalTagIdHash(Integer patternGlobalTagIdHash) {
    this.patternGlobalTagIdHash = patternGlobalTagIdHash;
  }


  public DestinyDefinitionsDestinySandboxPatternDefinition patternHash(Integer patternHash) {
    this.patternHash = patternHash;
    return this;
  }

  /**
   * Get patternHash
   * @return patternHash
   */
  @javax.annotation.Nullable
  public Integer getPatternHash() {
    return patternHash;
  }

  public void setPatternHash(Integer patternHash) {
    this.patternHash = patternHash;
  }


  public DestinyDefinitionsDestinySandboxPatternDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsDestinySandboxPatternDefinition weaponContentGroupHash(Integer weaponContentGroupHash) {
    this.weaponContentGroupHash = weaponContentGroupHash;
    return this;
  }

  /**
   * Get weaponContentGroupHash
   * @return weaponContentGroupHash
   */
  @javax.annotation.Nullable
  public Integer getWeaponContentGroupHash() {
    return weaponContentGroupHash;
  }

  public void setWeaponContentGroupHash(Integer weaponContentGroupHash) {
    this.weaponContentGroupHash = weaponContentGroupHash;
  }


  public DestinyDefinitionsDestinySandboxPatternDefinition weaponTranslationGroupHash(Integer weaponTranslationGroupHash) {
    this.weaponTranslationGroupHash = weaponTranslationGroupHash;
    return this;
  }

  /**
   * Get weaponTranslationGroupHash
   * @return weaponTranslationGroupHash
   */
  @javax.annotation.Nullable
  public Integer getWeaponTranslationGroupHash() {
    return weaponTranslationGroupHash;
  }

  public void setWeaponTranslationGroupHash(Integer weaponTranslationGroupHash) {
    this.weaponTranslationGroupHash = weaponTranslationGroupHash;
  }


  public DestinyDefinitionsDestinySandboxPatternDefinition weaponType(Integer weaponType) {
    this.weaponType = weaponType;
    return this;
  }

  /**
   * Get weaponType
   * @return weaponType
   */
  @javax.annotation.Nullable
  public Integer getWeaponType() {
    return weaponType;
  }

  public void setWeaponType(Integer weaponType) {
    this.weaponType = weaponType;
  }


  public DestinyDefinitionsDestinySandboxPatternDefinition weaponTypeHash(Integer weaponTypeHash) {
    this.weaponTypeHash = weaponTypeHash;
    return this;
  }

  /**
   * Get weaponTypeHash
   * @return weaponTypeHash
   */
  @javax.annotation.Nullable
  public Integer getWeaponTypeHash() {
    return weaponTypeHash;
  }

  public void setWeaponTypeHash(Integer weaponTypeHash) {
    this.weaponTypeHash = weaponTypeHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinySandboxPatternDefinition destinyDefinitionsDestinySandboxPatternDefinition = (DestinyDefinitionsDestinySandboxPatternDefinition) o;
    return Objects.equals(this.filters, destinyDefinitionsDestinySandboxPatternDefinition.filters) &&
        Objects.equals(this.hash, destinyDefinitionsDestinySandboxPatternDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinySandboxPatternDefinition.index) &&
        Objects.equals(this.patternGlobalTagIdHash, destinyDefinitionsDestinySandboxPatternDefinition.patternGlobalTagIdHash) &&
        Objects.equals(this.patternHash, destinyDefinitionsDestinySandboxPatternDefinition.patternHash) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinySandboxPatternDefinition.redacted) &&
        Objects.equals(this.weaponContentGroupHash, destinyDefinitionsDestinySandboxPatternDefinition.weaponContentGroupHash) &&
        Objects.equals(this.weaponTranslationGroupHash, destinyDefinitionsDestinySandboxPatternDefinition.weaponTranslationGroupHash) &&
        Objects.equals(this.weaponType, destinyDefinitionsDestinySandboxPatternDefinition.weaponType) &&
        Objects.equals(this.weaponTypeHash, destinyDefinitionsDestinySandboxPatternDefinition.weaponTypeHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filters, hash, index, patternGlobalTagIdHash, patternHash, redacted, weaponContentGroupHash, weaponTranslationGroupHash, weaponType, weaponTypeHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinySandboxPatternDefinition {\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    patternGlobalTagIdHash: ").append(toIndentedString(patternGlobalTagIdHash)).append("\n");
    sb.append("    patternHash: ").append(toIndentedString(patternHash)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    weaponContentGroupHash: ").append(toIndentedString(weaponContentGroupHash)).append("\n");
    sb.append("    weaponTranslationGroupHash: ").append(toIndentedString(weaponTranslationGroupHash)).append("\n");
    sb.append("    weaponType: ").append(toIndentedString(weaponType)).append("\n");
    sb.append("    weaponTypeHash: ").append(toIndentedString(weaponTypeHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filters");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("patternGlobalTagIdHash");
    openapiFields.add("patternHash");
    openapiFields.add("redacted");
    openapiFields.add("weaponContentGroupHash");
    openapiFields.add("weaponTranslationGroupHash");
    openapiFields.add("weaponType");
    openapiFields.add("weaponTypeHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinySandboxPatternDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinySandboxPatternDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinySandboxPatternDefinition is not found in the empty JSON string", DestinyDefinitionsDestinySandboxPatternDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinySandboxPatternDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinySandboxPatternDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            DestinyDefinitionsDestinyArrangementRegionFilterDefinition.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinySandboxPatternDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinySandboxPatternDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinySandboxPatternDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinySandboxPatternDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinySandboxPatternDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinySandboxPatternDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinySandboxPatternDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinySandboxPatternDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinySandboxPatternDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinySandboxPatternDefinition
   */
  public static DestinyDefinitionsDestinySandboxPatternDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinySandboxPatternDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinySandboxPatternDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

