/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A subclass of DestinyItemQuantity, that provides not just the item and its quantity but also information that BNet can - at some point - use internally to provide more robust runtime information about the item&#39;s qualities.  If you want it, please ask! We&#39;re just out of time to wire it up right now. Or a clever person just may do it with our existing endpoints.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem {
  public static final String SERIALIZED_NAME_HAS_CONDITIONAL_VISIBILITY = "hasConditionalVisibility";
  @SerializedName(SERIALIZED_NAME_HAS_CONDITIONAL_VISIBILITY)
  private Boolean hasConditionalVisibility;

  public static final String SERIALIZED_NAME_ITEM_HASH = "itemHash";
  @SerializedName(SERIALIZED_NAME_ITEM_HASH)
  private Integer itemHash;

  public static final String SERIALIZED_NAME_ITEM_INSTANCE_ID = "itemInstanceId";
  @SerializedName(SERIALIZED_NAME_ITEM_INSTANCE_ID)
  private Long itemInstanceId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_VENDOR_HASH = "vendorHash";
  @SerializedName(SERIALIZED_NAME_VENDOR_HASH)
  private Integer vendorHash;

  public static final String SERIALIZED_NAME_VENDOR_ITEM_INDEX = "vendorItemIndex";
  @SerializedName(SERIALIZED_NAME_VENDOR_ITEM_INDEX)
  private Integer vendorItemIndex;

  public DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem() {
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem hasConditionalVisibility(Boolean hasConditionalVisibility) {
    this.hasConditionalVisibility = hasConditionalVisibility;
    return this;
  }

  /**
   * Indicates that this item quantity may be conditionally shown or hidden, based on various sources of state. For example: server flags, account state, or character progress.
   * @return hasConditionalVisibility
   */
  @javax.annotation.Nullable
  public Boolean getHasConditionalVisibility() {
    return hasConditionalVisibility;
  }

  public void setHasConditionalVisibility(Boolean hasConditionalVisibility) {
    this.hasConditionalVisibility = hasConditionalVisibility;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem itemHash(Integer itemHash) {
    this.itemHash = itemHash;
    return this;
  }

  /**
   * The hash identifier for the item in question. Use it to look up the item&#39;s DestinyInventoryItemDefinition.
   * @return itemHash
   */
  @javax.annotation.Nullable
  public Integer getItemHash() {
    return itemHash;
  }

  public void setItemHash(Integer itemHash) {
    this.itemHash = itemHash;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem itemInstanceId(Long itemInstanceId) {
    this.itemInstanceId = itemInstanceId;
    return this;
  }

  /**
   * If this quantity is referring to a specific instance of an item, this will have the item&#39;s instance ID. Normally, this will be null.
   * @return itemInstanceId
   */
  @javax.annotation.Nullable
  public Long getItemInstanceId() {
    return itemInstanceId;
  }

  public void setItemInstanceId(Long itemInstanceId) {
    this.itemInstanceId = itemInstanceId;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem vendorHash(Integer vendorHash) {
    this.vendorHash = vendorHash;
    return this;
  }

  /**
   * The quest reward item *may* be associated with a vendor. If so, this is that vendor. Use this hash to look up the DestinyVendorDefinition.
   * @return vendorHash
   */
  @javax.annotation.Nullable
  public Integer getVendorHash() {
    return vendorHash;
  }

  public void setVendorHash(Integer vendorHash) {
    this.vendorHash = vendorHash;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem vendorItemIndex(Integer vendorItemIndex) {
    this.vendorItemIndex = vendorItemIndex;
    return this;
  }

  /**
   * The quest reward item *may* be associated with a vendor. If so, this is the index of the item being sold, which we can use at runtime to find instanced item information for the reward item.
   * @return vendorItemIndex
   */
  @javax.annotation.Nullable
  public Integer getVendorItemIndex() {
    return vendorItemIndex;
  }

  public void setVendorItemIndex(Integer vendorItemIndex) {
    this.vendorItemIndex = vendorItemIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem destinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem = (DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem) o;
    return Objects.equals(this.hasConditionalVisibility, destinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.hasConditionalVisibility) &&
        Objects.equals(this.itemHash, destinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.itemHash) &&
        Objects.equals(this.itemInstanceId, destinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.itemInstanceId) &&
        Objects.equals(this.quantity, destinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.quantity) &&
        Objects.equals(this.vendorHash, destinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.vendorHash) &&
        Objects.equals(this.vendorItemIndex, destinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.vendorItemIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasConditionalVisibility, itemHash, itemInstanceId, quantity, vendorHash, vendorItemIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem {\n");
    sb.append("    hasConditionalVisibility: ").append(toIndentedString(hasConditionalVisibility)).append("\n");
    sb.append("    itemHash: ").append(toIndentedString(itemHash)).append("\n");
    sb.append("    itemInstanceId: ").append(toIndentedString(itemInstanceId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    vendorHash: ").append(toIndentedString(vendorHash)).append("\n");
    sb.append("    vendorItemIndex: ").append(toIndentedString(vendorItemIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hasConditionalVisibility");
    openapiFields.add("itemHash");
    openapiFields.add("itemInstanceId");
    openapiFields.add("quantity");
    openapiFields.add("vendorHash");
    openapiFields.add("vendorItemIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem is not found in the empty JSON string", DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem
   */
  public static DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

