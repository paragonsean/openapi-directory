/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * As of Destiny 2, nodes can exist as part of \&quot;Exclusive Groups\&quot;. These differ from exclusive sets in that, within the group, many nodes can be activated. But the act of activating any node in the group will cause \&quot;opposing\&quot; nodes (nodes in groups that are not allowed to be activated at the same time as this group) to deactivate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyTalentExclusiveGroup {
  public static final String SERIALIZED_NAME_GROUP_HASH = "groupHash";
  @SerializedName(SERIALIZED_NAME_GROUP_HASH)
  private Integer groupHash;

  public static final String SERIALIZED_NAME_LORE_HASH = "loreHash";
  @SerializedName(SERIALIZED_NAME_LORE_HASH)
  private Integer loreHash;

  public static final String SERIALIZED_NAME_NODE_HASHES = "nodeHashes";
  @SerializedName(SERIALIZED_NAME_NODE_HASHES)
  private List<Integer> nodeHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPPOSING_GROUP_HASHES = "opposingGroupHashes";
  @SerializedName(SERIALIZED_NAME_OPPOSING_GROUP_HASHES)
  private List<Integer> opposingGroupHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPPOSING_NODE_HASHES = "opposingNodeHashes";
  @SerializedName(SERIALIZED_NAME_OPPOSING_NODE_HASHES)
  private List<Integer> opposingNodeHashes = new ArrayList<>();

  public DestinyDefinitionsDestinyTalentExclusiveGroup() {
  }

  public DestinyDefinitionsDestinyTalentExclusiveGroup groupHash(Integer groupHash) {
    this.groupHash = groupHash;
    return this;
  }

  /**
   * The identifier for this exclusive group. Only guaranteed unique within the talent grid, not globally.
   * @return groupHash
   */
  @javax.annotation.Nullable
  public Integer getGroupHash() {
    return groupHash;
  }

  public void setGroupHash(Integer groupHash) {
    this.groupHash = groupHash;
  }


  public DestinyDefinitionsDestinyTalentExclusiveGroup loreHash(Integer loreHash) {
    this.loreHash = loreHash;
    return this;
  }

  /**
   * If this group has an associated piece of lore to show next to it, this will be the identifier for that DestinyLoreDefinition.
   * @return loreHash
   */
  @javax.annotation.Nullable
  public Integer getLoreHash() {
    return loreHash;
  }

  public void setLoreHash(Integer loreHash) {
    this.loreHash = loreHash;
  }


  public DestinyDefinitionsDestinyTalentExclusiveGroup nodeHashes(List<Integer> nodeHashes) {
    this.nodeHashes = nodeHashes;
    return this;
  }

  public DestinyDefinitionsDestinyTalentExclusiveGroup addNodeHashesItem(Integer nodeHashesItem) {
    if (this.nodeHashes == null) {
      this.nodeHashes = new ArrayList<>();
    }
    this.nodeHashes.add(nodeHashesItem);
    return this;
  }

  /**
   * A quick reference of the talent nodes that are part of this group, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)
   * @return nodeHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getNodeHashes() {
    return nodeHashes;
  }

  public void setNodeHashes(List<Integer> nodeHashes) {
    this.nodeHashes = nodeHashes;
  }


  public DestinyDefinitionsDestinyTalentExclusiveGroup opposingGroupHashes(List<Integer> opposingGroupHashes) {
    this.opposingGroupHashes = opposingGroupHashes;
    return this;
  }

  public DestinyDefinitionsDestinyTalentExclusiveGroup addOpposingGroupHashesItem(Integer opposingGroupHashesItem) {
    if (this.opposingGroupHashes == null) {
      this.opposingGroupHashes = new ArrayList<>();
    }
    this.opposingGroupHashes.add(opposingGroupHashesItem);
    return this;
  }

  /**
   * A quick reference of Groups whose nodes will be deactivated if any node in this group is activated.
   * @return opposingGroupHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getOpposingGroupHashes() {
    return opposingGroupHashes;
  }

  public void setOpposingGroupHashes(List<Integer> opposingGroupHashes) {
    this.opposingGroupHashes = opposingGroupHashes;
  }


  public DestinyDefinitionsDestinyTalentExclusiveGroup opposingNodeHashes(List<Integer> opposingNodeHashes) {
    this.opposingNodeHashes = opposingNodeHashes;
    return this;
  }

  public DestinyDefinitionsDestinyTalentExclusiveGroup addOpposingNodeHashesItem(Integer opposingNodeHashesItem) {
    if (this.opposingNodeHashes == null) {
      this.opposingNodeHashes = new ArrayList<>();
    }
    this.opposingNodeHashes.add(opposingNodeHashesItem);
    return this;
  }

  /**
   * A quick reference of Nodes that will be deactivated if any node in this group is activated, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)
   * @return opposingNodeHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getOpposingNodeHashes() {
    return opposingNodeHashes;
  }

  public void setOpposingNodeHashes(List<Integer> opposingNodeHashes) {
    this.opposingNodeHashes = opposingNodeHashes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyTalentExclusiveGroup destinyDefinitionsDestinyTalentExclusiveGroup = (DestinyDefinitionsDestinyTalentExclusiveGroup) o;
    return Objects.equals(this.groupHash, destinyDefinitionsDestinyTalentExclusiveGroup.groupHash) &&
        Objects.equals(this.loreHash, destinyDefinitionsDestinyTalentExclusiveGroup.loreHash) &&
        Objects.equals(this.nodeHashes, destinyDefinitionsDestinyTalentExclusiveGroup.nodeHashes) &&
        Objects.equals(this.opposingGroupHashes, destinyDefinitionsDestinyTalentExclusiveGroup.opposingGroupHashes) &&
        Objects.equals(this.opposingNodeHashes, destinyDefinitionsDestinyTalentExclusiveGroup.opposingNodeHashes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupHash, loreHash, nodeHashes, opposingGroupHashes, opposingNodeHashes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyTalentExclusiveGroup {\n");
    sb.append("    groupHash: ").append(toIndentedString(groupHash)).append("\n");
    sb.append("    loreHash: ").append(toIndentedString(loreHash)).append("\n");
    sb.append("    nodeHashes: ").append(toIndentedString(nodeHashes)).append("\n");
    sb.append("    opposingGroupHashes: ").append(toIndentedString(opposingGroupHashes)).append("\n");
    sb.append("    opposingNodeHashes: ").append(toIndentedString(opposingNodeHashes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupHash");
    openapiFields.add("loreHash");
    openapiFields.add("nodeHashes");
    openapiFields.add("opposingGroupHashes");
    openapiFields.add("opposingNodeHashes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyTalentExclusiveGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyTalentExclusiveGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyTalentExclusiveGroup is not found in the empty JSON string", DestinyDefinitionsDestinyTalentExclusiveGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyTalentExclusiveGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyTalentExclusiveGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("nodeHashes") != null && !jsonObj.get("nodeHashes").isJsonNull() && !jsonObj.get("nodeHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeHashes` to be an array in the JSON string but got `%s`", jsonObj.get("nodeHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("opposingGroupHashes") != null && !jsonObj.get("opposingGroupHashes").isJsonNull() && !jsonObj.get("opposingGroupHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `opposingGroupHashes` to be an array in the JSON string but got `%s`", jsonObj.get("opposingGroupHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("opposingNodeHashes") != null && !jsonObj.get("opposingNodeHashes").isJsonNull() && !jsonObj.get("opposingNodeHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `opposingNodeHashes` to be an array in the JSON string but got `%s`", jsonObj.get("opposingNodeHashes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyTalentExclusiveGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyTalentExclusiveGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyTalentExclusiveGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyTalentExclusiveGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyTalentExclusiveGroup>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyTalentExclusiveGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyTalentExclusiveGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyTalentExclusiveGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyTalentExclusiveGroup
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyTalentExclusiveGroup
   */
  public static DestinyDefinitionsDestinyTalentExclusiveGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyTalentExclusiveGroup.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyTalentExclusiveGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

