/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition;
import org.openapitools.client.model.DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition;
import org.openapitools.client.model.DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition;
import org.openapitools.client.model.DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition;
import org.openapitools.client.model.DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition;
import org.openapitools.client.model.DestinyDefinitionsDirectorDestinyLinkedGraphDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a Map View in the director: be them overview views, destination views, or other.  They have nodes which map to activities, and other various visual elements that we (or others) may or may not be able to use.  Activity graphs, most importantly, have nodes which can have activities in various states of playability.  Unfortunately, activity graphs are combined at runtime with Game UI-only assets such as fragments of map images, various in-game special effects, decals etc... that we don&#39;t get in these definitions.  If we end up having time, we may end up trying to manually populate those here: but the last time we tried that, before the lead-up to D1, it proved to be unmaintainable as the game&#39;s content changed. So don&#39;t bet the farm on us providing that content in this definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDirectorDestinyActivityGraphDefinition {
  public static final String SERIALIZED_NAME_ART_ELEMENTS = "artElements";
  @SerializedName(SERIALIZED_NAME_ART_ELEMENTS)
  private List<DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition> artElements = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTIONS = "connections";
  @SerializedName(SERIALIZED_NAME_CONNECTIONS)
  private List<DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition> connections = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_OBJECTIVES = "displayObjectives";
  @SerializedName(SERIALIZED_NAME_DISPLAY_OBJECTIVES)
  private List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition> displayObjectives = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_PROGRESSIONS = "displayProgressions";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROGRESSIONS)
  private List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition> displayProgressions = new ArrayList<>();

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_LINKED_GRAPHS = "linkedGraphs";
  @SerializedName(SERIALIZED_NAME_LINKED_GRAPHS)
  private List<DestinyDefinitionsDirectorDestinyLinkedGraphDefinition> linkedGraphs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition> nodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition() {
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition artElements(List<DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition> artElements) {
    this.artElements = artElements;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition addArtElementsItem(DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition artElementsItem) {
    if (this.artElements == null) {
      this.artElements = new ArrayList<>();
    }
    this.artElements.add(artElementsItem);
    return this;
  }

  /**
   * Represents one-off/special UI elements that appear on the map.
   * @return artElements
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition> getArtElements() {
    return artElements;
  }

  public void setArtElements(List<DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition> artElements) {
    this.artElements = artElements;
  }


  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition connections(List<DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition> connections) {
    this.connections = connections;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition addConnectionsItem(DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition connectionsItem) {
    if (this.connections == null) {
      this.connections = new ArrayList<>();
    }
    this.connections.add(connectionsItem);
    return this;
  }

  /**
   * Represents connections between graph nodes. However, it lacks context that we&#39;d need to make good use of it.
   * @return connections
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition> getConnections() {
    return connections;
  }

  public void setConnections(List<DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition> connections) {
    this.connections = connections;
  }


  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition displayObjectives(List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition> displayObjectives) {
    this.displayObjectives = displayObjectives;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition addDisplayObjectivesItem(DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition displayObjectivesItem) {
    if (this.displayObjectives == null) {
      this.displayObjectives = new ArrayList<>();
    }
    this.displayObjectives.add(displayObjectivesItem);
    return this;
  }

  /**
   * Objectives can display on maps, and this is supposedly metadata for that. I have not had the time to analyze the details of what is useful within however: we could be missing important data to make this work. Expect this property to be expanded on later if possible.
   * @return displayObjectives
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition> getDisplayObjectives() {
    return displayObjectives;
  }

  public void setDisplayObjectives(List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition> displayObjectives) {
    this.displayObjectives = displayObjectives;
  }


  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition displayProgressions(List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition> displayProgressions) {
    this.displayProgressions = displayProgressions;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition addDisplayProgressionsItem(DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition displayProgressionsItem) {
    if (this.displayProgressions == null) {
      this.displayProgressions = new ArrayList<>();
    }
    this.displayProgressions.add(displayProgressionsItem);
    return this;
  }

  /**
   * Progressions can also display on maps, but similarly to displayObjectives we appear to lack some required information and context right now. We will have to look into it later and add more data if possible.
   * @return displayProgressions
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition> getDisplayProgressions() {
    return displayProgressions;
  }

  public void setDisplayProgressions(List<DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition> displayProgressions) {
    this.displayProgressions = displayProgressions;
  }


  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition linkedGraphs(List<DestinyDefinitionsDirectorDestinyLinkedGraphDefinition> linkedGraphs) {
    this.linkedGraphs = linkedGraphs;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition addLinkedGraphsItem(DestinyDefinitionsDirectorDestinyLinkedGraphDefinition linkedGraphsItem) {
    if (this.linkedGraphs == null) {
      this.linkedGraphs = new ArrayList<>();
    }
    this.linkedGraphs.add(linkedGraphsItem);
    return this;
  }

  /**
   * Represents links between this Activity Graph and other ones.
   * @return linkedGraphs
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDirectorDestinyLinkedGraphDefinition> getLinkedGraphs() {
    return linkedGraphs;
  }

  public void setLinkedGraphs(List<DestinyDefinitionsDirectorDestinyLinkedGraphDefinition> linkedGraphs) {
    this.linkedGraphs = linkedGraphs;
  }


  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition nodes(List<DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition> nodes) {
    this.nodes = nodes;
    return this;
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition addNodesItem(DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

  /**
   * These represent the visual \&quot;nodes\&quot; on the map&#39;s view. These are the activities you can click on in the map.
   * @return nodes
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition> getNodes() {
    return nodes;
  }

  public void setNodes(List<DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition> nodes) {
    this.nodes = nodes;
  }


  public DestinyDefinitionsDirectorDestinyActivityGraphDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDirectorDestinyActivityGraphDefinition destinyDefinitionsDirectorDestinyActivityGraphDefinition = (DestinyDefinitionsDirectorDestinyActivityGraphDefinition) o;
    return Objects.equals(this.artElements, destinyDefinitionsDirectorDestinyActivityGraphDefinition.artElements) &&
        Objects.equals(this.connections, destinyDefinitionsDirectorDestinyActivityGraphDefinition.connections) &&
        Objects.equals(this.displayObjectives, destinyDefinitionsDirectorDestinyActivityGraphDefinition.displayObjectives) &&
        Objects.equals(this.displayProgressions, destinyDefinitionsDirectorDestinyActivityGraphDefinition.displayProgressions) &&
        Objects.equals(this.hash, destinyDefinitionsDirectorDestinyActivityGraphDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDirectorDestinyActivityGraphDefinition.index) &&
        Objects.equals(this.linkedGraphs, destinyDefinitionsDirectorDestinyActivityGraphDefinition.linkedGraphs) &&
        Objects.equals(this.nodes, destinyDefinitionsDirectorDestinyActivityGraphDefinition.nodes) &&
        Objects.equals(this.redacted, destinyDefinitionsDirectorDestinyActivityGraphDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artElements, connections, displayObjectives, displayProgressions, hash, index, linkedGraphs, nodes, redacted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDirectorDestinyActivityGraphDefinition {\n");
    sb.append("    artElements: ").append(toIndentedString(artElements)).append("\n");
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    displayObjectives: ").append(toIndentedString(displayObjectives)).append("\n");
    sb.append("    displayProgressions: ").append(toIndentedString(displayProgressions)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    linkedGraphs: ").append(toIndentedString(linkedGraphs)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artElements");
    openapiFields.add("connections");
    openapiFields.add("displayObjectives");
    openapiFields.add("displayProgressions");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("linkedGraphs");
    openapiFields.add("nodes");
    openapiFields.add("redacted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDirectorDestinyActivityGraphDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDirectorDestinyActivityGraphDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDirectorDestinyActivityGraphDefinition is not found in the empty JSON string", DestinyDefinitionsDirectorDestinyActivityGraphDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDirectorDestinyActivityGraphDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDirectorDestinyActivityGraphDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("artElements") != null && !jsonObj.get("artElements").isJsonNull()) {
        JsonArray jsonArrayartElements = jsonObj.getAsJsonArray("artElements");
        if (jsonArrayartElements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artElements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artElements` to be an array in the JSON string but got `%s`", jsonObj.get("artElements").toString()));
          }

          // validate the optional field `artElements` (array)
          for (int i = 0; i < jsonArrayartElements.size(); i++) {
            DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition.validateJsonElement(jsonArrayartElements.get(i));
          };
        }
      }
      if (jsonObj.get("connections") != null && !jsonObj.get("connections").isJsonNull()) {
        JsonArray jsonArrayconnections = jsonObj.getAsJsonArray("connections");
        if (jsonArrayconnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connections` to be an array in the JSON string but got `%s`", jsonObj.get("connections").toString()));
          }

          // validate the optional field `connections` (array)
          for (int i = 0; i < jsonArrayconnections.size(); i++) {
            DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition.validateJsonElement(jsonArrayconnections.get(i));
          };
        }
      }
      if (jsonObj.get("displayObjectives") != null && !jsonObj.get("displayObjectives").isJsonNull()) {
        JsonArray jsonArraydisplayObjectives = jsonObj.getAsJsonArray("displayObjectives");
        if (jsonArraydisplayObjectives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("displayObjectives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `displayObjectives` to be an array in the JSON string but got `%s`", jsonObj.get("displayObjectives").toString()));
          }

          // validate the optional field `displayObjectives` (array)
          for (int i = 0; i < jsonArraydisplayObjectives.size(); i++) {
            DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition.validateJsonElement(jsonArraydisplayObjectives.get(i));
          };
        }
      }
      if (jsonObj.get("displayProgressions") != null && !jsonObj.get("displayProgressions").isJsonNull()) {
        JsonArray jsonArraydisplayProgressions = jsonObj.getAsJsonArray("displayProgressions");
        if (jsonArraydisplayProgressions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("displayProgressions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `displayProgressions` to be an array in the JSON string but got `%s`", jsonObj.get("displayProgressions").toString()));
          }

          // validate the optional field `displayProgressions` (array)
          for (int i = 0; i < jsonArraydisplayProgressions.size(); i++) {
            DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition.validateJsonElement(jsonArraydisplayProgressions.get(i));
          };
        }
      }
      if (jsonObj.get("linkedGraphs") != null && !jsonObj.get("linkedGraphs").isJsonNull()) {
        JsonArray jsonArraylinkedGraphs = jsonObj.getAsJsonArray("linkedGraphs");
        if (jsonArraylinkedGraphs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("linkedGraphs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `linkedGraphs` to be an array in the JSON string but got `%s`", jsonObj.get("linkedGraphs").toString()));
          }

          // validate the optional field `linkedGraphs` (array)
          for (int i = 0; i < jsonArraylinkedGraphs.size(); i++) {
            DestinyDefinitionsDirectorDestinyLinkedGraphDefinition.validateJsonElement(jsonArraylinkedGraphs.get(i));
          };
        }
      }
      if (jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) {
        JsonArray jsonArraynodes = jsonObj.getAsJsonArray("nodes");
        if (jsonArraynodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
          }

          // validate the optional field `nodes` (array)
          for (int i = 0; i < jsonArraynodes.size(); i++) {
            DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition.validateJsonElement(jsonArraynodes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDirectorDestinyActivityGraphDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDirectorDestinyActivityGraphDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDirectorDestinyActivityGraphDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDirectorDestinyActivityGraphDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDirectorDestinyActivityGraphDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDirectorDestinyActivityGraphDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDirectorDestinyActivityGraphDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDirectorDestinyActivityGraphDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDirectorDestinyActivityGraphDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDirectorDestinyActivityGraphDefinition
   */
  public static DestinyDefinitionsDirectorDestinyActivityGraphDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDirectorDestinyActivityGraphDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDirectorDestinyActivityGraphDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

