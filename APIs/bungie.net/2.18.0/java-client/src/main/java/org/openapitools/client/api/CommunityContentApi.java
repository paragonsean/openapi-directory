/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CommunityContentGetCommunityContent200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommunityContentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommunityContentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommunityContentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for communityContentGetCommunityContent
     * @param mediaFilter The type of media to get (required)
     * @param page Zero based page (required)
     * @param sort The sort mode. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communityContentGetCommunityContentCall(Integer mediaFilter, Integer page, Integer sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CommunityContent/Get/{sort}/{mediaFilter}/{page}/"
            .replace("{" + "mediaFilter" + "}", localVarApiClient.escapeString(mediaFilter.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()))
            .replace("{" + "sort" + "}", localVarApiClient.escapeString(sort.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call communityContentGetCommunityContentValidateBeforeCall(Integer mediaFilter, Integer page, Integer sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaFilter' is set
        if (mediaFilter == null) {
            throw new ApiException("Missing the required parameter 'mediaFilter' when calling communityContentGetCommunityContent(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling communityContentGetCommunityContent(Async)");
        }

        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling communityContentGetCommunityContent(Async)");
        }

        return communityContentGetCommunityContentCall(mediaFilter, page, sort, _callback);

    }

    /**
     * 
     * Returns community content.
     * @param mediaFilter The type of media to get (required)
     * @param page Zero based page (required)
     * @param sort The sort mode. (required)
     * @return CommunityContentGetCommunityContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public CommunityContentGetCommunityContent200Response communityContentGetCommunityContent(Integer mediaFilter, Integer page, Integer sort) throws ApiException {
        ApiResponse<CommunityContentGetCommunityContent200Response> localVarResp = communityContentGetCommunityContentWithHttpInfo(mediaFilter, page, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns community content.
     * @param mediaFilter The type of media to get (required)
     * @param page Zero based page (required)
     * @param sort The sort mode. (required)
     * @return ApiResponse&lt;CommunityContentGetCommunityContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunityContentGetCommunityContent200Response> communityContentGetCommunityContentWithHttpInfo(Integer mediaFilter, Integer page, Integer sort) throws ApiException {
        okhttp3.Call localVarCall = communityContentGetCommunityContentValidateBeforeCall(mediaFilter, page, sort, null);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns community content.
     * @param mediaFilter The type of media to get (required)
     * @param page Zero based page (required)
     * @param sort The sort mode. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call communityContentGetCommunityContentAsync(Integer mediaFilter, Integer page, Integer sort, final ApiCallback<CommunityContentGetCommunityContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = communityContentGetCommunityContentValidateBeforeCall(mediaFilter, page, sort, _callback);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
