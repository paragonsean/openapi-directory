/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DestinyArtifactsDestinyArtifactCharacterScoped;
import org.openapitools.client.model.DestinyDestinyProgression;
import org.openapitools.client.model.DestinyEntitiesItemsDestinyItemPerksComponent;
import org.openapitools.client.model.DestinyMilestonesDestinyMilestone;
import org.openapitools.client.model.DestinyProgressionDestinyFactionProgression;
import org.openapitools.client.model.DestinyQuestsDestinyObjectiveProgress;
import org.openapitools.client.model.DestinyQuestsDestinyQuestStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This component returns anything that could be considered \&quot;Progression\&quot; on a user: data where the user is gaining levels, reputation, completions, rewards, etc...
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyEntitiesCharactersDestinyCharacterProgressionComponent {
  public static final String SERIALIZED_NAME_CHECKLISTS = "checklists";
  @SerializedName(SERIALIZED_NAME_CHECKLISTS)
  private Map<String, Map<String, Boolean>> checklists = new HashMap<>();

  public static final String SERIALIZED_NAME_FACTIONS = "factions";
  @SerializedName(SERIALIZED_NAME_FACTIONS)
  private Map<String, DestinyProgressionDestinyFactionProgression> factions = new HashMap<>();

  public static final String SERIALIZED_NAME_MILESTONES = "milestones";
  @SerializedName(SERIALIZED_NAME_MILESTONES)
  private Map<String, DestinyMilestonesDestinyMilestone> milestones = new HashMap<>();

  public static final String SERIALIZED_NAME_PROGRESSIONS = "progressions";
  @SerializedName(SERIALIZED_NAME_PROGRESSIONS)
  private Map<String, DestinyDestinyProgression> progressions = new HashMap<>();

  public static final String SERIALIZED_NAME_QUESTS = "quests";
  @SerializedName(SERIALIZED_NAME_QUESTS)
  private List<DestinyQuestsDestinyQuestStatus> quests = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEASONAL_ARTIFACT = "seasonalArtifact";
  @SerializedName(SERIALIZED_NAME_SEASONAL_ARTIFACT)
  private DestinyArtifactsDestinyArtifactCharacterScoped seasonalArtifact;

  public static final String SERIALIZED_NAME_UNINSTANCED_ITEM_OBJECTIVES = "uninstancedItemObjectives";
  @SerializedName(SERIALIZED_NAME_UNINSTANCED_ITEM_OBJECTIVES)
  private Map<String, List<DestinyQuestsDestinyObjectiveProgress>> uninstancedItemObjectives = new HashMap<>();

  public static final String SERIALIZED_NAME_UNINSTANCED_ITEM_PERKS = "uninstancedItemPerks";
  @SerializedName(SERIALIZED_NAME_UNINSTANCED_ITEM_PERKS)
  private Map<String, DestinyEntitiesItemsDestinyItemPerksComponent> uninstancedItemPerks = new HashMap<>();

  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent() {
  }

  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent checklists(Map<String, Map<String, Boolean>> checklists) {
    this.checklists = checklists;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent putChecklistsItem(String key, Map<String, Boolean> checklistsItem) {
    if (this.checklists == null) {
      this.checklists = new HashMap<>();
    }
    this.checklists.put(key, checklistsItem);
    return this;
  }

  /**
   * The set of checklists that can be examined for this specific character, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)  For each checklist returned, its value is itself a Dictionary keyed by the checklist&#39;s hash identifier with the value being a boolean indicating if it&#39;s been discovered yet.
   * @return checklists
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, Boolean>> getChecklists() {
    return checklists;
  }

  public void setChecklists(Map<String, Map<String, Boolean>> checklists) {
    this.checklists = checklists;
  }


  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent factions(Map<String, DestinyProgressionDestinyFactionProgression> factions) {
    this.factions = factions;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent putFactionsItem(String key, DestinyProgressionDestinyFactionProgression factionsItem) {
    if (this.factions == null) {
      this.factions = new HashMap<>();
    }
    this.factions.put(key, factionsItem);
    return this;
  }

  /**
   * A dictionary of all known Factions, keyed by the Faction&#39;s hash. It contains data about this character&#39;s status with the faction.
   * @return factions
   */
  @javax.annotation.Nullable
  public Map<String, DestinyProgressionDestinyFactionProgression> getFactions() {
    return factions;
  }

  public void setFactions(Map<String, DestinyProgressionDestinyFactionProgression> factions) {
    this.factions = factions;
  }


  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent milestones(Map<String, DestinyMilestonesDestinyMilestone> milestones) {
    this.milestones = milestones;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent putMilestonesItem(String key, DestinyMilestonesDestinyMilestone milestonesItem) {
    if (this.milestones == null) {
      this.milestones = new HashMap<>();
    }
    this.milestones.put(key, milestonesItem);
    return this;
  }

  /**
   * Milestones are related to the simple progressions shown in the game, but return additional and hopefully helpful information for users about the specifics of the Milestone&#39;s status.
   * @return milestones
   */
  @javax.annotation.Nullable
  public Map<String, DestinyMilestonesDestinyMilestone> getMilestones() {
    return milestones;
  }

  public void setMilestones(Map<String, DestinyMilestonesDestinyMilestone> milestones) {
    this.milestones = milestones;
  }


  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent progressions(Map<String, DestinyDestinyProgression> progressions) {
    this.progressions = progressions;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent putProgressionsItem(String key, DestinyDestinyProgression progressionsItem) {
    if (this.progressions == null) {
      this.progressions = new HashMap<>();
    }
    this.progressions.put(key, progressionsItem);
    return this;
  }

  /**
   * A Dictionary of all known progressions for the Character, keyed by the Progression&#39;s hash.  Not all progressions have user-facing data, but those who do will have that data contained in the DestinyProgressionDefinition.
   * @return progressions
   */
  @javax.annotation.Nullable
  public Map<String, DestinyDestinyProgression> getProgressions() {
    return progressions;
  }

  public void setProgressions(Map<String, DestinyDestinyProgression> progressions) {
    this.progressions = progressions;
  }


  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent quests(List<DestinyQuestsDestinyQuestStatus> quests) {
    this.quests = quests;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent addQuestsItem(DestinyQuestsDestinyQuestStatus questsItem) {
    if (this.quests == null) {
      this.quests = new ArrayList<>();
    }
    this.quests.add(questsItem);
    return this;
  }

  /**
   * If the user has any active quests, the quests&#39; statuses will be returned here.   Note that quests have been largely supplanted by Milestones, but that doesn&#39;t mean that they won&#39;t make a comeback independent of milestones at some point.   (Fun fact: quests came back as I feared they would, but we never looped back to populate this... I&#39;m going to put that in the backlog.)
   * @return quests
   */
  @javax.annotation.Nullable
  public List<DestinyQuestsDestinyQuestStatus> getQuests() {
    return quests;
  }

  public void setQuests(List<DestinyQuestsDestinyQuestStatus> quests) {
    this.quests = quests;
  }


  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent seasonalArtifact(DestinyArtifactsDestinyArtifactCharacterScoped seasonalArtifact) {
    this.seasonalArtifact = seasonalArtifact;
    return this;
  }

  /**
   * Data related to your progress on the current season&#39;s artifact that can vary per character.
   * @return seasonalArtifact
   */
  @javax.annotation.Nullable
  public DestinyArtifactsDestinyArtifactCharacterScoped getSeasonalArtifact() {
    return seasonalArtifact;
  }

  public void setSeasonalArtifact(DestinyArtifactsDestinyArtifactCharacterScoped seasonalArtifact) {
    this.seasonalArtifact = seasonalArtifact;
  }


  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent uninstancedItemObjectives(Map<String, List<DestinyQuestsDestinyObjectiveProgress>> uninstancedItemObjectives) {
    this.uninstancedItemObjectives = uninstancedItemObjectives;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent putUninstancedItemObjectivesItem(String key, List<DestinyQuestsDestinyObjectiveProgress> uninstancedItemObjectivesItem) {
    if (this.uninstancedItemObjectives == null) {
      this.uninstancedItemObjectives = new HashMap<>();
    }
    this.uninstancedItemObjectives.put(key, uninstancedItemObjectivesItem);
    return this;
  }

  /**
   * Sometimes, you have items in your inventory that don&#39;t have instances, but still have Objective information. This provides you that objective information for uninstanced items.   This dictionary is keyed by the item&#39;s hash: which you can use to look up the name and description for the overall task(s) implied by the objective. The value is the list of objectives for this item, and their statuses.
   * @return uninstancedItemObjectives
   */
  @javax.annotation.Nullable
  public Map<String, List<DestinyQuestsDestinyObjectiveProgress>> getUninstancedItemObjectives() {
    return uninstancedItemObjectives;
  }

  public void setUninstancedItemObjectives(Map<String, List<DestinyQuestsDestinyObjectiveProgress>> uninstancedItemObjectives) {
    this.uninstancedItemObjectives = uninstancedItemObjectives;
  }


  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent uninstancedItemPerks(Map<String, DestinyEntitiesItemsDestinyItemPerksComponent> uninstancedItemPerks) {
    this.uninstancedItemPerks = uninstancedItemPerks;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterProgressionComponent putUninstancedItemPerksItem(String key, DestinyEntitiesItemsDestinyItemPerksComponent uninstancedItemPerksItem) {
    if (this.uninstancedItemPerks == null) {
      this.uninstancedItemPerks = new HashMap<>();
    }
    this.uninstancedItemPerks.put(key, uninstancedItemPerksItem);
    return this;
  }

  /**
   * Sometimes, you have items in your inventory that don&#39;t have instances, but still have perks (for example: Trials passage cards). This gives you the perk information for uninstanced items.  This dictionary is keyed by item hash, which you can use to look up the corresponding item definition. The value is the list of perks states for the item.
   * @return uninstancedItemPerks
   */
  @javax.annotation.Nullable
  public Map<String, DestinyEntitiesItemsDestinyItemPerksComponent> getUninstancedItemPerks() {
    return uninstancedItemPerks;
  }

  public void setUninstancedItemPerks(Map<String, DestinyEntitiesItemsDestinyItemPerksComponent> uninstancedItemPerks) {
    this.uninstancedItemPerks = uninstancedItemPerks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesCharactersDestinyCharacterProgressionComponent destinyEntitiesCharactersDestinyCharacterProgressionComponent = (DestinyEntitiesCharactersDestinyCharacterProgressionComponent) o;
    return Objects.equals(this.checklists, destinyEntitiesCharactersDestinyCharacterProgressionComponent.checklists) &&
        Objects.equals(this.factions, destinyEntitiesCharactersDestinyCharacterProgressionComponent.factions) &&
        Objects.equals(this.milestones, destinyEntitiesCharactersDestinyCharacterProgressionComponent.milestones) &&
        Objects.equals(this.progressions, destinyEntitiesCharactersDestinyCharacterProgressionComponent.progressions) &&
        Objects.equals(this.quests, destinyEntitiesCharactersDestinyCharacterProgressionComponent.quests) &&
        Objects.equals(this.seasonalArtifact, destinyEntitiesCharactersDestinyCharacterProgressionComponent.seasonalArtifact) &&
        Objects.equals(this.uninstancedItemObjectives, destinyEntitiesCharactersDestinyCharacterProgressionComponent.uninstancedItemObjectives) &&
        Objects.equals(this.uninstancedItemPerks, destinyEntitiesCharactersDestinyCharacterProgressionComponent.uninstancedItemPerks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checklists, factions, milestones, progressions, quests, seasonalArtifact, uninstancedItemObjectives, uninstancedItemPerks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesCharactersDestinyCharacterProgressionComponent {\n");
    sb.append("    checklists: ").append(toIndentedString(checklists)).append("\n");
    sb.append("    factions: ").append(toIndentedString(factions)).append("\n");
    sb.append("    milestones: ").append(toIndentedString(milestones)).append("\n");
    sb.append("    progressions: ").append(toIndentedString(progressions)).append("\n");
    sb.append("    quests: ").append(toIndentedString(quests)).append("\n");
    sb.append("    seasonalArtifact: ").append(toIndentedString(seasonalArtifact)).append("\n");
    sb.append("    uninstancedItemObjectives: ").append(toIndentedString(uninstancedItemObjectives)).append("\n");
    sb.append("    uninstancedItemPerks: ").append(toIndentedString(uninstancedItemPerks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checklists");
    openapiFields.add("factions");
    openapiFields.add("milestones");
    openapiFields.add("progressions");
    openapiFields.add("quests");
    openapiFields.add("seasonalArtifact");
    openapiFields.add("uninstancedItemObjectives");
    openapiFields.add("uninstancedItemPerks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyEntitiesCharactersDestinyCharacterProgressionComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyEntitiesCharactersDestinyCharacterProgressionComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyEntitiesCharactersDestinyCharacterProgressionComponent is not found in the empty JSON string", DestinyEntitiesCharactersDestinyCharacterProgressionComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyEntitiesCharactersDestinyCharacterProgressionComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyEntitiesCharactersDestinyCharacterProgressionComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("quests") != null && !jsonObj.get("quests").isJsonNull()) {
        JsonArray jsonArrayquests = jsonObj.getAsJsonArray("quests");
        if (jsonArrayquests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("quests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `quests` to be an array in the JSON string but got `%s`", jsonObj.get("quests").toString()));
          }

          // validate the optional field `quests` (array)
          for (int i = 0; i < jsonArrayquests.size(); i++) {
            DestinyQuestsDestinyQuestStatus.validateJsonElement(jsonArrayquests.get(i));
          };
        }
      }
      // validate the optional field `seasonalArtifact`
      if (jsonObj.get("seasonalArtifact") != null && !jsonObj.get("seasonalArtifact").isJsonNull()) {
        DestinyArtifactsDestinyArtifactCharacterScoped.validateJsonElement(jsonObj.get("seasonalArtifact"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyEntitiesCharactersDestinyCharacterProgressionComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyEntitiesCharactersDestinyCharacterProgressionComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyEntitiesCharactersDestinyCharacterProgressionComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyEntitiesCharactersDestinyCharacterProgressionComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyEntitiesCharactersDestinyCharacterProgressionComponent>() {
           @Override
           public void write(JsonWriter out, DestinyEntitiesCharactersDestinyCharacterProgressionComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyEntitiesCharactersDestinyCharacterProgressionComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyEntitiesCharactersDestinyCharacterProgressionComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyEntitiesCharactersDestinyCharacterProgressionComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyEntitiesCharactersDestinyCharacterProgressionComponent
   */
  public static DestinyEntitiesCharactersDestinyCharacterProgressionComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyEntitiesCharactersDestinyCharacterProgressionComponent.class);
  }

  /**
   * Convert an instance of DestinyEntitiesCharactersDestinyCharacterProgressionComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

