/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsChecklistsDestinyChecklistEntryDefinition;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * By public demand, Checklists are loose sets of \&quot;things to do/things you have done\&quot; in Destiny that we were actually able to track. They include easter eggs you find in the world, unique chests you unlock, and other such data where the first time you do it is significant enough to be tracked, and you have the potential to \&quot;get them all\&quot;.  These may be account-wide, or may be per character. The status of these will be returned in related \&quot;Checklist\&quot; data coming down from API requests such as GetProfile or GetCharacter.  Generally speaking, the items in a checklist can be completed in any order: we return an ordered list which only implies the way we are showing them in our own UI, and you can feel free to alter it as you wish.  Note that, in the future, there will be something resembling the old D1 Record Books in at least some vague form. When that is created, it may be that it will supercede much or all of this Checklist data. It remains to be seen if that will be the case, so for now assume that the Checklists will still exist even after the release of D2: Forsaken.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsChecklistsDestinyChecklistDefinition {
  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_ENTRIES = "entries";
  @SerializedName(SERIALIZED_NAME_ENTRIES)
  private List<DestinyDefinitionsChecklistsDestinyChecklistEntryDefinition> entries = new ArrayList<>();

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private Integer scope;

  public static final String SERIALIZED_NAME_VIEW_ACTION_STRING = "viewActionString";
  @SerializedName(SERIALIZED_NAME_VIEW_ACTION_STRING)
  private String viewActionString;

  public DestinyDefinitionsChecklistsDestinyChecklistDefinition() {
  }

  public DestinyDefinitionsChecklistsDestinyChecklistDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsChecklistsDestinyChecklistDefinition entries(List<DestinyDefinitionsChecklistsDestinyChecklistEntryDefinition> entries) {
    this.entries = entries;
    return this;
  }

  public DestinyDefinitionsChecklistsDestinyChecklistDefinition addEntriesItem(DestinyDefinitionsChecklistsDestinyChecklistEntryDefinition entriesItem) {
    if (this.entries == null) {
      this.entries = new ArrayList<>();
    }
    this.entries.add(entriesItem);
    return this;
  }

  /**
   * The individual checklist items. Gotta catch &#39;em all.
   * @return entries
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsChecklistsDestinyChecklistEntryDefinition> getEntries() {
    return entries;
  }

  public void setEntries(List<DestinyDefinitionsChecklistsDestinyChecklistEntryDefinition> entries) {
    this.entries = entries;
  }


  public DestinyDefinitionsChecklistsDestinyChecklistDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsChecklistsDestinyChecklistDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsChecklistsDestinyChecklistDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsChecklistsDestinyChecklistDefinition scope(Integer scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Indicates whether you will find this checklist on the Profile or Character components.
   * @return scope
   */
  @javax.annotation.Nullable
  public Integer getScope() {
    return scope;
  }

  public void setScope(Integer scope) {
    this.scope = scope;
  }


  public DestinyDefinitionsChecklistsDestinyChecklistDefinition viewActionString(String viewActionString) {
    this.viewActionString = viewActionString;
    return this;
  }

  /**
   * A localized string prompting you to view the checklist.
   * @return viewActionString
   */
  @javax.annotation.Nullable
  public String getViewActionString() {
    return viewActionString;
  }

  public void setViewActionString(String viewActionString) {
    this.viewActionString = viewActionString;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsChecklistsDestinyChecklistDefinition destinyDefinitionsChecklistsDestinyChecklistDefinition = (DestinyDefinitionsChecklistsDestinyChecklistDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsChecklistsDestinyChecklistDefinition.displayProperties) &&
        Objects.equals(this.entries, destinyDefinitionsChecklistsDestinyChecklistDefinition.entries) &&
        Objects.equals(this.hash, destinyDefinitionsChecklistsDestinyChecklistDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsChecklistsDestinyChecklistDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsChecklistsDestinyChecklistDefinition.redacted) &&
        Objects.equals(this.scope, destinyDefinitionsChecklistsDestinyChecklistDefinition.scope) &&
        Objects.equals(this.viewActionString, destinyDefinitionsChecklistsDestinyChecklistDefinition.viewActionString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, entries, hash, index, redacted, scope, viewActionString);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsChecklistsDestinyChecklistDefinition {\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    viewActionString: ").append(toIndentedString(viewActionString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayProperties");
    openapiFields.add("entries");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("redacted");
    openapiFields.add("scope");
    openapiFields.add("viewActionString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsChecklistsDestinyChecklistDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsChecklistsDestinyChecklistDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsChecklistsDestinyChecklistDefinition is not found in the empty JSON string", DestinyDefinitionsChecklistsDestinyChecklistDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsChecklistsDestinyChecklistDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsChecklistsDestinyChecklistDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      if (jsonObj.get("entries") != null && !jsonObj.get("entries").isJsonNull()) {
        JsonArray jsonArrayentries = jsonObj.getAsJsonArray("entries");
        if (jsonArrayentries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entries` to be an array in the JSON string but got `%s`", jsonObj.get("entries").toString()));
          }

          // validate the optional field `entries` (array)
          for (int i = 0; i < jsonArrayentries.size(); i++) {
            DestinyDefinitionsChecklistsDestinyChecklistEntryDefinition.validateJsonElement(jsonArrayentries.get(i));
          };
        }
      }
      if ((jsonObj.get("viewActionString") != null && !jsonObj.get("viewActionString").isJsonNull()) && !jsonObj.get("viewActionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewActionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewActionString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsChecklistsDestinyChecklistDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsChecklistsDestinyChecklistDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsChecklistsDestinyChecklistDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsChecklistsDestinyChecklistDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsChecklistsDestinyChecklistDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsChecklistsDestinyChecklistDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsChecklistsDestinyChecklistDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsChecklistsDestinyChecklistDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsChecklistsDestinyChecklistDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsChecklistsDestinyChecklistDefinition
   */
  public static DestinyDefinitionsChecklistsDestinyChecklistDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsChecklistsDestinyChecklistDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsChecklistsDestinyChecklistDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

