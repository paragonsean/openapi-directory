/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StreamInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GlobalAlert
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GlobalAlert {
  public static final String SERIALIZED_NAME_ALERT_HTML = "AlertHtml";
  @SerializedName(SERIALIZED_NAME_ALERT_HTML)
  private String alertHtml;

  public static final String SERIALIZED_NAME_ALERT_KEY = "AlertKey";
  @SerializedName(SERIALIZED_NAME_ALERT_KEY)
  private String alertKey;

  public static final String SERIALIZED_NAME_ALERT_LEVEL = "AlertLevel";
  @SerializedName(SERIALIZED_NAME_ALERT_LEVEL)
  private Integer alertLevel;

  public static final String SERIALIZED_NAME_ALERT_LINK = "AlertLink";
  @SerializedName(SERIALIZED_NAME_ALERT_LINK)
  private String alertLink;

  public static final String SERIALIZED_NAME_ALERT_TIMESTAMP = "AlertTimestamp";
  @SerializedName(SERIALIZED_NAME_ALERT_TIMESTAMP)
  private OffsetDateTime alertTimestamp;

  public static final String SERIALIZED_NAME_ALERT_TYPE = "AlertType";
  @SerializedName(SERIALIZED_NAME_ALERT_TYPE)
  private Integer alertType;

  public static final String SERIALIZED_NAME_STREAM_INFO = "StreamInfo";
  @SerializedName(SERIALIZED_NAME_STREAM_INFO)
  private StreamInfo streamInfo;

  public GlobalAlert() {
  }

  public GlobalAlert alertHtml(String alertHtml) {
    this.alertHtml = alertHtml;
    return this;
  }

  /**
   * Get alertHtml
   * @return alertHtml
   */
  @javax.annotation.Nullable
  public String getAlertHtml() {
    return alertHtml;
  }

  public void setAlertHtml(String alertHtml) {
    this.alertHtml = alertHtml;
  }


  public GlobalAlert alertKey(String alertKey) {
    this.alertKey = alertKey;
    return this;
  }

  /**
   * Get alertKey
   * @return alertKey
   */
  @javax.annotation.Nullable
  public String getAlertKey() {
    return alertKey;
  }

  public void setAlertKey(String alertKey) {
    this.alertKey = alertKey;
  }


  public GlobalAlert alertLevel(Integer alertLevel) {
    this.alertLevel = alertLevel;
    return this;
  }

  /**
   * Get alertLevel
   * @return alertLevel
   */
  @javax.annotation.Nullable
  public Integer getAlertLevel() {
    return alertLevel;
  }

  public void setAlertLevel(Integer alertLevel) {
    this.alertLevel = alertLevel;
  }


  public GlobalAlert alertLink(String alertLink) {
    this.alertLink = alertLink;
    return this;
  }

  /**
   * Get alertLink
   * @return alertLink
   */
  @javax.annotation.Nullable
  public String getAlertLink() {
    return alertLink;
  }

  public void setAlertLink(String alertLink) {
    this.alertLink = alertLink;
  }


  public GlobalAlert alertTimestamp(OffsetDateTime alertTimestamp) {
    this.alertTimestamp = alertTimestamp;
    return this;
  }

  /**
   * Get alertTimestamp
   * @return alertTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAlertTimestamp() {
    return alertTimestamp;
  }

  public void setAlertTimestamp(OffsetDateTime alertTimestamp) {
    this.alertTimestamp = alertTimestamp;
  }


  public GlobalAlert alertType(Integer alertType) {
    this.alertType = alertType;
    return this;
  }

  /**
   * Get alertType
   * @return alertType
   */
  @javax.annotation.Nullable
  public Integer getAlertType() {
    return alertType;
  }

  public void setAlertType(Integer alertType) {
    this.alertType = alertType;
  }


  public GlobalAlert streamInfo(StreamInfo streamInfo) {
    this.streamInfo = streamInfo;
    return this;
  }

  /**
   * Get streamInfo
   * @return streamInfo
   */
  @javax.annotation.Nullable
  public StreamInfo getStreamInfo() {
    return streamInfo;
  }

  public void setStreamInfo(StreamInfo streamInfo) {
    this.streamInfo = streamInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalAlert globalAlert = (GlobalAlert) o;
    return Objects.equals(this.alertHtml, globalAlert.alertHtml) &&
        Objects.equals(this.alertKey, globalAlert.alertKey) &&
        Objects.equals(this.alertLevel, globalAlert.alertLevel) &&
        Objects.equals(this.alertLink, globalAlert.alertLink) &&
        Objects.equals(this.alertTimestamp, globalAlert.alertTimestamp) &&
        Objects.equals(this.alertType, globalAlert.alertType) &&
        Objects.equals(this.streamInfo, globalAlert.streamInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertHtml, alertKey, alertLevel, alertLink, alertTimestamp, alertType, streamInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalAlert {\n");
    sb.append("    alertHtml: ").append(toIndentedString(alertHtml)).append("\n");
    sb.append("    alertKey: ").append(toIndentedString(alertKey)).append("\n");
    sb.append("    alertLevel: ").append(toIndentedString(alertLevel)).append("\n");
    sb.append("    alertLink: ").append(toIndentedString(alertLink)).append("\n");
    sb.append("    alertTimestamp: ").append(toIndentedString(alertTimestamp)).append("\n");
    sb.append("    alertType: ").append(toIndentedString(alertType)).append("\n");
    sb.append("    streamInfo: ").append(toIndentedString(streamInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlertHtml");
    openapiFields.add("AlertKey");
    openapiFields.add("AlertLevel");
    openapiFields.add("AlertLink");
    openapiFields.add("AlertTimestamp");
    openapiFields.add("AlertType");
    openapiFields.add("StreamInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GlobalAlert
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GlobalAlert.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalAlert is not found in the empty JSON string", GlobalAlert.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GlobalAlert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GlobalAlert` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AlertHtml") != null && !jsonObj.get("AlertHtml").isJsonNull()) && !jsonObj.get("AlertHtml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlertHtml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlertHtml").toString()));
      }
      if ((jsonObj.get("AlertKey") != null && !jsonObj.get("AlertKey").isJsonNull()) && !jsonObj.get("AlertKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlertKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlertKey").toString()));
      }
      if ((jsonObj.get("AlertLink") != null && !jsonObj.get("AlertLink").isJsonNull()) && !jsonObj.get("AlertLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlertLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlertLink").toString()));
      }
      // validate the optional field `StreamInfo`
      if (jsonObj.get("StreamInfo") != null && !jsonObj.get("StreamInfo").isJsonNull()) {
        StreamInfo.validateJsonElement(jsonObj.get("StreamInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalAlert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalAlert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalAlert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalAlert.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalAlert>() {
           @Override
           public void write(JsonWriter out, GlobalAlert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalAlert read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GlobalAlert given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GlobalAlert
   * @throws IOException if the JSON string is invalid with respect to GlobalAlert
   */
  public static GlobalAlert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalAlert.class);
  }

  /**
   * Convert an instance of GlobalAlert to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

