/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Destiny2GetClanAggregateStats200Response;
import org.openapitools.client.model.Destiny2GetClanLeaderboards200Response;
import org.openapitools.client.model.Destiny2GetPublicVendors200Response;
import org.openapitools.client.model.Destiny2InsertSocketPlug200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PreviewApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PreviewApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PreviewApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for destiny2GetClanAggregateStats_0
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetClanAggregateStats_0Call(Long groupId, String modes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Stats/AggregateClanStats/{groupId}/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modes", modes));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetClanAggregateStats_0ValidateBeforeCall(Long groupId, String modes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling destiny2GetClanAggregateStats_0(Async)");
        }

        return destiny2GetClanAggregateStats_0Call(groupId, modes, _callback);

    }

    /**
     * 
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @return Destiny2GetClanAggregateStats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetClanAggregateStats200Response destiny2GetClanAggregateStats_0(Long groupId, String modes) throws ApiException {
        ApiResponse<Destiny2GetClanAggregateStats200Response> localVarResp = destiny2GetClanAggregateStats_0WithHttpInfo(groupId, modes);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @return ApiResponse&lt;Destiny2GetClanAggregateStats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetClanAggregateStats200Response> destiny2GetClanAggregateStats_0WithHttpInfo(Long groupId, String modes) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetClanAggregateStats_0ValidateBeforeCall(groupId, modes, null);
        Type localVarReturnType = new TypeToken<Destiny2GetClanAggregateStats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetClanAggregateStats_0Async(Long groupId, String modes, final ApiCallback<Destiny2GetClanAggregateStats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetClanAggregateStats_0ValidateBeforeCall(groupId, modes, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetClanAggregateStats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetClanLeaderboards_0
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetClanLeaderboards_0Call(Long groupId, Integer maxtop, String modes, String statid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Stats/Leaderboards/Clans/{groupId}/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxtop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxtop", maxtop));
        }

        if (modes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modes", modes));
        }

        if (statid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statid", statid));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetClanLeaderboards_0ValidateBeforeCall(Long groupId, Integer maxtop, String modes, String statid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling destiny2GetClanLeaderboards_0(Async)");
        }

        return destiny2GetClanLeaderboards_0Call(groupId, maxtop, modes, statid, _callback);

    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @return Destiny2GetClanLeaderboards200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetClanLeaderboards200Response destiny2GetClanLeaderboards_0(Long groupId, Integer maxtop, String modes, String statid) throws ApiException {
        ApiResponse<Destiny2GetClanLeaderboards200Response> localVarResp = destiny2GetClanLeaderboards_0WithHttpInfo(groupId, maxtop, modes, statid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @return ApiResponse&lt;Destiny2GetClanLeaderboards200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetClanLeaderboards200Response> destiny2GetClanLeaderboards_0WithHttpInfo(Long groupId, Integer maxtop, String modes, String statid) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetClanLeaderboards_0ValidateBeforeCall(groupId, maxtop, modes, statid, null);
        Type localVarReturnType = new TypeToken<Destiny2GetClanLeaderboards200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetClanLeaderboards_0Async(Long groupId, Integer maxtop, String modes, String statid, final ApiCallback<Destiny2GetClanLeaderboards200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetClanLeaderboards_0ValidateBeforeCall(groupId, maxtop, modes, statid, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetClanLeaderboards200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetLeaderboardsForCharacter_0
     * @param characterId The specific character to build the leaderboard around for the provided Destiny Membership. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetLeaderboardsForCharacter_0Call(Long characterId, Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/"
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()))
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxtop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxtop", maxtop));
        }

        if (modes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modes", modes));
        }

        if (statid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statid", statid));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetLeaderboardsForCharacter_0ValidateBeforeCall(Long characterId, Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling destiny2GetLeaderboardsForCharacter_0(Async)");
        }

        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetLeaderboardsForCharacter_0(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetLeaderboardsForCharacter_0(Async)");
        }

        return destiny2GetLeaderboardsForCharacter_0Call(characterId, destinyMembershipId, membershipType, maxtop, modes, statid, _callback);

    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param characterId The specific character to build the leaderboard around for the provided Destiny Membership. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @return Destiny2GetClanLeaderboards200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetClanLeaderboards200Response destiny2GetLeaderboardsForCharacter_0(Long characterId, Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid) throws ApiException {
        ApiResponse<Destiny2GetClanLeaderboards200Response> localVarResp = destiny2GetLeaderboardsForCharacter_0WithHttpInfo(characterId, destinyMembershipId, membershipType, maxtop, modes, statid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param characterId The specific character to build the leaderboard around for the provided Destiny Membership. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @return ApiResponse&lt;Destiny2GetClanLeaderboards200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetClanLeaderboards200Response> destiny2GetLeaderboardsForCharacter_0WithHttpInfo(Long characterId, Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetLeaderboardsForCharacter_0ValidateBeforeCall(characterId, destinyMembershipId, membershipType, maxtop, modes, statid, null);
        Type localVarReturnType = new TypeToken<Destiny2GetClanLeaderboards200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param characterId The specific character to build the leaderboard around for the provided Destiny Membership. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetLeaderboardsForCharacter_0Async(Long characterId, Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid, final ApiCallback<Destiny2GetClanLeaderboards200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetLeaderboardsForCharacter_0ValidateBeforeCall(characterId, destinyMembershipId, membershipType, maxtop, modes, statid, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetClanLeaderboards200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetLeaderboards_0
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetLeaderboards_0Call(Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/"
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxtop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxtop", maxtop));
        }

        if (modes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modes", modes));
        }

        if (statid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statid", statid));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetLeaderboards_0ValidateBeforeCall(Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetLeaderboards_0(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetLeaderboards_0(Async)");
        }

        return destiny2GetLeaderboards_0Call(destinyMembershipId, membershipType, maxtop, modes, statid, _callback);

    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @return Destiny2GetClanLeaderboards200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetClanLeaderboards200Response destiny2GetLeaderboards_0(Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid) throws ApiException {
        ApiResponse<Destiny2GetClanLeaderboards200Response> localVarResp = destiny2GetLeaderboards_0WithHttpInfo(destinyMembershipId, membershipType, maxtop, modes, statid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @return ApiResponse&lt;Destiny2GetClanLeaderboards200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetClanLeaderboards200Response> destiny2GetLeaderboards_0WithHttpInfo(Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetLeaderboards_0ValidateBeforeCall(destinyMembershipId, membershipType, maxtop, modes, statid, null);
        Type localVarReturnType = new TypeToken<Destiny2GetClanLeaderboards200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetLeaderboards_0Async(Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid, final ApiCallback<Destiny2GetClanLeaderboards200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetLeaderboards_0ValidateBeforeCall(destinyMembershipId, membershipType, maxtop, modes, statid, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetClanLeaderboards200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetPublicVendors_0
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all valid components for the public Vendors endpoint.   It is a decisively smaller subset of data compared to what we can get when we know the specific user making the request.   If you want any of the other data - item details, whether or not you can buy it, etc... you&#39;ll have to call in the context of a character. I know, sad but true. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetPublicVendors_0Call(List<Integer> components, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Vendors/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (components != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "components", components));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetPublicVendors_0ValidateBeforeCall(List<Integer> components, final ApiCallback _callback) throws ApiException {
        return destiny2GetPublicVendors_0Call(components, _callback);

    }

    /**
     * 
     * Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return Destiny2GetPublicVendors200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all valid components for the public Vendors endpoint.   It is a decisively smaller subset of data compared to what we can get when we know the specific user making the request.   If you want any of the other data - item details, whether or not you can buy it, etc... you&#39;ll have to call in the context of a character. I know, sad but true. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetPublicVendors200Response destiny2GetPublicVendors_0(List<Integer> components) throws ApiException {
        ApiResponse<Destiny2GetPublicVendors200Response> localVarResp = destiny2GetPublicVendors_0WithHttpInfo(components);
        return localVarResp.getData();
    }

    /**
     * 
     * Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return ApiResponse&lt;Destiny2GetPublicVendors200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all valid components for the public Vendors endpoint.   It is a decisively smaller subset of data compared to what we can get when we know the specific user making the request.   If you want any of the other data - item details, whether or not you can buy it, etc... you&#39;ll have to call in the context of a character. I know, sad but true. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetPublicVendors200Response> destiny2GetPublicVendors_0WithHttpInfo(List<Integer> components) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetPublicVendors_0ValidateBeforeCall(components, null);
        Type localVarReturnType = new TypeToken<Destiny2GetPublicVendors200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all valid components for the public Vendors endpoint.   It is a decisively smaller subset of data compared to what we can get when we know the specific user making the request.   If you want any of the other data - item details, whether or not you can buy it, etc... you&#39;ll have to call in the context of a character. I know, sad but true. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetPublicVendors_0Async(List<Integer> components, final ApiCallback<Destiny2GetPublicVendors200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetPublicVendors_0ValidateBeforeCall(components, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetPublicVendors200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2InsertSocketPlugFree_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2InsertSocketPlugFree_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Items/InsertSocketPlugFree/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2InsertSocketPlugFree_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2InsertSocketPlugFree_0Call(_callback);

    }

    /**
     * 
     * Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
     * @return Destiny2InsertSocketPlug200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2InsertSocketPlug200Response destiny2InsertSocketPlugFree_0() throws ApiException {
        ApiResponse<Destiny2InsertSocketPlug200Response> localVarResp = destiny2InsertSocketPlugFree_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
     * @return ApiResponse&lt;Destiny2InsertSocketPlug200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2InsertSocketPlug200Response> destiny2InsertSocketPlugFree_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2InsertSocketPlugFree_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2InsertSocketPlug200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2InsertSocketPlugFree_0Async(final ApiCallback<Destiny2InsertSocketPlug200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2InsertSocketPlugFree_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2InsertSocketPlug200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2InsertSocketPlug_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2InsertSocketPlug_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Items/InsertSocketPlug/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2InsertSocketPlug_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2InsertSocketPlug_0Call(_callback);

    }

    /**
     * 
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
     * @return Destiny2InsertSocketPlug200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2InsertSocketPlug200Response destiny2InsertSocketPlug_0() throws ApiException {
        ApiResponse<Destiny2InsertSocketPlug200Response> localVarResp = destiny2InsertSocketPlug_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
     * @return ApiResponse&lt;Destiny2InsertSocketPlug200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2InsertSocketPlug200Response> destiny2InsertSocketPlug_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2InsertSocketPlug_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2InsertSocketPlug200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2InsertSocketPlug_0Async(final ApiCallback<Destiny2InsertSocketPlug200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2InsertSocketPlug_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2InsertSocketPlug200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
