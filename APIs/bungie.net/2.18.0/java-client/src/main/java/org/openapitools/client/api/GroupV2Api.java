/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Destiny2EquipItem200Response;
import org.openapitools.client.model.ForumGetTopicForContent200Response;
import org.openapitools.client.model.GetAvailableLocales200Response;
import org.openapitools.client.model.GroupV2ApproveAllPending200Response;
import org.openapitools.client.model.GroupV2GetAdminsAndFounderOfGroup200Response;
import org.openapitools.client.model.GroupV2GetAvailableThemes200Response;
import org.openapitools.client.model.GroupV2GetBannedMembersOfGroup200Response;
import org.openapitools.client.model.GroupV2GetGroupByName200Response;
import org.openapitools.client.model.GroupV2GetGroupOptionalConversations200Response;
import org.openapitools.client.model.GroupV2GetGroupsForMember200Response;
import org.openapitools.client.model.GroupV2GetInvitedIndividuals200Response;
import org.openapitools.client.model.GroupV2GetPotentialGroupsForMember200Response;
import org.openapitools.client.model.GroupV2GetRecommendedGroups200Response;
import org.openapitools.client.model.GroupV2GetUserClanInviteSetting200Response;
import org.openapitools.client.model.GroupV2GroupSearch200Response;
import org.openapitools.client.model.GroupV2IndividualGroupInvite200Response;
import org.openapitools.client.model.GroupV2KickMember200Response;
import org.openapitools.client.model.GroupV2RecoverGroupForFounder200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupV2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupV2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupV2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for groupV2AbdicateFoundership
     * @param founderIdNew The new founder for this group. Must already be a group admin. (required)
     * @param groupId The target group id. (required)
     * @param membershipType Membership type of the provided founderIdNew. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2AbdicateFoundershipCall(Long founderIdNew, Long groupId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/"
            .replace("{" + "founderIdNew" + "}", localVarApiClient.escapeString(founderIdNew.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2AbdicateFoundershipValidateBeforeCall(Long founderIdNew, Long groupId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'founderIdNew' is set
        if (founderIdNew == null) {
            throw new ApiException("Missing the required parameter 'founderIdNew' when calling groupV2AbdicateFoundership(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2AbdicateFoundership(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling groupV2AbdicateFoundership(Async)");
        }

        return groupV2AbdicateFoundershipCall(founderIdNew, groupId, membershipType, _callback);

    }

    /**
     * 
     * An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
     * @param founderIdNew The new founder for this group. Must already be a group admin. (required)
     * @param groupId The target group id. (required)
     * @param membershipType Membership type of the provided founderIdNew. (required)
     * @return GroupV2GetUserClanInviteSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetUserClanInviteSetting200Response groupV2AbdicateFoundership(Long founderIdNew, Long groupId, Integer membershipType) throws ApiException {
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResp = groupV2AbdicateFoundershipWithHttpInfo(founderIdNew, groupId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
     * @param founderIdNew The new founder for this group. Must already be a group admin. (required)
     * @param groupId The target group id. (required)
     * @param membershipType Membership type of the provided founderIdNew. (required)
     * @return ApiResponse&lt;GroupV2GetUserClanInviteSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetUserClanInviteSetting200Response> groupV2AbdicateFoundershipWithHttpInfo(Long founderIdNew, Long groupId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = groupV2AbdicateFoundershipValidateBeforeCall(founderIdNew, groupId, membershipType, null);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
     * @param founderIdNew The new founder for this group. Must already be a group admin. (required)
     * @param groupId The target group id. (required)
     * @param membershipType Membership type of the provided founderIdNew. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2AbdicateFoundershipAsync(Long founderIdNew, Long groupId, Integer membershipType, final ApiCallback<GroupV2GetUserClanInviteSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2AbdicateFoundershipValidateBeforeCall(founderIdNew, groupId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2AddOptionalConversation
     * @param groupId Group ID of the group to edit. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2AddOptionalConversationCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/OptionalConversations/Add/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2AddOptionalConversationValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2AddOptionalConversation(Async)");
        }

        return groupV2AddOptionalConversationCall(groupId, _callback);

    }

    /**
     * 
     * Add a new optional conversation/chat channel. Requires admin permissions to the group.
     * @param groupId Group ID of the group to edit. (required)
     * @return ForumGetTopicForContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ForumGetTopicForContent200Response groupV2AddOptionalConversation(Long groupId) throws ApiException {
        ApiResponse<ForumGetTopicForContent200Response> localVarResp = groupV2AddOptionalConversationWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a new optional conversation/chat channel. Requires admin permissions to the group.
     * @param groupId Group ID of the group to edit. (required)
     * @return ApiResponse&lt;ForumGetTopicForContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ForumGetTopicForContent200Response> groupV2AddOptionalConversationWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2AddOptionalConversationValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<ForumGetTopicForContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a new optional conversation/chat channel. Requires admin permissions to the group.
     * @param groupId Group ID of the group to edit. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2AddOptionalConversationAsync(Long groupId, final ApiCallback<ForumGetTopicForContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2AddOptionalConversationValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<ForumGetTopicForContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2ApproveAllPending
     * @param groupId ID of the group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2ApproveAllPendingCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/ApproveAll/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2ApproveAllPendingValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2ApproveAllPending(Async)");
        }

        return groupV2ApproveAllPendingCall(groupId, _callback);

    }

    /**
     * 
     * Approve all of the pending users for the given group.
     * @param groupId ID of the group. (required)
     * @return GroupV2ApproveAllPending200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2ApproveAllPending200Response groupV2ApproveAllPending(Long groupId) throws ApiException {
        ApiResponse<GroupV2ApproveAllPending200Response> localVarResp = groupV2ApproveAllPendingWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Approve all of the pending users for the given group.
     * @param groupId ID of the group. (required)
     * @return ApiResponse&lt;GroupV2ApproveAllPending200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2ApproveAllPending200Response> groupV2ApproveAllPendingWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2ApproveAllPendingValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<GroupV2ApproveAllPending200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Approve all of the pending users for the given group.
     * @param groupId ID of the group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2ApproveAllPendingAsync(Long groupId, final ApiCallback<GroupV2ApproveAllPending200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2ApproveAllPendingValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2ApproveAllPending200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2ApprovePending
     * @param groupId ID of the group. (required)
     * @param membershipId The membership id being approved. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2ApprovePendingCall(Long groupId, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2ApprovePendingValidateBeforeCall(Long groupId, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2ApprovePending(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling groupV2ApprovePending(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling groupV2ApprovePending(Async)");
        }

        return groupV2ApprovePendingCall(groupId, membershipId, membershipType, _callback);

    }

    /**
     * 
     * Approve the given membershipId to join the group/clan as long as they have applied.
     * @param groupId ID of the group. (required)
     * @param membershipId The membership id being approved. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @return GroupV2GetUserClanInviteSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetUserClanInviteSetting200Response groupV2ApprovePending(Long groupId, Long membershipId, Integer membershipType) throws ApiException {
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResp = groupV2ApprovePendingWithHttpInfo(groupId, membershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Approve the given membershipId to join the group/clan as long as they have applied.
     * @param groupId ID of the group. (required)
     * @param membershipId The membership id being approved. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @return ApiResponse&lt;GroupV2GetUserClanInviteSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetUserClanInviteSetting200Response> groupV2ApprovePendingWithHttpInfo(Long groupId, Long membershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = groupV2ApprovePendingValidateBeforeCall(groupId, membershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Approve the given membershipId to join the group/clan as long as they have applied.
     * @param groupId ID of the group. (required)
     * @param membershipId The membership id being approved. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2ApprovePendingAsync(Long groupId, Long membershipId, Integer membershipType, final ApiCallback<GroupV2GetUserClanInviteSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2ApprovePendingValidateBeforeCall(groupId, membershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2ApprovePendingForList
     * @param groupId ID of the group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2ApprovePendingForListCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/ApproveList/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2ApprovePendingForListValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2ApprovePendingForList(Async)");
        }

        return groupV2ApprovePendingForListCall(groupId, _callback);

    }

    /**
     * 
     * Approve all of the pending users for the given group.
     * @param groupId ID of the group. (required)
     * @return GroupV2ApproveAllPending200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2ApproveAllPending200Response groupV2ApprovePendingForList(Long groupId) throws ApiException {
        ApiResponse<GroupV2ApproveAllPending200Response> localVarResp = groupV2ApprovePendingForListWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Approve all of the pending users for the given group.
     * @param groupId ID of the group. (required)
     * @return ApiResponse&lt;GroupV2ApproveAllPending200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2ApproveAllPending200Response> groupV2ApprovePendingForListWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2ApprovePendingForListValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<GroupV2ApproveAllPending200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Approve all of the pending users for the given group.
     * @param groupId ID of the group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2ApprovePendingForListAsync(Long groupId, final ApiCallback<GroupV2ApproveAllPending200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2ApprovePendingForListValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2ApproveAllPending200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2BanMember
     * @param groupId Group ID that has the member to ban. (required)
     * @param membershipId Membership ID of the member to ban from the group. (required)
     * @param membershipType Membership type of the provided membership ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2BanMemberCall(Long groupId, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2BanMemberValidateBeforeCall(Long groupId, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2BanMember(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling groupV2BanMember(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling groupV2BanMember(Async)");
        }

        return groupV2BanMemberCall(groupId, membershipId, membershipType, _callback);

    }

    /**
     * 
     * Bans the requested member from the requested group for the specified period of time.
     * @param groupId Group ID that has the member to ban. (required)
     * @param membershipId Membership ID of the member to ban from the group. (required)
     * @param membershipType Membership type of the provided membership ID. (required)
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response groupV2BanMember(Long groupId, Long membershipId, Integer membershipType) throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = groupV2BanMemberWithHttpInfo(groupId, membershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Bans the requested member from the requested group for the specified period of time.
     * @param groupId Group ID that has the member to ban. (required)
     * @param membershipId Membership ID of the member to ban from the group. (required)
     * @param membershipType Membership type of the provided membership ID. (required)
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> groupV2BanMemberWithHttpInfo(Long groupId, Long membershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = groupV2BanMemberValidateBeforeCall(groupId, membershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Bans the requested member from the requested group for the specified period of time.
     * @param groupId Group ID that has the member to ban. (required)
     * @param membershipId Membership ID of the member to ban from the group. (required)
     * @param membershipType Membership type of the provided membership ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2BanMemberAsync(Long groupId, Long membershipId, Integer membershipType, final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2BanMemberValidateBeforeCall(groupId, membershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2DenyAllPending
     * @param groupId ID of the group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2DenyAllPendingCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/DenyAll/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2DenyAllPendingValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2DenyAllPending(Async)");
        }

        return groupV2DenyAllPendingCall(groupId, _callback);

    }

    /**
     * 
     * Deny all of the pending users for the given group.
     * @param groupId ID of the group. (required)
     * @return GroupV2ApproveAllPending200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2ApproveAllPending200Response groupV2DenyAllPending(Long groupId) throws ApiException {
        ApiResponse<GroupV2ApproveAllPending200Response> localVarResp = groupV2DenyAllPendingWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deny all of the pending users for the given group.
     * @param groupId ID of the group. (required)
     * @return ApiResponse&lt;GroupV2ApproveAllPending200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2ApproveAllPending200Response> groupV2DenyAllPendingWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2DenyAllPendingValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<GroupV2ApproveAllPending200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deny all of the pending users for the given group.
     * @param groupId ID of the group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2DenyAllPendingAsync(Long groupId, final ApiCallback<GroupV2ApproveAllPending200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2DenyAllPendingValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2ApproveAllPending200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2DenyPendingForList
     * @param groupId ID of the group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2DenyPendingForListCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/DenyList/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2DenyPendingForListValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2DenyPendingForList(Async)");
        }

        return groupV2DenyPendingForListCall(groupId, _callback);

    }

    /**
     * 
     * Deny all of the pending users for the given group that match the passed-in .
     * @param groupId ID of the group. (required)
     * @return GroupV2ApproveAllPending200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2ApproveAllPending200Response groupV2DenyPendingForList(Long groupId) throws ApiException {
        ApiResponse<GroupV2ApproveAllPending200Response> localVarResp = groupV2DenyPendingForListWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deny all of the pending users for the given group that match the passed-in .
     * @param groupId ID of the group. (required)
     * @return ApiResponse&lt;GroupV2ApproveAllPending200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2ApproveAllPending200Response> groupV2DenyPendingForListWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2DenyPendingForListValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<GroupV2ApproveAllPending200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deny all of the pending users for the given group that match the passed-in .
     * @param groupId ID of the group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2DenyPendingForListAsync(Long groupId, final ApiCallback<GroupV2ApproveAllPending200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2DenyPendingForListValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2ApproveAllPending200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2EditClanBanner
     * @param groupId Group ID of the group to edit. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2EditClanBannerCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/EditClanBanner/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2EditClanBannerValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2EditClanBanner(Async)");
        }

        return groupV2EditClanBannerCall(groupId, _callback);

    }

    /**
     * 
     * Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
     * @param groupId Group ID of the group to edit. (required)
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response groupV2EditClanBanner(Long groupId) throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = groupV2EditClanBannerWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
     * @param groupId Group ID of the group to edit. (required)
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> groupV2EditClanBannerWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2EditClanBannerValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
     * @param groupId Group ID of the group to edit. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2EditClanBannerAsync(Long groupId, final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2EditClanBannerValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2EditFounderOptions
     * @param groupId Group ID of the group to edit. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2EditFounderOptionsCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/EditFounderOptions/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2EditFounderOptionsValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2EditFounderOptions(Async)");
        }

        return groupV2EditFounderOptionsCall(groupId, _callback);

    }

    /**
     * 
     * Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
     * @param groupId Group ID of the group to edit. (required)
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response groupV2EditFounderOptions(Long groupId) throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = groupV2EditFounderOptionsWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
     * @param groupId Group ID of the group to edit. (required)
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> groupV2EditFounderOptionsWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2EditFounderOptionsValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
     * @param groupId Group ID of the group to edit. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2EditFounderOptionsAsync(Long groupId, final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2EditFounderOptionsValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2EditGroup
     * @param groupId Group ID of the group to edit. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2EditGroupCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Edit/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2EditGroupValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2EditGroup(Async)");
        }

        return groupV2EditGroupCall(groupId, _callback);

    }

    /**
     * 
     * Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
     * @param groupId Group ID of the group to edit. (required)
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response groupV2EditGroup(Long groupId) throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = groupV2EditGroupWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
     * @param groupId Group ID of the group to edit. (required)
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> groupV2EditGroupWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2EditGroupValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
     * @param groupId Group ID of the group to edit. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2EditGroupAsync(Long groupId, final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2EditGroupValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2EditGroupMembership
     * @param groupId ID of the group to which the member belongs. (required)
     * @param membershipId Membership ID to modify. (required)
     * @param membershipType Membership type of the provide membership ID. (required)
     * @param memberType New membertype for the specified member. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2EditGroupMembershipCall(Long groupId, Long membershipId, Integer membershipType, Integer memberType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()))
            .replace("{" + "memberType" + "}", localVarApiClient.escapeString(memberType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2EditGroupMembershipValidateBeforeCall(Long groupId, Long membershipId, Integer membershipType, Integer memberType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2EditGroupMembership(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling groupV2EditGroupMembership(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling groupV2EditGroupMembership(Async)");
        }

        // verify the required parameter 'memberType' is set
        if (memberType == null) {
            throw new ApiException("Missing the required parameter 'memberType' when calling groupV2EditGroupMembership(Async)");
        }

        return groupV2EditGroupMembershipCall(groupId, membershipId, membershipType, memberType, _callback);

    }

    /**
     * 
     * Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
     * @param groupId ID of the group to which the member belongs. (required)
     * @param membershipId Membership ID to modify. (required)
     * @param membershipType Membership type of the provide membership ID. (required)
     * @param memberType New membertype for the specified member. (required)
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response groupV2EditGroupMembership(Long groupId, Long membershipId, Integer membershipType, Integer memberType) throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = groupV2EditGroupMembershipWithHttpInfo(groupId, membershipId, membershipType, memberType);
        return localVarResp.getData();
    }

    /**
     * 
     * Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
     * @param groupId ID of the group to which the member belongs. (required)
     * @param membershipId Membership ID to modify. (required)
     * @param membershipType Membership type of the provide membership ID. (required)
     * @param memberType New membertype for the specified member. (required)
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> groupV2EditGroupMembershipWithHttpInfo(Long groupId, Long membershipId, Integer membershipType, Integer memberType) throws ApiException {
        okhttp3.Call localVarCall = groupV2EditGroupMembershipValidateBeforeCall(groupId, membershipId, membershipType, memberType, null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
     * @param groupId ID of the group to which the member belongs. (required)
     * @param membershipId Membership ID to modify. (required)
     * @param membershipType Membership type of the provide membership ID. (required)
     * @param memberType New membertype for the specified member. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2EditGroupMembershipAsync(Long groupId, Long membershipId, Integer membershipType, Integer memberType, final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2EditGroupMembershipValidateBeforeCall(groupId, membershipId, membershipType, memberType, _callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2EditOptionalConversation
     * @param conversationId Conversation Id of the channel being edited. (required)
     * @param groupId Group ID of the group to edit. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2EditOptionalConversationCall(Long conversationId, Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/"
            .replace("{" + "conversationId" + "}", localVarApiClient.escapeString(conversationId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2EditOptionalConversationValidateBeforeCall(Long conversationId, Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling groupV2EditOptionalConversation(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2EditOptionalConversation(Async)");
        }

        return groupV2EditOptionalConversationCall(conversationId, groupId, _callback);

    }

    /**
     * 
     * Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
     * @param conversationId Conversation Id of the channel being edited. (required)
     * @param groupId Group ID of the group to edit. (required)
     * @return ForumGetTopicForContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ForumGetTopicForContent200Response groupV2EditOptionalConversation(Long conversationId, Long groupId) throws ApiException {
        ApiResponse<ForumGetTopicForContent200Response> localVarResp = groupV2EditOptionalConversationWithHttpInfo(conversationId, groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
     * @param conversationId Conversation Id of the channel being edited. (required)
     * @param groupId Group ID of the group to edit. (required)
     * @return ApiResponse&lt;ForumGetTopicForContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ForumGetTopicForContent200Response> groupV2EditOptionalConversationWithHttpInfo(Long conversationId, Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2EditOptionalConversationValidateBeforeCall(conversationId, groupId, null);
        Type localVarReturnType = new TypeToken<ForumGetTopicForContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
     * @param conversationId Conversation Id of the channel being edited. (required)
     * @param groupId Group ID of the group to edit. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2EditOptionalConversationAsync(Long conversationId, Long groupId, final ApiCallback<ForumGetTopicForContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2EditOptionalConversationValidateBeforeCall(conversationId, groupId, _callback);
        Type localVarReturnType = new TypeToken<ForumGetTopicForContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetAdminsAndFounderOfGroup
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId The ID of the group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetAdminsAndFounderOfGroupCall(Integer currentpage, Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/AdminsAndFounder/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentpage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentpage", currentpage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetAdminsAndFounderOfGroupValidateBeforeCall(Integer currentpage, Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currentpage' is set
        if (currentpage == null) {
            throw new ApiException("Missing the required parameter 'currentpage' when calling groupV2GetAdminsAndFounderOfGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2GetAdminsAndFounderOfGroup(Async)");
        }

        return groupV2GetAdminsAndFounderOfGroupCall(currentpage, groupId, _callback);

    }

    /**
     * 
     * Get the list of members in a given group who are of admin level or higher.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId The ID of the group. (required)
     * @return GroupV2GetAdminsAndFounderOfGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetAdminsAndFounderOfGroup200Response groupV2GetAdminsAndFounderOfGroup(Integer currentpage, Long groupId) throws ApiException {
        ApiResponse<GroupV2GetAdminsAndFounderOfGroup200Response> localVarResp = groupV2GetAdminsAndFounderOfGroupWithHttpInfo(currentpage, groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of members in a given group who are of admin level or higher.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId The ID of the group. (required)
     * @return ApiResponse&lt;GroupV2GetAdminsAndFounderOfGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetAdminsAndFounderOfGroup200Response> groupV2GetAdminsAndFounderOfGroupWithHttpInfo(Integer currentpage, Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2GetAdminsAndFounderOfGroupValidateBeforeCall(currentpage, groupId, null);
        Type localVarReturnType = new TypeToken<GroupV2GetAdminsAndFounderOfGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of members in a given group who are of admin level or higher.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId The ID of the group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetAdminsAndFounderOfGroupAsync(Integer currentpage, Long groupId, final ApiCallback<GroupV2GetAdminsAndFounderOfGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetAdminsAndFounderOfGroupValidateBeforeCall(currentpage, groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetAdminsAndFounderOfGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetAvailableAvatars
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetAvailableAvatarsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/GetAvailableAvatars/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetAvailableAvatarsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return groupV2GetAvailableAvatarsCall(_callback);

    }

    /**
     * 
     * Returns a list of all available group avatars for the signed-in user.
     * @return GetAvailableLocales200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableLocales200Response groupV2GetAvailableAvatars() throws ApiException {
        ApiResponse<GetAvailableLocales200Response> localVarResp = groupV2GetAvailableAvatarsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of all available group avatars for the signed-in user.
     * @return ApiResponse&lt;GetAvailableLocales200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAvailableLocales200Response> groupV2GetAvailableAvatarsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = groupV2GetAvailableAvatarsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetAvailableLocales200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of all available group avatars for the signed-in user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetAvailableAvatarsAsync(final ApiCallback<GetAvailableLocales200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetAvailableAvatarsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetAvailableLocales200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetAvailableThemes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetAvailableThemesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/GetAvailableThemes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetAvailableThemesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return groupV2GetAvailableThemesCall(_callback);

    }

    /**
     * 
     * Returns a list of all available group themes.
     * @return GroupV2GetAvailableThemes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetAvailableThemes200Response groupV2GetAvailableThemes() throws ApiException {
        ApiResponse<GroupV2GetAvailableThemes200Response> localVarResp = groupV2GetAvailableThemesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of all available group themes.
     * @return ApiResponse&lt;GroupV2GetAvailableThemes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetAvailableThemes200Response> groupV2GetAvailableThemesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = groupV2GetAvailableThemesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GroupV2GetAvailableThemes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of all available group themes.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetAvailableThemesAsync(final ApiCallback<GroupV2GetAvailableThemes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetAvailableThemesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GroupV2GetAvailableThemes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetBannedMembersOfGroup
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 entries. (required)
     * @param groupId Group ID whose banned members you are fetching (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetBannedMembersOfGroupCall(Integer currentpage, Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Banned/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentpage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentpage", currentpage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetBannedMembersOfGroupValidateBeforeCall(Integer currentpage, Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currentpage' is set
        if (currentpage == null) {
            throw new ApiException("Missing the required parameter 'currentpage' when calling groupV2GetBannedMembersOfGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2GetBannedMembersOfGroup(Async)");
        }

        return groupV2GetBannedMembersOfGroupCall(currentpage, groupId, _callback);

    }

    /**
     * 
     * Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 entries. (required)
     * @param groupId Group ID whose banned members you are fetching (required)
     * @return GroupV2GetBannedMembersOfGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetBannedMembersOfGroup200Response groupV2GetBannedMembersOfGroup(Integer currentpage, Long groupId) throws ApiException {
        ApiResponse<GroupV2GetBannedMembersOfGroup200Response> localVarResp = groupV2GetBannedMembersOfGroupWithHttpInfo(currentpage, groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 entries. (required)
     * @param groupId Group ID whose banned members you are fetching (required)
     * @return ApiResponse&lt;GroupV2GetBannedMembersOfGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetBannedMembersOfGroup200Response> groupV2GetBannedMembersOfGroupWithHttpInfo(Integer currentpage, Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2GetBannedMembersOfGroupValidateBeforeCall(currentpage, groupId, null);
        Type localVarReturnType = new TypeToken<GroupV2GetBannedMembersOfGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 entries. (required)
     * @param groupId Group ID whose banned members you are fetching (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetBannedMembersOfGroupAsync(Integer currentpage, Long groupId, final ApiCallback<GroupV2GetBannedMembersOfGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetBannedMembersOfGroupValidateBeforeCall(currentpage, groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetBannedMembersOfGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetGroup
     * @param groupId Requested group&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetGroupCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetGroupValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2GetGroup(Async)");
        }

        return groupV2GetGroupCall(groupId, _callback);

    }

    /**
     * 
     * Get information about a specific group of the given ID.
     * @param groupId Requested group&#39;s id. (required)
     * @return GroupV2GetGroupByName200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetGroupByName200Response groupV2GetGroup(Long groupId) throws ApiException {
        ApiResponse<GroupV2GetGroupByName200Response> localVarResp = groupV2GetGroupWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get information about a specific group of the given ID.
     * @param groupId Requested group&#39;s id. (required)
     * @return ApiResponse&lt;GroupV2GetGroupByName200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetGroupByName200Response> groupV2GetGroupWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2GetGroupValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<GroupV2GetGroupByName200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get information about a specific group of the given ID.
     * @param groupId Requested group&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetGroupAsync(Long groupId, final ApiCallback<GroupV2GetGroupByName200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetGroupValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetGroupByName200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetGroupByName
     * @param groupName Exact name of the group to find. (required)
     * @param groupType Type of group to find. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetGroupByNameCall(String groupName, Integer groupType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/Name/{groupName}/{groupType}/"
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "groupType" + "}", localVarApiClient.escapeString(groupType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetGroupByNameValidateBeforeCall(String groupName, Integer groupType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling groupV2GetGroupByName(Async)");
        }

        // verify the required parameter 'groupType' is set
        if (groupType == null) {
            throw new ApiException("Missing the required parameter 'groupType' when calling groupV2GetGroupByName(Async)");
        }

        return groupV2GetGroupByNameCall(groupName, groupType, _callback);

    }

    /**
     * 
     * Get information about a specific group with the given name and type.
     * @param groupName Exact name of the group to find. (required)
     * @param groupType Type of group to find. (required)
     * @return GroupV2GetGroupByName200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetGroupByName200Response groupV2GetGroupByName(String groupName, Integer groupType) throws ApiException {
        ApiResponse<GroupV2GetGroupByName200Response> localVarResp = groupV2GetGroupByNameWithHttpInfo(groupName, groupType);
        return localVarResp.getData();
    }

    /**
     * 
     * Get information about a specific group with the given name and type.
     * @param groupName Exact name of the group to find. (required)
     * @param groupType Type of group to find. (required)
     * @return ApiResponse&lt;GroupV2GetGroupByName200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetGroupByName200Response> groupV2GetGroupByNameWithHttpInfo(String groupName, Integer groupType) throws ApiException {
        okhttp3.Call localVarCall = groupV2GetGroupByNameValidateBeforeCall(groupName, groupType, null);
        Type localVarReturnType = new TypeToken<GroupV2GetGroupByName200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get information about a specific group with the given name and type.
     * @param groupName Exact name of the group to find. (required)
     * @param groupType Type of group to find. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetGroupByNameAsync(String groupName, Integer groupType, final ApiCallback<GroupV2GetGroupByName200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetGroupByNameValidateBeforeCall(groupName, groupType, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetGroupByName200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetGroupByNameV2
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetGroupByNameV2Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/NameV2/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetGroupByNameV2ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return groupV2GetGroupByNameV2Call(_callback);

    }

    /**
     * 
     * Get information about a specific group with the given name and type. The POST version.
     * @return GroupV2GetGroupByName200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetGroupByName200Response groupV2GetGroupByNameV2() throws ApiException {
        ApiResponse<GroupV2GetGroupByName200Response> localVarResp = groupV2GetGroupByNameV2WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get information about a specific group with the given name and type. The POST version.
     * @return ApiResponse&lt;GroupV2GetGroupByName200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetGroupByName200Response> groupV2GetGroupByNameV2WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = groupV2GetGroupByNameV2ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GroupV2GetGroupByName200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get information about a specific group with the given name and type. The POST version.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetGroupByNameV2Async(final ApiCallback<GroupV2GetGroupByName200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetGroupByNameV2ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GroupV2GetGroupByName200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetGroupOptionalConversations
     * @param groupId Requested group&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetGroupOptionalConversationsCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/OptionalConversations/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetGroupOptionalConversationsValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2GetGroupOptionalConversations(Async)");
        }

        return groupV2GetGroupOptionalConversationsCall(groupId, _callback);

    }

    /**
     * 
     * Gets a list of available optional conversation channels and their settings.
     * @param groupId Requested group&#39;s id. (required)
     * @return GroupV2GetGroupOptionalConversations200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetGroupOptionalConversations200Response groupV2GetGroupOptionalConversations(Long groupId) throws ApiException {
        ApiResponse<GroupV2GetGroupOptionalConversations200Response> localVarResp = groupV2GetGroupOptionalConversationsWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of available optional conversation channels and their settings.
     * @param groupId Requested group&#39;s id. (required)
     * @return ApiResponse&lt;GroupV2GetGroupOptionalConversations200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetGroupOptionalConversations200Response> groupV2GetGroupOptionalConversationsWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2GetGroupOptionalConversationsValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<GroupV2GetGroupOptionalConversations200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of available optional conversation channels and their settings.
     * @param groupId Requested group&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetGroupOptionalConversationsAsync(Long groupId, final ApiCallback<GroupV2GetGroupOptionalConversations200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetGroupOptionalConversationsValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetGroupOptionalConversations200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetGroupsForMember
     * @param filter Filter apply to list of joined groups. (required)
     * @param groupType Type of group the supplied member founded. (required)
     * @param membershipId Membership ID to for which to find founded groups. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetGroupsForMemberCall(Integer filter, Integer groupType, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/"
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()))
            .replace("{" + "groupType" + "}", localVarApiClient.escapeString(groupType.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetGroupsForMemberValidateBeforeCall(Integer filter, Integer groupType, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling groupV2GetGroupsForMember(Async)");
        }

        // verify the required parameter 'groupType' is set
        if (groupType == null) {
            throw new ApiException("Missing the required parameter 'groupType' when calling groupV2GetGroupsForMember(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling groupV2GetGroupsForMember(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling groupV2GetGroupsForMember(Async)");
        }

        return groupV2GetGroupsForMemberCall(filter, groupType, membershipId, membershipType, _callback);

    }

    /**
     * 
     * Get information about the groups that a given member has joined.
     * @param filter Filter apply to list of joined groups. (required)
     * @param groupType Type of group the supplied member founded. (required)
     * @param membershipId Membership ID to for which to find founded groups. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @return GroupV2GetGroupsForMember200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetGroupsForMember200Response groupV2GetGroupsForMember(Integer filter, Integer groupType, Long membershipId, Integer membershipType) throws ApiException {
        ApiResponse<GroupV2GetGroupsForMember200Response> localVarResp = groupV2GetGroupsForMemberWithHttpInfo(filter, groupType, membershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Get information about the groups that a given member has joined.
     * @param filter Filter apply to list of joined groups. (required)
     * @param groupType Type of group the supplied member founded. (required)
     * @param membershipId Membership ID to for which to find founded groups. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @return ApiResponse&lt;GroupV2GetGroupsForMember200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetGroupsForMember200Response> groupV2GetGroupsForMemberWithHttpInfo(Integer filter, Integer groupType, Long membershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = groupV2GetGroupsForMemberValidateBeforeCall(filter, groupType, membershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<GroupV2GetGroupsForMember200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get information about the groups that a given member has joined.
     * @param filter Filter apply to list of joined groups. (required)
     * @param groupType Type of group the supplied member founded. (required)
     * @param membershipId Membership ID to for which to find founded groups. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetGroupsForMemberAsync(Integer filter, Integer groupType, Long membershipId, Integer membershipType, final ApiCallback<GroupV2GetGroupsForMember200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetGroupsForMemberValidateBeforeCall(filter, groupType, membershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetGroupsForMember200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetInvitedIndividuals
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId ID of the group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetInvitedIndividualsCall(Integer currentpage, Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/InvitedIndividuals/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentpage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentpage", currentpage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetInvitedIndividualsValidateBeforeCall(Integer currentpage, Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currentpage' is set
        if (currentpage == null) {
            throw new ApiException("Missing the required parameter 'currentpage' when calling groupV2GetInvitedIndividuals(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2GetInvitedIndividuals(Async)");
        }

        return groupV2GetInvitedIndividualsCall(currentpage, groupId, _callback);

    }

    /**
     * 
     * Get the list of users who have been invited into the group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId ID of the group. (required)
     * @return GroupV2GetInvitedIndividuals200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetInvitedIndividuals200Response groupV2GetInvitedIndividuals(Integer currentpage, Long groupId) throws ApiException {
        ApiResponse<GroupV2GetInvitedIndividuals200Response> localVarResp = groupV2GetInvitedIndividualsWithHttpInfo(currentpage, groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of users who have been invited into the group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId ID of the group. (required)
     * @return ApiResponse&lt;GroupV2GetInvitedIndividuals200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetInvitedIndividuals200Response> groupV2GetInvitedIndividualsWithHttpInfo(Integer currentpage, Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2GetInvitedIndividualsValidateBeforeCall(currentpage, groupId, null);
        Type localVarReturnType = new TypeToken<GroupV2GetInvitedIndividuals200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of users who have been invited into the group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId ID of the group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetInvitedIndividualsAsync(Integer currentpage, Long groupId, final ApiCallback<GroupV2GetInvitedIndividuals200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetInvitedIndividualsValidateBeforeCall(currentpage, groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetInvitedIndividuals200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetMembersOfGroup
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId The ID of the group. (required)
     * @param memberType Filter out other member types. Use None for all members. (optional)
     * @param nameSearch The name fragment upon which a search should be executed for members with matching display or unique names. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetMembersOfGroupCall(Integer currentpage, Long groupId, Integer memberType, String nameSearch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentpage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentpage", currentpage));
        }

        if (memberType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memberType", memberType));
        }

        if (nameSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameSearch", nameSearch));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetMembersOfGroupValidateBeforeCall(Integer currentpage, Long groupId, Integer memberType, String nameSearch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currentpage' is set
        if (currentpage == null) {
            throw new ApiException("Missing the required parameter 'currentpage' when calling groupV2GetMembersOfGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2GetMembersOfGroup(Async)");
        }

        return groupV2GetMembersOfGroupCall(currentpage, groupId, memberType, nameSearch, _callback);

    }

    /**
     * 
     * Get the list of members in a given group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId The ID of the group. (required)
     * @param memberType Filter out other member types. Use None for all members. (optional)
     * @param nameSearch The name fragment upon which a search should be executed for members with matching display or unique names. (optional)
     * @return GroupV2GetAdminsAndFounderOfGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetAdminsAndFounderOfGroup200Response groupV2GetMembersOfGroup(Integer currentpage, Long groupId, Integer memberType, String nameSearch) throws ApiException {
        ApiResponse<GroupV2GetAdminsAndFounderOfGroup200Response> localVarResp = groupV2GetMembersOfGroupWithHttpInfo(currentpage, groupId, memberType, nameSearch);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of members in a given group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId The ID of the group. (required)
     * @param memberType Filter out other member types. Use None for all members. (optional)
     * @param nameSearch The name fragment upon which a search should be executed for members with matching display or unique names. (optional)
     * @return ApiResponse&lt;GroupV2GetAdminsAndFounderOfGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetAdminsAndFounderOfGroup200Response> groupV2GetMembersOfGroupWithHttpInfo(Integer currentpage, Long groupId, Integer memberType, String nameSearch) throws ApiException {
        okhttp3.Call localVarCall = groupV2GetMembersOfGroupValidateBeforeCall(currentpage, groupId, memberType, nameSearch, null);
        Type localVarReturnType = new TypeToken<GroupV2GetAdminsAndFounderOfGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of members in a given group.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId The ID of the group. (required)
     * @param memberType Filter out other member types. Use None for all members. (optional)
     * @param nameSearch The name fragment upon which a search should be executed for members with matching display or unique names. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetMembersOfGroupAsync(Integer currentpage, Long groupId, Integer memberType, String nameSearch, final ApiCallback<GroupV2GetAdminsAndFounderOfGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetMembersOfGroupValidateBeforeCall(currentpage, groupId, memberType, nameSearch, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetAdminsAndFounderOfGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetPendingMemberships
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId ID of the group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetPendingMembershipsCall(Integer currentpage, Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/Pending/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentpage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentpage", currentpage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetPendingMembershipsValidateBeforeCall(Integer currentpage, Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currentpage' is set
        if (currentpage == null) {
            throw new ApiException("Missing the required parameter 'currentpage' when calling groupV2GetPendingMemberships(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2GetPendingMemberships(Async)");
        }

        return groupV2GetPendingMembershipsCall(currentpage, groupId, _callback);

    }

    /**
     * 
     * Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId ID of the group. (required)
     * @return GroupV2GetInvitedIndividuals200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetInvitedIndividuals200Response groupV2GetPendingMemberships(Integer currentpage, Long groupId) throws ApiException {
        ApiResponse<GroupV2GetInvitedIndividuals200Response> localVarResp = groupV2GetPendingMembershipsWithHttpInfo(currentpage, groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId ID of the group. (required)
     * @return ApiResponse&lt;GroupV2GetInvitedIndividuals200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetInvitedIndividuals200Response> groupV2GetPendingMembershipsWithHttpInfo(Integer currentpage, Long groupId) throws ApiException {
        okhttp3.Call localVarCall = groupV2GetPendingMembershipsValidateBeforeCall(currentpage, groupId, null);
        Type localVarReturnType = new TypeToken<GroupV2GetInvitedIndividuals200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
     * @param currentpage Page number (starting with 1). Each page has a fixed size of 50 items per page. (required)
     * @param groupId ID of the group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetPendingMembershipsAsync(Integer currentpage, Long groupId, final ApiCallback<GroupV2GetInvitedIndividuals200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetPendingMembershipsValidateBeforeCall(currentpage, groupId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetInvitedIndividuals200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetPotentialGroupsForMember
     * @param filter Filter apply to list of potential joined groups. (required)
     * @param groupType Type of group the supplied member applied. (required)
     * @param membershipId Membership ID to for which to find applied groups. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetPotentialGroupsForMemberCall(Integer filter, Integer groupType, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/"
            .replace("{" + "filter" + "}", localVarApiClient.escapeString(filter.toString()))
            .replace("{" + "groupType" + "}", localVarApiClient.escapeString(groupType.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetPotentialGroupsForMemberValidateBeforeCall(Integer filter, Integer groupType, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling groupV2GetPotentialGroupsForMember(Async)");
        }

        // verify the required parameter 'groupType' is set
        if (groupType == null) {
            throw new ApiException("Missing the required parameter 'groupType' when calling groupV2GetPotentialGroupsForMember(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling groupV2GetPotentialGroupsForMember(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling groupV2GetPotentialGroupsForMember(Async)");
        }

        return groupV2GetPotentialGroupsForMemberCall(filter, groupType, membershipId, membershipType, _callback);

    }

    /**
     * 
     * Get information about the groups that a given member has applied to or been invited to.
     * @param filter Filter apply to list of potential joined groups. (required)
     * @param groupType Type of group the supplied member applied. (required)
     * @param membershipId Membership ID to for which to find applied groups. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @return GroupV2GetPotentialGroupsForMember200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetPotentialGroupsForMember200Response groupV2GetPotentialGroupsForMember(Integer filter, Integer groupType, Long membershipId, Integer membershipType) throws ApiException {
        ApiResponse<GroupV2GetPotentialGroupsForMember200Response> localVarResp = groupV2GetPotentialGroupsForMemberWithHttpInfo(filter, groupType, membershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Get information about the groups that a given member has applied to or been invited to.
     * @param filter Filter apply to list of potential joined groups. (required)
     * @param groupType Type of group the supplied member applied. (required)
     * @param membershipId Membership ID to for which to find applied groups. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @return ApiResponse&lt;GroupV2GetPotentialGroupsForMember200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetPotentialGroupsForMember200Response> groupV2GetPotentialGroupsForMemberWithHttpInfo(Integer filter, Integer groupType, Long membershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = groupV2GetPotentialGroupsForMemberValidateBeforeCall(filter, groupType, membershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<GroupV2GetPotentialGroupsForMember200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get information about the groups that a given member has applied to or been invited to.
     * @param filter Filter apply to list of potential joined groups. (required)
     * @param groupType Type of group the supplied member applied. (required)
     * @param membershipId Membership ID to for which to find applied groups. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetPotentialGroupsForMemberAsync(Integer filter, Integer groupType, Long membershipId, Integer membershipType, final ApiCallback<GroupV2GetPotentialGroupsForMember200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetPotentialGroupsForMemberValidateBeforeCall(filter, groupType, membershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetPotentialGroupsForMember200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetRecommendedGroups
     * @param createDateRange Requested range in which to pull recommended groups (required)
     * @param groupType Type of groups requested (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetRecommendedGroupsCall(Integer createDateRange, Integer groupType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/Recommended/{groupType}/{createDateRange}/"
            .replace("{" + "createDateRange" + "}", localVarApiClient.escapeString(createDateRange.toString()))
            .replace("{" + "groupType" + "}", localVarApiClient.escapeString(groupType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetRecommendedGroupsValidateBeforeCall(Integer createDateRange, Integer groupType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDateRange' is set
        if (createDateRange == null) {
            throw new ApiException("Missing the required parameter 'createDateRange' when calling groupV2GetRecommendedGroups(Async)");
        }

        // verify the required parameter 'groupType' is set
        if (groupType == null) {
            throw new ApiException("Missing the required parameter 'groupType' when calling groupV2GetRecommendedGroups(Async)");
        }

        return groupV2GetRecommendedGroupsCall(createDateRange, groupType, _callback);

    }

    /**
     * 
     * Gets groups recommended for you based on the groups to whom those you follow belong.
     * @param createDateRange Requested range in which to pull recommended groups (required)
     * @param groupType Type of groups requested (required)
     * @return GroupV2GetRecommendedGroups200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetRecommendedGroups200Response groupV2GetRecommendedGroups(Integer createDateRange, Integer groupType) throws ApiException {
        ApiResponse<GroupV2GetRecommendedGroups200Response> localVarResp = groupV2GetRecommendedGroupsWithHttpInfo(createDateRange, groupType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets groups recommended for you based on the groups to whom those you follow belong.
     * @param createDateRange Requested range in which to pull recommended groups (required)
     * @param groupType Type of groups requested (required)
     * @return ApiResponse&lt;GroupV2GetRecommendedGroups200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetRecommendedGroups200Response> groupV2GetRecommendedGroupsWithHttpInfo(Integer createDateRange, Integer groupType) throws ApiException {
        okhttp3.Call localVarCall = groupV2GetRecommendedGroupsValidateBeforeCall(createDateRange, groupType, null);
        Type localVarReturnType = new TypeToken<GroupV2GetRecommendedGroups200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets groups recommended for you based on the groups to whom those you follow belong.
     * @param createDateRange Requested range in which to pull recommended groups (required)
     * @param groupType Type of groups requested (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetRecommendedGroupsAsync(Integer createDateRange, Integer groupType, final ApiCallback<GroupV2GetRecommendedGroups200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetRecommendedGroupsValidateBeforeCall(createDateRange, groupType, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetRecommendedGroups200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GetUserClanInviteSetting
     * @param mType The Destiny membership type of the account we wish to access settings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetUserClanInviteSettingCall(Integer mType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/GetUserClanInviteSetting/{mType}/"
            .replace("{" + "mType" + "}", localVarApiClient.escapeString(mType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GetUserClanInviteSettingValidateBeforeCall(Integer mType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mType' is set
        if (mType == null) {
            throw new ApiException("Missing the required parameter 'mType' when calling groupV2GetUserClanInviteSetting(Async)");
        }

        return groupV2GetUserClanInviteSettingCall(mType, _callback);

    }

    /**
     * 
     * Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
     * @param mType The Destiny membership type of the account we wish to access settings. (required)
     * @return GroupV2GetUserClanInviteSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetUserClanInviteSetting200Response groupV2GetUserClanInviteSetting(Integer mType) throws ApiException {
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResp = groupV2GetUserClanInviteSettingWithHttpInfo(mType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
     * @param mType The Destiny membership type of the account we wish to access settings. (required)
     * @return ApiResponse&lt;GroupV2GetUserClanInviteSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetUserClanInviteSetting200Response> groupV2GetUserClanInviteSettingWithHttpInfo(Integer mType) throws ApiException {
        okhttp3.Call localVarCall = groupV2GetUserClanInviteSettingValidateBeforeCall(mType, null);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
     * @param mType The Destiny membership type of the account we wish to access settings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GetUserClanInviteSettingAsync(Integer mType, final ApiCallback<GroupV2GetUserClanInviteSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GetUserClanInviteSettingValidateBeforeCall(mType, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2GroupSearch
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GroupSearchCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/Search/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2GroupSearchValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return groupV2GroupSearchCall(_callback);

    }

    /**
     * 
     * Search for Groups.
     * @return GroupV2GroupSearch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GroupSearch200Response groupV2GroupSearch() throws ApiException {
        ApiResponse<GroupV2GroupSearch200Response> localVarResp = groupV2GroupSearchWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Search for Groups.
     * @return ApiResponse&lt;GroupV2GroupSearch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GroupSearch200Response> groupV2GroupSearchWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = groupV2GroupSearchValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GroupV2GroupSearch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for Groups.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2GroupSearchAsync(final ApiCallback<GroupV2GroupSearch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2GroupSearchValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GroupV2GroupSearch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2IndividualGroupInvite
     * @param groupId ID of the group you would like to join. (required)
     * @param membershipId Membership id of the account being invited. (required)
     * @param membershipType MembershipType of the account being invited. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2IndividualGroupInviteCall(Long groupId, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2IndividualGroupInviteValidateBeforeCall(Long groupId, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2IndividualGroupInvite(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling groupV2IndividualGroupInvite(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling groupV2IndividualGroupInvite(Async)");
        }

        return groupV2IndividualGroupInviteCall(groupId, membershipId, membershipType, _callback);

    }

    /**
     * 
     * Invite a user to join this group.
     * @param groupId ID of the group you would like to join. (required)
     * @param membershipId Membership id of the account being invited. (required)
     * @param membershipType MembershipType of the account being invited. (required)
     * @return GroupV2IndividualGroupInvite200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2IndividualGroupInvite200Response groupV2IndividualGroupInvite(Long groupId, Long membershipId, Integer membershipType) throws ApiException {
        ApiResponse<GroupV2IndividualGroupInvite200Response> localVarResp = groupV2IndividualGroupInviteWithHttpInfo(groupId, membershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Invite a user to join this group.
     * @param groupId ID of the group you would like to join. (required)
     * @param membershipId Membership id of the account being invited. (required)
     * @param membershipType MembershipType of the account being invited. (required)
     * @return ApiResponse&lt;GroupV2IndividualGroupInvite200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2IndividualGroupInvite200Response> groupV2IndividualGroupInviteWithHttpInfo(Long groupId, Long membershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = groupV2IndividualGroupInviteValidateBeforeCall(groupId, membershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<GroupV2IndividualGroupInvite200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Invite a user to join this group.
     * @param groupId ID of the group you would like to join. (required)
     * @param membershipId Membership id of the account being invited. (required)
     * @param membershipType MembershipType of the account being invited. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2IndividualGroupInviteAsync(Long groupId, Long membershipId, Integer membershipType, final ApiCallback<GroupV2IndividualGroupInvite200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2IndividualGroupInviteValidateBeforeCall(groupId, membershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<GroupV2IndividualGroupInvite200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2IndividualGroupInviteCancel
     * @param groupId ID of the group you would like to join. (required)
     * @param membershipId Membership id of the account being cancelled. (required)
     * @param membershipType MembershipType of the account being cancelled. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2IndividualGroupInviteCancelCall(Long groupId, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2IndividualGroupInviteCancelValidateBeforeCall(Long groupId, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2IndividualGroupInviteCancel(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling groupV2IndividualGroupInviteCancel(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling groupV2IndividualGroupInviteCancel(Async)");
        }

        return groupV2IndividualGroupInviteCancelCall(groupId, membershipId, membershipType, _callback);

    }

    /**
     * 
     * Cancels a pending invitation to join a group.
     * @param groupId ID of the group you would like to join. (required)
     * @param membershipId Membership id of the account being cancelled. (required)
     * @param membershipType MembershipType of the account being cancelled. (required)
     * @return GroupV2IndividualGroupInvite200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2IndividualGroupInvite200Response groupV2IndividualGroupInviteCancel(Long groupId, Long membershipId, Integer membershipType) throws ApiException {
        ApiResponse<GroupV2IndividualGroupInvite200Response> localVarResp = groupV2IndividualGroupInviteCancelWithHttpInfo(groupId, membershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancels a pending invitation to join a group.
     * @param groupId ID of the group you would like to join. (required)
     * @param membershipId Membership id of the account being cancelled. (required)
     * @param membershipType MembershipType of the account being cancelled. (required)
     * @return ApiResponse&lt;GroupV2IndividualGroupInvite200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2IndividualGroupInvite200Response> groupV2IndividualGroupInviteCancelWithHttpInfo(Long groupId, Long membershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = groupV2IndividualGroupInviteCancelValidateBeforeCall(groupId, membershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<GroupV2IndividualGroupInvite200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancels a pending invitation to join a group.
     * @param groupId ID of the group you would like to join. (required)
     * @param membershipId Membership id of the account being cancelled. (required)
     * @param membershipType MembershipType of the account being cancelled. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2IndividualGroupInviteCancelAsync(Long groupId, Long membershipId, Integer membershipType, final ApiCallback<GroupV2IndividualGroupInvite200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2IndividualGroupInviteCancelValidateBeforeCall(groupId, membershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<GroupV2IndividualGroupInvite200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2KickMember
     * @param groupId Group ID to kick the user from. (required)
     * @param membershipId Membership ID to kick. (required)
     * @param membershipType Membership type of the provided membership ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2KickMemberCall(Long groupId, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2KickMemberValidateBeforeCall(Long groupId, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2KickMember(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling groupV2KickMember(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling groupV2KickMember(Async)");
        }

        return groupV2KickMemberCall(groupId, membershipId, membershipType, _callback);

    }

    /**
     * 
     * Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
     * @param groupId Group ID to kick the user from. (required)
     * @param membershipId Membership ID to kick. (required)
     * @param membershipType Membership type of the provided membership ID. (required)
     * @return GroupV2KickMember200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2KickMember200Response groupV2KickMember(Long groupId, Long membershipId, Integer membershipType) throws ApiException {
        ApiResponse<GroupV2KickMember200Response> localVarResp = groupV2KickMemberWithHttpInfo(groupId, membershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
     * @param groupId Group ID to kick the user from. (required)
     * @param membershipId Membership ID to kick. (required)
     * @param membershipType Membership type of the provided membership ID. (required)
     * @return ApiResponse&lt;GroupV2KickMember200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2KickMember200Response> groupV2KickMemberWithHttpInfo(Long groupId, Long membershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = groupV2KickMemberValidateBeforeCall(groupId, membershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<GroupV2KickMember200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
     * @param groupId Group ID to kick the user from. (required)
     * @param membershipId Membership ID to kick. (required)
     * @param membershipType Membership type of the provided membership ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2KickMemberAsync(Long groupId, Long membershipId, Integer membershipType, final ApiCallback<GroupV2KickMember200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2KickMemberValidateBeforeCall(groupId, membershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<GroupV2KickMember200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2RecoverGroupForFounder
     * @param groupType Type of group the supplied member founded. (required)
     * @param membershipId Membership ID to for which to find founded groups. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2RecoverGroupForFounderCall(Integer groupType, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/"
            .replace("{" + "groupType" + "}", localVarApiClient.escapeString(groupType.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2RecoverGroupForFounderValidateBeforeCall(Integer groupType, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupType' is set
        if (groupType == null) {
            throw new ApiException("Missing the required parameter 'groupType' when calling groupV2RecoverGroupForFounder(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling groupV2RecoverGroupForFounder(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling groupV2RecoverGroupForFounder(Async)");
        }

        return groupV2RecoverGroupForFounderCall(groupType, membershipId, membershipType, _callback);

    }

    /**
     * 
     * Allows a founder to manually recover a group they can see in game but not on bungie.net
     * @param groupType Type of group the supplied member founded. (required)
     * @param membershipId Membership ID to for which to find founded groups. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @return GroupV2RecoverGroupForFounder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2RecoverGroupForFounder200Response groupV2RecoverGroupForFounder(Integer groupType, Long membershipId, Integer membershipType) throws ApiException {
        ApiResponse<GroupV2RecoverGroupForFounder200Response> localVarResp = groupV2RecoverGroupForFounderWithHttpInfo(groupType, membershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Allows a founder to manually recover a group they can see in game but not on bungie.net
     * @param groupType Type of group the supplied member founded. (required)
     * @param membershipId Membership ID to for which to find founded groups. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @return ApiResponse&lt;GroupV2RecoverGroupForFounder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2RecoverGroupForFounder200Response> groupV2RecoverGroupForFounderWithHttpInfo(Integer groupType, Long membershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = groupV2RecoverGroupForFounderValidateBeforeCall(groupType, membershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<GroupV2RecoverGroupForFounder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows a founder to manually recover a group they can see in game but not on bungie.net
     * @param groupType Type of group the supplied member founded. (required)
     * @param membershipId Membership ID to for which to find founded groups. (required)
     * @param membershipType Membership type of the supplied membership ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2RecoverGroupForFounderAsync(Integer groupType, Long membershipId, Integer membershipType, final ApiCallback<GroupV2RecoverGroupForFounder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2RecoverGroupForFounderValidateBeforeCall(groupType, membershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<GroupV2RecoverGroupForFounder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupV2UnbanMember
     * @param groupId  (required)
     * @param membershipId Membership ID of the member to unban from the group (required)
     * @param membershipType Membership type of the provided membership ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2UnbanMemberCall(Long groupId, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupV2UnbanMemberValidateBeforeCall(Long groupId, Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupV2UnbanMember(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling groupV2UnbanMember(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling groupV2UnbanMember(Async)");
        }

        return groupV2UnbanMemberCall(groupId, membershipId, membershipType, _callback);

    }

    /**
     * 
     * Unbans the requested member, allowing them to re-apply for membership.
     * @param groupId  (required)
     * @param membershipId Membership ID of the member to unban from the group (required)
     * @param membershipType Membership type of the provided membership ID. (required)
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response groupV2UnbanMember(Long groupId, Long membershipId, Integer membershipType) throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = groupV2UnbanMemberWithHttpInfo(groupId, membershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Unbans the requested member, allowing them to re-apply for membership.
     * @param groupId  (required)
     * @param membershipId Membership ID of the member to unban from the group (required)
     * @param membershipType Membership type of the provided membership ID. (required)
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> groupV2UnbanMemberWithHttpInfo(Long groupId, Long membershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = groupV2UnbanMemberValidateBeforeCall(groupId, membershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unbans the requested member, allowing them to re-apply for membership.
     * @param groupId  (required)
     * @param membershipId Membership ID of the member to unban from the group (required)
     * @param membershipType Membership type of the provided membership ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupV2UnbanMemberAsync(Long groupId, Long membershipId, Integer membershipType, final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupV2UnbanMemberValidateBeforeCall(groupId, membershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
