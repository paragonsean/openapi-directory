/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UserUserInfoCard;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyHistoricalStatsDestinyPlayer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyHistoricalStatsDestinyPlayer {
  public static final String SERIALIZED_NAME_BUNGIE_NET_USER_INFO = "bungieNetUserInfo";
  @SerializedName(SERIALIZED_NAME_BUNGIE_NET_USER_INFO)
  private UserUserInfoCard bungieNetUserInfo;

  public static final String SERIALIZED_NAME_CHARACTER_CLASS = "characterClass";
  @SerializedName(SERIALIZED_NAME_CHARACTER_CLASS)
  private String characterClass;

  public static final String SERIALIZED_NAME_CHARACTER_LEVEL = "characterLevel";
  @SerializedName(SERIALIZED_NAME_CHARACTER_LEVEL)
  private Integer characterLevel;

  public static final String SERIALIZED_NAME_CLAN_NAME = "clanName";
  @SerializedName(SERIALIZED_NAME_CLAN_NAME)
  private String clanName;

  public static final String SERIALIZED_NAME_CLAN_TAG = "clanTag";
  @SerializedName(SERIALIZED_NAME_CLAN_TAG)
  private String clanTag;

  public static final String SERIALIZED_NAME_CLASS_HASH = "classHash";
  @SerializedName(SERIALIZED_NAME_CLASS_HASH)
  private Integer classHash;

  public static final String SERIALIZED_NAME_DESTINY_USER_INFO = "destinyUserInfo";
  @SerializedName(SERIALIZED_NAME_DESTINY_USER_INFO)
  private UserUserInfoCard destinyUserInfo;

  public static final String SERIALIZED_NAME_EMBLEM_HASH = "emblemHash";
  @SerializedName(SERIALIZED_NAME_EMBLEM_HASH)
  private Integer emblemHash;

  public static final String SERIALIZED_NAME_GENDER_HASH = "genderHash";
  @SerializedName(SERIALIZED_NAME_GENDER_HASH)
  private Integer genderHash;

  public static final String SERIALIZED_NAME_LIGHT_LEVEL = "lightLevel";
  @SerializedName(SERIALIZED_NAME_LIGHT_LEVEL)
  private Integer lightLevel;

  public static final String SERIALIZED_NAME_RACE_HASH = "raceHash";
  @SerializedName(SERIALIZED_NAME_RACE_HASH)
  private Integer raceHash;

  public DestinyHistoricalStatsDestinyPlayer() {
  }

  public DestinyHistoricalStatsDestinyPlayer bungieNetUserInfo(UserUserInfoCard bungieNetUserInfo) {
    this.bungieNetUserInfo = bungieNetUserInfo;
    return this;
  }

  /**
   * Details about the player as they are known on BungieNet. This will be undefined if the player has marked their credential private, or does not have a BungieNet account.
   * @return bungieNetUserInfo
   */
  @javax.annotation.Nullable
  public UserUserInfoCard getBungieNetUserInfo() {
    return bungieNetUserInfo;
  }

  public void setBungieNetUserInfo(UserUserInfoCard bungieNetUserInfo) {
    this.bungieNetUserInfo = bungieNetUserInfo;
  }


  public DestinyHistoricalStatsDestinyPlayer characterClass(String characterClass) {
    this.characterClass = characterClass;
    return this;
  }

  /**
   * Class of the character if applicable and available.
   * @return characterClass
   */
  @javax.annotation.Nullable
  public String getCharacterClass() {
    return characterClass;
  }

  public void setCharacterClass(String characterClass) {
    this.characterClass = characterClass;
  }


  public DestinyHistoricalStatsDestinyPlayer characterLevel(Integer characterLevel) {
    this.characterLevel = characterLevel;
    return this;
  }

  /**
   * Level of the character if available. Zero if it is not available.
   * @return characterLevel
   */
  @javax.annotation.Nullable
  public Integer getCharacterLevel() {
    return characterLevel;
  }

  public void setCharacterLevel(Integer characterLevel) {
    this.characterLevel = characterLevel;
  }


  public DestinyHistoricalStatsDestinyPlayer clanName(String clanName) {
    this.clanName = clanName;
    return this;
  }

  /**
   * Current clan name for the player. This value may be null or an empty string if the user does not have a clan.
   * @return clanName
   */
  @javax.annotation.Nullable
  public String getClanName() {
    return clanName;
  }

  public void setClanName(String clanName) {
    this.clanName = clanName;
  }


  public DestinyHistoricalStatsDestinyPlayer clanTag(String clanTag) {
    this.clanTag = clanTag;
    return this;
  }

  /**
   * Current clan tag for the player. This value may be null or an empty string if the user does not have a clan.
   * @return clanTag
   */
  @javax.annotation.Nullable
  public String getClanTag() {
    return clanTag;
  }

  public void setClanTag(String clanTag) {
    this.clanTag = clanTag;
  }


  public DestinyHistoricalStatsDestinyPlayer classHash(Integer classHash) {
    this.classHash = classHash;
    return this;
  }

  /**
   * Get classHash
   * @return classHash
   */
  @javax.annotation.Nullable
  public Integer getClassHash() {
    return classHash;
  }

  public void setClassHash(Integer classHash) {
    this.classHash = classHash;
  }


  public DestinyHistoricalStatsDestinyPlayer destinyUserInfo(UserUserInfoCard destinyUserInfo) {
    this.destinyUserInfo = destinyUserInfo;
    return this;
  }

  /**
   * Details about the player as they are known in game (platform display name, Destiny emblem)
   * @return destinyUserInfo
   */
  @javax.annotation.Nullable
  public UserUserInfoCard getDestinyUserInfo() {
    return destinyUserInfo;
  }

  public void setDestinyUserInfo(UserUserInfoCard destinyUserInfo) {
    this.destinyUserInfo = destinyUserInfo;
  }


  public DestinyHistoricalStatsDestinyPlayer emblemHash(Integer emblemHash) {
    this.emblemHash = emblemHash;
    return this;
  }

  /**
   * If we know the emblem&#39;s hash, this can be used to look up the player&#39;s emblem at the time of a match when receiving PGCR data, or otherwise their currently equipped emblem (if we are able to obtain it).
   * @return emblemHash
   */
  @javax.annotation.Nullable
  public Integer getEmblemHash() {
    return emblemHash;
  }

  public void setEmblemHash(Integer emblemHash) {
    this.emblemHash = emblemHash;
  }


  public DestinyHistoricalStatsDestinyPlayer genderHash(Integer genderHash) {
    this.genderHash = genderHash;
    return this;
  }

  /**
   * Get genderHash
   * @return genderHash
   */
  @javax.annotation.Nullable
  public Integer getGenderHash() {
    return genderHash;
  }

  public void setGenderHash(Integer genderHash) {
    this.genderHash = genderHash;
  }


  public DestinyHistoricalStatsDestinyPlayer lightLevel(Integer lightLevel) {
    this.lightLevel = lightLevel;
    return this;
  }

  /**
   * Light Level of the character if available. Zero if it is not available.
   * @return lightLevel
   */
  @javax.annotation.Nullable
  public Integer getLightLevel() {
    return lightLevel;
  }

  public void setLightLevel(Integer lightLevel) {
    this.lightLevel = lightLevel;
  }


  public DestinyHistoricalStatsDestinyPlayer raceHash(Integer raceHash) {
    this.raceHash = raceHash;
    return this;
  }

  /**
   * Get raceHash
   * @return raceHash
   */
  @javax.annotation.Nullable
  public Integer getRaceHash() {
    return raceHash;
  }

  public void setRaceHash(Integer raceHash) {
    this.raceHash = raceHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyHistoricalStatsDestinyPlayer destinyHistoricalStatsDestinyPlayer = (DestinyHistoricalStatsDestinyPlayer) o;
    return Objects.equals(this.bungieNetUserInfo, destinyHistoricalStatsDestinyPlayer.bungieNetUserInfo) &&
        Objects.equals(this.characterClass, destinyHistoricalStatsDestinyPlayer.characterClass) &&
        Objects.equals(this.characterLevel, destinyHistoricalStatsDestinyPlayer.characterLevel) &&
        Objects.equals(this.clanName, destinyHistoricalStatsDestinyPlayer.clanName) &&
        Objects.equals(this.clanTag, destinyHistoricalStatsDestinyPlayer.clanTag) &&
        Objects.equals(this.classHash, destinyHistoricalStatsDestinyPlayer.classHash) &&
        Objects.equals(this.destinyUserInfo, destinyHistoricalStatsDestinyPlayer.destinyUserInfo) &&
        Objects.equals(this.emblemHash, destinyHistoricalStatsDestinyPlayer.emblemHash) &&
        Objects.equals(this.genderHash, destinyHistoricalStatsDestinyPlayer.genderHash) &&
        Objects.equals(this.lightLevel, destinyHistoricalStatsDestinyPlayer.lightLevel) &&
        Objects.equals(this.raceHash, destinyHistoricalStatsDestinyPlayer.raceHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bungieNetUserInfo, characterClass, characterLevel, clanName, clanTag, classHash, destinyUserInfo, emblemHash, genderHash, lightLevel, raceHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyHistoricalStatsDestinyPlayer {\n");
    sb.append("    bungieNetUserInfo: ").append(toIndentedString(bungieNetUserInfo)).append("\n");
    sb.append("    characterClass: ").append(toIndentedString(characterClass)).append("\n");
    sb.append("    characterLevel: ").append(toIndentedString(characterLevel)).append("\n");
    sb.append("    clanName: ").append(toIndentedString(clanName)).append("\n");
    sb.append("    clanTag: ").append(toIndentedString(clanTag)).append("\n");
    sb.append("    classHash: ").append(toIndentedString(classHash)).append("\n");
    sb.append("    destinyUserInfo: ").append(toIndentedString(destinyUserInfo)).append("\n");
    sb.append("    emblemHash: ").append(toIndentedString(emblemHash)).append("\n");
    sb.append("    genderHash: ").append(toIndentedString(genderHash)).append("\n");
    sb.append("    lightLevel: ").append(toIndentedString(lightLevel)).append("\n");
    sb.append("    raceHash: ").append(toIndentedString(raceHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bungieNetUserInfo");
    openapiFields.add("characterClass");
    openapiFields.add("characterLevel");
    openapiFields.add("clanName");
    openapiFields.add("clanTag");
    openapiFields.add("classHash");
    openapiFields.add("destinyUserInfo");
    openapiFields.add("emblemHash");
    openapiFields.add("genderHash");
    openapiFields.add("lightLevel");
    openapiFields.add("raceHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyHistoricalStatsDestinyPlayer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyHistoricalStatsDestinyPlayer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyHistoricalStatsDestinyPlayer is not found in the empty JSON string", DestinyHistoricalStatsDestinyPlayer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyHistoricalStatsDestinyPlayer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyHistoricalStatsDestinyPlayer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bungieNetUserInfo`
      if (jsonObj.get("bungieNetUserInfo") != null && !jsonObj.get("bungieNetUserInfo").isJsonNull()) {
        UserUserInfoCard.validateJsonElement(jsonObj.get("bungieNetUserInfo"));
      }
      if ((jsonObj.get("characterClass") != null && !jsonObj.get("characterClass").isJsonNull()) && !jsonObj.get("characterClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `characterClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("characterClass").toString()));
      }
      if ((jsonObj.get("clanName") != null && !jsonObj.get("clanName").isJsonNull()) && !jsonObj.get("clanName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clanName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clanName").toString()));
      }
      if ((jsonObj.get("clanTag") != null && !jsonObj.get("clanTag").isJsonNull()) && !jsonObj.get("clanTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clanTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clanTag").toString()));
      }
      // validate the optional field `destinyUserInfo`
      if (jsonObj.get("destinyUserInfo") != null && !jsonObj.get("destinyUserInfo").isJsonNull()) {
        UserUserInfoCard.validateJsonElement(jsonObj.get("destinyUserInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyHistoricalStatsDestinyPlayer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyHistoricalStatsDestinyPlayer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyHistoricalStatsDestinyPlayer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyHistoricalStatsDestinyPlayer.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyHistoricalStatsDestinyPlayer>() {
           @Override
           public void write(JsonWriter out, DestinyHistoricalStatsDestinyPlayer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyHistoricalStatsDestinyPlayer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyHistoricalStatsDestinyPlayer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyHistoricalStatsDestinyPlayer
   * @throws IOException if the JSON string is invalid with respect to DestinyHistoricalStatsDestinyPlayer
   */
  public static DestinyHistoricalStatsDestinyPlayer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyHistoricalStatsDestinyPlayer.class);
  }

  /**
   * Convert an instance of DestinyHistoricalStatsDestinyPlayer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

