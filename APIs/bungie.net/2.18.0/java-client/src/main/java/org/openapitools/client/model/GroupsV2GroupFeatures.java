/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GroupsV2GroupFeatures
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupsV2GroupFeatures {
  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private Integer capabilities;

  public static final String SERIALIZED_NAME_HOST_GUIDED_GAME_PERMISSION_OVERRIDE = "hostGuidedGamePermissionOverride";
  @SerializedName(SERIALIZED_NAME_HOST_GUIDED_GAME_PERMISSION_OVERRIDE)
  private Integer hostGuidedGamePermissionOverride;

  public static final String SERIALIZED_NAME_INVITE_PERMISSION_OVERRIDE = "invitePermissionOverride";
  @SerializedName(SERIALIZED_NAME_INVITE_PERMISSION_OVERRIDE)
  private Boolean invitePermissionOverride;

  public static final String SERIALIZED_NAME_JOIN_LEVEL = "joinLevel";
  @SerializedName(SERIALIZED_NAME_JOIN_LEVEL)
  private Integer joinLevel;

  public static final String SERIALIZED_NAME_MAXIMUM_MEMBERS = "maximumMembers";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_MEMBERS)
  private Integer maximumMembers;

  public static final String SERIALIZED_NAME_MAXIMUM_MEMBERSHIPS_OF_GROUP_TYPE = "maximumMembershipsOfGroupType";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_MEMBERSHIPS_OF_GROUP_TYPE)
  private Integer maximumMembershipsOfGroupType;

  public static final String SERIALIZED_NAME_MEMBERSHIP_TYPES = "membershipTypes";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_TYPES)
  private List<Integer> membershipTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_BANNER_PERMISSION_OVERRIDE = "updateBannerPermissionOverride";
  @SerializedName(SERIALIZED_NAME_UPDATE_BANNER_PERMISSION_OVERRIDE)
  private Boolean updateBannerPermissionOverride;

  public static final String SERIALIZED_NAME_UPDATE_CULTURE_PERMISSION_OVERRIDE = "updateCulturePermissionOverride";
  @SerializedName(SERIALIZED_NAME_UPDATE_CULTURE_PERMISSION_OVERRIDE)
  private Boolean updateCulturePermissionOverride;

  public GroupsV2GroupFeatures() {
  }

  public GroupsV2GroupFeatures capabilities(Integer capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public Integer getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(Integer capabilities) {
    this.capabilities = capabilities;
  }


  public GroupsV2GroupFeatures hostGuidedGamePermissionOverride(Integer hostGuidedGamePermissionOverride) {
    this.hostGuidedGamePermissionOverride = hostGuidedGamePermissionOverride;
    return this;
  }

  /**
   * Minimum Member Level allowed to host guided games  Always Allowed: Founder, Acting Founder, Admin  Allowed Overrides: None, Member, Beginner  Default is Member for clans, None for groups, although this means nothing for groups.
   * @return hostGuidedGamePermissionOverride
   */
  @javax.annotation.Nullable
  public Integer getHostGuidedGamePermissionOverride() {
    return hostGuidedGamePermissionOverride;
  }

  public void setHostGuidedGamePermissionOverride(Integer hostGuidedGamePermissionOverride) {
    this.hostGuidedGamePermissionOverride = hostGuidedGamePermissionOverride;
  }


  public GroupsV2GroupFeatures invitePermissionOverride(Boolean invitePermissionOverride) {
    this.invitePermissionOverride = invitePermissionOverride;
    return this;
  }

  /**
   * Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don&#39;t  Default is false for clans, true for groups.
   * @return invitePermissionOverride
   */
  @javax.annotation.Nullable
  public Boolean getInvitePermissionOverride() {
    return invitePermissionOverride;
  }

  public void setInvitePermissionOverride(Boolean invitePermissionOverride) {
    this.invitePermissionOverride = invitePermissionOverride;
  }


  public GroupsV2GroupFeatures joinLevel(Integer joinLevel) {
    this.joinLevel = joinLevel;
    return this;
  }

  /**
   * Level to join a member at when accepting an invite, application, or joining an open clan  Default is Beginner.
   * @return joinLevel
   */
  @javax.annotation.Nullable
  public Integer getJoinLevel() {
    return joinLevel;
  }

  public void setJoinLevel(Integer joinLevel) {
    this.joinLevel = joinLevel;
  }


  public GroupsV2GroupFeatures maximumMembers(Integer maximumMembers) {
    this.maximumMembers = maximumMembers;
    return this;
  }

  /**
   * Get maximumMembers
   * @return maximumMembers
   */
  @javax.annotation.Nullable
  public Integer getMaximumMembers() {
    return maximumMembers;
  }

  public void setMaximumMembers(Integer maximumMembers) {
    this.maximumMembers = maximumMembers;
  }


  public GroupsV2GroupFeatures maximumMembershipsOfGroupType(Integer maximumMembershipsOfGroupType) {
    this.maximumMembershipsOfGroupType = maximumMembershipsOfGroupType;
    return this;
  }

  /**
   * Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.
   * @return maximumMembershipsOfGroupType
   */
  @javax.annotation.Nullable
  public Integer getMaximumMembershipsOfGroupType() {
    return maximumMembershipsOfGroupType;
  }

  public void setMaximumMembershipsOfGroupType(Integer maximumMembershipsOfGroupType) {
    this.maximumMembershipsOfGroupType = maximumMembershipsOfGroupType;
  }


  public GroupsV2GroupFeatures membershipTypes(List<Integer> membershipTypes) {
    this.membershipTypes = membershipTypes;
    return this;
  }

  public GroupsV2GroupFeatures addMembershipTypesItem(Integer membershipTypesItem) {
    if (this.membershipTypes == null) {
      this.membershipTypes = new ArrayList<>();
    }
    this.membershipTypes.add(membershipTypesItem);
    return this;
  }

  /**
   * Get membershipTypes
   * @return membershipTypes
   */
  @javax.annotation.Nullable
  public List<Integer> getMembershipTypes() {
    return membershipTypes;
  }

  public void setMembershipTypes(List<Integer> membershipTypes) {
    this.membershipTypes = membershipTypes;
  }


  public GroupsV2GroupFeatures updateBannerPermissionOverride(Boolean updateBannerPermissionOverride) {
    this.updateBannerPermissionOverride = updateBannerPermissionOverride;
    return this;
  }

  /**
   * Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don&#39;t  Default is false for clans, true for groups.
   * @return updateBannerPermissionOverride
   */
  @javax.annotation.Nullable
  public Boolean getUpdateBannerPermissionOverride() {
    return updateBannerPermissionOverride;
  }

  public void setUpdateBannerPermissionOverride(Boolean updateBannerPermissionOverride) {
    this.updateBannerPermissionOverride = updateBannerPermissionOverride;
  }


  public GroupsV2GroupFeatures updateCulturePermissionOverride(Boolean updateCulturePermissionOverride) {
    this.updateCulturePermissionOverride = updateCulturePermissionOverride;
    return this;
  }

  /**
   * Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don&#39;t  Default is false for clans, true for groups.
   * @return updateCulturePermissionOverride
   */
  @javax.annotation.Nullable
  public Boolean getUpdateCulturePermissionOverride() {
    return updateCulturePermissionOverride;
  }

  public void setUpdateCulturePermissionOverride(Boolean updateCulturePermissionOverride) {
    this.updateCulturePermissionOverride = updateCulturePermissionOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupsV2GroupFeatures groupsV2GroupFeatures = (GroupsV2GroupFeatures) o;
    return Objects.equals(this.capabilities, groupsV2GroupFeatures.capabilities) &&
        Objects.equals(this.hostGuidedGamePermissionOverride, groupsV2GroupFeatures.hostGuidedGamePermissionOverride) &&
        Objects.equals(this.invitePermissionOverride, groupsV2GroupFeatures.invitePermissionOverride) &&
        Objects.equals(this.joinLevel, groupsV2GroupFeatures.joinLevel) &&
        Objects.equals(this.maximumMembers, groupsV2GroupFeatures.maximumMembers) &&
        Objects.equals(this.maximumMembershipsOfGroupType, groupsV2GroupFeatures.maximumMembershipsOfGroupType) &&
        Objects.equals(this.membershipTypes, groupsV2GroupFeatures.membershipTypes) &&
        Objects.equals(this.updateBannerPermissionOverride, groupsV2GroupFeatures.updateBannerPermissionOverride) &&
        Objects.equals(this.updateCulturePermissionOverride, groupsV2GroupFeatures.updateCulturePermissionOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilities, hostGuidedGamePermissionOverride, invitePermissionOverride, joinLevel, maximumMembers, maximumMembershipsOfGroupType, membershipTypes, updateBannerPermissionOverride, updateCulturePermissionOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupsV2GroupFeatures {\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    hostGuidedGamePermissionOverride: ").append(toIndentedString(hostGuidedGamePermissionOverride)).append("\n");
    sb.append("    invitePermissionOverride: ").append(toIndentedString(invitePermissionOverride)).append("\n");
    sb.append("    joinLevel: ").append(toIndentedString(joinLevel)).append("\n");
    sb.append("    maximumMembers: ").append(toIndentedString(maximumMembers)).append("\n");
    sb.append("    maximumMembershipsOfGroupType: ").append(toIndentedString(maximumMembershipsOfGroupType)).append("\n");
    sb.append("    membershipTypes: ").append(toIndentedString(membershipTypes)).append("\n");
    sb.append("    updateBannerPermissionOverride: ").append(toIndentedString(updateBannerPermissionOverride)).append("\n");
    sb.append("    updateCulturePermissionOverride: ").append(toIndentedString(updateCulturePermissionOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilities");
    openapiFields.add("hostGuidedGamePermissionOverride");
    openapiFields.add("invitePermissionOverride");
    openapiFields.add("joinLevel");
    openapiFields.add("maximumMembers");
    openapiFields.add("maximumMembershipsOfGroupType");
    openapiFields.add("membershipTypes");
    openapiFields.add("updateBannerPermissionOverride");
    openapiFields.add("updateCulturePermissionOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupsV2GroupFeatures
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupsV2GroupFeatures.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupsV2GroupFeatures is not found in the empty JSON string", GroupsV2GroupFeatures.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupsV2GroupFeatures.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupsV2GroupFeatures` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("membershipTypes") != null && !jsonObj.get("membershipTypes").isJsonNull() && !jsonObj.get("membershipTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `membershipTypes` to be an array in the JSON string but got `%s`", jsonObj.get("membershipTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupsV2GroupFeatures.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupsV2GroupFeatures' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupsV2GroupFeatures> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupsV2GroupFeatures.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupsV2GroupFeatures>() {
           @Override
           public void write(JsonWriter out, GroupsV2GroupFeatures value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupsV2GroupFeatures read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupsV2GroupFeatures given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupsV2GroupFeatures
   * @throws IOException if the JSON string is invalid with respect to GroupsV2GroupFeatures
   */
  public static GroupsV2GroupFeatures fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupsV2GroupFeatures.class);
  }

  /**
   * Convert an instance of GroupsV2GroupFeatures to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

