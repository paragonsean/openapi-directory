/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This represents a single \&quot;thing\&quot; being tracked by the player.  This can point to many types of entities, but only a subset of them will actually have a valid hash identifier for whatever it is being pointed to.  It&#39;s up to you to interpret what it means when various combinations of these entries have values being tracked.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry {
  public static final String SERIALIZED_NAME_ACTIVITY_HASH = "activityHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_HASH)
  private Integer activityHash;

  public static final String SERIALIZED_NAME_ITEM_HASH = "itemHash";
  @SerializedName(SERIALIZED_NAME_ITEM_HASH)
  private Integer itemHash;

  public static final String SERIALIZED_NAME_LOCATION_HASH = "locationHash";
  @SerializedName(SERIALIZED_NAME_LOCATION_HASH)
  private Integer locationHash;

  public static final String SERIALIZED_NAME_OBJECTIVE_HASH = "objectiveHash";
  @SerializedName(SERIALIZED_NAME_OBJECTIVE_HASH)
  private Integer objectiveHash;

  public static final String SERIALIZED_NAME_QUESTLINE_ITEM_HASH = "questlineItemHash";
  @SerializedName(SERIALIZED_NAME_QUESTLINE_ITEM_HASH)
  private Integer questlineItemHash;

  public static final String SERIALIZED_NAME_TRACKED_DATE = "trackedDate";
  @SerializedName(SERIALIZED_NAME_TRACKED_DATE)
  private OffsetDateTime trackedDate;

  public DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry() {
  }

  public DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry activityHash(Integer activityHash) {
    this.activityHash = activityHash;
    return this;
  }

  /**
   * OPTIONAL - If this is tracking the status of a DestinyActivityDefinition, this is the identifier for that activity.
   * @return activityHash
   */
  @javax.annotation.Nullable
  public Integer getActivityHash() {
    return activityHash;
  }

  public void setActivityHash(Integer activityHash) {
    this.activityHash = activityHash;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry itemHash(Integer itemHash) {
    this.itemHash = itemHash;
    return this;
  }

  /**
   * OPTIONAL - If this is tracking the status of a DestinyInventoryItemDefinition, this is the identifier for that item.
   * @return itemHash
   */
  @javax.annotation.Nullable
  public Integer getItemHash() {
    return itemHash;
  }

  public void setItemHash(Integer itemHash) {
    this.itemHash = itemHash;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry locationHash(Integer locationHash) {
    this.locationHash = locationHash;
    return this;
  }

  /**
   * OPTIONAL - If this is tracking a DestinyLocationDefinition, this is the identifier for that location.
   * @return locationHash
   */
  @javax.annotation.Nullable
  public Integer getLocationHash() {
    return locationHash;
  }

  public void setLocationHash(Integer locationHash) {
    this.locationHash = locationHash;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry objectiveHash(Integer objectiveHash) {
    this.objectiveHash = objectiveHash;
    return this;
  }

  /**
   * OPTIONAL - If this is tracking the status of a DestinyObjectiveDefinition, this is the identifier for that objective.
   * @return objectiveHash
   */
  @javax.annotation.Nullable
  public Integer getObjectiveHash() {
    return objectiveHash;
  }

  public void setObjectiveHash(Integer objectiveHash) {
    this.objectiveHash = objectiveHash;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry questlineItemHash(Integer questlineItemHash) {
    this.questlineItemHash = questlineItemHash;
    return this;
  }

  /**
   * OPTIONAL - If this is tracking the status of a quest, this is the identifier for the DestinyInventoryItemDefinition that containst that questline data.
   * @return questlineItemHash
   */
  @javax.annotation.Nullable
  public Integer getQuestlineItemHash() {
    return questlineItemHash;
  }

  public void setQuestlineItemHash(Integer questlineItemHash) {
    this.questlineItemHash = questlineItemHash;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry trackedDate(OffsetDateTime trackedDate) {
    this.trackedDate = trackedDate;
    return this;
  }

  /**
   * OPTIONAL - I&#39;ve got to level with you, I don&#39;t really know what this is. Is it when you started tracking it? Is it only populated for tracked items that have time limits?  I don&#39;t know, but we can get at it - when I get time to actually test what it is, I&#39;ll update this. In the meantime, bask in the mysterious data.
   * @return trackedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTrackedDate() {
    return trackedDate;
  }

  public void setTrackedDate(OffsetDateTime trackedDate) {
    this.trackedDate = trackedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry destinyComponentsProfilesDestinyProfileTransitoryTrackingEntry = (DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry) o;
    return Objects.equals(this.activityHash, destinyComponentsProfilesDestinyProfileTransitoryTrackingEntry.activityHash) &&
        Objects.equals(this.itemHash, destinyComponentsProfilesDestinyProfileTransitoryTrackingEntry.itemHash) &&
        Objects.equals(this.locationHash, destinyComponentsProfilesDestinyProfileTransitoryTrackingEntry.locationHash) &&
        Objects.equals(this.objectiveHash, destinyComponentsProfilesDestinyProfileTransitoryTrackingEntry.objectiveHash) &&
        Objects.equals(this.questlineItemHash, destinyComponentsProfilesDestinyProfileTransitoryTrackingEntry.questlineItemHash) &&
        Objects.equals(this.trackedDate, destinyComponentsProfilesDestinyProfileTransitoryTrackingEntry.trackedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityHash, itemHash, locationHash, objectiveHash, questlineItemHash, trackedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry {\n");
    sb.append("    activityHash: ").append(toIndentedString(activityHash)).append("\n");
    sb.append("    itemHash: ").append(toIndentedString(itemHash)).append("\n");
    sb.append("    locationHash: ").append(toIndentedString(locationHash)).append("\n");
    sb.append("    objectiveHash: ").append(toIndentedString(objectiveHash)).append("\n");
    sb.append("    questlineItemHash: ").append(toIndentedString(questlineItemHash)).append("\n");
    sb.append("    trackedDate: ").append(toIndentedString(trackedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityHash");
    openapiFields.add("itemHash");
    openapiFields.add("locationHash");
    openapiFields.add("objectiveHash");
    openapiFields.add("questlineItemHash");
    openapiFields.add("trackedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry is not found in the empty JSON string", DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry>() {
           @Override
           public void write(JsonWriter out, DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry
   * @throws IOException if the JSON string is invalid with respect to DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry
   */
  public static DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry.class);
  }

  /**
   * Convert an instance of DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

