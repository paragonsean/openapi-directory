/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a specific stat value on an item, and the minimum/maximum range that we could compute for the item based on our heuristics for how the item might be generated.  Not guaranteed to match real-world instances of the item, but should hopefully at least be close. If it&#39;s not close, let us know on the Bungie API forums.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyInventoryItemStatDefinition {
  public static final String SERIALIZED_NAME_DISPLAY_MAXIMUM = "displayMaximum";
  @SerializedName(SERIALIZED_NAME_DISPLAY_MAXIMUM)
  private Integer displayMaximum;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private Integer maximum;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private Integer minimum;

  public static final String SERIALIZED_NAME_STAT_HASH = "statHash";
  @SerializedName(SERIALIZED_NAME_STAT_HASH)
  private Integer statHash;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public DestinyDefinitionsDestinyInventoryItemStatDefinition() {
  }

  public DestinyDefinitionsDestinyInventoryItemStatDefinition displayMaximum(Integer displayMaximum) {
    this.displayMaximum = displayMaximum;
    return this;
  }

  /**
   * The maximum possible value for the stat as shown in the UI, if it is being shown somewhere that reveals maximum in the UI (such as a bar chart-style view).  This is pulled directly from the item&#39;s DestinyStatGroupDefinition, and placed here for convenience.  If not returned, there is no maximum to use (and thus the stat should not be shown in a way that assumes there is a limit to the stat)
   * @return displayMaximum
   */
  @javax.annotation.Nullable
  public Integer getDisplayMaximum() {
    return displayMaximum;
  }

  public void setDisplayMaximum(Integer displayMaximum) {
    this.displayMaximum = displayMaximum;
  }


  public DestinyDefinitionsDestinyInventoryItemStatDefinition maximum(Integer maximum) {
    this.maximum = maximum;
    return this;
  }

  /**
   * The maximum possible value for this stat that we think the item can roll.  WARNING: In Destiny 1, this field was calculated using the potential stat rolls on the item&#39;s talent grid. In Destiny 2, items no longer have meaningful talent grids and instead have sockets: but the calculation of this field was never altered to adapt to this change. As such, this field should be considered deprecated until we can address this oversight.
   * @return maximum
   */
  @javax.annotation.Nullable
  public Integer getMaximum() {
    return maximum;
  }

  public void setMaximum(Integer maximum) {
    this.maximum = maximum;
  }


  public DestinyDefinitionsDestinyInventoryItemStatDefinition minimum(Integer minimum) {
    this.minimum = minimum;
    return this;
  }

  /**
   * The minimum possible value for this stat that we think the item can roll.
   * @return minimum
   */
  @javax.annotation.Nullable
  public Integer getMinimum() {
    return minimum;
  }

  public void setMinimum(Integer minimum) {
    this.minimum = minimum;
  }


  public DestinyDefinitionsDestinyInventoryItemStatDefinition statHash(Integer statHash) {
    this.statHash = statHash;
    return this;
  }

  /**
   * The hash for the DestinyStatDefinition representing this stat.
   * @return statHash
   */
  @javax.annotation.Nullable
  public Integer getStatHash() {
    return statHash;
  }

  public void setStatHash(Integer statHash) {
    this.statHash = statHash;
  }


  public DestinyDefinitionsDestinyInventoryItemStatDefinition value(Integer value) {
    this.value = value;
    return this;
  }

  /**
   * This value represents the stat value assuming the minimum possible roll but accounting for any mandatory bonuses that should be applied to the stat on item creation.  In Destiny 1, this was different from the \&quot;minimum\&quot; value because there were certain conditions where an item could be theoretically lower level/value than the initial roll.   In Destiny 2, this is not possible unless Talent Grids begin to be used again for these purposes or some other system change occurs... thus in practice, value and minimum should be the same in Destiny 2. Good riddance.
   * @return value
   */
  @javax.annotation.Nullable
  public Integer getValue() {
    return value;
  }

  public void setValue(Integer value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyInventoryItemStatDefinition destinyDefinitionsDestinyInventoryItemStatDefinition = (DestinyDefinitionsDestinyInventoryItemStatDefinition) o;
    return Objects.equals(this.displayMaximum, destinyDefinitionsDestinyInventoryItemStatDefinition.displayMaximum) &&
        Objects.equals(this.maximum, destinyDefinitionsDestinyInventoryItemStatDefinition.maximum) &&
        Objects.equals(this.minimum, destinyDefinitionsDestinyInventoryItemStatDefinition.minimum) &&
        Objects.equals(this.statHash, destinyDefinitionsDestinyInventoryItemStatDefinition.statHash) &&
        Objects.equals(this.value, destinyDefinitionsDestinyInventoryItemStatDefinition.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayMaximum, maximum, minimum, statHash, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyInventoryItemStatDefinition {\n");
    sb.append("    displayMaximum: ").append(toIndentedString(displayMaximum)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    statHash: ").append(toIndentedString(statHash)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayMaximum");
    openapiFields.add("maximum");
    openapiFields.add("minimum");
    openapiFields.add("statHash");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyInventoryItemStatDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyInventoryItemStatDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyInventoryItemStatDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyInventoryItemStatDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyInventoryItemStatDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyInventoryItemStatDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyInventoryItemStatDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyInventoryItemStatDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyInventoryItemStatDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyInventoryItemStatDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyInventoryItemStatDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyInventoryItemStatDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyInventoryItemStatDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyInventoryItemStatDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyInventoryItemStatDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyInventoryItemStatDefinition
   */
  public static DestinyDefinitionsDestinyInventoryItemStatDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyInventoryItemStatDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyInventoryItemStatDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

