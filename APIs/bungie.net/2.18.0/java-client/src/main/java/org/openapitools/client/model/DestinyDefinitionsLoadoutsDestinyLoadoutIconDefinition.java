/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition {
  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_ICON_IMAGE_PATH = "iconImagePath";
  @SerializedName(SERIALIZED_NAME_ICON_IMAGE_PATH)
  private String iconImagePath;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition() {
  }

  public DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition iconImagePath(String iconImagePath) {
    this.iconImagePath = iconImagePath;
    return this;
  }

  /**
   * Get iconImagePath
   * @return iconImagePath
   */
  @javax.annotation.Nullable
  public String getIconImagePath() {
    return iconImagePath;
  }

  public void setIconImagePath(String iconImagePath) {
    this.iconImagePath = iconImagePath;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition destinyDefinitionsLoadoutsDestinyLoadoutIconDefinition = (DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition) o;
    return Objects.equals(this.hash, destinyDefinitionsLoadoutsDestinyLoadoutIconDefinition.hash) &&
        Objects.equals(this.iconImagePath, destinyDefinitionsLoadoutsDestinyLoadoutIconDefinition.iconImagePath) &&
        Objects.equals(this.index, destinyDefinitionsLoadoutsDestinyLoadoutIconDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsLoadoutsDestinyLoadoutIconDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hash, iconImagePath, index, redacted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition {\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    iconImagePath: ").append(toIndentedString(iconImagePath)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hash");
    openapiFields.add("iconImagePath");
    openapiFields.add("index");
    openapiFields.add("redacted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition is not found in the empty JSON string", DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("iconImagePath") != null && !jsonObj.get("iconImagePath").isJsonNull()) && !jsonObj.get("iconImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconImagePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition
   */
  public static DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

