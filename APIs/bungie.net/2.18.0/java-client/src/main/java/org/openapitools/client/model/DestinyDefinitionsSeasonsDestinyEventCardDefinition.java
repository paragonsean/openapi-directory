/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsSeasonsDestinyEventCardImages;
import org.openapitools.client.model.DestinyMiscDestinyColor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the properties of an &#39;Event Card&#39; in Destiny 2, to coincide with a seasonal event for additional challenges, premium rewards, a new seal, and a special title. For example: Solstice of Heroes 2022.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsSeasonsDestinyEventCardDefinition {
  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private DestinyMiscDestinyColor color;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private Long endTime;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private DestinyDefinitionsSeasonsDestinyEventCardImages images;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_LINK_REDIRECT_PATH = "linkRedirectPath";
  @SerializedName(SERIALIZED_NAME_LINK_REDIRECT_PATH)
  private String linkRedirectPath;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_SEAL_PRESENTATION_NODE_HASH = "sealPresentationNodeHash";
  @SerializedName(SERIALIZED_NAME_SEAL_PRESENTATION_NODE_HASH)
  private Integer sealPresentationNodeHash;

  public static final String SERIALIZED_NAME_TICKET_CURRENCY_ITEM_HASH = "ticketCurrencyItemHash";
  @SerializedName(SERIALIZED_NAME_TICKET_CURRENCY_ITEM_HASH)
  private Integer ticketCurrencyItemHash;

  public static final String SERIALIZED_NAME_TICKET_VENDOR_CATEGORY_HASH = "ticketVendorCategoryHash";
  @SerializedName(SERIALIZED_NAME_TICKET_VENDOR_CATEGORY_HASH)
  private Integer ticketVendorCategoryHash;

  public static final String SERIALIZED_NAME_TICKET_VENDOR_HASH = "ticketVendorHash";
  @SerializedName(SERIALIZED_NAME_TICKET_VENDOR_HASH)
  private Integer ticketVendorHash;

  public static final String SERIALIZED_NAME_TRIUMPHS_PRESENTATION_NODE_HASH = "triumphsPresentationNodeHash";
  @SerializedName(SERIALIZED_NAME_TRIUMPHS_PRESENTATION_NODE_HASH)
  private Integer triumphsPresentationNodeHash;

  public DestinyDefinitionsSeasonsDestinyEventCardDefinition() {
  }

  public DestinyDefinitionsSeasonsDestinyEventCardDefinition color(DestinyMiscDestinyColor color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public DestinyMiscDestinyColor getColor() {
    return color;
  }

  public void setColor(DestinyMiscDestinyColor color) {
    this.color = color;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardDefinition endTime(Long endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public Long getEndTime() {
    return endTime;
  }

  public void setEndTime(Long endTime) {
    this.endTime = endTime;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardDefinition images(DestinyDefinitionsSeasonsDestinyEventCardImages images) {
    this.images = images;
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsSeasonsDestinyEventCardImages getImages() {
    return images;
  }

  public void setImages(DestinyDefinitionsSeasonsDestinyEventCardImages images) {
    this.images = images;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardDefinition linkRedirectPath(String linkRedirectPath) {
    this.linkRedirectPath = linkRedirectPath;
    return this;
  }

  /**
   * Get linkRedirectPath
   * @return linkRedirectPath
   */
  @javax.annotation.Nullable
  public String getLinkRedirectPath() {
    return linkRedirectPath;
  }

  public void setLinkRedirectPath(String linkRedirectPath) {
    this.linkRedirectPath = linkRedirectPath;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardDefinition sealPresentationNodeHash(Integer sealPresentationNodeHash) {
    this.sealPresentationNodeHash = sealPresentationNodeHash;
    return this;
  }

  /**
   * Get sealPresentationNodeHash
   * @return sealPresentationNodeHash
   */
  @javax.annotation.Nullable
  public Integer getSealPresentationNodeHash() {
    return sealPresentationNodeHash;
  }

  public void setSealPresentationNodeHash(Integer sealPresentationNodeHash) {
    this.sealPresentationNodeHash = sealPresentationNodeHash;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardDefinition ticketCurrencyItemHash(Integer ticketCurrencyItemHash) {
    this.ticketCurrencyItemHash = ticketCurrencyItemHash;
    return this;
  }

  /**
   * Get ticketCurrencyItemHash
   * @return ticketCurrencyItemHash
   */
  @javax.annotation.Nullable
  public Integer getTicketCurrencyItemHash() {
    return ticketCurrencyItemHash;
  }

  public void setTicketCurrencyItemHash(Integer ticketCurrencyItemHash) {
    this.ticketCurrencyItemHash = ticketCurrencyItemHash;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardDefinition ticketVendorCategoryHash(Integer ticketVendorCategoryHash) {
    this.ticketVendorCategoryHash = ticketVendorCategoryHash;
    return this;
  }

  /**
   * Get ticketVendorCategoryHash
   * @return ticketVendorCategoryHash
   */
  @javax.annotation.Nullable
  public Integer getTicketVendorCategoryHash() {
    return ticketVendorCategoryHash;
  }

  public void setTicketVendorCategoryHash(Integer ticketVendorCategoryHash) {
    this.ticketVendorCategoryHash = ticketVendorCategoryHash;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardDefinition ticketVendorHash(Integer ticketVendorHash) {
    this.ticketVendorHash = ticketVendorHash;
    return this;
  }

  /**
   * Get ticketVendorHash
   * @return ticketVendorHash
   */
  @javax.annotation.Nullable
  public Integer getTicketVendorHash() {
    return ticketVendorHash;
  }

  public void setTicketVendorHash(Integer ticketVendorHash) {
    this.ticketVendorHash = ticketVendorHash;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardDefinition triumphsPresentationNodeHash(Integer triumphsPresentationNodeHash) {
    this.triumphsPresentationNodeHash = triumphsPresentationNodeHash;
    return this;
  }

  /**
   * Get triumphsPresentationNodeHash
   * @return triumphsPresentationNodeHash
   */
  @javax.annotation.Nullable
  public Integer getTriumphsPresentationNodeHash() {
    return triumphsPresentationNodeHash;
  }

  public void setTriumphsPresentationNodeHash(Integer triumphsPresentationNodeHash) {
    this.triumphsPresentationNodeHash = triumphsPresentationNodeHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsSeasonsDestinyEventCardDefinition destinyDefinitionsSeasonsDestinyEventCardDefinition = (DestinyDefinitionsSeasonsDestinyEventCardDefinition) o;
    return Objects.equals(this.color, destinyDefinitionsSeasonsDestinyEventCardDefinition.color) &&
        Objects.equals(this.displayProperties, destinyDefinitionsSeasonsDestinyEventCardDefinition.displayProperties) &&
        Objects.equals(this.endTime, destinyDefinitionsSeasonsDestinyEventCardDefinition.endTime) &&
        Objects.equals(this.hash, destinyDefinitionsSeasonsDestinyEventCardDefinition.hash) &&
        Objects.equals(this.images, destinyDefinitionsSeasonsDestinyEventCardDefinition.images) &&
        Objects.equals(this.index, destinyDefinitionsSeasonsDestinyEventCardDefinition.index) &&
        Objects.equals(this.linkRedirectPath, destinyDefinitionsSeasonsDestinyEventCardDefinition.linkRedirectPath) &&
        Objects.equals(this.redacted, destinyDefinitionsSeasonsDestinyEventCardDefinition.redacted) &&
        Objects.equals(this.sealPresentationNodeHash, destinyDefinitionsSeasonsDestinyEventCardDefinition.sealPresentationNodeHash) &&
        Objects.equals(this.ticketCurrencyItemHash, destinyDefinitionsSeasonsDestinyEventCardDefinition.ticketCurrencyItemHash) &&
        Objects.equals(this.ticketVendorCategoryHash, destinyDefinitionsSeasonsDestinyEventCardDefinition.ticketVendorCategoryHash) &&
        Objects.equals(this.ticketVendorHash, destinyDefinitionsSeasonsDestinyEventCardDefinition.ticketVendorHash) &&
        Objects.equals(this.triumphsPresentationNodeHash, destinyDefinitionsSeasonsDestinyEventCardDefinition.triumphsPresentationNodeHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, displayProperties, endTime, hash, images, index, linkRedirectPath, redacted, sealPresentationNodeHash, ticketCurrencyItemHash, ticketVendorCategoryHash, ticketVendorHash, triumphsPresentationNodeHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsSeasonsDestinyEventCardDefinition {\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    linkRedirectPath: ").append(toIndentedString(linkRedirectPath)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    sealPresentationNodeHash: ").append(toIndentedString(sealPresentationNodeHash)).append("\n");
    sb.append("    ticketCurrencyItemHash: ").append(toIndentedString(ticketCurrencyItemHash)).append("\n");
    sb.append("    ticketVendorCategoryHash: ").append(toIndentedString(ticketVendorCategoryHash)).append("\n");
    sb.append("    ticketVendorHash: ").append(toIndentedString(ticketVendorHash)).append("\n");
    sb.append("    triumphsPresentationNodeHash: ").append(toIndentedString(triumphsPresentationNodeHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("color");
    openapiFields.add("displayProperties");
    openapiFields.add("endTime");
    openapiFields.add("hash");
    openapiFields.add("images");
    openapiFields.add("index");
    openapiFields.add("linkRedirectPath");
    openapiFields.add("redacted");
    openapiFields.add("sealPresentationNodeHash");
    openapiFields.add("ticketCurrencyItemHash");
    openapiFields.add("ticketVendorCategoryHash");
    openapiFields.add("ticketVendorHash");
    openapiFields.add("triumphsPresentationNodeHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsSeasonsDestinyEventCardDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsSeasonsDestinyEventCardDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsSeasonsDestinyEventCardDefinition is not found in the empty JSON string", DestinyDefinitionsSeasonsDestinyEventCardDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsSeasonsDestinyEventCardDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsSeasonsDestinyEventCardDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        DestinyMiscDestinyColor.validateJsonElement(jsonObj.get("color"));
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      // validate the optional field `images`
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        DestinyDefinitionsSeasonsDestinyEventCardImages.validateJsonElement(jsonObj.get("images"));
      }
      if ((jsonObj.get("linkRedirectPath") != null && !jsonObj.get("linkRedirectPath").isJsonNull()) && !jsonObj.get("linkRedirectPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkRedirectPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkRedirectPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsSeasonsDestinyEventCardDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsSeasonsDestinyEventCardDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsSeasonsDestinyEventCardDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsSeasonsDestinyEventCardDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsSeasonsDestinyEventCardDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsSeasonsDestinyEventCardDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsSeasonsDestinyEventCardDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsSeasonsDestinyEventCardDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsSeasonsDestinyEventCardDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsSeasonsDestinyEventCardDefinition
   */
  public static DestinyDefinitionsSeasonsDestinyEventCardDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsSeasonsDestinyEventCardDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsSeasonsDestinyEventCardDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

