/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsArtifactsDestinyArtifactTierItemDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsArtifactsDestinyArtifactTierDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsArtifactsDestinyArtifactTierDefinition {
  public static final String SERIALIZED_NAME_DISPLAY_TITLE = "displayTitle";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TITLE)
  private String displayTitle;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<DestinyDefinitionsArtifactsDestinyArtifactTierItemDefinition> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINIMUM_UNLOCK_POINTS_USED_REQUIREMENT = "minimumUnlockPointsUsedRequirement";
  @SerializedName(SERIALIZED_NAME_MINIMUM_UNLOCK_POINTS_USED_REQUIREMENT)
  private Integer minimumUnlockPointsUsedRequirement;

  public static final String SERIALIZED_NAME_PROGRESS_REQUIREMENT_MESSAGE = "progressRequirementMessage";
  @SerializedName(SERIALIZED_NAME_PROGRESS_REQUIREMENT_MESSAGE)
  private String progressRequirementMessage;

  public static final String SERIALIZED_NAME_TIER_HASH = "tierHash";
  @SerializedName(SERIALIZED_NAME_TIER_HASH)
  private Integer tierHash;

  public DestinyDefinitionsArtifactsDestinyArtifactTierDefinition() {
  }

  public DestinyDefinitionsArtifactsDestinyArtifactTierDefinition displayTitle(String displayTitle) {
    this.displayTitle = displayTitle;
    return this;
  }

  /**
   * The human readable title of this tier, if any.
   * @return displayTitle
   */
  @javax.annotation.Nullable
  public String getDisplayTitle() {
    return displayTitle;
  }

  public void setDisplayTitle(String displayTitle) {
    this.displayTitle = displayTitle;
  }


  public DestinyDefinitionsArtifactsDestinyArtifactTierDefinition items(List<DestinyDefinitionsArtifactsDestinyArtifactTierItemDefinition> items) {
    this.items = items;
    return this;
  }

  public DestinyDefinitionsArtifactsDestinyArtifactTierDefinition addItemsItem(DestinyDefinitionsArtifactsDestinyArtifactTierItemDefinition itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * The items that can be earned within this tier.
   * @return items
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsArtifactsDestinyArtifactTierItemDefinition> getItems() {
    return items;
  }

  public void setItems(List<DestinyDefinitionsArtifactsDestinyArtifactTierItemDefinition> items) {
    this.items = items;
  }


  public DestinyDefinitionsArtifactsDestinyArtifactTierDefinition minimumUnlockPointsUsedRequirement(Integer minimumUnlockPointsUsedRequirement) {
    this.minimumUnlockPointsUsedRequirement = minimumUnlockPointsUsedRequirement;
    return this;
  }

  /**
   * The minimum number of \&quot;unlock points\&quot; that you must have used before you can unlock items from this tier.
   * @return minimumUnlockPointsUsedRequirement
   */
  @javax.annotation.Nullable
  public Integer getMinimumUnlockPointsUsedRequirement() {
    return minimumUnlockPointsUsedRequirement;
  }

  public void setMinimumUnlockPointsUsedRequirement(Integer minimumUnlockPointsUsedRequirement) {
    this.minimumUnlockPointsUsedRequirement = minimumUnlockPointsUsedRequirement;
  }


  public DestinyDefinitionsArtifactsDestinyArtifactTierDefinition progressRequirementMessage(String progressRequirementMessage) {
    this.progressRequirementMessage = progressRequirementMessage;
    return this;
  }

  /**
   * A string representing the localized minimum requirement text for this Tier, if any.
   * @return progressRequirementMessage
   */
  @javax.annotation.Nullable
  public String getProgressRequirementMessage() {
    return progressRequirementMessage;
  }

  public void setProgressRequirementMessage(String progressRequirementMessage) {
    this.progressRequirementMessage = progressRequirementMessage;
  }


  public DestinyDefinitionsArtifactsDestinyArtifactTierDefinition tierHash(Integer tierHash) {
    this.tierHash = tierHash;
    return this;
  }

  /**
   * An identifier, unique within the Artifact, for this specific tier.
   * @return tierHash
   */
  @javax.annotation.Nullable
  public Integer getTierHash() {
    return tierHash;
  }

  public void setTierHash(Integer tierHash) {
    this.tierHash = tierHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsArtifactsDestinyArtifactTierDefinition destinyDefinitionsArtifactsDestinyArtifactTierDefinition = (DestinyDefinitionsArtifactsDestinyArtifactTierDefinition) o;
    return Objects.equals(this.displayTitle, destinyDefinitionsArtifactsDestinyArtifactTierDefinition.displayTitle) &&
        Objects.equals(this.items, destinyDefinitionsArtifactsDestinyArtifactTierDefinition.items) &&
        Objects.equals(this.minimumUnlockPointsUsedRequirement, destinyDefinitionsArtifactsDestinyArtifactTierDefinition.minimumUnlockPointsUsedRequirement) &&
        Objects.equals(this.progressRequirementMessage, destinyDefinitionsArtifactsDestinyArtifactTierDefinition.progressRequirementMessage) &&
        Objects.equals(this.tierHash, destinyDefinitionsArtifactsDestinyArtifactTierDefinition.tierHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayTitle, items, minimumUnlockPointsUsedRequirement, progressRequirementMessage, tierHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsArtifactsDestinyArtifactTierDefinition {\n");
    sb.append("    displayTitle: ").append(toIndentedString(displayTitle)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    minimumUnlockPointsUsedRequirement: ").append(toIndentedString(minimumUnlockPointsUsedRequirement)).append("\n");
    sb.append("    progressRequirementMessage: ").append(toIndentedString(progressRequirementMessage)).append("\n");
    sb.append("    tierHash: ").append(toIndentedString(tierHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayTitle");
    openapiFields.add("items");
    openapiFields.add("minimumUnlockPointsUsedRequirement");
    openapiFields.add("progressRequirementMessage");
    openapiFields.add("tierHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsArtifactsDestinyArtifactTierDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsArtifactsDestinyArtifactTierDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsArtifactsDestinyArtifactTierDefinition is not found in the empty JSON string", DestinyDefinitionsArtifactsDestinyArtifactTierDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsArtifactsDestinyArtifactTierDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsArtifactsDestinyArtifactTierDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayTitle") != null && !jsonObj.get("displayTitle").isJsonNull()) && !jsonObj.get("displayTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayTitle").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            DestinyDefinitionsArtifactsDestinyArtifactTierItemDefinition.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("progressRequirementMessage") != null && !jsonObj.get("progressRequirementMessage").isJsonNull()) && !jsonObj.get("progressRequirementMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `progressRequirementMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("progressRequirementMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsArtifactsDestinyArtifactTierDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsArtifactsDestinyArtifactTierDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsArtifactsDestinyArtifactTierDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsArtifactsDestinyArtifactTierDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsArtifactsDestinyArtifactTierDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsArtifactsDestinyArtifactTierDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsArtifactsDestinyArtifactTierDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsArtifactsDestinyArtifactTierDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsArtifactsDestinyArtifactTierDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsArtifactsDestinyArtifactTierDefinition
   */
  public static DestinyDefinitionsArtifactsDestinyArtifactTierDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsArtifactsDestinyArtifactTierDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsArtifactsDestinyArtifactTierDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

