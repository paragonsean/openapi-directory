/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Some items are \&quot;sacks\&quot; - they can be \&quot;opened\&quot; to produce other items. This is information related to its sack status, mostly UI strings. Engrams are an example of items that are considered to be \&quot;Sacks\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemSackBlockDefinition {
  public static final String SERIALIZED_NAME_DETAIL_ACTION = "detailAction";
  @SerializedName(SERIALIZED_NAME_DETAIL_ACTION)
  private String detailAction;

  public static final String SERIALIZED_NAME_OPEN_ACTION = "openAction";
  @SerializedName(SERIALIZED_NAME_OPEN_ACTION)
  private String openAction;

  public static final String SERIALIZED_NAME_OPEN_ON_ACQUIRE = "openOnAcquire";
  @SerializedName(SERIALIZED_NAME_OPEN_ON_ACQUIRE)
  private Boolean openOnAcquire;

  public static final String SERIALIZED_NAME_SELECT_ITEM_COUNT = "selectItemCount";
  @SerializedName(SERIALIZED_NAME_SELECT_ITEM_COUNT)
  private Integer selectItemCount;

  public static final String SERIALIZED_NAME_VENDOR_SACK_TYPE = "vendorSackType";
  @SerializedName(SERIALIZED_NAME_VENDOR_SACK_TYPE)
  private String vendorSackType;

  public DestinyDefinitionsDestinyItemSackBlockDefinition() {
  }

  public DestinyDefinitionsDestinyItemSackBlockDefinition detailAction(String detailAction) {
    this.detailAction = detailAction;
    return this;
  }

  /**
   * A description of what will happen when you open the sack. As far as I can tell, this is blank currently. Unknown whether it will eventually be populated with useful info.
   * @return detailAction
   */
  @javax.annotation.Nullable
  public String getDetailAction() {
    return detailAction;
  }

  public void setDetailAction(String detailAction) {
    this.detailAction = detailAction;
  }


  public DestinyDefinitionsDestinyItemSackBlockDefinition openAction(String openAction) {
    this.openAction = openAction;
    return this;
  }

  /**
   * The localized name of the action being performed when you open the sack.
   * @return openAction
   */
  @javax.annotation.Nullable
  public String getOpenAction() {
    return openAction;
  }

  public void setOpenAction(String openAction) {
    this.openAction = openAction;
  }


  public DestinyDefinitionsDestinyItemSackBlockDefinition openOnAcquire(Boolean openOnAcquire) {
    this.openOnAcquire = openOnAcquire;
    return this;
  }

  /**
   * Get openOnAcquire
   * @return openOnAcquire
   */
  @javax.annotation.Nullable
  public Boolean getOpenOnAcquire() {
    return openOnAcquire;
  }

  public void setOpenOnAcquire(Boolean openOnAcquire) {
    this.openOnAcquire = openOnAcquire;
  }


  public DestinyDefinitionsDestinyItemSackBlockDefinition selectItemCount(Integer selectItemCount) {
    this.selectItemCount = selectItemCount;
    return this;
  }

  /**
   * Get selectItemCount
   * @return selectItemCount
   */
  @javax.annotation.Nullable
  public Integer getSelectItemCount() {
    return selectItemCount;
  }

  public void setSelectItemCount(Integer selectItemCount) {
    this.selectItemCount = selectItemCount;
  }


  public DestinyDefinitionsDestinyItemSackBlockDefinition vendorSackType(String vendorSackType) {
    this.vendorSackType = vendorSackType;
    return this;
  }

  /**
   * Get vendorSackType
   * @return vendorSackType
   */
  @javax.annotation.Nullable
  public String getVendorSackType() {
    return vendorSackType;
  }

  public void setVendorSackType(String vendorSackType) {
    this.vendorSackType = vendorSackType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemSackBlockDefinition destinyDefinitionsDestinyItemSackBlockDefinition = (DestinyDefinitionsDestinyItemSackBlockDefinition) o;
    return Objects.equals(this.detailAction, destinyDefinitionsDestinyItemSackBlockDefinition.detailAction) &&
        Objects.equals(this.openAction, destinyDefinitionsDestinyItemSackBlockDefinition.openAction) &&
        Objects.equals(this.openOnAcquire, destinyDefinitionsDestinyItemSackBlockDefinition.openOnAcquire) &&
        Objects.equals(this.selectItemCount, destinyDefinitionsDestinyItemSackBlockDefinition.selectItemCount) &&
        Objects.equals(this.vendorSackType, destinyDefinitionsDestinyItemSackBlockDefinition.vendorSackType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detailAction, openAction, openOnAcquire, selectItemCount, vendorSackType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemSackBlockDefinition {\n");
    sb.append("    detailAction: ").append(toIndentedString(detailAction)).append("\n");
    sb.append("    openAction: ").append(toIndentedString(openAction)).append("\n");
    sb.append("    openOnAcquire: ").append(toIndentedString(openOnAcquire)).append("\n");
    sb.append("    selectItemCount: ").append(toIndentedString(selectItemCount)).append("\n");
    sb.append("    vendorSackType: ").append(toIndentedString(vendorSackType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detailAction");
    openapiFields.add("openAction");
    openapiFields.add("openOnAcquire");
    openapiFields.add("selectItemCount");
    openapiFields.add("vendorSackType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemSackBlockDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemSackBlockDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemSackBlockDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemSackBlockDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemSackBlockDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemSackBlockDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("detailAction") != null && !jsonObj.get("detailAction").isJsonNull()) && !jsonObj.get("detailAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailAction").toString()));
      }
      if ((jsonObj.get("openAction") != null && !jsonObj.get("openAction").isJsonNull()) && !jsonObj.get("openAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openAction").toString()));
      }
      if ((jsonObj.get("vendorSackType") != null && !jsonObj.get("vendorSackType").isJsonNull()) && !jsonObj.get("vendorSackType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorSackType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorSackType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemSackBlockDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemSackBlockDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemSackBlockDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemSackBlockDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemSackBlockDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemSackBlockDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemSackBlockDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemSackBlockDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemSackBlockDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemSackBlockDefinition
   */
  public static DestinyDefinitionsDestinyItemSackBlockDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemSackBlockDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemSackBlockDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

