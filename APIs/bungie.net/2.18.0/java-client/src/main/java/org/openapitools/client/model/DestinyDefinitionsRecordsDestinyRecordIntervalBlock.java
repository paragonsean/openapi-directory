/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsRecordsDestinyRecordIntervalObjective;
import org.openapitools.client.model.DestinyDefinitionsRecordsDestinyRecordIntervalRewards;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsRecordsDestinyRecordIntervalBlock
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsRecordsDestinyRecordIntervalBlock {
  public static final String SERIALIZED_NAME_INTERVAL_OBJECTIVES = "intervalObjectives";
  @SerializedName(SERIALIZED_NAME_INTERVAL_OBJECTIVES)
  private List<DestinyDefinitionsRecordsDestinyRecordIntervalObjective> intervalObjectives = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERVAL_REWARDS = "intervalRewards";
  @SerializedName(SERIALIZED_NAME_INTERVAL_REWARDS)
  private List<DestinyDefinitionsRecordsDestinyRecordIntervalRewards> intervalRewards = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIGINAL_OBJECTIVE_ARRAY_INSERTION_INDEX = "originalObjectiveArrayInsertionIndex";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_OBJECTIVE_ARRAY_INSERTION_INDEX)
  private Integer originalObjectiveArrayInsertionIndex;

  public DestinyDefinitionsRecordsDestinyRecordIntervalBlock() {
  }

  public DestinyDefinitionsRecordsDestinyRecordIntervalBlock intervalObjectives(List<DestinyDefinitionsRecordsDestinyRecordIntervalObjective> intervalObjectives) {
    this.intervalObjectives = intervalObjectives;
    return this;
  }

  public DestinyDefinitionsRecordsDestinyRecordIntervalBlock addIntervalObjectivesItem(DestinyDefinitionsRecordsDestinyRecordIntervalObjective intervalObjectivesItem) {
    if (this.intervalObjectives == null) {
      this.intervalObjectives = new ArrayList<>();
    }
    this.intervalObjectives.add(intervalObjectivesItem);
    return this;
  }

  /**
   * Get intervalObjectives
   * @return intervalObjectives
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsRecordsDestinyRecordIntervalObjective> getIntervalObjectives() {
    return intervalObjectives;
  }

  public void setIntervalObjectives(List<DestinyDefinitionsRecordsDestinyRecordIntervalObjective> intervalObjectives) {
    this.intervalObjectives = intervalObjectives;
  }


  public DestinyDefinitionsRecordsDestinyRecordIntervalBlock intervalRewards(List<DestinyDefinitionsRecordsDestinyRecordIntervalRewards> intervalRewards) {
    this.intervalRewards = intervalRewards;
    return this;
  }

  public DestinyDefinitionsRecordsDestinyRecordIntervalBlock addIntervalRewardsItem(DestinyDefinitionsRecordsDestinyRecordIntervalRewards intervalRewardsItem) {
    if (this.intervalRewards == null) {
      this.intervalRewards = new ArrayList<>();
    }
    this.intervalRewards.add(intervalRewardsItem);
    return this;
  }

  /**
   * Get intervalRewards
   * @return intervalRewards
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsRecordsDestinyRecordIntervalRewards> getIntervalRewards() {
    return intervalRewards;
  }

  public void setIntervalRewards(List<DestinyDefinitionsRecordsDestinyRecordIntervalRewards> intervalRewards) {
    this.intervalRewards = intervalRewards;
  }


  public DestinyDefinitionsRecordsDestinyRecordIntervalBlock originalObjectiveArrayInsertionIndex(Integer originalObjectiveArrayInsertionIndex) {
    this.originalObjectiveArrayInsertionIndex = originalObjectiveArrayInsertionIndex;
    return this;
  }

  /**
   * Get originalObjectiveArrayInsertionIndex
   * @return originalObjectiveArrayInsertionIndex
   */
  @javax.annotation.Nullable
  public Integer getOriginalObjectiveArrayInsertionIndex() {
    return originalObjectiveArrayInsertionIndex;
  }

  public void setOriginalObjectiveArrayInsertionIndex(Integer originalObjectiveArrayInsertionIndex) {
    this.originalObjectiveArrayInsertionIndex = originalObjectiveArrayInsertionIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsRecordsDestinyRecordIntervalBlock destinyDefinitionsRecordsDestinyRecordIntervalBlock = (DestinyDefinitionsRecordsDestinyRecordIntervalBlock) o;
    return Objects.equals(this.intervalObjectives, destinyDefinitionsRecordsDestinyRecordIntervalBlock.intervalObjectives) &&
        Objects.equals(this.intervalRewards, destinyDefinitionsRecordsDestinyRecordIntervalBlock.intervalRewards) &&
        Objects.equals(this.originalObjectiveArrayInsertionIndex, destinyDefinitionsRecordsDestinyRecordIntervalBlock.originalObjectiveArrayInsertionIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intervalObjectives, intervalRewards, originalObjectiveArrayInsertionIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsRecordsDestinyRecordIntervalBlock {\n");
    sb.append("    intervalObjectives: ").append(toIndentedString(intervalObjectives)).append("\n");
    sb.append("    intervalRewards: ").append(toIndentedString(intervalRewards)).append("\n");
    sb.append("    originalObjectiveArrayInsertionIndex: ").append(toIndentedString(originalObjectiveArrayInsertionIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intervalObjectives");
    openapiFields.add("intervalRewards");
    openapiFields.add("originalObjectiveArrayInsertionIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsRecordsDestinyRecordIntervalBlock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsRecordsDestinyRecordIntervalBlock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsRecordsDestinyRecordIntervalBlock is not found in the empty JSON string", DestinyDefinitionsRecordsDestinyRecordIntervalBlock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsRecordsDestinyRecordIntervalBlock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsRecordsDestinyRecordIntervalBlock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("intervalObjectives") != null && !jsonObj.get("intervalObjectives").isJsonNull()) {
        JsonArray jsonArrayintervalObjectives = jsonObj.getAsJsonArray("intervalObjectives");
        if (jsonArrayintervalObjectives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("intervalObjectives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `intervalObjectives` to be an array in the JSON string but got `%s`", jsonObj.get("intervalObjectives").toString()));
          }

          // validate the optional field `intervalObjectives` (array)
          for (int i = 0; i < jsonArrayintervalObjectives.size(); i++) {
            DestinyDefinitionsRecordsDestinyRecordIntervalObjective.validateJsonElement(jsonArrayintervalObjectives.get(i));
          };
        }
      }
      if (jsonObj.get("intervalRewards") != null && !jsonObj.get("intervalRewards").isJsonNull()) {
        JsonArray jsonArrayintervalRewards = jsonObj.getAsJsonArray("intervalRewards");
        if (jsonArrayintervalRewards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("intervalRewards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `intervalRewards` to be an array in the JSON string but got `%s`", jsonObj.get("intervalRewards").toString()));
          }

          // validate the optional field `intervalRewards` (array)
          for (int i = 0; i < jsonArrayintervalRewards.size(); i++) {
            DestinyDefinitionsRecordsDestinyRecordIntervalRewards.validateJsonElement(jsonArrayintervalRewards.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsRecordsDestinyRecordIntervalBlock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsRecordsDestinyRecordIntervalBlock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsRecordsDestinyRecordIntervalBlock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsRecordsDestinyRecordIntervalBlock.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsRecordsDestinyRecordIntervalBlock>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsRecordsDestinyRecordIntervalBlock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsRecordsDestinyRecordIntervalBlock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsRecordsDestinyRecordIntervalBlock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsRecordsDestinyRecordIntervalBlock
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsRecordsDestinyRecordIntervalBlock
   */
  public static DestinyDefinitionsRecordsDestinyRecordIntervalBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsRecordsDestinyRecordIntervalBlock.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsRecordsDestinyRecordIntervalBlock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

