/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FireteamFireteamUserInfoCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FireteamFireteamUserInfoCard {
  public static final String SERIALIZED_NAME_FIRETEAM_DISPLAY_NAME = "FireteamDisplayName";
  @SerializedName(SERIALIZED_NAME_FIRETEAM_DISPLAY_NAME)
  private String fireteamDisplayName;

  public static final String SERIALIZED_NAME_FIRETEAM_MEMBERSHIP_TYPE = "FireteamMembershipType";
  @SerializedName(SERIALIZED_NAME_FIRETEAM_MEMBERSHIP_TYPE)
  private Integer fireteamMembershipType;

  public static final String SERIALIZED_NAME_APPLICABLE_MEMBERSHIP_TYPES = "applicableMembershipTypes";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_MEMBERSHIP_TYPES)
  private List<Integer> applicableMembershipTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUNGIE_GLOBAL_DISPLAY_NAME = "bungieGlobalDisplayName";
  @SerializedName(SERIALIZED_NAME_BUNGIE_GLOBAL_DISPLAY_NAME)
  private String bungieGlobalDisplayName;

  public static final String SERIALIZED_NAME_BUNGIE_GLOBAL_DISPLAY_NAME_CODE = "bungieGlobalDisplayNameCode";
  @SerializedName(SERIALIZED_NAME_BUNGIE_GLOBAL_DISPLAY_NAME_CODE)
  private Integer bungieGlobalDisplayNameCode;

  public static final String SERIALIZED_NAME_CROSS_SAVE_OVERRIDE = "crossSaveOverride";
  @SerializedName(SERIALIZED_NAME_CROSS_SAVE_OVERRIDE)
  private Integer crossSaveOverride;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ICON_PATH = "iconPath";
  @SerializedName(SERIALIZED_NAME_ICON_PATH)
  private String iconPath;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ID = "membershipId";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ID)
  private Long membershipId;

  public static final String SERIALIZED_NAME_MEMBERSHIP_TYPE = "membershipType";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_TYPE)
  private Integer membershipType;

  public static final String SERIALIZED_NAME_SUPPLEMENTAL_DISPLAY_NAME = "supplementalDisplayName";
  @SerializedName(SERIALIZED_NAME_SUPPLEMENTAL_DISPLAY_NAME)
  private String supplementalDisplayName;

  public FireteamFireteamUserInfoCard() {
  }

  public FireteamFireteamUserInfoCard fireteamDisplayName(String fireteamDisplayName) {
    this.fireteamDisplayName = fireteamDisplayName;
    return this;
  }

  /**
   * Get fireteamDisplayName
   * @return fireteamDisplayName
   */
  @javax.annotation.Nullable
  public String getFireteamDisplayName() {
    return fireteamDisplayName;
  }

  public void setFireteamDisplayName(String fireteamDisplayName) {
    this.fireteamDisplayName = fireteamDisplayName;
  }


  public FireteamFireteamUserInfoCard fireteamMembershipType(Integer fireteamMembershipType) {
    this.fireteamMembershipType = fireteamMembershipType;
    return this;
  }

  /**
   * Get fireteamMembershipType
   * @return fireteamMembershipType
   */
  @javax.annotation.Nullable
  public Integer getFireteamMembershipType() {
    return fireteamMembershipType;
  }

  public void setFireteamMembershipType(Integer fireteamMembershipType) {
    this.fireteamMembershipType = fireteamMembershipType;
  }


  public FireteamFireteamUserInfoCard applicableMembershipTypes(List<Integer> applicableMembershipTypes) {
    this.applicableMembershipTypes = applicableMembershipTypes;
    return this;
  }

  public FireteamFireteamUserInfoCard addApplicableMembershipTypesItem(Integer applicableMembershipTypesItem) {
    if (this.applicableMembershipTypes == null) {
      this.applicableMembershipTypes = new ArrayList<>();
    }
    this.applicableMembershipTypes.add(applicableMembershipTypesItem);
    return this;
  }

  /**
   * The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save &#x3D; its original membership type. Cross Save Primary &#x3D; Any membership types it is overridding, and its original membership type Cross Save Overridden &#x3D; Empty list
   * @return applicableMembershipTypes
   */
  @javax.annotation.Nullable
  public List<Integer> getApplicableMembershipTypes() {
    return applicableMembershipTypes;
  }

  public void setApplicableMembershipTypes(List<Integer> applicableMembershipTypes) {
    this.applicableMembershipTypes = applicableMembershipTypes;
  }


  public FireteamFireteamUserInfoCard bungieGlobalDisplayName(String bungieGlobalDisplayName) {
    this.bungieGlobalDisplayName = bungieGlobalDisplayName;
    return this;
  }

  /**
   * The bungie global display name, if set.
   * @return bungieGlobalDisplayName
   */
  @javax.annotation.Nullable
  public String getBungieGlobalDisplayName() {
    return bungieGlobalDisplayName;
  }

  public void setBungieGlobalDisplayName(String bungieGlobalDisplayName) {
    this.bungieGlobalDisplayName = bungieGlobalDisplayName;
  }


  public FireteamFireteamUserInfoCard bungieGlobalDisplayNameCode(Integer bungieGlobalDisplayNameCode) {
    this.bungieGlobalDisplayNameCode = bungieGlobalDisplayNameCode;
    return this;
  }

  /**
   * The bungie global display name code, if set.
   * @return bungieGlobalDisplayNameCode
   */
  @javax.annotation.Nullable
  public Integer getBungieGlobalDisplayNameCode() {
    return bungieGlobalDisplayNameCode;
  }

  public void setBungieGlobalDisplayNameCode(Integer bungieGlobalDisplayNameCode) {
    this.bungieGlobalDisplayNameCode = bungieGlobalDisplayNameCode;
  }


  public FireteamFireteamUserInfoCard crossSaveOverride(Integer crossSaveOverride) {
    this.crossSaveOverride = crossSaveOverride;
    return this;
  }

  /**
   * If there is a cross save override in effect, this value will tell you the type that is overridding this one.
   * @return crossSaveOverride
   */
  @javax.annotation.Nullable
  public Integer getCrossSaveOverride() {
    return crossSaveOverride;
  }

  public void setCrossSaveOverride(Integer crossSaveOverride) {
    this.crossSaveOverride = crossSaveOverride;
  }


  public FireteamFireteamUserInfoCard displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public FireteamFireteamUserInfoCard iconPath(String iconPath) {
    this.iconPath = iconPath;
    return this;
  }

  /**
   * URL the Icon if available.
   * @return iconPath
   */
  @javax.annotation.Nullable
  public String getIconPath() {
    return iconPath;
  }

  public void setIconPath(String iconPath) {
    this.iconPath = iconPath;
  }


  public FireteamFireteamUserInfoCard isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * If True, this is a public user membership.
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public FireteamFireteamUserInfoCard membershipId(Long membershipId) {
    this.membershipId = membershipId;
    return this;
  }

  /**
   * Membership ID as they user is known in the Accounts service
   * @return membershipId
   */
  @javax.annotation.Nullable
  public Long getMembershipId() {
    return membershipId;
  }

  public void setMembershipId(Long membershipId) {
    this.membershipId = membershipId;
  }


  public FireteamFireteamUserInfoCard membershipType(Integer membershipType) {
    this.membershipType = membershipType;
    return this;
  }

  /**
   * Type of the membership. Not necessarily the native type.
   * @return membershipType
   */
  @javax.annotation.Nullable
  public Integer getMembershipType() {
    return membershipType;
  }

  public void setMembershipType(Integer membershipType) {
    this.membershipType = membershipType;
  }


  public FireteamFireteamUserInfoCard supplementalDisplayName(String supplementalDisplayName) {
    this.supplementalDisplayName = supplementalDisplayName;
    return this;
  }

  /**
   * A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
   * @return supplementalDisplayName
   */
  @javax.annotation.Nullable
  public String getSupplementalDisplayName() {
    return supplementalDisplayName;
  }

  public void setSupplementalDisplayName(String supplementalDisplayName) {
    this.supplementalDisplayName = supplementalDisplayName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FireteamFireteamUserInfoCard fireteamFireteamUserInfoCard = (FireteamFireteamUserInfoCard) o;
    return Objects.equals(this.fireteamDisplayName, fireteamFireteamUserInfoCard.fireteamDisplayName) &&
        Objects.equals(this.fireteamMembershipType, fireteamFireteamUserInfoCard.fireteamMembershipType) &&
        Objects.equals(this.applicableMembershipTypes, fireteamFireteamUserInfoCard.applicableMembershipTypes) &&
        Objects.equals(this.bungieGlobalDisplayName, fireteamFireteamUserInfoCard.bungieGlobalDisplayName) &&
        Objects.equals(this.bungieGlobalDisplayNameCode, fireteamFireteamUserInfoCard.bungieGlobalDisplayNameCode) &&
        Objects.equals(this.crossSaveOverride, fireteamFireteamUserInfoCard.crossSaveOverride) &&
        Objects.equals(this.displayName, fireteamFireteamUserInfoCard.displayName) &&
        Objects.equals(this.iconPath, fireteamFireteamUserInfoCard.iconPath) &&
        Objects.equals(this.isPublic, fireteamFireteamUserInfoCard.isPublic) &&
        Objects.equals(this.membershipId, fireteamFireteamUserInfoCard.membershipId) &&
        Objects.equals(this.membershipType, fireteamFireteamUserInfoCard.membershipType) &&
        Objects.equals(this.supplementalDisplayName, fireteamFireteamUserInfoCard.supplementalDisplayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fireteamDisplayName, fireteamMembershipType, applicableMembershipTypes, bungieGlobalDisplayName, bungieGlobalDisplayNameCode, crossSaveOverride, displayName, iconPath, isPublic, membershipId, membershipType, supplementalDisplayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FireteamFireteamUserInfoCard {\n");
    sb.append("    fireteamDisplayName: ").append(toIndentedString(fireteamDisplayName)).append("\n");
    sb.append("    fireteamMembershipType: ").append(toIndentedString(fireteamMembershipType)).append("\n");
    sb.append("    applicableMembershipTypes: ").append(toIndentedString(applicableMembershipTypes)).append("\n");
    sb.append("    bungieGlobalDisplayName: ").append(toIndentedString(bungieGlobalDisplayName)).append("\n");
    sb.append("    bungieGlobalDisplayNameCode: ").append(toIndentedString(bungieGlobalDisplayNameCode)).append("\n");
    sb.append("    crossSaveOverride: ").append(toIndentedString(crossSaveOverride)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    iconPath: ").append(toIndentedString(iconPath)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    membershipId: ").append(toIndentedString(membershipId)).append("\n");
    sb.append("    membershipType: ").append(toIndentedString(membershipType)).append("\n");
    sb.append("    supplementalDisplayName: ").append(toIndentedString(supplementalDisplayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FireteamDisplayName");
    openapiFields.add("FireteamMembershipType");
    openapiFields.add("applicableMembershipTypes");
    openapiFields.add("bungieGlobalDisplayName");
    openapiFields.add("bungieGlobalDisplayNameCode");
    openapiFields.add("crossSaveOverride");
    openapiFields.add("displayName");
    openapiFields.add("iconPath");
    openapiFields.add("isPublic");
    openapiFields.add("membershipId");
    openapiFields.add("membershipType");
    openapiFields.add("supplementalDisplayName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FireteamFireteamUserInfoCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FireteamFireteamUserInfoCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FireteamFireteamUserInfoCard is not found in the empty JSON string", FireteamFireteamUserInfoCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FireteamFireteamUserInfoCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FireteamFireteamUserInfoCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FireteamDisplayName") != null && !jsonObj.get("FireteamDisplayName").isJsonNull()) && !jsonObj.get("FireteamDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FireteamDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FireteamDisplayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicableMembershipTypes") != null && !jsonObj.get("applicableMembershipTypes").isJsonNull() && !jsonObj.get("applicableMembershipTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicableMembershipTypes` to be an array in the JSON string but got `%s`", jsonObj.get("applicableMembershipTypes").toString()));
      }
      if ((jsonObj.get("bungieGlobalDisplayName") != null && !jsonObj.get("bungieGlobalDisplayName").isJsonNull()) && !jsonObj.get("bungieGlobalDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bungieGlobalDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bungieGlobalDisplayName").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("iconPath") != null && !jsonObj.get("iconPath").isJsonNull()) && !jsonObj.get("iconPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconPath").toString()));
      }
      if ((jsonObj.get("supplementalDisplayName") != null && !jsonObj.get("supplementalDisplayName").isJsonNull()) && !jsonObj.get("supplementalDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplementalDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supplementalDisplayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FireteamFireteamUserInfoCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FireteamFireteamUserInfoCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FireteamFireteamUserInfoCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FireteamFireteamUserInfoCard.class));

       return (TypeAdapter<T>) new TypeAdapter<FireteamFireteamUserInfoCard>() {
           @Override
           public void write(JsonWriter out, FireteamFireteamUserInfoCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FireteamFireteamUserInfoCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FireteamFireteamUserInfoCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FireteamFireteamUserInfoCard
   * @throws IOException if the JSON string is invalid with respect to FireteamFireteamUserInfoCard
   */
  public static FireteamFireteamUserInfoCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FireteamFireteamUserInfoCard.class);
  }

  /**
   * Convert an instance of FireteamFireteamUserInfoCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

