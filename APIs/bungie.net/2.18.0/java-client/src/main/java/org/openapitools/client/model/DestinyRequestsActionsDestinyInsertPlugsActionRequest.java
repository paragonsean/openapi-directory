/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyRequestsActionsDestinyInsertPlugsRequestEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyRequestsActionsDestinyInsertPlugsActionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyRequestsActionsDestinyInsertPlugsActionRequest {
  public static final String SERIALIZED_NAME_ACTION_TOKEN = "actionToken";
  @SerializedName(SERIALIZED_NAME_ACTION_TOKEN)
  private String actionToken;

  public static final String SERIALIZED_NAME_CHARACTER_ID = "characterId";
  @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
  private Long characterId;

  public static final String SERIALIZED_NAME_ITEM_INSTANCE_ID = "itemInstanceId";
  @SerializedName(SERIALIZED_NAME_ITEM_INSTANCE_ID)
  private Long itemInstanceId;

  public static final String SERIALIZED_NAME_MEMBERSHIP_TYPE = "membershipType";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_TYPE)
  private Integer membershipType;

  public static final String SERIALIZED_NAME_PLUG = "plug";
  @SerializedName(SERIALIZED_NAME_PLUG)
  private DestinyRequestsActionsDestinyInsertPlugsRequestEntry plug;

  public DestinyRequestsActionsDestinyInsertPlugsActionRequest() {
  }

  public DestinyRequestsActionsDestinyInsertPlugsActionRequest actionToken(String actionToken) {
    this.actionToken = actionToken;
    return this;
  }

  /**
   * Action token provided by the AwaGetActionToken API call.
   * @return actionToken
   */
  @javax.annotation.Nullable
  public String getActionToken() {
    return actionToken;
  }

  public void setActionToken(String actionToken) {
    this.actionToken = actionToken;
  }


  public DestinyRequestsActionsDestinyInsertPlugsActionRequest characterId(Long characterId) {
    this.characterId = characterId;
    return this;
  }

  /**
   * Get characterId
   * @return characterId
   */
  @javax.annotation.Nullable
  public Long getCharacterId() {
    return characterId;
  }

  public void setCharacterId(Long characterId) {
    this.characterId = characterId;
  }


  public DestinyRequestsActionsDestinyInsertPlugsActionRequest itemInstanceId(Long itemInstanceId) {
    this.itemInstanceId = itemInstanceId;
    return this;
  }

  /**
   * The instance ID of the item having a plug inserted. Only instanced items can have sockets.
   * @return itemInstanceId
   */
  @javax.annotation.Nullable
  public Long getItemInstanceId() {
    return itemInstanceId;
  }

  public void setItemInstanceId(Long itemInstanceId) {
    this.itemInstanceId = itemInstanceId;
  }


  public DestinyRequestsActionsDestinyInsertPlugsActionRequest membershipType(Integer membershipType) {
    this.membershipType = membershipType;
    return this;
  }

  /**
   * Get membershipType
   * @return membershipType
   */
  @javax.annotation.Nullable
  public Integer getMembershipType() {
    return membershipType;
  }

  public void setMembershipType(Integer membershipType) {
    this.membershipType = membershipType;
  }


  public DestinyRequestsActionsDestinyInsertPlugsActionRequest plug(DestinyRequestsActionsDestinyInsertPlugsRequestEntry plug) {
    this.plug = plug;
    return this;
  }

  /**
   * The plugs being inserted.
   * @return plug
   */
  @javax.annotation.Nullable
  public DestinyRequestsActionsDestinyInsertPlugsRequestEntry getPlug() {
    return plug;
  }

  public void setPlug(DestinyRequestsActionsDestinyInsertPlugsRequestEntry plug) {
    this.plug = plug;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyRequestsActionsDestinyInsertPlugsActionRequest destinyRequestsActionsDestinyInsertPlugsActionRequest = (DestinyRequestsActionsDestinyInsertPlugsActionRequest) o;
    return Objects.equals(this.actionToken, destinyRequestsActionsDestinyInsertPlugsActionRequest.actionToken) &&
        Objects.equals(this.characterId, destinyRequestsActionsDestinyInsertPlugsActionRequest.characterId) &&
        Objects.equals(this.itemInstanceId, destinyRequestsActionsDestinyInsertPlugsActionRequest.itemInstanceId) &&
        Objects.equals(this.membershipType, destinyRequestsActionsDestinyInsertPlugsActionRequest.membershipType) &&
        Objects.equals(this.plug, destinyRequestsActionsDestinyInsertPlugsActionRequest.plug);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionToken, characterId, itemInstanceId, membershipType, plug);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyRequestsActionsDestinyInsertPlugsActionRequest {\n");
    sb.append("    actionToken: ").append(toIndentedString(actionToken)).append("\n");
    sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
    sb.append("    itemInstanceId: ").append(toIndentedString(itemInstanceId)).append("\n");
    sb.append("    membershipType: ").append(toIndentedString(membershipType)).append("\n");
    sb.append("    plug: ").append(toIndentedString(plug)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionToken");
    openapiFields.add("characterId");
    openapiFields.add("itemInstanceId");
    openapiFields.add("membershipType");
    openapiFields.add("plug");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyRequestsActionsDestinyInsertPlugsActionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyRequestsActionsDestinyInsertPlugsActionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyRequestsActionsDestinyInsertPlugsActionRequest is not found in the empty JSON string", DestinyRequestsActionsDestinyInsertPlugsActionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyRequestsActionsDestinyInsertPlugsActionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyRequestsActionsDestinyInsertPlugsActionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionToken") != null && !jsonObj.get("actionToken").isJsonNull()) && !jsonObj.get("actionToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionToken").toString()));
      }
      // validate the optional field `plug`
      if (jsonObj.get("plug") != null && !jsonObj.get("plug").isJsonNull()) {
        DestinyRequestsActionsDestinyInsertPlugsRequestEntry.validateJsonElement(jsonObj.get("plug"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyRequestsActionsDestinyInsertPlugsActionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyRequestsActionsDestinyInsertPlugsActionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyRequestsActionsDestinyInsertPlugsActionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyRequestsActionsDestinyInsertPlugsActionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyRequestsActionsDestinyInsertPlugsActionRequest>() {
           @Override
           public void write(JsonWriter out, DestinyRequestsActionsDestinyInsertPlugsActionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyRequestsActionsDestinyInsertPlugsActionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyRequestsActionsDestinyInsertPlugsActionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyRequestsActionsDestinyInsertPlugsActionRequest
   * @throws IOException if the JSON string is invalid with respect to DestinyRequestsActionsDestinyInsertPlugsActionRequest
   */
  public static DestinyRequestsActionsDestinyInsertPlugsActionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyRequestsActionsDestinyInsertPlugsActionRequest.class);
  }

  /**
   * Convert an instance of DestinyRequestsActionsDestinyInsertPlugsActionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

