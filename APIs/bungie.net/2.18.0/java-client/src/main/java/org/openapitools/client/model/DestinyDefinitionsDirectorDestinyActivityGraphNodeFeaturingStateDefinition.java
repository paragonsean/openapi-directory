/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Nodes can have different visual states. This object represents a single visual state (\&quot;highlight type\&quot;) that a node can be in, and the unlock expression condition to determine whether it should be set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition {
  public static final String SERIALIZED_NAME_HIGHLIGHT_TYPE = "highlightType";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHT_TYPE)
  private Integer highlightType;

  public DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition() {
  }

  public DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition highlightType(Integer highlightType) {
    this.highlightType = highlightType;
    return this;
  }

  /**
   * The node can be highlighted in a variety of ways - the game iterates through these and finds the first FeaturingState that is valid at the present moment given the Game, Account, and Character state, and renders the node in that state. See the ActivityGraphNodeHighlightType enum for possible values.
   * @return highlightType
   */
  @javax.annotation.Nullable
  public Integer getHighlightType() {
    return highlightType;
  }

  public void setHighlightType(Integer highlightType) {
    this.highlightType = highlightType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition destinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition = (DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition) o;
    return Objects.equals(this.highlightType, destinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition.highlightType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(highlightType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition {\n");
    sb.append("    highlightType: ").append(toIndentedString(highlightType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("highlightType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition is not found in the empty JSON string", DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition
   */
  public static DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

