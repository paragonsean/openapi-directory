/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a canonical \&quot;Season\&quot; of Destiny: a range of a few months where the game highlights certain challenges, provides new loot, has new Clan-related rewards and celebrates various seasonal events.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsSeasonsDestinySeasonDefinition {
  public static final String SERIALIZED_NAME_ARTIFACT_ITEM_HASH = "artifactItemHash";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_ITEM_HASH)
  private Integer artifactItemHash;

  public static final String SERIALIZED_NAME_BACKGROUND_IMAGE_PATH = "backgroundImagePath";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_IMAGE_PATH)
  private String backgroundImagePath;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_PREVIEW = "preview";
  @SerializedName(SERIALIZED_NAME_PREVIEW)
  private DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition preview;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_SEAL_PRESENTATION_NODE_HASH = "sealPresentationNodeHash";
  @SerializedName(SERIALIZED_NAME_SEAL_PRESENTATION_NODE_HASH)
  private Integer sealPresentationNodeHash;

  public static final String SERIALIZED_NAME_SEASON_NUMBER = "seasonNumber";
  @SerializedName(SERIALIZED_NAME_SEASON_NUMBER)
  private Integer seasonNumber;

  public static final String SERIALIZED_NAME_SEASON_PASS_HASH = "seasonPassHash";
  @SerializedName(SERIALIZED_NAME_SEASON_PASS_HASH)
  private Integer seasonPassHash;

  public static final String SERIALIZED_NAME_SEASON_PASS_PROGRESSION_HASH = "seasonPassProgressionHash";
  @SerializedName(SERIALIZED_NAME_SEASON_PASS_PROGRESSION_HASH)
  private Integer seasonPassProgressionHash;

  public static final String SERIALIZED_NAME_SEASONAL_CHALLENGES_PRESENTATION_NODE_HASH = "seasonalChallengesPresentationNodeHash";
  @SerializedName(SERIALIZED_NAME_SEASONAL_CHALLENGES_PRESENTATION_NODE_HASH)
  private Integer seasonalChallengesPresentationNodeHash;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public DestinyDefinitionsSeasonsDestinySeasonDefinition() {
  }

  public DestinyDefinitionsSeasonsDestinySeasonDefinition artifactItemHash(Integer artifactItemHash) {
    this.artifactItemHash = artifactItemHash;
    return this;
  }

  /**
   * Get artifactItemHash
   * @return artifactItemHash
   */
  @javax.annotation.Nullable
  public Integer getArtifactItemHash() {
    return artifactItemHash;
  }

  public void setArtifactItemHash(Integer artifactItemHash) {
    this.artifactItemHash = artifactItemHash;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition backgroundImagePath(String backgroundImagePath) {
    this.backgroundImagePath = backgroundImagePath;
    return this;
  }

  /**
   * Get backgroundImagePath
   * @return backgroundImagePath
   */
  @javax.annotation.Nullable
  public String getBackgroundImagePath() {
    return backgroundImagePath;
  }

  public void setBackgroundImagePath(String backgroundImagePath) {
    this.backgroundImagePath = backgroundImagePath;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition preview(DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition preview) {
    this.preview = preview;
    return this;
  }

  /**
   * Optional - Defines the promotional text, images, and links to preview this season.
   * @return preview
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition getPreview() {
    return preview;
  }

  public void setPreview(DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition preview) {
    this.preview = preview;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition sealPresentationNodeHash(Integer sealPresentationNodeHash) {
    this.sealPresentationNodeHash = sealPresentationNodeHash;
    return this;
  }

  /**
   * Get sealPresentationNodeHash
   * @return sealPresentationNodeHash
   */
  @javax.annotation.Nullable
  public Integer getSealPresentationNodeHash() {
    return sealPresentationNodeHash;
  }

  public void setSealPresentationNodeHash(Integer sealPresentationNodeHash) {
    this.sealPresentationNodeHash = sealPresentationNodeHash;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition seasonNumber(Integer seasonNumber) {
    this.seasonNumber = seasonNumber;
    return this;
  }

  /**
   * Get seasonNumber
   * @return seasonNumber
   */
  @javax.annotation.Nullable
  public Integer getSeasonNumber() {
    return seasonNumber;
  }

  public void setSeasonNumber(Integer seasonNumber) {
    this.seasonNumber = seasonNumber;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition seasonPassHash(Integer seasonPassHash) {
    this.seasonPassHash = seasonPassHash;
    return this;
  }

  /**
   * Get seasonPassHash
   * @return seasonPassHash
   */
  @javax.annotation.Nullable
  public Integer getSeasonPassHash() {
    return seasonPassHash;
  }

  public void setSeasonPassHash(Integer seasonPassHash) {
    this.seasonPassHash = seasonPassHash;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition seasonPassProgressionHash(Integer seasonPassProgressionHash) {
    this.seasonPassProgressionHash = seasonPassProgressionHash;
    return this;
  }

  /**
   * Get seasonPassProgressionHash
   * @return seasonPassProgressionHash
   */
  @javax.annotation.Nullable
  public Integer getSeasonPassProgressionHash() {
    return seasonPassProgressionHash;
  }

  public void setSeasonPassProgressionHash(Integer seasonPassProgressionHash) {
    this.seasonPassProgressionHash = seasonPassProgressionHash;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition seasonalChallengesPresentationNodeHash(Integer seasonalChallengesPresentationNodeHash) {
    this.seasonalChallengesPresentationNodeHash = seasonalChallengesPresentationNodeHash;
    return this;
  }

  /**
   * Get seasonalChallengesPresentationNodeHash
   * @return seasonalChallengesPresentationNodeHash
   */
  @javax.annotation.Nullable
  public Integer getSeasonalChallengesPresentationNodeHash() {
    return seasonalChallengesPresentationNodeHash;
  }

  public void setSeasonalChallengesPresentationNodeHash(Integer seasonalChallengesPresentationNodeHash) {
    this.seasonalChallengesPresentationNodeHash = seasonalChallengesPresentationNodeHash;
  }


  public DestinyDefinitionsSeasonsDestinySeasonDefinition startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsSeasonsDestinySeasonDefinition destinyDefinitionsSeasonsDestinySeasonDefinition = (DestinyDefinitionsSeasonsDestinySeasonDefinition) o;
    return Objects.equals(this.artifactItemHash, destinyDefinitionsSeasonsDestinySeasonDefinition.artifactItemHash) &&
        Objects.equals(this.backgroundImagePath, destinyDefinitionsSeasonsDestinySeasonDefinition.backgroundImagePath) &&
        Objects.equals(this.displayProperties, destinyDefinitionsSeasonsDestinySeasonDefinition.displayProperties) &&
        Objects.equals(this.endDate, destinyDefinitionsSeasonsDestinySeasonDefinition.endDate) &&
        Objects.equals(this.hash, destinyDefinitionsSeasonsDestinySeasonDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsSeasonsDestinySeasonDefinition.index) &&
        Objects.equals(this.preview, destinyDefinitionsSeasonsDestinySeasonDefinition.preview) &&
        Objects.equals(this.redacted, destinyDefinitionsSeasonsDestinySeasonDefinition.redacted) &&
        Objects.equals(this.sealPresentationNodeHash, destinyDefinitionsSeasonsDestinySeasonDefinition.sealPresentationNodeHash) &&
        Objects.equals(this.seasonNumber, destinyDefinitionsSeasonsDestinySeasonDefinition.seasonNumber) &&
        Objects.equals(this.seasonPassHash, destinyDefinitionsSeasonsDestinySeasonDefinition.seasonPassHash) &&
        Objects.equals(this.seasonPassProgressionHash, destinyDefinitionsSeasonsDestinySeasonDefinition.seasonPassProgressionHash) &&
        Objects.equals(this.seasonalChallengesPresentationNodeHash, destinyDefinitionsSeasonsDestinySeasonDefinition.seasonalChallengesPresentationNodeHash) &&
        Objects.equals(this.startDate, destinyDefinitionsSeasonsDestinySeasonDefinition.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactItemHash, backgroundImagePath, displayProperties, endDate, hash, index, preview, redacted, sealPresentationNodeHash, seasonNumber, seasonPassHash, seasonPassProgressionHash, seasonalChallengesPresentationNodeHash, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsSeasonsDestinySeasonDefinition {\n");
    sb.append("    artifactItemHash: ").append(toIndentedString(artifactItemHash)).append("\n");
    sb.append("    backgroundImagePath: ").append(toIndentedString(backgroundImagePath)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    sealPresentationNodeHash: ").append(toIndentedString(sealPresentationNodeHash)).append("\n");
    sb.append("    seasonNumber: ").append(toIndentedString(seasonNumber)).append("\n");
    sb.append("    seasonPassHash: ").append(toIndentedString(seasonPassHash)).append("\n");
    sb.append("    seasonPassProgressionHash: ").append(toIndentedString(seasonPassProgressionHash)).append("\n");
    sb.append("    seasonalChallengesPresentationNodeHash: ").append(toIndentedString(seasonalChallengesPresentationNodeHash)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactItemHash");
    openapiFields.add("backgroundImagePath");
    openapiFields.add("displayProperties");
    openapiFields.add("endDate");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("preview");
    openapiFields.add("redacted");
    openapiFields.add("sealPresentationNodeHash");
    openapiFields.add("seasonNumber");
    openapiFields.add("seasonPassHash");
    openapiFields.add("seasonPassProgressionHash");
    openapiFields.add("seasonalChallengesPresentationNodeHash");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsSeasonsDestinySeasonDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsSeasonsDestinySeasonDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsSeasonsDestinySeasonDefinition is not found in the empty JSON string", DestinyDefinitionsSeasonsDestinySeasonDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsSeasonsDestinySeasonDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsSeasonsDestinySeasonDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backgroundImagePath") != null && !jsonObj.get("backgroundImagePath").isJsonNull()) && !jsonObj.get("backgroundImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundImagePath").toString()));
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      // validate the optional field `preview`
      if (jsonObj.get("preview") != null && !jsonObj.get("preview").isJsonNull()) {
        DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition.validateJsonElement(jsonObj.get("preview"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsSeasonsDestinySeasonDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsSeasonsDestinySeasonDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsSeasonsDestinySeasonDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsSeasonsDestinySeasonDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsSeasonsDestinySeasonDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsSeasonsDestinySeasonDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsSeasonsDestinySeasonDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsSeasonsDestinySeasonDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsSeasonsDestinySeasonDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsSeasonsDestinySeasonDefinition
   */
  public static DestinyDefinitionsSeasonsDestinySeasonDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsSeasonsDestinySeasonDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsSeasonsDestinySeasonDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

