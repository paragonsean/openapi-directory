/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.IgnoresIgnoreResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ForumPostResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ForumPostResponse {
  public static final String SERIALIZED_NAME_IS_PINNED = "IsPinned";
  @SerializedName(SERIALIZED_NAME_IS_PINNED)
  private Boolean isPinned;

  public static final String SERIALIZED_NAME_IGNORE_STATUS = "ignoreStatus";
  @SerializedName(SERIALIZED_NAME_IGNORE_STATUS)
  private IgnoresIgnoreResponse ignoreStatus;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_ANNOUNCEMENT = "isAnnouncement";
  @SerializedName(SERIALIZED_NAME_IS_ANNOUNCEMENT)
  private Boolean isAnnouncement;

  public static final String SERIALIZED_NAME_LAST_REPLY_TIMESTAMP = "lastReplyTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_REPLY_TIMESTAMP)
  private OffsetDateTime lastReplyTimestamp;

  public static final String SERIALIZED_NAME_LATEST_REPLY_AUTHOR_ID = "latestReplyAuthorId";
  @SerializedName(SERIALIZED_NAME_LATEST_REPLY_AUTHOR_ID)
  private Long latestReplyAuthorId;

  public static final String SERIALIZED_NAME_LATEST_REPLY_POST_ID = "latestReplyPostId";
  @SerializedName(SERIALIZED_NAME_LATEST_REPLY_POST_ID)
  private Long latestReplyPostId;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_POPULARITY = "popularity";
  @SerializedName(SERIALIZED_NAME_POPULARITY)
  private Integer popularity;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private String thumbnail;

  public static final String SERIALIZED_NAME_URL_MEDIA_TYPE = "urlMediaType";
  @SerializedName(SERIALIZED_NAME_URL_MEDIA_TYPE)
  private Integer urlMediaType;

  public static final String SERIALIZED_NAME_USER_HAS_MUTED_POST = "userHasMutedPost";
  @SerializedName(SERIALIZED_NAME_USER_HAS_MUTED_POST)
  private Boolean userHasMutedPost;

  public static final String SERIALIZED_NAME_USER_HAS_RATED = "userHasRated";
  @SerializedName(SERIALIZED_NAME_USER_HAS_RATED)
  private Boolean userHasRated;

  public static final String SERIALIZED_NAME_USER_RATING = "userRating";
  @SerializedName(SERIALIZED_NAME_USER_RATING)
  private Integer userRating;

  public ForumPostResponse() {
  }

  public ForumPostResponse isPinned(Boolean isPinned) {
    this.isPinned = isPinned;
    return this;
  }

  /**
   * Get isPinned
   * @return isPinned
   */
  @javax.annotation.Nullable
  public Boolean getIsPinned() {
    return isPinned;
  }

  public void setIsPinned(Boolean isPinned) {
    this.isPinned = isPinned;
  }


  public ForumPostResponse ignoreStatus(IgnoresIgnoreResponse ignoreStatus) {
    this.ignoreStatus = ignoreStatus;
    return this;
  }

  /**
   * Get ignoreStatus
   * @return ignoreStatus
   */
  @javax.annotation.Nullable
  public IgnoresIgnoreResponse getIgnoreStatus() {
    return ignoreStatus;
  }

  public void setIgnoreStatus(IgnoresIgnoreResponse ignoreStatus) {
    this.ignoreStatus = ignoreStatus;
  }


  public ForumPostResponse isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public ForumPostResponse isAnnouncement(Boolean isAnnouncement) {
    this.isAnnouncement = isAnnouncement;
    return this;
  }

  /**
   * Get isAnnouncement
   * @return isAnnouncement
   */
  @javax.annotation.Nullable
  public Boolean getIsAnnouncement() {
    return isAnnouncement;
  }

  public void setIsAnnouncement(Boolean isAnnouncement) {
    this.isAnnouncement = isAnnouncement;
  }


  public ForumPostResponse lastReplyTimestamp(OffsetDateTime lastReplyTimestamp) {
    this.lastReplyTimestamp = lastReplyTimestamp;
    return this;
  }

  /**
   * Get lastReplyTimestamp
   * @return lastReplyTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastReplyTimestamp() {
    return lastReplyTimestamp;
  }

  public void setLastReplyTimestamp(OffsetDateTime lastReplyTimestamp) {
    this.lastReplyTimestamp = lastReplyTimestamp;
  }


  public ForumPostResponse latestReplyAuthorId(Long latestReplyAuthorId) {
    this.latestReplyAuthorId = latestReplyAuthorId;
    return this;
  }

  /**
   * Get latestReplyAuthorId
   * @return latestReplyAuthorId
   */
  @javax.annotation.Nullable
  public Long getLatestReplyAuthorId() {
    return latestReplyAuthorId;
  }

  public void setLatestReplyAuthorId(Long latestReplyAuthorId) {
    this.latestReplyAuthorId = latestReplyAuthorId;
  }


  public ForumPostResponse latestReplyPostId(Long latestReplyPostId) {
    this.latestReplyPostId = latestReplyPostId;
    return this;
  }

  /**
   * Get latestReplyPostId
   * @return latestReplyPostId
   */
  @javax.annotation.Nullable
  public Long getLatestReplyPostId() {
    return latestReplyPostId;
  }

  public void setLatestReplyPostId(Long latestReplyPostId) {
    this.latestReplyPostId = latestReplyPostId;
  }


  public ForumPostResponse locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public ForumPostResponse popularity(Integer popularity) {
    this.popularity = popularity;
    return this;
  }

  /**
   * Get popularity
   * @return popularity
   */
  @javax.annotation.Nullable
  public Integer getPopularity() {
    return popularity;
  }

  public void setPopularity(Integer popularity) {
    this.popularity = popularity;
  }


  public ForumPostResponse thumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Get thumbnail
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public String getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }


  public ForumPostResponse urlMediaType(Integer urlMediaType) {
    this.urlMediaType = urlMediaType;
    return this;
  }

  /**
   * Get urlMediaType
   * @return urlMediaType
   */
  @javax.annotation.Nullable
  public Integer getUrlMediaType() {
    return urlMediaType;
  }

  public void setUrlMediaType(Integer urlMediaType) {
    this.urlMediaType = urlMediaType;
  }


  public ForumPostResponse userHasMutedPost(Boolean userHasMutedPost) {
    this.userHasMutedPost = userHasMutedPost;
    return this;
  }

  /**
   * Get userHasMutedPost
   * @return userHasMutedPost
   */
  @javax.annotation.Nullable
  public Boolean getUserHasMutedPost() {
    return userHasMutedPost;
  }

  public void setUserHasMutedPost(Boolean userHasMutedPost) {
    this.userHasMutedPost = userHasMutedPost;
  }


  public ForumPostResponse userHasRated(Boolean userHasRated) {
    this.userHasRated = userHasRated;
    return this;
  }

  /**
   * Get userHasRated
   * @return userHasRated
   */
  @javax.annotation.Nullable
  public Boolean getUserHasRated() {
    return userHasRated;
  }

  public void setUserHasRated(Boolean userHasRated) {
    this.userHasRated = userHasRated;
  }


  public ForumPostResponse userRating(Integer userRating) {
    this.userRating = userRating;
    return this;
  }

  /**
   * Get userRating
   * @return userRating
   */
  @javax.annotation.Nullable
  public Integer getUserRating() {
    return userRating;
  }

  public void setUserRating(Integer userRating) {
    this.userRating = userRating;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForumPostResponse forumPostResponse = (ForumPostResponse) o;
    return Objects.equals(this.isPinned, forumPostResponse.isPinned) &&
        Objects.equals(this.ignoreStatus, forumPostResponse.ignoreStatus) &&
        Objects.equals(this.isActive, forumPostResponse.isActive) &&
        Objects.equals(this.isAnnouncement, forumPostResponse.isAnnouncement) &&
        Objects.equals(this.lastReplyTimestamp, forumPostResponse.lastReplyTimestamp) &&
        Objects.equals(this.latestReplyAuthorId, forumPostResponse.latestReplyAuthorId) &&
        Objects.equals(this.latestReplyPostId, forumPostResponse.latestReplyPostId) &&
        Objects.equals(this.locale, forumPostResponse.locale) &&
        Objects.equals(this.popularity, forumPostResponse.popularity) &&
        Objects.equals(this.thumbnail, forumPostResponse.thumbnail) &&
        Objects.equals(this.urlMediaType, forumPostResponse.urlMediaType) &&
        Objects.equals(this.userHasMutedPost, forumPostResponse.userHasMutedPost) &&
        Objects.equals(this.userHasRated, forumPostResponse.userHasRated) &&
        Objects.equals(this.userRating, forumPostResponse.userRating);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isPinned, ignoreStatus, isActive, isAnnouncement, lastReplyTimestamp, latestReplyAuthorId, latestReplyPostId, locale, popularity, thumbnail, urlMediaType, userHasMutedPost, userHasRated, userRating);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForumPostResponse {\n");
    sb.append("    isPinned: ").append(toIndentedString(isPinned)).append("\n");
    sb.append("    ignoreStatus: ").append(toIndentedString(ignoreStatus)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isAnnouncement: ").append(toIndentedString(isAnnouncement)).append("\n");
    sb.append("    lastReplyTimestamp: ").append(toIndentedString(lastReplyTimestamp)).append("\n");
    sb.append("    latestReplyAuthorId: ").append(toIndentedString(latestReplyAuthorId)).append("\n");
    sb.append("    latestReplyPostId: ").append(toIndentedString(latestReplyPostId)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    popularity: ").append(toIndentedString(popularity)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    urlMediaType: ").append(toIndentedString(urlMediaType)).append("\n");
    sb.append("    userHasMutedPost: ").append(toIndentedString(userHasMutedPost)).append("\n");
    sb.append("    userHasRated: ").append(toIndentedString(userHasRated)).append("\n");
    sb.append("    userRating: ").append(toIndentedString(userRating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IsPinned");
    openapiFields.add("ignoreStatus");
    openapiFields.add("isActive");
    openapiFields.add("isAnnouncement");
    openapiFields.add("lastReplyTimestamp");
    openapiFields.add("latestReplyAuthorId");
    openapiFields.add("latestReplyPostId");
    openapiFields.add("locale");
    openapiFields.add("popularity");
    openapiFields.add("thumbnail");
    openapiFields.add("urlMediaType");
    openapiFields.add("userHasMutedPost");
    openapiFields.add("userHasRated");
    openapiFields.add("userRating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ForumPostResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForumPostResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForumPostResponse is not found in the empty JSON string", ForumPostResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForumPostResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForumPostResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ignoreStatus`
      if (jsonObj.get("ignoreStatus") != null && !jsonObj.get("ignoreStatus").isJsonNull()) {
        IgnoresIgnoreResponse.validateJsonElement(jsonObj.get("ignoreStatus"));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) && !jsonObj.get("thumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForumPostResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForumPostResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForumPostResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForumPostResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ForumPostResponse>() {
           @Override
           public void write(JsonWriter out, ForumPostResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForumPostResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ForumPostResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ForumPostResponse
   * @throws IOException if the JSON string is invalid with respect to ForumPostResponse
   */
  public static ForumPostResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForumPostResponse.class);
  }

  /**
   * Convert an instance of ForumPostResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

