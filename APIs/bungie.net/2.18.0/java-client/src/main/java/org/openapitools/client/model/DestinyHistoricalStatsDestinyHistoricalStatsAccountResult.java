/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyHistoricalStatsDestinyHistoricalStatsPerCharacter;
import org.openapitools.client.model.DestinyHistoricalStatsDestinyHistoricalStatsWithMerged;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyHistoricalStatsDestinyHistoricalStatsAccountResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyHistoricalStatsDestinyHistoricalStatsAccountResult {
  public static final String SERIALIZED_NAME_CHARACTERS = "characters";
  @SerializedName(SERIALIZED_NAME_CHARACTERS)
  private List<DestinyHistoricalStatsDestinyHistoricalStatsPerCharacter> characters = new ArrayList<>();

  public static final String SERIALIZED_NAME_MERGED_ALL_CHARACTERS = "mergedAllCharacters";
  @SerializedName(SERIALIZED_NAME_MERGED_ALL_CHARACTERS)
  private DestinyHistoricalStatsDestinyHistoricalStatsWithMerged mergedAllCharacters;

  public static final String SERIALIZED_NAME_MERGED_DELETED_CHARACTERS = "mergedDeletedCharacters";
  @SerializedName(SERIALIZED_NAME_MERGED_DELETED_CHARACTERS)
  private DestinyHistoricalStatsDestinyHistoricalStatsWithMerged mergedDeletedCharacters;

  public DestinyHistoricalStatsDestinyHistoricalStatsAccountResult() {
  }

  public DestinyHistoricalStatsDestinyHistoricalStatsAccountResult characters(List<DestinyHistoricalStatsDestinyHistoricalStatsPerCharacter> characters) {
    this.characters = characters;
    return this;
  }

  public DestinyHistoricalStatsDestinyHistoricalStatsAccountResult addCharactersItem(DestinyHistoricalStatsDestinyHistoricalStatsPerCharacter charactersItem) {
    if (this.characters == null) {
      this.characters = new ArrayList<>();
    }
    this.characters.add(charactersItem);
    return this;
  }

  /**
   * Get characters
   * @return characters
   */
  @javax.annotation.Nullable
  public List<DestinyHistoricalStatsDestinyHistoricalStatsPerCharacter> getCharacters() {
    return characters;
  }

  public void setCharacters(List<DestinyHistoricalStatsDestinyHistoricalStatsPerCharacter> characters) {
    this.characters = characters;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsAccountResult mergedAllCharacters(DestinyHistoricalStatsDestinyHistoricalStatsWithMerged mergedAllCharacters) {
    this.mergedAllCharacters = mergedAllCharacters;
    return this;
  }

  /**
   * Get mergedAllCharacters
   * @return mergedAllCharacters
   */
  @javax.annotation.Nullable
  public DestinyHistoricalStatsDestinyHistoricalStatsWithMerged getMergedAllCharacters() {
    return mergedAllCharacters;
  }

  public void setMergedAllCharacters(DestinyHistoricalStatsDestinyHistoricalStatsWithMerged mergedAllCharacters) {
    this.mergedAllCharacters = mergedAllCharacters;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsAccountResult mergedDeletedCharacters(DestinyHistoricalStatsDestinyHistoricalStatsWithMerged mergedDeletedCharacters) {
    this.mergedDeletedCharacters = mergedDeletedCharacters;
    return this;
  }

  /**
   * Get mergedDeletedCharacters
   * @return mergedDeletedCharacters
   */
  @javax.annotation.Nullable
  public DestinyHistoricalStatsDestinyHistoricalStatsWithMerged getMergedDeletedCharacters() {
    return mergedDeletedCharacters;
  }

  public void setMergedDeletedCharacters(DestinyHistoricalStatsDestinyHistoricalStatsWithMerged mergedDeletedCharacters) {
    this.mergedDeletedCharacters = mergedDeletedCharacters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyHistoricalStatsDestinyHistoricalStatsAccountResult destinyHistoricalStatsDestinyHistoricalStatsAccountResult = (DestinyHistoricalStatsDestinyHistoricalStatsAccountResult) o;
    return Objects.equals(this.characters, destinyHistoricalStatsDestinyHistoricalStatsAccountResult.characters) &&
        Objects.equals(this.mergedAllCharacters, destinyHistoricalStatsDestinyHistoricalStatsAccountResult.mergedAllCharacters) &&
        Objects.equals(this.mergedDeletedCharacters, destinyHistoricalStatsDestinyHistoricalStatsAccountResult.mergedDeletedCharacters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characters, mergedAllCharacters, mergedDeletedCharacters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyHistoricalStatsDestinyHistoricalStatsAccountResult {\n");
    sb.append("    characters: ").append(toIndentedString(characters)).append("\n");
    sb.append("    mergedAllCharacters: ").append(toIndentedString(mergedAllCharacters)).append("\n");
    sb.append("    mergedDeletedCharacters: ").append(toIndentedString(mergedDeletedCharacters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("characters");
    openapiFields.add("mergedAllCharacters");
    openapiFields.add("mergedDeletedCharacters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyHistoricalStatsDestinyHistoricalStatsAccountResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyHistoricalStatsDestinyHistoricalStatsAccountResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyHistoricalStatsDestinyHistoricalStatsAccountResult is not found in the empty JSON string", DestinyHistoricalStatsDestinyHistoricalStatsAccountResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyHistoricalStatsDestinyHistoricalStatsAccountResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyHistoricalStatsDestinyHistoricalStatsAccountResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("characters") != null && !jsonObj.get("characters").isJsonNull()) {
        JsonArray jsonArraycharacters = jsonObj.getAsJsonArray("characters");
        if (jsonArraycharacters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("characters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `characters` to be an array in the JSON string but got `%s`", jsonObj.get("characters").toString()));
          }

          // validate the optional field `characters` (array)
          for (int i = 0; i < jsonArraycharacters.size(); i++) {
            DestinyHistoricalStatsDestinyHistoricalStatsPerCharacter.validateJsonElement(jsonArraycharacters.get(i));
          };
        }
      }
      // validate the optional field `mergedAllCharacters`
      if (jsonObj.get("mergedAllCharacters") != null && !jsonObj.get("mergedAllCharacters").isJsonNull()) {
        DestinyHistoricalStatsDestinyHistoricalStatsWithMerged.validateJsonElement(jsonObj.get("mergedAllCharacters"));
      }
      // validate the optional field `mergedDeletedCharacters`
      if (jsonObj.get("mergedDeletedCharacters") != null && !jsonObj.get("mergedDeletedCharacters").isJsonNull()) {
        DestinyHistoricalStatsDestinyHistoricalStatsWithMerged.validateJsonElement(jsonObj.get("mergedDeletedCharacters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyHistoricalStatsDestinyHistoricalStatsAccountResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyHistoricalStatsDestinyHistoricalStatsAccountResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyHistoricalStatsDestinyHistoricalStatsAccountResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyHistoricalStatsDestinyHistoricalStatsAccountResult.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyHistoricalStatsDestinyHistoricalStatsAccountResult>() {
           @Override
           public void write(JsonWriter out, DestinyHistoricalStatsDestinyHistoricalStatsAccountResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyHistoricalStatsDestinyHistoricalStatsAccountResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyHistoricalStatsDestinyHistoricalStatsAccountResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyHistoricalStatsDestinyHistoricalStatsAccountResult
   * @throws IOException if the JSON string is invalid with respect to DestinyHistoricalStatsDestinyHistoricalStatsAccountResult
   */
  public static DestinyHistoricalStatsDestinyHistoricalStatsAccountResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyHistoricalStatsDestinyHistoricalStatsAccountResult.class);
  }

  /**
   * Convert an instance of DestinyHistoricalStatsDestinyHistoricalStatsAccountResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

