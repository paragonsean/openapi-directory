/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyQuestsDestinyObjectiveProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyComponentsPresentationDestinyPresentationNodeComponent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyComponentsPresentationDestinyPresentationNodeComponent {
  public static final String SERIALIZED_NAME_COMPLETION_VALUE = "completionValue";
  @SerializedName(SERIALIZED_NAME_COMPLETION_VALUE)
  private Integer completionValue;

  public static final String SERIALIZED_NAME_OBJECTIVE = "objective";
  @SerializedName(SERIALIZED_NAME_OBJECTIVE)
  private DestinyQuestsDestinyObjectiveProgress objective;

  public static final String SERIALIZED_NAME_PROGRESS_VALUE = "progressValue";
  @SerializedName(SERIALIZED_NAME_PROGRESS_VALUE)
  private Integer progressValue;

  public static final String SERIALIZED_NAME_RECORD_CATEGORY_SCORE = "recordCategoryScore";
  @SerializedName(SERIALIZED_NAME_RECORD_CATEGORY_SCORE)
  private Integer recordCategoryScore;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Integer state;

  public DestinyComponentsPresentationDestinyPresentationNodeComponent() {
  }

  public DestinyComponentsPresentationDestinyPresentationNodeComponent completionValue(Integer completionValue) {
    this.completionValue = completionValue;
    return this;
  }

  /**
   * The value at which the presentation node is considered to be completed.
   * @return completionValue
   */
  @javax.annotation.Nullable
  public Integer getCompletionValue() {
    return completionValue;
  }

  public void setCompletionValue(Integer completionValue) {
    this.completionValue = completionValue;
  }


  public DestinyComponentsPresentationDestinyPresentationNodeComponent objective(DestinyQuestsDestinyObjectiveProgress objective) {
    this.objective = objective;
    return this;
  }

  /**
   * An optional property: presentation nodes MAY have objectives, which can be used to infer more human readable data about the progress. However, progressValue and completionValue ought to be considered the canonical values for progress on Progression Nodes.
   * @return objective
   */
  @javax.annotation.Nullable
  public DestinyQuestsDestinyObjectiveProgress getObjective() {
    return objective;
  }

  public void setObjective(DestinyQuestsDestinyObjectiveProgress objective) {
    this.objective = objective;
  }


  public DestinyComponentsPresentationDestinyPresentationNodeComponent progressValue(Integer progressValue) {
    this.progressValue = progressValue;
    return this;
  }

  /**
   * How much of the presentation node is considered to be completed so far by the given character/profile.
   * @return progressValue
   */
  @javax.annotation.Nullable
  public Integer getProgressValue() {
    return progressValue;
  }

  public void setProgressValue(Integer progressValue) {
    this.progressValue = progressValue;
  }


  public DestinyComponentsPresentationDestinyPresentationNodeComponent recordCategoryScore(Integer recordCategoryScore) {
    this.recordCategoryScore = recordCategoryScore;
    return this;
  }

  /**
   * If available, this is the current score for the record category that this node represents.
   * @return recordCategoryScore
   */
  @javax.annotation.Nullable
  public Integer getRecordCategoryScore() {
    return recordCategoryScore;
  }

  public void setRecordCategoryScore(Integer recordCategoryScore) {
    this.recordCategoryScore = recordCategoryScore;
  }


  public DestinyComponentsPresentationDestinyPresentationNodeComponent state(Integer state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public Integer getState() {
    return state;
  }

  public void setState(Integer state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyComponentsPresentationDestinyPresentationNodeComponent destinyComponentsPresentationDestinyPresentationNodeComponent = (DestinyComponentsPresentationDestinyPresentationNodeComponent) o;
    return Objects.equals(this.completionValue, destinyComponentsPresentationDestinyPresentationNodeComponent.completionValue) &&
        Objects.equals(this.objective, destinyComponentsPresentationDestinyPresentationNodeComponent.objective) &&
        Objects.equals(this.progressValue, destinyComponentsPresentationDestinyPresentationNodeComponent.progressValue) &&
        Objects.equals(this.recordCategoryScore, destinyComponentsPresentationDestinyPresentationNodeComponent.recordCategoryScore) &&
        Objects.equals(this.state, destinyComponentsPresentationDestinyPresentationNodeComponent.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionValue, objective, progressValue, recordCategoryScore, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyComponentsPresentationDestinyPresentationNodeComponent {\n");
    sb.append("    completionValue: ").append(toIndentedString(completionValue)).append("\n");
    sb.append("    objective: ").append(toIndentedString(objective)).append("\n");
    sb.append("    progressValue: ").append(toIndentedString(progressValue)).append("\n");
    sb.append("    recordCategoryScore: ").append(toIndentedString(recordCategoryScore)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completionValue");
    openapiFields.add("objective");
    openapiFields.add("progressValue");
    openapiFields.add("recordCategoryScore");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyComponentsPresentationDestinyPresentationNodeComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyComponentsPresentationDestinyPresentationNodeComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyComponentsPresentationDestinyPresentationNodeComponent is not found in the empty JSON string", DestinyComponentsPresentationDestinyPresentationNodeComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyComponentsPresentationDestinyPresentationNodeComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyComponentsPresentationDestinyPresentationNodeComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `objective`
      if (jsonObj.get("objective") != null && !jsonObj.get("objective").isJsonNull()) {
        DestinyQuestsDestinyObjectiveProgress.validateJsonElement(jsonObj.get("objective"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyComponentsPresentationDestinyPresentationNodeComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyComponentsPresentationDestinyPresentationNodeComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyComponentsPresentationDestinyPresentationNodeComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyComponentsPresentationDestinyPresentationNodeComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyComponentsPresentationDestinyPresentationNodeComponent>() {
           @Override
           public void write(JsonWriter out, DestinyComponentsPresentationDestinyPresentationNodeComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyComponentsPresentationDestinyPresentationNodeComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyComponentsPresentationDestinyPresentationNodeComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyComponentsPresentationDestinyPresentationNodeComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyComponentsPresentationDestinyPresentationNodeComponent
   */
  public static DestinyComponentsPresentationDestinyPresentationNodeComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyComponentsPresentationDestinyPresentationNodeComponent.class);
  }

  /**
   * Convert an instance of DestinyComponentsPresentationDestinyPresentationNodeComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

