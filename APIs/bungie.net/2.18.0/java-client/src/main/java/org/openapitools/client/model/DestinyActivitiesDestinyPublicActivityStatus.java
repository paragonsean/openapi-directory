/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDestinyItemQuantity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the public-facing status of an activity: any data about what is currently active in the Activity, regardless of an individual character&#39;s progress in it.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyActivitiesDestinyPublicActivityStatus {
  public static final String SERIALIZED_NAME_CHALLENGE_OBJECTIVE_HASHES = "challengeObjectiveHashes";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_OBJECTIVE_HASHES)
  private List<Integer> challengeObjectiveHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODIFIER_HASHES = "modifierHashes";
  @SerializedName(SERIALIZED_NAME_MODIFIER_HASHES)
  private List<Integer> modifierHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REWARD_TOOLTIP_ITEMS = "rewardTooltipItems";
  @SerializedName(SERIALIZED_NAME_REWARD_TOOLTIP_ITEMS)
  private List<DestinyDestinyItemQuantity> rewardTooltipItems = new ArrayList<>();

  public DestinyActivitiesDestinyPublicActivityStatus() {
  }

  public DestinyActivitiesDestinyPublicActivityStatus challengeObjectiveHashes(List<Integer> challengeObjectiveHashes) {
    this.challengeObjectiveHashes = challengeObjectiveHashes;
    return this;
  }

  public DestinyActivitiesDestinyPublicActivityStatus addChallengeObjectiveHashesItem(Integer challengeObjectiveHashesItem) {
    if (this.challengeObjectiveHashes == null) {
      this.challengeObjectiveHashes = new ArrayList<>();
    }
    this.challengeObjectiveHashes.add(challengeObjectiveHashesItem);
    return this;
  }

  /**
   * Active Challenges for the activity, if any - represented as hashes for DestinyObjectiveDefinitions.
   * @return challengeObjectiveHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getChallengeObjectiveHashes() {
    return challengeObjectiveHashes;
  }

  public void setChallengeObjectiveHashes(List<Integer> challengeObjectiveHashes) {
    this.challengeObjectiveHashes = challengeObjectiveHashes;
  }


  public DestinyActivitiesDestinyPublicActivityStatus modifierHashes(List<Integer> modifierHashes) {
    this.modifierHashes = modifierHashes;
    return this;
  }

  public DestinyActivitiesDestinyPublicActivityStatus addModifierHashesItem(Integer modifierHashesItem) {
    if (this.modifierHashes == null) {
      this.modifierHashes = new ArrayList<>();
    }
    this.modifierHashes.add(modifierHashesItem);
    return this;
  }

  /**
   * The active modifiers on this activity, if any - represented as hashes for DestinyActivityModifierDefinitions.
   * @return modifierHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getModifierHashes() {
    return modifierHashes;
  }

  public void setModifierHashes(List<Integer> modifierHashes) {
    this.modifierHashes = modifierHashes;
  }


  public DestinyActivitiesDestinyPublicActivityStatus rewardTooltipItems(List<DestinyDestinyItemQuantity> rewardTooltipItems) {
    this.rewardTooltipItems = rewardTooltipItems;
    return this;
  }

  public DestinyActivitiesDestinyPublicActivityStatus addRewardTooltipItemsItem(DestinyDestinyItemQuantity rewardTooltipItemsItem) {
    if (this.rewardTooltipItems == null) {
      this.rewardTooltipItems = new ArrayList<>();
    }
    this.rewardTooltipItems.add(rewardTooltipItemsItem);
    return this;
  }

  /**
   * If the activity itself provides any specific \&quot;mock\&quot; rewards, this will be the items and their quantity.  Why \&quot;mock\&quot;, you ask? Because these are the rewards as they are represented in the tooltip of the Activity.  These are often pointers to fake items that look good in a tooltip, but represent an abstract concept of what you will get for a reward rather than the specific items you may obtain.
   * @return rewardTooltipItems
   */
  @javax.annotation.Nullable
  public List<DestinyDestinyItemQuantity> getRewardTooltipItems() {
    return rewardTooltipItems;
  }

  public void setRewardTooltipItems(List<DestinyDestinyItemQuantity> rewardTooltipItems) {
    this.rewardTooltipItems = rewardTooltipItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyActivitiesDestinyPublicActivityStatus destinyActivitiesDestinyPublicActivityStatus = (DestinyActivitiesDestinyPublicActivityStatus) o;
    return Objects.equals(this.challengeObjectiveHashes, destinyActivitiesDestinyPublicActivityStatus.challengeObjectiveHashes) &&
        Objects.equals(this.modifierHashes, destinyActivitiesDestinyPublicActivityStatus.modifierHashes) &&
        Objects.equals(this.rewardTooltipItems, destinyActivitiesDestinyPublicActivityStatus.rewardTooltipItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(challengeObjectiveHashes, modifierHashes, rewardTooltipItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyActivitiesDestinyPublicActivityStatus {\n");
    sb.append("    challengeObjectiveHashes: ").append(toIndentedString(challengeObjectiveHashes)).append("\n");
    sb.append("    modifierHashes: ").append(toIndentedString(modifierHashes)).append("\n");
    sb.append("    rewardTooltipItems: ").append(toIndentedString(rewardTooltipItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("challengeObjectiveHashes");
    openapiFields.add("modifierHashes");
    openapiFields.add("rewardTooltipItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyActivitiesDestinyPublicActivityStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyActivitiesDestinyPublicActivityStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyActivitiesDestinyPublicActivityStatus is not found in the empty JSON string", DestinyActivitiesDestinyPublicActivityStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyActivitiesDestinyPublicActivityStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyActivitiesDestinyPublicActivityStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("challengeObjectiveHashes") != null && !jsonObj.get("challengeObjectiveHashes").isJsonNull() && !jsonObj.get("challengeObjectiveHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `challengeObjectiveHashes` to be an array in the JSON string but got `%s`", jsonObj.get("challengeObjectiveHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modifierHashes") != null && !jsonObj.get("modifierHashes").isJsonNull() && !jsonObj.get("modifierHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifierHashes` to be an array in the JSON string but got `%s`", jsonObj.get("modifierHashes").toString()));
      }
      if (jsonObj.get("rewardTooltipItems") != null && !jsonObj.get("rewardTooltipItems").isJsonNull()) {
        JsonArray jsonArrayrewardTooltipItems = jsonObj.getAsJsonArray("rewardTooltipItems");
        if (jsonArrayrewardTooltipItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rewardTooltipItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rewardTooltipItems` to be an array in the JSON string but got `%s`", jsonObj.get("rewardTooltipItems").toString()));
          }

          // validate the optional field `rewardTooltipItems` (array)
          for (int i = 0; i < jsonArrayrewardTooltipItems.size(); i++) {
            DestinyDestinyItemQuantity.validateJsonElement(jsonArrayrewardTooltipItems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyActivitiesDestinyPublicActivityStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyActivitiesDestinyPublicActivityStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyActivitiesDestinyPublicActivityStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyActivitiesDestinyPublicActivityStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyActivitiesDestinyPublicActivityStatus>() {
           @Override
           public void write(JsonWriter out, DestinyActivitiesDestinyPublicActivityStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyActivitiesDestinyPublicActivityStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyActivitiesDestinyPublicActivityStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyActivitiesDestinyPublicActivityStatus
   * @throws IOException if the JSON string is invalid with respect to DestinyActivitiesDestinyPublicActivityStatus
   */
  public static DestinyActivitiesDestinyPublicActivityStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyActivitiesDestinyPublicActivityStatus.class);
  }

  /**
   * Convert an instance of DestinyActivitiesDestinyPublicActivityStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

