/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DestinyDestinyProgression;
import org.openapitools.client.model.DestinyMiscDestinyColor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This component contains base properties of the character. You&#39;ll probably want to always request this component, but hey you do you.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyEntitiesCharactersDestinyCharacterComponent {
  public static final String SERIALIZED_NAME_BASE_CHARACTER_LEVEL = "baseCharacterLevel";
  @SerializedName(SERIALIZED_NAME_BASE_CHARACTER_LEVEL)
  private Integer baseCharacterLevel;

  public static final String SERIALIZED_NAME_CHARACTER_ID = "characterId";
  @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
  private Long characterId;

  public static final String SERIALIZED_NAME_CLASS_HASH = "classHash";
  @SerializedName(SERIALIZED_NAME_CLASS_HASH)
  private Integer classHash;

  public static final String SERIALIZED_NAME_CLASS_TYPE = "classType";
  @SerializedName(SERIALIZED_NAME_CLASS_TYPE)
  private Integer classType;

  public static final String SERIALIZED_NAME_DATE_LAST_PLAYED = "dateLastPlayed";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_PLAYED)
  private OffsetDateTime dateLastPlayed;

  public static final String SERIALIZED_NAME_EMBLEM_BACKGROUND_PATH = "emblemBackgroundPath";
  @SerializedName(SERIALIZED_NAME_EMBLEM_BACKGROUND_PATH)
  private String emblemBackgroundPath;

  public static final String SERIALIZED_NAME_EMBLEM_COLOR = "emblemColor";
  @SerializedName(SERIALIZED_NAME_EMBLEM_COLOR)
  private DestinyMiscDestinyColor emblemColor;

  public static final String SERIALIZED_NAME_EMBLEM_HASH = "emblemHash";
  @SerializedName(SERIALIZED_NAME_EMBLEM_HASH)
  private Integer emblemHash;

  public static final String SERIALIZED_NAME_EMBLEM_PATH = "emblemPath";
  @SerializedName(SERIALIZED_NAME_EMBLEM_PATH)
  private String emblemPath;

  public static final String SERIALIZED_NAME_GENDER_HASH = "genderHash";
  @SerializedName(SERIALIZED_NAME_GENDER_HASH)
  private Integer genderHash;

  public static final String SERIALIZED_NAME_GENDER_TYPE = "genderType";
  @SerializedName(SERIALIZED_NAME_GENDER_TYPE)
  private Integer genderType;

  public static final String SERIALIZED_NAME_LEVEL_PROGRESSION = "levelProgression";
  @SerializedName(SERIALIZED_NAME_LEVEL_PROGRESSION)
  private DestinyDestinyProgression levelProgression;

  public static final String SERIALIZED_NAME_LIGHT = "light";
  @SerializedName(SERIALIZED_NAME_LIGHT)
  private Integer light;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ID = "membershipId";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ID)
  private Long membershipId;

  public static final String SERIALIZED_NAME_MEMBERSHIP_TYPE = "membershipType";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_TYPE)
  private Integer membershipType;

  public static final String SERIALIZED_NAME_MINUTES_PLAYED_THIS_SESSION = "minutesPlayedThisSession";
  @SerializedName(SERIALIZED_NAME_MINUTES_PLAYED_THIS_SESSION)
  private Long minutesPlayedThisSession;

  public static final String SERIALIZED_NAME_MINUTES_PLAYED_TOTAL = "minutesPlayedTotal";
  @SerializedName(SERIALIZED_NAME_MINUTES_PLAYED_TOTAL)
  private Long minutesPlayedTotal;

  public static final String SERIALIZED_NAME_PERCENT_TO_NEXT_LEVEL = "percentToNextLevel";
  @SerializedName(SERIALIZED_NAME_PERCENT_TO_NEXT_LEVEL)
  private Float percentToNextLevel;

  public static final String SERIALIZED_NAME_RACE_HASH = "raceHash";
  @SerializedName(SERIALIZED_NAME_RACE_HASH)
  private Integer raceHash;

  public static final String SERIALIZED_NAME_RACE_TYPE = "raceType";
  @SerializedName(SERIALIZED_NAME_RACE_TYPE)
  private Integer raceType;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private Map<String, Integer> stats = new HashMap<>();

  public static final String SERIALIZED_NAME_TITLE_RECORD_HASH = "titleRecordHash";
  @SerializedName(SERIALIZED_NAME_TITLE_RECORD_HASH)
  private Integer titleRecordHash;

  public DestinyEntitiesCharactersDestinyCharacterComponent() {
  }

  public DestinyEntitiesCharactersDestinyCharacterComponent baseCharacterLevel(Integer baseCharacterLevel) {
    this.baseCharacterLevel = baseCharacterLevel;
    return this;
  }

  /**
   * The \&quot;base\&quot; level of your character, not accounting for any light level.
   * @return baseCharacterLevel
   */
  @javax.annotation.Nullable
  public Integer getBaseCharacterLevel() {
    return baseCharacterLevel;
  }

  public void setBaseCharacterLevel(Integer baseCharacterLevel) {
    this.baseCharacterLevel = baseCharacterLevel;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent characterId(Long characterId) {
    this.characterId = characterId;
    return this;
  }

  /**
   * The unique identifier for the character.
   * @return characterId
   */
  @javax.annotation.Nullable
  public Long getCharacterId() {
    return characterId;
  }

  public void setCharacterId(Long characterId) {
    this.characterId = characterId;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent classHash(Integer classHash) {
    this.classHash = classHash;
    return this;
  }

  /**
   * Use this hash to look up the character&#39;s DestinyClassDefinition.
   * @return classHash
   */
  @javax.annotation.Nullable
  public Integer getClassHash() {
    return classHash;
  }

  public void setClassHash(Integer classHash) {
    this.classHash = classHash;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent classType(Integer classType) {
    this.classType = classType;
    return this;
  }

  /**
   * Mostly for historical purposes at this point, this is an enumeration for the character&#39;s class.  It&#39;ll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
   * @return classType
   */
  @javax.annotation.Nullable
  public Integer getClassType() {
    return classType;
  }

  public void setClassType(Integer classType) {
    this.classType = classType;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent dateLastPlayed(OffsetDateTime dateLastPlayed) {
    this.dateLastPlayed = dateLastPlayed;
    return this;
  }

  /**
   * The last date that the user played Destiny.
   * @return dateLastPlayed
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateLastPlayed() {
    return dateLastPlayed;
  }

  public void setDateLastPlayed(OffsetDateTime dateLastPlayed) {
    this.dateLastPlayed = dateLastPlayed;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent emblemBackgroundPath(String emblemBackgroundPath) {
    this.emblemBackgroundPath = emblemBackgroundPath;
    return this;
  }

  /**
   * A shortcut path to the user&#39;s currently equipped emblem background image. If you&#39;re just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
   * @return emblemBackgroundPath
   */
  @javax.annotation.Nullable
  public String getEmblemBackgroundPath() {
    return emblemBackgroundPath;
  }

  public void setEmblemBackgroundPath(String emblemBackgroundPath) {
    this.emblemBackgroundPath = emblemBackgroundPath;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent emblemColor(DestinyMiscDestinyColor emblemColor) {
    this.emblemColor = emblemColor;
    return this;
  }

  /**
   * A shortcut for getting the background color of the user&#39;s currently equipped emblem without having to do a DestinyInventoryItemDefinition lookup.
   * @return emblemColor
   */
  @javax.annotation.Nullable
  public DestinyMiscDestinyColor getEmblemColor() {
    return emblemColor;
  }

  public void setEmblemColor(DestinyMiscDestinyColor emblemColor) {
    this.emblemColor = emblemColor;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent emblemHash(Integer emblemHash) {
    this.emblemHash = emblemHash;
    return this;
  }

  /**
   * The hash of the currently equipped emblem for the user. Can be used to look up the DestinyInventoryItemDefinition.
   * @return emblemHash
   */
  @javax.annotation.Nullable
  public Integer getEmblemHash() {
    return emblemHash;
  }

  public void setEmblemHash(Integer emblemHash) {
    this.emblemHash = emblemHash;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent emblemPath(String emblemPath) {
    this.emblemPath = emblemPath;
    return this;
  }

  /**
   * A shortcut path to the user&#39;s currently equipped emblem image. If you&#39;re just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
   * @return emblemPath
   */
  @javax.annotation.Nullable
  public String getEmblemPath() {
    return emblemPath;
  }

  public void setEmblemPath(String emblemPath) {
    this.emblemPath = emblemPath;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent genderHash(Integer genderHash) {
    this.genderHash = genderHash;
    return this;
  }

  /**
   * Use this hash to look up the character&#39;s DestinyGenderDefinition.
   * @return genderHash
   */
  @javax.annotation.Nullable
  public Integer getGenderHash() {
    return genderHash;
  }

  public void setGenderHash(Integer genderHash) {
    this.genderHash = genderHash;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent genderType(Integer genderType) {
    this.genderType = genderType;
    return this;
  }

  /**
   * Mostly for historical purposes at this point, this is an enumeration for the character&#39;s Gender.  It&#39;ll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove. And yeah, it&#39;s an enumeration and not a boolean. Fight me.
   * @return genderType
   */
  @javax.annotation.Nullable
  public Integer getGenderType() {
    return genderType;
  }

  public void setGenderType(Integer genderType) {
    this.genderType = genderType;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent levelProgression(DestinyDestinyProgression levelProgression) {
    this.levelProgression = levelProgression;
    return this;
  }

  /**
   * The progression that indicates your character&#39;s level. Not their light level, but their character level: you know, the thing you max out a couple hours in and then ignore for the sake of light level.
   * @return levelProgression
   */
  @javax.annotation.Nullable
  public DestinyDestinyProgression getLevelProgression() {
    return levelProgression;
  }

  public void setLevelProgression(DestinyDestinyProgression levelProgression) {
    this.levelProgression = levelProgression;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent light(Integer light) {
    this.light = light;
    return this;
  }

  /**
   * The user&#39;s calculated \&quot;Light Level\&quot;. Light level is an indicator of your power that mostly matters in the end game, once you&#39;ve reached the maximum character level: it&#39;s a level that&#39;s dependent on the average Attack/Defense power of your items.
   * @return light
   */
  @javax.annotation.Nullable
  public Integer getLight() {
    return light;
  }

  public void setLight(Integer light) {
    this.light = light;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent membershipId(Long membershipId) {
    this.membershipId = membershipId;
    return this;
  }

  /**
   * Every Destiny Profile has a membershipId. This is provided on the character as well for convenience.
   * @return membershipId
   */
  @javax.annotation.Nullable
  public Long getMembershipId() {
    return membershipId;
  }

  public void setMembershipId(Long membershipId) {
    this.membershipId = membershipId;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent membershipType(Integer membershipType) {
    this.membershipType = membershipType;
    return this;
  }

  /**
   * membershipType tells you the platform on which the character plays. Examine the BungieMembershipType enumeration for possible values.
   * @return membershipType
   */
  @javax.annotation.Nullable
  public Integer getMembershipType() {
    return membershipType;
  }

  public void setMembershipType(Integer membershipType) {
    this.membershipType = membershipType;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent minutesPlayedThisSession(Long minutesPlayedThisSession) {
    this.minutesPlayedThisSession = minutesPlayedThisSession;
    return this;
  }

  /**
   * If the user is currently playing, this is how long they&#39;ve been playing.
   * @return minutesPlayedThisSession
   */
  @javax.annotation.Nullable
  public Long getMinutesPlayedThisSession() {
    return minutesPlayedThisSession;
  }

  public void setMinutesPlayedThisSession(Long minutesPlayedThisSession) {
    this.minutesPlayedThisSession = minutesPlayedThisSession;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent minutesPlayedTotal(Long minutesPlayedTotal) {
    this.minutesPlayedTotal = minutesPlayedTotal;
    return this;
  }

  /**
   * If this value is 525,600, then they played Destiny for a year. Or they&#39;re a very dedicated Rent fan. Note that this includes idle time, not just time spent actually in activities shooting things.
   * @return minutesPlayedTotal
   */
  @javax.annotation.Nullable
  public Long getMinutesPlayedTotal() {
    return minutesPlayedTotal;
  }

  public void setMinutesPlayedTotal(Long minutesPlayedTotal) {
    this.minutesPlayedTotal = minutesPlayedTotal;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent percentToNextLevel(Float percentToNextLevel) {
    this.percentToNextLevel = percentToNextLevel;
    return this;
  }

  /**
   * A number between 0 and 100, indicating the whole and fractional % remaining to get to the next character level.
   * @return percentToNextLevel
   */
  @javax.annotation.Nullable
  public Float getPercentToNextLevel() {
    return percentToNextLevel;
  }

  public void setPercentToNextLevel(Float percentToNextLevel) {
    this.percentToNextLevel = percentToNextLevel;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent raceHash(Integer raceHash) {
    this.raceHash = raceHash;
    return this;
  }

  /**
   * Use this hash to look up the character&#39;s DestinyRaceDefinition.
   * @return raceHash
   */
  @javax.annotation.Nullable
  public Integer getRaceHash() {
    return raceHash;
  }

  public void setRaceHash(Integer raceHash) {
    this.raceHash = raceHash;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent raceType(Integer raceType) {
    this.raceType = raceType;
    return this;
  }

  /**
   * Mostly for historical purposes at this point, this is an enumeration for the character&#39;s race.  It&#39;ll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
   * @return raceType
   */
  @javax.annotation.Nullable
  public Integer getRaceType() {
    return raceType;
  }

  public void setRaceType(Integer raceType) {
    this.raceType = raceType;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent stats(Map<String, Integer> stats) {
    this.stats = stats;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterComponent putStatsItem(String key, Integer statsItem) {
    if (this.stats == null) {
      this.stats = new HashMap<>();
    }
    this.stats.put(key, statsItem);
    return this;
  }

  /**
   * Your character&#39;s stats, such as Agility, Resilience, etc... *not* historical stats.  You&#39;ll have to call a different endpoint for those.
   * @return stats
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getStats() {
    return stats;
  }

  public void setStats(Map<String, Integer> stats) {
    this.stats = stats;
  }


  public DestinyEntitiesCharactersDestinyCharacterComponent titleRecordHash(Integer titleRecordHash) {
    this.titleRecordHash = titleRecordHash;
    return this;
  }

  /**
   * If this Character has a title assigned to it, this is the identifier of the DestinyRecordDefinition that has that title information.
   * @return titleRecordHash
   */
  @javax.annotation.Nullable
  public Integer getTitleRecordHash() {
    return titleRecordHash;
  }

  public void setTitleRecordHash(Integer titleRecordHash) {
    this.titleRecordHash = titleRecordHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesCharactersDestinyCharacterComponent destinyEntitiesCharactersDestinyCharacterComponent = (DestinyEntitiesCharactersDestinyCharacterComponent) o;
    return Objects.equals(this.baseCharacterLevel, destinyEntitiesCharactersDestinyCharacterComponent.baseCharacterLevel) &&
        Objects.equals(this.characterId, destinyEntitiesCharactersDestinyCharacterComponent.characterId) &&
        Objects.equals(this.classHash, destinyEntitiesCharactersDestinyCharacterComponent.classHash) &&
        Objects.equals(this.classType, destinyEntitiesCharactersDestinyCharacterComponent.classType) &&
        Objects.equals(this.dateLastPlayed, destinyEntitiesCharactersDestinyCharacterComponent.dateLastPlayed) &&
        Objects.equals(this.emblemBackgroundPath, destinyEntitiesCharactersDestinyCharacterComponent.emblemBackgroundPath) &&
        Objects.equals(this.emblemColor, destinyEntitiesCharactersDestinyCharacterComponent.emblemColor) &&
        Objects.equals(this.emblemHash, destinyEntitiesCharactersDestinyCharacterComponent.emblemHash) &&
        Objects.equals(this.emblemPath, destinyEntitiesCharactersDestinyCharacterComponent.emblemPath) &&
        Objects.equals(this.genderHash, destinyEntitiesCharactersDestinyCharacterComponent.genderHash) &&
        Objects.equals(this.genderType, destinyEntitiesCharactersDestinyCharacterComponent.genderType) &&
        Objects.equals(this.levelProgression, destinyEntitiesCharactersDestinyCharacterComponent.levelProgression) &&
        Objects.equals(this.light, destinyEntitiesCharactersDestinyCharacterComponent.light) &&
        Objects.equals(this.membershipId, destinyEntitiesCharactersDestinyCharacterComponent.membershipId) &&
        Objects.equals(this.membershipType, destinyEntitiesCharactersDestinyCharacterComponent.membershipType) &&
        Objects.equals(this.minutesPlayedThisSession, destinyEntitiesCharactersDestinyCharacterComponent.minutesPlayedThisSession) &&
        Objects.equals(this.minutesPlayedTotal, destinyEntitiesCharactersDestinyCharacterComponent.minutesPlayedTotal) &&
        Objects.equals(this.percentToNextLevel, destinyEntitiesCharactersDestinyCharacterComponent.percentToNextLevel) &&
        Objects.equals(this.raceHash, destinyEntitiesCharactersDestinyCharacterComponent.raceHash) &&
        Objects.equals(this.raceType, destinyEntitiesCharactersDestinyCharacterComponent.raceType) &&
        Objects.equals(this.stats, destinyEntitiesCharactersDestinyCharacterComponent.stats) &&
        Objects.equals(this.titleRecordHash, destinyEntitiesCharactersDestinyCharacterComponent.titleRecordHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseCharacterLevel, characterId, classHash, classType, dateLastPlayed, emblemBackgroundPath, emblemColor, emblemHash, emblemPath, genderHash, genderType, levelProgression, light, membershipId, membershipType, minutesPlayedThisSession, minutesPlayedTotal, percentToNextLevel, raceHash, raceType, stats, titleRecordHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesCharactersDestinyCharacterComponent {\n");
    sb.append("    baseCharacterLevel: ").append(toIndentedString(baseCharacterLevel)).append("\n");
    sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
    sb.append("    classHash: ").append(toIndentedString(classHash)).append("\n");
    sb.append("    classType: ").append(toIndentedString(classType)).append("\n");
    sb.append("    dateLastPlayed: ").append(toIndentedString(dateLastPlayed)).append("\n");
    sb.append("    emblemBackgroundPath: ").append(toIndentedString(emblemBackgroundPath)).append("\n");
    sb.append("    emblemColor: ").append(toIndentedString(emblemColor)).append("\n");
    sb.append("    emblemHash: ").append(toIndentedString(emblemHash)).append("\n");
    sb.append("    emblemPath: ").append(toIndentedString(emblemPath)).append("\n");
    sb.append("    genderHash: ").append(toIndentedString(genderHash)).append("\n");
    sb.append("    genderType: ").append(toIndentedString(genderType)).append("\n");
    sb.append("    levelProgression: ").append(toIndentedString(levelProgression)).append("\n");
    sb.append("    light: ").append(toIndentedString(light)).append("\n");
    sb.append("    membershipId: ").append(toIndentedString(membershipId)).append("\n");
    sb.append("    membershipType: ").append(toIndentedString(membershipType)).append("\n");
    sb.append("    minutesPlayedThisSession: ").append(toIndentedString(minutesPlayedThisSession)).append("\n");
    sb.append("    minutesPlayedTotal: ").append(toIndentedString(minutesPlayedTotal)).append("\n");
    sb.append("    percentToNextLevel: ").append(toIndentedString(percentToNextLevel)).append("\n");
    sb.append("    raceHash: ").append(toIndentedString(raceHash)).append("\n");
    sb.append("    raceType: ").append(toIndentedString(raceType)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    titleRecordHash: ").append(toIndentedString(titleRecordHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseCharacterLevel");
    openapiFields.add("characterId");
    openapiFields.add("classHash");
    openapiFields.add("classType");
    openapiFields.add("dateLastPlayed");
    openapiFields.add("emblemBackgroundPath");
    openapiFields.add("emblemColor");
    openapiFields.add("emblemHash");
    openapiFields.add("emblemPath");
    openapiFields.add("genderHash");
    openapiFields.add("genderType");
    openapiFields.add("levelProgression");
    openapiFields.add("light");
    openapiFields.add("membershipId");
    openapiFields.add("membershipType");
    openapiFields.add("minutesPlayedThisSession");
    openapiFields.add("minutesPlayedTotal");
    openapiFields.add("percentToNextLevel");
    openapiFields.add("raceHash");
    openapiFields.add("raceType");
    openapiFields.add("stats");
    openapiFields.add("titleRecordHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyEntitiesCharactersDestinyCharacterComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyEntitiesCharactersDestinyCharacterComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyEntitiesCharactersDestinyCharacterComponent is not found in the empty JSON string", DestinyEntitiesCharactersDestinyCharacterComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyEntitiesCharactersDestinyCharacterComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyEntitiesCharactersDestinyCharacterComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("emblemBackgroundPath") != null && !jsonObj.get("emblemBackgroundPath").isJsonNull()) && !jsonObj.get("emblemBackgroundPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emblemBackgroundPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emblemBackgroundPath").toString()));
      }
      // validate the optional field `emblemColor`
      if (jsonObj.get("emblemColor") != null && !jsonObj.get("emblemColor").isJsonNull()) {
        DestinyMiscDestinyColor.validateJsonElement(jsonObj.get("emblemColor"));
      }
      if ((jsonObj.get("emblemPath") != null && !jsonObj.get("emblemPath").isJsonNull()) && !jsonObj.get("emblemPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emblemPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emblemPath").toString()));
      }
      // validate the optional field `levelProgression`
      if (jsonObj.get("levelProgression") != null && !jsonObj.get("levelProgression").isJsonNull()) {
        DestinyDestinyProgression.validateJsonElement(jsonObj.get("levelProgression"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyEntitiesCharactersDestinyCharacterComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyEntitiesCharactersDestinyCharacterComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyEntitiesCharactersDestinyCharacterComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyEntitiesCharactersDestinyCharacterComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyEntitiesCharactersDestinyCharacterComponent>() {
           @Override
           public void write(JsonWriter out, DestinyEntitiesCharactersDestinyCharacterComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyEntitiesCharactersDestinyCharacterComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyEntitiesCharactersDestinyCharacterComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyEntitiesCharactersDestinyCharacterComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyEntitiesCharactersDestinyCharacterComponent
   */
  public static DestinyEntitiesCharactersDestinyCharacterComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyEntitiesCharactersDestinyCharacterComponent.class);
  }

  /**
   * Convert an instance of DestinyEntitiesCharactersDestinyCharacterComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

