/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsDestinyProgressionRewardItemQuantity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyProgressionRewardItemQuantity {
  public static final String SERIALIZED_NAME_ACQUISITION_BEHAVIOR = "acquisitionBehavior";
  @SerializedName(SERIALIZED_NAME_ACQUISITION_BEHAVIOR)
  private Integer acquisitionBehavior;

  public static final String SERIALIZED_NAME_CLAIM_UNLOCK_DISPLAY_STRINGS = "claimUnlockDisplayStrings";
  @SerializedName(SERIALIZED_NAME_CLAIM_UNLOCK_DISPLAY_STRINGS)
  private List<String> claimUnlockDisplayStrings = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_CONDITIONAL_VISIBILITY = "hasConditionalVisibility";
  @SerializedName(SERIALIZED_NAME_HAS_CONDITIONAL_VISIBILITY)
  private Boolean hasConditionalVisibility;

  public static final String SERIALIZED_NAME_ITEM_HASH = "itemHash";
  @SerializedName(SERIALIZED_NAME_ITEM_HASH)
  private Integer itemHash;

  public static final String SERIALIZED_NAME_ITEM_INSTANCE_ID = "itemInstanceId";
  @SerializedName(SERIALIZED_NAME_ITEM_INSTANCE_ID)
  private Long itemInstanceId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_REWARDED_AT_PROGRESSION_LEVEL = "rewardedAtProgressionLevel";
  @SerializedName(SERIALIZED_NAME_REWARDED_AT_PROGRESSION_LEVEL)
  private Integer rewardedAtProgressionLevel;

  public static final String SERIALIZED_NAME_UI_DISPLAY_STYLE = "uiDisplayStyle";
  @SerializedName(SERIALIZED_NAME_UI_DISPLAY_STYLE)
  private String uiDisplayStyle;

  public DestinyDefinitionsDestinyProgressionRewardItemQuantity() {
  }

  public DestinyDefinitionsDestinyProgressionRewardItemQuantity acquisitionBehavior(Integer acquisitionBehavior) {
    this.acquisitionBehavior = acquisitionBehavior;
    return this;
  }

  /**
   * Get acquisitionBehavior
   * @return acquisitionBehavior
   */
  @javax.annotation.Nullable
  public Integer getAcquisitionBehavior() {
    return acquisitionBehavior;
  }

  public void setAcquisitionBehavior(Integer acquisitionBehavior) {
    this.acquisitionBehavior = acquisitionBehavior;
  }


  public DestinyDefinitionsDestinyProgressionRewardItemQuantity claimUnlockDisplayStrings(List<String> claimUnlockDisplayStrings) {
    this.claimUnlockDisplayStrings = claimUnlockDisplayStrings;
    return this;
  }

  public DestinyDefinitionsDestinyProgressionRewardItemQuantity addClaimUnlockDisplayStringsItem(String claimUnlockDisplayStringsItem) {
    if (this.claimUnlockDisplayStrings == null) {
      this.claimUnlockDisplayStrings = new ArrayList<>();
    }
    this.claimUnlockDisplayStrings.add(claimUnlockDisplayStringsItem);
    return this;
  }

  /**
   * Get claimUnlockDisplayStrings
   * @return claimUnlockDisplayStrings
   */
  @javax.annotation.Nullable
  public List<String> getClaimUnlockDisplayStrings() {
    return claimUnlockDisplayStrings;
  }

  public void setClaimUnlockDisplayStrings(List<String> claimUnlockDisplayStrings) {
    this.claimUnlockDisplayStrings = claimUnlockDisplayStrings;
  }


  public DestinyDefinitionsDestinyProgressionRewardItemQuantity hasConditionalVisibility(Boolean hasConditionalVisibility) {
    this.hasConditionalVisibility = hasConditionalVisibility;
    return this;
  }

  /**
   * Indicates that this item quantity may be conditionally shown or hidden, based on various sources of state. For example: server flags, account state, or character progress.
   * @return hasConditionalVisibility
   */
  @javax.annotation.Nullable
  public Boolean getHasConditionalVisibility() {
    return hasConditionalVisibility;
  }

  public void setHasConditionalVisibility(Boolean hasConditionalVisibility) {
    this.hasConditionalVisibility = hasConditionalVisibility;
  }


  public DestinyDefinitionsDestinyProgressionRewardItemQuantity itemHash(Integer itemHash) {
    this.itemHash = itemHash;
    return this;
  }

  /**
   * The hash identifier for the item in question. Use it to look up the item&#39;s DestinyInventoryItemDefinition.
   * @return itemHash
   */
  @javax.annotation.Nullable
  public Integer getItemHash() {
    return itemHash;
  }

  public void setItemHash(Integer itemHash) {
    this.itemHash = itemHash;
  }


  public DestinyDefinitionsDestinyProgressionRewardItemQuantity itemInstanceId(Long itemInstanceId) {
    this.itemInstanceId = itemInstanceId;
    return this;
  }

  /**
   * If this quantity is referring to a specific instance of an item, this will have the item&#39;s instance ID. Normally, this will be null.
   * @return itemInstanceId
   */
  @javax.annotation.Nullable
  public Long getItemInstanceId() {
    return itemInstanceId;
  }

  public void setItemInstanceId(Long itemInstanceId) {
    this.itemInstanceId = itemInstanceId;
  }


  public DestinyDefinitionsDestinyProgressionRewardItemQuantity quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public DestinyDefinitionsDestinyProgressionRewardItemQuantity rewardedAtProgressionLevel(Integer rewardedAtProgressionLevel) {
    this.rewardedAtProgressionLevel = rewardedAtProgressionLevel;
    return this;
  }

  /**
   * Get rewardedAtProgressionLevel
   * @return rewardedAtProgressionLevel
   */
  @javax.annotation.Nullable
  public Integer getRewardedAtProgressionLevel() {
    return rewardedAtProgressionLevel;
  }

  public void setRewardedAtProgressionLevel(Integer rewardedAtProgressionLevel) {
    this.rewardedAtProgressionLevel = rewardedAtProgressionLevel;
  }


  public DestinyDefinitionsDestinyProgressionRewardItemQuantity uiDisplayStyle(String uiDisplayStyle) {
    this.uiDisplayStyle = uiDisplayStyle;
    return this;
  }

  /**
   * Get uiDisplayStyle
   * @return uiDisplayStyle
   */
  @javax.annotation.Nullable
  public String getUiDisplayStyle() {
    return uiDisplayStyle;
  }

  public void setUiDisplayStyle(String uiDisplayStyle) {
    this.uiDisplayStyle = uiDisplayStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyProgressionRewardItemQuantity destinyDefinitionsDestinyProgressionRewardItemQuantity = (DestinyDefinitionsDestinyProgressionRewardItemQuantity) o;
    return Objects.equals(this.acquisitionBehavior, destinyDefinitionsDestinyProgressionRewardItemQuantity.acquisitionBehavior) &&
        Objects.equals(this.claimUnlockDisplayStrings, destinyDefinitionsDestinyProgressionRewardItemQuantity.claimUnlockDisplayStrings) &&
        Objects.equals(this.hasConditionalVisibility, destinyDefinitionsDestinyProgressionRewardItemQuantity.hasConditionalVisibility) &&
        Objects.equals(this.itemHash, destinyDefinitionsDestinyProgressionRewardItemQuantity.itemHash) &&
        Objects.equals(this.itemInstanceId, destinyDefinitionsDestinyProgressionRewardItemQuantity.itemInstanceId) &&
        Objects.equals(this.quantity, destinyDefinitionsDestinyProgressionRewardItemQuantity.quantity) &&
        Objects.equals(this.rewardedAtProgressionLevel, destinyDefinitionsDestinyProgressionRewardItemQuantity.rewardedAtProgressionLevel) &&
        Objects.equals(this.uiDisplayStyle, destinyDefinitionsDestinyProgressionRewardItemQuantity.uiDisplayStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquisitionBehavior, claimUnlockDisplayStrings, hasConditionalVisibility, itemHash, itemInstanceId, quantity, rewardedAtProgressionLevel, uiDisplayStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyProgressionRewardItemQuantity {\n");
    sb.append("    acquisitionBehavior: ").append(toIndentedString(acquisitionBehavior)).append("\n");
    sb.append("    claimUnlockDisplayStrings: ").append(toIndentedString(claimUnlockDisplayStrings)).append("\n");
    sb.append("    hasConditionalVisibility: ").append(toIndentedString(hasConditionalVisibility)).append("\n");
    sb.append("    itemHash: ").append(toIndentedString(itemHash)).append("\n");
    sb.append("    itemInstanceId: ").append(toIndentedString(itemInstanceId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    rewardedAtProgressionLevel: ").append(toIndentedString(rewardedAtProgressionLevel)).append("\n");
    sb.append("    uiDisplayStyle: ").append(toIndentedString(uiDisplayStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquisitionBehavior");
    openapiFields.add("claimUnlockDisplayStrings");
    openapiFields.add("hasConditionalVisibility");
    openapiFields.add("itemHash");
    openapiFields.add("itemInstanceId");
    openapiFields.add("quantity");
    openapiFields.add("rewardedAtProgressionLevel");
    openapiFields.add("uiDisplayStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyProgressionRewardItemQuantity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyProgressionRewardItemQuantity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyProgressionRewardItemQuantity is not found in the empty JSON string", DestinyDefinitionsDestinyProgressionRewardItemQuantity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyProgressionRewardItemQuantity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyProgressionRewardItemQuantity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("claimUnlockDisplayStrings") != null && !jsonObj.get("claimUnlockDisplayStrings").isJsonNull() && !jsonObj.get("claimUnlockDisplayStrings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimUnlockDisplayStrings` to be an array in the JSON string but got `%s`", jsonObj.get("claimUnlockDisplayStrings").toString()));
      }
      if ((jsonObj.get("uiDisplayStyle") != null && !jsonObj.get("uiDisplayStyle").isJsonNull()) && !jsonObj.get("uiDisplayStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uiDisplayStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uiDisplayStyle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyProgressionRewardItemQuantity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyProgressionRewardItemQuantity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyProgressionRewardItemQuantity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyProgressionRewardItemQuantity.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyProgressionRewardItemQuantity>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyProgressionRewardItemQuantity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyProgressionRewardItemQuantity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyProgressionRewardItemQuantity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyProgressionRewardItemQuantity
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyProgressionRewardItemQuantity
   */
  public static DestinyDefinitionsDestinyProgressionRewardItemQuantity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyProgressionRewardItemQuantity.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyProgressionRewardItemQuantity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

