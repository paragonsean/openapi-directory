/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A specific \&quot;spot\&quot; referred to by a location. Only one of these can be active at a time for a given Location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyLocationReleaseDefinition {
  public static final String SERIALIZED_NAME_ACTIVITY_BUBBLE_NAME = "activityBubbleName";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_BUBBLE_NAME)
  private Integer activityBubbleName;

  public static final String SERIALIZED_NAME_ACTIVITY_GRAPH_HASH = "activityGraphHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_GRAPH_HASH)
  private Integer activityGraphHash;

  public static final String SERIALIZED_NAME_ACTIVITY_GRAPH_NODE_HASH = "activityGraphNodeHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_GRAPH_NODE_HASH)
  private Integer activityGraphNodeHash;

  public static final String SERIALIZED_NAME_ACTIVITY_HASH = "activityHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_HASH)
  private Integer activityHash;

  public static final String SERIALIZED_NAME_ACTIVITY_PATH_BUNDLE = "activityPathBundle";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_PATH_BUNDLE)
  private Integer activityPathBundle;

  public static final String SERIALIZED_NAME_ACTIVITY_PATH_DESTINATION = "activityPathDestination";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_PATH_DESTINATION)
  private Integer activityPathDestination;

  public static final String SERIALIZED_NAME_DESTINATION_HASH = "destinationHash";
  @SerializedName(SERIALIZED_NAME_DESTINATION_HASH)
  private Integer destinationHash;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_LARGE_TRANSPARENT_ICON = "largeTransparentIcon";
  @SerializedName(SERIALIZED_NAME_LARGE_TRANSPARENT_ICON)
  private String largeTransparentIcon;

  public static final String SERIALIZED_NAME_MAP_ICON = "mapIcon";
  @SerializedName(SERIALIZED_NAME_MAP_ICON)
  private String mapIcon;

  public static final String SERIALIZED_NAME_NAV_POINT_TYPE = "navPointType";
  @SerializedName(SERIALIZED_NAME_NAV_POINT_TYPE)
  private Integer navPointType;

  public static final String SERIALIZED_NAME_SMALL_TRANSPARENT_ICON = "smallTransparentIcon";
  @SerializedName(SERIALIZED_NAME_SMALL_TRANSPARENT_ICON)
  private String smallTransparentIcon;

  public static final String SERIALIZED_NAME_SPAWN_POINT = "spawnPoint";
  @SerializedName(SERIALIZED_NAME_SPAWN_POINT)
  private Integer spawnPoint;

  public static final String SERIALIZED_NAME_WORLD_POSITION = "worldPosition";
  @SerializedName(SERIALIZED_NAME_WORLD_POSITION)
  private List<Integer> worldPosition = new ArrayList<>();

  public DestinyDefinitionsDestinyLocationReleaseDefinition() {
  }

  public DestinyDefinitionsDestinyLocationReleaseDefinition activityBubbleName(Integer activityBubbleName) {
    this.activityBubbleName = activityBubbleName;
    return this;
  }

  /**
   * The Activity Bubble within the Destination. Look this up in the DestinyDestinationDefinition&#39;s bubbles and bubbleSettings properties.
   * @return activityBubbleName
   */
  @javax.annotation.Nullable
  public Integer getActivityBubbleName() {
    return activityBubbleName;
  }

  public void setActivityBubbleName(Integer activityBubbleName) {
    this.activityBubbleName = activityBubbleName;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition activityGraphHash(Integer activityGraphHash) {
    this.activityGraphHash = activityGraphHash;
    return this;
  }

  /**
   * The Activity Graph being pointed to by this location.
   * @return activityGraphHash
   */
  @javax.annotation.Nullable
  public Integer getActivityGraphHash() {
    return activityGraphHash;
  }

  public void setActivityGraphHash(Integer activityGraphHash) {
    this.activityGraphHash = activityGraphHash;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition activityGraphNodeHash(Integer activityGraphNodeHash) {
    this.activityGraphNodeHash = activityGraphNodeHash;
    return this;
  }

  /**
   * The Activity Graph Node being pointed to by this location. (Remember that Activity Graph Node hashes are only unique within an Activity Graph: so use the combination to find the node being spoken of)
   * @return activityGraphNodeHash
   */
  @javax.annotation.Nullable
  public Integer getActivityGraphNodeHash() {
    return activityGraphNodeHash;
  }

  public void setActivityGraphNodeHash(Integer activityGraphNodeHash) {
    this.activityGraphNodeHash = activityGraphNodeHash;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition activityHash(Integer activityHash) {
    this.activityHash = activityHash;
    return this;
  }

  /**
   * The Activity being pointed to by this location.
   * @return activityHash
   */
  @javax.annotation.Nullable
  public Integer getActivityHash() {
    return activityHash;
  }

  public void setActivityHash(Integer activityHash) {
    this.activityHash = activityHash;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition activityPathBundle(Integer activityPathBundle) {
    this.activityPathBundle = activityPathBundle;
    return this;
  }

  /**
   * If we had map information, this would tell us something cool about the path this location wants you to take. I wish we had map information.
   * @return activityPathBundle
   */
  @javax.annotation.Nullable
  public Integer getActivityPathBundle() {
    return activityPathBundle;
  }

  public void setActivityPathBundle(Integer activityPathBundle) {
    this.activityPathBundle = activityPathBundle;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition activityPathDestination(Integer activityPathDestination) {
    this.activityPathDestination = activityPathDestination;
    return this;
  }

  /**
   * If we had map information, this would tell us about path information related to destination on the map. Sad. Maybe you can do something cool with it. Go to town man.
   * @return activityPathDestination
   */
  @javax.annotation.Nullable
  public Integer getActivityPathDestination() {
    return activityPathDestination;
  }

  public void setActivityPathDestination(Integer activityPathDestination) {
    this.activityPathDestination = activityPathDestination;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition destinationHash(Integer destinationHash) {
    this.destinationHash = destinationHash;
    return this;
  }

  /**
   * The Destination being pointed to by this location.
   * @return destinationHash
   */
  @javax.annotation.Nullable
  public Integer getDestinationHash() {
    return destinationHash;
  }

  public void setDestinationHash(Integer destinationHash) {
    this.destinationHash = destinationHash;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Sadly, these don&#39;t appear to be populated anymore (ever?)
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition largeTransparentIcon(String largeTransparentIcon) {
    this.largeTransparentIcon = largeTransparentIcon;
    return this;
  }

  /**
   * Get largeTransparentIcon
   * @return largeTransparentIcon
   */
  @javax.annotation.Nullable
  public String getLargeTransparentIcon() {
    return largeTransparentIcon;
  }

  public void setLargeTransparentIcon(String largeTransparentIcon) {
    this.largeTransparentIcon = largeTransparentIcon;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition mapIcon(String mapIcon) {
    this.mapIcon = mapIcon;
    return this;
  }

  /**
   * Get mapIcon
   * @return mapIcon
   */
  @javax.annotation.Nullable
  public String getMapIcon() {
    return mapIcon;
  }

  public void setMapIcon(String mapIcon) {
    this.mapIcon = mapIcon;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition navPointType(Integer navPointType) {
    this.navPointType = navPointType;
    return this;
  }

  /**
   * The type of Nav Point that this represents. See the enumeration for more info.
   * @return navPointType
   */
  @javax.annotation.Nullable
  public Integer getNavPointType() {
    return navPointType;
  }

  public void setNavPointType(Integer navPointType) {
    this.navPointType = navPointType;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition smallTransparentIcon(String smallTransparentIcon) {
    this.smallTransparentIcon = smallTransparentIcon;
    return this;
  }

  /**
   * Get smallTransparentIcon
   * @return smallTransparentIcon
   */
  @javax.annotation.Nullable
  public String getSmallTransparentIcon() {
    return smallTransparentIcon;
  }

  public void setSmallTransparentIcon(String smallTransparentIcon) {
    this.smallTransparentIcon = smallTransparentIcon;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition spawnPoint(Integer spawnPoint) {
    this.spawnPoint = spawnPoint;
    return this;
  }

  /**
   * If we had map information, this spawnPoint would be interesting. But sadly, we don&#39;t have that info.
   * @return spawnPoint
   */
  @javax.annotation.Nullable
  public Integer getSpawnPoint() {
    return spawnPoint;
  }

  public void setSpawnPoint(Integer spawnPoint) {
    this.spawnPoint = spawnPoint;
  }


  public DestinyDefinitionsDestinyLocationReleaseDefinition worldPosition(List<Integer> worldPosition) {
    this.worldPosition = worldPosition;
    return this;
  }

  public DestinyDefinitionsDestinyLocationReleaseDefinition addWorldPositionItem(Integer worldPositionItem) {
    if (this.worldPosition == null) {
      this.worldPosition = new ArrayList<>();
    }
    this.worldPosition.add(worldPositionItem);
    return this;
  }

  /**
   * Looks like it should be the position on the map, but sadly it does not look populated... yet?
   * @return worldPosition
   */
  @javax.annotation.Nullable
  public List<Integer> getWorldPosition() {
    return worldPosition;
  }

  public void setWorldPosition(List<Integer> worldPosition) {
    this.worldPosition = worldPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyLocationReleaseDefinition destinyDefinitionsDestinyLocationReleaseDefinition = (DestinyDefinitionsDestinyLocationReleaseDefinition) o;
    return Objects.equals(this.activityBubbleName, destinyDefinitionsDestinyLocationReleaseDefinition.activityBubbleName) &&
        Objects.equals(this.activityGraphHash, destinyDefinitionsDestinyLocationReleaseDefinition.activityGraphHash) &&
        Objects.equals(this.activityGraphNodeHash, destinyDefinitionsDestinyLocationReleaseDefinition.activityGraphNodeHash) &&
        Objects.equals(this.activityHash, destinyDefinitionsDestinyLocationReleaseDefinition.activityHash) &&
        Objects.equals(this.activityPathBundle, destinyDefinitionsDestinyLocationReleaseDefinition.activityPathBundle) &&
        Objects.equals(this.activityPathDestination, destinyDefinitionsDestinyLocationReleaseDefinition.activityPathDestination) &&
        Objects.equals(this.destinationHash, destinyDefinitionsDestinyLocationReleaseDefinition.destinationHash) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinyLocationReleaseDefinition.displayProperties) &&
        Objects.equals(this.largeTransparentIcon, destinyDefinitionsDestinyLocationReleaseDefinition.largeTransparentIcon) &&
        Objects.equals(this.mapIcon, destinyDefinitionsDestinyLocationReleaseDefinition.mapIcon) &&
        Objects.equals(this.navPointType, destinyDefinitionsDestinyLocationReleaseDefinition.navPointType) &&
        Objects.equals(this.smallTransparentIcon, destinyDefinitionsDestinyLocationReleaseDefinition.smallTransparentIcon) &&
        Objects.equals(this.spawnPoint, destinyDefinitionsDestinyLocationReleaseDefinition.spawnPoint) &&
        Objects.equals(this.worldPosition, destinyDefinitionsDestinyLocationReleaseDefinition.worldPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityBubbleName, activityGraphHash, activityGraphNodeHash, activityHash, activityPathBundle, activityPathDestination, destinationHash, displayProperties, largeTransparentIcon, mapIcon, navPointType, smallTransparentIcon, spawnPoint, worldPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyLocationReleaseDefinition {\n");
    sb.append("    activityBubbleName: ").append(toIndentedString(activityBubbleName)).append("\n");
    sb.append("    activityGraphHash: ").append(toIndentedString(activityGraphHash)).append("\n");
    sb.append("    activityGraphNodeHash: ").append(toIndentedString(activityGraphNodeHash)).append("\n");
    sb.append("    activityHash: ").append(toIndentedString(activityHash)).append("\n");
    sb.append("    activityPathBundle: ").append(toIndentedString(activityPathBundle)).append("\n");
    sb.append("    activityPathDestination: ").append(toIndentedString(activityPathDestination)).append("\n");
    sb.append("    destinationHash: ").append(toIndentedString(destinationHash)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    largeTransparentIcon: ").append(toIndentedString(largeTransparentIcon)).append("\n");
    sb.append("    mapIcon: ").append(toIndentedString(mapIcon)).append("\n");
    sb.append("    navPointType: ").append(toIndentedString(navPointType)).append("\n");
    sb.append("    smallTransparentIcon: ").append(toIndentedString(smallTransparentIcon)).append("\n");
    sb.append("    spawnPoint: ").append(toIndentedString(spawnPoint)).append("\n");
    sb.append("    worldPosition: ").append(toIndentedString(worldPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityBubbleName");
    openapiFields.add("activityGraphHash");
    openapiFields.add("activityGraphNodeHash");
    openapiFields.add("activityHash");
    openapiFields.add("activityPathBundle");
    openapiFields.add("activityPathDestination");
    openapiFields.add("destinationHash");
    openapiFields.add("displayProperties");
    openapiFields.add("largeTransparentIcon");
    openapiFields.add("mapIcon");
    openapiFields.add("navPointType");
    openapiFields.add("smallTransparentIcon");
    openapiFields.add("spawnPoint");
    openapiFields.add("worldPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyLocationReleaseDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyLocationReleaseDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyLocationReleaseDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyLocationReleaseDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyLocationReleaseDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyLocationReleaseDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      if ((jsonObj.get("largeTransparentIcon") != null && !jsonObj.get("largeTransparentIcon").isJsonNull()) && !jsonObj.get("largeTransparentIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `largeTransparentIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("largeTransparentIcon").toString()));
      }
      if ((jsonObj.get("mapIcon") != null && !jsonObj.get("mapIcon").isJsonNull()) && !jsonObj.get("mapIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapIcon").toString()));
      }
      if ((jsonObj.get("smallTransparentIcon") != null && !jsonObj.get("smallTransparentIcon").isJsonNull()) && !jsonObj.get("smallTransparentIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallTransparentIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallTransparentIcon").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("worldPosition") != null && !jsonObj.get("worldPosition").isJsonNull() && !jsonObj.get("worldPosition").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `worldPosition` to be an array in the JSON string but got `%s`", jsonObj.get("worldPosition").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyLocationReleaseDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyLocationReleaseDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyLocationReleaseDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyLocationReleaseDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyLocationReleaseDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyLocationReleaseDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyLocationReleaseDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyLocationReleaseDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyLocationReleaseDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyLocationReleaseDefinition
   */
  public static DestinyDefinitionsDestinyLocationReleaseDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyLocationReleaseDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyLocationReleaseDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

