/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If you are playing in an activity, this is some information about it.  Note that we cannot guarantee any of this resembles what ends up in the PGCR in any way. They are sourced by two entirely separate systems with their own logic, and the one we source this data from should be considered non-authoritative in comparison.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_HIGHEST_OPPOSING_FACTION_SCORE = "highestOpposingFactionScore";
  @SerializedName(SERIALIZED_NAME_HIGHEST_OPPOSING_FACTION_SCORE)
  private Float highestOpposingFactionScore;

  public static final String SERIALIZED_NAME_NUMBER_OF_OPPONENTS = "numberOfOpponents";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_OPPONENTS)
  private Integer numberOfOpponents;

  public static final String SERIALIZED_NAME_NUMBER_OF_PLAYERS = "numberOfPlayers";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PLAYERS)
  private Integer numberOfPlayers;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity() {
  }

  public DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * If you&#39;re still in it but it \&quot;ended\&quot; (like when folks are dancing around the loot after they beat a boss), this is when the activity ended.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity highestOpposingFactionScore(Float highestOpposingFactionScore) {
    this.highestOpposingFactionScore = highestOpposingFactionScore;
    return this;
  }

  /**
   * If you have human opponents, this is the highest opposing team&#39;s score.
   * @return highestOpposingFactionScore
   */
  @javax.annotation.Nullable
  public Float getHighestOpposingFactionScore() {
    return highestOpposingFactionScore;
  }

  public void setHighestOpposingFactionScore(Float highestOpposingFactionScore) {
    this.highestOpposingFactionScore = highestOpposingFactionScore;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity numberOfOpponents(Integer numberOfOpponents) {
    this.numberOfOpponents = numberOfOpponents;
    return this;
  }

  /**
   * This is how many human or poorly crafted aimbot opponents you have.
   * @return numberOfOpponents
   */
  @javax.annotation.Nullable
  public Integer getNumberOfOpponents() {
    return numberOfOpponents;
  }

  public void setNumberOfOpponents(Integer numberOfOpponents) {
    this.numberOfOpponents = numberOfOpponents;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity numberOfPlayers(Integer numberOfPlayers) {
    this.numberOfPlayers = numberOfPlayers;
    return this;
  }

  /**
   * This is how many human or poorly crafted aimbots are on your team.
   * @return numberOfPlayers
   */
  @javax.annotation.Nullable
  public Integer getNumberOfPlayers() {
    return numberOfPlayers;
  }

  public void setNumberOfPlayers(Integer numberOfPlayers) {
    this.numberOfPlayers = numberOfPlayers;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * This is what our non-authoritative source thought the score was.
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * When the activity started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity destinyComponentsProfilesDestinyProfileTransitoryCurrentActivity = (DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity) o;
    return Objects.equals(this.endTime, destinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.endTime) &&
        Objects.equals(this.highestOpposingFactionScore, destinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.highestOpposingFactionScore) &&
        Objects.equals(this.numberOfOpponents, destinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.numberOfOpponents) &&
        Objects.equals(this.numberOfPlayers, destinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.numberOfPlayers) &&
        Objects.equals(this.score, destinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.score) &&
        Objects.equals(this.startTime, destinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, highestOpposingFactionScore, numberOfOpponents, numberOfPlayers, score, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    highestOpposingFactionScore: ").append(toIndentedString(highestOpposingFactionScore)).append("\n");
    sb.append("    numberOfOpponents: ").append(toIndentedString(numberOfOpponents)).append("\n");
    sb.append("    numberOfPlayers: ").append(toIndentedString(numberOfPlayers)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("highestOpposingFactionScore");
    openapiFields.add("numberOfOpponents");
    openapiFields.add("numberOfPlayers");
    openapiFields.add("score");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity is not found in the empty JSON string", DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity>() {
           @Override
           public void write(JsonWriter out, DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity
   * @throws IOException if the JSON string is invalid with respect to DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity
   */
  public static DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity.class);
  }

  /**
   * Convert an instance of DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

