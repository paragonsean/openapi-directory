/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition for an \&quot;inventory flyout\&quot;: a UI screen where we show you part of an otherwise hidden vendor inventory: like the Vault inventory buckets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition {
  public static final String SERIALIZED_NAME_BUCKETS = "buckets";
  @SerializedName(SERIALIZED_NAME_BUCKETS)
  private List<DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition> buckets = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_EQUIPMENT_SLOT_HASH = "equipmentSlotHash";
  @SerializedName(SERIALIZED_NAME_EQUIPMENT_SLOT_HASH)
  private Integer equipmentSlotHash;

  public static final String SERIALIZED_NAME_FLYOUT_ID = "flyoutId";
  @SerializedName(SERIALIZED_NAME_FLYOUT_ID)
  private Integer flyoutId;

  public static final String SERIALIZED_NAME_LOCKED_DESCRIPTION = "lockedDescription";
  @SerializedName(SERIALIZED_NAME_LOCKED_DESCRIPTION)
  private String lockedDescription;

  public static final String SERIALIZED_NAME_SUPPRESS_NEWNESS = "suppressNewness";
  @SerializedName(SERIALIZED_NAME_SUPPRESS_NEWNESS)
  private Boolean suppressNewness;

  public DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition() {
  }

  public DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition buckets(List<DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition> buckets) {
    this.buckets = buckets;
    return this;
  }

  public DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition addBucketsItem(DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition bucketsItem) {
    if (this.buckets == null) {
      this.buckets = new ArrayList<>();
    }
    this.buckets.add(bucketsItem);
    return this;
  }

  /**
   * A list of inventory buckets and other metadata to show on the screen.
   * @return buckets
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition> getBuckets() {
    return buckets;
  }

  public void setBuckets(List<DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition> buckets) {
    this.buckets = buckets;
  }


  public DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * The title and other common properties of the flyout.
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition equipmentSlotHash(Integer equipmentSlotHash) {
    this.equipmentSlotHash = equipmentSlotHash;
    return this;
  }

  /**
   * If this flyout is meant to show you the contents of the player&#39;s equipment slot, this is the slot to show.
   * @return equipmentSlotHash
   */
  @javax.annotation.Nullable
  public Integer getEquipmentSlotHash() {
    return equipmentSlotHash;
  }

  public void setEquipmentSlotHash(Integer equipmentSlotHash) {
    this.equipmentSlotHash = equipmentSlotHash;
  }


  public DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition flyoutId(Integer flyoutId) {
    this.flyoutId = flyoutId;
    return this;
  }

  /**
   * An identifier for the flyout, in case anything else needs to refer to them.
   * @return flyoutId
   */
  @javax.annotation.Nullable
  public Integer getFlyoutId() {
    return flyoutId;
  }

  public void setFlyoutId(Integer flyoutId) {
    this.flyoutId = flyoutId;
  }


  public DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition lockedDescription(String lockedDescription) {
    this.lockedDescription = lockedDescription;
    return this;
  }

  /**
   * If the flyout is locked, this is the reason why.
   * @return lockedDescription
   */
  @javax.annotation.Nullable
  public String getLockedDescription() {
    return lockedDescription;
  }

  public void setLockedDescription(String lockedDescription) {
    this.lockedDescription = lockedDescription;
  }


  public DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition suppressNewness(Boolean suppressNewness) {
    this.suppressNewness = suppressNewness;
    return this;
  }

  /**
   * If this is true, don&#39;t show any of the glistening \&quot;this is a new item\&quot; UI elements, like we show on the inventory items themselves in in-game UI.
   * @return suppressNewness
   */
  @javax.annotation.Nullable
  public Boolean getSuppressNewness() {
    return suppressNewness;
  }

  public void setSuppressNewness(Boolean suppressNewness) {
    this.suppressNewness = suppressNewness;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition destinyDefinitionsDestinyVendorInventoryFlyoutDefinition = (DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition) o;
    return Objects.equals(this.buckets, destinyDefinitionsDestinyVendorInventoryFlyoutDefinition.buckets) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinyVendorInventoryFlyoutDefinition.displayProperties) &&
        Objects.equals(this.equipmentSlotHash, destinyDefinitionsDestinyVendorInventoryFlyoutDefinition.equipmentSlotHash) &&
        Objects.equals(this.flyoutId, destinyDefinitionsDestinyVendorInventoryFlyoutDefinition.flyoutId) &&
        Objects.equals(this.lockedDescription, destinyDefinitionsDestinyVendorInventoryFlyoutDefinition.lockedDescription) &&
        Objects.equals(this.suppressNewness, destinyDefinitionsDestinyVendorInventoryFlyoutDefinition.suppressNewness);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buckets, displayProperties, equipmentSlotHash, flyoutId, lockedDescription, suppressNewness);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition {\n");
    sb.append("    buckets: ").append(toIndentedString(buckets)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    equipmentSlotHash: ").append(toIndentedString(equipmentSlotHash)).append("\n");
    sb.append("    flyoutId: ").append(toIndentedString(flyoutId)).append("\n");
    sb.append("    lockedDescription: ").append(toIndentedString(lockedDescription)).append("\n");
    sb.append("    suppressNewness: ").append(toIndentedString(suppressNewness)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buckets");
    openapiFields.add("displayProperties");
    openapiFields.add("equipmentSlotHash");
    openapiFields.add("flyoutId");
    openapiFields.add("lockedDescription");
    openapiFields.add("suppressNewness");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("buckets") != null && !jsonObj.get("buckets").isJsonNull()) {
        JsonArray jsonArraybuckets = jsonObj.getAsJsonArray("buckets");
        if (jsonArraybuckets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("buckets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `buckets` to be an array in the JSON string but got `%s`", jsonObj.get("buckets").toString()));
          }

          // validate the optional field `buckets` (array)
          for (int i = 0; i < jsonArraybuckets.size(); i++) {
            DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition.validateJsonElement(jsonArraybuckets.get(i));
          };
        }
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      if ((jsonObj.get("lockedDescription") != null && !jsonObj.get("lockedDescription").isJsonNull()) && !jsonObj.get("lockedDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockedDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockedDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition
   */
  public static DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

