/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GroupsV2GroupV2ClanInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A small infocard of group information, usually used for when a list of groups are returned
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupsV2GroupV2Card {
  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private String about;

  public static final String SERIALIZED_NAME_AVATAR_PATH = "avatarPath";
  @SerializedName(SERIALIZED_NAME_AVATAR_PATH)
  private String avatarPath;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private Integer capabilities;

  public static final String SERIALIZED_NAME_CLAN_INFO = "clanInfo";
  @SerializedName(SERIALIZED_NAME_CLAN_INFO)
  private GroupsV2GroupV2ClanInfo clanInfo;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Long groupId;

  public static final String SERIALIZED_NAME_GROUP_TYPE = "groupType";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE)
  private Integer groupType;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_MEMBER_COUNT = "memberCount";
  @SerializedName(SERIALIZED_NAME_MEMBER_COUNT)
  private Integer memberCount;

  public static final String SERIALIZED_NAME_MEMBERSHIP_OPTION = "membershipOption";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_OPTION)
  private Integer membershipOption;

  public static final String SERIALIZED_NAME_MOTTO = "motto";
  @SerializedName(SERIALIZED_NAME_MOTTO)
  private String motto;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private String theme;

  public GroupsV2GroupV2Card() {
  }

  public GroupsV2GroupV2Card about(String about) {
    this.about = about;
    return this;
  }

  /**
   * Get about
   * @return about
   */
  @javax.annotation.Nullable
  public String getAbout() {
    return about;
  }

  public void setAbout(String about) {
    this.about = about;
  }


  public GroupsV2GroupV2Card avatarPath(String avatarPath) {
    this.avatarPath = avatarPath;
    return this;
  }

  /**
   * Get avatarPath
   * @return avatarPath
   */
  @javax.annotation.Nullable
  public String getAvatarPath() {
    return avatarPath;
  }

  public void setAvatarPath(String avatarPath) {
    this.avatarPath = avatarPath;
  }


  public GroupsV2GroupV2Card capabilities(Integer capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public Integer getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(Integer capabilities) {
    this.capabilities = capabilities;
  }


  public GroupsV2GroupV2Card clanInfo(GroupsV2GroupV2ClanInfo clanInfo) {
    this.clanInfo = clanInfo;
    return this;
  }

  /**
   * Get clanInfo
   * @return clanInfo
   */
  @javax.annotation.Nullable
  public GroupsV2GroupV2ClanInfo getClanInfo() {
    return clanInfo;
  }

  public void setClanInfo(GroupsV2GroupV2ClanInfo clanInfo) {
    this.clanInfo = clanInfo;
  }


  public GroupsV2GroupV2Card creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public GroupsV2GroupV2Card groupId(Long groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Get groupId
   * @return groupId
   */
  @javax.annotation.Nullable
  public Long getGroupId() {
    return groupId;
  }

  public void setGroupId(Long groupId) {
    this.groupId = groupId;
  }


  public GroupsV2GroupV2Card groupType(Integer groupType) {
    this.groupType = groupType;
    return this;
  }

  /**
   * Get groupType
   * @return groupType
   */
  @javax.annotation.Nullable
  public Integer getGroupType() {
    return groupType;
  }

  public void setGroupType(Integer groupType) {
    this.groupType = groupType;
  }


  public GroupsV2GroupV2Card locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public GroupsV2GroupV2Card memberCount(Integer memberCount) {
    this.memberCount = memberCount;
    return this;
  }

  /**
   * Get memberCount
   * @return memberCount
   */
  @javax.annotation.Nullable
  public Integer getMemberCount() {
    return memberCount;
  }

  public void setMemberCount(Integer memberCount) {
    this.memberCount = memberCount;
  }


  public GroupsV2GroupV2Card membershipOption(Integer membershipOption) {
    this.membershipOption = membershipOption;
    return this;
  }

  /**
   * Get membershipOption
   * @return membershipOption
   */
  @javax.annotation.Nullable
  public Integer getMembershipOption() {
    return membershipOption;
  }

  public void setMembershipOption(Integer membershipOption) {
    this.membershipOption = membershipOption;
  }


  public GroupsV2GroupV2Card motto(String motto) {
    this.motto = motto;
    return this;
  }

  /**
   * Get motto
   * @return motto
   */
  @javax.annotation.Nullable
  public String getMotto() {
    return motto;
  }

  public void setMotto(String motto) {
    this.motto = motto;
  }


  public GroupsV2GroupV2Card name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GroupsV2GroupV2Card theme(String theme) {
    this.theme = theme;
    return this;
  }

  /**
   * Get theme
   * @return theme
   */
  @javax.annotation.Nullable
  public String getTheme() {
    return theme;
  }

  public void setTheme(String theme) {
    this.theme = theme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupsV2GroupV2Card groupsV2GroupV2Card = (GroupsV2GroupV2Card) o;
    return Objects.equals(this.about, groupsV2GroupV2Card.about) &&
        Objects.equals(this.avatarPath, groupsV2GroupV2Card.avatarPath) &&
        Objects.equals(this.capabilities, groupsV2GroupV2Card.capabilities) &&
        Objects.equals(this.clanInfo, groupsV2GroupV2Card.clanInfo) &&
        Objects.equals(this.creationDate, groupsV2GroupV2Card.creationDate) &&
        Objects.equals(this.groupId, groupsV2GroupV2Card.groupId) &&
        Objects.equals(this.groupType, groupsV2GroupV2Card.groupType) &&
        Objects.equals(this.locale, groupsV2GroupV2Card.locale) &&
        Objects.equals(this.memberCount, groupsV2GroupV2Card.memberCount) &&
        Objects.equals(this.membershipOption, groupsV2GroupV2Card.membershipOption) &&
        Objects.equals(this.motto, groupsV2GroupV2Card.motto) &&
        Objects.equals(this.name, groupsV2GroupV2Card.name) &&
        Objects.equals(this.theme, groupsV2GroupV2Card.theme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, avatarPath, capabilities, clanInfo, creationDate, groupId, groupType, locale, memberCount, membershipOption, motto, name, theme);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupsV2GroupV2Card {\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    avatarPath: ").append(toIndentedString(avatarPath)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    clanInfo: ").append(toIndentedString(clanInfo)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
    sb.append("    membershipOption: ").append(toIndentedString(membershipOption)).append("\n");
    sb.append("    motto: ").append(toIndentedString(motto)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("about");
    openapiFields.add("avatarPath");
    openapiFields.add("capabilities");
    openapiFields.add("clanInfo");
    openapiFields.add("creationDate");
    openapiFields.add("groupId");
    openapiFields.add("groupType");
    openapiFields.add("locale");
    openapiFields.add("memberCount");
    openapiFields.add("membershipOption");
    openapiFields.add("motto");
    openapiFields.add("name");
    openapiFields.add("theme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupsV2GroupV2Card
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupsV2GroupV2Card.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupsV2GroupV2Card is not found in the empty JSON string", GroupsV2GroupV2Card.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupsV2GroupV2Card.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupsV2GroupV2Card` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) && !jsonObj.get("about").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `about` to be a primitive type in the JSON string but got `%s`", jsonObj.get("about").toString()));
      }
      if ((jsonObj.get("avatarPath") != null && !jsonObj.get("avatarPath").isJsonNull()) && !jsonObj.get("avatarPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatarPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatarPath").toString()));
      }
      // validate the optional field `clanInfo`
      if (jsonObj.get("clanInfo") != null && !jsonObj.get("clanInfo").isJsonNull()) {
        GroupsV2GroupV2ClanInfo.validateJsonElement(jsonObj.get("clanInfo"));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("motto") != null && !jsonObj.get("motto").isJsonNull()) && !jsonObj.get("motto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `motto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("motto").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) && !jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupsV2GroupV2Card.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupsV2GroupV2Card' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupsV2GroupV2Card> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupsV2GroupV2Card.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupsV2GroupV2Card>() {
           @Override
           public void write(JsonWriter out, GroupsV2GroupV2Card value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupsV2GroupV2Card read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupsV2GroupV2Card given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupsV2GroupV2Card
   * @throws IOException if the JSON string is invalid with respect to GroupsV2GroupV2Card
   */
  public static GroupsV2GroupV2Card fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupsV2GroupV2Card.class);
  }

  /**
   * Convert an instance of GroupsV2GroupV2Card to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

