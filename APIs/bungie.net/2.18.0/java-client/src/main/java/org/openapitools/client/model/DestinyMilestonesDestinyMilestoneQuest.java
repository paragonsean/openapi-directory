/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyChallengesDestinyChallengeStatus;
import org.openapitools.client.model.DestinyMilestonesDestinyMilestoneActivity;
import org.openapitools.client.model.DestinyQuestsDestinyQuestStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If a Milestone has one or more Quests, this will contain the live information for the character&#39;s status with one of those quests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyMilestonesDestinyMilestoneQuest {
  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private DestinyMilestonesDestinyMilestoneActivity activity;

  public static final String SERIALIZED_NAME_CHALLENGES = "challenges";
  @SerializedName(SERIALIZED_NAME_CHALLENGES)
  private List<DestinyChallengesDestinyChallengeStatus> challenges = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUEST_ITEM_HASH = "questItemHash";
  @SerializedName(SERIALIZED_NAME_QUEST_ITEM_HASH)
  private Integer questItemHash;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DestinyQuestsDestinyQuestStatus status;

  public DestinyMilestonesDestinyMilestoneQuest() {
  }

  public DestinyMilestonesDestinyMilestoneQuest activity(DestinyMilestonesDestinyMilestoneActivity activity) {
    this.activity = activity;
    return this;
  }

  /**
   * *IF* the Milestone has an active Activity that can give you greater details about what you need to do, it will be returned here. Remember to associate this with the DestinyMilestoneDefinition&#39;s activities to get details about the activity, including what specific quest it is related to if you have multiple quests to choose from.
   * @return activity
   */
  @javax.annotation.Nullable
  public DestinyMilestonesDestinyMilestoneActivity getActivity() {
    return activity;
  }

  public void setActivity(DestinyMilestonesDestinyMilestoneActivity activity) {
    this.activity = activity;
  }


  public DestinyMilestonesDestinyMilestoneQuest challenges(List<DestinyChallengesDestinyChallengeStatus> challenges) {
    this.challenges = challenges;
    return this;
  }

  public DestinyMilestonesDestinyMilestoneQuest addChallengesItem(DestinyChallengesDestinyChallengeStatus challengesItem) {
    if (this.challenges == null) {
      this.challenges = new ArrayList<>();
    }
    this.challenges.add(challengesItem);
    return this;
  }

  /**
   * The activities referred to by this quest can have many associated challenges. They are all contained here, with activityHashes so that you can associate them with the specific activity variants in which they can be found. In retrospect, I probably should have put these under the specific Activity Variants, but it&#39;s too late to change it now. Theoretically, a quest without Activities can still have Challenges, which is why this is on a higher level than activity/variants, but it probably should have been in both places. That may come as a later revision.
   * @return challenges
   */
  @javax.annotation.Nullable
  public List<DestinyChallengesDestinyChallengeStatus> getChallenges() {
    return challenges;
  }

  public void setChallenges(List<DestinyChallengesDestinyChallengeStatus> challenges) {
    this.challenges = challenges;
  }


  public DestinyMilestonesDestinyMilestoneQuest questItemHash(Integer questItemHash) {
    this.questItemHash = questItemHash;
    return this;
  }

  /**
   * Quests are defined as Items in content. As such, this is the hash identifier of the DestinyInventoryItemDefinition that represents this quest. It will have pointers to all of the steps in the quest, and display information for the quest (title, description, icon etc) Individual steps will be referred to in the Quest item&#39;s DestinyInventoryItemDefinition.setData property, and themselves are Items with their own renderable data.
   * @return questItemHash
   */
  @javax.annotation.Nullable
  public Integer getQuestItemHash() {
    return questItemHash;
  }

  public void setQuestItemHash(Integer questItemHash) {
    this.questItemHash = questItemHash;
  }


  public DestinyMilestonesDestinyMilestoneQuest status(DestinyQuestsDestinyQuestStatus status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the quest for the character making the request.
   * @return status
   */
  @javax.annotation.Nullable
  public DestinyQuestsDestinyQuestStatus getStatus() {
    return status;
  }

  public void setStatus(DestinyQuestsDestinyQuestStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyMilestonesDestinyMilestoneQuest destinyMilestonesDestinyMilestoneQuest = (DestinyMilestonesDestinyMilestoneQuest) o;
    return Objects.equals(this.activity, destinyMilestonesDestinyMilestoneQuest.activity) &&
        Objects.equals(this.challenges, destinyMilestonesDestinyMilestoneQuest.challenges) &&
        Objects.equals(this.questItemHash, destinyMilestonesDestinyMilestoneQuest.questItemHash) &&
        Objects.equals(this.status, destinyMilestonesDestinyMilestoneQuest.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activity, challenges, questItemHash, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyMilestonesDestinyMilestoneQuest {\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    challenges: ").append(toIndentedString(challenges)).append("\n");
    sb.append("    questItemHash: ").append(toIndentedString(questItemHash)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity");
    openapiFields.add("challenges");
    openapiFields.add("questItemHash");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyMilestonesDestinyMilestoneQuest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyMilestonesDestinyMilestoneQuest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyMilestonesDestinyMilestoneQuest is not found in the empty JSON string", DestinyMilestonesDestinyMilestoneQuest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyMilestonesDestinyMilestoneQuest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyMilestonesDestinyMilestoneQuest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activity`
      if (jsonObj.get("activity") != null && !jsonObj.get("activity").isJsonNull()) {
        DestinyMilestonesDestinyMilestoneActivity.validateJsonElement(jsonObj.get("activity"));
      }
      if (jsonObj.get("challenges") != null && !jsonObj.get("challenges").isJsonNull()) {
        JsonArray jsonArraychallenges = jsonObj.getAsJsonArray("challenges");
        if (jsonArraychallenges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("challenges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `challenges` to be an array in the JSON string but got `%s`", jsonObj.get("challenges").toString()));
          }

          // validate the optional field `challenges` (array)
          for (int i = 0; i < jsonArraychallenges.size(); i++) {
            DestinyChallengesDestinyChallengeStatus.validateJsonElement(jsonArraychallenges.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        DestinyQuestsDestinyQuestStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyMilestonesDestinyMilestoneQuest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyMilestonesDestinyMilestoneQuest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyMilestonesDestinyMilestoneQuest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyMilestonesDestinyMilestoneQuest.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyMilestonesDestinyMilestoneQuest>() {
           @Override
           public void write(JsonWriter out, DestinyMilestonesDestinyMilestoneQuest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyMilestonesDestinyMilestoneQuest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyMilestonesDestinyMilestoneQuest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyMilestonesDestinyMilestoneQuest
   * @throws IOException if the JSON string is invalid with respect to DestinyMilestonesDestinyMilestoneQuest
   */
  public static DestinyMilestonesDestinyMilestoneQuest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyMilestonesDestinyMilestoneQuest.class);
  }

  /**
   * Convert an instance of DestinyMilestonesDestinyMilestoneQuest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

