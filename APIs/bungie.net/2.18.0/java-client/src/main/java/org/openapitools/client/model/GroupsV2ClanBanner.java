/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GroupsV2ClanBanner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupsV2ClanBanner {
  public static final String SERIALIZED_NAME_DECAL_BACKGROUND_COLOR_ID = "decalBackgroundColorId";
  @SerializedName(SERIALIZED_NAME_DECAL_BACKGROUND_COLOR_ID)
  private Integer decalBackgroundColorId;

  public static final String SERIALIZED_NAME_DECAL_COLOR_ID = "decalColorId";
  @SerializedName(SERIALIZED_NAME_DECAL_COLOR_ID)
  private Integer decalColorId;

  public static final String SERIALIZED_NAME_DECAL_ID = "decalId";
  @SerializedName(SERIALIZED_NAME_DECAL_ID)
  private Integer decalId;

  public static final String SERIALIZED_NAME_GONFALON_COLOR_ID = "gonfalonColorId";
  @SerializedName(SERIALIZED_NAME_GONFALON_COLOR_ID)
  private Integer gonfalonColorId;

  public static final String SERIALIZED_NAME_GONFALON_DETAIL_COLOR_ID = "gonfalonDetailColorId";
  @SerializedName(SERIALIZED_NAME_GONFALON_DETAIL_COLOR_ID)
  private Integer gonfalonDetailColorId;

  public static final String SERIALIZED_NAME_GONFALON_DETAIL_ID = "gonfalonDetailId";
  @SerializedName(SERIALIZED_NAME_GONFALON_DETAIL_ID)
  private Integer gonfalonDetailId;

  public static final String SERIALIZED_NAME_GONFALON_ID = "gonfalonId";
  @SerializedName(SERIALIZED_NAME_GONFALON_ID)
  private Integer gonfalonId;

  public GroupsV2ClanBanner() {
  }

  public GroupsV2ClanBanner decalBackgroundColorId(Integer decalBackgroundColorId) {
    this.decalBackgroundColorId = decalBackgroundColorId;
    return this;
  }

  /**
   * Get decalBackgroundColorId
   * @return decalBackgroundColorId
   */
  @javax.annotation.Nullable
  public Integer getDecalBackgroundColorId() {
    return decalBackgroundColorId;
  }

  public void setDecalBackgroundColorId(Integer decalBackgroundColorId) {
    this.decalBackgroundColorId = decalBackgroundColorId;
  }


  public GroupsV2ClanBanner decalColorId(Integer decalColorId) {
    this.decalColorId = decalColorId;
    return this;
  }

  /**
   * Get decalColorId
   * @return decalColorId
   */
  @javax.annotation.Nullable
  public Integer getDecalColorId() {
    return decalColorId;
  }

  public void setDecalColorId(Integer decalColorId) {
    this.decalColorId = decalColorId;
  }


  public GroupsV2ClanBanner decalId(Integer decalId) {
    this.decalId = decalId;
    return this;
  }

  /**
   * Get decalId
   * @return decalId
   */
  @javax.annotation.Nullable
  public Integer getDecalId() {
    return decalId;
  }

  public void setDecalId(Integer decalId) {
    this.decalId = decalId;
  }


  public GroupsV2ClanBanner gonfalonColorId(Integer gonfalonColorId) {
    this.gonfalonColorId = gonfalonColorId;
    return this;
  }

  /**
   * Get gonfalonColorId
   * @return gonfalonColorId
   */
  @javax.annotation.Nullable
  public Integer getGonfalonColorId() {
    return gonfalonColorId;
  }

  public void setGonfalonColorId(Integer gonfalonColorId) {
    this.gonfalonColorId = gonfalonColorId;
  }


  public GroupsV2ClanBanner gonfalonDetailColorId(Integer gonfalonDetailColorId) {
    this.gonfalonDetailColorId = gonfalonDetailColorId;
    return this;
  }

  /**
   * Get gonfalonDetailColorId
   * @return gonfalonDetailColorId
   */
  @javax.annotation.Nullable
  public Integer getGonfalonDetailColorId() {
    return gonfalonDetailColorId;
  }

  public void setGonfalonDetailColorId(Integer gonfalonDetailColorId) {
    this.gonfalonDetailColorId = gonfalonDetailColorId;
  }


  public GroupsV2ClanBanner gonfalonDetailId(Integer gonfalonDetailId) {
    this.gonfalonDetailId = gonfalonDetailId;
    return this;
  }

  /**
   * Get gonfalonDetailId
   * @return gonfalonDetailId
   */
  @javax.annotation.Nullable
  public Integer getGonfalonDetailId() {
    return gonfalonDetailId;
  }

  public void setGonfalonDetailId(Integer gonfalonDetailId) {
    this.gonfalonDetailId = gonfalonDetailId;
  }


  public GroupsV2ClanBanner gonfalonId(Integer gonfalonId) {
    this.gonfalonId = gonfalonId;
    return this;
  }

  /**
   * Get gonfalonId
   * @return gonfalonId
   */
  @javax.annotation.Nullable
  public Integer getGonfalonId() {
    return gonfalonId;
  }

  public void setGonfalonId(Integer gonfalonId) {
    this.gonfalonId = gonfalonId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupsV2ClanBanner groupsV2ClanBanner = (GroupsV2ClanBanner) o;
    return Objects.equals(this.decalBackgroundColorId, groupsV2ClanBanner.decalBackgroundColorId) &&
        Objects.equals(this.decalColorId, groupsV2ClanBanner.decalColorId) &&
        Objects.equals(this.decalId, groupsV2ClanBanner.decalId) &&
        Objects.equals(this.gonfalonColorId, groupsV2ClanBanner.gonfalonColorId) &&
        Objects.equals(this.gonfalonDetailColorId, groupsV2ClanBanner.gonfalonDetailColorId) &&
        Objects.equals(this.gonfalonDetailId, groupsV2ClanBanner.gonfalonDetailId) &&
        Objects.equals(this.gonfalonId, groupsV2ClanBanner.gonfalonId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decalBackgroundColorId, decalColorId, decalId, gonfalonColorId, gonfalonDetailColorId, gonfalonDetailId, gonfalonId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupsV2ClanBanner {\n");
    sb.append("    decalBackgroundColorId: ").append(toIndentedString(decalBackgroundColorId)).append("\n");
    sb.append("    decalColorId: ").append(toIndentedString(decalColorId)).append("\n");
    sb.append("    decalId: ").append(toIndentedString(decalId)).append("\n");
    sb.append("    gonfalonColorId: ").append(toIndentedString(gonfalonColorId)).append("\n");
    sb.append("    gonfalonDetailColorId: ").append(toIndentedString(gonfalonDetailColorId)).append("\n");
    sb.append("    gonfalonDetailId: ").append(toIndentedString(gonfalonDetailId)).append("\n");
    sb.append("    gonfalonId: ").append(toIndentedString(gonfalonId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("decalBackgroundColorId");
    openapiFields.add("decalColorId");
    openapiFields.add("decalId");
    openapiFields.add("gonfalonColorId");
    openapiFields.add("gonfalonDetailColorId");
    openapiFields.add("gonfalonDetailId");
    openapiFields.add("gonfalonId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupsV2ClanBanner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupsV2ClanBanner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupsV2ClanBanner is not found in the empty JSON string", GroupsV2ClanBanner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupsV2ClanBanner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupsV2ClanBanner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupsV2ClanBanner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupsV2ClanBanner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupsV2ClanBanner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupsV2ClanBanner.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupsV2ClanBanner>() {
           @Override
           public void write(JsonWriter out, GroupsV2ClanBanner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupsV2ClanBanner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupsV2ClanBanner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupsV2ClanBanner
   * @throws IOException if the JSON string is invalid with respect to GroupsV2ClanBanner
   */
  public static GroupsV2ClanBanner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupsV2ClanBanner.class);
  }

  /**
   * Convert an instance of GroupsV2ClanBanner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

