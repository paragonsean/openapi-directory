/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyComponentsCraftablesDestinyCraftableSocketComponent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyComponentsCraftablesDestinyCraftableComponent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyComponentsCraftablesDestinyCraftableComponent {
  public static final String SERIALIZED_NAME_FAILED_REQUIREMENT_INDEXES = "failedRequirementIndexes";
  @SerializedName(SERIALIZED_NAME_FAILED_REQUIREMENT_INDEXES)
  private List<Integer> failedRequirementIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOCKETS = "sockets";
  @SerializedName(SERIALIZED_NAME_SOCKETS)
  private List<DestinyComponentsCraftablesDestinyCraftableSocketComponent> sockets = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public DestinyComponentsCraftablesDestinyCraftableComponent() {
  }

  public DestinyComponentsCraftablesDestinyCraftableComponent failedRequirementIndexes(List<Integer> failedRequirementIndexes) {
    this.failedRequirementIndexes = failedRequirementIndexes;
    return this;
  }

  public DestinyComponentsCraftablesDestinyCraftableComponent addFailedRequirementIndexesItem(Integer failedRequirementIndexesItem) {
    if (this.failedRequirementIndexes == null) {
      this.failedRequirementIndexes = new ArrayList<>();
    }
    this.failedRequirementIndexes.add(failedRequirementIndexesItem);
    return this;
  }

  /**
   * If the requirements are not met for crafting this item, these will index into the list of failure strings.
   * @return failedRequirementIndexes
   */
  @javax.annotation.Nullable
  public List<Integer> getFailedRequirementIndexes() {
    return failedRequirementIndexes;
  }

  public void setFailedRequirementIndexes(List<Integer> failedRequirementIndexes) {
    this.failedRequirementIndexes = failedRequirementIndexes;
  }


  public DestinyComponentsCraftablesDestinyCraftableComponent sockets(List<DestinyComponentsCraftablesDestinyCraftableSocketComponent> sockets) {
    this.sockets = sockets;
    return this;
  }

  public DestinyComponentsCraftablesDestinyCraftableComponent addSocketsItem(DestinyComponentsCraftablesDestinyCraftableSocketComponent socketsItem) {
    if (this.sockets == null) {
      this.sockets = new ArrayList<>();
    }
    this.sockets.add(socketsItem);
    return this;
  }

  /**
   * Plug item state for the crafting sockets.
   * @return sockets
   */
  @javax.annotation.Nullable
  public List<DestinyComponentsCraftablesDestinyCraftableSocketComponent> getSockets() {
    return sockets;
  }

  public void setSockets(List<DestinyComponentsCraftablesDestinyCraftableSocketComponent> sockets) {
    this.sockets = sockets;
  }


  public DestinyComponentsCraftablesDestinyCraftableComponent visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Get visible
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyComponentsCraftablesDestinyCraftableComponent destinyComponentsCraftablesDestinyCraftableComponent = (DestinyComponentsCraftablesDestinyCraftableComponent) o;
    return Objects.equals(this.failedRequirementIndexes, destinyComponentsCraftablesDestinyCraftableComponent.failedRequirementIndexes) &&
        Objects.equals(this.sockets, destinyComponentsCraftablesDestinyCraftableComponent.sockets) &&
        Objects.equals(this.visible, destinyComponentsCraftablesDestinyCraftableComponent.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failedRequirementIndexes, sockets, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyComponentsCraftablesDestinyCraftableComponent {\n");
    sb.append("    failedRequirementIndexes: ").append(toIndentedString(failedRequirementIndexes)).append("\n");
    sb.append("    sockets: ").append(toIndentedString(sockets)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failedRequirementIndexes");
    openapiFields.add("sockets");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyComponentsCraftablesDestinyCraftableComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyComponentsCraftablesDestinyCraftableComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyComponentsCraftablesDestinyCraftableComponent is not found in the empty JSON string", DestinyComponentsCraftablesDestinyCraftableComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyComponentsCraftablesDestinyCraftableComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyComponentsCraftablesDestinyCraftableComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("failedRequirementIndexes") != null && !jsonObj.get("failedRequirementIndexes").isJsonNull() && !jsonObj.get("failedRequirementIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failedRequirementIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("failedRequirementIndexes").toString()));
      }
      if (jsonObj.get("sockets") != null && !jsonObj.get("sockets").isJsonNull()) {
        JsonArray jsonArraysockets = jsonObj.getAsJsonArray("sockets");
        if (jsonArraysockets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sockets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sockets` to be an array in the JSON string but got `%s`", jsonObj.get("sockets").toString()));
          }

          // validate the optional field `sockets` (array)
          for (int i = 0; i < jsonArraysockets.size(); i++) {
            DestinyComponentsCraftablesDestinyCraftableSocketComponent.validateJsonElement(jsonArraysockets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyComponentsCraftablesDestinyCraftableComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyComponentsCraftablesDestinyCraftableComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyComponentsCraftablesDestinyCraftableComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyComponentsCraftablesDestinyCraftableComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyComponentsCraftablesDestinyCraftableComponent>() {
           @Override
           public void write(JsonWriter out, DestinyComponentsCraftablesDestinyCraftableComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyComponentsCraftablesDestinyCraftableComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyComponentsCraftablesDestinyCraftableComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyComponentsCraftablesDestinyCraftableComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyComponentsCraftablesDestinyCraftableComponent
   */
  public static DestinyComponentsCraftablesDestinyCraftableComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyComponentsCraftablesDestinyCraftableComponent.class);
  }

  /**
   * Convert an instance of DestinyComponentsCraftablesDestinyCraftableComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

