/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyPlugItemCraftingUnlockRequirement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsDestinyPlugItemCraftingRequirements
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyPlugItemCraftingRequirements {
  public static final String SERIALIZED_NAME_MATERIAL_REQUIREMENT_HASHES = "materialRequirementHashes";
  @SerializedName(SERIALIZED_NAME_MATERIAL_REQUIREMENT_HASHES)
  private List<Integer> materialRequirementHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED_LEVEL = "requiredLevel";
  @SerializedName(SERIALIZED_NAME_REQUIRED_LEVEL)
  private Integer requiredLevel;

  public static final String SERIALIZED_NAME_UNLOCK_REQUIREMENTS = "unlockRequirements";
  @SerializedName(SERIALIZED_NAME_UNLOCK_REQUIREMENTS)
  private List<DestinyDefinitionsDestinyPlugItemCraftingUnlockRequirement> unlockRequirements = new ArrayList<>();

  public DestinyDefinitionsDestinyPlugItemCraftingRequirements() {
  }

  public DestinyDefinitionsDestinyPlugItemCraftingRequirements materialRequirementHashes(List<Integer> materialRequirementHashes) {
    this.materialRequirementHashes = materialRequirementHashes;
    return this;
  }

  public DestinyDefinitionsDestinyPlugItemCraftingRequirements addMaterialRequirementHashesItem(Integer materialRequirementHashesItem) {
    if (this.materialRequirementHashes == null) {
      this.materialRequirementHashes = new ArrayList<>();
    }
    this.materialRequirementHashes.add(materialRequirementHashesItem);
    return this;
  }

  /**
   * Get materialRequirementHashes
   * @return materialRequirementHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getMaterialRequirementHashes() {
    return materialRequirementHashes;
  }

  public void setMaterialRequirementHashes(List<Integer> materialRequirementHashes) {
    this.materialRequirementHashes = materialRequirementHashes;
  }


  public DestinyDefinitionsDestinyPlugItemCraftingRequirements requiredLevel(Integer requiredLevel) {
    this.requiredLevel = requiredLevel;
    return this;
  }

  /**
   * If the plug has a known level requirement, it&#39;ll be available here.
   * @return requiredLevel
   */
  @javax.annotation.Nullable
  public Integer getRequiredLevel() {
    return requiredLevel;
  }

  public void setRequiredLevel(Integer requiredLevel) {
    this.requiredLevel = requiredLevel;
  }


  public DestinyDefinitionsDestinyPlugItemCraftingRequirements unlockRequirements(List<DestinyDefinitionsDestinyPlugItemCraftingUnlockRequirement> unlockRequirements) {
    this.unlockRequirements = unlockRequirements;
    return this;
  }

  public DestinyDefinitionsDestinyPlugItemCraftingRequirements addUnlockRequirementsItem(DestinyDefinitionsDestinyPlugItemCraftingUnlockRequirement unlockRequirementsItem) {
    if (this.unlockRequirements == null) {
      this.unlockRequirements = new ArrayList<>();
    }
    this.unlockRequirements.add(unlockRequirementsItem);
    return this;
  }

  /**
   * Get unlockRequirements
   * @return unlockRequirements
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyPlugItemCraftingUnlockRequirement> getUnlockRequirements() {
    return unlockRequirements;
  }

  public void setUnlockRequirements(List<DestinyDefinitionsDestinyPlugItemCraftingUnlockRequirement> unlockRequirements) {
    this.unlockRequirements = unlockRequirements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyPlugItemCraftingRequirements destinyDefinitionsDestinyPlugItemCraftingRequirements = (DestinyDefinitionsDestinyPlugItemCraftingRequirements) o;
    return Objects.equals(this.materialRequirementHashes, destinyDefinitionsDestinyPlugItemCraftingRequirements.materialRequirementHashes) &&
        Objects.equals(this.requiredLevel, destinyDefinitionsDestinyPlugItemCraftingRequirements.requiredLevel) &&
        Objects.equals(this.unlockRequirements, destinyDefinitionsDestinyPlugItemCraftingRequirements.unlockRequirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(materialRequirementHashes, requiredLevel, unlockRequirements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyPlugItemCraftingRequirements {\n");
    sb.append("    materialRequirementHashes: ").append(toIndentedString(materialRequirementHashes)).append("\n");
    sb.append("    requiredLevel: ").append(toIndentedString(requiredLevel)).append("\n");
    sb.append("    unlockRequirements: ").append(toIndentedString(unlockRequirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("materialRequirementHashes");
    openapiFields.add("requiredLevel");
    openapiFields.add("unlockRequirements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyPlugItemCraftingRequirements
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyPlugItemCraftingRequirements.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyPlugItemCraftingRequirements is not found in the empty JSON string", DestinyDefinitionsDestinyPlugItemCraftingRequirements.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyPlugItemCraftingRequirements.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyPlugItemCraftingRequirements` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("materialRequirementHashes") != null && !jsonObj.get("materialRequirementHashes").isJsonNull() && !jsonObj.get("materialRequirementHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `materialRequirementHashes` to be an array in the JSON string but got `%s`", jsonObj.get("materialRequirementHashes").toString()));
      }
      if (jsonObj.get("unlockRequirements") != null && !jsonObj.get("unlockRequirements").isJsonNull()) {
        JsonArray jsonArrayunlockRequirements = jsonObj.getAsJsonArray("unlockRequirements");
        if (jsonArrayunlockRequirements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unlockRequirements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unlockRequirements` to be an array in the JSON string but got `%s`", jsonObj.get("unlockRequirements").toString()));
          }

          // validate the optional field `unlockRequirements` (array)
          for (int i = 0; i < jsonArrayunlockRequirements.size(); i++) {
            DestinyDefinitionsDestinyPlugItemCraftingUnlockRequirement.validateJsonElement(jsonArrayunlockRequirements.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyPlugItemCraftingRequirements.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyPlugItemCraftingRequirements' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyPlugItemCraftingRequirements> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyPlugItemCraftingRequirements.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyPlugItemCraftingRequirements>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyPlugItemCraftingRequirements value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyPlugItemCraftingRequirements read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyPlugItemCraftingRequirements given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyPlugItemCraftingRequirements
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyPlugItemCraftingRequirements
   */
  public static DestinyDefinitionsDestinyPlugItemCraftingRequirements fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyPlugItemCraftingRequirements.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyPlugItemCraftingRequirements to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

