/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDestinyItemQuantity;
import org.openapitools.client.model.DestinyDestinyUnlockStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request this component if you want the details about an item being sold in relation to the character making the request: whether the character can buy it, whether they can afford it, and other data related to purchasing the item.  Note that if you want instance, stats, etc... data for the item, you&#39;ll have to request additional components such as ItemInstances, ItemPerks etc... and acquire them from the DestinyVendorResponse&#39;s \&quot;items\&quot; property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyEntitiesVendorsDestinyVendorSaleItemComponent {
  public static final String SERIALIZED_NAME_API_PURCHASABLE = "apiPurchasable";
  @SerializedName(SERIALIZED_NAME_API_PURCHASABLE)
  private Boolean apiPurchasable;

  public static final String SERIALIZED_NAME_AUGMENTS = "augments";
  @SerializedName(SERIALIZED_NAME_AUGMENTS)
  private Integer augments;

  public static final String SERIALIZED_NAME_COSTS = "costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private List<DestinyDestinyItemQuantity> costs = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILURE_INDEXES = "failureIndexes";
  @SerializedName(SERIALIZED_NAME_FAILURE_INDEXES)
  private List<Integer> failureIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_HASH = "itemHash";
  @SerializedName(SERIALIZED_NAME_ITEM_HASH)
  private Integer itemHash;

  public static final String SERIALIZED_NAME_ITEM_VALUE_VISIBILITY = "itemValueVisibility";
  @SerializedName(SERIALIZED_NAME_ITEM_VALUE_VISIBILITY)
  private List<Boolean> itemValueVisibility = new ArrayList<>();

  public static final String SERIALIZED_NAME_OVERRIDE_NEXT_REFRESH_DATE = "overrideNextRefreshDate";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_NEXT_REFRESH_DATE)
  private OffsetDateTime overrideNextRefreshDate;

  public static final String SERIALIZED_NAME_OVERRIDE_STYLE_ITEM_HASH = "overrideStyleItemHash";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_STYLE_ITEM_HASH)
  private Integer overrideStyleItemHash;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_REQUIRED_UNLOCKS = "requiredUnlocks";
  @SerializedName(SERIALIZED_NAME_REQUIRED_UNLOCKS)
  private List<Integer> requiredUnlocks = new ArrayList<>();

  public static final String SERIALIZED_NAME_SALE_STATUS = "saleStatus";
  @SerializedName(SERIALIZED_NAME_SALE_STATUS)
  private Integer saleStatus;

  public static final String SERIALIZED_NAME_UNLOCK_STATUSES = "unlockStatuses";
  @SerializedName(SERIALIZED_NAME_UNLOCK_STATUSES)
  private List<DestinyDestinyUnlockStatus> unlockStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENDOR_ITEM_INDEX = "vendorItemIndex";
  @SerializedName(SERIALIZED_NAME_VENDOR_ITEM_INDEX)
  private Integer vendorItemIndex;

  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent() {
  }

  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent apiPurchasable(Boolean apiPurchasable) {
    this.apiPurchasable = apiPurchasable;
    return this;
  }

  /**
   * If true, this item can be purchased through the Bungie.net API.
   * @return apiPurchasable
   */
  @javax.annotation.Nullable
  public Boolean getApiPurchasable() {
    return apiPurchasable;
  }

  public void setApiPurchasable(Boolean apiPurchasable) {
    this.apiPurchasable = apiPurchasable;
  }


  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent augments(Integer augments) {
    this.augments = augments;
    return this;
  }

  /**
   * A flags enumeration value representing the current state of any \&quot;state modifiers\&quot; on the item being sold. These are meant to correspond with some sort of visual indicator as to the augmentation: for instance, if an item is on sale or if you already own the item in question.  Determining how you want to represent these in your own app (or if you even want to) is an exercise left for the reader.
   * @return augments
   */
  @javax.annotation.Nullable
  public Integer getAugments() {
    return augments;
  }

  public void setAugments(Integer augments) {
    this.augments = augments;
  }


  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent costs(List<DestinyDestinyItemQuantity> costs) {
    this.costs = costs;
    return this;
  }

  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent addCostsItem(DestinyDestinyItemQuantity costsItem) {
    if (this.costs == null) {
      this.costs = new ArrayList<>();
    }
    this.costs.add(costsItem);
    return this;
  }

  /**
   * A summary of the current costs of the item.
   * @return costs
   */
  @javax.annotation.Nullable
  public List<DestinyDestinyItemQuantity> getCosts() {
    return costs;
  }

  public void setCosts(List<DestinyDestinyItemQuantity> costs) {
    this.costs = costs;
  }


  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent failureIndexes(List<Integer> failureIndexes) {
    this.failureIndexes = failureIndexes;
    return this;
  }

  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent addFailureIndexesItem(Integer failureIndexesItem) {
    if (this.failureIndexes == null) {
      this.failureIndexes = new ArrayList<>();
    }
    this.failureIndexes.add(failureIndexesItem);
    return this;
  }

  /**
   * Indexes in to the \&quot;failureStrings\&quot; lookup table in DestinyVendorDefinition for the given Vendor. Gives some more reliable failure information for why you can&#39;t purchase an item.  It is preferred to use these over requiredUnlocks and unlockStatuses: the latter are provided mostly in case someone can do something interesting with it that I didn&#39;t anticipate.
   * @return failureIndexes
   */
  @javax.annotation.Nullable
  public List<Integer> getFailureIndexes() {
    return failureIndexes;
  }

  public void setFailureIndexes(List<Integer> failureIndexes) {
    this.failureIndexes = failureIndexes;
  }


  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent itemHash(Integer itemHash) {
    this.itemHash = itemHash;
    return this;
  }

  /**
   * The hash of the item being sold, as a quick shortcut for looking up the DestinyInventoryItemDefinition of the sale item.
   * @return itemHash
   */
  @javax.annotation.Nullable
  public Integer getItemHash() {
    return itemHash;
  }

  public void setItemHash(Integer itemHash) {
    this.itemHash = itemHash;
  }


  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent itemValueVisibility(List<Boolean> itemValueVisibility) {
    this.itemValueVisibility = itemValueVisibility;
    return this;
  }

  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent addItemValueVisibilityItem(Boolean itemValueVisibilityItem) {
    if (this.itemValueVisibility == null) {
      this.itemValueVisibility = new ArrayList<>();
    }
    this.itemValueVisibility.add(itemValueVisibilityItem);
    return this;
  }

  /**
   * If available, a list that describes which item values (rewards) should be shown (true) or hidden (false).
   * @return itemValueVisibility
   */
  @javax.annotation.Nullable
  public List<Boolean> getItemValueVisibility() {
    return itemValueVisibility;
  }

  public void setItemValueVisibility(List<Boolean> itemValueVisibility) {
    this.itemValueVisibility = itemValueVisibility;
  }


  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent overrideNextRefreshDate(OffsetDateTime overrideNextRefreshDate) {
    this.overrideNextRefreshDate = overrideNextRefreshDate;
    return this;
  }

  /**
   * If this item has its own custom date where it may be removed from the Vendor&#39;s rotation, this is that date.  Note that there&#39;s not actually any guarantee that it will go away: it could be chosen again and end up still being in the Vendor&#39;s sale items! But this is the next date where that test will occur, and is also the date that the game shows for availability on things like Bounties being sold. So it&#39;s the best we can give.
   * @return overrideNextRefreshDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getOverrideNextRefreshDate() {
    return overrideNextRefreshDate;
  }

  public void setOverrideNextRefreshDate(OffsetDateTime overrideNextRefreshDate) {
    this.overrideNextRefreshDate = overrideNextRefreshDate;
  }


  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent overrideStyleItemHash(Integer overrideStyleItemHash) {
    this.overrideStyleItemHash = overrideStyleItemHash;
    return this;
  }

  /**
   * If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.  If you don&#39;t do this, certain items whose styles are being overridden by socketed items - such as the \&quot;Recycle Shader\&quot; item - would show whatever their default icon/style is, and it wouldn&#39;t be pretty or look accurate.
   * @return overrideStyleItemHash
   */
  @javax.annotation.Nullable
  public Integer getOverrideStyleItemHash() {
    return overrideStyleItemHash;
  }

  public void setOverrideStyleItemHash(Integer overrideStyleItemHash) {
    this.overrideStyleItemHash = overrideStyleItemHash;
  }


  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * How much of the item you&#39;ll be getting.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent requiredUnlocks(List<Integer> requiredUnlocks) {
    this.requiredUnlocks = requiredUnlocks;
    return this;
  }

  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent addRequiredUnlocksItem(Integer requiredUnlocksItem) {
    if (this.requiredUnlocks == null) {
      this.requiredUnlocks = new ArrayList<>();
    }
    this.requiredUnlocks.add(requiredUnlocksItem);
    return this;
  }

  /**
   * If you can&#39;t buy the item due to a complex character state, these will be hashes for DestinyUnlockDefinitions that you can check to see messages regarding the failure (if the unlocks have human readable information: it is not guaranteed that Unlocks will have human readable strings, and your application will have to handle that)  Prefer using failureIndexes instead. These are provided for informational purposes, but have largely been supplanted by failureIndexes.
   * @return requiredUnlocks
   */
  @javax.annotation.Nullable
  public List<Integer> getRequiredUnlocks() {
    return requiredUnlocks;
  }

  public void setRequiredUnlocks(List<Integer> requiredUnlocks) {
    this.requiredUnlocks = requiredUnlocks;
  }


  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent saleStatus(Integer saleStatus) {
    this.saleStatus = saleStatus;
    return this;
  }

  /**
   * A flag indicating whether the requesting character can buy the item, and if not the reasons why the character can&#39;t buy it.
   * @return saleStatus
   */
  @javax.annotation.Nullable
  public Integer getSaleStatus() {
    return saleStatus;
  }

  public void setSaleStatus(Integer saleStatus) {
    this.saleStatus = saleStatus;
  }


  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent unlockStatuses(List<DestinyDestinyUnlockStatus> unlockStatuses) {
    this.unlockStatuses = unlockStatuses;
    return this;
  }

  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent addUnlockStatusesItem(DestinyDestinyUnlockStatus unlockStatusesItem) {
    if (this.unlockStatuses == null) {
      this.unlockStatuses = new ArrayList<>();
    }
    this.unlockStatuses.add(unlockStatusesItem);
    return this;
  }

  /**
   * If any complex unlock states are checked in determining purchasability, these will be returned here along with the status of the unlock check.  Prefer using failureIndexes instead. These are provided for informational purposes, but have largely been supplanted by failureIndexes.
   * @return unlockStatuses
   */
  @javax.annotation.Nullable
  public List<DestinyDestinyUnlockStatus> getUnlockStatuses() {
    return unlockStatuses;
  }

  public void setUnlockStatuses(List<DestinyDestinyUnlockStatus> unlockStatuses) {
    this.unlockStatuses = unlockStatuses;
  }


  public DestinyEntitiesVendorsDestinyVendorSaleItemComponent vendorItemIndex(Integer vendorItemIndex) {
    this.vendorItemIndex = vendorItemIndex;
    return this;
  }

  /**
   * The index into the DestinyVendorDefinition.itemList property. Note that this means Vendor data *is* Content Version dependent: make sure you have the latest content before you use Vendor data, or these indexes may mismatch.   Most systems avoid this problem, but Vendors is one area where we are unable to reasonably avoid content dependency at the moment.
   * @return vendorItemIndex
   */
  @javax.annotation.Nullable
  public Integer getVendorItemIndex() {
    return vendorItemIndex;
  }

  public void setVendorItemIndex(Integer vendorItemIndex) {
    this.vendorItemIndex = vendorItemIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesVendorsDestinyVendorSaleItemComponent destinyEntitiesVendorsDestinyVendorSaleItemComponent = (DestinyEntitiesVendorsDestinyVendorSaleItemComponent) o;
    return Objects.equals(this.apiPurchasable, destinyEntitiesVendorsDestinyVendorSaleItemComponent.apiPurchasable) &&
        Objects.equals(this.augments, destinyEntitiesVendorsDestinyVendorSaleItemComponent.augments) &&
        Objects.equals(this.costs, destinyEntitiesVendorsDestinyVendorSaleItemComponent.costs) &&
        Objects.equals(this.failureIndexes, destinyEntitiesVendorsDestinyVendorSaleItemComponent.failureIndexes) &&
        Objects.equals(this.itemHash, destinyEntitiesVendorsDestinyVendorSaleItemComponent.itemHash) &&
        Objects.equals(this.itemValueVisibility, destinyEntitiesVendorsDestinyVendorSaleItemComponent.itemValueVisibility) &&
        Objects.equals(this.overrideNextRefreshDate, destinyEntitiesVendorsDestinyVendorSaleItemComponent.overrideNextRefreshDate) &&
        Objects.equals(this.overrideStyleItemHash, destinyEntitiesVendorsDestinyVendorSaleItemComponent.overrideStyleItemHash) &&
        Objects.equals(this.quantity, destinyEntitiesVendorsDestinyVendorSaleItemComponent.quantity) &&
        Objects.equals(this.requiredUnlocks, destinyEntitiesVendorsDestinyVendorSaleItemComponent.requiredUnlocks) &&
        Objects.equals(this.saleStatus, destinyEntitiesVendorsDestinyVendorSaleItemComponent.saleStatus) &&
        Objects.equals(this.unlockStatuses, destinyEntitiesVendorsDestinyVendorSaleItemComponent.unlockStatuses) &&
        Objects.equals(this.vendorItemIndex, destinyEntitiesVendorsDestinyVendorSaleItemComponent.vendorItemIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiPurchasable, augments, costs, failureIndexes, itemHash, itemValueVisibility, overrideNextRefreshDate, overrideStyleItemHash, quantity, requiredUnlocks, saleStatus, unlockStatuses, vendorItemIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesVendorsDestinyVendorSaleItemComponent {\n");
    sb.append("    apiPurchasable: ").append(toIndentedString(apiPurchasable)).append("\n");
    sb.append("    augments: ").append(toIndentedString(augments)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    failureIndexes: ").append(toIndentedString(failureIndexes)).append("\n");
    sb.append("    itemHash: ").append(toIndentedString(itemHash)).append("\n");
    sb.append("    itemValueVisibility: ").append(toIndentedString(itemValueVisibility)).append("\n");
    sb.append("    overrideNextRefreshDate: ").append(toIndentedString(overrideNextRefreshDate)).append("\n");
    sb.append("    overrideStyleItemHash: ").append(toIndentedString(overrideStyleItemHash)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    requiredUnlocks: ").append(toIndentedString(requiredUnlocks)).append("\n");
    sb.append("    saleStatus: ").append(toIndentedString(saleStatus)).append("\n");
    sb.append("    unlockStatuses: ").append(toIndentedString(unlockStatuses)).append("\n");
    sb.append("    vendorItemIndex: ").append(toIndentedString(vendorItemIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiPurchasable");
    openapiFields.add("augments");
    openapiFields.add("costs");
    openapiFields.add("failureIndexes");
    openapiFields.add("itemHash");
    openapiFields.add("itemValueVisibility");
    openapiFields.add("overrideNextRefreshDate");
    openapiFields.add("overrideStyleItemHash");
    openapiFields.add("quantity");
    openapiFields.add("requiredUnlocks");
    openapiFields.add("saleStatus");
    openapiFields.add("unlockStatuses");
    openapiFields.add("vendorItemIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyEntitiesVendorsDestinyVendorSaleItemComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyEntitiesVendorsDestinyVendorSaleItemComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyEntitiesVendorsDestinyVendorSaleItemComponent is not found in the empty JSON string", DestinyEntitiesVendorsDestinyVendorSaleItemComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyEntitiesVendorsDestinyVendorSaleItemComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyEntitiesVendorsDestinyVendorSaleItemComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("costs") != null && !jsonObj.get("costs").isJsonNull()) {
        JsonArray jsonArraycosts = jsonObj.getAsJsonArray("costs");
        if (jsonArraycosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("costs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `costs` to be an array in the JSON string but got `%s`", jsonObj.get("costs").toString()));
          }

          // validate the optional field `costs` (array)
          for (int i = 0; i < jsonArraycosts.size(); i++) {
            DestinyDestinyItemQuantity.validateJsonElement(jsonArraycosts.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("failureIndexes") != null && !jsonObj.get("failureIndexes").isJsonNull() && !jsonObj.get("failureIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("failureIndexes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("itemValueVisibility") != null && !jsonObj.get("itemValueVisibility").isJsonNull() && !jsonObj.get("itemValueVisibility").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemValueVisibility` to be an array in the JSON string but got `%s`", jsonObj.get("itemValueVisibility").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requiredUnlocks") != null && !jsonObj.get("requiredUnlocks").isJsonNull() && !jsonObj.get("requiredUnlocks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredUnlocks` to be an array in the JSON string but got `%s`", jsonObj.get("requiredUnlocks").toString()));
      }
      if (jsonObj.get("unlockStatuses") != null && !jsonObj.get("unlockStatuses").isJsonNull()) {
        JsonArray jsonArrayunlockStatuses = jsonObj.getAsJsonArray("unlockStatuses");
        if (jsonArrayunlockStatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unlockStatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unlockStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("unlockStatuses").toString()));
          }

          // validate the optional field `unlockStatuses` (array)
          for (int i = 0; i < jsonArrayunlockStatuses.size(); i++) {
            DestinyDestinyUnlockStatus.validateJsonElement(jsonArrayunlockStatuses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyEntitiesVendorsDestinyVendorSaleItemComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyEntitiesVendorsDestinyVendorSaleItemComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyEntitiesVendorsDestinyVendorSaleItemComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyEntitiesVendorsDestinyVendorSaleItemComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyEntitiesVendorsDestinyVendorSaleItemComponent>() {
           @Override
           public void write(JsonWriter out, DestinyEntitiesVendorsDestinyVendorSaleItemComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyEntitiesVendorsDestinyVendorSaleItemComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyEntitiesVendorsDestinyVendorSaleItemComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyEntitiesVendorsDestinyVendorSaleItemComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyEntitiesVendorsDestinyVendorSaleItemComponent
   */
  public static DestinyEntitiesVendorsDestinyVendorSaleItemComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyEntitiesVendorsDestinyVendorSaleItemComponent.class);
  }

  /**
   * Convert an instance of DestinyEntitiesVendorsDestinyVendorSaleItemComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

