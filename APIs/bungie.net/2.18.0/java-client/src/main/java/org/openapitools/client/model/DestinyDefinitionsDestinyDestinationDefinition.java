/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyActivityGraphListEntryDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyBubbleDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyDestinationBubbleSettingDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * On to one of the more confusing subjects of the API. What is a Destination, and what is the relationship between it, Activities, Locations, and Places?  A \&quot;Destination\&quot; is a specific region/city/area of a larger \&quot;Place\&quot;. For instance, a Place might be Earth where a Destination might be Bellevue, Washington. (Please, pick a more interesting destination if you come to visit Earth).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyDestinationDefinition {
  public static final String SERIALIZED_NAME_ACTIVITY_GRAPH_ENTRIES = "activityGraphEntries";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_GRAPH_ENTRIES)
  private List<DestinyDefinitionsDestinyActivityGraphListEntryDefinition> activityGraphEntries = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUBBLE_SETTINGS = "bubbleSettings";
  @SerializedName(SERIALIZED_NAME_BUBBLE_SETTINGS)
  private List<DestinyDefinitionsDestinyDestinationBubbleSettingDefinition> bubbleSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUBBLES = "bubbles";
  @SerializedName(SERIALIZED_NAME_BUBBLES)
  private List<DestinyDefinitionsDestinyBubbleDefinition> bubbles = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_FREEROAM_ACTIVITY_HASH = "defaultFreeroamActivityHash";
  @SerializedName(SERIALIZED_NAME_DEFAULT_FREEROAM_ACTIVITY_HASH)
  private Integer defaultFreeroamActivityHash;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_PLACE_HASH = "placeHash";
  @SerializedName(SERIALIZED_NAME_PLACE_HASH)
  private Integer placeHash;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public DestinyDefinitionsDestinyDestinationDefinition() {
  }

  public DestinyDefinitionsDestinyDestinationDefinition activityGraphEntries(List<DestinyDefinitionsDestinyActivityGraphListEntryDefinition> activityGraphEntries) {
    this.activityGraphEntries = activityGraphEntries;
    return this;
  }

  public DestinyDefinitionsDestinyDestinationDefinition addActivityGraphEntriesItem(DestinyDefinitionsDestinyActivityGraphListEntryDefinition activityGraphEntriesItem) {
    if (this.activityGraphEntries == null) {
      this.activityGraphEntries = new ArrayList<>();
    }
    this.activityGraphEntries.add(activityGraphEntriesItem);
    return this;
  }

  /**
   * If the Destination has default Activity Graphs (i.e. \&quot;Map\&quot;) that should be shown in the director, this is the list of those Graphs. At most, only one should be active at any given time for a Destination: these would represent, for example, different variants on a Map if the Destination is changing on a macro level based on game state.
   * @return activityGraphEntries
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyActivityGraphListEntryDefinition> getActivityGraphEntries() {
    return activityGraphEntries;
  }

  public void setActivityGraphEntries(List<DestinyDefinitionsDestinyActivityGraphListEntryDefinition> activityGraphEntries) {
    this.activityGraphEntries = activityGraphEntries;
  }


  public DestinyDefinitionsDestinyDestinationDefinition bubbleSettings(List<DestinyDefinitionsDestinyDestinationBubbleSettingDefinition> bubbleSettings) {
    this.bubbleSettings = bubbleSettings;
    return this;
  }

  public DestinyDefinitionsDestinyDestinationDefinition addBubbleSettingsItem(DestinyDefinitionsDestinyDestinationBubbleSettingDefinition bubbleSettingsItem) {
    if (this.bubbleSettings == null) {
      this.bubbleSettings = new ArrayList<>();
    }
    this.bubbleSettings.add(bubbleSettingsItem);
    return this;
  }

  /**
   * A Destination may have many \&quot;Bubbles\&quot; zones with human readable properties.  We don&#39;t get as much info as I&#39;d like about them - I&#39;d love to return info like where on the map they are located - but at least this gives you the name of those bubbles. bubbleSettings and bubbles both have the identical number of entries, and you should match up their indexes to provide matching bubble and bubbleSettings data.  DEPRECATED - Just use bubbles, it now has this data.
   * @return bubbleSettings
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyDestinationBubbleSettingDefinition> getBubbleSettings() {
    return bubbleSettings;
  }

  public void setBubbleSettings(List<DestinyDefinitionsDestinyDestinationBubbleSettingDefinition> bubbleSettings) {
    this.bubbleSettings = bubbleSettings;
  }


  public DestinyDefinitionsDestinyDestinationDefinition bubbles(List<DestinyDefinitionsDestinyBubbleDefinition> bubbles) {
    this.bubbles = bubbles;
    return this;
  }

  public DestinyDefinitionsDestinyDestinationDefinition addBubblesItem(DestinyDefinitionsDestinyBubbleDefinition bubblesItem) {
    if (this.bubbles == null) {
      this.bubbles = new ArrayList<>();
    }
    this.bubbles.add(bubblesItem);
    return this;
  }

  /**
   * This provides the unique identifiers for every bubble in the destination (only guaranteed unique within the destination), and any intrinsic properties of the bubble.  bubbleSettings and bubbles both have the identical number of entries, and you should match up their indexes to provide matching bubble and bubbleSettings data.
   * @return bubbles
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyBubbleDefinition> getBubbles() {
    return bubbles;
  }

  public void setBubbles(List<DestinyDefinitionsDestinyBubbleDefinition> bubbles) {
    this.bubbles = bubbles;
  }


  public DestinyDefinitionsDestinyDestinationDefinition defaultFreeroamActivityHash(Integer defaultFreeroamActivityHash) {
    this.defaultFreeroamActivityHash = defaultFreeroamActivityHash;
    return this;
  }

  /**
   * If this Destination has a default Free-Roam activity, this is the hash for that Activity. Use it to look up the DestinyActivityDefintion.
   * @return defaultFreeroamActivityHash
   */
  @javax.annotation.Nullable
  public Integer getDefaultFreeroamActivityHash() {
    return defaultFreeroamActivityHash;
  }

  public void setDefaultFreeroamActivityHash(Integer defaultFreeroamActivityHash) {
    this.defaultFreeroamActivityHash = defaultFreeroamActivityHash;
  }


  public DestinyDefinitionsDestinyDestinationDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinyDestinationDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDestinyDestinationDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinyDestinationDefinition placeHash(Integer placeHash) {
    this.placeHash = placeHash;
    return this;
  }

  /**
   * The place that \&quot;owns\&quot; this Destination. Use this hash to look up the DestinyPlaceDefinition.
   * @return placeHash
   */
  @javax.annotation.Nullable
  public Integer getPlaceHash() {
    return placeHash;
  }

  public void setPlaceHash(Integer placeHash) {
    this.placeHash = placeHash;
  }


  public DestinyDefinitionsDestinyDestinationDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyDestinationDefinition destinyDefinitionsDestinyDestinationDefinition = (DestinyDefinitionsDestinyDestinationDefinition) o;
    return Objects.equals(this.activityGraphEntries, destinyDefinitionsDestinyDestinationDefinition.activityGraphEntries) &&
        Objects.equals(this.bubbleSettings, destinyDefinitionsDestinyDestinationDefinition.bubbleSettings) &&
        Objects.equals(this.bubbles, destinyDefinitionsDestinyDestinationDefinition.bubbles) &&
        Objects.equals(this.defaultFreeroamActivityHash, destinyDefinitionsDestinyDestinationDefinition.defaultFreeroamActivityHash) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinyDestinationDefinition.displayProperties) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyDestinationDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinyDestinationDefinition.index) &&
        Objects.equals(this.placeHash, destinyDefinitionsDestinyDestinationDefinition.placeHash) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyDestinationDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityGraphEntries, bubbleSettings, bubbles, defaultFreeroamActivityHash, displayProperties, hash, index, placeHash, redacted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyDestinationDefinition {\n");
    sb.append("    activityGraphEntries: ").append(toIndentedString(activityGraphEntries)).append("\n");
    sb.append("    bubbleSettings: ").append(toIndentedString(bubbleSettings)).append("\n");
    sb.append("    bubbles: ").append(toIndentedString(bubbles)).append("\n");
    sb.append("    defaultFreeroamActivityHash: ").append(toIndentedString(defaultFreeroamActivityHash)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    placeHash: ").append(toIndentedString(placeHash)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityGraphEntries");
    openapiFields.add("bubbleSettings");
    openapiFields.add("bubbles");
    openapiFields.add("defaultFreeroamActivityHash");
    openapiFields.add("displayProperties");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("placeHash");
    openapiFields.add("redacted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyDestinationDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyDestinationDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyDestinationDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyDestinationDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyDestinationDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyDestinationDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("activityGraphEntries") != null && !jsonObj.get("activityGraphEntries").isJsonNull()) {
        JsonArray jsonArrayactivityGraphEntries = jsonObj.getAsJsonArray("activityGraphEntries");
        if (jsonArrayactivityGraphEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activityGraphEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activityGraphEntries` to be an array in the JSON string but got `%s`", jsonObj.get("activityGraphEntries").toString()));
          }

          // validate the optional field `activityGraphEntries` (array)
          for (int i = 0; i < jsonArrayactivityGraphEntries.size(); i++) {
            DestinyDefinitionsDestinyActivityGraphListEntryDefinition.validateJsonElement(jsonArrayactivityGraphEntries.get(i));
          };
        }
      }
      if (jsonObj.get("bubbleSettings") != null && !jsonObj.get("bubbleSettings").isJsonNull()) {
        JsonArray jsonArraybubbleSettings = jsonObj.getAsJsonArray("bubbleSettings");
        if (jsonArraybubbleSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bubbleSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bubbleSettings` to be an array in the JSON string but got `%s`", jsonObj.get("bubbleSettings").toString()));
          }

          // validate the optional field `bubbleSettings` (array)
          for (int i = 0; i < jsonArraybubbleSettings.size(); i++) {
            DestinyDefinitionsDestinyDestinationBubbleSettingDefinition.validateJsonElement(jsonArraybubbleSettings.get(i));
          };
        }
      }
      if (jsonObj.get("bubbles") != null && !jsonObj.get("bubbles").isJsonNull()) {
        JsonArray jsonArraybubbles = jsonObj.getAsJsonArray("bubbles");
        if (jsonArraybubbles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bubbles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bubbles` to be an array in the JSON string but got `%s`", jsonObj.get("bubbles").toString()));
          }

          // validate the optional field `bubbles` (array)
          for (int i = 0; i < jsonArraybubbles.size(); i++) {
            DestinyDefinitionsDestinyBubbleDefinition.validateJsonElement(jsonArraybubbles.get(i));
          };
        }
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyDestinationDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyDestinationDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyDestinationDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyDestinationDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyDestinationDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyDestinationDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyDestinationDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyDestinationDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyDestinationDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyDestinationDefinition
   */
  public static DestinyDefinitionsDestinyDestinationDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyDestinationDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyDestinationDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

