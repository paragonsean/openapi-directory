/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyObjectivePerkEntryDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyObjectiveStatEntryDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines an \&quot;Objective\&quot;.  An objective is a specific task you should accomplish in the game. These are referred to by:  - Quest Steps (which are DestinyInventoryItemDefinition entities with Objectives)  - Challenges (which are Objectives defined on an DestinyActivityDefintion)  - Milestones (which refer to Objectives that are defined on both Quest Steps and Activities)  - Anything else that the designers decide to do later.  Objectives have progress, a notion of having been Completed, human readable data describing the task to be accomplished, and a lot of optional tack-on data that can enhance the information provided about the task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyObjectiveDefinition {
  public static final String SERIALIZED_NAME_ALLOW_NEGATIVE_VALUE = "allowNegativeValue";
  @SerializedName(SERIALIZED_NAME_ALLOW_NEGATIVE_VALUE)
  private Boolean allowNegativeValue;

  public static final String SERIALIZED_NAME_ALLOW_OVERCOMPLETION = "allowOvercompletion";
  @SerializedName(SERIALIZED_NAME_ALLOW_OVERCOMPLETION)
  private Boolean allowOvercompletion;

  public static final String SERIALIZED_NAME_ALLOW_VALUE_CHANGE_WHEN_COMPLETED = "allowValueChangeWhenCompleted";
  @SerializedName(SERIALIZED_NAME_ALLOW_VALUE_CHANGE_WHEN_COMPLETED)
  private Boolean allowValueChangeWhenCompleted;

  public static final String SERIALIZED_NAME_COMPLETED_VALUE_STYLE = "completedValueStyle";
  @SerializedName(SERIALIZED_NAME_COMPLETED_VALUE_STYLE)
  private Integer completedValueStyle;

  public static final String SERIALIZED_NAME_COMPLETION_VALUE = "completionValue";
  @SerializedName(SERIALIZED_NAME_COMPLETION_VALUE)
  private Integer completionValue;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_IN_PROGRESS_VALUE_STYLE = "inProgressValueStyle";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS_VALUE_STYLE)
  private Integer inProgressValueStyle;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_IS_COUNTING_DOWNWARD = "isCountingDownward";
  @SerializedName(SERIALIZED_NAME_IS_COUNTING_DOWNWARD)
  private Boolean isCountingDownward;

  public static final String SERIALIZED_NAME_LOCATION_HASH = "locationHash";
  @SerializedName(SERIALIZED_NAME_LOCATION_HASH)
  private Integer locationHash;

  public static final String SERIALIZED_NAME_MINIMUM_VISIBILITY_THRESHOLD = "minimumVisibilityThreshold";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VISIBILITY_THRESHOLD)
  private Integer minimumVisibilityThreshold;

  public static final String SERIALIZED_NAME_PERKS = "perks";
  @SerializedName(SERIALIZED_NAME_PERKS)
  private DestinyDefinitionsDestinyObjectivePerkEntryDefinition perks;

  public static final String SERIALIZED_NAME_PROGRESS_DESCRIPTION = "progressDescription";
  @SerializedName(SERIALIZED_NAME_PROGRESS_DESCRIPTION)
  private String progressDescription;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private Integer scope;

  public static final String SERIALIZED_NAME_SHOW_VALUE_ON_COMPLETE = "showValueOnComplete";
  @SerializedName(SERIALIZED_NAME_SHOW_VALUE_ON_COMPLETE)
  private Boolean showValueOnComplete;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private DestinyDefinitionsDestinyObjectiveStatEntryDefinition stats;

  public static final String SERIALIZED_NAME_UI_LABEL = "uiLabel";
  @SerializedName(SERIALIZED_NAME_UI_LABEL)
  private String uiLabel;

  public static final String SERIALIZED_NAME_UI_STYLE = "uiStyle";
  @SerializedName(SERIALIZED_NAME_UI_STYLE)
  private Integer uiStyle;

  public static final String SERIALIZED_NAME_VALUE_STYLE = "valueStyle";
  @SerializedName(SERIALIZED_NAME_VALUE_STYLE)
  private Integer valueStyle;

  public DestinyDefinitionsDestinyObjectiveDefinition() {
  }

  public DestinyDefinitionsDestinyObjectiveDefinition allowNegativeValue(Boolean allowNegativeValue) {
    this.allowNegativeValue = allowNegativeValue;
    return this;
  }

  /**
   * If true, the value is allowed to go negative.
   * @return allowNegativeValue
   */
  @javax.annotation.Nullable
  public Boolean getAllowNegativeValue() {
    return allowNegativeValue;
  }

  public void setAllowNegativeValue(Boolean allowNegativeValue) {
    this.allowNegativeValue = allowNegativeValue;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition allowOvercompletion(Boolean allowOvercompletion) {
    this.allowOvercompletion = allowOvercompletion;
    return this;
  }

  /**
   * If True, the progress will continue even beyond the point where the objective met its minimum completion requirements. Your UI will have to accommodate it.
   * @return allowOvercompletion
   */
  @javax.annotation.Nullable
  public Boolean getAllowOvercompletion() {
    return allowOvercompletion;
  }

  public void setAllowOvercompletion(Boolean allowOvercompletion) {
    this.allowOvercompletion = allowOvercompletion;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition allowValueChangeWhenCompleted(Boolean allowValueChangeWhenCompleted) {
    this.allowValueChangeWhenCompleted = allowValueChangeWhenCompleted;
    return this;
  }

  /**
   * If true, you can effectively \&quot;un-complete\&quot; this objective if you lose progress after crossing the completion threshold.   If False, once you complete the task it will remain completed forever by locking the value.
   * @return allowValueChangeWhenCompleted
   */
  @javax.annotation.Nullable
  public Boolean getAllowValueChangeWhenCompleted() {
    return allowValueChangeWhenCompleted;
  }

  public void setAllowValueChangeWhenCompleted(Boolean allowValueChangeWhenCompleted) {
    this.allowValueChangeWhenCompleted = allowValueChangeWhenCompleted;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition completedValueStyle(Integer completedValueStyle) {
    this.completedValueStyle = completedValueStyle;
    return this;
  }

  /**
   * The style to use when the objective is completed.
   * @return completedValueStyle
   */
  @javax.annotation.Nullable
  public Integer getCompletedValueStyle() {
    return completedValueStyle;
  }

  public void setCompletedValueStyle(Integer completedValueStyle) {
    this.completedValueStyle = completedValueStyle;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition completionValue(Integer completionValue) {
    this.completionValue = completionValue;
    return this;
  }

  /**
   * The value that the unlock value defined in unlockValueHash must reach in order for the objective to be considered Completed. Used in calculating progress and completion status.
   * @return completionValue
   */
  @javax.annotation.Nullable
  public Integer getCompletionValue() {
    return completionValue;
  }

  public void setCompletionValue(Integer completionValue) {
    this.completionValue = completionValue;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Ideally, this should tell you what your task is. I&#39;m not going to lie to you though. Sometimes this doesn&#39;t have useful information at all. Which sucks, but there&#39;s nothing either of us can do about it.
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition inProgressValueStyle(Integer inProgressValueStyle) {
    this.inProgressValueStyle = inProgressValueStyle;
    return this;
  }

  /**
   * The style to use when the objective is still in progress.
   * @return inProgressValueStyle
   */
  @javax.annotation.Nullable
  public Integer getInProgressValueStyle() {
    return inProgressValueStyle;
  }

  public void setInProgressValueStyle(Integer inProgressValueStyle) {
    this.inProgressValueStyle = inProgressValueStyle;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition isCountingDownward(Boolean isCountingDownward) {
    this.isCountingDownward = isCountingDownward;
    return this;
  }

  /**
   * If true, completion means having an unlock value less than or equal to the completionValue.  If False, completion means having an unlock value greater than or equal to the completionValue.
   * @return isCountingDownward
   */
  @javax.annotation.Nullable
  public Boolean getIsCountingDownward() {
    return isCountingDownward;
  }

  public void setIsCountingDownward(Boolean isCountingDownward) {
    this.isCountingDownward = isCountingDownward;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition locationHash(Integer locationHash) {
    this.locationHash = locationHash;
    return this;
  }

  /**
   * OPTIONAL: a hash identifier for the location at which this objective must be accomplished, if there is a location defined. Look up the DestinyLocationDefinition for this hash for that additional location info.
   * @return locationHash
   */
  @javax.annotation.Nullable
  public Integer getLocationHash() {
    return locationHash;
  }

  public void setLocationHash(Integer locationHash) {
    this.locationHash = locationHash;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition minimumVisibilityThreshold(Integer minimumVisibilityThreshold) {
    this.minimumVisibilityThreshold = minimumVisibilityThreshold;
    return this;
  }

  /**
   * If nonzero, this is the minimum value at which the objective&#39;s progression should be shown. Otherwise, don&#39;t show it yet.
   * @return minimumVisibilityThreshold
   */
  @javax.annotation.Nullable
  public Integer getMinimumVisibilityThreshold() {
    return minimumVisibilityThreshold;
  }

  public void setMinimumVisibilityThreshold(Integer minimumVisibilityThreshold) {
    this.minimumVisibilityThreshold = minimumVisibilityThreshold;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition perks(DestinyDefinitionsDestinyObjectivePerkEntryDefinition perks) {
    this.perks = perks;
    return this;
  }

  /**
   * If this objective enables Perks intrinsically, the conditions for that enabling are defined here.
   * @return perks
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsDestinyObjectivePerkEntryDefinition getPerks() {
    return perks;
  }

  public void setPerks(DestinyDefinitionsDestinyObjectivePerkEntryDefinition perks) {
    this.perks = perks;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition progressDescription(String progressDescription) {
    this.progressDescription = progressDescription;
    return this;
  }

  /**
   * Text to describe the progress bar.
   * @return progressDescription
   */
  @javax.annotation.Nullable
  public String getProgressDescription() {
    return progressDescription;
  }

  public void setProgressDescription(String progressDescription) {
    this.progressDescription = progressDescription;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition scope(Integer scope) {
    this.scope = scope;
    return this;
  }

  /**
   * A shortcut for determining the most restrictive gating that this Objective is set to use. This includes both the dynamic determination of progress and of completion values. See the DestinyGatingScope enum&#39;s documentation for more details.
   * @return scope
   */
  @javax.annotation.Nullable
  public Integer getScope() {
    return scope;
  }

  public void setScope(Integer scope) {
    this.scope = scope;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition showValueOnComplete(Boolean showValueOnComplete) {
    this.showValueOnComplete = showValueOnComplete;
    return this;
  }

  /**
   * If True, you should continue showing the progression value in the UI after it&#39;s complete. I mean, we already do that in BNet anyways, but if you want to be better behaved than us you could honor this flag.
   * @return showValueOnComplete
   */
  @javax.annotation.Nullable
  public Boolean getShowValueOnComplete() {
    return showValueOnComplete;
  }

  public void setShowValueOnComplete(Boolean showValueOnComplete) {
    this.showValueOnComplete = showValueOnComplete;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition stats(DestinyDefinitionsDestinyObjectiveStatEntryDefinition stats) {
    this.stats = stats;
    return this;
  }

  /**
   * If this objective enables modifications on a player&#39;s stats intrinsically, the conditions are defined here.
   * @return stats
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsDestinyObjectiveStatEntryDefinition getStats() {
    return stats;
  }

  public void setStats(DestinyDefinitionsDestinyObjectiveStatEntryDefinition stats) {
    this.stats = stats;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition uiLabel(String uiLabel) {
    this.uiLabel = uiLabel;
    return this;
  }

  /**
   * Objectives can have arbitrary UI-defined identifiers that define the style applied to objectives. For convenience, known UI labels will be defined in the uiStyle enum value.
   * @return uiLabel
   */
  @javax.annotation.Nullable
  public String getUiLabel() {
    return uiLabel;
  }

  public void setUiLabel(String uiLabel) {
    this.uiLabel = uiLabel;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition uiStyle(Integer uiStyle) {
    this.uiStyle = uiStyle;
    return this;
  }

  /**
   * If the objective has a known UI label value, this property will represent it.
   * @return uiStyle
   */
  @javax.annotation.Nullable
  public Integer getUiStyle() {
    return uiStyle;
  }

  public void setUiStyle(Integer uiStyle) {
    this.uiStyle = uiStyle;
  }


  public DestinyDefinitionsDestinyObjectiveDefinition valueStyle(Integer valueStyle) {
    this.valueStyle = valueStyle;
    return this;
  }

  /**
   * The UI style applied to the objective. It&#39;s an enum, take a look at DestinyUnlockValueUIStyle for details of the possible styles. Use this info as you wish to customize your UI.  DEPRECATED: This is no longer populated by Destiny 2 game content. Please use inProgressValueStyle and completedValueStyle instead.
   * @return valueStyle
   */
  @javax.annotation.Nullable
  public Integer getValueStyle() {
    return valueStyle;
  }

  public void setValueStyle(Integer valueStyle) {
    this.valueStyle = valueStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyObjectiveDefinition destinyDefinitionsDestinyObjectiveDefinition = (DestinyDefinitionsDestinyObjectiveDefinition) o;
    return Objects.equals(this.allowNegativeValue, destinyDefinitionsDestinyObjectiveDefinition.allowNegativeValue) &&
        Objects.equals(this.allowOvercompletion, destinyDefinitionsDestinyObjectiveDefinition.allowOvercompletion) &&
        Objects.equals(this.allowValueChangeWhenCompleted, destinyDefinitionsDestinyObjectiveDefinition.allowValueChangeWhenCompleted) &&
        Objects.equals(this.completedValueStyle, destinyDefinitionsDestinyObjectiveDefinition.completedValueStyle) &&
        Objects.equals(this.completionValue, destinyDefinitionsDestinyObjectiveDefinition.completionValue) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinyObjectiveDefinition.displayProperties) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyObjectiveDefinition.hash) &&
        Objects.equals(this.inProgressValueStyle, destinyDefinitionsDestinyObjectiveDefinition.inProgressValueStyle) &&
        Objects.equals(this.index, destinyDefinitionsDestinyObjectiveDefinition.index) &&
        Objects.equals(this.isCountingDownward, destinyDefinitionsDestinyObjectiveDefinition.isCountingDownward) &&
        Objects.equals(this.locationHash, destinyDefinitionsDestinyObjectiveDefinition.locationHash) &&
        Objects.equals(this.minimumVisibilityThreshold, destinyDefinitionsDestinyObjectiveDefinition.minimumVisibilityThreshold) &&
        Objects.equals(this.perks, destinyDefinitionsDestinyObjectiveDefinition.perks) &&
        Objects.equals(this.progressDescription, destinyDefinitionsDestinyObjectiveDefinition.progressDescription) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyObjectiveDefinition.redacted) &&
        Objects.equals(this.scope, destinyDefinitionsDestinyObjectiveDefinition.scope) &&
        Objects.equals(this.showValueOnComplete, destinyDefinitionsDestinyObjectiveDefinition.showValueOnComplete) &&
        Objects.equals(this.stats, destinyDefinitionsDestinyObjectiveDefinition.stats) &&
        Objects.equals(this.uiLabel, destinyDefinitionsDestinyObjectiveDefinition.uiLabel) &&
        Objects.equals(this.uiStyle, destinyDefinitionsDestinyObjectiveDefinition.uiStyle) &&
        Objects.equals(this.valueStyle, destinyDefinitionsDestinyObjectiveDefinition.valueStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowNegativeValue, allowOvercompletion, allowValueChangeWhenCompleted, completedValueStyle, completionValue, displayProperties, hash, inProgressValueStyle, index, isCountingDownward, locationHash, minimumVisibilityThreshold, perks, progressDescription, redacted, scope, showValueOnComplete, stats, uiLabel, uiStyle, valueStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyObjectiveDefinition {\n");
    sb.append("    allowNegativeValue: ").append(toIndentedString(allowNegativeValue)).append("\n");
    sb.append("    allowOvercompletion: ").append(toIndentedString(allowOvercompletion)).append("\n");
    sb.append("    allowValueChangeWhenCompleted: ").append(toIndentedString(allowValueChangeWhenCompleted)).append("\n");
    sb.append("    completedValueStyle: ").append(toIndentedString(completedValueStyle)).append("\n");
    sb.append("    completionValue: ").append(toIndentedString(completionValue)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    inProgressValueStyle: ").append(toIndentedString(inProgressValueStyle)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    isCountingDownward: ").append(toIndentedString(isCountingDownward)).append("\n");
    sb.append("    locationHash: ").append(toIndentedString(locationHash)).append("\n");
    sb.append("    minimumVisibilityThreshold: ").append(toIndentedString(minimumVisibilityThreshold)).append("\n");
    sb.append("    perks: ").append(toIndentedString(perks)).append("\n");
    sb.append("    progressDescription: ").append(toIndentedString(progressDescription)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    showValueOnComplete: ").append(toIndentedString(showValueOnComplete)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    uiLabel: ").append(toIndentedString(uiLabel)).append("\n");
    sb.append("    uiStyle: ").append(toIndentedString(uiStyle)).append("\n");
    sb.append("    valueStyle: ").append(toIndentedString(valueStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowNegativeValue");
    openapiFields.add("allowOvercompletion");
    openapiFields.add("allowValueChangeWhenCompleted");
    openapiFields.add("completedValueStyle");
    openapiFields.add("completionValue");
    openapiFields.add("displayProperties");
    openapiFields.add("hash");
    openapiFields.add("inProgressValueStyle");
    openapiFields.add("index");
    openapiFields.add("isCountingDownward");
    openapiFields.add("locationHash");
    openapiFields.add("minimumVisibilityThreshold");
    openapiFields.add("perks");
    openapiFields.add("progressDescription");
    openapiFields.add("redacted");
    openapiFields.add("scope");
    openapiFields.add("showValueOnComplete");
    openapiFields.add("stats");
    openapiFields.add("uiLabel");
    openapiFields.add("uiStyle");
    openapiFields.add("valueStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyObjectiveDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyObjectiveDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyObjectiveDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyObjectiveDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyObjectiveDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyObjectiveDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      // validate the optional field `perks`
      if (jsonObj.get("perks") != null && !jsonObj.get("perks").isJsonNull()) {
        DestinyDefinitionsDestinyObjectivePerkEntryDefinition.validateJsonElement(jsonObj.get("perks"));
      }
      if ((jsonObj.get("progressDescription") != null && !jsonObj.get("progressDescription").isJsonNull()) && !jsonObj.get("progressDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `progressDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("progressDescription").toString()));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        DestinyDefinitionsDestinyObjectiveStatEntryDefinition.validateJsonElement(jsonObj.get("stats"));
      }
      if ((jsonObj.get("uiLabel") != null && !jsonObj.get("uiLabel").isJsonNull()) && !jsonObj.get("uiLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uiLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uiLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyObjectiveDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyObjectiveDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyObjectiveDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyObjectiveDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyObjectiveDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyObjectiveDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyObjectiveDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyObjectiveDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyObjectiveDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyObjectiveDefinition
   */
  public static DestinyDefinitionsDestinyObjectiveDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyObjectiveDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyObjectiveDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

