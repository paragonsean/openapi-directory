/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyMilestonesDestinyPublicMilestoneActivityVariant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A milestone may have one or more conceptual Activities associated with it, and each of those conceptual activities could have a variety of variants, modes, tiers, what-have-you. Our attempts to determine what qualifies as a conceptual activity are, unfortunately, janky. So if you see missing modes or modes that don&#39;t seem appropriate to you, let us know and I&#39;ll buy you a beer if we ever meet up in person.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyMilestonesDestinyPublicMilestoneActivity {
  public static final String SERIALIZED_NAME_ACTIVITY_HASH = "activityHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_HASH)
  private Integer activityHash;

  public static final String SERIALIZED_NAME_ACTIVITY_MODE_HASH = "activityModeHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_MODE_HASH)
  private Integer activityModeHash;

  /**
   * The enumeration equivalent of the most specific Activity Mode under which this activity is played.
   */
  @JsonAdapter(ActivityModeTypeEnum.Adapter.class)
  public enum ActivityModeTypeEnum {
    NUMBER_0(0),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_19(19),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27),
    
    NUMBER_28(28),
    
    NUMBER_29(29),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_37(37),
    
    NUMBER_38(38),
    
    NUMBER_39(39),
    
    NUMBER_40(40),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_44(44),
    
    NUMBER_45(45),
    
    NUMBER_46(46),
    
    NUMBER_47(47),
    
    NUMBER_48(48),
    
    NUMBER_49(49),
    
    NUMBER_50(50),
    
    NUMBER_51(51),
    
    NUMBER_52(52),
    
    NUMBER_53(53),
    
    NUMBER_54(54),
    
    NUMBER_55(55),
    
    NUMBER_56(56),
    
    NUMBER_57(57),
    
    NUMBER_58(58),
    
    NUMBER_59(59),
    
    NUMBER_60(60),
    
    NUMBER_61(61),
    
    NUMBER_62(62),
    
    NUMBER_63(63),
    
    NUMBER_64(64),
    
    NUMBER_65(65),
    
    NUMBER_66(66),
    
    NUMBER_67(67),
    
    NUMBER_68(68),
    
    NUMBER_69(69),
    
    NUMBER_70(70),
    
    NUMBER_71(71),
    
    NUMBER_72(72),
    
    NUMBER_73(73),
    
    NUMBER_74(74),
    
    NUMBER_75(75),
    
    NUMBER_76(76),
    
    NUMBER_77(77),
    
    NUMBER_78(78),
    
    NUMBER_79(79),
    
    NUMBER_80(80),
    
    NUMBER_81(81),
    
    NUMBER_82(82),
    
    NUMBER_83(83),
    
    NUMBER_84(84),
    
    NUMBER_85(85),
    
    NUMBER_86(86),
    
    NUMBER_87(87),
    
    NUMBER_88(88),
    
    NUMBER_89(89),
    
    NUMBER_90(90),
    
    NUMBER_91(91);

    private Integer value;

    ActivityModeTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActivityModeTypeEnum fromValue(Integer value) {
      for (ActivityModeTypeEnum b : ActivityModeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActivityModeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActivityModeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActivityModeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ActivityModeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ActivityModeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVITY_MODE_TYPE = "activityModeType";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_MODE_TYPE)
  private ActivityModeTypeEnum activityModeType;

  public static final String SERIALIZED_NAME_MODIFIER_HASHES = "modifierHashes";
  @SerializedName(SERIALIZED_NAME_MODIFIER_HASHES)
  private List<Integer> modifierHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIANTS = "variants";
  @SerializedName(SERIALIZED_NAME_VARIANTS)
  private List<DestinyMilestonesDestinyPublicMilestoneActivityVariant> variants = new ArrayList<>();

  public DestinyMilestonesDestinyPublicMilestoneActivity() {
  }

  public DestinyMilestonesDestinyPublicMilestoneActivity activityHash(Integer activityHash) {
    this.activityHash = activityHash;
    return this;
  }

  /**
   * The hash identifier of the activity that&#39;s been chosen to be considered the canonical \&quot;conceptual\&quot; activity definition. This may have many variants, defined herein.
   * @return activityHash
   */
  @javax.annotation.Nullable
  public Integer getActivityHash() {
    return activityHash;
  }

  public void setActivityHash(Integer activityHash) {
    this.activityHash = activityHash;
  }


  public DestinyMilestonesDestinyPublicMilestoneActivity activityModeHash(Integer activityModeHash) {
    this.activityModeHash = activityModeHash;
    return this;
  }

  /**
   * The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it&#39;s not clear what mode the PVP map is being played under. If it&#39;s a playlist, this will be less specific: but hopefully useful in some way.
   * @return activityModeHash
   */
  @javax.annotation.Nullable
  public Integer getActivityModeHash() {
    return activityModeHash;
  }

  public void setActivityModeHash(Integer activityModeHash) {
    this.activityModeHash = activityModeHash;
  }


  public DestinyMilestonesDestinyPublicMilestoneActivity activityModeType(ActivityModeTypeEnum activityModeType) {
    this.activityModeType = activityModeType;
    return this;
  }

  /**
   * The enumeration equivalent of the most specific Activity Mode under which this activity is played.
   * @return activityModeType
   */
  @javax.annotation.Nullable
  public ActivityModeTypeEnum getActivityModeType() {
    return activityModeType;
  }

  public void setActivityModeType(ActivityModeTypeEnum activityModeType) {
    this.activityModeType = activityModeType;
  }


  public DestinyMilestonesDestinyPublicMilestoneActivity modifierHashes(List<Integer> modifierHashes) {
    this.modifierHashes = modifierHashes;
    return this;
  }

  public DestinyMilestonesDestinyPublicMilestoneActivity addModifierHashesItem(Integer modifierHashesItem) {
    if (this.modifierHashes == null) {
      this.modifierHashes = new ArrayList<>();
    }
    this.modifierHashes.add(modifierHashesItem);
    return this;
  }

  /**
   * The activity may have 0-to-many modifiers: if it does, this will contain the hashes to the DestinyActivityModifierDefinition that defines the modifier being applied.
   * @return modifierHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getModifierHashes() {
    return modifierHashes;
  }

  public void setModifierHashes(List<Integer> modifierHashes) {
    this.modifierHashes = modifierHashes;
  }


  public DestinyMilestonesDestinyPublicMilestoneActivity variants(List<DestinyMilestonesDestinyPublicMilestoneActivityVariant> variants) {
    this.variants = variants;
    return this;
  }

  public DestinyMilestonesDestinyPublicMilestoneActivity addVariantsItem(DestinyMilestonesDestinyPublicMilestoneActivityVariant variantsItem) {
    if (this.variants == null) {
      this.variants = new ArrayList<>();
    }
    this.variants.add(variantsItem);
    return this;
  }

  /**
   * Every relevant variation of this conceptual activity, including the conceptual activity itself, have variants defined here.
   * @return variants
   */
  @javax.annotation.Nullable
  public List<DestinyMilestonesDestinyPublicMilestoneActivityVariant> getVariants() {
    return variants;
  }

  public void setVariants(List<DestinyMilestonesDestinyPublicMilestoneActivityVariant> variants) {
    this.variants = variants;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyMilestonesDestinyPublicMilestoneActivity destinyMilestonesDestinyPublicMilestoneActivity = (DestinyMilestonesDestinyPublicMilestoneActivity) o;
    return Objects.equals(this.activityHash, destinyMilestonesDestinyPublicMilestoneActivity.activityHash) &&
        Objects.equals(this.activityModeHash, destinyMilestonesDestinyPublicMilestoneActivity.activityModeHash) &&
        Objects.equals(this.activityModeType, destinyMilestonesDestinyPublicMilestoneActivity.activityModeType) &&
        Objects.equals(this.modifierHashes, destinyMilestonesDestinyPublicMilestoneActivity.modifierHashes) &&
        Objects.equals(this.variants, destinyMilestonesDestinyPublicMilestoneActivity.variants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityHash, activityModeHash, activityModeType, modifierHashes, variants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyMilestonesDestinyPublicMilestoneActivity {\n");
    sb.append("    activityHash: ").append(toIndentedString(activityHash)).append("\n");
    sb.append("    activityModeHash: ").append(toIndentedString(activityModeHash)).append("\n");
    sb.append("    activityModeType: ").append(toIndentedString(activityModeType)).append("\n");
    sb.append("    modifierHashes: ").append(toIndentedString(modifierHashes)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityHash");
    openapiFields.add("activityModeHash");
    openapiFields.add("activityModeType");
    openapiFields.add("modifierHashes");
    openapiFields.add("variants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyMilestonesDestinyPublicMilestoneActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyMilestonesDestinyPublicMilestoneActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyMilestonesDestinyPublicMilestoneActivity is not found in the empty JSON string", DestinyMilestonesDestinyPublicMilestoneActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyMilestonesDestinyPublicMilestoneActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyMilestonesDestinyPublicMilestoneActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activityModeType`
      if (jsonObj.get("activityModeType") != null && !jsonObj.get("activityModeType").isJsonNull()) {
        ActivityModeTypeEnum.validateJsonElement(jsonObj.get("activityModeType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modifierHashes") != null && !jsonObj.get("modifierHashes").isJsonNull() && !jsonObj.get("modifierHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifierHashes` to be an array in the JSON string but got `%s`", jsonObj.get("modifierHashes").toString()));
      }
      if (jsonObj.get("variants") != null && !jsonObj.get("variants").isJsonNull()) {
        JsonArray jsonArrayvariants = jsonObj.getAsJsonArray("variants");
        if (jsonArrayvariants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variants` to be an array in the JSON string but got `%s`", jsonObj.get("variants").toString()));
          }

          // validate the optional field `variants` (array)
          for (int i = 0; i < jsonArrayvariants.size(); i++) {
            DestinyMilestonesDestinyPublicMilestoneActivityVariant.validateJsonElement(jsonArrayvariants.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyMilestonesDestinyPublicMilestoneActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyMilestonesDestinyPublicMilestoneActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyMilestonesDestinyPublicMilestoneActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyMilestonesDestinyPublicMilestoneActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyMilestonesDestinyPublicMilestoneActivity>() {
           @Override
           public void write(JsonWriter out, DestinyMilestonesDestinyPublicMilestoneActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyMilestonesDestinyPublicMilestoneActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyMilestonesDestinyPublicMilestoneActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyMilestonesDestinyPublicMilestoneActivity
   * @throws IOException if the JSON string is invalid with respect to DestinyMilestonesDestinyPublicMilestoneActivity
   */
  public static DestinyMilestonesDestinyPublicMilestoneActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyMilestonesDestinyPublicMilestoneActivity.class);
  }

  /**
   * Convert an instance of DestinyMilestonesDestinyPublicMilestoneActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

