/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If you want to report a player causing trouble in a game, this request will let you report that player and the specific PGCR in which the trouble was caused, along with why.  Please don&#39;t do this just because you dislike the person! I mean, I know people will do it anyways, but can you like take a good walk, or put a curse on them or something? Do me a solid and reconsider.  Note that this request object doesn&#39;t have the actual PGCR ID nor your Account/Character ID in it. We will infer that information from your authentication information and the PGCR ID that you pass into the URL of the reporting endpoint itself.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyReportingRequestsDestinyReportOffensePgcrRequest {
  public static final String SERIALIZED_NAME_OFFENDING_CHARACTER_ID = "offendingCharacterId";
  @SerializedName(SERIALIZED_NAME_OFFENDING_CHARACTER_ID)
  private Long offendingCharacterId;

  public static final String SERIALIZED_NAME_REASON_CATEGORY_HASHES = "reasonCategoryHashes";
  @SerializedName(SERIALIZED_NAME_REASON_CATEGORY_HASHES)
  private List<Integer> reasonCategoryHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REASON_HASHES = "reasonHashes";
  @SerializedName(SERIALIZED_NAME_REASON_HASHES)
  private List<Integer> reasonHashes = new ArrayList<>();

  public DestinyReportingRequestsDestinyReportOffensePgcrRequest() {
  }

  public DestinyReportingRequestsDestinyReportOffensePgcrRequest offendingCharacterId(Long offendingCharacterId) {
    this.offendingCharacterId = offendingCharacterId;
    return this;
  }

  /**
   * Within the PGCR provided when calling the Reporting endpoint, this should be the character ID of the user that you thought was violating terms of use. They must exist in the PGCR provided.
   * @return offendingCharacterId
   */
  @javax.annotation.Nullable
  public Long getOffendingCharacterId() {
    return offendingCharacterId;
  }

  public void setOffendingCharacterId(Long offendingCharacterId) {
    this.offendingCharacterId = offendingCharacterId;
  }


  public DestinyReportingRequestsDestinyReportOffensePgcrRequest reasonCategoryHashes(List<Integer> reasonCategoryHashes) {
    this.reasonCategoryHashes = reasonCategoryHashes;
    return this;
  }

  public DestinyReportingRequestsDestinyReportOffensePgcrRequest addReasonCategoryHashesItem(Integer reasonCategoryHashesItem) {
    if (this.reasonCategoryHashes == null) {
      this.reasonCategoryHashes = new ArrayList<>();
    }
    this.reasonCategoryHashes.add(reasonCategoryHashesItem);
    return this;
  }

  /**
   * So you&#39;ve decided to report someone instead of cursing them and their descendants. Well, okay then. This is the category or categorie(s) of infractions for which you are reporting the user. These are hash identifiers that map to DestinyReportReasonCategoryDefinition entries.
   * @return reasonCategoryHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getReasonCategoryHashes() {
    return reasonCategoryHashes;
  }

  public void setReasonCategoryHashes(List<Integer> reasonCategoryHashes) {
    this.reasonCategoryHashes = reasonCategoryHashes;
  }


  public DestinyReportingRequestsDestinyReportOffensePgcrRequest reasonHashes(List<Integer> reasonHashes) {
    this.reasonHashes = reasonHashes;
    return this;
  }

  public DestinyReportingRequestsDestinyReportOffensePgcrRequest addReasonHashesItem(Integer reasonHashesItem) {
    if (this.reasonHashes == null) {
      this.reasonHashes = new ArrayList<>();
    }
    this.reasonHashes.add(reasonHashesItem);
    return this;
  }

  /**
   * If applicable, provide a more specific reason(s) within the general category of problems provided by the reasonHash. This is also an identifier for a reason. All reasonHashes provided must be children of at least one the reasonCategoryHashes provided.
   * @return reasonHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getReasonHashes() {
    return reasonHashes;
  }

  public void setReasonHashes(List<Integer> reasonHashes) {
    this.reasonHashes = reasonHashes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyReportingRequestsDestinyReportOffensePgcrRequest destinyReportingRequestsDestinyReportOffensePgcrRequest = (DestinyReportingRequestsDestinyReportOffensePgcrRequest) o;
    return Objects.equals(this.offendingCharacterId, destinyReportingRequestsDestinyReportOffensePgcrRequest.offendingCharacterId) &&
        Objects.equals(this.reasonCategoryHashes, destinyReportingRequestsDestinyReportOffensePgcrRequest.reasonCategoryHashes) &&
        Objects.equals(this.reasonHashes, destinyReportingRequestsDestinyReportOffensePgcrRequest.reasonHashes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offendingCharacterId, reasonCategoryHashes, reasonHashes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyReportingRequestsDestinyReportOffensePgcrRequest {\n");
    sb.append("    offendingCharacterId: ").append(toIndentedString(offendingCharacterId)).append("\n");
    sb.append("    reasonCategoryHashes: ").append(toIndentedString(reasonCategoryHashes)).append("\n");
    sb.append("    reasonHashes: ").append(toIndentedString(reasonHashes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("offendingCharacterId");
    openapiFields.add("reasonCategoryHashes");
    openapiFields.add("reasonHashes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyReportingRequestsDestinyReportOffensePgcrRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyReportingRequestsDestinyReportOffensePgcrRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyReportingRequestsDestinyReportOffensePgcrRequest is not found in the empty JSON string", DestinyReportingRequestsDestinyReportOffensePgcrRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyReportingRequestsDestinyReportOffensePgcrRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyReportingRequestsDestinyReportOffensePgcrRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("reasonCategoryHashes") != null && !jsonObj.get("reasonCategoryHashes").isJsonNull() && !jsonObj.get("reasonCategoryHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonCategoryHashes` to be an array in the JSON string but got `%s`", jsonObj.get("reasonCategoryHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reasonHashes") != null && !jsonObj.get("reasonHashes").isJsonNull() && !jsonObj.get("reasonHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonHashes` to be an array in the JSON string but got `%s`", jsonObj.get("reasonHashes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyReportingRequestsDestinyReportOffensePgcrRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyReportingRequestsDestinyReportOffensePgcrRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyReportingRequestsDestinyReportOffensePgcrRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyReportingRequestsDestinyReportOffensePgcrRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyReportingRequestsDestinyReportOffensePgcrRequest>() {
           @Override
           public void write(JsonWriter out, DestinyReportingRequestsDestinyReportOffensePgcrRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyReportingRequestsDestinyReportOffensePgcrRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyReportingRequestsDestinyReportOffensePgcrRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyReportingRequestsDestinyReportOffensePgcrRequest
   * @throws IOException if the JSON string is invalid with respect to DestinyReportingRequestsDestinyReportOffensePgcrRequest
   */
  public static DestinyReportingRequestsDestinyReportOffensePgcrRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyReportingRequestsDestinyReportOffensePgcrRequest.class);
  }

  /**
   * Convert an instance of DestinyReportingRequestsDestinyReportOffensePgcrRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

