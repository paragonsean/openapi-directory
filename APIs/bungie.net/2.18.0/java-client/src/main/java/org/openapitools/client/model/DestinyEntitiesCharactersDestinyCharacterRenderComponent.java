/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyCharacterDestinyCharacterCustomization;
import org.openapitools.client.model.DestinyCharacterDestinyCharacterPeerView;
import org.openapitools.client.model.DestinyDyeReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Only really useful if you&#39;re attempting to render the character&#39;s current appearance in 3D, this returns a bare minimum of information, pre-aggregated, that you&#39;ll need to perform that rendering. Note that you need to combine this with other 3D assets and data from our servers.  Examine the Javascript returned by https://bungie.net/sharedbundle/spasm to see how we use this data, but be warned: the rabbit hole goes pretty deep.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyEntitiesCharactersDestinyCharacterRenderComponent {
  public static final String SERIALIZED_NAME_CUSTOM_DYES = "customDyes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DYES)
  private List<DestinyDyeReference> customDyes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMIZATION = "customization";
  @SerializedName(SERIALIZED_NAME_CUSTOMIZATION)
  private DestinyCharacterDestinyCharacterCustomization customization;

  public static final String SERIALIZED_NAME_PEER_VIEW = "peerView";
  @SerializedName(SERIALIZED_NAME_PEER_VIEW)
  private DestinyCharacterDestinyCharacterPeerView peerView;

  public DestinyEntitiesCharactersDestinyCharacterRenderComponent() {
  }

  public DestinyEntitiesCharactersDestinyCharacterRenderComponent customDyes(List<DestinyDyeReference> customDyes) {
    this.customDyes = customDyes;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterRenderComponent addCustomDyesItem(DestinyDyeReference customDyesItem) {
    if (this.customDyes == null) {
      this.customDyes = new ArrayList<>();
    }
    this.customDyes.add(customDyesItem);
    return this;
  }

  /**
   * Custom dyes, calculated by iterating over the character&#39;s equipped items. Useful for pre-fetching all of the dye data needed from our server.
   * @return customDyes
   */
  @javax.annotation.Nullable
  public List<DestinyDyeReference> getCustomDyes() {
    return customDyes;
  }

  public void setCustomDyes(List<DestinyDyeReference> customDyes) {
    this.customDyes = customDyes;
  }


  public DestinyEntitiesCharactersDestinyCharacterRenderComponent customization(DestinyCharacterDestinyCharacterCustomization customization) {
    this.customization = customization;
    return this;
  }

  /**
   * This is actually something that Spasm.js *doesn&#39;t* do right now, and that we don&#39;t return assets for yet. This is the data about what character customization options you picked. You can combine this with DestinyCharacterCustomizationOptionDefinition to show some cool info, and hopefully someday to actually render a user&#39;s face in 3D. We&#39;ll see if we ever end up with time for that.
   * @return customization
   */
  @javax.annotation.Nullable
  public DestinyCharacterDestinyCharacterCustomization getCustomization() {
    return customization;
  }

  public void setCustomization(DestinyCharacterDestinyCharacterCustomization customization) {
    this.customization = customization;
  }


  public DestinyEntitiesCharactersDestinyCharacterRenderComponent peerView(DestinyCharacterDestinyCharacterPeerView peerView) {
    this.peerView = peerView;
    return this;
  }

  /**
   * A minimal view of:  - Equipped items  - The rendering-related custom options on those equipped items  Combined, that should be enough to render all of the items on the equipped character.
   * @return peerView
   */
  @javax.annotation.Nullable
  public DestinyCharacterDestinyCharacterPeerView getPeerView() {
    return peerView;
  }

  public void setPeerView(DestinyCharacterDestinyCharacterPeerView peerView) {
    this.peerView = peerView;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesCharactersDestinyCharacterRenderComponent destinyEntitiesCharactersDestinyCharacterRenderComponent = (DestinyEntitiesCharactersDestinyCharacterRenderComponent) o;
    return Objects.equals(this.customDyes, destinyEntitiesCharactersDestinyCharacterRenderComponent.customDyes) &&
        Objects.equals(this.customization, destinyEntitiesCharactersDestinyCharacterRenderComponent.customization) &&
        Objects.equals(this.peerView, destinyEntitiesCharactersDestinyCharacterRenderComponent.peerView);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customDyes, customization, peerView);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesCharactersDestinyCharacterRenderComponent {\n");
    sb.append("    customDyes: ").append(toIndentedString(customDyes)).append("\n");
    sb.append("    customization: ").append(toIndentedString(customization)).append("\n");
    sb.append("    peerView: ").append(toIndentedString(peerView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customDyes");
    openapiFields.add("customization");
    openapiFields.add("peerView");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyEntitiesCharactersDestinyCharacterRenderComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyEntitiesCharactersDestinyCharacterRenderComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyEntitiesCharactersDestinyCharacterRenderComponent is not found in the empty JSON string", DestinyEntitiesCharactersDestinyCharacterRenderComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyEntitiesCharactersDestinyCharacterRenderComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyEntitiesCharactersDestinyCharacterRenderComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customDyes") != null && !jsonObj.get("customDyes").isJsonNull()) {
        JsonArray jsonArraycustomDyes = jsonObj.getAsJsonArray("customDyes");
        if (jsonArraycustomDyes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customDyes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customDyes` to be an array in the JSON string but got `%s`", jsonObj.get("customDyes").toString()));
          }

          // validate the optional field `customDyes` (array)
          for (int i = 0; i < jsonArraycustomDyes.size(); i++) {
            DestinyDyeReference.validateJsonElement(jsonArraycustomDyes.get(i));
          };
        }
      }
      // validate the optional field `customization`
      if (jsonObj.get("customization") != null && !jsonObj.get("customization").isJsonNull()) {
        DestinyCharacterDestinyCharacterCustomization.validateJsonElement(jsonObj.get("customization"));
      }
      // validate the optional field `peerView`
      if (jsonObj.get("peerView") != null && !jsonObj.get("peerView").isJsonNull()) {
        DestinyCharacterDestinyCharacterPeerView.validateJsonElement(jsonObj.get("peerView"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyEntitiesCharactersDestinyCharacterRenderComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyEntitiesCharactersDestinyCharacterRenderComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyEntitiesCharactersDestinyCharacterRenderComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyEntitiesCharactersDestinyCharacterRenderComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyEntitiesCharactersDestinyCharacterRenderComponent>() {
           @Override
           public void write(JsonWriter out, DestinyEntitiesCharactersDestinyCharacterRenderComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyEntitiesCharactersDestinyCharacterRenderComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyEntitiesCharactersDestinyCharacterRenderComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyEntitiesCharactersDestinyCharacterRenderComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyEntitiesCharactersDestinyCharacterRenderComponent
   */
  public static DestinyEntitiesCharactersDestinyCharacterRenderComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyEntitiesCharactersDestinyCharacterRenderComponent.class);
  }

  /**
   * Convert an instance of DestinyEntitiesCharactersDestinyCharacterRenderComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

