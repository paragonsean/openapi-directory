/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.UserEmailOptInDefinition;
import org.openapitools.client.model.UserEmailSubscriptionDefinition;
import org.openapitools.client.model.UserEmailViewDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The set of all email subscription/opt-in settings and definitions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserEmailSettings {
  public static final String SERIALIZED_NAME_OPT_IN_DEFINITIONS = "optInDefinitions";
  @SerializedName(SERIALIZED_NAME_OPT_IN_DEFINITIONS)
  private Map<String, UserEmailOptInDefinition> optInDefinitions = new HashMap<>();

  public static final String SERIALIZED_NAME_SUBSCRIPTION_DEFINITIONS = "subscriptionDefinitions";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_DEFINITIONS)
  private Map<String, UserEmailSubscriptionDefinition> subscriptionDefinitions = new HashMap<>();

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private Map<String, UserEmailViewDefinition> views = new HashMap<>();

  public UserEmailSettings() {
  }

  public UserEmailSettings optInDefinitions(Map<String, UserEmailOptInDefinition> optInDefinitions) {
    this.optInDefinitions = optInDefinitions;
    return this;
  }

  public UserEmailSettings putOptInDefinitionsItem(String key, UserEmailOptInDefinition optInDefinitionsItem) {
    if (this.optInDefinitions == null) {
      this.optInDefinitions = new HashMap<>();
    }
    this.optInDefinitions.put(key, optInDefinitionsItem);
    return this;
  }

  /**
   * Keyed by the name identifier of the opt-in definition.
   * @return optInDefinitions
   */
  @javax.annotation.Nullable
  public Map<String, UserEmailOptInDefinition> getOptInDefinitions() {
    return optInDefinitions;
  }

  public void setOptInDefinitions(Map<String, UserEmailOptInDefinition> optInDefinitions) {
    this.optInDefinitions = optInDefinitions;
  }


  public UserEmailSettings subscriptionDefinitions(Map<String, UserEmailSubscriptionDefinition> subscriptionDefinitions) {
    this.subscriptionDefinitions = subscriptionDefinitions;
    return this;
  }

  public UserEmailSettings putSubscriptionDefinitionsItem(String key, UserEmailSubscriptionDefinition subscriptionDefinitionsItem) {
    if (this.subscriptionDefinitions == null) {
      this.subscriptionDefinitions = new HashMap<>();
    }
    this.subscriptionDefinitions.put(key, subscriptionDefinitionsItem);
    return this;
  }

  /**
   * Keyed by the name identifier of the Subscription definition.
   * @return subscriptionDefinitions
   */
  @javax.annotation.Nullable
  public Map<String, UserEmailSubscriptionDefinition> getSubscriptionDefinitions() {
    return subscriptionDefinitions;
  }

  public void setSubscriptionDefinitions(Map<String, UserEmailSubscriptionDefinition> subscriptionDefinitions) {
    this.subscriptionDefinitions = subscriptionDefinitions;
  }


  public UserEmailSettings views(Map<String, UserEmailViewDefinition> views) {
    this.views = views;
    return this;
  }

  public UserEmailSettings putViewsItem(String key, UserEmailViewDefinition viewsItem) {
    if (this.views == null) {
      this.views = new HashMap<>();
    }
    this.views.put(key, viewsItem);
    return this;
  }

  /**
   * Keyed by the name identifier of the View definition.
   * @return views
   */
  @javax.annotation.Nullable
  public Map<String, UserEmailViewDefinition> getViews() {
    return views;
  }

  public void setViews(Map<String, UserEmailViewDefinition> views) {
    this.views = views;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserEmailSettings userEmailSettings = (UserEmailSettings) o;
    return Objects.equals(this.optInDefinitions, userEmailSettings.optInDefinitions) &&
        Objects.equals(this.subscriptionDefinitions, userEmailSettings.subscriptionDefinitions) &&
        Objects.equals(this.views, userEmailSettings.views);
  }

  @Override
  public int hashCode() {
    return Objects.hash(optInDefinitions, subscriptionDefinitions, views);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserEmailSettings {\n");
    sb.append("    optInDefinitions: ").append(toIndentedString(optInDefinitions)).append("\n");
    sb.append("    subscriptionDefinitions: ").append(toIndentedString(subscriptionDefinitions)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("optInDefinitions");
    openapiFields.add("subscriptionDefinitions");
    openapiFields.add("views");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserEmailSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserEmailSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserEmailSettings is not found in the empty JSON string", UserEmailSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserEmailSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserEmailSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserEmailSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserEmailSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserEmailSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserEmailSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<UserEmailSettings>() {
           @Override
           public void write(JsonWriter out, UserEmailSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserEmailSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserEmailSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserEmailSettings
   * @throws IOException if the JSON string is invalid with respect to UserEmailSettings
   */
  public static UserEmailSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserEmailSettings.class);
  }

  /**
   * Convert an instance of UserEmailSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

