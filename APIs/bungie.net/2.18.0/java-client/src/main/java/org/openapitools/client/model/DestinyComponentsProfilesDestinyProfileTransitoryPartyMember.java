/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is some bare minimum information about a party member in a Fireteam. Unfortunately, without great computational expense on our side we can only get at the data contained here. I&#39;d like to give you a character ID for example, but we don&#39;t have it. But we do have these three pieces of information. May they help you on your quest to show meaningful data about current Fireteams.  Notably, we don&#39;t and can&#39;t feasibly return info on characters. If you can, try to use just the data below for your UI and purposes. Only hit us with further queries if you absolutely must know the character ID of the currently playing character. Pretty please with sugar on top.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyComponentsProfilesDestinyProfileTransitoryPartyMember {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMBLEM_HASH = "emblemHash";
  @SerializedName(SERIALIZED_NAME_EMBLEM_HASH)
  private Integer emblemHash;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ID = "membershipId";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ID)
  private Long membershipId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public DestinyComponentsProfilesDestinyProfileTransitoryPartyMember() {
  }

  public DestinyComponentsProfilesDestinyProfileTransitoryPartyMember displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The player&#39;s last known display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryPartyMember emblemHash(Integer emblemHash) {
    this.emblemHash = emblemHash;
    return this;
  }

  /**
   * The identifier for the DestinyInventoryItemDefinition of the player&#39;s emblem.
   * @return emblemHash
   */
  @javax.annotation.Nullable
  public Integer getEmblemHash() {
    return emblemHash;
  }

  public void setEmblemHash(Integer emblemHash) {
    this.emblemHash = emblemHash;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryPartyMember membershipId(Long membershipId) {
    this.membershipId = membershipId;
    return this;
  }

  /**
   * The Membership ID that matches the party member.
   * @return membershipId
   */
  @javax.annotation.Nullable
  public Long getMembershipId() {
    return membershipId;
  }

  public void setMembershipId(Long membershipId) {
    this.membershipId = membershipId;
  }


  public DestinyComponentsProfilesDestinyProfileTransitoryPartyMember status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * A Flags Enumeration value indicating the states that the player is in relevant to being on a fireteam.
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyComponentsProfilesDestinyProfileTransitoryPartyMember destinyComponentsProfilesDestinyProfileTransitoryPartyMember = (DestinyComponentsProfilesDestinyProfileTransitoryPartyMember) o;
    return Objects.equals(this.displayName, destinyComponentsProfilesDestinyProfileTransitoryPartyMember.displayName) &&
        Objects.equals(this.emblemHash, destinyComponentsProfilesDestinyProfileTransitoryPartyMember.emblemHash) &&
        Objects.equals(this.membershipId, destinyComponentsProfilesDestinyProfileTransitoryPartyMember.membershipId) &&
        Objects.equals(this.status, destinyComponentsProfilesDestinyProfileTransitoryPartyMember.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, emblemHash, membershipId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyComponentsProfilesDestinyProfileTransitoryPartyMember {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    emblemHash: ").append(toIndentedString(emblemHash)).append("\n");
    sb.append("    membershipId: ").append(toIndentedString(membershipId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("emblemHash");
    openapiFields.add("membershipId");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyComponentsProfilesDestinyProfileTransitoryPartyMember
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyComponentsProfilesDestinyProfileTransitoryPartyMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyComponentsProfilesDestinyProfileTransitoryPartyMember is not found in the empty JSON string", DestinyComponentsProfilesDestinyProfileTransitoryPartyMember.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyComponentsProfilesDestinyProfileTransitoryPartyMember.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyComponentsProfilesDestinyProfileTransitoryPartyMember` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyComponentsProfilesDestinyProfileTransitoryPartyMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyComponentsProfilesDestinyProfileTransitoryPartyMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyComponentsProfilesDestinyProfileTransitoryPartyMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyComponentsProfilesDestinyProfileTransitoryPartyMember.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyComponentsProfilesDestinyProfileTransitoryPartyMember>() {
           @Override
           public void write(JsonWriter out, DestinyComponentsProfilesDestinyProfileTransitoryPartyMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyComponentsProfilesDestinyProfileTransitoryPartyMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyComponentsProfilesDestinyProfileTransitoryPartyMember given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyComponentsProfilesDestinyProfileTransitoryPartyMember
   * @throws IOException if the JSON string is invalid with respect to DestinyComponentsProfilesDestinyProfileTransitoryPartyMember
   */
  public static DestinyComponentsProfilesDestinyProfileTransitoryPartyMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyComponentsProfilesDestinyProfileTransitoryPartyMember.class);
  }

  /**
   * Convert an instance of DestinyComponentsProfilesDestinyProfileTransitoryPartyMember to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

