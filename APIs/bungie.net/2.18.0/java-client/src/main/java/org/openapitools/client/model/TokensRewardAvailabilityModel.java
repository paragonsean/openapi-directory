/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsRecordsDestinyRecordDefinition;
import org.openapitools.client.model.TokensCollectibleDefinitions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TokensRewardAvailabilityModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TokensRewardAvailabilityModel {
  public static final String SERIALIZED_NAME_COLLECTIBLE_DEFINITIONS = "CollectibleDefinitions";
  @SerializedName(SERIALIZED_NAME_COLLECTIBLE_DEFINITIONS)
  private List<TokensCollectibleDefinitions> collectibleDefinitions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DECRYPTED_TOKEN = "DecryptedToken";
  @SerializedName(SERIALIZED_NAME_DECRYPTED_TOKEN)
  private String decryptedToken;

  public static final String SERIALIZED_NAME_GAME_EARN_BY_DATE = "GameEarnByDate";
  @SerializedName(SERIALIZED_NAME_GAME_EARN_BY_DATE)
  private OffsetDateTime gameEarnByDate;

  public static final String SERIALIZED_NAME_HAS_EXISTING_CODE = "HasExistingCode";
  @SerializedName(SERIALIZED_NAME_HAS_EXISTING_CODE)
  private Boolean hasExistingCode;

  public static final String SERIALIZED_NAME_HAS_OFFER = "HasOffer";
  @SerializedName(SERIALIZED_NAME_HAS_OFFER)
  private Boolean hasOffer;

  public static final String SERIALIZED_NAME_IS_LOYALTY_REWARD = "IsLoyaltyReward";
  @SerializedName(SERIALIZED_NAME_IS_LOYALTY_REWARD)
  private Boolean isLoyaltyReward;

  public static final String SERIALIZED_NAME_IS_OFFER = "IsOffer";
  @SerializedName(SERIALIZED_NAME_IS_OFFER)
  private Boolean isOffer;

  public static final String SERIALIZED_NAME_OFFER_APPLIED = "OfferApplied";
  @SerializedName(SERIALIZED_NAME_OFFER_APPLIED)
  private Boolean offerApplied;

  public static final String SERIALIZED_NAME_RECORD_DEFINITIONS = "RecordDefinitions";
  @SerializedName(SERIALIZED_NAME_RECORD_DEFINITIONS)
  private List<DestinyDefinitionsRecordsDestinyRecordDefinition> recordDefinitions = new ArrayList<>();

  public static final String SERIALIZED_NAME_REDEMPTION_END_DATE = "RedemptionEndDate";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_END_DATE)
  private OffsetDateTime redemptionEndDate;

  public static final String SERIALIZED_NAME_SHOPIFY_END_DATE = "ShopifyEndDate";
  @SerializedName(SERIALIZED_NAME_SHOPIFY_END_DATE)
  private OffsetDateTime shopifyEndDate;

  public TokensRewardAvailabilityModel() {
  }

  public TokensRewardAvailabilityModel collectibleDefinitions(List<TokensCollectibleDefinitions> collectibleDefinitions) {
    this.collectibleDefinitions = collectibleDefinitions;
    return this;
  }

  public TokensRewardAvailabilityModel addCollectibleDefinitionsItem(TokensCollectibleDefinitions collectibleDefinitionsItem) {
    if (this.collectibleDefinitions == null) {
      this.collectibleDefinitions = new ArrayList<>();
    }
    this.collectibleDefinitions.add(collectibleDefinitionsItem);
    return this;
  }

  /**
   * Get collectibleDefinitions
   * @return collectibleDefinitions
   */
  @javax.annotation.Nullable
  public List<TokensCollectibleDefinitions> getCollectibleDefinitions() {
    return collectibleDefinitions;
  }

  public void setCollectibleDefinitions(List<TokensCollectibleDefinitions> collectibleDefinitions) {
    this.collectibleDefinitions = collectibleDefinitions;
  }


  public TokensRewardAvailabilityModel decryptedToken(String decryptedToken) {
    this.decryptedToken = decryptedToken;
    return this;
  }

  /**
   * Get decryptedToken
   * @return decryptedToken
   */
  @javax.annotation.Nullable
  public String getDecryptedToken() {
    return decryptedToken;
  }

  public void setDecryptedToken(String decryptedToken) {
    this.decryptedToken = decryptedToken;
  }


  public TokensRewardAvailabilityModel gameEarnByDate(OffsetDateTime gameEarnByDate) {
    this.gameEarnByDate = gameEarnByDate;
    return this;
  }

  /**
   * Get gameEarnByDate
   * @return gameEarnByDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getGameEarnByDate() {
    return gameEarnByDate;
  }

  public void setGameEarnByDate(OffsetDateTime gameEarnByDate) {
    this.gameEarnByDate = gameEarnByDate;
  }


  public TokensRewardAvailabilityModel hasExistingCode(Boolean hasExistingCode) {
    this.hasExistingCode = hasExistingCode;
    return this;
  }

  /**
   * Get hasExistingCode
   * @return hasExistingCode
   */
  @javax.annotation.Nullable
  public Boolean getHasExistingCode() {
    return hasExistingCode;
  }

  public void setHasExistingCode(Boolean hasExistingCode) {
    this.hasExistingCode = hasExistingCode;
  }


  public TokensRewardAvailabilityModel hasOffer(Boolean hasOffer) {
    this.hasOffer = hasOffer;
    return this;
  }

  /**
   * Get hasOffer
   * @return hasOffer
   */
  @javax.annotation.Nullable
  public Boolean getHasOffer() {
    return hasOffer;
  }

  public void setHasOffer(Boolean hasOffer) {
    this.hasOffer = hasOffer;
  }


  public TokensRewardAvailabilityModel isLoyaltyReward(Boolean isLoyaltyReward) {
    this.isLoyaltyReward = isLoyaltyReward;
    return this;
  }

  /**
   * Get isLoyaltyReward
   * @return isLoyaltyReward
   */
  @javax.annotation.Nullable
  public Boolean getIsLoyaltyReward() {
    return isLoyaltyReward;
  }

  public void setIsLoyaltyReward(Boolean isLoyaltyReward) {
    this.isLoyaltyReward = isLoyaltyReward;
  }


  public TokensRewardAvailabilityModel isOffer(Boolean isOffer) {
    this.isOffer = isOffer;
    return this;
  }

  /**
   * Get isOffer
   * @return isOffer
   */
  @javax.annotation.Nullable
  public Boolean getIsOffer() {
    return isOffer;
  }

  public void setIsOffer(Boolean isOffer) {
    this.isOffer = isOffer;
  }


  public TokensRewardAvailabilityModel offerApplied(Boolean offerApplied) {
    this.offerApplied = offerApplied;
    return this;
  }

  /**
   * Get offerApplied
   * @return offerApplied
   */
  @javax.annotation.Nullable
  public Boolean getOfferApplied() {
    return offerApplied;
  }

  public void setOfferApplied(Boolean offerApplied) {
    this.offerApplied = offerApplied;
  }


  public TokensRewardAvailabilityModel recordDefinitions(List<DestinyDefinitionsRecordsDestinyRecordDefinition> recordDefinitions) {
    this.recordDefinitions = recordDefinitions;
    return this;
  }

  public TokensRewardAvailabilityModel addRecordDefinitionsItem(DestinyDefinitionsRecordsDestinyRecordDefinition recordDefinitionsItem) {
    if (this.recordDefinitions == null) {
      this.recordDefinitions = new ArrayList<>();
    }
    this.recordDefinitions.add(recordDefinitionsItem);
    return this;
  }

  /**
   * Get recordDefinitions
   * @return recordDefinitions
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsRecordsDestinyRecordDefinition> getRecordDefinitions() {
    return recordDefinitions;
  }

  public void setRecordDefinitions(List<DestinyDefinitionsRecordsDestinyRecordDefinition> recordDefinitions) {
    this.recordDefinitions = recordDefinitions;
  }


  public TokensRewardAvailabilityModel redemptionEndDate(OffsetDateTime redemptionEndDate) {
    this.redemptionEndDate = redemptionEndDate;
    return this;
  }

  /**
   * Get redemptionEndDate
   * @return redemptionEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRedemptionEndDate() {
    return redemptionEndDate;
  }

  public void setRedemptionEndDate(OffsetDateTime redemptionEndDate) {
    this.redemptionEndDate = redemptionEndDate;
  }


  public TokensRewardAvailabilityModel shopifyEndDate(OffsetDateTime shopifyEndDate) {
    this.shopifyEndDate = shopifyEndDate;
    return this;
  }

  /**
   * Get shopifyEndDate
   * @return shopifyEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShopifyEndDate() {
    return shopifyEndDate;
  }

  public void setShopifyEndDate(OffsetDateTime shopifyEndDate) {
    this.shopifyEndDate = shopifyEndDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokensRewardAvailabilityModel tokensRewardAvailabilityModel = (TokensRewardAvailabilityModel) o;
    return Objects.equals(this.collectibleDefinitions, tokensRewardAvailabilityModel.collectibleDefinitions) &&
        Objects.equals(this.decryptedToken, tokensRewardAvailabilityModel.decryptedToken) &&
        Objects.equals(this.gameEarnByDate, tokensRewardAvailabilityModel.gameEarnByDate) &&
        Objects.equals(this.hasExistingCode, tokensRewardAvailabilityModel.hasExistingCode) &&
        Objects.equals(this.hasOffer, tokensRewardAvailabilityModel.hasOffer) &&
        Objects.equals(this.isLoyaltyReward, tokensRewardAvailabilityModel.isLoyaltyReward) &&
        Objects.equals(this.isOffer, tokensRewardAvailabilityModel.isOffer) &&
        Objects.equals(this.offerApplied, tokensRewardAvailabilityModel.offerApplied) &&
        Objects.equals(this.recordDefinitions, tokensRewardAvailabilityModel.recordDefinitions) &&
        Objects.equals(this.redemptionEndDate, tokensRewardAvailabilityModel.redemptionEndDate) &&
        Objects.equals(this.shopifyEndDate, tokensRewardAvailabilityModel.shopifyEndDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectibleDefinitions, decryptedToken, gameEarnByDate, hasExistingCode, hasOffer, isLoyaltyReward, isOffer, offerApplied, recordDefinitions, redemptionEndDate, shopifyEndDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokensRewardAvailabilityModel {\n");
    sb.append("    collectibleDefinitions: ").append(toIndentedString(collectibleDefinitions)).append("\n");
    sb.append("    decryptedToken: ").append(toIndentedString(decryptedToken)).append("\n");
    sb.append("    gameEarnByDate: ").append(toIndentedString(gameEarnByDate)).append("\n");
    sb.append("    hasExistingCode: ").append(toIndentedString(hasExistingCode)).append("\n");
    sb.append("    hasOffer: ").append(toIndentedString(hasOffer)).append("\n");
    sb.append("    isLoyaltyReward: ").append(toIndentedString(isLoyaltyReward)).append("\n");
    sb.append("    isOffer: ").append(toIndentedString(isOffer)).append("\n");
    sb.append("    offerApplied: ").append(toIndentedString(offerApplied)).append("\n");
    sb.append("    recordDefinitions: ").append(toIndentedString(recordDefinitions)).append("\n");
    sb.append("    redemptionEndDate: ").append(toIndentedString(redemptionEndDate)).append("\n");
    sb.append("    shopifyEndDate: ").append(toIndentedString(shopifyEndDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CollectibleDefinitions");
    openapiFields.add("DecryptedToken");
    openapiFields.add("GameEarnByDate");
    openapiFields.add("HasExistingCode");
    openapiFields.add("HasOffer");
    openapiFields.add("IsLoyaltyReward");
    openapiFields.add("IsOffer");
    openapiFields.add("OfferApplied");
    openapiFields.add("RecordDefinitions");
    openapiFields.add("RedemptionEndDate");
    openapiFields.add("ShopifyEndDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TokensRewardAvailabilityModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokensRewardAvailabilityModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokensRewardAvailabilityModel is not found in the empty JSON string", TokensRewardAvailabilityModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TokensRewardAvailabilityModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokensRewardAvailabilityModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("CollectibleDefinitions") != null && !jsonObj.get("CollectibleDefinitions").isJsonNull()) {
        JsonArray jsonArraycollectibleDefinitions = jsonObj.getAsJsonArray("CollectibleDefinitions");
        if (jsonArraycollectibleDefinitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CollectibleDefinitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CollectibleDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("CollectibleDefinitions").toString()));
          }

          // validate the optional field `CollectibleDefinitions` (array)
          for (int i = 0; i < jsonArraycollectibleDefinitions.size(); i++) {
            TokensCollectibleDefinitions.validateJsonElement(jsonArraycollectibleDefinitions.get(i));
          };
        }
      }
      if ((jsonObj.get("DecryptedToken") != null && !jsonObj.get("DecryptedToken").isJsonNull()) && !jsonObj.get("DecryptedToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DecryptedToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DecryptedToken").toString()));
      }
      if (jsonObj.get("RecordDefinitions") != null && !jsonObj.get("RecordDefinitions").isJsonNull()) {
        JsonArray jsonArrayrecordDefinitions = jsonObj.getAsJsonArray("RecordDefinitions");
        if (jsonArrayrecordDefinitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("RecordDefinitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `RecordDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("RecordDefinitions").toString()));
          }

          // validate the optional field `RecordDefinitions` (array)
          for (int i = 0; i < jsonArrayrecordDefinitions.size(); i++) {
            DestinyDefinitionsRecordsDestinyRecordDefinition.validateJsonElement(jsonArrayrecordDefinitions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokensRewardAvailabilityModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokensRewardAvailabilityModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokensRewardAvailabilityModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokensRewardAvailabilityModel.class));

       return (TypeAdapter<T>) new TypeAdapter<TokensRewardAvailabilityModel>() {
           @Override
           public void write(JsonWriter out, TokensRewardAvailabilityModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokensRewardAvailabilityModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TokensRewardAvailabilityModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TokensRewardAvailabilityModel
   * @throws IOException if the JSON string is invalid with respect to TokensRewardAvailabilityModel
   */
  public static TokensRewardAvailabilityModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokensRewardAvailabilityModel.class);
  }

  /**
   * Convert an instance of TokensRewardAvailabilityModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

