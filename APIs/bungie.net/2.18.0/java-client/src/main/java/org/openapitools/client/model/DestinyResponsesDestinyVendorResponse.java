/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyItemComponentSetOfint32;
import org.openapitools.client.model.DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyCurrenciesComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyStringVariablesComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyVendorCategoriesComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyVendorComponent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response containing all of the components for a vendor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyResponsesDestinyVendorResponse {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private SingleComponentResponseOfDestinyVendorCategoriesComponent categories;

  public static final String SERIALIZED_NAME_CURRENCY_LOOKUPS = "currencyLookups";
  @SerializedName(SERIALIZED_NAME_CURRENCY_LOOKUPS)
  private SingleComponentResponseOfDestinyCurrenciesComponent currencyLookups;

  public static final String SERIALIZED_NAME_ITEM_COMPONENTS = "itemComponents";
  @SerializedName(SERIALIZED_NAME_ITEM_COMPONENTS)
  private DestinyItemComponentSetOfint32 itemComponents;

  public static final String SERIALIZED_NAME_SALES = "sales";
  @SerializedName(SERIALIZED_NAME_SALES)
  private DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent sales;

  public static final String SERIALIZED_NAME_STRING_VARIABLES = "stringVariables";
  @SerializedName(SERIALIZED_NAME_STRING_VARIABLES)
  private SingleComponentResponseOfDestinyStringVariablesComponent stringVariables;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private SingleComponentResponseOfDestinyVendorComponent vendor;

  public DestinyResponsesDestinyVendorResponse() {
  }

  public DestinyResponsesDestinyVendorResponse categories(SingleComponentResponseOfDestinyVendorCategoriesComponent categories) {
    this.categories = categories;
    return this;
  }

  /**
   * Categories that the vendor has available, and references to the sales therein.  COMPONENT TYPE: VendorCategories
   * @return categories
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyVendorCategoriesComponent getCategories() {
    return categories;
  }

  public void setCategories(SingleComponentResponseOfDestinyVendorCategoriesComponent categories) {
    this.categories = categories;
  }


  public DestinyResponsesDestinyVendorResponse currencyLookups(SingleComponentResponseOfDestinyCurrenciesComponent currencyLookups) {
    this.currencyLookups = currencyLookups;
    return this;
  }

  /**
   * A \&quot;lookup\&quot; convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups
   * @return currencyLookups
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyCurrenciesComponent getCurrencyLookups() {
    return currencyLookups;
  }

  public void setCurrencyLookups(SingleComponentResponseOfDestinyCurrenciesComponent currencyLookups) {
    this.currencyLookups = currencyLookups;
  }


  public DestinyResponsesDestinyVendorResponse itemComponents(DestinyItemComponentSetOfint32 itemComponents) {
    this.itemComponents = itemComponents;
    return this;
  }

  /**
   * Item components, keyed by the vendorItemIndex of the active sale items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
   * @return itemComponents
   */
  @javax.annotation.Nullable
  public DestinyItemComponentSetOfint32 getItemComponents() {
    return itemComponents;
  }

  public void setItemComponents(DestinyItemComponentSetOfint32 itemComponents) {
    this.itemComponents = itemComponents;
  }


  public DestinyResponsesDestinyVendorResponse sales(DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent sales) {
    this.sales = sales;
    return this;
  }

  /**
   * Sales, keyed by the vendorItemIndex of the item being sold.  COMPONENT TYPE: VendorSales
   * @return sales
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent getSales() {
    return sales;
  }

  public void setSales(DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent sales) {
    this.sales = sales;
  }


  public DestinyResponsesDestinyVendorResponse stringVariables(SingleComponentResponseOfDestinyStringVariablesComponent stringVariables) {
    this.stringVariables = stringVariables;
    return this;
  }

  /**
   * A map of string variable values by hash for this character context.  COMPONENT TYPE: StringVariables
   * @return stringVariables
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyStringVariablesComponent getStringVariables() {
    return stringVariables;
  }

  public void setStringVariables(SingleComponentResponseOfDestinyStringVariablesComponent stringVariables) {
    this.stringVariables = stringVariables;
  }


  public DestinyResponsesDestinyVendorResponse vendor(SingleComponentResponseOfDestinyVendorComponent vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * The base properties of the vendor.  COMPONENT TYPE: Vendors
   * @return vendor
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyVendorComponent getVendor() {
    return vendor;
  }

  public void setVendor(SingleComponentResponseOfDestinyVendorComponent vendor) {
    this.vendor = vendor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyResponsesDestinyVendorResponse destinyResponsesDestinyVendorResponse = (DestinyResponsesDestinyVendorResponse) o;
    return Objects.equals(this.categories, destinyResponsesDestinyVendorResponse.categories) &&
        Objects.equals(this.currencyLookups, destinyResponsesDestinyVendorResponse.currencyLookups) &&
        Objects.equals(this.itemComponents, destinyResponsesDestinyVendorResponse.itemComponents) &&
        Objects.equals(this.sales, destinyResponsesDestinyVendorResponse.sales) &&
        Objects.equals(this.stringVariables, destinyResponsesDestinyVendorResponse.stringVariables) &&
        Objects.equals(this.vendor, destinyResponsesDestinyVendorResponse.vendor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, currencyLookups, itemComponents, sales, stringVariables, vendor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyResponsesDestinyVendorResponse {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    currencyLookups: ").append(toIndentedString(currencyLookups)).append("\n");
    sb.append("    itemComponents: ").append(toIndentedString(itemComponents)).append("\n");
    sb.append("    sales: ").append(toIndentedString(sales)).append("\n");
    sb.append("    stringVariables: ").append(toIndentedString(stringVariables)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("currencyLookups");
    openapiFields.add("itemComponents");
    openapiFields.add("sales");
    openapiFields.add("stringVariables");
    openapiFields.add("vendor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyResponsesDestinyVendorResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyResponsesDestinyVendorResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyResponsesDestinyVendorResponse is not found in the empty JSON string", DestinyResponsesDestinyVendorResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyResponsesDestinyVendorResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyResponsesDestinyVendorResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `categories`
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        SingleComponentResponseOfDestinyVendorCategoriesComponent.validateJsonElement(jsonObj.get("categories"));
      }
      // validate the optional field `currencyLookups`
      if (jsonObj.get("currencyLookups") != null && !jsonObj.get("currencyLookups").isJsonNull()) {
        SingleComponentResponseOfDestinyCurrenciesComponent.validateJsonElement(jsonObj.get("currencyLookups"));
      }
      // validate the optional field `itemComponents`
      if (jsonObj.get("itemComponents") != null && !jsonObj.get("itemComponents").isJsonNull()) {
        DestinyItemComponentSetOfint32.validateJsonElement(jsonObj.get("itemComponents"));
      }
      // validate the optional field `sales`
      if (jsonObj.get("sales") != null && !jsonObj.get("sales").isJsonNull()) {
        DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent.validateJsonElement(jsonObj.get("sales"));
      }
      // validate the optional field `stringVariables`
      if (jsonObj.get("stringVariables") != null && !jsonObj.get("stringVariables").isJsonNull()) {
        SingleComponentResponseOfDestinyStringVariablesComponent.validateJsonElement(jsonObj.get("stringVariables"));
      }
      // validate the optional field `vendor`
      if (jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) {
        SingleComponentResponseOfDestinyVendorComponent.validateJsonElement(jsonObj.get("vendor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyResponsesDestinyVendorResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyResponsesDestinyVendorResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyResponsesDestinyVendorResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyResponsesDestinyVendorResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyResponsesDestinyVendorResponse>() {
           @Override
           public void write(JsonWriter out, DestinyResponsesDestinyVendorResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyResponsesDestinyVendorResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyResponsesDestinyVendorResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyResponsesDestinyVendorResponse
   * @throws IOException if the JSON string is invalid with respect to DestinyResponsesDestinyVendorResponse
   */
  public static DestinyResponsesDestinyVendorResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyResponsesDestinyVendorResponse.class);
  }

  /**
   * Convert an instance of DestinyResponsesDestinyVendorResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

