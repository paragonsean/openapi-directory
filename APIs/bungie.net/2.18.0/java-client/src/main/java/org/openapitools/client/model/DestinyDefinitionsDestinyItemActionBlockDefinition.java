/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyItemActionRequiredItemDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyProgressionRewardDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If an item can have an action performed on it (like \&quot;Dismantle\&quot;), it will be defined here if you care.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemActionBlockDefinition {
  public static final String SERIALIZED_NAME_ACTION_TYPE_LABEL = "actionTypeLabel";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE_LABEL)
  private String actionTypeLabel;

  public static final String SERIALIZED_NAME_CONSUME_ENTIRE_STACK = "consumeEntireStack";
  @SerializedName(SERIALIZED_NAME_CONSUME_ENTIRE_STACK)
  private Boolean consumeEntireStack;

  public static final String SERIALIZED_NAME_DELETE_ON_ACTION = "deleteOnAction";
  @SerializedName(SERIALIZED_NAME_DELETE_ON_ACTION)
  private Boolean deleteOnAction;

  public static final String SERIALIZED_NAME_IS_POSITIVE = "isPositive";
  @SerializedName(SERIALIZED_NAME_IS_POSITIVE)
  private Boolean isPositive;

  public static final String SERIALIZED_NAME_OVERLAY_ICON = "overlayIcon";
  @SerializedName(SERIALIZED_NAME_OVERLAY_ICON)
  private String overlayIcon;

  public static final String SERIALIZED_NAME_OVERLAY_SCREEN_NAME = "overlayScreenName";
  @SerializedName(SERIALIZED_NAME_OVERLAY_SCREEN_NAME)
  private String overlayScreenName;

  public static final String SERIALIZED_NAME_PROGRESSION_REWARDS = "progressionRewards";
  @SerializedName(SERIALIZED_NAME_PROGRESSION_REWARDS)
  private List<DestinyDefinitionsDestinyProgressionRewardDefinition> progressionRewards = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED_COOLDOWN_HASH = "requiredCooldownHash";
  @SerializedName(SERIALIZED_NAME_REQUIRED_COOLDOWN_HASH)
  private Integer requiredCooldownHash;

  public static final String SERIALIZED_NAME_REQUIRED_COOLDOWN_SECONDS = "requiredCooldownSeconds";
  @SerializedName(SERIALIZED_NAME_REQUIRED_COOLDOWN_SECONDS)
  private Integer requiredCooldownSeconds;

  public static final String SERIALIZED_NAME_REQUIRED_ITEMS = "requiredItems";
  @SerializedName(SERIALIZED_NAME_REQUIRED_ITEMS)
  private List<DestinyDefinitionsDestinyItemActionRequiredItemDefinition> requiredItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED_LOCATION = "requiredLocation";
  @SerializedName(SERIALIZED_NAME_REQUIRED_LOCATION)
  private String requiredLocation;

  public static final String SERIALIZED_NAME_USE_ON_ACQUIRE = "useOnAcquire";
  @SerializedName(SERIALIZED_NAME_USE_ON_ACQUIRE)
  private Boolean useOnAcquire;

  public static final String SERIALIZED_NAME_VERB_DESCRIPTION = "verbDescription";
  @SerializedName(SERIALIZED_NAME_VERB_DESCRIPTION)
  private String verbDescription;

  public static final String SERIALIZED_NAME_VERB_NAME = "verbName";
  @SerializedName(SERIALIZED_NAME_VERB_NAME)
  private String verbName;

  public DestinyDefinitionsDestinyItemActionBlockDefinition() {
  }

  public DestinyDefinitionsDestinyItemActionBlockDefinition actionTypeLabel(String actionTypeLabel) {
    this.actionTypeLabel = actionTypeLabel;
    return this;
  }

  /**
   * The internal identifier for the action.
   * @return actionTypeLabel
   */
  @javax.annotation.Nullable
  public String getActionTypeLabel() {
    return actionTypeLabel;
  }

  public void setActionTypeLabel(String actionTypeLabel) {
    this.actionTypeLabel = actionTypeLabel;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition consumeEntireStack(Boolean consumeEntireStack) {
    this.consumeEntireStack = consumeEntireStack;
    return this;
  }

  /**
   * If true, the entire stack is deleted when the action completes.
   * @return consumeEntireStack
   */
  @javax.annotation.Nullable
  public Boolean getConsumeEntireStack() {
    return consumeEntireStack;
  }

  public void setConsumeEntireStack(Boolean consumeEntireStack) {
    this.consumeEntireStack = consumeEntireStack;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition deleteOnAction(Boolean deleteOnAction) {
    this.deleteOnAction = deleteOnAction;
    return this;
  }

  /**
   * If true, the item is deleted when the action completes.
   * @return deleteOnAction
   */
  @javax.annotation.Nullable
  public Boolean getDeleteOnAction() {
    return deleteOnAction;
  }

  public void setDeleteOnAction(Boolean deleteOnAction) {
    this.deleteOnAction = deleteOnAction;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition isPositive(Boolean isPositive) {
    this.isPositive = isPositive;
    return this;
  }

  /**
   * The content has this property, however it&#39;s not entirely clear how it is used.
   * @return isPositive
   */
  @javax.annotation.Nullable
  public Boolean getIsPositive() {
    return isPositive;
  }

  public void setIsPositive(Boolean isPositive) {
    this.isPositive = isPositive;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition overlayIcon(String overlayIcon) {
    this.overlayIcon = overlayIcon;
    return this;
  }

  /**
   * The icon associated with the overlay screen for the action, if any.
   * @return overlayIcon
   */
  @javax.annotation.Nullable
  public String getOverlayIcon() {
    return overlayIcon;
  }

  public void setOverlayIcon(String overlayIcon) {
    this.overlayIcon = overlayIcon;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition overlayScreenName(String overlayScreenName) {
    this.overlayScreenName = overlayScreenName;
    return this;
  }

  /**
   * If the action has an overlay screen associated with it, this is the name of that screen. Unfortunately, we cannot return the screen&#39;s data itself.
   * @return overlayScreenName
   */
  @javax.annotation.Nullable
  public String getOverlayScreenName() {
    return overlayScreenName;
  }

  public void setOverlayScreenName(String overlayScreenName) {
    this.overlayScreenName = overlayScreenName;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition progressionRewards(List<DestinyDefinitionsDestinyProgressionRewardDefinition> progressionRewards) {
    this.progressionRewards = progressionRewards;
    return this;
  }

  public DestinyDefinitionsDestinyItemActionBlockDefinition addProgressionRewardsItem(DestinyDefinitionsDestinyProgressionRewardDefinition progressionRewardsItem) {
    if (this.progressionRewards == null) {
      this.progressionRewards = new ArrayList<>();
    }
    this.progressionRewards.add(progressionRewardsItem);
    return this;
  }

  /**
   * If performing this action earns you Progression, this is the list of progressions and values granted for those progressions by performing this action.
   * @return progressionRewards
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyProgressionRewardDefinition> getProgressionRewards() {
    return progressionRewards;
  }

  public void setProgressionRewards(List<DestinyDefinitionsDestinyProgressionRewardDefinition> progressionRewards) {
    this.progressionRewards = progressionRewards;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition requiredCooldownHash(Integer requiredCooldownHash) {
    this.requiredCooldownHash = requiredCooldownHash;
    return this;
  }

  /**
   * The identifier hash for the Cooldown associated with this action. We have not pulled this data yet for you to have more data to use for cooldowns.
   * @return requiredCooldownHash
   */
  @javax.annotation.Nullable
  public Integer getRequiredCooldownHash() {
    return requiredCooldownHash;
  }

  public void setRequiredCooldownHash(Integer requiredCooldownHash) {
    this.requiredCooldownHash = requiredCooldownHash;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition requiredCooldownSeconds(Integer requiredCooldownSeconds) {
    this.requiredCooldownSeconds = requiredCooldownSeconds;
    return this;
  }

  /**
   * The number of seconds to delay before allowing this action to be performed again.
   * @return requiredCooldownSeconds
   */
  @javax.annotation.Nullable
  public Integer getRequiredCooldownSeconds() {
    return requiredCooldownSeconds;
  }

  public void setRequiredCooldownSeconds(Integer requiredCooldownSeconds) {
    this.requiredCooldownSeconds = requiredCooldownSeconds;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition requiredItems(List<DestinyDefinitionsDestinyItemActionRequiredItemDefinition> requiredItems) {
    this.requiredItems = requiredItems;
    return this;
  }

  public DestinyDefinitionsDestinyItemActionBlockDefinition addRequiredItemsItem(DestinyDefinitionsDestinyItemActionRequiredItemDefinition requiredItemsItem) {
    if (this.requiredItems == null) {
      this.requiredItems = new ArrayList<>();
    }
    this.requiredItems.add(requiredItemsItem);
    return this;
  }

  /**
   * If the action requires other items to exist or be destroyed, this is the list of those items and requirements.
   * @return requiredItems
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyItemActionRequiredItemDefinition> getRequiredItems() {
    return requiredItems;
  }

  public void setRequiredItems(List<DestinyDefinitionsDestinyItemActionRequiredItemDefinition> requiredItems) {
    this.requiredItems = requiredItems;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition requiredLocation(String requiredLocation) {
    this.requiredLocation = requiredLocation;
    return this;
  }

  /**
   * Theoretically, an item could have a localized string for a hint about the location in which the action should be performed. In practice, no items yet have this property.
   * @return requiredLocation
   */
  @javax.annotation.Nullable
  public String getRequiredLocation() {
    return requiredLocation;
  }

  public void setRequiredLocation(String requiredLocation) {
    this.requiredLocation = requiredLocation;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition useOnAcquire(Boolean useOnAcquire) {
    this.useOnAcquire = useOnAcquire;
    return this;
  }

  /**
   * If true, this action will be performed as soon as you earn this item. Some rewards work this way, providing you a single item to pick up from a reward-granting vendor in-game and then immediately consuming itself to provide you multiple items.
   * @return useOnAcquire
   */
  @javax.annotation.Nullable
  public Boolean getUseOnAcquire() {
    return useOnAcquire;
  }

  public void setUseOnAcquire(Boolean useOnAcquire) {
    this.useOnAcquire = useOnAcquire;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition verbDescription(String verbDescription) {
    this.verbDescription = verbDescription;
    return this;
  }

  /**
   * Localized text describing the action being performed.
   * @return verbDescription
   */
  @javax.annotation.Nullable
  public String getVerbDescription() {
    return verbDescription;
  }

  public void setVerbDescription(String verbDescription) {
    this.verbDescription = verbDescription;
  }


  public DestinyDefinitionsDestinyItemActionBlockDefinition verbName(String verbName) {
    this.verbName = verbName;
    return this;
  }

  /**
   * Localized text for the verb of the action being performed.
   * @return verbName
   */
  @javax.annotation.Nullable
  public String getVerbName() {
    return verbName;
  }

  public void setVerbName(String verbName) {
    this.verbName = verbName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemActionBlockDefinition destinyDefinitionsDestinyItemActionBlockDefinition = (DestinyDefinitionsDestinyItemActionBlockDefinition) o;
    return Objects.equals(this.actionTypeLabel, destinyDefinitionsDestinyItemActionBlockDefinition.actionTypeLabel) &&
        Objects.equals(this.consumeEntireStack, destinyDefinitionsDestinyItemActionBlockDefinition.consumeEntireStack) &&
        Objects.equals(this.deleteOnAction, destinyDefinitionsDestinyItemActionBlockDefinition.deleteOnAction) &&
        Objects.equals(this.isPositive, destinyDefinitionsDestinyItemActionBlockDefinition.isPositive) &&
        Objects.equals(this.overlayIcon, destinyDefinitionsDestinyItemActionBlockDefinition.overlayIcon) &&
        Objects.equals(this.overlayScreenName, destinyDefinitionsDestinyItemActionBlockDefinition.overlayScreenName) &&
        Objects.equals(this.progressionRewards, destinyDefinitionsDestinyItemActionBlockDefinition.progressionRewards) &&
        Objects.equals(this.requiredCooldownHash, destinyDefinitionsDestinyItemActionBlockDefinition.requiredCooldownHash) &&
        Objects.equals(this.requiredCooldownSeconds, destinyDefinitionsDestinyItemActionBlockDefinition.requiredCooldownSeconds) &&
        Objects.equals(this.requiredItems, destinyDefinitionsDestinyItemActionBlockDefinition.requiredItems) &&
        Objects.equals(this.requiredLocation, destinyDefinitionsDestinyItemActionBlockDefinition.requiredLocation) &&
        Objects.equals(this.useOnAcquire, destinyDefinitionsDestinyItemActionBlockDefinition.useOnAcquire) &&
        Objects.equals(this.verbDescription, destinyDefinitionsDestinyItemActionBlockDefinition.verbDescription) &&
        Objects.equals(this.verbName, destinyDefinitionsDestinyItemActionBlockDefinition.verbName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionTypeLabel, consumeEntireStack, deleteOnAction, isPositive, overlayIcon, overlayScreenName, progressionRewards, requiredCooldownHash, requiredCooldownSeconds, requiredItems, requiredLocation, useOnAcquire, verbDescription, verbName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemActionBlockDefinition {\n");
    sb.append("    actionTypeLabel: ").append(toIndentedString(actionTypeLabel)).append("\n");
    sb.append("    consumeEntireStack: ").append(toIndentedString(consumeEntireStack)).append("\n");
    sb.append("    deleteOnAction: ").append(toIndentedString(deleteOnAction)).append("\n");
    sb.append("    isPositive: ").append(toIndentedString(isPositive)).append("\n");
    sb.append("    overlayIcon: ").append(toIndentedString(overlayIcon)).append("\n");
    sb.append("    overlayScreenName: ").append(toIndentedString(overlayScreenName)).append("\n");
    sb.append("    progressionRewards: ").append(toIndentedString(progressionRewards)).append("\n");
    sb.append("    requiredCooldownHash: ").append(toIndentedString(requiredCooldownHash)).append("\n");
    sb.append("    requiredCooldownSeconds: ").append(toIndentedString(requiredCooldownSeconds)).append("\n");
    sb.append("    requiredItems: ").append(toIndentedString(requiredItems)).append("\n");
    sb.append("    requiredLocation: ").append(toIndentedString(requiredLocation)).append("\n");
    sb.append("    useOnAcquire: ").append(toIndentedString(useOnAcquire)).append("\n");
    sb.append("    verbDescription: ").append(toIndentedString(verbDescription)).append("\n");
    sb.append("    verbName: ").append(toIndentedString(verbName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionTypeLabel");
    openapiFields.add("consumeEntireStack");
    openapiFields.add("deleteOnAction");
    openapiFields.add("isPositive");
    openapiFields.add("overlayIcon");
    openapiFields.add("overlayScreenName");
    openapiFields.add("progressionRewards");
    openapiFields.add("requiredCooldownHash");
    openapiFields.add("requiredCooldownSeconds");
    openapiFields.add("requiredItems");
    openapiFields.add("requiredLocation");
    openapiFields.add("useOnAcquire");
    openapiFields.add("verbDescription");
    openapiFields.add("verbName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemActionBlockDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemActionBlockDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemActionBlockDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemActionBlockDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemActionBlockDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemActionBlockDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionTypeLabel") != null && !jsonObj.get("actionTypeLabel").isJsonNull()) && !jsonObj.get("actionTypeLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionTypeLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionTypeLabel").toString()));
      }
      if ((jsonObj.get("overlayIcon") != null && !jsonObj.get("overlayIcon").isJsonNull()) && !jsonObj.get("overlayIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overlayIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overlayIcon").toString()));
      }
      if ((jsonObj.get("overlayScreenName") != null && !jsonObj.get("overlayScreenName").isJsonNull()) && !jsonObj.get("overlayScreenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overlayScreenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overlayScreenName").toString()));
      }
      if (jsonObj.get("progressionRewards") != null && !jsonObj.get("progressionRewards").isJsonNull()) {
        JsonArray jsonArrayprogressionRewards = jsonObj.getAsJsonArray("progressionRewards");
        if (jsonArrayprogressionRewards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("progressionRewards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `progressionRewards` to be an array in the JSON string but got `%s`", jsonObj.get("progressionRewards").toString()));
          }

          // validate the optional field `progressionRewards` (array)
          for (int i = 0; i < jsonArrayprogressionRewards.size(); i++) {
            DestinyDefinitionsDestinyProgressionRewardDefinition.validateJsonElement(jsonArrayprogressionRewards.get(i));
          };
        }
      }
      if (jsonObj.get("requiredItems") != null && !jsonObj.get("requiredItems").isJsonNull()) {
        JsonArray jsonArrayrequiredItems = jsonObj.getAsJsonArray("requiredItems");
        if (jsonArrayrequiredItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requiredItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requiredItems` to be an array in the JSON string but got `%s`", jsonObj.get("requiredItems").toString()));
          }

          // validate the optional field `requiredItems` (array)
          for (int i = 0; i < jsonArrayrequiredItems.size(); i++) {
            DestinyDefinitionsDestinyItemActionRequiredItemDefinition.validateJsonElement(jsonArrayrequiredItems.get(i));
          };
        }
      }
      if ((jsonObj.get("requiredLocation") != null && !jsonObj.get("requiredLocation").isJsonNull()) && !jsonObj.get("requiredLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requiredLocation").toString()));
      }
      if ((jsonObj.get("verbDescription") != null && !jsonObj.get("verbDescription").isJsonNull()) && !jsonObj.get("verbDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbDescription").toString()));
      }
      if ((jsonObj.get("verbName") != null && !jsonObj.get("verbName").isJsonNull()) && !jsonObj.get("verbName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemActionBlockDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemActionBlockDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemActionBlockDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemActionBlockDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemActionBlockDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemActionBlockDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemActionBlockDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemActionBlockDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemActionBlockDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemActionBlockDefinition
   */
  public static DestinyDefinitionsDestinyItemActionBlockDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemActionBlockDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemActionBlockDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

