/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The list of perks to display in an item tooltip - and whether or not they have been activated.  Perks apply a variety of effects to a character, and are generally either intrinsic to the item or provided in activated talent nodes or sockets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyPerksDestinyPerkReference {
  public static final String SERIALIZED_NAME_ICON_PATH = "iconPath";
  @SerializedName(SERIALIZED_NAME_ICON_PATH)
  private String iconPath;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_PERK_HASH = "perkHash";
  @SerializedName(SERIALIZED_NAME_PERK_HASH)
  private Integer perkHash;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public DestinyPerksDestinyPerkReference() {
  }

  public DestinyPerksDestinyPerkReference iconPath(String iconPath) {
    this.iconPath = iconPath;
    return this;
  }

  /**
   * The icon for the perk.
   * @return iconPath
   */
  @javax.annotation.Nullable
  public String getIconPath() {
    return iconPath;
  }

  public void setIconPath(String iconPath) {
    this.iconPath = iconPath;
  }


  public DestinyPerksDestinyPerkReference isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Whether this perk is currently active. (We may return perks that you have not actually activated yet: these represent perks that you should show in the item&#39;s tooltip, but that the user has not yet activated.)
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public DestinyPerksDestinyPerkReference perkHash(Integer perkHash) {
    this.perkHash = perkHash;
    return this;
  }

  /**
   * The hash identifier for the perk, which can be used to look up DestinySandboxPerkDefinition if it exists. Be warned, perks frequently do not have user-viewable information. You should examine whether you actually found a name/description in the perk&#39;s definition before you show it to the user.
   * @return perkHash
   */
  @javax.annotation.Nullable
  public Integer getPerkHash() {
    return perkHash;
  }

  public void setPerkHash(Integer perkHash) {
    this.perkHash = perkHash;
  }


  public DestinyPerksDestinyPerkReference visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * Some perks provide benefits, but aren&#39;t visible in the UI. This value will let you know if this is perk should be shown in your UI.
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyPerksDestinyPerkReference destinyPerksDestinyPerkReference = (DestinyPerksDestinyPerkReference) o;
    return Objects.equals(this.iconPath, destinyPerksDestinyPerkReference.iconPath) &&
        Objects.equals(this.isActive, destinyPerksDestinyPerkReference.isActive) &&
        Objects.equals(this.perkHash, destinyPerksDestinyPerkReference.perkHash) &&
        Objects.equals(this.visible, destinyPerksDestinyPerkReference.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iconPath, isActive, perkHash, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyPerksDestinyPerkReference {\n");
    sb.append("    iconPath: ").append(toIndentedString(iconPath)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    perkHash: ").append(toIndentedString(perkHash)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iconPath");
    openapiFields.add("isActive");
    openapiFields.add("perkHash");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyPerksDestinyPerkReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyPerksDestinyPerkReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyPerksDestinyPerkReference is not found in the empty JSON string", DestinyPerksDestinyPerkReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyPerksDestinyPerkReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyPerksDestinyPerkReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("iconPath") != null && !jsonObj.get("iconPath").isJsonNull()) && !jsonObj.get("iconPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyPerksDestinyPerkReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyPerksDestinyPerkReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyPerksDestinyPerkReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyPerksDestinyPerkReference.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyPerksDestinyPerkReference>() {
           @Override
           public void write(JsonWriter out, DestinyPerksDestinyPerkReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyPerksDestinyPerkReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyPerksDestinyPerkReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyPerksDestinyPerkReference
   * @throws IOException if the JSON string is invalid with respect to DestinyPerksDestinyPerkReference
   */
  public static DestinyPerksDestinyPerkReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyPerksDestinyPerkReference.class);
  }

  /**
   * Convert an instance of DestinyPerksDestinyPerkReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

