/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Display Categories are different from \&quot;categories\&quot; in that these are specifically for visual grouping and display of categories in Vendor UI. The \&quot;categories\&quot; structure is for validation of the contained items, and can be categorized entirely separately from \&quot;Display Categories\&quot;, there need be and often will be no meaningful relationship between the two.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyDisplayCategoryDefinition {
  public static final String SERIALIZED_NAME_DISPLAY_CATEGORY_HASH = "displayCategoryHash";
  @SerializedName(SERIALIZED_NAME_DISPLAY_CATEGORY_HASH)
  private Integer displayCategoryHash;

  public static final String SERIALIZED_NAME_DISPLAY_IN_BANNER = "displayInBanner";
  @SerializedName(SERIALIZED_NAME_DISPLAY_IN_BANNER)
  private Boolean displayInBanner;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_DISPLAY_STYLE_HASH = "displayStyleHash";
  @SerializedName(SERIALIZED_NAME_DISPLAY_STYLE_HASH)
  private Integer displayStyleHash;

  public static final String SERIALIZED_NAME_DISPLAY_STYLE_IDENTIFIER = "displayStyleIdentifier";
  @SerializedName(SERIALIZED_NAME_DISPLAY_STYLE_IDENTIFIER)
  private String displayStyleIdentifier;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_PROGRESSION_HASH = "progressionHash";
  @SerializedName(SERIALIZED_NAME_PROGRESSION_HASH)
  private Integer progressionHash;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public DestinyDefinitionsDestinyDisplayCategoryDefinition() {
  }

  public DestinyDefinitionsDestinyDisplayCategoryDefinition displayCategoryHash(Integer displayCategoryHash) {
    this.displayCategoryHash = displayCategoryHash;
    return this;
  }

  /**
   * Get displayCategoryHash
   * @return displayCategoryHash
   */
  @javax.annotation.Nullable
  public Integer getDisplayCategoryHash() {
    return displayCategoryHash;
  }

  public void setDisplayCategoryHash(Integer displayCategoryHash) {
    this.displayCategoryHash = displayCategoryHash;
  }


  public DestinyDefinitionsDestinyDisplayCategoryDefinition displayInBanner(Boolean displayInBanner) {
    this.displayInBanner = displayInBanner;
    return this;
  }

  /**
   * If true, this category should be displayed in the \&quot;Banner\&quot; section of the vendor&#39;s UI.
   * @return displayInBanner
   */
  @javax.annotation.Nullable
  public Boolean getDisplayInBanner() {
    return displayInBanner;
  }

  public void setDisplayInBanner(Boolean displayInBanner) {
    this.displayInBanner = displayInBanner;
  }


  public DestinyDefinitionsDestinyDisplayCategoryDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinyDisplayCategoryDefinition displayStyleHash(Integer displayStyleHash) {
    this.displayStyleHash = displayStyleHash;
    return this;
  }

  /**
   * An indicator of how the category will be displayed in the UI. It&#39;s up to you to do something cool or interesting in response to this, or just to treat it as a normal category.
   * @return displayStyleHash
   */
  @javax.annotation.Nullable
  public Integer getDisplayStyleHash() {
    return displayStyleHash;
  }

  public void setDisplayStyleHash(Integer displayStyleHash) {
    this.displayStyleHash = displayStyleHash;
  }


  public DestinyDefinitionsDestinyDisplayCategoryDefinition displayStyleIdentifier(String displayStyleIdentifier) {
    this.displayStyleIdentifier = displayStyleIdentifier;
    return this;
  }

  /**
   * An indicator of how the category will be displayed in the UI. It&#39;s up to you to do something cool or interesting in response to this, or just to treat it as a normal category.
   * @return displayStyleIdentifier
   */
  @javax.annotation.Nullable
  public String getDisplayStyleIdentifier() {
    return displayStyleIdentifier;
  }

  public void setDisplayStyleIdentifier(String displayStyleIdentifier) {
    this.displayStyleIdentifier = displayStyleIdentifier;
  }


  public DestinyDefinitionsDestinyDisplayCategoryDefinition identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * A string identifier for the display category.
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public DestinyDefinitionsDestinyDisplayCategoryDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Get index
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinyDisplayCategoryDefinition progressionHash(Integer progressionHash) {
    this.progressionHash = progressionHash;
    return this;
  }

  /**
   * If it exists, this is the hash identifier of a DestinyProgressionDefinition that represents the progression to show on this display category.  Specific categories can now have thier own distinct progression, apparently. So that&#39;s cool.
   * @return progressionHash
   */
  @javax.annotation.Nullable
  public Integer getProgressionHash() {
    return progressionHash;
  }

  public void setProgressionHash(Integer progressionHash) {
    this.progressionHash = progressionHash;
  }


  public DestinyDefinitionsDestinyDisplayCategoryDefinition sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * If this category sorts items in a nonstandard way, this will be the way we sort.
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyDisplayCategoryDefinition destinyDefinitionsDestinyDisplayCategoryDefinition = (DestinyDefinitionsDestinyDisplayCategoryDefinition) o;
    return Objects.equals(this.displayCategoryHash, destinyDefinitionsDestinyDisplayCategoryDefinition.displayCategoryHash) &&
        Objects.equals(this.displayInBanner, destinyDefinitionsDestinyDisplayCategoryDefinition.displayInBanner) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinyDisplayCategoryDefinition.displayProperties) &&
        Objects.equals(this.displayStyleHash, destinyDefinitionsDestinyDisplayCategoryDefinition.displayStyleHash) &&
        Objects.equals(this.displayStyleIdentifier, destinyDefinitionsDestinyDisplayCategoryDefinition.displayStyleIdentifier) &&
        Objects.equals(this.identifier, destinyDefinitionsDestinyDisplayCategoryDefinition.identifier) &&
        Objects.equals(this.index, destinyDefinitionsDestinyDisplayCategoryDefinition.index) &&
        Objects.equals(this.progressionHash, destinyDefinitionsDestinyDisplayCategoryDefinition.progressionHash) &&
        Objects.equals(this.sortOrder, destinyDefinitionsDestinyDisplayCategoryDefinition.sortOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayCategoryHash, displayInBanner, displayProperties, displayStyleHash, displayStyleIdentifier, identifier, index, progressionHash, sortOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyDisplayCategoryDefinition {\n");
    sb.append("    displayCategoryHash: ").append(toIndentedString(displayCategoryHash)).append("\n");
    sb.append("    displayInBanner: ").append(toIndentedString(displayInBanner)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    displayStyleHash: ").append(toIndentedString(displayStyleHash)).append("\n");
    sb.append("    displayStyleIdentifier: ").append(toIndentedString(displayStyleIdentifier)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    progressionHash: ").append(toIndentedString(progressionHash)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayCategoryHash");
    openapiFields.add("displayInBanner");
    openapiFields.add("displayProperties");
    openapiFields.add("displayStyleHash");
    openapiFields.add("displayStyleIdentifier");
    openapiFields.add("identifier");
    openapiFields.add("index");
    openapiFields.add("progressionHash");
    openapiFields.add("sortOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyDisplayCategoryDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyDisplayCategoryDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyDisplayCategoryDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyDisplayCategoryDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyDisplayCategoryDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyDisplayCategoryDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      if ((jsonObj.get("displayStyleIdentifier") != null && !jsonObj.get("displayStyleIdentifier").isJsonNull()) && !jsonObj.get("displayStyleIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayStyleIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayStyleIdentifier").toString()));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyDisplayCategoryDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyDisplayCategoryDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyDisplayCategoryDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyDisplayCategoryDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyDisplayCategoryDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyDisplayCategoryDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyDisplayCategoryDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyDisplayCategoryDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyDisplayCategoryDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyDisplayCategoryDefinition
   */
  public static DestinyDefinitionsDestinyDisplayCategoryDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyDisplayCategoryDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyDisplayCategoryDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

