/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.UserUserToUserContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserGeneralUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserGeneralUser {
  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private String about;

  public static final String SERIALIZED_NAME_BLIZZARD_DISPLAY_NAME = "blizzardDisplayName";
  @SerializedName(SERIALIZED_NAME_BLIZZARD_DISPLAY_NAME)
  private String blizzardDisplayName;

  public static final String SERIALIZED_NAME_CACHED_BUNGIE_GLOBAL_DISPLAY_NAME = "cachedBungieGlobalDisplayName";
  @SerializedName(SERIALIZED_NAME_CACHED_BUNGIE_GLOBAL_DISPLAY_NAME)
  private String cachedBungieGlobalDisplayName;

  public static final String SERIALIZED_NAME_CACHED_BUNGIE_GLOBAL_DISPLAY_NAME_CODE = "cachedBungieGlobalDisplayNameCode";
  @SerializedName(SERIALIZED_NAME_CACHED_BUNGIE_GLOBAL_DISPLAY_NAME_CODE)
  private Integer cachedBungieGlobalDisplayNameCode;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private UserUserToUserContext context;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EGS_DISPLAY_NAME = "egsDisplayName";
  @SerializedName(SERIALIZED_NAME_EGS_DISPLAY_NAME)
  private String egsDisplayName;

  public static final String SERIALIZED_NAME_FB_DISPLAY_NAME = "fbDisplayName";
  @SerializedName(SERIALIZED_NAME_FB_DISPLAY_NAME)
  private String fbDisplayName;

  public static final String SERIALIZED_NAME_FIRST_ACCESS = "firstAccess";
  @SerializedName(SERIALIZED_NAME_FIRST_ACCESS)
  private OffsetDateTime firstAccess;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_LAST_BAN_REPORT_ID = "lastBanReportId";
  @SerializedName(SERIALIZED_NAME_LAST_BAN_REPORT_ID)
  private Long lastBanReportId;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "lastUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  private OffsetDateTime lastUpdate;

  public static final String SERIALIZED_NAME_LEGACY_PORTAL_U_I_D = "legacyPortalUID";
  @SerializedName(SERIALIZED_NAME_LEGACY_PORTAL_U_I_D)
  private Long legacyPortalUID;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_LOCALE_INHERIT_DEFAULT = "localeInheritDefault";
  @SerializedName(SERIALIZED_NAME_LOCALE_INHERIT_DEFAULT)
  private Boolean localeInheritDefault;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ID = "membershipId";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ID)
  private Long membershipId;

  public static final String SERIALIZED_NAME_NORMALIZED_NAME = "normalizedName";
  @SerializedName(SERIALIZED_NAME_NORMALIZED_NAME)
  private String normalizedName;

  public static final String SERIALIZED_NAME_PROFILE_BAN_EXPIRE = "profileBanExpire";
  @SerializedName(SERIALIZED_NAME_PROFILE_BAN_EXPIRE)
  private OffsetDateTime profileBanExpire;

  public static final String SERIALIZED_NAME_PROFILE_PICTURE = "profilePicture";
  @SerializedName(SERIALIZED_NAME_PROFILE_PICTURE)
  private Integer profilePicture;

  public static final String SERIALIZED_NAME_PROFILE_PICTURE_PATH = "profilePicturePath";
  @SerializedName(SERIALIZED_NAME_PROFILE_PICTURE_PATH)
  private String profilePicturePath;

  public static final String SERIALIZED_NAME_PROFILE_PICTURE_WIDE_PATH = "profilePictureWidePath";
  @SerializedName(SERIALIZED_NAME_PROFILE_PICTURE_WIDE_PATH)
  private String profilePictureWidePath;

  public static final String SERIALIZED_NAME_PROFILE_THEME = "profileTheme";
  @SerializedName(SERIALIZED_NAME_PROFILE_THEME)
  private Integer profileTheme;

  public static final String SERIALIZED_NAME_PROFILE_THEME_NAME = "profileThemeName";
  @SerializedName(SERIALIZED_NAME_PROFILE_THEME_NAME)
  private String profileThemeName;

  public static final String SERIALIZED_NAME_PSN_DISPLAY_NAME = "psnDisplayName";
  @SerializedName(SERIALIZED_NAME_PSN_DISPLAY_NAME)
  private String psnDisplayName;

  public static final String SERIALIZED_NAME_SHOW_ACTIVITY = "showActivity";
  @SerializedName(SERIALIZED_NAME_SHOW_ACTIVITY)
  private Boolean showActivity;

  public static final String SERIALIZED_NAME_SHOW_GROUP_MESSAGING = "showGroupMessaging";
  @SerializedName(SERIALIZED_NAME_SHOW_GROUP_MESSAGING)
  private Boolean showGroupMessaging;

  public static final String SERIALIZED_NAME_STADIA_DISPLAY_NAME = "stadiaDisplayName";
  @SerializedName(SERIALIZED_NAME_STADIA_DISPLAY_NAME)
  private String stadiaDisplayName;

  public static final String SERIALIZED_NAME_STATUS_DATE = "statusDate";
  @SerializedName(SERIALIZED_NAME_STATUS_DATE)
  private OffsetDateTime statusDate;

  public static final String SERIALIZED_NAME_STATUS_TEXT = "statusText";
  @SerializedName(SERIALIZED_NAME_STATUS_TEXT)
  private String statusText;

  public static final String SERIALIZED_NAME_STEAM_DISPLAY_NAME = "steamDisplayName";
  @SerializedName(SERIALIZED_NAME_STEAM_DISPLAY_NAME)
  private String steamDisplayName;

  public static final String SERIALIZED_NAME_SUCCESS_MESSAGE_FLAGS = "successMessageFlags";
  @SerializedName(SERIALIZED_NAME_SUCCESS_MESSAGE_FLAGS)
  private Long successMessageFlags;

  public static final String SERIALIZED_NAME_TWITCH_DISPLAY_NAME = "twitchDisplayName";
  @SerializedName(SERIALIZED_NAME_TWITCH_DISPLAY_NAME)
  private String twitchDisplayName;

  public static final String SERIALIZED_NAME_UNIQUE_NAME = "uniqueName";
  @SerializedName(SERIALIZED_NAME_UNIQUE_NAME)
  private String uniqueName;

  public static final String SERIALIZED_NAME_USER_TITLE = "userTitle";
  @SerializedName(SERIALIZED_NAME_USER_TITLE)
  private Integer userTitle;

  public static final String SERIALIZED_NAME_USER_TITLE_DISPLAY = "userTitleDisplay";
  @SerializedName(SERIALIZED_NAME_USER_TITLE_DISPLAY)
  private String userTitleDisplay;

  public static final String SERIALIZED_NAME_XBOX_DISPLAY_NAME = "xboxDisplayName";
  @SerializedName(SERIALIZED_NAME_XBOX_DISPLAY_NAME)
  private String xboxDisplayName;

  public UserGeneralUser() {
  }

  public UserGeneralUser about(String about) {
    this.about = about;
    return this;
  }

  /**
   * Get about
   * @return about
   */
  @javax.annotation.Nullable
  public String getAbout() {
    return about;
  }

  public void setAbout(String about) {
    this.about = about;
  }


  public UserGeneralUser blizzardDisplayName(String blizzardDisplayName) {
    this.blizzardDisplayName = blizzardDisplayName;
    return this;
  }

  /**
   * Get blizzardDisplayName
   * @return blizzardDisplayName
   */
  @javax.annotation.Nullable
  public String getBlizzardDisplayName() {
    return blizzardDisplayName;
  }

  public void setBlizzardDisplayName(String blizzardDisplayName) {
    this.blizzardDisplayName = blizzardDisplayName;
  }


  public UserGeneralUser cachedBungieGlobalDisplayName(String cachedBungieGlobalDisplayName) {
    this.cachedBungieGlobalDisplayName = cachedBungieGlobalDisplayName;
    return this;
  }

  /**
   * Get cachedBungieGlobalDisplayName
   * @return cachedBungieGlobalDisplayName
   */
  @javax.annotation.Nullable
  public String getCachedBungieGlobalDisplayName() {
    return cachedBungieGlobalDisplayName;
  }

  public void setCachedBungieGlobalDisplayName(String cachedBungieGlobalDisplayName) {
    this.cachedBungieGlobalDisplayName = cachedBungieGlobalDisplayName;
  }


  public UserGeneralUser cachedBungieGlobalDisplayNameCode(Integer cachedBungieGlobalDisplayNameCode) {
    this.cachedBungieGlobalDisplayNameCode = cachedBungieGlobalDisplayNameCode;
    return this;
  }

  /**
   * Get cachedBungieGlobalDisplayNameCode
   * @return cachedBungieGlobalDisplayNameCode
   */
  @javax.annotation.Nullable
  public Integer getCachedBungieGlobalDisplayNameCode() {
    return cachedBungieGlobalDisplayNameCode;
  }

  public void setCachedBungieGlobalDisplayNameCode(Integer cachedBungieGlobalDisplayNameCode) {
    this.cachedBungieGlobalDisplayNameCode = cachedBungieGlobalDisplayNameCode;
  }


  public UserGeneralUser context(UserUserToUserContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public UserUserToUserContext getContext() {
    return context;
  }

  public void setContext(UserUserToUserContext context) {
    this.context = context;
  }


  public UserGeneralUser displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public UserGeneralUser egsDisplayName(String egsDisplayName) {
    this.egsDisplayName = egsDisplayName;
    return this;
  }

  /**
   * Get egsDisplayName
   * @return egsDisplayName
   */
  @javax.annotation.Nullable
  public String getEgsDisplayName() {
    return egsDisplayName;
  }

  public void setEgsDisplayName(String egsDisplayName) {
    this.egsDisplayName = egsDisplayName;
  }


  public UserGeneralUser fbDisplayName(String fbDisplayName) {
    this.fbDisplayName = fbDisplayName;
    return this;
  }

  /**
   * Get fbDisplayName
   * @return fbDisplayName
   */
  @javax.annotation.Nullable
  public String getFbDisplayName() {
    return fbDisplayName;
  }

  public void setFbDisplayName(String fbDisplayName) {
    this.fbDisplayName = fbDisplayName;
  }


  public UserGeneralUser firstAccess(OffsetDateTime firstAccess) {
    this.firstAccess = firstAccess;
    return this;
  }

  /**
   * Get firstAccess
   * @return firstAccess
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstAccess() {
    return firstAccess;
  }

  public void setFirstAccess(OffsetDateTime firstAccess) {
    this.firstAccess = firstAccess;
  }


  public UserGeneralUser isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Get isDeleted
   * @return isDeleted
   */
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public UserGeneralUser lastBanReportId(Long lastBanReportId) {
    this.lastBanReportId = lastBanReportId;
    return this;
  }

  /**
   * Get lastBanReportId
   * @return lastBanReportId
   */
  @javax.annotation.Nullable
  public Long getLastBanReportId() {
    return lastBanReportId;
  }

  public void setLastBanReportId(Long lastBanReportId) {
    this.lastBanReportId = lastBanReportId;
  }


  public UserGeneralUser lastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Get lastUpdate
   * @return lastUpdate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public UserGeneralUser legacyPortalUID(Long legacyPortalUID) {
    this.legacyPortalUID = legacyPortalUID;
    return this;
  }

  /**
   * Get legacyPortalUID
   * @return legacyPortalUID
   */
  @javax.annotation.Nullable
  public Long getLegacyPortalUID() {
    return legacyPortalUID;
  }

  public void setLegacyPortalUID(Long legacyPortalUID) {
    this.legacyPortalUID = legacyPortalUID;
  }


  public UserGeneralUser locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public UserGeneralUser localeInheritDefault(Boolean localeInheritDefault) {
    this.localeInheritDefault = localeInheritDefault;
    return this;
  }

  /**
   * Get localeInheritDefault
   * @return localeInheritDefault
   */
  @javax.annotation.Nullable
  public Boolean getLocaleInheritDefault() {
    return localeInheritDefault;
  }

  public void setLocaleInheritDefault(Boolean localeInheritDefault) {
    this.localeInheritDefault = localeInheritDefault;
  }


  public UserGeneralUser membershipId(Long membershipId) {
    this.membershipId = membershipId;
    return this;
  }

  /**
   * Get membershipId
   * @return membershipId
   */
  @javax.annotation.Nullable
  public Long getMembershipId() {
    return membershipId;
  }

  public void setMembershipId(Long membershipId) {
    this.membershipId = membershipId;
  }


  public UserGeneralUser normalizedName(String normalizedName) {
    this.normalizedName = normalizedName;
    return this;
  }

  /**
   * Get normalizedName
   * @return normalizedName
   */
  @javax.annotation.Nullable
  public String getNormalizedName() {
    return normalizedName;
  }

  public void setNormalizedName(String normalizedName) {
    this.normalizedName = normalizedName;
  }


  public UserGeneralUser profileBanExpire(OffsetDateTime profileBanExpire) {
    this.profileBanExpire = profileBanExpire;
    return this;
  }

  /**
   * Get profileBanExpire
   * @return profileBanExpire
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProfileBanExpire() {
    return profileBanExpire;
  }

  public void setProfileBanExpire(OffsetDateTime profileBanExpire) {
    this.profileBanExpire = profileBanExpire;
  }


  public UserGeneralUser profilePicture(Integer profilePicture) {
    this.profilePicture = profilePicture;
    return this;
  }

  /**
   * Get profilePicture
   * @return profilePicture
   */
  @javax.annotation.Nullable
  public Integer getProfilePicture() {
    return profilePicture;
  }

  public void setProfilePicture(Integer profilePicture) {
    this.profilePicture = profilePicture;
  }


  public UserGeneralUser profilePicturePath(String profilePicturePath) {
    this.profilePicturePath = profilePicturePath;
    return this;
  }

  /**
   * Get profilePicturePath
   * @return profilePicturePath
   */
  @javax.annotation.Nullable
  public String getProfilePicturePath() {
    return profilePicturePath;
  }

  public void setProfilePicturePath(String profilePicturePath) {
    this.profilePicturePath = profilePicturePath;
  }


  public UserGeneralUser profilePictureWidePath(String profilePictureWidePath) {
    this.profilePictureWidePath = profilePictureWidePath;
    return this;
  }

  /**
   * Get profilePictureWidePath
   * @return profilePictureWidePath
   */
  @javax.annotation.Nullable
  public String getProfilePictureWidePath() {
    return profilePictureWidePath;
  }

  public void setProfilePictureWidePath(String profilePictureWidePath) {
    this.profilePictureWidePath = profilePictureWidePath;
  }


  public UserGeneralUser profileTheme(Integer profileTheme) {
    this.profileTheme = profileTheme;
    return this;
  }

  /**
   * Get profileTheme
   * @return profileTheme
   */
  @javax.annotation.Nullable
  public Integer getProfileTheme() {
    return profileTheme;
  }

  public void setProfileTheme(Integer profileTheme) {
    this.profileTheme = profileTheme;
  }


  public UserGeneralUser profileThemeName(String profileThemeName) {
    this.profileThemeName = profileThemeName;
    return this;
  }

  /**
   * Get profileThemeName
   * @return profileThemeName
   */
  @javax.annotation.Nullable
  public String getProfileThemeName() {
    return profileThemeName;
  }

  public void setProfileThemeName(String profileThemeName) {
    this.profileThemeName = profileThemeName;
  }


  public UserGeneralUser psnDisplayName(String psnDisplayName) {
    this.psnDisplayName = psnDisplayName;
    return this;
  }

  /**
   * Get psnDisplayName
   * @return psnDisplayName
   */
  @javax.annotation.Nullable
  public String getPsnDisplayName() {
    return psnDisplayName;
  }

  public void setPsnDisplayName(String psnDisplayName) {
    this.psnDisplayName = psnDisplayName;
  }


  public UserGeneralUser showActivity(Boolean showActivity) {
    this.showActivity = showActivity;
    return this;
  }

  /**
   * Get showActivity
   * @return showActivity
   */
  @javax.annotation.Nullable
  public Boolean getShowActivity() {
    return showActivity;
  }

  public void setShowActivity(Boolean showActivity) {
    this.showActivity = showActivity;
  }


  public UserGeneralUser showGroupMessaging(Boolean showGroupMessaging) {
    this.showGroupMessaging = showGroupMessaging;
    return this;
  }

  /**
   * Get showGroupMessaging
   * @return showGroupMessaging
   */
  @javax.annotation.Nullable
  public Boolean getShowGroupMessaging() {
    return showGroupMessaging;
  }

  public void setShowGroupMessaging(Boolean showGroupMessaging) {
    this.showGroupMessaging = showGroupMessaging;
  }


  public UserGeneralUser stadiaDisplayName(String stadiaDisplayName) {
    this.stadiaDisplayName = stadiaDisplayName;
    return this;
  }

  /**
   * Get stadiaDisplayName
   * @return stadiaDisplayName
   */
  @javax.annotation.Nullable
  public String getStadiaDisplayName() {
    return stadiaDisplayName;
  }

  public void setStadiaDisplayName(String stadiaDisplayName) {
    this.stadiaDisplayName = stadiaDisplayName;
  }


  public UserGeneralUser statusDate(OffsetDateTime statusDate) {
    this.statusDate = statusDate;
    return this;
  }

  /**
   * Get statusDate
   * @return statusDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStatusDate() {
    return statusDate;
  }

  public void setStatusDate(OffsetDateTime statusDate) {
    this.statusDate = statusDate;
  }


  public UserGeneralUser statusText(String statusText) {
    this.statusText = statusText;
    return this;
  }

  /**
   * Get statusText
   * @return statusText
   */
  @javax.annotation.Nullable
  public String getStatusText() {
    return statusText;
  }

  public void setStatusText(String statusText) {
    this.statusText = statusText;
  }


  public UserGeneralUser steamDisplayName(String steamDisplayName) {
    this.steamDisplayName = steamDisplayName;
    return this;
  }

  /**
   * Get steamDisplayName
   * @return steamDisplayName
   */
  @javax.annotation.Nullable
  public String getSteamDisplayName() {
    return steamDisplayName;
  }

  public void setSteamDisplayName(String steamDisplayName) {
    this.steamDisplayName = steamDisplayName;
  }


  public UserGeneralUser successMessageFlags(Long successMessageFlags) {
    this.successMessageFlags = successMessageFlags;
    return this;
  }

  /**
   * Get successMessageFlags
   * @return successMessageFlags
   */
  @javax.annotation.Nullable
  public Long getSuccessMessageFlags() {
    return successMessageFlags;
  }

  public void setSuccessMessageFlags(Long successMessageFlags) {
    this.successMessageFlags = successMessageFlags;
  }


  public UserGeneralUser twitchDisplayName(String twitchDisplayName) {
    this.twitchDisplayName = twitchDisplayName;
    return this;
  }

  /**
   * Get twitchDisplayName
   * @return twitchDisplayName
   */
  @javax.annotation.Nullable
  public String getTwitchDisplayName() {
    return twitchDisplayName;
  }

  public void setTwitchDisplayName(String twitchDisplayName) {
    this.twitchDisplayName = twitchDisplayName;
  }


  public UserGeneralUser uniqueName(String uniqueName) {
    this.uniqueName = uniqueName;
    return this;
  }

  /**
   * Get uniqueName
   * @return uniqueName
   */
  @javax.annotation.Nullable
  public String getUniqueName() {
    return uniqueName;
  }

  public void setUniqueName(String uniqueName) {
    this.uniqueName = uniqueName;
  }


  public UserGeneralUser userTitle(Integer userTitle) {
    this.userTitle = userTitle;
    return this;
  }

  /**
   * Get userTitle
   * @return userTitle
   */
  @javax.annotation.Nullable
  public Integer getUserTitle() {
    return userTitle;
  }

  public void setUserTitle(Integer userTitle) {
    this.userTitle = userTitle;
  }


  public UserGeneralUser userTitleDisplay(String userTitleDisplay) {
    this.userTitleDisplay = userTitleDisplay;
    return this;
  }

  /**
   * Get userTitleDisplay
   * @return userTitleDisplay
   */
  @javax.annotation.Nullable
  public String getUserTitleDisplay() {
    return userTitleDisplay;
  }

  public void setUserTitleDisplay(String userTitleDisplay) {
    this.userTitleDisplay = userTitleDisplay;
  }


  public UserGeneralUser xboxDisplayName(String xboxDisplayName) {
    this.xboxDisplayName = xboxDisplayName;
    return this;
  }

  /**
   * Get xboxDisplayName
   * @return xboxDisplayName
   */
  @javax.annotation.Nullable
  public String getXboxDisplayName() {
    return xboxDisplayName;
  }

  public void setXboxDisplayName(String xboxDisplayName) {
    this.xboxDisplayName = xboxDisplayName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserGeneralUser userGeneralUser = (UserGeneralUser) o;
    return Objects.equals(this.about, userGeneralUser.about) &&
        Objects.equals(this.blizzardDisplayName, userGeneralUser.blizzardDisplayName) &&
        Objects.equals(this.cachedBungieGlobalDisplayName, userGeneralUser.cachedBungieGlobalDisplayName) &&
        Objects.equals(this.cachedBungieGlobalDisplayNameCode, userGeneralUser.cachedBungieGlobalDisplayNameCode) &&
        Objects.equals(this.context, userGeneralUser.context) &&
        Objects.equals(this.displayName, userGeneralUser.displayName) &&
        Objects.equals(this.egsDisplayName, userGeneralUser.egsDisplayName) &&
        Objects.equals(this.fbDisplayName, userGeneralUser.fbDisplayName) &&
        Objects.equals(this.firstAccess, userGeneralUser.firstAccess) &&
        Objects.equals(this.isDeleted, userGeneralUser.isDeleted) &&
        Objects.equals(this.lastBanReportId, userGeneralUser.lastBanReportId) &&
        Objects.equals(this.lastUpdate, userGeneralUser.lastUpdate) &&
        Objects.equals(this.legacyPortalUID, userGeneralUser.legacyPortalUID) &&
        Objects.equals(this.locale, userGeneralUser.locale) &&
        Objects.equals(this.localeInheritDefault, userGeneralUser.localeInheritDefault) &&
        Objects.equals(this.membershipId, userGeneralUser.membershipId) &&
        Objects.equals(this.normalizedName, userGeneralUser.normalizedName) &&
        Objects.equals(this.profileBanExpire, userGeneralUser.profileBanExpire) &&
        Objects.equals(this.profilePicture, userGeneralUser.profilePicture) &&
        Objects.equals(this.profilePicturePath, userGeneralUser.profilePicturePath) &&
        Objects.equals(this.profilePictureWidePath, userGeneralUser.profilePictureWidePath) &&
        Objects.equals(this.profileTheme, userGeneralUser.profileTheme) &&
        Objects.equals(this.profileThemeName, userGeneralUser.profileThemeName) &&
        Objects.equals(this.psnDisplayName, userGeneralUser.psnDisplayName) &&
        Objects.equals(this.showActivity, userGeneralUser.showActivity) &&
        Objects.equals(this.showGroupMessaging, userGeneralUser.showGroupMessaging) &&
        Objects.equals(this.stadiaDisplayName, userGeneralUser.stadiaDisplayName) &&
        Objects.equals(this.statusDate, userGeneralUser.statusDate) &&
        Objects.equals(this.statusText, userGeneralUser.statusText) &&
        Objects.equals(this.steamDisplayName, userGeneralUser.steamDisplayName) &&
        Objects.equals(this.successMessageFlags, userGeneralUser.successMessageFlags) &&
        Objects.equals(this.twitchDisplayName, userGeneralUser.twitchDisplayName) &&
        Objects.equals(this.uniqueName, userGeneralUser.uniqueName) &&
        Objects.equals(this.userTitle, userGeneralUser.userTitle) &&
        Objects.equals(this.userTitleDisplay, userGeneralUser.userTitleDisplay) &&
        Objects.equals(this.xboxDisplayName, userGeneralUser.xboxDisplayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, blizzardDisplayName, cachedBungieGlobalDisplayName, cachedBungieGlobalDisplayNameCode, context, displayName, egsDisplayName, fbDisplayName, firstAccess, isDeleted, lastBanReportId, lastUpdate, legacyPortalUID, locale, localeInheritDefault, membershipId, normalizedName, profileBanExpire, profilePicture, profilePicturePath, profilePictureWidePath, profileTheme, profileThemeName, psnDisplayName, showActivity, showGroupMessaging, stadiaDisplayName, statusDate, statusText, steamDisplayName, successMessageFlags, twitchDisplayName, uniqueName, userTitle, userTitleDisplay, xboxDisplayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserGeneralUser {\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    blizzardDisplayName: ").append(toIndentedString(blizzardDisplayName)).append("\n");
    sb.append("    cachedBungieGlobalDisplayName: ").append(toIndentedString(cachedBungieGlobalDisplayName)).append("\n");
    sb.append("    cachedBungieGlobalDisplayNameCode: ").append(toIndentedString(cachedBungieGlobalDisplayNameCode)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    egsDisplayName: ").append(toIndentedString(egsDisplayName)).append("\n");
    sb.append("    fbDisplayName: ").append(toIndentedString(fbDisplayName)).append("\n");
    sb.append("    firstAccess: ").append(toIndentedString(firstAccess)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    lastBanReportId: ").append(toIndentedString(lastBanReportId)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    legacyPortalUID: ").append(toIndentedString(legacyPortalUID)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    localeInheritDefault: ").append(toIndentedString(localeInheritDefault)).append("\n");
    sb.append("    membershipId: ").append(toIndentedString(membershipId)).append("\n");
    sb.append("    normalizedName: ").append(toIndentedString(normalizedName)).append("\n");
    sb.append("    profileBanExpire: ").append(toIndentedString(profileBanExpire)).append("\n");
    sb.append("    profilePicture: ").append(toIndentedString(profilePicture)).append("\n");
    sb.append("    profilePicturePath: ").append(toIndentedString(profilePicturePath)).append("\n");
    sb.append("    profilePictureWidePath: ").append(toIndentedString(profilePictureWidePath)).append("\n");
    sb.append("    profileTheme: ").append(toIndentedString(profileTheme)).append("\n");
    sb.append("    profileThemeName: ").append(toIndentedString(profileThemeName)).append("\n");
    sb.append("    psnDisplayName: ").append(toIndentedString(psnDisplayName)).append("\n");
    sb.append("    showActivity: ").append(toIndentedString(showActivity)).append("\n");
    sb.append("    showGroupMessaging: ").append(toIndentedString(showGroupMessaging)).append("\n");
    sb.append("    stadiaDisplayName: ").append(toIndentedString(stadiaDisplayName)).append("\n");
    sb.append("    statusDate: ").append(toIndentedString(statusDate)).append("\n");
    sb.append("    statusText: ").append(toIndentedString(statusText)).append("\n");
    sb.append("    steamDisplayName: ").append(toIndentedString(steamDisplayName)).append("\n");
    sb.append("    successMessageFlags: ").append(toIndentedString(successMessageFlags)).append("\n");
    sb.append("    twitchDisplayName: ").append(toIndentedString(twitchDisplayName)).append("\n");
    sb.append("    uniqueName: ").append(toIndentedString(uniqueName)).append("\n");
    sb.append("    userTitle: ").append(toIndentedString(userTitle)).append("\n");
    sb.append("    userTitleDisplay: ").append(toIndentedString(userTitleDisplay)).append("\n");
    sb.append("    xboxDisplayName: ").append(toIndentedString(xboxDisplayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("about");
    openapiFields.add("blizzardDisplayName");
    openapiFields.add("cachedBungieGlobalDisplayName");
    openapiFields.add("cachedBungieGlobalDisplayNameCode");
    openapiFields.add("context");
    openapiFields.add("displayName");
    openapiFields.add("egsDisplayName");
    openapiFields.add("fbDisplayName");
    openapiFields.add("firstAccess");
    openapiFields.add("isDeleted");
    openapiFields.add("lastBanReportId");
    openapiFields.add("lastUpdate");
    openapiFields.add("legacyPortalUID");
    openapiFields.add("locale");
    openapiFields.add("localeInheritDefault");
    openapiFields.add("membershipId");
    openapiFields.add("normalizedName");
    openapiFields.add("profileBanExpire");
    openapiFields.add("profilePicture");
    openapiFields.add("profilePicturePath");
    openapiFields.add("profilePictureWidePath");
    openapiFields.add("profileTheme");
    openapiFields.add("profileThemeName");
    openapiFields.add("psnDisplayName");
    openapiFields.add("showActivity");
    openapiFields.add("showGroupMessaging");
    openapiFields.add("stadiaDisplayName");
    openapiFields.add("statusDate");
    openapiFields.add("statusText");
    openapiFields.add("steamDisplayName");
    openapiFields.add("successMessageFlags");
    openapiFields.add("twitchDisplayName");
    openapiFields.add("uniqueName");
    openapiFields.add("userTitle");
    openapiFields.add("userTitleDisplay");
    openapiFields.add("xboxDisplayName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserGeneralUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserGeneralUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserGeneralUser is not found in the empty JSON string", UserGeneralUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserGeneralUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserGeneralUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) && !jsonObj.get("about").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `about` to be a primitive type in the JSON string but got `%s`", jsonObj.get("about").toString()));
      }
      if ((jsonObj.get("blizzardDisplayName") != null && !jsonObj.get("blizzardDisplayName").isJsonNull()) && !jsonObj.get("blizzardDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blizzardDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blizzardDisplayName").toString()));
      }
      if ((jsonObj.get("cachedBungieGlobalDisplayName") != null && !jsonObj.get("cachedBungieGlobalDisplayName").isJsonNull()) && !jsonObj.get("cachedBungieGlobalDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cachedBungieGlobalDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cachedBungieGlobalDisplayName").toString()));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        UserUserToUserContext.validateJsonElement(jsonObj.get("context"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("egsDisplayName") != null && !jsonObj.get("egsDisplayName").isJsonNull()) && !jsonObj.get("egsDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `egsDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("egsDisplayName").toString()));
      }
      if ((jsonObj.get("fbDisplayName") != null && !jsonObj.get("fbDisplayName").isJsonNull()) && !jsonObj.get("fbDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fbDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fbDisplayName").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("normalizedName") != null && !jsonObj.get("normalizedName").isJsonNull()) && !jsonObj.get("normalizedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normalizedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normalizedName").toString()));
      }
      if ((jsonObj.get("profilePicturePath") != null && !jsonObj.get("profilePicturePath").isJsonNull()) && !jsonObj.get("profilePicturePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profilePicturePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profilePicturePath").toString()));
      }
      if ((jsonObj.get("profilePictureWidePath") != null && !jsonObj.get("profilePictureWidePath").isJsonNull()) && !jsonObj.get("profilePictureWidePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profilePictureWidePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profilePictureWidePath").toString()));
      }
      if ((jsonObj.get("profileThemeName") != null && !jsonObj.get("profileThemeName").isJsonNull()) && !jsonObj.get("profileThemeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileThemeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileThemeName").toString()));
      }
      if ((jsonObj.get("psnDisplayName") != null && !jsonObj.get("psnDisplayName").isJsonNull()) && !jsonObj.get("psnDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `psnDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("psnDisplayName").toString()));
      }
      if ((jsonObj.get("stadiaDisplayName") != null && !jsonObj.get("stadiaDisplayName").isJsonNull()) && !jsonObj.get("stadiaDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stadiaDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stadiaDisplayName").toString()));
      }
      if ((jsonObj.get("statusText") != null && !jsonObj.get("statusText").isJsonNull()) && !jsonObj.get("statusText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusText").toString()));
      }
      if ((jsonObj.get("steamDisplayName") != null && !jsonObj.get("steamDisplayName").isJsonNull()) && !jsonObj.get("steamDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `steamDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("steamDisplayName").toString()));
      }
      if ((jsonObj.get("twitchDisplayName") != null && !jsonObj.get("twitchDisplayName").isJsonNull()) && !jsonObj.get("twitchDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitchDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitchDisplayName").toString()));
      }
      if ((jsonObj.get("uniqueName") != null && !jsonObj.get("uniqueName").isJsonNull()) && !jsonObj.get("uniqueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueName").toString()));
      }
      if ((jsonObj.get("userTitleDisplay") != null && !jsonObj.get("userTitleDisplay").isJsonNull()) && !jsonObj.get("userTitleDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userTitleDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userTitleDisplay").toString()));
      }
      if ((jsonObj.get("xboxDisplayName") != null && !jsonObj.get("xboxDisplayName").isJsonNull()) && !jsonObj.get("xboxDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xboxDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xboxDisplayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserGeneralUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserGeneralUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserGeneralUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserGeneralUser.class));

       return (TypeAdapter<T>) new TypeAdapter<UserGeneralUser>() {
           @Override
           public void write(JsonWriter out, UserGeneralUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserGeneralUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserGeneralUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserGeneralUser
   * @throws IOException if the JSON string is invalid with respect to UserGeneralUser
   */
  public static UserGeneralUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserGeneralUser.class);
  }

  /**
   * Convert an instance of UserGeneralUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

