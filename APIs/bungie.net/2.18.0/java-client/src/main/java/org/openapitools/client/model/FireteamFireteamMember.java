/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.FireteamFireteamUserInfoCard;
import org.openapitools.client.model.UserUserInfoCard;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FireteamFireteamMember
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FireteamFireteamMember {
  public static final String SERIALIZED_NAME_BUNGIE_NET_USER_INFO = "bungieNetUserInfo";
  @SerializedName(SERIALIZED_NAME_BUNGIE_NET_USER_INFO)
  private UserUserInfoCard bungieNetUserInfo;

  public static final String SERIALIZED_NAME_CHARACTER_ID = "characterId";
  @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
  private Long characterId;

  public static final String SERIALIZED_NAME_DATE_JOINED = "dateJoined";
  @SerializedName(SERIALIZED_NAME_DATE_JOINED)
  private OffsetDateTime dateJoined;

  public static final String SERIALIZED_NAME_DESTINY_USER_INFO = "destinyUserInfo";
  @SerializedName(SERIALIZED_NAME_DESTINY_USER_INFO)
  private FireteamFireteamUserInfoCard destinyUserInfo;

  public static final String SERIALIZED_NAME_HAS_MICROPHONE = "hasMicrophone";
  @SerializedName(SERIALIZED_NAME_HAS_MICROPHONE)
  private Boolean hasMicrophone;

  public static final String SERIALIZED_NAME_LAST_PLATFORM_INVITE_ATTEMPT_DATE = "lastPlatformInviteAttemptDate";
  @SerializedName(SERIALIZED_NAME_LAST_PLATFORM_INVITE_ATTEMPT_DATE)
  private OffsetDateTime lastPlatformInviteAttemptDate;

  public static final String SERIALIZED_NAME_LAST_PLATFORM_INVITE_ATTEMPT_RESULT = "lastPlatformInviteAttemptResult";
  @SerializedName(SERIALIZED_NAME_LAST_PLATFORM_INVITE_ATTEMPT_RESULT)
  private Integer lastPlatformInviteAttemptResult;

  public FireteamFireteamMember() {
  }

  public FireteamFireteamMember bungieNetUserInfo(UserUserInfoCard bungieNetUserInfo) {
    this.bungieNetUserInfo = bungieNetUserInfo;
    return this;
  }

  /**
   * Get bungieNetUserInfo
   * @return bungieNetUserInfo
   */
  @javax.annotation.Nullable
  public UserUserInfoCard getBungieNetUserInfo() {
    return bungieNetUserInfo;
  }

  public void setBungieNetUserInfo(UserUserInfoCard bungieNetUserInfo) {
    this.bungieNetUserInfo = bungieNetUserInfo;
  }


  public FireteamFireteamMember characterId(Long characterId) {
    this.characterId = characterId;
    return this;
  }

  /**
   * Get characterId
   * @return characterId
   */
  @javax.annotation.Nullable
  public Long getCharacterId() {
    return characterId;
  }

  public void setCharacterId(Long characterId) {
    this.characterId = characterId;
  }


  public FireteamFireteamMember dateJoined(OffsetDateTime dateJoined) {
    this.dateJoined = dateJoined;
    return this;
  }

  /**
   * Get dateJoined
   * @return dateJoined
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateJoined() {
    return dateJoined;
  }

  public void setDateJoined(OffsetDateTime dateJoined) {
    this.dateJoined = dateJoined;
  }


  public FireteamFireteamMember destinyUserInfo(FireteamFireteamUserInfoCard destinyUserInfo) {
    this.destinyUserInfo = destinyUserInfo;
    return this;
  }

  /**
   * Get destinyUserInfo
   * @return destinyUserInfo
   */
  @javax.annotation.Nullable
  public FireteamFireteamUserInfoCard getDestinyUserInfo() {
    return destinyUserInfo;
  }

  public void setDestinyUserInfo(FireteamFireteamUserInfoCard destinyUserInfo) {
    this.destinyUserInfo = destinyUserInfo;
  }


  public FireteamFireteamMember hasMicrophone(Boolean hasMicrophone) {
    this.hasMicrophone = hasMicrophone;
    return this;
  }

  /**
   * Get hasMicrophone
   * @return hasMicrophone
   */
  @javax.annotation.Nullable
  public Boolean getHasMicrophone() {
    return hasMicrophone;
  }

  public void setHasMicrophone(Boolean hasMicrophone) {
    this.hasMicrophone = hasMicrophone;
  }


  public FireteamFireteamMember lastPlatformInviteAttemptDate(OffsetDateTime lastPlatformInviteAttemptDate) {
    this.lastPlatformInviteAttemptDate = lastPlatformInviteAttemptDate;
    return this;
  }

  /**
   * Get lastPlatformInviteAttemptDate
   * @return lastPlatformInviteAttemptDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastPlatformInviteAttemptDate() {
    return lastPlatformInviteAttemptDate;
  }

  public void setLastPlatformInviteAttemptDate(OffsetDateTime lastPlatformInviteAttemptDate) {
    this.lastPlatformInviteAttemptDate = lastPlatformInviteAttemptDate;
  }


  public FireteamFireteamMember lastPlatformInviteAttemptResult(Integer lastPlatformInviteAttemptResult) {
    this.lastPlatformInviteAttemptResult = lastPlatformInviteAttemptResult;
    return this;
  }

  /**
   * Get lastPlatformInviteAttemptResult
   * @return lastPlatformInviteAttemptResult
   */
  @javax.annotation.Nullable
  public Integer getLastPlatformInviteAttemptResult() {
    return lastPlatformInviteAttemptResult;
  }

  public void setLastPlatformInviteAttemptResult(Integer lastPlatformInviteAttemptResult) {
    this.lastPlatformInviteAttemptResult = lastPlatformInviteAttemptResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FireteamFireteamMember fireteamFireteamMember = (FireteamFireteamMember) o;
    return Objects.equals(this.bungieNetUserInfo, fireteamFireteamMember.bungieNetUserInfo) &&
        Objects.equals(this.characterId, fireteamFireteamMember.characterId) &&
        Objects.equals(this.dateJoined, fireteamFireteamMember.dateJoined) &&
        Objects.equals(this.destinyUserInfo, fireteamFireteamMember.destinyUserInfo) &&
        Objects.equals(this.hasMicrophone, fireteamFireteamMember.hasMicrophone) &&
        Objects.equals(this.lastPlatformInviteAttemptDate, fireteamFireteamMember.lastPlatformInviteAttemptDate) &&
        Objects.equals(this.lastPlatformInviteAttemptResult, fireteamFireteamMember.lastPlatformInviteAttemptResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bungieNetUserInfo, characterId, dateJoined, destinyUserInfo, hasMicrophone, lastPlatformInviteAttemptDate, lastPlatformInviteAttemptResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FireteamFireteamMember {\n");
    sb.append("    bungieNetUserInfo: ").append(toIndentedString(bungieNetUserInfo)).append("\n");
    sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
    sb.append("    dateJoined: ").append(toIndentedString(dateJoined)).append("\n");
    sb.append("    destinyUserInfo: ").append(toIndentedString(destinyUserInfo)).append("\n");
    sb.append("    hasMicrophone: ").append(toIndentedString(hasMicrophone)).append("\n");
    sb.append("    lastPlatformInviteAttemptDate: ").append(toIndentedString(lastPlatformInviteAttemptDate)).append("\n");
    sb.append("    lastPlatformInviteAttemptResult: ").append(toIndentedString(lastPlatformInviteAttemptResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bungieNetUserInfo");
    openapiFields.add("characterId");
    openapiFields.add("dateJoined");
    openapiFields.add("destinyUserInfo");
    openapiFields.add("hasMicrophone");
    openapiFields.add("lastPlatformInviteAttemptDate");
    openapiFields.add("lastPlatformInviteAttemptResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FireteamFireteamMember
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FireteamFireteamMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FireteamFireteamMember is not found in the empty JSON string", FireteamFireteamMember.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FireteamFireteamMember.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FireteamFireteamMember` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bungieNetUserInfo`
      if (jsonObj.get("bungieNetUserInfo") != null && !jsonObj.get("bungieNetUserInfo").isJsonNull()) {
        UserUserInfoCard.validateJsonElement(jsonObj.get("bungieNetUserInfo"));
      }
      // validate the optional field `destinyUserInfo`
      if (jsonObj.get("destinyUserInfo") != null && !jsonObj.get("destinyUserInfo").isJsonNull()) {
        FireteamFireteamUserInfoCard.validateJsonElement(jsonObj.get("destinyUserInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FireteamFireteamMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FireteamFireteamMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FireteamFireteamMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FireteamFireteamMember.class));

       return (TypeAdapter<T>) new TypeAdapter<FireteamFireteamMember>() {
           @Override
           public void write(JsonWriter out, FireteamFireteamMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FireteamFireteamMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FireteamFireteamMember given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FireteamFireteamMember
   * @throws IOException if the JSON string is invalid with respect to FireteamFireteamMember
   */
  public static FireteamFireteamMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FireteamFireteamMember.class);
  }

  /**
   * Convert an instance of FireteamFireteamMember to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

