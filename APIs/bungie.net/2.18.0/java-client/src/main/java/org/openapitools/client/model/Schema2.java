/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Represents the possible components that can be returned from Destiny \&quot;Get\&quot; calls such as GetProfile, GetCharacter, GetVendor etc...  When making one of these requests, you will pass one or more of these components as a comma separated list in the \&quot;?components&#x3D;\&quot; querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass \&quot;?components&#x3D;Profiles,Characters,CharacterProgressions\&quot; You may use either the numerical or string values.
 */
@JsonAdapter(Schema2.Adapter.class)
public enum Schema2 {
  
  NUMBER_0(0),
  
  NUMBER_100(100),
  
  NUMBER_101(101),
  
  NUMBER_102(102),
  
  NUMBER_103(103),
  
  NUMBER_104(104),
  
  NUMBER_105(105),
  
  NUMBER_200(200),
  
  NUMBER_201(201),
  
  NUMBER_202(202),
  
  NUMBER_203(203),
  
  NUMBER_204(204),
  
  NUMBER_205(205),
  
  NUMBER_206(206),
  
  NUMBER_300(300),
  
  NUMBER_301(301),
  
  NUMBER_302(302),
  
  NUMBER_303(303),
  
  NUMBER_304(304),
  
  NUMBER_305(305),
  
  NUMBER_306(306),
  
  NUMBER_307(307),
  
  NUMBER_308(308),
  
  NUMBER_309(309),
  
  NUMBER_310(310),
  
  NUMBER_400(400),
  
  NUMBER_401(401),
  
  NUMBER_402(402),
  
  NUMBER_500(500),
  
  NUMBER_600(600),
  
  NUMBER_700(700),
  
  NUMBER_800(800),
  
  NUMBER_900(900),
  
  NUMBER_1000(1000),
  
  NUMBER_1100(1100),
  
  NUMBER_1200(1200),
  
  NUMBER_1300(1300),
  
  NUMBER_1400(1400);

  private Integer value;

  Schema2(Integer value) {
    this.value = value;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Schema2 fromValue(Integer value) {
    for (Schema2 b : Schema2.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Schema2> {
    @Override
    public void write(final JsonWriter jsonWriter, final Schema2 enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Schema2 read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return Schema2.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    Integer value = jsonElement.getAsInt();
    Schema2.fromValue(value);
  }
}

