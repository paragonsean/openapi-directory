/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyArtDyeReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Characters can not only have Inventory buckets (containers of items that are generally matched by their type or functionality), they can also have Equipment Slots.  The Equipment Slot is an indicator that the related bucket can have instanced items equipped on the character. For instance, the Primary Weapon bucket has an Equipment Slot that determines whether you can equip primary weapons, and holds the association between its slot and the inventory bucket from which it can have items equipped.  An Equipment Slot must have a related Inventory Bucket, but not all inventory buckets must have Equipment Slots.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyEquipmentSlotDefinition {
  public static final String SERIALIZED_NAME_APPLY_CUSTOM_ART_DYES = "applyCustomArtDyes";
  @SerializedName(SERIALIZED_NAME_APPLY_CUSTOM_ART_DYES)
  private Boolean applyCustomArtDyes;

  public static final String SERIALIZED_NAME_ART_DYE_CHANNELS = "artDyeChannels";
  @SerializedName(SERIALIZED_NAME_ART_DYE_CHANNELS)
  private List<DestinyDefinitionsDestinyArtDyeReference> artDyeChannels = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUCKET_TYPE_HASH = "bucketTypeHash";
  @SerializedName(SERIALIZED_NAME_BUCKET_TYPE_HASH)
  private Integer bucketTypeHash;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_EQUIPMENT_CATEGORY_HASH = "equipmentCategoryHash";
  @SerializedName(SERIALIZED_NAME_EQUIPMENT_CATEGORY_HASH)
  private Integer equipmentCategoryHash;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public DestinyDefinitionsDestinyEquipmentSlotDefinition() {
  }

  public DestinyDefinitionsDestinyEquipmentSlotDefinition applyCustomArtDyes(Boolean applyCustomArtDyes) {
    this.applyCustomArtDyes = applyCustomArtDyes;
    return this;
  }

  /**
   * If True, equipped items should have their custom art dyes applied when rendering the item. Otherwise, custom art dyes on an item should be ignored if the item is equipped in this slot.
   * @return applyCustomArtDyes
   */
  @javax.annotation.Nullable
  public Boolean getApplyCustomArtDyes() {
    return applyCustomArtDyes;
  }

  public void setApplyCustomArtDyes(Boolean applyCustomArtDyes) {
    this.applyCustomArtDyes = applyCustomArtDyes;
  }


  public DestinyDefinitionsDestinyEquipmentSlotDefinition artDyeChannels(List<DestinyDefinitionsDestinyArtDyeReference> artDyeChannels) {
    this.artDyeChannels = artDyeChannels;
    return this;
  }

  public DestinyDefinitionsDestinyEquipmentSlotDefinition addArtDyeChannelsItem(DestinyDefinitionsDestinyArtDyeReference artDyeChannelsItem) {
    if (this.artDyeChannels == null) {
      this.artDyeChannels = new ArrayList<>();
    }
    this.artDyeChannels.add(artDyeChannelsItem);
    return this;
  }

  /**
   * The Art Dye Channels that apply to this equipment slot.
   * @return artDyeChannels
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyArtDyeReference> getArtDyeChannels() {
    return artDyeChannels;
  }

  public void setArtDyeChannels(List<DestinyDefinitionsDestinyArtDyeReference> artDyeChannels) {
    this.artDyeChannels = artDyeChannels;
  }


  public DestinyDefinitionsDestinyEquipmentSlotDefinition bucketTypeHash(Integer bucketTypeHash) {
    this.bucketTypeHash = bucketTypeHash;
    return this;
  }

  /**
   * The inventory bucket that owns this equipment slot.
   * @return bucketTypeHash
   */
  @javax.annotation.Nullable
  public Integer getBucketTypeHash() {
    return bucketTypeHash;
  }

  public void setBucketTypeHash(Integer bucketTypeHash) {
    this.bucketTypeHash = bucketTypeHash;
  }


  public DestinyDefinitionsDestinyEquipmentSlotDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinyEquipmentSlotDefinition equipmentCategoryHash(Integer equipmentCategoryHash) {
    this.equipmentCategoryHash = equipmentCategoryHash;
    return this;
  }

  /**
   * These technically point to \&quot;Equipment Category Definitions\&quot;. But don&#39;t get excited. There&#39;s nothing of significant value in those definitions, so I didn&#39;t bother to expose them. You can use the hash here to group equipment slots by common functionality, which serves the same purpose as if we had the Equipment Category definitions exposed.
   * @return equipmentCategoryHash
   */
  @javax.annotation.Nullable
  public Integer getEquipmentCategoryHash() {
    return equipmentCategoryHash;
  }

  public void setEquipmentCategoryHash(Integer equipmentCategoryHash) {
    this.equipmentCategoryHash = equipmentCategoryHash;
  }


  public DestinyDefinitionsDestinyEquipmentSlotDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDestinyEquipmentSlotDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinyEquipmentSlotDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyEquipmentSlotDefinition destinyDefinitionsDestinyEquipmentSlotDefinition = (DestinyDefinitionsDestinyEquipmentSlotDefinition) o;
    return Objects.equals(this.applyCustomArtDyes, destinyDefinitionsDestinyEquipmentSlotDefinition.applyCustomArtDyes) &&
        Objects.equals(this.artDyeChannels, destinyDefinitionsDestinyEquipmentSlotDefinition.artDyeChannels) &&
        Objects.equals(this.bucketTypeHash, destinyDefinitionsDestinyEquipmentSlotDefinition.bucketTypeHash) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinyEquipmentSlotDefinition.displayProperties) &&
        Objects.equals(this.equipmentCategoryHash, destinyDefinitionsDestinyEquipmentSlotDefinition.equipmentCategoryHash) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyEquipmentSlotDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinyEquipmentSlotDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyEquipmentSlotDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyCustomArtDyes, artDyeChannels, bucketTypeHash, displayProperties, equipmentCategoryHash, hash, index, redacted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyEquipmentSlotDefinition {\n");
    sb.append("    applyCustomArtDyes: ").append(toIndentedString(applyCustomArtDyes)).append("\n");
    sb.append("    artDyeChannels: ").append(toIndentedString(artDyeChannels)).append("\n");
    sb.append("    bucketTypeHash: ").append(toIndentedString(bucketTypeHash)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    equipmentCategoryHash: ").append(toIndentedString(equipmentCategoryHash)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applyCustomArtDyes");
    openapiFields.add("artDyeChannels");
    openapiFields.add("bucketTypeHash");
    openapiFields.add("displayProperties");
    openapiFields.add("equipmentCategoryHash");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("redacted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyEquipmentSlotDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyEquipmentSlotDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyEquipmentSlotDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyEquipmentSlotDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyEquipmentSlotDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyEquipmentSlotDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("artDyeChannels") != null && !jsonObj.get("artDyeChannels").isJsonNull()) {
        JsonArray jsonArrayartDyeChannels = jsonObj.getAsJsonArray("artDyeChannels");
        if (jsonArrayartDyeChannels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artDyeChannels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artDyeChannels` to be an array in the JSON string but got `%s`", jsonObj.get("artDyeChannels").toString()));
          }

          // validate the optional field `artDyeChannels` (array)
          for (int i = 0; i < jsonArrayartDyeChannels.size(); i++) {
            DestinyDefinitionsDestinyArtDyeReference.validateJsonElement(jsonArrayartDyeChannels.get(i));
          };
        }
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyEquipmentSlotDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyEquipmentSlotDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyEquipmentSlotDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyEquipmentSlotDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyEquipmentSlotDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyEquipmentSlotDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyEquipmentSlotDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyEquipmentSlotDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyEquipmentSlotDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyEquipmentSlotDefinition
   */
  public static DestinyDefinitionsDestinyEquipmentSlotDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyEquipmentSlotDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyEquipmentSlotDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

