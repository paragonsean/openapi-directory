/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about matchmaking and party size for the activity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition {
  public static final String SERIALIZED_NAME_IS_MATCHMADE = "isMatchmade";
  @SerializedName(SERIALIZED_NAME_IS_MATCHMADE)
  private Boolean isMatchmade;

  public static final String SERIALIZED_NAME_MAX_PARTY = "maxParty";
  @SerializedName(SERIALIZED_NAME_MAX_PARTY)
  private Integer maxParty;

  public static final String SERIALIZED_NAME_MAX_PLAYERS = "maxPlayers";
  @SerializedName(SERIALIZED_NAME_MAX_PLAYERS)
  private Integer maxPlayers;

  public static final String SERIALIZED_NAME_MIN_PARTY = "minParty";
  @SerializedName(SERIALIZED_NAME_MIN_PARTY)
  private Integer minParty;

  public static final String SERIALIZED_NAME_REQUIRES_GUARDIAN_OATH = "requiresGuardianOath";
  @SerializedName(SERIALIZED_NAME_REQUIRES_GUARDIAN_OATH)
  private Boolean requiresGuardianOath;

  public DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition() {
  }

  public DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition isMatchmade(Boolean isMatchmade) {
    this.isMatchmade = isMatchmade;
    return this;
  }

  /**
   * If TRUE, the activity is matchmade. Otherwise, it requires explicit forming of a party.
   * @return isMatchmade
   */
  @javax.annotation.Nullable
  public Boolean getIsMatchmade() {
    return isMatchmade;
  }

  public void setIsMatchmade(Boolean isMatchmade) {
    this.isMatchmade = isMatchmade;
  }


  public DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition maxParty(Integer maxParty) {
    this.maxParty = maxParty;
    return this;
  }

  /**
   * The maximum # of people allowed in a Fireteam.
   * @return maxParty
   */
  @javax.annotation.Nullable
  public Integer getMaxParty() {
    return maxParty;
  }

  public void setMaxParty(Integer maxParty) {
    this.maxParty = maxParty;
  }


  public DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition maxPlayers(Integer maxPlayers) {
    this.maxPlayers = maxPlayers;
    return this;
  }

  /**
   * The maximum # of people allowed across all teams in the activity.
   * @return maxPlayers
   */
  @javax.annotation.Nullable
  public Integer getMaxPlayers() {
    return maxPlayers;
  }

  public void setMaxPlayers(Integer maxPlayers) {
    this.maxPlayers = maxPlayers;
  }


  public DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition minParty(Integer minParty) {
    this.minParty = minParty;
    return this;
  }

  /**
   * The minimum # of people in the fireteam for the activity to launch.
   * @return minParty
   */
  @javax.annotation.Nullable
  public Integer getMinParty() {
    return minParty;
  }

  public void setMinParty(Integer minParty) {
    this.minParty = minParty;
  }


  public DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition requiresGuardianOath(Boolean requiresGuardianOath) {
    this.requiresGuardianOath = requiresGuardianOath;
    return this;
  }

  /**
   * If true, you have to Solemnly Swear to be up to Nothing But Good(tm) to play.
   * @return requiresGuardianOath
   */
  @javax.annotation.Nullable
  public Boolean getRequiresGuardianOath() {
    return requiresGuardianOath;
  }

  public void setRequiresGuardianOath(Boolean requiresGuardianOath) {
    this.requiresGuardianOath = requiresGuardianOath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition destinyDefinitionsDestinyActivityMatchmakingBlockDefinition = (DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition) o;
    return Objects.equals(this.isMatchmade, destinyDefinitionsDestinyActivityMatchmakingBlockDefinition.isMatchmade) &&
        Objects.equals(this.maxParty, destinyDefinitionsDestinyActivityMatchmakingBlockDefinition.maxParty) &&
        Objects.equals(this.maxPlayers, destinyDefinitionsDestinyActivityMatchmakingBlockDefinition.maxPlayers) &&
        Objects.equals(this.minParty, destinyDefinitionsDestinyActivityMatchmakingBlockDefinition.minParty) &&
        Objects.equals(this.requiresGuardianOath, destinyDefinitionsDestinyActivityMatchmakingBlockDefinition.requiresGuardianOath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isMatchmade, maxParty, maxPlayers, minParty, requiresGuardianOath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition {\n");
    sb.append("    isMatchmade: ").append(toIndentedString(isMatchmade)).append("\n");
    sb.append("    maxParty: ").append(toIndentedString(maxParty)).append("\n");
    sb.append("    maxPlayers: ").append(toIndentedString(maxPlayers)).append("\n");
    sb.append("    minParty: ").append(toIndentedString(minParty)).append("\n");
    sb.append("    requiresGuardianOath: ").append(toIndentedString(requiresGuardianOath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isMatchmade");
    openapiFields.add("maxParty");
    openapiFields.add("maxPlayers");
    openapiFields.add("minParty");
    openapiFields.add("requiresGuardianOath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition
   */
  public static DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

