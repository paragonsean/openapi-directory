/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyTalentNodeStepGroups;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Perks are modifiers to a character or item that can be applied situationally.  - Perks determine a weapons&#39; damage type.  - Perks put the Mods in Modifiers (they are literally the entity that bestows the Sandbox benefit for whatever fluff text about the modifier in the Socket, Plug or Talent Node)  - Perks are applied for unique alterations of state in Objectives  Anyways, I&#39;m sure you can see why perks are so interesting.  What Perks often don&#39;t have is human readable information, so we attempt to reverse engineer that by pulling that data from places that uniquely refer to these perks: namely, Talent Nodes and Plugs. That only gives us a subset of perks that are human readable, but those perks are the ones people generally care about anyways. The others are left as a mystery, their true purpose mostly unknown and undocumented.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinySandboxPerkDefinition {
  public static final String SERIALIZED_NAME_DAMAGE_TYPE = "damageType";
  @SerializedName(SERIALIZED_NAME_DAMAGE_TYPE)
  private Integer damageType;

  public static final String SERIALIZED_NAME_DAMAGE_TYPE_HASH = "damageTypeHash";
  @SerializedName(SERIALIZED_NAME_DAMAGE_TYPE_HASH)
  private Integer damageTypeHash;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_IS_DISPLAYABLE = "isDisplayable";
  @SerializedName(SERIALIZED_NAME_IS_DISPLAYABLE)
  private Boolean isDisplayable;

  public static final String SERIALIZED_NAME_PERK_GROUPS = "perkGroups";
  @SerializedName(SERIALIZED_NAME_PERK_GROUPS)
  private DestinyDefinitionsDestinyTalentNodeStepGroups perkGroups;

  public static final String SERIALIZED_NAME_PERK_IDENTIFIER = "perkIdentifier";
  @SerializedName(SERIALIZED_NAME_PERK_IDENTIFIER)
  private String perkIdentifier;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public DestinyDefinitionsDestinySandboxPerkDefinition() {
  }

  public DestinyDefinitionsDestinySandboxPerkDefinition damageType(Integer damageType) {
    this.damageType = damageType;
    return this;
  }

  /**
   * If this perk grants a damage type to a weapon, the damage type will be defined here.  Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition.
   * @return damageType
   */
  @javax.annotation.Nullable
  public Integer getDamageType() {
    return damageType;
  }

  public void setDamageType(Integer damageType) {
    this.damageType = damageType;
  }


  public DestinyDefinitionsDestinySandboxPerkDefinition damageTypeHash(Integer damageTypeHash) {
    this.damageTypeHash = damageTypeHash;
    return this;
  }

  /**
   * The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.  This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient.
   * @return damageTypeHash
   */
  @javax.annotation.Nullable
  public Integer getDamageTypeHash() {
    return damageTypeHash;
  }

  public void setDamageTypeHash(Integer damageTypeHash) {
    this.damageTypeHash = damageTypeHash;
  }


  public DestinyDefinitionsDestinySandboxPerkDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * These display properties are by no means guaranteed to be populated. Usually when it is, it&#39;s only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk.
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinySandboxPerkDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDestinySandboxPerkDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinySandboxPerkDefinition isDisplayable(Boolean isDisplayable) {
    this.isDisplayable = isDisplayable;
    return this;
  }

  /**
   * If true, you can actually show the perk in the UI. Otherwise, it doesn&#39;t have useful player-facing information.
   * @return isDisplayable
   */
  @javax.annotation.Nullable
  public Boolean getIsDisplayable() {
    return isDisplayable;
  }

  public void setIsDisplayable(Boolean isDisplayable) {
    this.isDisplayable = isDisplayable;
  }


  public DestinyDefinitionsDestinySandboxPerkDefinition perkGroups(DestinyDefinitionsDestinyTalentNodeStepGroups perkGroups) {
    this.perkGroups = perkGroups;
    return this;
  }

  /**
   * An old holdover from the original Armory, this was an attempt to group perks by functionality.  It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order.
   * @return perkGroups
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsDestinyTalentNodeStepGroups getPerkGroups() {
    return perkGroups;
  }

  public void setPerkGroups(DestinyDefinitionsDestinyTalentNodeStepGroups perkGroups) {
    this.perkGroups = perkGroups;
  }


  public DestinyDefinitionsDestinySandboxPerkDefinition perkIdentifier(String perkIdentifier) {
    this.perkIdentifier = perkIdentifier;
    return this;
  }

  /**
   * The string identifier for the perk.
   * @return perkIdentifier
   */
  @javax.annotation.Nullable
  public String getPerkIdentifier() {
    return perkIdentifier;
  }

  public void setPerkIdentifier(String perkIdentifier) {
    this.perkIdentifier = perkIdentifier;
  }


  public DestinyDefinitionsDestinySandboxPerkDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinySandboxPerkDefinition destinyDefinitionsDestinySandboxPerkDefinition = (DestinyDefinitionsDestinySandboxPerkDefinition) o;
    return Objects.equals(this.damageType, destinyDefinitionsDestinySandboxPerkDefinition.damageType) &&
        Objects.equals(this.damageTypeHash, destinyDefinitionsDestinySandboxPerkDefinition.damageTypeHash) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinySandboxPerkDefinition.displayProperties) &&
        Objects.equals(this.hash, destinyDefinitionsDestinySandboxPerkDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinySandboxPerkDefinition.index) &&
        Objects.equals(this.isDisplayable, destinyDefinitionsDestinySandboxPerkDefinition.isDisplayable) &&
        Objects.equals(this.perkGroups, destinyDefinitionsDestinySandboxPerkDefinition.perkGroups) &&
        Objects.equals(this.perkIdentifier, destinyDefinitionsDestinySandboxPerkDefinition.perkIdentifier) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinySandboxPerkDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(damageType, damageTypeHash, displayProperties, hash, index, isDisplayable, perkGroups, perkIdentifier, redacted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinySandboxPerkDefinition {\n");
    sb.append("    damageType: ").append(toIndentedString(damageType)).append("\n");
    sb.append("    damageTypeHash: ").append(toIndentedString(damageTypeHash)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    isDisplayable: ").append(toIndentedString(isDisplayable)).append("\n");
    sb.append("    perkGroups: ").append(toIndentedString(perkGroups)).append("\n");
    sb.append("    perkIdentifier: ").append(toIndentedString(perkIdentifier)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("damageType");
    openapiFields.add("damageTypeHash");
    openapiFields.add("displayProperties");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("isDisplayable");
    openapiFields.add("perkGroups");
    openapiFields.add("perkIdentifier");
    openapiFields.add("redacted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinySandboxPerkDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinySandboxPerkDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinySandboxPerkDefinition is not found in the empty JSON string", DestinyDefinitionsDestinySandboxPerkDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinySandboxPerkDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinySandboxPerkDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      // validate the optional field `perkGroups`
      if (jsonObj.get("perkGroups") != null && !jsonObj.get("perkGroups").isJsonNull()) {
        DestinyDefinitionsDestinyTalentNodeStepGroups.validateJsonElement(jsonObj.get("perkGroups"));
      }
      if ((jsonObj.get("perkIdentifier") != null && !jsonObj.get("perkIdentifier").isJsonNull()) && !jsonObj.get("perkIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `perkIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("perkIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinySandboxPerkDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinySandboxPerkDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinySandboxPerkDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinySandboxPerkDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinySandboxPerkDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinySandboxPerkDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinySandboxPerkDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinySandboxPerkDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinySandboxPerkDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinySandboxPerkDefinition
   */
  public static DestinyDefinitionsDestinySandboxPerkDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinySandboxPerkDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinySandboxPerkDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

