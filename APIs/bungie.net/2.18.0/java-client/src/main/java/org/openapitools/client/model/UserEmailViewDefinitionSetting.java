/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.UserEMailSettingLocalization;
import org.openapitools.client.model.UserEmailSubscriptionDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserEmailViewDefinitionSetting
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserEmailViewDefinitionSetting {
  public static final String SERIALIZED_NAME_LOCALIZATION = "localization";
  @SerializedName(SERIALIZED_NAME_LOCALIZATION)
  private Map<String, UserEMailSettingLocalization> localization = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPT_IN_AGGREGATE_VALUE = "optInAggregateValue";
  @SerializedName(SERIALIZED_NAME_OPT_IN_AGGREGATE_VALUE)
  private Long optInAggregateValue;

  public static final String SERIALIZED_NAME_SET_BY_DEFAULT = "setByDefault";
  @SerializedName(SERIALIZED_NAME_SET_BY_DEFAULT)
  private Boolean setByDefault;

  public static final String SERIALIZED_NAME_SUBSCRIPTIONS = "subscriptions";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTIONS)
  private List<UserEmailSubscriptionDefinition> subscriptions = new ArrayList<>();

  public UserEmailViewDefinitionSetting() {
  }

  public UserEmailViewDefinitionSetting localization(Map<String, UserEMailSettingLocalization> localization) {
    this.localization = localization;
    return this;
  }

  public UserEmailViewDefinitionSetting putLocalizationItem(String key, UserEMailSettingLocalization localizationItem) {
    if (this.localization == null) {
      this.localization = new HashMap<>();
    }
    this.localization.put(key, localizationItem);
    return this;
  }

  /**
   * A dictionary of localized text for the EMail setting, keyed by the locale.
   * @return localization
   */
  @javax.annotation.Nullable
  public Map<String, UserEMailSettingLocalization> getLocalization() {
    return localization;
  }

  public void setLocalization(Map<String, UserEMailSettingLocalization> localization) {
    this.localization = localization;
  }


  public UserEmailViewDefinitionSetting name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The identifier for this UI Setting, which can be used to relate it to custom strings or other data as desired.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserEmailViewDefinitionSetting optInAggregateValue(Long optInAggregateValue) {
    this.optInAggregateValue = optInAggregateValue;
    return this;
  }

  /**
   * The OptInFlags value to set or clear if this setting is set or cleared in the UI. It is the aggregate of all underlying opt-in flags related to this setting.
   * @return optInAggregateValue
   */
  @javax.annotation.Nullable
  public Long getOptInAggregateValue() {
    return optInAggregateValue;
  }

  public void setOptInAggregateValue(Long optInAggregateValue) {
    this.optInAggregateValue = optInAggregateValue;
  }


  public UserEmailViewDefinitionSetting setByDefault(Boolean setByDefault) {
    this.setByDefault = setByDefault;
    return this;
  }

  /**
   * If true, this setting should be set by default if the user hasn&#39;t chosen whether it&#39;s set or cleared yet.
   * @return setByDefault
   */
  @javax.annotation.Nullable
  public Boolean getSetByDefault() {
    return setByDefault;
  }

  public void setSetByDefault(Boolean setByDefault) {
    this.setByDefault = setByDefault;
  }


  public UserEmailViewDefinitionSetting subscriptions(List<UserEmailSubscriptionDefinition> subscriptions) {
    this.subscriptions = subscriptions;
    return this;
  }

  public UserEmailViewDefinitionSetting addSubscriptionsItem(UserEmailSubscriptionDefinition subscriptionsItem) {
    if (this.subscriptions == null) {
      this.subscriptions = new ArrayList<>();
    }
    this.subscriptions.add(subscriptionsItem);
    return this;
  }

  /**
   * The subscriptions to show as children of this setting, if any.
   * @return subscriptions
   */
  @javax.annotation.Nullable
  public List<UserEmailSubscriptionDefinition> getSubscriptions() {
    return subscriptions;
  }

  public void setSubscriptions(List<UserEmailSubscriptionDefinition> subscriptions) {
    this.subscriptions = subscriptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserEmailViewDefinitionSetting userEmailViewDefinitionSetting = (UserEmailViewDefinitionSetting) o;
    return Objects.equals(this.localization, userEmailViewDefinitionSetting.localization) &&
        Objects.equals(this.name, userEmailViewDefinitionSetting.name) &&
        Objects.equals(this.optInAggregateValue, userEmailViewDefinitionSetting.optInAggregateValue) &&
        Objects.equals(this.setByDefault, userEmailViewDefinitionSetting.setByDefault) &&
        Objects.equals(this.subscriptions, userEmailViewDefinitionSetting.subscriptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localization, name, optInAggregateValue, setByDefault, subscriptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserEmailViewDefinitionSetting {\n");
    sb.append("    localization: ").append(toIndentedString(localization)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optInAggregateValue: ").append(toIndentedString(optInAggregateValue)).append("\n");
    sb.append("    setByDefault: ").append(toIndentedString(setByDefault)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localization");
    openapiFields.add("name");
    openapiFields.add("optInAggregateValue");
    openapiFields.add("setByDefault");
    openapiFields.add("subscriptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserEmailViewDefinitionSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserEmailViewDefinitionSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserEmailViewDefinitionSetting is not found in the empty JSON string", UserEmailViewDefinitionSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserEmailViewDefinitionSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserEmailViewDefinitionSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("subscriptions") != null && !jsonObj.get("subscriptions").isJsonNull()) {
        JsonArray jsonArraysubscriptions = jsonObj.getAsJsonArray("subscriptions");
        if (jsonArraysubscriptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subscriptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subscriptions` to be an array in the JSON string but got `%s`", jsonObj.get("subscriptions").toString()));
          }

          // validate the optional field `subscriptions` (array)
          for (int i = 0; i < jsonArraysubscriptions.size(); i++) {
            UserEmailSubscriptionDefinition.validateJsonElement(jsonArraysubscriptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserEmailViewDefinitionSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserEmailViewDefinitionSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserEmailViewDefinitionSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserEmailViewDefinitionSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<UserEmailViewDefinitionSetting>() {
           @Override
           public void write(JsonWriter out, UserEmailViewDefinitionSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserEmailViewDefinitionSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserEmailViewDefinitionSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserEmailViewDefinitionSetting
   * @throws IOException if the JSON string is invalid with respect to UserEmailViewDefinitionSetting
   */
  public static UserEmailViewDefinitionSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserEmailViewDefinitionSetting.class);
  }

  /**
   * Convert an instance of UserEmailViewDefinitionSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

