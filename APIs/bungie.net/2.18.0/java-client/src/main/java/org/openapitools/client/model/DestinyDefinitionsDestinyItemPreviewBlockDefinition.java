/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Items like Sacks or Boxes can have items that it shows in-game when you view details that represent the items you can obtain if you use or acquire the item.  This defines those categories, and gives some insights into that data&#39;s source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemPreviewBlockDefinition {
  public static final String SERIALIZED_NAME_ARTIFACT_HASH = "artifactHash";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_HASH)
  private Integer artifactHash;

  public static final String SERIALIZED_NAME_DERIVED_ITEM_CATEGORIES = "derivedItemCategories";
  @SerializedName(SERIALIZED_NAME_DERIVED_ITEM_CATEGORIES)
  private List<DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition> derivedItemCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREVIEW_ACTION_STRING = "previewActionString";
  @SerializedName(SERIALIZED_NAME_PREVIEW_ACTION_STRING)
  private String previewActionString;

  public static final String SERIALIZED_NAME_PREVIEW_VENDOR_HASH = "previewVendorHash";
  @SerializedName(SERIALIZED_NAME_PREVIEW_VENDOR_HASH)
  private Integer previewVendorHash;

  public static final String SERIALIZED_NAME_SCREEN_STYLE = "screenStyle";
  @SerializedName(SERIALIZED_NAME_SCREEN_STYLE)
  private String screenStyle;

  public DestinyDefinitionsDestinyItemPreviewBlockDefinition() {
  }

  public DestinyDefinitionsDestinyItemPreviewBlockDefinition artifactHash(Integer artifactHash) {
    this.artifactHash = artifactHash;
    return this;
  }

  /**
   * If this item should show you Artifact information when you preview it, this is the hash identifier of the DestinyArtifactDefinition for the artifact whose data should be shown.
   * @return artifactHash
   */
  @javax.annotation.Nullable
  public Integer getArtifactHash() {
    return artifactHash;
  }

  public void setArtifactHash(Integer artifactHash) {
    this.artifactHash = artifactHash;
  }


  public DestinyDefinitionsDestinyItemPreviewBlockDefinition derivedItemCategories(List<DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition> derivedItemCategories) {
    this.derivedItemCategories = derivedItemCategories;
    return this;
  }

  public DestinyDefinitionsDestinyItemPreviewBlockDefinition addDerivedItemCategoriesItem(DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition derivedItemCategoriesItem) {
    if (this.derivedItemCategories == null) {
      this.derivedItemCategories = new ArrayList<>();
    }
    this.derivedItemCategories.add(derivedItemCategoriesItem);
    return this;
  }

  /**
   * This is a list of the items being previewed, categorized in the same way as they are in the preview UI.
   * @return derivedItemCategories
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition> getDerivedItemCategories() {
    return derivedItemCategories;
  }

  public void setDerivedItemCategories(List<DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition> derivedItemCategories) {
    this.derivedItemCategories = derivedItemCategories;
  }


  public DestinyDefinitionsDestinyItemPreviewBlockDefinition previewActionString(String previewActionString) {
    this.previewActionString = previewActionString;
    return this;
  }

  /**
   * If the preview has an associated action (like \&quot;Open\&quot;), this will be the localized string for that action.
   * @return previewActionString
   */
  @javax.annotation.Nullable
  public String getPreviewActionString() {
    return previewActionString;
  }

  public void setPreviewActionString(String previewActionString) {
    this.previewActionString = previewActionString;
  }


  public DestinyDefinitionsDestinyItemPreviewBlockDefinition previewVendorHash(Integer previewVendorHash) {
    this.previewVendorHash = previewVendorHash;
    return this;
  }

  /**
   * If the preview data is derived from a fake \&quot;Preview\&quot; Vendor, this will be the hash identifier for the DestinyVendorDefinition of that fake vendor.
   * @return previewVendorHash
   */
  @javax.annotation.Nullable
  public Integer getPreviewVendorHash() {
    return previewVendorHash;
  }

  public void setPreviewVendorHash(Integer previewVendorHash) {
    this.previewVendorHash = previewVendorHash;
  }


  public DestinyDefinitionsDestinyItemPreviewBlockDefinition screenStyle(String screenStyle) {
    this.screenStyle = screenStyle;
    return this;
  }

  /**
   * A string that the game UI uses as a hint for which detail screen to show for the item. You, too, can leverage this for your own custom screen detail views. Note, however, that these are arbitrarily defined by designers: there&#39;s no guarantees of a fixed, known number of these - so fall back to something reasonable if you don&#39;t recognize it.
   * @return screenStyle
   */
  @javax.annotation.Nullable
  public String getScreenStyle() {
    return screenStyle;
  }

  public void setScreenStyle(String screenStyle) {
    this.screenStyle = screenStyle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemPreviewBlockDefinition destinyDefinitionsDestinyItemPreviewBlockDefinition = (DestinyDefinitionsDestinyItemPreviewBlockDefinition) o;
    return Objects.equals(this.artifactHash, destinyDefinitionsDestinyItemPreviewBlockDefinition.artifactHash) &&
        Objects.equals(this.derivedItemCategories, destinyDefinitionsDestinyItemPreviewBlockDefinition.derivedItemCategories) &&
        Objects.equals(this.previewActionString, destinyDefinitionsDestinyItemPreviewBlockDefinition.previewActionString) &&
        Objects.equals(this.previewVendorHash, destinyDefinitionsDestinyItemPreviewBlockDefinition.previewVendorHash) &&
        Objects.equals(this.screenStyle, destinyDefinitionsDestinyItemPreviewBlockDefinition.screenStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactHash, derivedItemCategories, previewActionString, previewVendorHash, screenStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemPreviewBlockDefinition {\n");
    sb.append("    artifactHash: ").append(toIndentedString(artifactHash)).append("\n");
    sb.append("    derivedItemCategories: ").append(toIndentedString(derivedItemCategories)).append("\n");
    sb.append("    previewActionString: ").append(toIndentedString(previewActionString)).append("\n");
    sb.append("    previewVendorHash: ").append(toIndentedString(previewVendorHash)).append("\n");
    sb.append("    screenStyle: ").append(toIndentedString(screenStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactHash");
    openapiFields.add("derivedItemCategories");
    openapiFields.add("previewActionString");
    openapiFields.add("previewVendorHash");
    openapiFields.add("screenStyle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemPreviewBlockDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemPreviewBlockDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemPreviewBlockDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemPreviewBlockDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemPreviewBlockDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemPreviewBlockDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("derivedItemCategories") != null && !jsonObj.get("derivedItemCategories").isJsonNull()) {
        JsonArray jsonArrayderivedItemCategories = jsonObj.getAsJsonArray("derivedItemCategories");
        if (jsonArrayderivedItemCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("derivedItemCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `derivedItemCategories` to be an array in the JSON string but got `%s`", jsonObj.get("derivedItemCategories").toString()));
          }

          // validate the optional field `derivedItemCategories` (array)
          for (int i = 0; i < jsonArrayderivedItemCategories.size(); i++) {
            DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition.validateJsonElement(jsonArrayderivedItemCategories.get(i));
          };
        }
      }
      if ((jsonObj.get("previewActionString") != null && !jsonObj.get("previewActionString").isJsonNull()) && !jsonObj.get("previewActionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previewActionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previewActionString").toString()));
      }
      if ((jsonObj.get("screenStyle") != null && !jsonObj.get("screenStyle").isJsonNull()) && !jsonObj.get("screenStyle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenStyle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenStyle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemPreviewBlockDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemPreviewBlockDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemPreviewBlockDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemPreviewBlockDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemPreviewBlockDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemPreviewBlockDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemPreviewBlockDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemPreviewBlockDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemPreviewBlockDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemPreviewBlockDefinition
   */
  public static DestinyDefinitionsDestinyItemPreviewBlockDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemPreviewBlockDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemPreviewBlockDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

