/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyMilestonesDestinyPublicMilestoneChallengeActivity;
import org.openapitools.client.model.DestinyMilestonesDestinyPublicMilestoneQuest;
import org.openapitools.client.model.DestinyMilestonesDestinyPublicMilestoneVendor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about milestones, presented in a character state-agnostic manner. Combine this data with DestinyMilestoneDefinition to get a full picture of the milestone, which is basically a checklist of things to do in the game. Think of this as GetPublicAdvisors 3.0, for those who used the Destiny 1 API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyMilestonesDestinyPublicMilestone {
  public static final String SERIALIZED_NAME_ACTIVITIES = "activities";
  @SerializedName(SERIALIZED_NAME_ACTIVITIES)
  private List<DestinyMilestonesDestinyPublicMilestoneChallengeActivity> activities = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_QUESTS = "availableQuests";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUESTS)
  private List<DestinyMilestonesDestinyPublicMilestoneQuest> availableQuests = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_MILESTONE_HASH = "milestoneHash";
  @SerializedName(SERIALIZED_NAME_MILESTONE_HASH)
  private Integer milestoneHash;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_VENDOR_HASHES = "vendorHashes";
  @SerializedName(SERIALIZED_NAME_VENDOR_HASHES)
  private List<Integer> vendorHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENDORS = "vendors";
  @SerializedName(SERIALIZED_NAME_VENDORS)
  private List<DestinyMilestonesDestinyPublicMilestoneVendor> vendors = new ArrayList<>();

  public DestinyMilestonesDestinyPublicMilestone() {
  }

  public DestinyMilestonesDestinyPublicMilestone activities(List<DestinyMilestonesDestinyPublicMilestoneChallengeActivity> activities) {
    this.activities = activities;
    return this;
  }

  public DestinyMilestonesDestinyPublicMilestone addActivitiesItem(DestinyMilestonesDestinyPublicMilestoneChallengeActivity activitiesItem) {
    if (this.activities == null) {
      this.activities = new ArrayList<>();
    }
    this.activities.add(activitiesItem);
    return this;
  }

  /**
   * Get activities
   * @return activities
   */
  @javax.annotation.Nullable
  public List<DestinyMilestonesDestinyPublicMilestoneChallengeActivity> getActivities() {
    return activities;
  }

  public void setActivities(List<DestinyMilestonesDestinyPublicMilestoneChallengeActivity> activities) {
    this.activities = activities;
  }


  public DestinyMilestonesDestinyPublicMilestone availableQuests(List<DestinyMilestonesDestinyPublicMilestoneQuest> availableQuests) {
    this.availableQuests = availableQuests;
    return this;
  }

  public DestinyMilestonesDestinyPublicMilestone addAvailableQuestsItem(DestinyMilestonesDestinyPublicMilestoneQuest availableQuestsItem) {
    if (this.availableQuests == null) {
      this.availableQuests = new ArrayList<>();
    }
    this.availableQuests.add(availableQuestsItem);
    return this;
  }

  /**
   * A milestone not need have even a single quest, but if there are active quests they will be returned here.
   * @return availableQuests
   */
  @javax.annotation.Nullable
  public List<DestinyMilestonesDestinyPublicMilestoneQuest> getAvailableQuests() {
    return availableQuests;
  }

  public void setAvailableQuests(List<DestinyMilestonesDestinyPublicMilestoneQuest> availableQuests) {
    this.availableQuests = availableQuests;
  }


  public DestinyMilestonesDestinyPublicMilestone endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * If known, this is the date when the Milestone will expire/recycle/end.
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public DestinyMilestonesDestinyPublicMilestone milestoneHash(Integer milestoneHash) {
    this.milestoneHash = milestoneHash;
    return this;
  }

  /**
   * The hash identifier for the milestone. Use it to look up the DestinyMilestoneDefinition for static data about the Milestone.
   * @return milestoneHash
   */
  @javax.annotation.Nullable
  public Integer getMilestoneHash() {
    return milestoneHash;
  }

  public void setMilestoneHash(Integer milestoneHash) {
    this.milestoneHash = milestoneHash;
  }


  public DestinyMilestonesDestinyPublicMilestone order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public DestinyMilestonesDestinyPublicMilestone startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * If known, this is the date when the Milestone started/became active.
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public DestinyMilestonesDestinyPublicMilestone vendorHashes(List<Integer> vendorHashes) {
    this.vendorHashes = vendorHashes;
    return this;
  }

  public DestinyMilestonesDestinyPublicMilestone addVendorHashesItem(Integer vendorHashesItem) {
    if (this.vendorHashes == null) {
      this.vendorHashes = new ArrayList<>();
    }
    this.vendorHashes.add(vendorHashesItem);
    return this;
  }

  /**
   * Sometimes milestones - or activities active in milestones - will have relevant vendors. These are the vendors that are currently relevant.  Deprecated, already, for the sake of the new \&quot;vendors\&quot; property that has more data. What was I thinking.
   * @return vendorHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getVendorHashes() {
    return vendorHashes;
  }

  public void setVendorHashes(List<Integer> vendorHashes) {
    this.vendorHashes = vendorHashes;
  }


  public DestinyMilestonesDestinyPublicMilestone vendors(List<DestinyMilestonesDestinyPublicMilestoneVendor> vendors) {
    this.vendors = vendors;
    return this;
  }

  public DestinyMilestonesDestinyPublicMilestone addVendorsItem(DestinyMilestonesDestinyPublicMilestoneVendor vendorsItem) {
    if (this.vendors == null) {
      this.vendors = new ArrayList<>();
    }
    this.vendors.add(vendorsItem);
    return this;
  }

  /**
   * This is why we can&#39;t have nice things. This is the ordered list of vendors to be shown that relate to this milestone, potentially along with other interesting data.
   * @return vendors
   */
  @javax.annotation.Nullable
  public List<DestinyMilestonesDestinyPublicMilestoneVendor> getVendors() {
    return vendors;
  }

  public void setVendors(List<DestinyMilestonesDestinyPublicMilestoneVendor> vendors) {
    this.vendors = vendors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyMilestonesDestinyPublicMilestone destinyMilestonesDestinyPublicMilestone = (DestinyMilestonesDestinyPublicMilestone) o;
    return Objects.equals(this.activities, destinyMilestonesDestinyPublicMilestone.activities) &&
        Objects.equals(this.availableQuests, destinyMilestonesDestinyPublicMilestone.availableQuests) &&
        Objects.equals(this.endDate, destinyMilestonesDestinyPublicMilestone.endDate) &&
        Objects.equals(this.milestoneHash, destinyMilestonesDestinyPublicMilestone.milestoneHash) &&
        Objects.equals(this.order, destinyMilestonesDestinyPublicMilestone.order) &&
        Objects.equals(this.startDate, destinyMilestonesDestinyPublicMilestone.startDate) &&
        Objects.equals(this.vendorHashes, destinyMilestonesDestinyPublicMilestone.vendorHashes) &&
        Objects.equals(this.vendors, destinyMilestonesDestinyPublicMilestone.vendors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activities, availableQuests, endDate, milestoneHash, order, startDate, vendorHashes, vendors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyMilestonesDestinyPublicMilestone {\n");
    sb.append("    activities: ").append(toIndentedString(activities)).append("\n");
    sb.append("    availableQuests: ").append(toIndentedString(availableQuests)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    milestoneHash: ").append(toIndentedString(milestoneHash)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    vendorHashes: ").append(toIndentedString(vendorHashes)).append("\n");
    sb.append("    vendors: ").append(toIndentedString(vendors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activities");
    openapiFields.add("availableQuests");
    openapiFields.add("endDate");
    openapiFields.add("milestoneHash");
    openapiFields.add("order");
    openapiFields.add("startDate");
    openapiFields.add("vendorHashes");
    openapiFields.add("vendors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyMilestonesDestinyPublicMilestone
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyMilestonesDestinyPublicMilestone.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyMilestonesDestinyPublicMilestone is not found in the empty JSON string", DestinyMilestonesDestinyPublicMilestone.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyMilestonesDestinyPublicMilestone.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyMilestonesDestinyPublicMilestone` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("activities") != null && !jsonObj.get("activities").isJsonNull()) {
        JsonArray jsonArrayactivities = jsonObj.getAsJsonArray("activities");
        if (jsonArrayactivities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activities` to be an array in the JSON string but got `%s`", jsonObj.get("activities").toString()));
          }

          // validate the optional field `activities` (array)
          for (int i = 0; i < jsonArrayactivities.size(); i++) {
            DestinyMilestonesDestinyPublicMilestoneChallengeActivity.validateJsonElement(jsonArrayactivities.get(i));
          };
        }
      }
      if (jsonObj.get("availableQuests") != null && !jsonObj.get("availableQuests").isJsonNull()) {
        JsonArray jsonArrayavailableQuests = jsonObj.getAsJsonArray("availableQuests");
        if (jsonArrayavailableQuests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availableQuests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availableQuests` to be an array in the JSON string but got `%s`", jsonObj.get("availableQuests").toString()));
          }

          // validate the optional field `availableQuests` (array)
          for (int i = 0; i < jsonArrayavailableQuests.size(); i++) {
            DestinyMilestonesDestinyPublicMilestoneQuest.validateJsonElement(jsonArrayavailableQuests.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vendorHashes") != null && !jsonObj.get("vendorHashes").isJsonNull() && !jsonObj.get("vendorHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorHashes` to be an array in the JSON string but got `%s`", jsonObj.get("vendorHashes").toString()));
      }
      if (jsonObj.get("vendors") != null && !jsonObj.get("vendors").isJsonNull()) {
        JsonArray jsonArrayvendors = jsonObj.getAsJsonArray("vendors");
        if (jsonArrayvendors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vendors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vendors` to be an array in the JSON string but got `%s`", jsonObj.get("vendors").toString()));
          }

          // validate the optional field `vendors` (array)
          for (int i = 0; i < jsonArrayvendors.size(); i++) {
            DestinyMilestonesDestinyPublicMilestoneVendor.validateJsonElement(jsonArrayvendors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyMilestonesDestinyPublicMilestone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyMilestonesDestinyPublicMilestone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyMilestonesDestinyPublicMilestone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyMilestonesDestinyPublicMilestone.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyMilestonesDestinyPublicMilestone>() {
           @Override
           public void write(JsonWriter out, DestinyMilestonesDestinyPublicMilestone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyMilestonesDestinyPublicMilestone read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyMilestonesDestinyPublicMilestone given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyMilestonesDestinyPublicMilestone
   * @throws IOException if the JSON string is invalid with respect to DestinyMilestonesDestinyPublicMilestone
   */
  public static DestinyMilestonesDestinyPublicMilestone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyMilestonesDestinyPublicMilestone.class);
  }

  /**
   * Convert an instance of DestinyMilestonesDestinyPublicMilestone to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

