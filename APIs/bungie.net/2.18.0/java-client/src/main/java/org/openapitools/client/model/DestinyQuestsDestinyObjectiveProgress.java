/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Returns data about a character&#39;s status with a given Objective. Combine with DestinyObjectiveDefinition static data for display purposes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyQuestsDestinyObjectiveProgress {
  public static final String SERIALIZED_NAME_ACTIVITY_HASH = "activityHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_HASH)
  private Integer activityHash;

  public static final String SERIALIZED_NAME_COMPLETE = "complete";
  @SerializedName(SERIALIZED_NAME_COMPLETE)
  private Boolean complete;

  public static final String SERIALIZED_NAME_COMPLETION_VALUE = "completionValue";
  @SerializedName(SERIALIZED_NAME_COMPLETION_VALUE)
  private Integer completionValue;

  public static final String SERIALIZED_NAME_DESTINATION_HASH = "destinationHash";
  @SerializedName(SERIALIZED_NAME_DESTINATION_HASH)
  private Integer destinationHash;

  public static final String SERIALIZED_NAME_OBJECTIVE_HASH = "objectiveHash";
  @SerializedName(SERIALIZED_NAME_OBJECTIVE_HASH)
  private Integer objectiveHash;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Integer progress;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public DestinyQuestsDestinyObjectiveProgress() {
  }

  public DestinyQuestsDestinyObjectiveProgress activityHash(Integer activityHash) {
    this.activityHash = activityHash;
    return this;
  }

  /**
   * If the Objective has an Activity associated with it, this is the unique identifier of the Activity being referred to. Use to look up the DestinyActivityDefinition in static data. This will give localized data about *what* you should be playing for the objective to be achieved.
   * @return activityHash
   */
  @javax.annotation.Nullable
  public Integer getActivityHash() {
    return activityHash;
  }

  public void setActivityHash(Integer activityHash) {
    this.activityHash = activityHash;
  }


  public DestinyQuestsDestinyObjectiveProgress complete(Boolean complete) {
    this.complete = complete;
    return this;
  }

  /**
   * Whether or not the Objective is completed.
   * @return complete
   */
  @javax.annotation.Nullable
  public Boolean getComplete() {
    return complete;
  }

  public void setComplete(Boolean complete) {
    this.complete = complete;
  }


  public DestinyQuestsDestinyObjectiveProgress completionValue(Integer completionValue) {
    this.completionValue = completionValue;
    return this;
  }

  /**
   * As of Forsaken, objectives&#39; completion value is determined dynamically at runtime.  This value represents the threshold of progress you need to surpass in order for this objective to be considered \&quot;complete\&quot;.  If you were using objective data, switch from using the DestinyObjectiveDefinition&#39;s \&quot;completionValue\&quot; to this value.
   * @return completionValue
   */
  @javax.annotation.Nullable
  public Integer getCompletionValue() {
    return completionValue;
  }

  public void setCompletionValue(Integer completionValue) {
    this.completionValue = completionValue;
  }


  public DestinyQuestsDestinyObjectiveProgress destinationHash(Integer destinationHash) {
    this.destinationHash = destinationHash;
    return this;
  }

  /**
   * If the Objective has a Destination associated with it, this is the unique identifier of the Destination being referred to. Use to look up the DestinyDestinationDefinition in static data. This will give localized data about *where* in the universe the objective should be achieved.
   * @return destinationHash
   */
  @javax.annotation.Nullable
  public Integer getDestinationHash() {
    return destinationHash;
  }

  public void setDestinationHash(Integer destinationHash) {
    this.destinationHash = destinationHash;
  }


  public DestinyQuestsDestinyObjectiveProgress objectiveHash(Integer objectiveHash) {
    this.objectiveHash = objectiveHash;
    return this;
  }

  /**
   * The unique identifier of the Objective being referred to. Use to look up the DestinyObjectiveDefinition in static data.
   * @return objectiveHash
   */
  @javax.annotation.Nullable
  public Integer getObjectiveHash() {
    return objectiveHash;
  }

  public void setObjectiveHash(Integer objectiveHash) {
    this.objectiveHash = objectiveHash;
  }


  public DestinyQuestsDestinyObjectiveProgress progress(Integer progress) {
    this.progress = progress;
    return this;
  }

  /**
   * If progress has been made, and the progress can be measured numerically, this will be the value of that progress. You can compare it to the DestinyObjectiveDefinition.completionValue property for current vs. upper bounds, and use DestinyObjectiveDefinition.inProgressValueStyle or completedValueStyle to determine how this should be rendered. Note that progress, in Destiny 2, need not be a literal numeric progression. It could be one of a number of possible values, even a Timestamp. Always examine DestinyObjectiveDefinition.inProgressValueStyle or completedValueStyle before rendering progress.
   * @return progress
   */
  @javax.annotation.Nullable
  public Integer getProgress() {
    return progress;
  }

  public void setProgress(Integer progress) {
    this.progress = progress;
  }


  public DestinyQuestsDestinyObjectiveProgress visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * If this is true, the objective is visible in-game. Otherwise, it&#39;s not yet visible to the player. Up to you if you want to honor this property.
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyQuestsDestinyObjectiveProgress destinyQuestsDestinyObjectiveProgress = (DestinyQuestsDestinyObjectiveProgress) o;
    return Objects.equals(this.activityHash, destinyQuestsDestinyObjectiveProgress.activityHash) &&
        Objects.equals(this.complete, destinyQuestsDestinyObjectiveProgress.complete) &&
        Objects.equals(this.completionValue, destinyQuestsDestinyObjectiveProgress.completionValue) &&
        Objects.equals(this.destinationHash, destinyQuestsDestinyObjectiveProgress.destinationHash) &&
        Objects.equals(this.objectiveHash, destinyQuestsDestinyObjectiveProgress.objectiveHash) &&
        Objects.equals(this.progress, destinyQuestsDestinyObjectiveProgress.progress) &&
        Objects.equals(this.visible, destinyQuestsDestinyObjectiveProgress.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityHash, complete, completionValue, destinationHash, objectiveHash, progress, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyQuestsDestinyObjectiveProgress {\n");
    sb.append("    activityHash: ").append(toIndentedString(activityHash)).append("\n");
    sb.append("    complete: ").append(toIndentedString(complete)).append("\n");
    sb.append("    completionValue: ").append(toIndentedString(completionValue)).append("\n");
    sb.append("    destinationHash: ").append(toIndentedString(destinationHash)).append("\n");
    sb.append("    objectiveHash: ").append(toIndentedString(objectiveHash)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityHash");
    openapiFields.add("complete");
    openapiFields.add("completionValue");
    openapiFields.add("destinationHash");
    openapiFields.add("objectiveHash");
    openapiFields.add("progress");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyQuestsDestinyObjectiveProgress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyQuestsDestinyObjectiveProgress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyQuestsDestinyObjectiveProgress is not found in the empty JSON string", DestinyQuestsDestinyObjectiveProgress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyQuestsDestinyObjectiveProgress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyQuestsDestinyObjectiveProgress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyQuestsDestinyObjectiveProgress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyQuestsDestinyObjectiveProgress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyQuestsDestinyObjectiveProgress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyQuestsDestinyObjectiveProgress.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyQuestsDestinyObjectiveProgress>() {
           @Override
           public void write(JsonWriter out, DestinyQuestsDestinyObjectiveProgress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyQuestsDestinyObjectiveProgress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyQuestsDestinyObjectiveProgress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyQuestsDestinyObjectiveProgress
   * @throws IOException if the JSON string is invalid with respect to DestinyQuestsDestinyObjectiveProgress
   */
  public static DestinyQuestsDestinyObjectiveProgress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyQuestsDestinyObjectiveProgress.class);
  }

  /**
   * Convert an instance of DestinyQuestsDestinyObjectiveProgress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

