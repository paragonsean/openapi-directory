/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyQuestsDestinyObjectiveProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinySocketsDestinyItemPlug
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinySocketsDestinyItemPlug {
  public static final String SERIALIZED_NAME_CAN_INSERT = "canInsert";
  @SerializedName(SERIALIZED_NAME_CAN_INSERT)
  private Boolean canInsert;

  public static final String SERIALIZED_NAME_ENABLE_FAIL_INDEXES = "enableFailIndexes";
  @SerializedName(SERIALIZED_NAME_ENABLE_FAIL_INDEXES)
  private List<Integer> enableFailIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INSERT_FAIL_INDEXES = "insertFailIndexes";
  @SerializedName(SERIALIZED_NAME_INSERT_FAIL_INDEXES)
  private List<Integer> insertFailIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLUG_ITEM_HASH = "plugItemHash";
  @SerializedName(SERIALIZED_NAME_PLUG_ITEM_HASH)
  private Integer plugItemHash;

  public static final String SERIALIZED_NAME_PLUG_OBJECTIVES = "plugObjectives";
  @SerializedName(SERIALIZED_NAME_PLUG_OBJECTIVES)
  private List<DestinyQuestsDestinyObjectiveProgress> plugObjectives = new ArrayList<>();

  public DestinySocketsDestinyItemPlug() {
  }

  public DestinySocketsDestinyItemPlug canInsert(Boolean canInsert) {
    this.canInsert = canInsert;
    return this;
  }

  /**
   * If true, this plug has met all of its insertion requirements. Big if true.
   * @return canInsert
   */
  @javax.annotation.Nullable
  public Boolean getCanInsert() {
    return canInsert;
  }

  public void setCanInsert(Boolean canInsert) {
    this.canInsert = canInsert;
  }


  public DestinySocketsDestinyItemPlug enableFailIndexes(List<Integer> enableFailIndexes) {
    this.enableFailIndexes = enableFailIndexes;
    return this;
  }

  public DestinySocketsDestinyItemPlug addEnableFailIndexesItem(Integer enableFailIndexesItem) {
    if (this.enableFailIndexes == null) {
      this.enableFailIndexes = new ArrayList<>();
    }
    this.enableFailIndexes.add(enableFailIndexesItem);
    return this;
  }

  /**
   * If a plug is not enabled, this will be populated with indexes into the plug item definition&#39;s plug.enabledRules property, so that you can show the reasons why it is not enabled.  This list will be empty if the plug is enabled.
   * @return enableFailIndexes
   */
  @javax.annotation.Nullable
  public List<Integer> getEnableFailIndexes() {
    return enableFailIndexes;
  }

  public void setEnableFailIndexes(List<Integer> enableFailIndexes) {
    this.enableFailIndexes = enableFailIndexes;
  }


  public DestinySocketsDestinyItemPlug enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * If true, this plug will provide its benefits while inserted.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public DestinySocketsDestinyItemPlug insertFailIndexes(List<Integer> insertFailIndexes) {
    this.insertFailIndexes = insertFailIndexes;
    return this;
  }

  public DestinySocketsDestinyItemPlug addInsertFailIndexesItem(Integer insertFailIndexesItem) {
    if (this.insertFailIndexes == null) {
      this.insertFailIndexes = new ArrayList<>();
    }
    this.insertFailIndexes.add(insertFailIndexesItem);
    return this;
  }

  /**
   * If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition&#39;s plug.insertionRules property, so you can show the reasons why it can&#39;t be inserted.  This list will be empty if the plug can be inserted.
   * @return insertFailIndexes
   */
  @javax.annotation.Nullable
  public List<Integer> getInsertFailIndexes() {
    return insertFailIndexes;
  }

  public void setInsertFailIndexes(List<Integer> insertFailIndexes) {
    this.insertFailIndexes = insertFailIndexes;
  }


  public DestinySocketsDestinyItemPlug plugItemHash(Integer plugItemHash) {
    this.plugItemHash = plugItemHash;
    return this;
  }

  /**
   * The hash identifier of the DestinyInventoryItemDefinition that represents this plug.
   * @return plugItemHash
   */
  @javax.annotation.Nullable
  public Integer getPlugItemHash() {
    return plugItemHash;
  }

  public void setPlugItemHash(Integer plugItemHash) {
    this.plugItemHash = plugItemHash;
  }


  public DestinySocketsDestinyItemPlug plugObjectives(List<DestinyQuestsDestinyObjectiveProgress> plugObjectives) {
    this.plugObjectives = plugObjectives;
    return this;
  }

  public DestinySocketsDestinyItemPlug addPlugObjectivesItem(DestinyQuestsDestinyObjectiveProgress plugObjectivesItem) {
    if (this.plugObjectives == null) {
      this.plugObjectives = new ArrayList<>();
    }
    this.plugObjectives.add(plugObjectivesItem);
    return this;
  }

  /**
   * Sometimes, Plugs may have objectives: these are often used for flavor and display purposes, but they can be used for any arbitrary purpose (both fortunately and unfortunately). Recently (with Season 2) they were expanded in use to be used as the \&quot;gating\&quot; for whether the plug can be inserted at all. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item&#39;s data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition&#39;s progressDescription property. Refer to the plug&#39;s itemHash and objective property for more information if you would like to display even more data.
   * @return plugObjectives
   */
  @javax.annotation.Nullable
  public List<DestinyQuestsDestinyObjectiveProgress> getPlugObjectives() {
    return plugObjectives;
  }

  public void setPlugObjectives(List<DestinyQuestsDestinyObjectiveProgress> plugObjectives) {
    this.plugObjectives = plugObjectives;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinySocketsDestinyItemPlug destinySocketsDestinyItemPlug = (DestinySocketsDestinyItemPlug) o;
    return Objects.equals(this.canInsert, destinySocketsDestinyItemPlug.canInsert) &&
        Objects.equals(this.enableFailIndexes, destinySocketsDestinyItemPlug.enableFailIndexes) &&
        Objects.equals(this.enabled, destinySocketsDestinyItemPlug.enabled) &&
        Objects.equals(this.insertFailIndexes, destinySocketsDestinyItemPlug.insertFailIndexes) &&
        Objects.equals(this.plugItemHash, destinySocketsDestinyItemPlug.plugItemHash) &&
        Objects.equals(this.plugObjectives, destinySocketsDestinyItemPlug.plugObjectives);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canInsert, enableFailIndexes, enabled, insertFailIndexes, plugItemHash, plugObjectives);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinySocketsDestinyItemPlug {\n");
    sb.append("    canInsert: ").append(toIndentedString(canInsert)).append("\n");
    sb.append("    enableFailIndexes: ").append(toIndentedString(enableFailIndexes)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    insertFailIndexes: ").append(toIndentedString(insertFailIndexes)).append("\n");
    sb.append("    plugItemHash: ").append(toIndentedString(plugItemHash)).append("\n");
    sb.append("    plugObjectives: ").append(toIndentedString(plugObjectives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canInsert");
    openapiFields.add("enableFailIndexes");
    openapiFields.add("enabled");
    openapiFields.add("insertFailIndexes");
    openapiFields.add("plugItemHash");
    openapiFields.add("plugObjectives");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinySocketsDestinyItemPlug
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinySocketsDestinyItemPlug.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinySocketsDestinyItemPlug is not found in the empty JSON string", DestinySocketsDestinyItemPlug.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinySocketsDestinyItemPlug.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinySocketsDestinyItemPlug` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("enableFailIndexes") != null && !jsonObj.get("enableFailIndexes").isJsonNull() && !jsonObj.get("enableFailIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableFailIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("enableFailIndexes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("insertFailIndexes") != null && !jsonObj.get("insertFailIndexes").isJsonNull() && !jsonObj.get("insertFailIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `insertFailIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("insertFailIndexes").toString()));
      }
      if (jsonObj.get("plugObjectives") != null && !jsonObj.get("plugObjectives").isJsonNull()) {
        JsonArray jsonArrayplugObjectives = jsonObj.getAsJsonArray("plugObjectives");
        if (jsonArrayplugObjectives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("plugObjectives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `plugObjectives` to be an array in the JSON string but got `%s`", jsonObj.get("plugObjectives").toString()));
          }

          // validate the optional field `plugObjectives` (array)
          for (int i = 0; i < jsonArrayplugObjectives.size(); i++) {
            DestinyQuestsDestinyObjectiveProgress.validateJsonElement(jsonArrayplugObjectives.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinySocketsDestinyItemPlug.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinySocketsDestinyItemPlug' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinySocketsDestinyItemPlug> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinySocketsDestinyItemPlug.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinySocketsDestinyItemPlug>() {
           @Override
           public void write(JsonWriter out, DestinySocketsDestinyItemPlug value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinySocketsDestinyItemPlug read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinySocketsDestinyItemPlug given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinySocketsDestinyItemPlug
   * @throws IOException if the JSON string is invalid with respect to DestinySocketsDestinyItemPlug
   */
  public static DestinySocketsDestinyItemPlug fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinySocketsDestinyItemPlug.class);
  }

  /**
   * Convert an instance of DestinySocketsDestinyItemPlug to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

