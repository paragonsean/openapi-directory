/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock {
  public static final String SERIALIZED_NAME_BASE_QUALITY_TRANSFER_RATIO = "baseQualityTransferRatio";
  @SerializedName(SERIALIZED_NAME_BASE_QUALITY_TRANSFER_RATIO)
  private Float baseQualityTransferRatio;

  public static final String SERIALIZED_NAME_MINIMUM_QUALITY_INCREMENT = "minimumQualityIncrement";
  @SerializedName(SERIALIZED_NAME_MINIMUM_QUALITY_INCREMENT)
  private Integer minimumQualityIncrement;

  public DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock() {
  }

  public DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock baseQualityTransferRatio(Float baseQualityTransferRatio) {
    this.baseQualityTransferRatio = baseQualityTransferRatio;
    return this;
  }

  /**
   * The default portion of quality that will transfer from the infuser to the infusee item. (InfuserQuality - InfuseeQuality) * baseQualityTransferRatio &#x3D; base quality transferred.
   * @return baseQualityTransferRatio
   */
  @javax.annotation.Nullable
  public Float getBaseQualityTransferRatio() {
    return baseQualityTransferRatio;
  }

  public void setBaseQualityTransferRatio(Float baseQualityTransferRatio) {
    this.baseQualityTransferRatio = baseQualityTransferRatio;
  }


  public DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock minimumQualityIncrement(Integer minimumQualityIncrement) {
    this.minimumQualityIncrement = minimumQualityIncrement;
    return this;
  }

  /**
   * As long as InfuserQuality &gt; InfuseeQuality, the amount of quality bestowed is guaranteed to be at least this value, even if the transferRatio would dictate that it should be less. The total amount of quality that ends up in the Infusee cannot exceed the Infuser&#39;s quality however (for instance, if you infuse a 300 item with a 301 item and the minimum quality increment is 10, the infused item will not end up with 310 quality)
   * @return minimumQualityIncrement
   */
  @javax.annotation.Nullable
  public Integer getMinimumQualityIncrement() {
    return minimumQualityIncrement;
  }

  public void setMinimumQualityIncrement(Integer minimumQualityIncrement) {
    this.minimumQualityIncrement = minimumQualityIncrement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock destinyDefinitionsItemsDestinyItemTierTypeInfusionBlock = (DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock) o;
    return Objects.equals(this.baseQualityTransferRatio, destinyDefinitionsItemsDestinyItemTierTypeInfusionBlock.baseQualityTransferRatio) &&
        Objects.equals(this.minimumQualityIncrement, destinyDefinitionsItemsDestinyItemTierTypeInfusionBlock.minimumQualityIncrement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseQualityTransferRatio, minimumQualityIncrement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock {\n");
    sb.append("    baseQualityTransferRatio: ").append(toIndentedString(baseQualityTransferRatio)).append("\n");
    sb.append("    minimumQualityIncrement: ").append(toIndentedString(minimumQualityIncrement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseQualityTransferRatio");
    openapiFields.add("minimumQualityIncrement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock is not found in the empty JSON string", DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock
   */
  public static DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

