/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is a reference to, and summary data for, a specific item that you can get as a result of Using or Acquiring some other Item (For example, this could be summary information for an Emote that you can get by opening an an Eververse Box) See DestinyDerivedItemCategoryDefinition for more information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsItemsDestinyDerivedItemDefinition {
  public static final String SERIALIZED_NAME_ICON_PATH = "iconPath";
  @SerializedName(SERIALIZED_NAME_ICON_PATH)
  private String iconPath;

  public static final String SERIALIZED_NAME_ITEM_DESCRIPTION = "itemDescription";
  @SerializedName(SERIALIZED_NAME_ITEM_DESCRIPTION)
  private String itemDescription;

  public static final String SERIALIZED_NAME_ITEM_DETAIL = "itemDetail";
  @SerializedName(SERIALIZED_NAME_ITEM_DETAIL)
  private String itemDetail;

  public static final String SERIALIZED_NAME_ITEM_HASH = "itemHash";
  @SerializedName(SERIALIZED_NAME_ITEM_HASH)
  private Integer itemHash;

  public static final String SERIALIZED_NAME_ITEM_NAME = "itemName";
  @SerializedName(SERIALIZED_NAME_ITEM_NAME)
  private String itemName;

  public static final String SERIALIZED_NAME_VENDOR_ITEM_INDEX = "vendorItemIndex";
  @SerializedName(SERIALIZED_NAME_VENDOR_ITEM_INDEX)
  private Integer vendorItemIndex;

  public DestinyDefinitionsItemsDestinyDerivedItemDefinition() {
  }

  public DestinyDefinitionsItemsDestinyDerivedItemDefinition iconPath(String iconPath) {
    this.iconPath = iconPath;
    return this;
  }

  /**
   * An icon for the item.
   * @return iconPath
   */
  @javax.annotation.Nullable
  public String getIconPath() {
    return iconPath;
  }

  public void setIconPath(String iconPath) {
    this.iconPath = iconPath;
  }


  public DestinyDefinitionsItemsDestinyDerivedItemDefinition itemDescription(String itemDescription) {
    this.itemDescription = itemDescription;
    return this;
  }

  /**
   * A brief description of the item.
   * @return itemDescription
   */
  @javax.annotation.Nullable
  public String getItemDescription() {
    return itemDescription;
  }

  public void setItemDescription(String itemDescription) {
    this.itemDescription = itemDescription;
  }


  public DestinyDefinitionsItemsDestinyDerivedItemDefinition itemDetail(String itemDetail) {
    this.itemDetail = itemDetail;
    return this;
  }

  /**
   * Additional details about the derived item, in addition to the description.
   * @return itemDetail
   */
  @javax.annotation.Nullable
  public String getItemDetail() {
    return itemDetail;
  }

  public void setItemDetail(String itemDetail) {
    this.itemDetail = itemDetail;
  }


  public DestinyDefinitionsItemsDestinyDerivedItemDefinition itemHash(Integer itemHash) {
    this.itemHash = itemHash;
    return this;
  }

  /**
   * The hash for the DestinyInventoryItemDefinition of this derived item, if there is one. Sometimes we are given this information as a manual override, in which case there won&#39;t be an actual DestinyInventoryItemDefinition for what we display, but you can still show the strings from this object itself.
   * @return itemHash
   */
  @javax.annotation.Nullable
  public Integer getItemHash() {
    return itemHash;
  }

  public void setItemHash(Integer itemHash) {
    this.itemHash = itemHash;
  }


  public DestinyDefinitionsItemsDestinyDerivedItemDefinition itemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  /**
   * The name of the derived item.
   * @return itemName
   */
  @javax.annotation.Nullable
  public String getItemName() {
    return itemName;
  }

  public void setItemName(String itemName) {
    this.itemName = itemName;
  }


  public DestinyDefinitionsItemsDestinyDerivedItemDefinition vendorItemIndex(Integer vendorItemIndex) {
    this.vendorItemIndex = vendorItemIndex;
    return this;
  }

  /**
   * If the item was derived from a \&quot;Preview Vendor\&quot;, this will be an index into the DestinyVendorDefinition&#39;s itemList property. Otherwise, -1.
   * @return vendorItemIndex
   */
  @javax.annotation.Nullable
  public Integer getVendorItemIndex() {
    return vendorItemIndex;
  }

  public void setVendorItemIndex(Integer vendorItemIndex) {
    this.vendorItemIndex = vendorItemIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsItemsDestinyDerivedItemDefinition destinyDefinitionsItemsDestinyDerivedItemDefinition = (DestinyDefinitionsItemsDestinyDerivedItemDefinition) o;
    return Objects.equals(this.iconPath, destinyDefinitionsItemsDestinyDerivedItemDefinition.iconPath) &&
        Objects.equals(this.itemDescription, destinyDefinitionsItemsDestinyDerivedItemDefinition.itemDescription) &&
        Objects.equals(this.itemDetail, destinyDefinitionsItemsDestinyDerivedItemDefinition.itemDetail) &&
        Objects.equals(this.itemHash, destinyDefinitionsItemsDestinyDerivedItemDefinition.itemHash) &&
        Objects.equals(this.itemName, destinyDefinitionsItemsDestinyDerivedItemDefinition.itemName) &&
        Objects.equals(this.vendorItemIndex, destinyDefinitionsItemsDestinyDerivedItemDefinition.vendorItemIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iconPath, itemDescription, itemDetail, itemHash, itemName, vendorItemIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsItemsDestinyDerivedItemDefinition {\n");
    sb.append("    iconPath: ").append(toIndentedString(iconPath)).append("\n");
    sb.append("    itemDescription: ").append(toIndentedString(itemDescription)).append("\n");
    sb.append("    itemDetail: ").append(toIndentedString(itemDetail)).append("\n");
    sb.append("    itemHash: ").append(toIndentedString(itemHash)).append("\n");
    sb.append("    itemName: ").append(toIndentedString(itemName)).append("\n");
    sb.append("    vendorItemIndex: ").append(toIndentedString(vendorItemIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iconPath");
    openapiFields.add("itemDescription");
    openapiFields.add("itemDetail");
    openapiFields.add("itemHash");
    openapiFields.add("itemName");
    openapiFields.add("vendorItemIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsItemsDestinyDerivedItemDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsItemsDestinyDerivedItemDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsItemsDestinyDerivedItemDefinition is not found in the empty JSON string", DestinyDefinitionsItemsDestinyDerivedItemDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsItemsDestinyDerivedItemDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsItemsDestinyDerivedItemDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("iconPath") != null && !jsonObj.get("iconPath").isJsonNull()) && !jsonObj.get("iconPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconPath").toString()));
      }
      if ((jsonObj.get("itemDescription") != null && !jsonObj.get("itemDescription").isJsonNull()) && !jsonObj.get("itemDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemDescription").toString()));
      }
      if ((jsonObj.get("itemDetail") != null && !jsonObj.get("itemDetail").isJsonNull()) && !jsonObj.get("itemDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemDetail").toString()));
      }
      if ((jsonObj.get("itemName") != null && !jsonObj.get("itemName").isJsonNull()) && !jsonObj.get("itemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsItemsDestinyDerivedItemDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsItemsDestinyDerivedItemDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsItemsDestinyDerivedItemDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsItemsDestinyDerivedItemDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsItemsDestinyDerivedItemDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsItemsDestinyDerivedItemDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsItemsDestinyDerivedItemDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsItemsDestinyDerivedItemDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsItemsDestinyDerivedItemDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsItemsDestinyDerivedItemDefinition
   */
  public static DestinyDefinitionsItemsDestinyDerivedItemDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsItemsDestinyDerivedItemDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsItemsDestinyDerivedItemDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

