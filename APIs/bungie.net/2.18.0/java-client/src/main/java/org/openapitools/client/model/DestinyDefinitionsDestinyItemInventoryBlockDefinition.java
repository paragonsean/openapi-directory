/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item&#39;s relationship with the inventory.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemInventoryBlockDefinition {
  public static final String SERIALIZED_NAME_BUCKET_TYPE_HASH = "bucketTypeHash";
  @SerializedName(SERIALIZED_NAME_BUCKET_TYPE_HASH)
  private Integer bucketTypeHash;

  public static final String SERIALIZED_NAME_EXPIRATION_TOOLTIP = "expirationTooltip";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TOOLTIP)
  private String expirationTooltip;

  public static final String SERIALIZED_NAME_EXPIRED_IN_ACTIVITY_MESSAGE = "expiredInActivityMessage";
  @SerializedName(SERIALIZED_NAME_EXPIRED_IN_ACTIVITY_MESSAGE)
  private String expiredInActivityMessage;

  public static final String SERIALIZED_NAME_EXPIRED_IN_ORBIT_MESSAGE = "expiredInOrbitMessage";
  @SerializedName(SERIALIZED_NAME_EXPIRED_IN_ORBIT_MESSAGE)
  private String expiredInOrbitMessage;

  public static final String SERIALIZED_NAME_IS_INSTANCE_ITEM = "isInstanceItem";
  @SerializedName(SERIALIZED_NAME_IS_INSTANCE_ITEM)
  private Boolean isInstanceItem;

  public static final String SERIALIZED_NAME_MAX_STACK_SIZE = "maxStackSize";
  @SerializedName(SERIALIZED_NAME_MAX_STACK_SIZE)
  private Integer maxStackSize;

  public static final String SERIALIZED_NAME_RECIPE_ITEM_HASH = "recipeItemHash";
  @SerializedName(SERIALIZED_NAME_RECIPE_ITEM_HASH)
  private Integer recipeItemHash;

  public static final String SERIALIZED_NAME_RECOVERY_BUCKET_TYPE_HASH = "recoveryBucketTypeHash";
  @SerializedName(SERIALIZED_NAME_RECOVERY_BUCKET_TYPE_HASH)
  private Integer recoveryBucketTypeHash;

  public static final String SERIALIZED_NAME_STACK_UNIQUE_LABEL = "stackUniqueLabel";
  @SerializedName(SERIALIZED_NAME_STACK_UNIQUE_LABEL)
  private String stackUniqueLabel;

  public static final String SERIALIZED_NAME_SUPPRESS_EXPIRATION_WHEN_OBJECTIVES_COMPLETE = "suppressExpirationWhenObjectivesComplete";
  @SerializedName(SERIALIZED_NAME_SUPPRESS_EXPIRATION_WHEN_OBJECTIVES_COMPLETE)
  private Boolean suppressExpirationWhenObjectivesComplete;

  public static final String SERIALIZED_NAME_TIER_TYPE = "tierType";
  @SerializedName(SERIALIZED_NAME_TIER_TYPE)
  private Integer tierType;

  public static final String SERIALIZED_NAME_TIER_TYPE_HASH = "tierTypeHash";
  @SerializedName(SERIALIZED_NAME_TIER_TYPE_HASH)
  private Integer tierTypeHash;

  public static final String SERIALIZED_NAME_TIER_TYPE_NAME = "tierTypeName";
  @SerializedName(SERIALIZED_NAME_TIER_TYPE_NAME)
  private String tierTypeName;

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition() {
  }

  public DestinyDefinitionsDestinyItemInventoryBlockDefinition bucketTypeHash(Integer bucketTypeHash) {
    this.bucketTypeHash = bucketTypeHash;
    return this;
  }

  /**
   * The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this \&quot;bucketHash\&quot;, but too many things refer to it now. Sigh.
   * @return bucketTypeHash
   */
  @javax.annotation.Nullable
  public Integer getBucketTypeHash() {
    return bucketTypeHash;
  }

  public void setBucketTypeHash(Integer bucketTypeHash) {
    this.bucketTypeHash = bucketTypeHash;
  }


  public DestinyDefinitionsDestinyItemInventoryBlockDefinition expirationTooltip(String expirationTooltip) {
    this.expirationTooltip = expirationTooltip;
    return this;
  }

  /**
   * The tooltip message to show, if any, when the item expires.
   * @return expirationTooltip
   */
  @javax.annotation.Nullable
  public String getExpirationTooltip() {
    return expirationTooltip;
  }

  public void setExpirationTooltip(String expirationTooltip) {
    this.expirationTooltip = expirationTooltip;
  }


  public DestinyDefinitionsDestinyItemInventoryBlockDefinition expiredInActivityMessage(String expiredInActivityMessage) {
    this.expiredInActivityMessage = expiredInActivityMessage;
    return this;
  }

  /**
   * If the item expires while playing in an activity, we show a different message.
   * @return expiredInActivityMessage
   */
  @javax.annotation.Nullable
  public String getExpiredInActivityMessage() {
    return expiredInActivityMessage;
  }

  public void setExpiredInActivityMessage(String expiredInActivityMessage) {
    this.expiredInActivityMessage = expiredInActivityMessage;
  }


  public DestinyDefinitionsDestinyItemInventoryBlockDefinition expiredInOrbitMessage(String expiredInOrbitMessage) {
    this.expiredInOrbitMessage = expiredInOrbitMessage;
    return this;
  }

  /**
   * If the item expires in orbit, we show a... more different message. (\&quot;Consummate V&#39;s, consummate!\&quot;)
   * @return expiredInOrbitMessage
   */
  @javax.annotation.Nullable
  public String getExpiredInOrbitMessage() {
    return expiredInOrbitMessage;
  }

  public void setExpiredInOrbitMessage(String expiredInOrbitMessage) {
    this.expiredInOrbitMessage = expiredInOrbitMessage;
  }


  public DestinyDefinitionsDestinyItemInventoryBlockDefinition isInstanceItem(Boolean isInstanceItem) {
    this.isInstanceItem = isInstanceItem;
    return this;
  }

  /**
   * If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).
   * @return isInstanceItem
   */
  @javax.annotation.Nullable
  public Boolean getIsInstanceItem() {
    return isInstanceItem;
  }

  public void setIsInstanceItem(Boolean isInstanceItem) {
    this.isInstanceItem = isInstanceItem;
  }


  public DestinyDefinitionsDestinyItemInventoryBlockDefinition maxStackSize(Integer maxStackSize) {
    this.maxStackSize = maxStackSize;
    return this;
  }

  /**
   * The maximum quantity of this item that can exist in a stack.
   * @return maxStackSize
   */
  @javax.annotation.Nullable
  public Integer getMaxStackSize() {
    return maxStackSize;
  }

  public void setMaxStackSize(Integer maxStackSize) {
    this.maxStackSize = maxStackSize;
  }


  public DestinyDefinitionsDestinyItemInventoryBlockDefinition recipeItemHash(Integer recipeItemHash) {
    this.recipeItemHash = recipeItemHash;
    return this;
  }

  /**
   * A reference to the associated crafting &#39;recipe&#39; item definition, if this item can be crafted.
   * @return recipeItemHash
   */
  @javax.annotation.Nullable
  public Integer getRecipeItemHash() {
    return recipeItemHash;
  }

  public void setRecipeItemHash(Integer recipeItemHash) {
    this.recipeItemHash = recipeItemHash;
  }


  public DestinyDefinitionsDestinyItemInventoryBlockDefinition recoveryBucketTypeHash(Integer recoveryBucketTypeHash) {
    this.recoveryBucketTypeHash = recoveryBucketTypeHash;
    return this;
  }

  /**
   * If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.
   * @return recoveryBucketTypeHash
   */
  @javax.annotation.Nullable
  public Integer getRecoveryBucketTypeHash() {
    return recoveryBucketTypeHash;
  }

  public void setRecoveryBucketTypeHash(Integer recoveryBucketTypeHash) {
    this.recoveryBucketTypeHash = recoveryBucketTypeHash;
  }


  public DestinyDefinitionsDestinyItemInventoryBlockDefinition stackUniqueLabel(String stackUniqueLabel) {
    this.stackUniqueLabel = stackUniqueLabel;
    return this;
  }

  /**
   * If this string is populated, you can&#39;t have more than one stack with this label in a given inventory. Note that this is different from the equipping block&#39;s unique label, which is used for equipping uniqueness.
   * @return stackUniqueLabel
   */
  @javax.annotation.Nullable
  public String getStackUniqueLabel() {
    return stackUniqueLabel;
  }

  public void setStackUniqueLabel(String stackUniqueLabel) {
    this.stackUniqueLabel = stackUniqueLabel;
  }


  public DestinyDefinitionsDestinyItemInventoryBlockDefinition suppressExpirationWhenObjectivesComplete(Boolean suppressExpirationWhenObjectivesComplete) {
    this.suppressExpirationWhenObjectivesComplete = suppressExpirationWhenObjectivesComplete;
    return this;
  }

  /**
   * Get suppressExpirationWhenObjectivesComplete
   * @return suppressExpirationWhenObjectivesComplete
   */
  @javax.annotation.Nullable
  public Boolean getSuppressExpirationWhenObjectivesComplete() {
    return suppressExpirationWhenObjectivesComplete;
  }

  public void setSuppressExpirationWhenObjectivesComplete(Boolean suppressExpirationWhenObjectivesComplete) {
    this.suppressExpirationWhenObjectivesComplete = suppressExpirationWhenObjectivesComplete;
  }


  public DestinyDefinitionsDestinyItemInventoryBlockDefinition tierType(Integer tierType) {
    this.tierType = tierType;
    return this;
  }

  /**
   * The enumeration matching the tier type of the item to known values, again for convenience sake.
   * @return tierType
   */
  @javax.annotation.Nullable
  public Integer getTierType() {
    return tierType;
  }

  public void setTierType(Integer tierType) {
    this.tierType = tierType;
  }


  public DestinyDefinitionsDestinyItemInventoryBlockDefinition tierTypeHash(Integer tierTypeHash) {
    this.tierTypeHash = tierTypeHash;
    return this;
  }

  /**
   * The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item&#39;s tier.
   * @return tierTypeHash
   */
  @javax.annotation.Nullable
  public Integer getTierTypeHash() {
    return tierTypeHash;
  }

  public void setTierTypeHash(Integer tierTypeHash) {
    this.tierTypeHash = tierTypeHash;
  }


  public DestinyDefinitionsDestinyItemInventoryBlockDefinition tierTypeName(String tierTypeName) {
    this.tierTypeName = tierTypeName;
    return this;
  }

  /**
   * The localized name of the tier type, which is a useful shortcut so you don&#39;t have to look up the definition every time. However, it&#39;s mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.
   * @return tierTypeName
   */
  @javax.annotation.Nullable
  public String getTierTypeName() {
    return tierTypeName;
  }

  public void setTierTypeName(String tierTypeName) {
    this.tierTypeName = tierTypeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemInventoryBlockDefinition destinyDefinitionsDestinyItemInventoryBlockDefinition = (DestinyDefinitionsDestinyItemInventoryBlockDefinition) o;
    return Objects.equals(this.bucketTypeHash, destinyDefinitionsDestinyItemInventoryBlockDefinition.bucketTypeHash) &&
        Objects.equals(this.expirationTooltip, destinyDefinitionsDestinyItemInventoryBlockDefinition.expirationTooltip) &&
        Objects.equals(this.expiredInActivityMessage, destinyDefinitionsDestinyItemInventoryBlockDefinition.expiredInActivityMessage) &&
        Objects.equals(this.expiredInOrbitMessage, destinyDefinitionsDestinyItemInventoryBlockDefinition.expiredInOrbitMessage) &&
        Objects.equals(this.isInstanceItem, destinyDefinitionsDestinyItemInventoryBlockDefinition.isInstanceItem) &&
        Objects.equals(this.maxStackSize, destinyDefinitionsDestinyItemInventoryBlockDefinition.maxStackSize) &&
        Objects.equals(this.recipeItemHash, destinyDefinitionsDestinyItemInventoryBlockDefinition.recipeItemHash) &&
        Objects.equals(this.recoveryBucketTypeHash, destinyDefinitionsDestinyItemInventoryBlockDefinition.recoveryBucketTypeHash) &&
        Objects.equals(this.stackUniqueLabel, destinyDefinitionsDestinyItemInventoryBlockDefinition.stackUniqueLabel) &&
        Objects.equals(this.suppressExpirationWhenObjectivesComplete, destinyDefinitionsDestinyItemInventoryBlockDefinition.suppressExpirationWhenObjectivesComplete) &&
        Objects.equals(this.tierType, destinyDefinitionsDestinyItemInventoryBlockDefinition.tierType) &&
        Objects.equals(this.tierTypeHash, destinyDefinitionsDestinyItemInventoryBlockDefinition.tierTypeHash) &&
        Objects.equals(this.tierTypeName, destinyDefinitionsDestinyItemInventoryBlockDefinition.tierTypeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketTypeHash, expirationTooltip, expiredInActivityMessage, expiredInOrbitMessage, isInstanceItem, maxStackSize, recipeItemHash, recoveryBucketTypeHash, stackUniqueLabel, suppressExpirationWhenObjectivesComplete, tierType, tierTypeHash, tierTypeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemInventoryBlockDefinition {\n");
    sb.append("    bucketTypeHash: ").append(toIndentedString(bucketTypeHash)).append("\n");
    sb.append("    expirationTooltip: ").append(toIndentedString(expirationTooltip)).append("\n");
    sb.append("    expiredInActivityMessage: ").append(toIndentedString(expiredInActivityMessage)).append("\n");
    sb.append("    expiredInOrbitMessage: ").append(toIndentedString(expiredInOrbitMessage)).append("\n");
    sb.append("    isInstanceItem: ").append(toIndentedString(isInstanceItem)).append("\n");
    sb.append("    maxStackSize: ").append(toIndentedString(maxStackSize)).append("\n");
    sb.append("    recipeItemHash: ").append(toIndentedString(recipeItemHash)).append("\n");
    sb.append("    recoveryBucketTypeHash: ").append(toIndentedString(recoveryBucketTypeHash)).append("\n");
    sb.append("    stackUniqueLabel: ").append(toIndentedString(stackUniqueLabel)).append("\n");
    sb.append("    suppressExpirationWhenObjectivesComplete: ").append(toIndentedString(suppressExpirationWhenObjectivesComplete)).append("\n");
    sb.append("    tierType: ").append(toIndentedString(tierType)).append("\n");
    sb.append("    tierTypeHash: ").append(toIndentedString(tierTypeHash)).append("\n");
    sb.append("    tierTypeName: ").append(toIndentedString(tierTypeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketTypeHash");
    openapiFields.add("expirationTooltip");
    openapiFields.add("expiredInActivityMessage");
    openapiFields.add("expiredInOrbitMessage");
    openapiFields.add("isInstanceItem");
    openapiFields.add("maxStackSize");
    openapiFields.add("recipeItemHash");
    openapiFields.add("recoveryBucketTypeHash");
    openapiFields.add("stackUniqueLabel");
    openapiFields.add("suppressExpirationWhenObjectivesComplete");
    openapiFields.add("tierType");
    openapiFields.add("tierTypeHash");
    openapiFields.add("tierTypeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemInventoryBlockDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemInventoryBlockDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemInventoryBlockDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemInventoryBlockDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemInventoryBlockDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemInventoryBlockDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expirationTooltip") != null && !jsonObj.get("expirationTooltip").isJsonNull()) && !jsonObj.get("expirationTooltip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationTooltip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationTooltip").toString()));
      }
      if ((jsonObj.get("expiredInActivityMessage") != null && !jsonObj.get("expiredInActivityMessage").isJsonNull()) && !jsonObj.get("expiredInActivityMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiredInActivityMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiredInActivityMessage").toString()));
      }
      if ((jsonObj.get("expiredInOrbitMessage") != null && !jsonObj.get("expiredInOrbitMessage").isJsonNull()) && !jsonObj.get("expiredInOrbitMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiredInOrbitMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiredInOrbitMessage").toString()));
      }
      if ((jsonObj.get("stackUniqueLabel") != null && !jsonObj.get("stackUniqueLabel").isJsonNull()) && !jsonObj.get("stackUniqueLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stackUniqueLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stackUniqueLabel").toString()));
      }
      if ((jsonObj.get("tierTypeName") != null && !jsonObj.get("tierTypeName").isJsonNull()) && !jsonObj.get("tierTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tierTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tierTypeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemInventoryBlockDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemInventoryBlockDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemInventoryBlockDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemInventoryBlockDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemInventoryBlockDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemInventoryBlockDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemInventoryBlockDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemInventoryBlockDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemInventoryBlockDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemInventoryBlockDefinition
   */
  public static DestinyDefinitionsDestinyItemInventoryBlockDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemInventoryBlockDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemInventoryBlockDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

