/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DestinyQuestsDestinyObjectiveProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyComponentsItemsDestinyItemPlugObjectivesComponent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyComponentsItemsDestinyItemPlugObjectivesComponent {
  public static final String SERIALIZED_NAME_OBJECTIVES_PER_PLUG = "objectivesPerPlug";
  @SerializedName(SERIALIZED_NAME_OBJECTIVES_PER_PLUG)
  private Map<String, List<DestinyQuestsDestinyObjectiveProgress>> objectivesPerPlug = new HashMap<>();

  public DestinyComponentsItemsDestinyItemPlugObjectivesComponent() {
  }

  public DestinyComponentsItemsDestinyItemPlugObjectivesComponent objectivesPerPlug(Map<String, List<DestinyQuestsDestinyObjectiveProgress>> objectivesPerPlug) {
    this.objectivesPerPlug = objectivesPerPlug;
    return this;
  }

  public DestinyComponentsItemsDestinyItemPlugObjectivesComponent putObjectivesPerPlugItem(String key, List<DestinyQuestsDestinyObjectiveProgress> objectivesPerPlugItem) {
    if (this.objectivesPerPlug == null) {
      this.objectivesPerPlug = new HashMap<>();
    }
    this.objectivesPerPlug.put(key, objectivesPerPlugItem);
    return this;
  }

  /**
   * This set of data is keyed by the Item Hash (DestinyInventoryItemDefinition) of the plug whose objectives are being returned, with the value being the list of those objectives.   What if two plugs with the same hash are returned for an item, you ask?   Good question! They share the same item-scoped state, and as such would have identical objective state as a result. How&#39;s that for convenient.   Sometimes, Plugs may have objectives: generally, these are used for flavor and display purposes. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item&#39;s data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition&#39;s progressDescription property. Refer to the plug&#39;s itemHash and objective property for more information if you would like to display even more data.
   * @return objectivesPerPlug
   */
  @javax.annotation.Nullable
  public Map<String, List<DestinyQuestsDestinyObjectiveProgress>> getObjectivesPerPlug() {
    return objectivesPerPlug;
  }

  public void setObjectivesPerPlug(Map<String, List<DestinyQuestsDestinyObjectiveProgress>> objectivesPerPlug) {
    this.objectivesPerPlug = objectivesPerPlug;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyComponentsItemsDestinyItemPlugObjectivesComponent destinyComponentsItemsDestinyItemPlugObjectivesComponent = (DestinyComponentsItemsDestinyItemPlugObjectivesComponent) o;
    return Objects.equals(this.objectivesPerPlug, destinyComponentsItemsDestinyItemPlugObjectivesComponent.objectivesPerPlug);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectivesPerPlug);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyComponentsItemsDestinyItemPlugObjectivesComponent {\n");
    sb.append("    objectivesPerPlug: ").append(toIndentedString(objectivesPerPlug)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("objectivesPerPlug");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyComponentsItemsDestinyItemPlugObjectivesComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyComponentsItemsDestinyItemPlugObjectivesComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyComponentsItemsDestinyItemPlugObjectivesComponent is not found in the empty JSON string", DestinyComponentsItemsDestinyItemPlugObjectivesComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyComponentsItemsDestinyItemPlugObjectivesComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyComponentsItemsDestinyItemPlugObjectivesComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyComponentsItemsDestinyItemPlugObjectivesComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyComponentsItemsDestinyItemPlugObjectivesComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyComponentsItemsDestinyItemPlugObjectivesComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyComponentsItemsDestinyItemPlugObjectivesComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyComponentsItemsDestinyItemPlugObjectivesComponent>() {
           @Override
           public void write(JsonWriter out, DestinyComponentsItemsDestinyItemPlugObjectivesComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyComponentsItemsDestinyItemPlugObjectivesComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyComponentsItemsDestinyItemPlugObjectivesComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyComponentsItemsDestinyItemPlugObjectivesComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyComponentsItemsDestinyItemPlugObjectivesComponent
   */
  public static DestinyComponentsItemsDestinyItemPlugObjectivesComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyComponentsItemsDestinyItemPlugObjectivesComponent.class);
  }

  /**
   * Convert an instance of DestinyComponentsItemsDestinyItemPlugObjectivesComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

