/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * In an attempt to categorize items by type, usage, and other interesting properties, we created DestinyItemCategoryDefinition: information about types that is assembled using a set of heuristics that examine the properties of an item such as what inventory bucket it&#39;s in, its item type name, and whether it has or is missing certain blocks of data.  This heuristic is imperfect, however. If you find an item miscategorized, let us know on the Bungie API forums!  We then populate all of the categories that we think an item belongs to in its DestinyInventoryItemDefinition.itemCategoryHashes property. You can use that to provide your own custom item filtering, sorting, aggregating... go nuts on it! And let us know if you see more categories that you wish would be added!
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemCategoryDefinition {
  public static final String SERIALIZED_NAME_DEPRECATED = "deprecated";
  @SerializedName(SERIALIZED_NAME_DEPRECATED)
  private Boolean deprecated;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_GRANT_DESTINY_BREAKER_TYPE = "grantDestinyBreakerType";
  @SerializedName(SERIALIZED_NAME_GRANT_DESTINY_BREAKER_TYPE)
  private Integer grantDestinyBreakerType;

  public static final String SERIALIZED_NAME_GRANT_DESTINY_CLASS = "grantDestinyClass";
  @SerializedName(SERIALIZED_NAME_GRANT_DESTINY_CLASS)
  private Integer grantDestinyClass;

  public static final String SERIALIZED_NAME_GRANT_DESTINY_ITEM_TYPE = "grantDestinyItemType";
  @SerializedName(SERIALIZED_NAME_GRANT_DESTINY_ITEM_TYPE)
  private Integer grantDestinyItemType;

  public static final String SERIALIZED_NAME_GRANT_DESTINY_SUB_TYPE = "grantDestinySubType";
  @SerializedName(SERIALIZED_NAME_GRANT_DESTINY_SUB_TYPE)
  private Integer grantDestinySubType;

  public static final String SERIALIZED_NAME_GROUP_CATEGORY_ONLY = "groupCategoryOnly";
  @SerializedName(SERIALIZED_NAME_GROUP_CATEGORY_ONLY)
  private Boolean groupCategoryOnly;

  public static final String SERIALIZED_NAME_GROUPED_CATEGORY_HASHES = "groupedCategoryHashes";
  @SerializedName(SERIALIZED_NAME_GROUPED_CATEGORY_HASHES)
  private List<Integer> groupedCategoryHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_ITEM_TYPE_REGEX = "itemTypeRegex";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE_REGEX)
  private String itemTypeRegex;

  public static final String SERIALIZED_NAME_ITEM_TYPE_REGEX_NOT = "itemTypeRegexNot";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE_REGEX_NOT)
  private String itemTypeRegexNot;

  public static final String SERIALIZED_NAME_ORIGIN_BUCKET_IDENTIFIER = "originBucketIdentifier";
  @SerializedName(SERIALIZED_NAME_ORIGIN_BUCKET_IDENTIFIER)
  private String originBucketIdentifier;

  public static final String SERIALIZED_NAME_PARENT_CATEGORY_HASHES = "parentCategoryHashes";
  @SerializedName(SERIALIZED_NAME_PARENT_CATEGORY_HASHES)
  private List<Integer> parentCategoryHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLUG_CATEGORY_IDENTIFIER = "plugCategoryIdentifier";
  @SerializedName(SERIALIZED_NAME_PLUG_CATEGORY_IDENTIFIER)
  private String plugCategoryIdentifier;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_SHORT_TITLE = "shortTitle";
  @SerializedName(SERIALIZED_NAME_SHORT_TITLE)
  private String shortTitle;

  public static final String SERIALIZED_NAME_TRAIT_ID = "traitId";
  @SerializedName(SERIALIZED_NAME_TRAIT_ID)
  private String traitId;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public DestinyDefinitionsDestinyItemCategoryDefinition() {
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  /**
   * If True, this category has been deprecated: it may have no items left, or there may be only legacy items that remain in it which are no longer relevant to the game.
   * @return deprecated
   */
  @javax.annotation.Nullable
  public Boolean getDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition grantDestinyBreakerType(Integer grantDestinyBreakerType) {
    this.grantDestinyBreakerType = grantDestinyBreakerType;
    return this;
  }

  /**
   * If the item in question has this category, it also should have this breaker type.
   * @return grantDestinyBreakerType
   */
  @javax.annotation.Nullable
  public Integer getGrantDestinyBreakerType() {
    return grantDestinyBreakerType;
  }

  public void setGrantDestinyBreakerType(Integer grantDestinyBreakerType) {
    this.grantDestinyBreakerType = grantDestinyBreakerType;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition grantDestinyClass(Integer grantDestinyClass) {
    this.grantDestinyClass = grantDestinyClass;
    return this;
  }

  /**
   * If an item belongs to this category, it will also get this class restriction enum value.  See the other \&quot;grant\&quot;-prefixed properties on this definition for my color commentary.
   * @return grantDestinyClass
   */
  @javax.annotation.Nullable
  public Integer getGrantDestinyClass() {
    return grantDestinyClass;
  }

  public void setGrantDestinyClass(Integer grantDestinyClass) {
    this.grantDestinyClass = grantDestinyClass;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition grantDestinyItemType(Integer grantDestinyItemType) {
    this.grantDestinyItemType = grantDestinyItemType;
    return this;
  }

  /**
   * If an item belongs to this category, it will also receive this item type. This is now how DestinyItemType is populated for items: it used to be an even jankier process, but that&#39;s a story that requires more alcohol.
   * @return grantDestinyItemType
   */
  @javax.annotation.Nullable
  public Integer getGrantDestinyItemType() {
    return grantDestinyItemType;
  }

  public void setGrantDestinyItemType(Integer grantDestinyItemType) {
    this.grantDestinyItemType = grantDestinyItemType;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition grantDestinySubType(Integer grantDestinySubType) {
    this.grantDestinySubType = grantDestinySubType;
    return this;
  }

  /**
   * If an item belongs to this category, it will also receive this subtype enum value.  I know what you&#39;re thinking - what if it belongs to multiple categories that provide sub-types?  The last one processed wins, as is the case with all of these \&quot;grant\&quot; enums. Now you can see one reason why we moved away from these enums... but they&#39;re so convenient when they work, aren&#39;t they?
   * @return grantDestinySubType
   */
  @javax.annotation.Nullable
  public Integer getGrantDestinySubType() {
    return grantDestinySubType;
  }

  public void setGrantDestinySubType(Integer grantDestinySubType) {
    this.grantDestinySubType = grantDestinySubType;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition groupCategoryOnly(Boolean groupCategoryOnly) {
    this.groupCategoryOnly = groupCategoryOnly;
    return this;
  }

  /**
   * If true, this category is only used for grouping, and should not be evaluated with its own checks. Rather, the item only has this category if it has one of its child categories.
   * @return groupCategoryOnly
   */
  @javax.annotation.Nullable
  public Boolean getGroupCategoryOnly() {
    return groupCategoryOnly;
  }

  public void setGroupCategoryOnly(Boolean groupCategoryOnly) {
    this.groupCategoryOnly = groupCategoryOnly;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition groupedCategoryHashes(List<Integer> groupedCategoryHashes) {
    this.groupedCategoryHashes = groupedCategoryHashes;
    return this;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition addGroupedCategoryHashesItem(Integer groupedCategoryHashesItem) {
    if (this.groupedCategoryHashes == null) {
      this.groupedCategoryHashes = new ArrayList<>();
    }
    this.groupedCategoryHashes.add(groupedCategoryHashesItem);
    return this;
  }

  /**
   * If this category is a \&quot;parent\&quot; category of other categories, those children will have their hashes listed in rendering order here, and can be looked up using these hashes against DestinyItemCategoryDefinition.  In this way, you can build up a visual hierarchy of item categories. That&#39;s what we did, and you can do it too. I believe in you. Yes, you, Carl.  (I hope someone named Carl reads this someday)
   * @return groupedCategoryHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getGroupedCategoryHashes() {
    return groupedCategoryHashes;
  }

  public void setGroupedCategoryHashes(List<Integer> groupedCategoryHashes) {
    this.groupedCategoryHashes = groupedCategoryHashes;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition itemTypeRegex(String itemTypeRegex) {
    this.itemTypeRegex = itemTypeRegex;
    return this;
  }

  /**
   * The janky regular expression we used against the item type to try and discern whether the item belongs to this category.
   * @return itemTypeRegex
   */
  @javax.annotation.Nullable
  public String getItemTypeRegex() {
    return itemTypeRegex;
  }

  public void setItemTypeRegex(String itemTypeRegex) {
    this.itemTypeRegex = itemTypeRegex;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition itemTypeRegexNot(String itemTypeRegexNot) {
    this.itemTypeRegexNot = itemTypeRegexNot;
    return this;
  }

  /**
   * If the item type matches this janky regex, it does *not* belong to this category.
   * @return itemTypeRegexNot
   */
  @javax.annotation.Nullable
  public String getItemTypeRegexNot() {
    return itemTypeRegexNot;
  }

  public void setItemTypeRegexNot(String itemTypeRegexNot) {
    this.itemTypeRegexNot = itemTypeRegexNot;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition originBucketIdentifier(String originBucketIdentifier) {
    this.originBucketIdentifier = originBucketIdentifier;
    return this;
  }

  /**
   * If the item belongs to this bucket, it does belong to this category.
   * @return originBucketIdentifier
   */
  @javax.annotation.Nullable
  public String getOriginBucketIdentifier() {
    return originBucketIdentifier;
  }

  public void setOriginBucketIdentifier(String originBucketIdentifier) {
    this.originBucketIdentifier = originBucketIdentifier;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition parentCategoryHashes(List<Integer> parentCategoryHashes) {
    this.parentCategoryHashes = parentCategoryHashes;
    return this;
  }

  public DestinyDefinitionsDestinyItemCategoryDefinition addParentCategoryHashesItem(Integer parentCategoryHashesItem) {
    if (this.parentCategoryHashes == null) {
      this.parentCategoryHashes = new ArrayList<>();
    }
    this.parentCategoryHashes.add(parentCategoryHashesItem);
    return this;
  }

  /**
   * All item category hashes of \&quot;parent\&quot; categories: categories that contain this as a child through the hierarchy of groupedCategoryHashes. It&#39;s a bit redundant, but having this child-centric list speeds up some calculations.
   * @return parentCategoryHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getParentCategoryHashes() {
    return parentCategoryHashes;
  }

  public void setParentCategoryHashes(List<Integer> parentCategoryHashes) {
    this.parentCategoryHashes = parentCategoryHashes;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition plugCategoryIdentifier(String plugCategoryIdentifier) {
    this.plugCategoryIdentifier = plugCategoryIdentifier;
    return this;
  }

  /**
   * If the item is a plug, this is the identifier we expect to find associated with it if it is in this category.
   * @return plugCategoryIdentifier
   */
  @javax.annotation.Nullable
  public String getPlugCategoryIdentifier() {
    return plugCategoryIdentifier;
  }

  public void setPlugCategoryIdentifier(String plugCategoryIdentifier) {
    this.plugCategoryIdentifier = plugCategoryIdentifier;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition shortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
    return this;
  }

  /**
   * A shortened version of the title. The reason why we have this is because the Armory in German had titles that were too long to display in our UI, so these were localized abbreviated versions of those categories. The property still exists today, even though the Armory doesn&#39;t exist for D2... yet.
   * @return shortTitle
   */
  @javax.annotation.Nullable
  public String getShortTitle() {
    return shortTitle;
  }

  public void setShortTitle(String shortTitle) {
    this.shortTitle = shortTitle;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition traitId(String traitId) {
    this.traitId = traitId;
    return this;
  }

  /**
   * The traitId that can be found on items that belong to this category.
   * @return traitId
   */
  @javax.annotation.Nullable
  public String getTraitId() {
    return traitId;
  }

  public void setTraitId(String traitId) {
    this.traitId = traitId;
  }


  public DestinyDefinitionsDestinyItemCategoryDefinition visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * If True, this category should be visible in UI. Sometimes we make categories that we don&#39;t think are interesting externally. It&#39;s up to you if you want to skip on showing them.
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemCategoryDefinition destinyDefinitionsDestinyItemCategoryDefinition = (DestinyDefinitionsDestinyItemCategoryDefinition) o;
    return Objects.equals(this.deprecated, destinyDefinitionsDestinyItemCategoryDefinition.deprecated) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinyItemCategoryDefinition.displayProperties) &&
        Objects.equals(this.grantDestinyBreakerType, destinyDefinitionsDestinyItemCategoryDefinition.grantDestinyBreakerType) &&
        Objects.equals(this.grantDestinyClass, destinyDefinitionsDestinyItemCategoryDefinition.grantDestinyClass) &&
        Objects.equals(this.grantDestinyItemType, destinyDefinitionsDestinyItemCategoryDefinition.grantDestinyItemType) &&
        Objects.equals(this.grantDestinySubType, destinyDefinitionsDestinyItemCategoryDefinition.grantDestinySubType) &&
        Objects.equals(this.groupCategoryOnly, destinyDefinitionsDestinyItemCategoryDefinition.groupCategoryOnly) &&
        Objects.equals(this.groupedCategoryHashes, destinyDefinitionsDestinyItemCategoryDefinition.groupedCategoryHashes) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyItemCategoryDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinyItemCategoryDefinition.index) &&
        Objects.equals(this.itemTypeRegex, destinyDefinitionsDestinyItemCategoryDefinition.itemTypeRegex) &&
        Objects.equals(this.itemTypeRegexNot, destinyDefinitionsDestinyItemCategoryDefinition.itemTypeRegexNot) &&
        Objects.equals(this.originBucketIdentifier, destinyDefinitionsDestinyItemCategoryDefinition.originBucketIdentifier) &&
        Objects.equals(this.parentCategoryHashes, destinyDefinitionsDestinyItemCategoryDefinition.parentCategoryHashes) &&
        Objects.equals(this.plugCategoryIdentifier, destinyDefinitionsDestinyItemCategoryDefinition.plugCategoryIdentifier) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyItemCategoryDefinition.redacted) &&
        Objects.equals(this.shortTitle, destinyDefinitionsDestinyItemCategoryDefinition.shortTitle) &&
        Objects.equals(this.traitId, destinyDefinitionsDestinyItemCategoryDefinition.traitId) &&
        Objects.equals(this.visible, destinyDefinitionsDestinyItemCategoryDefinition.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deprecated, displayProperties, grantDestinyBreakerType, grantDestinyClass, grantDestinyItemType, grantDestinySubType, groupCategoryOnly, groupedCategoryHashes, hash, index, itemTypeRegex, itemTypeRegexNot, originBucketIdentifier, parentCategoryHashes, plugCategoryIdentifier, redacted, shortTitle, traitId, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemCategoryDefinition {\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    grantDestinyBreakerType: ").append(toIndentedString(grantDestinyBreakerType)).append("\n");
    sb.append("    grantDestinyClass: ").append(toIndentedString(grantDestinyClass)).append("\n");
    sb.append("    grantDestinyItemType: ").append(toIndentedString(grantDestinyItemType)).append("\n");
    sb.append("    grantDestinySubType: ").append(toIndentedString(grantDestinySubType)).append("\n");
    sb.append("    groupCategoryOnly: ").append(toIndentedString(groupCategoryOnly)).append("\n");
    sb.append("    groupedCategoryHashes: ").append(toIndentedString(groupedCategoryHashes)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    itemTypeRegex: ").append(toIndentedString(itemTypeRegex)).append("\n");
    sb.append("    itemTypeRegexNot: ").append(toIndentedString(itemTypeRegexNot)).append("\n");
    sb.append("    originBucketIdentifier: ").append(toIndentedString(originBucketIdentifier)).append("\n");
    sb.append("    parentCategoryHashes: ").append(toIndentedString(parentCategoryHashes)).append("\n");
    sb.append("    plugCategoryIdentifier: ").append(toIndentedString(plugCategoryIdentifier)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    shortTitle: ").append(toIndentedString(shortTitle)).append("\n");
    sb.append("    traitId: ").append(toIndentedString(traitId)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deprecated");
    openapiFields.add("displayProperties");
    openapiFields.add("grantDestinyBreakerType");
    openapiFields.add("grantDestinyClass");
    openapiFields.add("grantDestinyItemType");
    openapiFields.add("grantDestinySubType");
    openapiFields.add("groupCategoryOnly");
    openapiFields.add("groupedCategoryHashes");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("itemTypeRegex");
    openapiFields.add("itemTypeRegexNot");
    openapiFields.add("originBucketIdentifier");
    openapiFields.add("parentCategoryHashes");
    openapiFields.add("plugCategoryIdentifier");
    openapiFields.add("redacted");
    openapiFields.add("shortTitle");
    openapiFields.add("traitId");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemCategoryDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemCategoryDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemCategoryDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemCategoryDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemCategoryDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemCategoryDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupedCategoryHashes") != null && !jsonObj.get("groupedCategoryHashes").isJsonNull() && !jsonObj.get("groupedCategoryHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupedCategoryHashes` to be an array in the JSON string but got `%s`", jsonObj.get("groupedCategoryHashes").toString()));
      }
      if ((jsonObj.get("itemTypeRegex") != null && !jsonObj.get("itemTypeRegex").isJsonNull()) && !jsonObj.get("itemTypeRegex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemTypeRegex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemTypeRegex").toString()));
      }
      if ((jsonObj.get("itemTypeRegexNot") != null && !jsonObj.get("itemTypeRegexNot").isJsonNull()) && !jsonObj.get("itemTypeRegexNot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemTypeRegexNot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemTypeRegexNot").toString()));
      }
      if ((jsonObj.get("originBucketIdentifier") != null && !jsonObj.get("originBucketIdentifier").isJsonNull()) && !jsonObj.get("originBucketIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originBucketIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originBucketIdentifier").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parentCategoryHashes") != null && !jsonObj.get("parentCategoryHashes").isJsonNull() && !jsonObj.get("parentCategoryHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentCategoryHashes` to be an array in the JSON string but got `%s`", jsonObj.get("parentCategoryHashes").toString()));
      }
      if ((jsonObj.get("plugCategoryIdentifier") != null && !jsonObj.get("plugCategoryIdentifier").isJsonNull()) && !jsonObj.get("plugCategoryIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plugCategoryIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plugCategoryIdentifier").toString()));
      }
      if ((jsonObj.get("shortTitle") != null && !jsonObj.get("shortTitle").isJsonNull()) && !jsonObj.get("shortTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortTitle").toString()));
      }
      if ((jsonObj.get("traitId") != null && !jsonObj.get("traitId").isJsonNull()) && !jsonObj.get("traitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traitId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemCategoryDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemCategoryDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemCategoryDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemCategoryDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemCategoryDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemCategoryDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemCategoryDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemCategoryDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemCategoryDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemCategoryDefinition
   */
  public static DestinyDefinitionsDestinyItemCategoryDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemCategoryDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemCategoryDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

