/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDestinyStat;
import org.openapitools.client.model.DestinyEntitiesItemsDestinyItemInstanceEnergy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If an item is \&quot;instanced\&quot;, this will contain information about the item&#39;s instance that doesn&#39;t fit easily into other components. One might say this is the \&quot;essential\&quot; instance data for the item.  Items are instanced if they require information or state that can vary. For instance, weapons are Instanced: they are given a unique identifier, uniquely generated stats, and can have their properties altered. Non-instanced items have none of these things: for instance, Glimmer has no unique properties aside from how much of it you own.  You can tell from an item&#39;s definition whether it will be instanced or not by looking at the DestinyInventoryItemDefinition&#39;s definition.inventory.isInstanceItem property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyEntitiesItemsDestinyItemInstanceComponent {
  /**
   * If populated, this item has a breaker type corresponding to the given value. See DestinyBreakerTypeDefinition for more details.
   */
  @JsonAdapter(BreakerTypeEnum.Adapter.class)
  public enum BreakerTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    BreakerTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BreakerTypeEnum fromValue(Integer value) {
      for (BreakerTypeEnum b : BreakerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BreakerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BreakerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BreakerTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return BreakerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      BreakerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BREAKER_TYPE = "breakerType";
  @SerializedName(SERIALIZED_NAME_BREAKER_TYPE)
  private BreakerTypeEnum breakerType;

  public static final String SERIALIZED_NAME_BREAKER_TYPE_HASH = "breakerTypeHash";
  @SerializedName(SERIALIZED_NAME_BREAKER_TYPE_HASH)
  private Integer breakerTypeHash;

  public static final String SERIALIZED_NAME_CAN_EQUIP = "canEquip";
  @SerializedName(SERIALIZED_NAME_CAN_EQUIP)
  private Boolean canEquip;

  public static final String SERIALIZED_NAME_CANNOT_EQUIP_REASON = "cannotEquipReason";
  @SerializedName(SERIALIZED_NAME_CANNOT_EQUIP_REASON)
  private Integer cannotEquipReason;

  public static final String SERIALIZED_NAME_DAMAGE_TYPE = "damageType";
  @SerializedName(SERIALIZED_NAME_DAMAGE_TYPE)
  private Integer damageType;

  public static final String SERIALIZED_NAME_DAMAGE_TYPE_HASH = "damageTypeHash";
  @SerializedName(SERIALIZED_NAME_DAMAGE_TYPE_HASH)
  private Integer damageTypeHash;

  public static final String SERIALIZED_NAME_ENERGY = "energy";
  @SerializedName(SERIALIZED_NAME_ENERGY)
  private DestinyEntitiesItemsDestinyItemInstanceEnergy energy;

  public static final String SERIALIZED_NAME_EQUIP_REQUIRED_LEVEL = "equipRequiredLevel";
  @SerializedName(SERIALIZED_NAME_EQUIP_REQUIRED_LEVEL)
  private Integer equipRequiredLevel;

  public static final String SERIALIZED_NAME_IS_EQUIPPED = "isEquipped";
  @SerializedName(SERIALIZED_NAME_IS_EQUIPPED)
  private Boolean isEquipped;

  public static final String SERIALIZED_NAME_ITEM_LEVEL = "itemLevel";
  @SerializedName(SERIALIZED_NAME_ITEM_LEVEL)
  private Integer itemLevel;

  public static final String SERIALIZED_NAME_PRIMARY_STAT = "primaryStat";
  @SerializedName(SERIALIZED_NAME_PRIMARY_STAT)
  private DestinyDestinyStat primaryStat;

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private Integer quality;

  public static final String SERIALIZED_NAME_UNLOCK_HASHES_REQUIRED_TO_EQUIP = "unlockHashesRequiredToEquip";
  @SerializedName(SERIALIZED_NAME_UNLOCK_HASHES_REQUIRED_TO_EQUIP)
  private List<Integer> unlockHashesRequiredToEquip = new ArrayList<>();

  public DestinyEntitiesItemsDestinyItemInstanceComponent() {
  }

  public DestinyEntitiesItemsDestinyItemInstanceComponent breakerType(BreakerTypeEnum breakerType) {
    this.breakerType = breakerType;
    return this;
  }

  /**
   * If populated, this item has a breaker type corresponding to the given value. See DestinyBreakerTypeDefinition for more details.
   * @return breakerType
   */
  @javax.annotation.Nullable
  public BreakerTypeEnum getBreakerType() {
    return breakerType;
  }

  public void setBreakerType(BreakerTypeEnum breakerType) {
    this.breakerType = breakerType;
  }


  public DestinyEntitiesItemsDestinyItemInstanceComponent breakerTypeHash(Integer breakerTypeHash) {
    this.breakerTypeHash = breakerTypeHash;
    return this;
  }

  /**
   * If populated, this is the hash identifier for the item&#39;s breaker type. See DestinyBreakerTypeDefinition for more details.
   * @return breakerTypeHash
   */
  @javax.annotation.Nullable
  public Integer getBreakerTypeHash() {
    return breakerTypeHash;
  }

  public void setBreakerTypeHash(Integer breakerTypeHash) {
    this.breakerTypeHash = breakerTypeHash;
  }


  public DestinyEntitiesItemsDestinyItemInstanceComponent canEquip(Boolean canEquip) {
    this.canEquip = canEquip;
    return this;
  }

  /**
   * If this is an equippable item, you can check it here. There are permanent as well as transitory reasons why an item might not be able to be equipped: check cannotEquipReason for details.
   * @return canEquip
   */
  @javax.annotation.Nullable
  public Boolean getCanEquip() {
    return canEquip;
  }

  public void setCanEquip(Boolean canEquip) {
    this.canEquip = canEquip;
  }


  public DestinyEntitiesItemsDestinyItemInstanceComponent cannotEquipReason(Integer cannotEquipReason) {
    this.cannotEquipReason = cannotEquipReason;
    return this;
  }

  /**
   * If you cannot equip the item, this is a flags enum that enumerates all of the reasons why you couldn&#39;t equip the item. You may need to refine your UI further by using unlockHashesRequiredToEquip and equipRequiredLevel.
   * @return cannotEquipReason
   */
  @javax.annotation.Nullable
  public Integer getCannotEquipReason() {
    return cannotEquipReason;
  }

  public void setCannotEquipReason(Integer cannotEquipReason) {
    this.cannotEquipReason = cannotEquipReason;
  }


  public DestinyEntitiesItemsDestinyItemInstanceComponent damageType(Integer damageType) {
    this.damageType = damageType;
    return this;
  }

  /**
   * If the item has a damage type, this is the item&#39;s current damage type.
   * @return damageType
   */
  @javax.annotation.Nullable
  public Integer getDamageType() {
    return damageType;
  }

  public void setDamageType(Integer damageType) {
    this.damageType = damageType;
  }


  public DestinyEntitiesItemsDestinyItemInstanceComponent damageTypeHash(Integer damageTypeHash) {
    this.damageTypeHash = damageTypeHash;
    return this;
  }

  /**
   * The current damage type&#39;s hash, so you can look up localized info and icons for it.
   * @return damageTypeHash
   */
  @javax.annotation.Nullable
  public Integer getDamageTypeHash() {
    return damageTypeHash;
  }

  public void setDamageTypeHash(Integer damageTypeHash) {
    this.damageTypeHash = damageTypeHash;
  }


  public DestinyEntitiesItemsDestinyItemInstanceComponent energy(DestinyEntitiesItemsDestinyItemInstanceEnergy energy) {
    this.energy = energy;
    return this;
  }

  /**
   * IF populated, this item supports Energy mechanics (i.e. Armor 2.0), and these are the current details of its energy type and available capacity to spend energy points.
   * @return energy
   */
  @javax.annotation.Nullable
  public DestinyEntitiesItemsDestinyItemInstanceEnergy getEnergy() {
    return energy;
  }

  public void setEnergy(DestinyEntitiesItemsDestinyItemInstanceEnergy energy) {
    this.energy = energy;
  }


  public DestinyEntitiesItemsDestinyItemInstanceComponent equipRequiredLevel(Integer equipRequiredLevel) {
    this.equipRequiredLevel = equipRequiredLevel;
    return this;
  }

  /**
   * If the item cannot be equipped until you reach a certain level, that level will be reflected here.
   * @return equipRequiredLevel
   */
  @javax.annotation.Nullable
  public Integer getEquipRequiredLevel() {
    return equipRequiredLevel;
  }

  public void setEquipRequiredLevel(Integer equipRequiredLevel) {
    this.equipRequiredLevel = equipRequiredLevel;
  }


  public DestinyEntitiesItemsDestinyItemInstanceComponent isEquipped(Boolean isEquipped) {
    this.isEquipped = isEquipped;
    return this;
  }

  /**
   * Is the item currently equipped on the given character?
   * @return isEquipped
   */
  @javax.annotation.Nullable
  public Boolean getIsEquipped() {
    return isEquipped;
  }

  public void setIsEquipped(Boolean isEquipped) {
    this.isEquipped = isEquipped;
  }


  public DestinyEntitiesItemsDestinyItemInstanceComponent itemLevel(Integer itemLevel) {
    this.itemLevel = itemLevel;
    return this;
  }

  /**
   * The Item&#39;s \&quot;Level\&quot; has the most significant bearing on its stats, such as Light and Power.
   * @return itemLevel
   */
  @javax.annotation.Nullable
  public Integer getItemLevel() {
    return itemLevel;
  }

  public void setItemLevel(Integer itemLevel) {
    this.itemLevel = itemLevel;
  }


  public DestinyEntitiesItemsDestinyItemInstanceComponent primaryStat(DestinyDestinyStat primaryStat) {
    this.primaryStat = primaryStat;
    return this;
  }

  /**
   * The item stat that we consider to be \&quot;primary\&quot; for the item. For instance, this would be \&quot;Attack\&quot; for Weapons or \&quot;Defense\&quot; for armor.
   * @return primaryStat
   */
  @javax.annotation.Nullable
  public DestinyDestinyStat getPrimaryStat() {
    return primaryStat;
  }

  public void setPrimaryStat(DestinyDestinyStat primaryStat) {
    this.primaryStat = primaryStat;
  }


  public DestinyEntitiesItemsDestinyItemInstanceComponent quality(Integer quality) {
    this.quality = quality;
    return this;
  }

  /**
   * The \&quot;Quality\&quot; of the item has a lesser - but still impactful - bearing on stats like Light and Power.
   * @return quality
   */
  @javax.annotation.Nullable
  public Integer getQuality() {
    return quality;
  }

  public void setQuality(Integer quality) {
    this.quality = quality;
  }


  public DestinyEntitiesItemsDestinyItemInstanceComponent unlockHashesRequiredToEquip(List<Integer> unlockHashesRequiredToEquip) {
    this.unlockHashesRequiredToEquip = unlockHashesRequiredToEquip;
    return this;
  }

  public DestinyEntitiesItemsDestinyItemInstanceComponent addUnlockHashesRequiredToEquipItem(Integer unlockHashesRequiredToEquipItem) {
    if (this.unlockHashesRequiredToEquip == null) {
      this.unlockHashesRequiredToEquip = new ArrayList<>();
    }
    this.unlockHashesRequiredToEquip.add(unlockHashesRequiredToEquipItem);
    return this;
  }

  /**
   * Sometimes, there are limitations to equipping that are represented by character-level flags called \&quot;unlocks\&quot;.  This is a list of flags that they need in order to equip the item that the character has not met. Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes.
   * @return unlockHashesRequiredToEquip
   */
  @javax.annotation.Nullable
  public List<Integer> getUnlockHashesRequiredToEquip() {
    return unlockHashesRequiredToEquip;
  }

  public void setUnlockHashesRequiredToEquip(List<Integer> unlockHashesRequiredToEquip) {
    this.unlockHashesRequiredToEquip = unlockHashesRequiredToEquip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesItemsDestinyItemInstanceComponent destinyEntitiesItemsDestinyItemInstanceComponent = (DestinyEntitiesItemsDestinyItemInstanceComponent) o;
    return Objects.equals(this.breakerType, destinyEntitiesItemsDestinyItemInstanceComponent.breakerType) &&
        Objects.equals(this.breakerTypeHash, destinyEntitiesItemsDestinyItemInstanceComponent.breakerTypeHash) &&
        Objects.equals(this.canEquip, destinyEntitiesItemsDestinyItemInstanceComponent.canEquip) &&
        Objects.equals(this.cannotEquipReason, destinyEntitiesItemsDestinyItemInstanceComponent.cannotEquipReason) &&
        Objects.equals(this.damageType, destinyEntitiesItemsDestinyItemInstanceComponent.damageType) &&
        Objects.equals(this.damageTypeHash, destinyEntitiesItemsDestinyItemInstanceComponent.damageTypeHash) &&
        Objects.equals(this.energy, destinyEntitiesItemsDestinyItemInstanceComponent.energy) &&
        Objects.equals(this.equipRequiredLevel, destinyEntitiesItemsDestinyItemInstanceComponent.equipRequiredLevel) &&
        Objects.equals(this.isEquipped, destinyEntitiesItemsDestinyItemInstanceComponent.isEquipped) &&
        Objects.equals(this.itemLevel, destinyEntitiesItemsDestinyItemInstanceComponent.itemLevel) &&
        Objects.equals(this.primaryStat, destinyEntitiesItemsDestinyItemInstanceComponent.primaryStat) &&
        Objects.equals(this.quality, destinyEntitiesItemsDestinyItemInstanceComponent.quality) &&
        Objects.equals(this.unlockHashesRequiredToEquip, destinyEntitiesItemsDestinyItemInstanceComponent.unlockHashesRequiredToEquip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(breakerType, breakerTypeHash, canEquip, cannotEquipReason, damageType, damageTypeHash, energy, equipRequiredLevel, isEquipped, itemLevel, primaryStat, quality, unlockHashesRequiredToEquip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesItemsDestinyItemInstanceComponent {\n");
    sb.append("    breakerType: ").append(toIndentedString(breakerType)).append("\n");
    sb.append("    breakerTypeHash: ").append(toIndentedString(breakerTypeHash)).append("\n");
    sb.append("    canEquip: ").append(toIndentedString(canEquip)).append("\n");
    sb.append("    cannotEquipReason: ").append(toIndentedString(cannotEquipReason)).append("\n");
    sb.append("    damageType: ").append(toIndentedString(damageType)).append("\n");
    sb.append("    damageTypeHash: ").append(toIndentedString(damageTypeHash)).append("\n");
    sb.append("    energy: ").append(toIndentedString(energy)).append("\n");
    sb.append("    equipRequiredLevel: ").append(toIndentedString(equipRequiredLevel)).append("\n");
    sb.append("    isEquipped: ").append(toIndentedString(isEquipped)).append("\n");
    sb.append("    itemLevel: ").append(toIndentedString(itemLevel)).append("\n");
    sb.append("    primaryStat: ").append(toIndentedString(primaryStat)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    unlockHashesRequiredToEquip: ").append(toIndentedString(unlockHashesRequiredToEquip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("breakerType");
    openapiFields.add("breakerTypeHash");
    openapiFields.add("canEquip");
    openapiFields.add("cannotEquipReason");
    openapiFields.add("damageType");
    openapiFields.add("damageTypeHash");
    openapiFields.add("energy");
    openapiFields.add("equipRequiredLevel");
    openapiFields.add("isEquipped");
    openapiFields.add("itemLevel");
    openapiFields.add("primaryStat");
    openapiFields.add("quality");
    openapiFields.add("unlockHashesRequiredToEquip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyEntitiesItemsDestinyItemInstanceComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyEntitiesItemsDestinyItemInstanceComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyEntitiesItemsDestinyItemInstanceComponent is not found in the empty JSON string", DestinyEntitiesItemsDestinyItemInstanceComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyEntitiesItemsDestinyItemInstanceComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyEntitiesItemsDestinyItemInstanceComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `breakerType`
      if (jsonObj.get("breakerType") != null && !jsonObj.get("breakerType").isJsonNull()) {
        BreakerTypeEnum.validateJsonElement(jsonObj.get("breakerType"));
      }
      // validate the optional field `energy`
      if (jsonObj.get("energy") != null && !jsonObj.get("energy").isJsonNull()) {
        DestinyEntitiesItemsDestinyItemInstanceEnergy.validateJsonElement(jsonObj.get("energy"));
      }
      // validate the optional field `primaryStat`
      if (jsonObj.get("primaryStat") != null && !jsonObj.get("primaryStat").isJsonNull()) {
        DestinyDestinyStat.validateJsonElement(jsonObj.get("primaryStat"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("unlockHashesRequiredToEquip") != null && !jsonObj.get("unlockHashesRequiredToEquip").isJsonNull() && !jsonObj.get("unlockHashesRequiredToEquip").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unlockHashesRequiredToEquip` to be an array in the JSON string but got `%s`", jsonObj.get("unlockHashesRequiredToEquip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyEntitiesItemsDestinyItemInstanceComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyEntitiesItemsDestinyItemInstanceComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyEntitiesItemsDestinyItemInstanceComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyEntitiesItemsDestinyItemInstanceComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyEntitiesItemsDestinyItemInstanceComponent>() {
           @Override
           public void write(JsonWriter out, DestinyEntitiesItemsDestinyItemInstanceComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyEntitiesItemsDestinyItemInstanceComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyEntitiesItemsDestinyItemInstanceComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyEntitiesItemsDestinyItemInstanceComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyEntitiesItemsDestinyItemInstanceComponent
   */
  public static DestinyEntitiesItemsDestinyItemInstanceComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyEntitiesItemsDestinyItemInstanceComponent.class);
  }

  /**
   * Convert an instance of DestinyEntitiesItemsDestinyItemInstanceComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

