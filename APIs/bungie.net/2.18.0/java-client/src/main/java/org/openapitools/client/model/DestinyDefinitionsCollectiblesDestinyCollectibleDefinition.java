/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock;
import org.openapitools.client.model.DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsPresentationDestinyPresentationChildBlock;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {
  public static final String SERIALIZED_NAME_ACQUISITION_INFO = "acquisitionInfo";
  @SerializedName(SERIALIZED_NAME_ACQUISITION_INFO)
  private DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock acquisitionInfo;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_ITEM_HASH = "itemHash";
  @SerializedName(SERIALIZED_NAME_ITEM_HASH)
  private Integer itemHash;

  public static final String SERIALIZED_NAME_PARENT_NODE_HASHES = "parentNodeHashes";
  @SerializedName(SERIALIZED_NAME_PARENT_NODE_HASHES)
  private List<Integer> parentNodeHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRESENTATION_INFO = "presentationInfo";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_INFO)
  private DestinyDefinitionsPresentationDestinyPresentationChildBlock presentationInfo;

  public static final String SERIALIZED_NAME_PRESENTATION_NODE_TYPE = "presentationNodeType";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_NODE_TYPE)
  private Integer presentationNodeType;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private Integer scope;

  public static final String SERIALIZED_NAME_SOURCE_HASH = "sourceHash";
  @SerializedName(SERIALIZED_NAME_SOURCE_HASH)
  private Integer sourceHash;

  public static final String SERIALIZED_NAME_SOURCE_STRING = "sourceString";
  @SerializedName(SERIALIZED_NAME_SOURCE_STRING)
  private String sourceString;

  public static final String SERIALIZED_NAME_STATE_INFO = "stateInfo";
  @SerializedName(SERIALIZED_NAME_STATE_INFO)
  private DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock stateInfo;

  public static final String SERIALIZED_NAME_TRAIT_HASHES = "traitHashes";
  @SerializedName(SERIALIZED_NAME_TRAIT_HASHES)
  private List<Integer> traitHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRAIT_IDS = "traitIds";
  @SerializedName(SERIALIZED_NAME_TRAIT_IDS)
  private List<String> traitIds = new ArrayList<>();

  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition() {
  }

  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition acquisitionInfo(DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock acquisitionInfo) {
    this.acquisitionInfo = acquisitionInfo;
    return this;
  }

  /**
   * Get acquisitionInfo
   * @return acquisitionInfo
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock getAcquisitionInfo() {
    return acquisitionInfo;
  }

  public void setAcquisitionInfo(DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock acquisitionInfo) {
    this.acquisitionInfo = acquisitionInfo;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition itemHash(Integer itemHash) {
    this.itemHash = itemHash;
    return this;
  }

  /**
   * Get itemHash
   * @return itemHash
   */
  @javax.annotation.Nullable
  public Integer getItemHash() {
    return itemHash;
  }

  public void setItemHash(Integer itemHash) {
    this.itemHash = itemHash;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition parentNodeHashes(List<Integer> parentNodeHashes) {
    this.parentNodeHashes = parentNodeHashes;
    return this;
  }

  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition addParentNodeHashesItem(Integer parentNodeHashesItem) {
    if (this.parentNodeHashes == null) {
      this.parentNodeHashes = new ArrayList<>();
    }
    this.parentNodeHashes.add(parentNodeHashesItem);
    return this;
  }

  /**
   * A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
   * @return parentNodeHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getParentNodeHashes() {
    return parentNodeHashes;
  }

  public void setParentNodeHashes(List<Integer> parentNodeHashes) {
    this.parentNodeHashes = parentNodeHashes;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition presentationInfo(DestinyDefinitionsPresentationDestinyPresentationChildBlock presentationInfo) {
    this.presentationInfo = presentationInfo;
    return this;
  }

  /**
   * Get presentationInfo
   * @return presentationInfo
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsPresentationDestinyPresentationChildBlock getPresentationInfo() {
    return presentationInfo;
  }

  public void setPresentationInfo(DestinyDefinitionsPresentationDestinyPresentationChildBlock presentationInfo) {
    this.presentationInfo = presentationInfo;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition presentationNodeType(Integer presentationNodeType) {
    this.presentationNodeType = presentationNodeType;
    return this;
  }

  /**
   * Get presentationNodeType
   * @return presentationNodeType
   */
  @javax.annotation.Nullable
  public Integer getPresentationNodeType() {
    return presentationNodeType;
  }

  public void setPresentationNodeType(Integer presentationNodeType) {
    this.presentationNodeType = presentationNodeType;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition scope(Integer scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Indicates whether the state of this Collectible is determined on a per-character or on an account-wide basis.
   * @return scope
   */
  @javax.annotation.Nullable
  public Integer getScope() {
    return scope;
  }

  public void setScope(Integer scope) {
    this.scope = scope;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition sourceHash(Integer sourceHash) {
    this.sourceHash = sourceHash;
    return this;
  }

  /**
   * This is a hash identifier we are building on the BNet side in an attempt to let people group collectibles by similar sources.  I can&#39;t promise that it&#39;s going to be 100% accurate, but if the designers were consistent in assigning the same source strings to items with the same sources, it *ought to* be. No promises though.  This hash also doesn&#39;t relate to an actual definition, just to note: we&#39;ve got nothing useful other than the source string for this data.
   * @return sourceHash
   */
  @javax.annotation.Nullable
  public Integer getSourceHash() {
    return sourceHash;
  }

  public void setSourceHash(Integer sourceHash) {
    this.sourceHash = sourceHash;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition sourceString(String sourceString) {
    this.sourceString = sourceString;
    return this;
  }

  /**
   * A human readable string for a hint about how to acquire the item.
   * @return sourceString
   */
  @javax.annotation.Nullable
  public String getSourceString() {
    return sourceString;
  }

  public void setSourceString(String sourceString) {
    this.sourceString = sourceString;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition stateInfo(DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock stateInfo) {
    this.stateInfo = stateInfo;
    return this;
  }

  /**
   * Get stateInfo
   * @return stateInfo
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock getStateInfo() {
    return stateInfo;
  }

  public void setStateInfo(DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock stateInfo) {
    this.stateInfo = stateInfo;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition traitHashes(List<Integer> traitHashes) {
    this.traitHashes = traitHashes;
    return this;
  }

  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition addTraitHashesItem(Integer traitHashesItem) {
    if (this.traitHashes == null) {
      this.traitHashes = new ArrayList<>();
    }
    this.traitHashes.add(traitHashesItem);
    return this;
  }

  /**
   * Get traitHashes
   * @return traitHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getTraitHashes() {
    return traitHashes;
  }

  public void setTraitHashes(List<Integer> traitHashes) {
    this.traitHashes = traitHashes;
  }


  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition traitIds(List<String> traitIds) {
    this.traitIds = traitIds;
    return this;
  }

  public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition addTraitIdsItem(String traitIdsItem) {
    if (this.traitIds == null) {
      this.traitIds = new ArrayList<>();
    }
    this.traitIds.add(traitIdsItem);
    return this;
  }

  /**
   * Get traitIds
   * @return traitIds
   */
  @javax.annotation.Nullable
  public List<String> getTraitIds() {
    return traitIds;
  }

  public void setTraitIds(List<String> traitIds) {
    this.traitIds = traitIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsCollectiblesDestinyCollectibleDefinition destinyDefinitionsCollectiblesDestinyCollectibleDefinition = (DestinyDefinitionsCollectiblesDestinyCollectibleDefinition) o;
    return Objects.equals(this.acquisitionInfo, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.acquisitionInfo) &&
        Objects.equals(this.displayProperties, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.displayProperties) &&
        Objects.equals(this.hash, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.index) &&
        Objects.equals(this.itemHash, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.itemHash) &&
        Objects.equals(this.parentNodeHashes, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.parentNodeHashes) &&
        Objects.equals(this.presentationInfo, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.presentationInfo) &&
        Objects.equals(this.presentationNodeType, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.presentationNodeType) &&
        Objects.equals(this.redacted, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.redacted) &&
        Objects.equals(this.scope, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.scope) &&
        Objects.equals(this.sourceHash, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.sourceHash) &&
        Objects.equals(this.sourceString, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.sourceString) &&
        Objects.equals(this.stateInfo, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.stateInfo) &&
        Objects.equals(this.traitHashes, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.traitHashes) &&
        Objects.equals(this.traitIds, destinyDefinitionsCollectiblesDestinyCollectibleDefinition.traitIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquisitionInfo, displayProperties, hash, index, itemHash, parentNodeHashes, presentationInfo, presentationNodeType, redacted, scope, sourceHash, sourceString, stateInfo, traitHashes, traitIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsCollectiblesDestinyCollectibleDefinition {\n");
    sb.append("    acquisitionInfo: ").append(toIndentedString(acquisitionInfo)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    itemHash: ").append(toIndentedString(itemHash)).append("\n");
    sb.append("    parentNodeHashes: ").append(toIndentedString(parentNodeHashes)).append("\n");
    sb.append("    presentationInfo: ").append(toIndentedString(presentationInfo)).append("\n");
    sb.append("    presentationNodeType: ").append(toIndentedString(presentationNodeType)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    sourceHash: ").append(toIndentedString(sourceHash)).append("\n");
    sb.append("    sourceString: ").append(toIndentedString(sourceString)).append("\n");
    sb.append("    stateInfo: ").append(toIndentedString(stateInfo)).append("\n");
    sb.append("    traitHashes: ").append(toIndentedString(traitHashes)).append("\n");
    sb.append("    traitIds: ").append(toIndentedString(traitIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquisitionInfo");
    openapiFields.add("displayProperties");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("itemHash");
    openapiFields.add("parentNodeHashes");
    openapiFields.add("presentationInfo");
    openapiFields.add("presentationNodeType");
    openapiFields.add("redacted");
    openapiFields.add("scope");
    openapiFields.add("sourceHash");
    openapiFields.add("sourceString");
    openapiFields.add("stateInfo");
    openapiFields.add("traitHashes");
    openapiFields.add("traitIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsCollectiblesDestinyCollectibleDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsCollectiblesDestinyCollectibleDefinition is not found in the empty JSON string", DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsCollectiblesDestinyCollectibleDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `acquisitionInfo`
      if (jsonObj.get("acquisitionInfo") != null && !jsonObj.get("acquisitionInfo").isJsonNull()) {
        DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock.validateJsonElement(jsonObj.get("acquisitionInfo"));
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parentNodeHashes") != null && !jsonObj.get("parentNodeHashes").isJsonNull() && !jsonObj.get("parentNodeHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentNodeHashes` to be an array in the JSON string but got `%s`", jsonObj.get("parentNodeHashes").toString()));
      }
      // validate the optional field `presentationInfo`
      if (jsonObj.get("presentationInfo") != null && !jsonObj.get("presentationInfo").isJsonNull()) {
        DestinyDefinitionsPresentationDestinyPresentationChildBlock.validateJsonElement(jsonObj.get("presentationInfo"));
      }
      if ((jsonObj.get("sourceString") != null && !jsonObj.get("sourceString").isJsonNull()) && !jsonObj.get("sourceString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceString").toString()));
      }
      // validate the optional field `stateInfo`
      if (jsonObj.get("stateInfo") != null && !jsonObj.get("stateInfo").isJsonNull()) {
        DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock.validateJsonElement(jsonObj.get("stateInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("traitHashes") != null && !jsonObj.get("traitHashes").isJsonNull() && !jsonObj.get("traitHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `traitHashes` to be an array in the JSON string but got `%s`", jsonObj.get("traitHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("traitIds") != null && !jsonObj.get("traitIds").isJsonNull() && !jsonObj.get("traitIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `traitIds` to be an array in the JSON string but got `%s`", jsonObj.get("traitIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsCollectiblesDestinyCollectibleDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsCollectiblesDestinyCollectibleDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsCollectiblesDestinyCollectibleDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsCollectiblesDestinyCollectibleDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsCollectiblesDestinyCollectibleDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsCollectiblesDestinyCollectibleDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsCollectiblesDestinyCollectibleDefinition
   */
  public static DestinyDefinitionsCollectiblesDestinyCollectibleDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsCollectiblesDestinyCollectibleDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsCollectiblesDestinyCollectibleDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

