/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyObjectiveDisplayProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An item can have objectives on it. In practice, these are the exclusive purview of \&quot;Quest Step\&quot; items: DestinyInventoryItemDefinitions that represent a specific step in a Quest.  Quest steps have 1:M objectives that we end up processing and returning in live data as DestinyQuestStatus data, and other useful information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemObjectiveBlockDefinition {
  public static final String SERIALIZED_NAME_DISPLAY_ACTIVITY_HASHES = "displayActivityHashes";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ACTIVITY_HASHES)
  private List<Integer> displayActivityHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_AS_STAT_TRACKER = "displayAsStatTracker";
  @SerializedName(SERIALIZED_NAME_DISPLAY_AS_STAT_TRACKER)
  private Boolean displayAsStatTracker;

  public static final String SERIALIZED_NAME_NARRATIVE = "narrative";
  @SerializedName(SERIALIZED_NAME_NARRATIVE)
  private String narrative;

  public static final String SERIALIZED_NAME_OBJECTIVE_HASHES = "objectiveHashes";
  @SerializedName(SERIALIZED_NAME_OBJECTIVE_HASHES)
  private List<Integer> objectiveHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJECTIVE_VERB_NAME = "objectiveVerbName";
  @SerializedName(SERIALIZED_NAME_OBJECTIVE_VERB_NAME)
  private String objectiveVerbName;

  public static final String SERIALIZED_NAME_PER_OBJECTIVE_DISPLAY_PROPERTIES = "perObjectiveDisplayProperties";
  @SerializedName(SERIALIZED_NAME_PER_OBJECTIVE_DISPLAY_PROPERTIES)
  private List<DestinyDefinitionsDestinyObjectiveDisplayProperties> perObjectiveDisplayProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUEST_TYPE_HASH = "questTypeHash";
  @SerializedName(SERIALIZED_NAME_QUEST_TYPE_HASH)
  private Integer questTypeHash;

  public static final String SERIALIZED_NAME_QUEST_TYPE_IDENTIFIER = "questTypeIdentifier";
  @SerializedName(SERIALIZED_NAME_QUEST_TYPE_IDENTIFIER)
  private String questTypeIdentifier;

  public static final String SERIALIZED_NAME_QUESTLINE_ITEM_HASH = "questlineItemHash";
  @SerializedName(SERIALIZED_NAME_QUESTLINE_ITEM_HASH)
  private Integer questlineItemHash;

  public static final String SERIALIZED_NAME_REQUIRE_FULL_OBJECTIVE_COMPLETION = "requireFullObjectiveCompletion";
  @SerializedName(SERIALIZED_NAME_REQUIRE_FULL_OBJECTIVE_COMPLETION)
  private Boolean requireFullObjectiveCompletion;

  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition() {
  }

  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition displayActivityHashes(List<Integer> displayActivityHashes) {
    this.displayActivityHashes = displayActivityHashes;
    return this;
  }

  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition addDisplayActivityHashesItem(Integer displayActivityHashesItem) {
    if (this.displayActivityHashes == null) {
      this.displayActivityHashes = new ArrayList<>();
    }
    this.displayActivityHashes.add(displayActivityHashesItem);
    return this;
  }

  /**
   * For every entry in objectiveHashes, there is a corresponding entry in this array at the same index. If the objective is meant to be associated with a specific DestinyActivityDefinition, there will be a valid hash at that index. Otherwise, it will be invalid (0).  Rendered somewhat obsolete by perObjectiveDisplayProperties, which currently has much the same information but may end up with more info in the future.
   * @return displayActivityHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getDisplayActivityHashes() {
    return displayActivityHashes;
  }

  public void setDisplayActivityHashes(List<Integer> displayActivityHashes) {
    this.displayActivityHashes = displayActivityHashes;
  }


  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition displayAsStatTracker(Boolean displayAsStatTracker) {
    this.displayAsStatTracker = displayAsStatTracker;
    return this;
  }

  /**
   * Get displayAsStatTracker
   * @return displayAsStatTracker
   */
  @javax.annotation.Nullable
  public Boolean getDisplayAsStatTracker() {
    return displayAsStatTracker;
  }

  public void setDisplayAsStatTracker(Boolean displayAsStatTracker) {
    this.displayAsStatTracker = displayAsStatTracker;
  }


  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition narrative(String narrative) {
    this.narrative = narrative;
    return this;
  }

  /**
   * The localized string for narrative text related to this quest step, if any.
   * @return narrative
   */
  @javax.annotation.Nullable
  public String getNarrative() {
    return narrative;
  }

  public void setNarrative(String narrative) {
    this.narrative = narrative;
  }


  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition objectiveHashes(List<Integer> objectiveHashes) {
    this.objectiveHashes = objectiveHashes;
    return this;
  }

  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition addObjectiveHashesItem(Integer objectiveHashesItem) {
    if (this.objectiveHashes == null) {
      this.objectiveHashes = new ArrayList<>();
    }
    this.objectiveHashes.add(objectiveHashesItem);
    return this;
  }

  /**
   * The hashes to Objectives (DestinyObjectiveDefinition) that are part of this Quest Step, in the order that they should be rendered.
   * @return objectiveHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getObjectiveHashes() {
    return objectiveHashes;
  }

  public void setObjectiveHashes(List<Integer> objectiveHashes) {
    this.objectiveHashes = objectiveHashes;
  }


  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition objectiveVerbName(String objectiveVerbName) {
    this.objectiveVerbName = objectiveVerbName;
    return this;
  }

  /**
   * The localized string describing an action to be performed associated with the objectives, if any.
   * @return objectiveVerbName
   */
  @javax.annotation.Nullable
  public String getObjectiveVerbName() {
    return objectiveVerbName;
  }

  public void setObjectiveVerbName(String objectiveVerbName) {
    this.objectiveVerbName = objectiveVerbName;
  }


  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition perObjectiveDisplayProperties(List<DestinyDefinitionsDestinyObjectiveDisplayProperties> perObjectiveDisplayProperties) {
    this.perObjectiveDisplayProperties = perObjectiveDisplayProperties;
    return this;
  }

  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition addPerObjectiveDisplayPropertiesItem(DestinyDefinitionsDestinyObjectiveDisplayProperties perObjectiveDisplayPropertiesItem) {
    if (this.perObjectiveDisplayProperties == null) {
      this.perObjectiveDisplayProperties = new ArrayList<>();
    }
    this.perObjectiveDisplayProperties.add(perObjectiveDisplayPropertiesItem);
    return this;
  }

  /**
   * One entry per Objective on the item, it will have related display information.
   * @return perObjectiveDisplayProperties
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyObjectiveDisplayProperties> getPerObjectiveDisplayProperties() {
    return perObjectiveDisplayProperties;
  }

  public void setPerObjectiveDisplayProperties(List<DestinyDefinitionsDestinyObjectiveDisplayProperties> perObjectiveDisplayProperties) {
    this.perObjectiveDisplayProperties = perObjectiveDisplayProperties;
  }


  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition questTypeHash(Integer questTypeHash) {
    this.questTypeHash = questTypeHash;
    return this;
  }

  /**
   * A hashed value for the questTypeIdentifier, because apparently I like to be redundant.
   * @return questTypeHash
   */
  @javax.annotation.Nullable
  public Integer getQuestTypeHash() {
    return questTypeHash;
  }

  public void setQuestTypeHash(Integer questTypeHash) {
    this.questTypeHash = questTypeHash;
  }


  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition questTypeIdentifier(String questTypeIdentifier) {
    this.questTypeIdentifier = questTypeIdentifier;
    return this;
  }

  /**
   * The identifier for the type of quest being performed, if any. Not associated with any fixed definition, yet.
   * @return questTypeIdentifier
   */
  @javax.annotation.Nullable
  public String getQuestTypeIdentifier() {
    return questTypeIdentifier;
  }

  public void setQuestTypeIdentifier(String questTypeIdentifier) {
    this.questTypeIdentifier = questTypeIdentifier;
  }


  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition questlineItemHash(Integer questlineItemHash) {
    this.questlineItemHash = questlineItemHash;
    return this;
  }

  /**
   * The hash for the DestinyInventoryItemDefinition representing the Quest to which this Quest Step belongs.
   * @return questlineItemHash
   */
  @javax.annotation.Nullable
  public Integer getQuestlineItemHash() {
    return questlineItemHash;
  }

  public void setQuestlineItemHash(Integer questlineItemHash) {
    this.questlineItemHash = questlineItemHash;
  }


  public DestinyDefinitionsDestinyItemObjectiveBlockDefinition requireFullObjectiveCompletion(Boolean requireFullObjectiveCompletion) {
    this.requireFullObjectiveCompletion = requireFullObjectiveCompletion;
    return this;
  }

  /**
   * If True, all objectives must be completed for the step to be completed. If False, any one objective can be completed for the step to be completed.
   * @return requireFullObjectiveCompletion
   */
  @javax.annotation.Nullable
  public Boolean getRequireFullObjectiveCompletion() {
    return requireFullObjectiveCompletion;
  }

  public void setRequireFullObjectiveCompletion(Boolean requireFullObjectiveCompletion) {
    this.requireFullObjectiveCompletion = requireFullObjectiveCompletion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemObjectiveBlockDefinition destinyDefinitionsDestinyItemObjectiveBlockDefinition = (DestinyDefinitionsDestinyItemObjectiveBlockDefinition) o;
    return Objects.equals(this.displayActivityHashes, destinyDefinitionsDestinyItemObjectiveBlockDefinition.displayActivityHashes) &&
        Objects.equals(this.displayAsStatTracker, destinyDefinitionsDestinyItemObjectiveBlockDefinition.displayAsStatTracker) &&
        Objects.equals(this.narrative, destinyDefinitionsDestinyItemObjectiveBlockDefinition.narrative) &&
        Objects.equals(this.objectiveHashes, destinyDefinitionsDestinyItemObjectiveBlockDefinition.objectiveHashes) &&
        Objects.equals(this.objectiveVerbName, destinyDefinitionsDestinyItemObjectiveBlockDefinition.objectiveVerbName) &&
        Objects.equals(this.perObjectiveDisplayProperties, destinyDefinitionsDestinyItemObjectiveBlockDefinition.perObjectiveDisplayProperties) &&
        Objects.equals(this.questTypeHash, destinyDefinitionsDestinyItemObjectiveBlockDefinition.questTypeHash) &&
        Objects.equals(this.questTypeIdentifier, destinyDefinitionsDestinyItemObjectiveBlockDefinition.questTypeIdentifier) &&
        Objects.equals(this.questlineItemHash, destinyDefinitionsDestinyItemObjectiveBlockDefinition.questlineItemHash) &&
        Objects.equals(this.requireFullObjectiveCompletion, destinyDefinitionsDestinyItemObjectiveBlockDefinition.requireFullObjectiveCompletion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayActivityHashes, displayAsStatTracker, narrative, objectiveHashes, objectiveVerbName, perObjectiveDisplayProperties, questTypeHash, questTypeIdentifier, questlineItemHash, requireFullObjectiveCompletion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemObjectiveBlockDefinition {\n");
    sb.append("    displayActivityHashes: ").append(toIndentedString(displayActivityHashes)).append("\n");
    sb.append("    displayAsStatTracker: ").append(toIndentedString(displayAsStatTracker)).append("\n");
    sb.append("    narrative: ").append(toIndentedString(narrative)).append("\n");
    sb.append("    objectiveHashes: ").append(toIndentedString(objectiveHashes)).append("\n");
    sb.append("    objectiveVerbName: ").append(toIndentedString(objectiveVerbName)).append("\n");
    sb.append("    perObjectiveDisplayProperties: ").append(toIndentedString(perObjectiveDisplayProperties)).append("\n");
    sb.append("    questTypeHash: ").append(toIndentedString(questTypeHash)).append("\n");
    sb.append("    questTypeIdentifier: ").append(toIndentedString(questTypeIdentifier)).append("\n");
    sb.append("    questlineItemHash: ").append(toIndentedString(questlineItemHash)).append("\n");
    sb.append("    requireFullObjectiveCompletion: ").append(toIndentedString(requireFullObjectiveCompletion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayActivityHashes");
    openapiFields.add("displayAsStatTracker");
    openapiFields.add("narrative");
    openapiFields.add("objectiveHashes");
    openapiFields.add("objectiveVerbName");
    openapiFields.add("perObjectiveDisplayProperties");
    openapiFields.add("questTypeHash");
    openapiFields.add("questTypeIdentifier");
    openapiFields.add("questlineItemHash");
    openapiFields.add("requireFullObjectiveCompletion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemObjectiveBlockDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemObjectiveBlockDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemObjectiveBlockDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemObjectiveBlockDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemObjectiveBlockDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemObjectiveBlockDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("displayActivityHashes") != null && !jsonObj.get("displayActivityHashes").isJsonNull() && !jsonObj.get("displayActivityHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayActivityHashes` to be an array in the JSON string but got `%s`", jsonObj.get("displayActivityHashes").toString()));
      }
      if ((jsonObj.get("narrative") != null && !jsonObj.get("narrative").isJsonNull()) && !jsonObj.get("narrative").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `narrative` to be a primitive type in the JSON string but got `%s`", jsonObj.get("narrative").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("objectiveHashes") != null && !jsonObj.get("objectiveHashes").isJsonNull() && !jsonObj.get("objectiveHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectiveHashes` to be an array in the JSON string but got `%s`", jsonObj.get("objectiveHashes").toString()));
      }
      if ((jsonObj.get("objectiveVerbName") != null && !jsonObj.get("objectiveVerbName").isJsonNull()) && !jsonObj.get("objectiveVerbName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectiveVerbName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectiveVerbName").toString()));
      }
      if (jsonObj.get("perObjectiveDisplayProperties") != null && !jsonObj.get("perObjectiveDisplayProperties").isJsonNull()) {
        JsonArray jsonArrayperObjectiveDisplayProperties = jsonObj.getAsJsonArray("perObjectiveDisplayProperties");
        if (jsonArrayperObjectiveDisplayProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("perObjectiveDisplayProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `perObjectiveDisplayProperties` to be an array in the JSON string but got `%s`", jsonObj.get("perObjectiveDisplayProperties").toString()));
          }

          // validate the optional field `perObjectiveDisplayProperties` (array)
          for (int i = 0; i < jsonArrayperObjectiveDisplayProperties.size(); i++) {
            DestinyDefinitionsDestinyObjectiveDisplayProperties.validateJsonElement(jsonArrayperObjectiveDisplayProperties.get(i));
          };
        }
      }
      if ((jsonObj.get("questTypeIdentifier") != null && !jsonObj.get("questTypeIdentifier").isJsonNull()) && !jsonObj.get("questTypeIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `questTypeIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("questTypeIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemObjectiveBlockDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemObjectiveBlockDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemObjectiveBlockDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemObjectiveBlockDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemObjectiveBlockDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemObjectiveBlockDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemObjectiveBlockDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemObjectiveBlockDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemObjectiveBlockDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemObjectiveBlockDefinition
   */
  public static DestinyDefinitionsDestinyItemObjectiveBlockDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemObjectiveBlockDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemObjectiveBlockDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

