/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityGraphNodeEntry;
import org.openapitools.client.model.DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityPhase;
import org.openapitools.client.model.DestinyDefinitionsMilestonesDestinyMilestoneChallengeDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition {
  public static final String SERIALIZED_NAME_ACTIVITY_GRAPH_NODES = "activityGraphNodes";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_GRAPH_NODES)
  private List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityGraphNodeEntry> activityGraphNodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIVITY_HASH = "activityHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_HASH)
  private Integer activityHash;

  public static final String SERIALIZED_NAME_CHALLENGES = "challenges";
  @SerializedName(SERIALIZED_NAME_CHALLENGES)
  private List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeDefinition> challenges = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHASES = "phases";
  @SerializedName(SERIALIZED_NAME_PHASES)
  private List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityPhase> phases = new ArrayList<>();

  public DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition() {
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition activityGraphNodes(List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityGraphNodeEntry> activityGraphNodes) {
    this.activityGraphNodes = activityGraphNodes;
    return this;
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition addActivityGraphNodesItem(DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityGraphNodeEntry activityGraphNodesItem) {
    if (this.activityGraphNodes == null) {
      this.activityGraphNodes = new ArrayList<>();
    }
    this.activityGraphNodes.add(activityGraphNodesItem);
    return this;
  }

  /**
   * If the activity and its challenge is visible on any of these nodes, it will be returned.
   * @return activityGraphNodes
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityGraphNodeEntry> getActivityGraphNodes() {
    return activityGraphNodes;
  }

  public void setActivityGraphNodes(List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityGraphNodeEntry> activityGraphNodes) {
    this.activityGraphNodes = activityGraphNodes;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition activityHash(Integer activityHash) {
    this.activityHash = activityHash;
    return this;
  }

  /**
   * The activity for which this challenge is active.
   * @return activityHash
   */
  @javax.annotation.Nullable
  public Integer getActivityHash() {
    return activityHash;
  }

  public void setActivityHash(Integer activityHash) {
    this.activityHash = activityHash;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition challenges(List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeDefinition> challenges) {
    this.challenges = challenges;
    return this;
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition addChallengesItem(DestinyDefinitionsMilestonesDestinyMilestoneChallengeDefinition challengesItem) {
    if (this.challenges == null) {
      this.challenges = new ArrayList<>();
    }
    this.challenges.add(challengesItem);
    return this;
  }

  /**
   * Get challenges
   * @return challenges
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeDefinition> getChallenges() {
    return challenges;
  }

  public void setChallenges(List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeDefinition> challenges) {
    this.challenges = challenges;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition phases(List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityPhase> phases) {
    this.phases = phases;
    return this;
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition addPhasesItem(DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityPhase phasesItem) {
    if (this.phases == null) {
      this.phases = new ArrayList<>();
    }
    this.phases.add(phasesItem);
    return this;
  }

  /**
   * Phases related to this activity, if there are any.  These will be listed in the order in which they will appear in the actual activity.
   * @return phases
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityPhase> getPhases() {
    return phases;
  }

  public void setPhases(List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityPhase> phases) {
    this.phases = phases;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition destinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition = (DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition) o;
    return Objects.equals(this.activityGraphNodes, destinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition.activityGraphNodes) &&
        Objects.equals(this.activityHash, destinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition.activityHash) &&
        Objects.equals(this.challenges, destinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition.challenges) &&
        Objects.equals(this.phases, destinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition.phases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityGraphNodes, activityHash, challenges, phases);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition {\n");
    sb.append("    activityGraphNodes: ").append(toIndentedString(activityGraphNodes)).append("\n");
    sb.append("    activityHash: ").append(toIndentedString(activityHash)).append("\n");
    sb.append("    challenges: ").append(toIndentedString(challenges)).append("\n");
    sb.append("    phases: ").append(toIndentedString(phases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityGraphNodes");
    openapiFields.add("activityHash");
    openapiFields.add("challenges");
    openapiFields.add("phases");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition is not found in the empty JSON string", DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("activityGraphNodes") != null && !jsonObj.get("activityGraphNodes").isJsonNull()) {
        JsonArray jsonArrayactivityGraphNodes = jsonObj.getAsJsonArray("activityGraphNodes");
        if (jsonArrayactivityGraphNodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activityGraphNodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activityGraphNodes` to be an array in the JSON string but got `%s`", jsonObj.get("activityGraphNodes").toString()));
          }

          // validate the optional field `activityGraphNodes` (array)
          for (int i = 0; i < jsonArrayactivityGraphNodes.size(); i++) {
            DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityGraphNodeEntry.validateJsonElement(jsonArrayactivityGraphNodes.get(i));
          };
        }
      }
      if (jsonObj.get("challenges") != null && !jsonObj.get("challenges").isJsonNull()) {
        JsonArray jsonArraychallenges = jsonObj.getAsJsonArray("challenges");
        if (jsonArraychallenges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("challenges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `challenges` to be an array in the JSON string but got `%s`", jsonObj.get("challenges").toString()));
          }

          // validate the optional field `challenges` (array)
          for (int i = 0; i < jsonArraychallenges.size(); i++) {
            DestinyDefinitionsMilestonesDestinyMilestoneChallengeDefinition.validateJsonElement(jsonArraychallenges.get(i));
          };
        }
      }
      if (jsonObj.get("phases") != null && !jsonObj.get("phases").isJsonNull()) {
        JsonArray jsonArrayphases = jsonObj.getAsJsonArray("phases");
        if (jsonArrayphases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phases` to be an array in the JSON string but got `%s`", jsonObj.get("phases").toString()));
          }

          // validate the optional field `phases` (array)
          for (int i = 0; i < jsonArrayphases.size(); i++) {
            DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityPhase.validateJsonElement(jsonArrayphases.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition
   */
  public static DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

