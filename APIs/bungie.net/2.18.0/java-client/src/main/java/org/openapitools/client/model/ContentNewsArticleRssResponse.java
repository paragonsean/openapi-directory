/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContentNewsArticleRssItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContentNewsArticleRssResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentNewsArticleRssResponse {
  public static final String SERIALIZED_NAME_CATEGORY_FILTER = "CategoryFilter";
  @SerializedName(SERIALIZED_NAME_CATEGORY_FILTER)
  private String categoryFilter;

  public static final String SERIALIZED_NAME_CURRENT_PAGINATION_TOKEN = "CurrentPaginationToken";
  @SerializedName(SERIALIZED_NAME_CURRENT_PAGINATION_TOKEN)
  private Integer currentPaginationToken;

  public static final String SERIALIZED_NAME_NEWS_ARTICLES = "NewsArticles";
  @SerializedName(SERIALIZED_NAME_NEWS_ARTICLES)
  private List<ContentNewsArticleRssItem> newsArticles = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_PAGINATION_TOKEN = "NextPaginationToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGINATION_TOKEN)
  private Integer nextPaginationToken;

  public static final String SERIALIZED_NAME_RESULT_COUNT_THIS_PAGE = "ResultCountThisPage";
  @SerializedName(SERIALIZED_NAME_RESULT_COUNT_THIS_PAGE)
  private Integer resultCountThisPage;

  public ContentNewsArticleRssResponse() {
  }

  public ContentNewsArticleRssResponse categoryFilter(String categoryFilter) {
    this.categoryFilter = categoryFilter;
    return this;
  }

  /**
   * Get categoryFilter
   * @return categoryFilter
   */
  @javax.annotation.Nullable
  public String getCategoryFilter() {
    return categoryFilter;
  }

  public void setCategoryFilter(String categoryFilter) {
    this.categoryFilter = categoryFilter;
  }


  public ContentNewsArticleRssResponse currentPaginationToken(Integer currentPaginationToken) {
    this.currentPaginationToken = currentPaginationToken;
    return this;
  }

  /**
   * Get currentPaginationToken
   * @return currentPaginationToken
   */
  @javax.annotation.Nullable
  public Integer getCurrentPaginationToken() {
    return currentPaginationToken;
  }

  public void setCurrentPaginationToken(Integer currentPaginationToken) {
    this.currentPaginationToken = currentPaginationToken;
  }


  public ContentNewsArticleRssResponse newsArticles(List<ContentNewsArticleRssItem> newsArticles) {
    this.newsArticles = newsArticles;
    return this;
  }

  public ContentNewsArticleRssResponse addNewsArticlesItem(ContentNewsArticleRssItem newsArticlesItem) {
    if (this.newsArticles == null) {
      this.newsArticles = new ArrayList<>();
    }
    this.newsArticles.add(newsArticlesItem);
    return this;
  }

  /**
   * Get newsArticles
   * @return newsArticles
   */
  @javax.annotation.Nullable
  public List<ContentNewsArticleRssItem> getNewsArticles() {
    return newsArticles;
  }

  public void setNewsArticles(List<ContentNewsArticleRssItem> newsArticles) {
    this.newsArticles = newsArticles;
  }


  public ContentNewsArticleRssResponse nextPaginationToken(Integer nextPaginationToken) {
    this.nextPaginationToken = nextPaginationToken;
    return this;
  }

  /**
   * Get nextPaginationToken
   * @return nextPaginationToken
   */
  @javax.annotation.Nullable
  public Integer getNextPaginationToken() {
    return nextPaginationToken;
  }

  public void setNextPaginationToken(Integer nextPaginationToken) {
    this.nextPaginationToken = nextPaginationToken;
  }


  public ContentNewsArticleRssResponse resultCountThisPage(Integer resultCountThisPage) {
    this.resultCountThisPage = resultCountThisPage;
    return this;
  }

  /**
   * Get resultCountThisPage
   * @return resultCountThisPage
   */
  @javax.annotation.Nullable
  public Integer getResultCountThisPage() {
    return resultCountThisPage;
  }

  public void setResultCountThisPage(Integer resultCountThisPage) {
    this.resultCountThisPage = resultCountThisPage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentNewsArticleRssResponse contentNewsArticleRssResponse = (ContentNewsArticleRssResponse) o;
    return Objects.equals(this.categoryFilter, contentNewsArticleRssResponse.categoryFilter) &&
        Objects.equals(this.currentPaginationToken, contentNewsArticleRssResponse.currentPaginationToken) &&
        Objects.equals(this.newsArticles, contentNewsArticleRssResponse.newsArticles) &&
        Objects.equals(this.nextPaginationToken, contentNewsArticleRssResponse.nextPaginationToken) &&
        Objects.equals(this.resultCountThisPage, contentNewsArticleRssResponse.resultCountThisPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryFilter, currentPaginationToken, newsArticles, nextPaginationToken, resultCountThisPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentNewsArticleRssResponse {\n");
    sb.append("    categoryFilter: ").append(toIndentedString(categoryFilter)).append("\n");
    sb.append("    currentPaginationToken: ").append(toIndentedString(currentPaginationToken)).append("\n");
    sb.append("    newsArticles: ").append(toIndentedString(newsArticles)).append("\n");
    sb.append("    nextPaginationToken: ").append(toIndentedString(nextPaginationToken)).append("\n");
    sb.append("    resultCountThisPage: ").append(toIndentedString(resultCountThisPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CategoryFilter");
    openapiFields.add("CurrentPaginationToken");
    openapiFields.add("NewsArticles");
    openapiFields.add("NextPaginationToken");
    openapiFields.add("ResultCountThisPage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentNewsArticleRssResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentNewsArticleRssResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentNewsArticleRssResponse is not found in the empty JSON string", ContentNewsArticleRssResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentNewsArticleRssResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentNewsArticleRssResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CategoryFilter") != null && !jsonObj.get("CategoryFilter").isJsonNull()) && !jsonObj.get("CategoryFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CategoryFilter").toString()));
      }
      if (jsonObj.get("NewsArticles") != null && !jsonObj.get("NewsArticles").isJsonNull()) {
        JsonArray jsonArraynewsArticles = jsonObj.getAsJsonArray("NewsArticles");
        if (jsonArraynewsArticles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("NewsArticles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `NewsArticles` to be an array in the JSON string but got `%s`", jsonObj.get("NewsArticles").toString()));
          }

          // validate the optional field `NewsArticles` (array)
          for (int i = 0; i < jsonArraynewsArticles.size(); i++) {
            ContentNewsArticleRssItem.validateJsonElement(jsonArraynewsArticles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentNewsArticleRssResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentNewsArticleRssResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentNewsArticleRssResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentNewsArticleRssResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentNewsArticleRssResponse>() {
           @Override
           public void write(JsonWriter out, ContentNewsArticleRssResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentNewsArticleRssResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentNewsArticleRssResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentNewsArticleRssResponse
   * @throws IOException if the JSON string is invalid with respect to ContentNewsArticleRssResponse
   */
  public static ContentNewsArticleRssResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentNewsArticleRssResponse.class);
  }

  /**
   * Convert an instance of ContentNewsArticleRssResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

