/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry;
import org.openapitools.client.model.DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry;
import org.openapitools.client.model.DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry;
import org.openapitools.client.model.DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry;
import org.openapitools.client.model.DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * As/if presentation nodes begin to host more entities as children, these lists will be added to. One list property exists per type of entity that can be treated as a child of this presentation node, and each holds the identifier of the entity and any associated information needed to display the UI for that entity (if anything)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock {
  public static final String SERIALIZED_NAME_COLLECTIBLES = "collectibles";
  @SerializedName(SERIALIZED_NAME_COLLECTIBLES)
  private List<DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry> collectibles = new ArrayList<>();

  public static final String SERIALIZED_NAME_CRAFTABLES = "craftables";
  @SerializedName(SERIALIZED_NAME_CRAFTABLES)
  private List<DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry> craftables = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRESENTATION_NODES = "presentationNodes";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_NODES)
  private List<DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry> presentationNodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List<DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry> records = new ArrayList<>();

  public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock() {
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock collectibles(List<DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry> collectibles) {
    this.collectibles = collectibles;
    return this;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock addCollectiblesItem(DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry collectiblesItem) {
    if (this.collectibles == null) {
      this.collectibles = new ArrayList<>();
    }
    this.collectibles.add(collectiblesItem);
    return this;
  }

  /**
   * Get collectibles
   * @return collectibles
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry> getCollectibles() {
    return collectibles;
  }

  public void setCollectibles(List<DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry> collectibles) {
    this.collectibles = collectibles;
  }


  public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock craftables(List<DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry> craftables) {
    this.craftables = craftables;
    return this;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock addCraftablesItem(DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry craftablesItem) {
    if (this.craftables == null) {
      this.craftables = new ArrayList<>();
    }
    this.craftables.add(craftablesItem);
    return this;
  }

  /**
   * Get craftables
   * @return craftables
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry> getCraftables() {
    return craftables;
  }

  public void setCraftables(List<DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry> craftables) {
    this.craftables = craftables;
  }


  public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock metrics(List<DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry> metrics) {
    this.metrics = metrics;
    return this;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock addMetricsItem(DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry> metrics) {
    this.metrics = metrics;
  }


  public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock presentationNodes(List<DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry> presentationNodes) {
    this.presentationNodes = presentationNodes;
    return this;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock addPresentationNodesItem(DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry presentationNodesItem) {
    if (this.presentationNodes == null) {
      this.presentationNodes = new ArrayList<>();
    }
    this.presentationNodes.add(presentationNodesItem);
    return this;
  }

  /**
   * Get presentationNodes
   * @return presentationNodes
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry> getPresentationNodes() {
    return presentationNodes;
  }

  public void setPresentationNodes(List<DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry> presentationNodes) {
    this.presentationNodes = presentationNodes;
  }


  public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock records(List<DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry> records) {
    this.records = records;
    return this;
  }

  public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock addRecordsItem(DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<>();
    }
    this.records.add(recordsItem);
    return this;
  }

  /**
   * Get records
   * @return records
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry> getRecords() {
    return records;
  }

  public void setRecords(List<DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry> records) {
    this.records = records;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock destinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock = (DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock) o;
    return Objects.equals(this.collectibles, destinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.collectibles) &&
        Objects.equals(this.craftables, destinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.craftables) &&
        Objects.equals(this.metrics, destinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.metrics) &&
        Objects.equals(this.presentationNodes, destinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.presentationNodes) &&
        Objects.equals(this.records, destinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.records);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectibles, craftables, metrics, presentationNodes, records);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock {\n");
    sb.append("    collectibles: ").append(toIndentedString(collectibles)).append("\n");
    sb.append("    craftables: ").append(toIndentedString(craftables)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    presentationNodes: ").append(toIndentedString(presentationNodes)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collectibles");
    openapiFields.add("craftables");
    openapiFields.add("metrics");
    openapiFields.add("presentationNodes");
    openapiFields.add("records");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock is not found in the empty JSON string", DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("collectibles") != null && !jsonObj.get("collectibles").isJsonNull()) {
        JsonArray jsonArraycollectibles = jsonObj.getAsJsonArray("collectibles");
        if (jsonArraycollectibles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("collectibles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `collectibles` to be an array in the JSON string but got `%s`", jsonObj.get("collectibles").toString()));
          }

          // validate the optional field `collectibles` (array)
          for (int i = 0; i < jsonArraycollectibles.size(); i++) {
            DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry.validateJsonElement(jsonArraycollectibles.get(i));
          };
        }
      }
      if (jsonObj.get("craftables") != null && !jsonObj.get("craftables").isJsonNull()) {
        JsonArray jsonArraycraftables = jsonObj.getAsJsonArray("craftables");
        if (jsonArraycraftables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("craftables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `craftables` to be an array in the JSON string but got `%s`", jsonObj.get("craftables").toString()));
          }

          // validate the optional field `craftables` (array)
          for (int i = 0; i < jsonArraycraftables.size(); i++) {
            DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry.validateJsonElement(jsonArraycraftables.get(i));
          };
        }
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if (jsonObj.get("presentationNodes") != null && !jsonObj.get("presentationNodes").isJsonNull()) {
        JsonArray jsonArraypresentationNodes = jsonObj.getAsJsonArray("presentationNodes");
        if (jsonArraypresentationNodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("presentationNodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `presentationNodes` to be an array in the JSON string but got `%s`", jsonObj.get("presentationNodes").toString()));
          }

          // validate the optional field `presentationNodes` (array)
          for (int i = 0; i < jsonArraypresentationNodes.size(); i++) {
            DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry.validateJsonElement(jsonArraypresentationNodes.get(i));
          };
        }
      }
      if (jsonObj.get("records") != null && !jsonObj.get("records").isJsonNull()) {
        JsonArray jsonArrayrecords = jsonObj.getAsJsonArray("records");
        if (jsonArrayrecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("records").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `records` to be an array in the JSON string but got `%s`", jsonObj.get("records").toString()));
          }

          // validate the optional field `records` (array)
          for (int i = 0; i < jsonArrayrecords.size(); i++) {
            DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry.validateJsonElement(jsonArrayrecords.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock
   */
  public static DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

