/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents types of Energy that can be used for costs and payments related to Armor 2.0 mods.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition {
  public static final String SERIALIZED_NAME_CAPACITY_STAT_HASH = "capacityStatHash";
  @SerializedName(SERIALIZED_NAME_CAPACITY_STAT_HASH)
  private Integer capacityStatHash;

  public static final String SERIALIZED_NAME_COST_STAT_HASH = "costStatHash";
  @SerializedName(SERIALIZED_NAME_COST_STAT_HASH)
  private Integer costStatHash;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_ENUM_VALUE = "enumValue";
  @SerializedName(SERIALIZED_NAME_ENUM_VALUE)
  private Integer enumValue;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_SHOW_ICON = "showIcon";
  @SerializedName(SERIALIZED_NAME_SHOW_ICON)
  private Boolean showIcon;

  public static final String SERIALIZED_NAME_TRANSPARENT_ICON_PATH = "transparentIconPath";
  @SerializedName(SERIALIZED_NAME_TRANSPARENT_ICON_PATH)
  private String transparentIconPath;

  public DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition() {
  }

  public DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition capacityStatHash(Integer capacityStatHash) {
    this.capacityStatHash = capacityStatHash;
    return this;
  }

  /**
   * If this Energy Type can be used for determining the Type of Energy that an item can consume, this is the hash for the DestinyInvestmentStatDefinition that represents the stat which holds the Capacity for that energy type. (Note that this is optional because \&quot;Any\&quot; is a valid cost, but not valid for Capacity - an Armor must have a specific Energy Type for determining the energy type that the Armor is restricted to use)
   * @return capacityStatHash
   */
  @javax.annotation.Nullable
  public Integer getCapacityStatHash() {
    return capacityStatHash;
  }

  public void setCapacityStatHash(Integer capacityStatHash) {
    this.capacityStatHash = capacityStatHash;
  }


  public DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition costStatHash(Integer costStatHash) {
    this.costStatHash = costStatHash;
    return this;
  }

  /**
   * If this Energy Type can be used as a cost to pay for socketing Armor 2.0 items, this is the hash for the DestinyInvestmentStatDefinition that stores the plug&#39;s raw cost.
   * @return costStatHash
   */
  @javax.annotation.Nullable
  public Integer getCostStatHash() {
    return costStatHash;
  }

  public void setCostStatHash(Integer costStatHash) {
    this.costStatHash = costStatHash;
  }


  public DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * The description of the energy type, icon etc...
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition enumValue(Integer enumValue) {
    this.enumValue = enumValue;
    return this;
  }

  /**
   * We have an enumeration for Energy types for quick reference. This is the current definition&#39;s Energy type enum value.
   * @return enumValue
   */
  @javax.annotation.Nullable
  public Integer getEnumValue() {
    return enumValue;
  }

  public void setEnumValue(Integer enumValue) {
    this.enumValue = enumValue;
  }


  public DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition showIcon(Boolean showIcon) {
    this.showIcon = showIcon;
    return this;
  }

  /**
   * If TRUE, the game shows this Energy type&#39;s icon. Otherwise, it doesn&#39;t. Whether you show it or not is up to you.
   * @return showIcon
   */
  @javax.annotation.Nullable
  public Boolean getShowIcon() {
    return showIcon;
  }

  public void setShowIcon(Boolean showIcon) {
    this.showIcon = showIcon;
  }


  public DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition transparentIconPath(String transparentIconPath) {
    this.transparentIconPath = transparentIconPath;
    return this;
  }

  /**
   * A variant of the icon that is transparent and colorless.
   * @return transparentIconPath
   */
  @javax.annotation.Nullable
  public String getTransparentIconPath() {
    return transparentIconPath;
  }

  public void setTransparentIconPath(String transparentIconPath) {
    this.transparentIconPath = transparentIconPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition destinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition = (DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition) o;
    return Objects.equals(this.capacityStatHash, destinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.capacityStatHash) &&
        Objects.equals(this.costStatHash, destinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.costStatHash) &&
        Objects.equals(this.displayProperties, destinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.displayProperties) &&
        Objects.equals(this.enumValue, destinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.enumValue) &&
        Objects.equals(this.hash, destinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.redacted) &&
        Objects.equals(this.showIcon, destinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.showIcon) &&
        Objects.equals(this.transparentIconPath, destinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.transparentIconPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacityStatHash, costStatHash, displayProperties, enumValue, hash, index, redacted, showIcon, transparentIconPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition {\n");
    sb.append("    capacityStatHash: ").append(toIndentedString(capacityStatHash)).append("\n");
    sb.append("    costStatHash: ").append(toIndentedString(costStatHash)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    enumValue: ").append(toIndentedString(enumValue)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    showIcon: ").append(toIndentedString(showIcon)).append("\n");
    sb.append("    transparentIconPath: ").append(toIndentedString(transparentIconPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacityStatHash");
    openapiFields.add("costStatHash");
    openapiFields.add("displayProperties");
    openapiFields.add("enumValue");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("redacted");
    openapiFields.add("showIcon");
    openapiFields.add("transparentIconPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition is not found in the empty JSON string", DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      if ((jsonObj.get("transparentIconPath") != null && !jsonObj.get("transparentIconPath").isJsonNull()) && !jsonObj.get("transparentIconPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transparentIconPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transparentIconPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition
   */
  public static DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

