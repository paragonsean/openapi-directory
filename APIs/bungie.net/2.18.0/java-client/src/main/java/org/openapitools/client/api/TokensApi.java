/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GroupV2GetUserClanInviteSetting200Response;
import org.openapitools.client.model.TokensGetBungieRewardsList200Response;
import org.openapitools.client.model.TokensGetPartnerOfferSkuHistory200Response;
import org.openapitools.client.model.TokensGetPartnerRewardHistory200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokensApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TokensApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokensApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tokensApplyMissingPartnerOffersWithoutClaim
     * @param partnerApplicationId The partner application identifier. (required)
     * @param targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensApplyMissingPartnerOffersWithoutClaimCall(Integer partnerApplicationId, Long targetBnetMembershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Tokens/Partner/ApplyMissingOffers/{partnerApplicationId}/{targetBnetMembershipId}/"
            .replace("{" + "partnerApplicationId" + "}", localVarApiClient.escapeString(partnerApplicationId.toString()))
            .replace("{" + "targetBnetMembershipId" + "}", localVarApiClient.escapeString(targetBnetMembershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokensApplyMissingPartnerOffersWithoutClaimValidateBeforeCall(Integer partnerApplicationId, Long targetBnetMembershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerApplicationId' is set
        if (partnerApplicationId == null) {
            throw new ApiException("Missing the required parameter 'partnerApplicationId' when calling tokensApplyMissingPartnerOffersWithoutClaim(Async)");
        }

        // verify the required parameter 'targetBnetMembershipId' is set
        if (targetBnetMembershipId == null) {
            throw new ApiException("Missing the required parameter 'targetBnetMembershipId' when calling tokensApplyMissingPartnerOffersWithoutClaim(Async)");
        }

        return tokensApplyMissingPartnerOffersWithoutClaimCall(partnerApplicationId, targetBnetMembershipId, _callback);

    }

    /**
     * 
     * Apply a partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.
     * @param partnerApplicationId The partner application identifier. (required)
     * @param targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required. (required)
     * @return GroupV2GetUserClanInviteSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetUserClanInviteSetting200Response tokensApplyMissingPartnerOffersWithoutClaim(Integer partnerApplicationId, Long targetBnetMembershipId) throws ApiException {
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResp = tokensApplyMissingPartnerOffersWithoutClaimWithHttpInfo(partnerApplicationId, targetBnetMembershipId);
        return localVarResp.getData();
    }

    /**
     * 
     * Apply a partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.
     * @param partnerApplicationId The partner application identifier. (required)
     * @param targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required. (required)
     * @return ApiResponse&lt;GroupV2GetUserClanInviteSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetUserClanInviteSetting200Response> tokensApplyMissingPartnerOffersWithoutClaimWithHttpInfo(Integer partnerApplicationId, Long targetBnetMembershipId) throws ApiException {
        okhttp3.Call localVarCall = tokensApplyMissingPartnerOffersWithoutClaimValidateBeforeCall(partnerApplicationId, targetBnetMembershipId, null);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Apply a partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.
     * @param partnerApplicationId The partner application identifier. (required)
     * @param targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensApplyMissingPartnerOffersWithoutClaimAsync(Integer partnerApplicationId, Long targetBnetMembershipId, final ApiCallback<GroupV2GetUserClanInviteSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokensApplyMissingPartnerOffersWithoutClaimValidateBeforeCall(partnerApplicationId, targetBnetMembershipId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokensClaimPartnerOffer
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensClaimPartnerOfferCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Tokens/Partner/ClaimOffer/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokensClaimPartnerOfferValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return tokensClaimPartnerOfferCall(_callback);

    }

    /**
     * 
     * Claim a partner offer as the authenticated user.
     * @return GroupV2GetUserClanInviteSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetUserClanInviteSetting200Response tokensClaimPartnerOffer() throws ApiException {
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResp = tokensClaimPartnerOfferWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Claim a partner offer as the authenticated user.
     * @return ApiResponse&lt;GroupV2GetUserClanInviteSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetUserClanInviteSetting200Response> tokensClaimPartnerOfferWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tokensClaimPartnerOfferValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Claim a partner offer as the authenticated user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensClaimPartnerOfferAsync(final ApiCallback<GroupV2GetUserClanInviteSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokensClaimPartnerOfferValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokensForceDropsRepair
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensForceDropsRepairCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Tokens/Partner/ForceDropsRepair/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokensForceDropsRepairValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return tokensForceDropsRepairCall(_callback);

    }

    /**
     * 
     * Twitch Drops self-repair function - scans twitch for drops not marked as fulfilled and resyncs them.
     * @return GroupV2GetUserClanInviteSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetUserClanInviteSetting200Response tokensForceDropsRepair() throws ApiException {
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResp = tokensForceDropsRepairWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Twitch Drops self-repair function - scans twitch for drops not marked as fulfilled and resyncs them.
     * @return ApiResponse&lt;GroupV2GetUserClanInviteSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetUserClanInviteSetting200Response> tokensForceDropsRepairWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tokensForceDropsRepairValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Twitch Drops self-repair function - scans twitch for drops not marked as fulfilled and resyncs them.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensForceDropsRepairAsync(final ApiCallback<GroupV2GetUserClanInviteSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokensForceDropsRepairValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokensGetBungieRewardsForPlatformUser
     * @param membershipId users platform membershipId for requested user rewards. If not self, elevated permissions are required. (required)
     * @param membershipType The target Destiny 2 membership type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensGetBungieRewardsForPlatformUserCall(Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Tokens/Rewards/GetRewardsForPlatformUser/{membershipId}/{membershipType}/"
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokensGetBungieRewardsForPlatformUserValidateBeforeCall(Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling tokensGetBungieRewardsForPlatformUser(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling tokensGetBungieRewardsForPlatformUser(Async)");
        }

        return tokensGetBungieRewardsForPlatformUserCall(membershipId, membershipType, _callback);

    }

    /**
     * 
     * Returns the bungie rewards for the targeted user when a platform membership Id and Type are used.
     * @param membershipId users platform membershipId for requested user rewards. If not self, elevated permissions are required. (required)
     * @param membershipType The target Destiny 2 membership type. (required)
     * @return TokensGetBungieRewardsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public TokensGetBungieRewardsList200Response tokensGetBungieRewardsForPlatformUser(Long membershipId, Integer membershipType) throws ApiException {
        ApiResponse<TokensGetBungieRewardsList200Response> localVarResp = tokensGetBungieRewardsForPlatformUserWithHttpInfo(membershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the bungie rewards for the targeted user when a platform membership Id and Type are used.
     * @param membershipId users platform membershipId for requested user rewards. If not self, elevated permissions are required. (required)
     * @param membershipType The target Destiny 2 membership type. (required)
     * @return ApiResponse&lt;TokensGetBungieRewardsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokensGetBungieRewardsList200Response> tokensGetBungieRewardsForPlatformUserWithHttpInfo(Long membershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = tokensGetBungieRewardsForPlatformUserValidateBeforeCall(membershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<TokensGetBungieRewardsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the bungie rewards for the targeted user when a platform membership Id and Type are used.
     * @param membershipId users platform membershipId for requested user rewards. If not self, elevated permissions are required. (required)
     * @param membershipType The target Destiny 2 membership type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensGetBungieRewardsForPlatformUserAsync(Long membershipId, Integer membershipType, final ApiCallback<TokensGetBungieRewardsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokensGetBungieRewardsForPlatformUserValidateBeforeCall(membershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<TokensGetBungieRewardsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokensGetBungieRewardsForUser
     * @param membershipId bungie.net user membershipId for requested user rewards. If not self, elevated permissions are required. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensGetBungieRewardsForUserCall(Long membershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Tokens/Rewards/GetRewardsForUser/{membershipId}/"
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokensGetBungieRewardsForUserValidateBeforeCall(Long membershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling tokensGetBungieRewardsForUser(Async)");
        }

        return tokensGetBungieRewardsForUserCall(membershipId, _callback);

    }

    /**
     * 
     * Returns the bungie rewards for the targeted user.
     * @param membershipId bungie.net user membershipId for requested user rewards. If not self, elevated permissions are required. (required)
     * @return TokensGetBungieRewardsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public TokensGetBungieRewardsList200Response tokensGetBungieRewardsForUser(Long membershipId) throws ApiException {
        ApiResponse<TokensGetBungieRewardsList200Response> localVarResp = tokensGetBungieRewardsForUserWithHttpInfo(membershipId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the bungie rewards for the targeted user.
     * @param membershipId bungie.net user membershipId for requested user rewards. If not self, elevated permissions are required. (required)
     * @return ApiResponse&lt;TokensGetBungieRewardsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokensGetBungieRewardsList200Response> tokensGetBungieRewardsForUserWithHttpInfo(Long membershipId) throws ApiException {
        okhttp3.Call localVarCall = tokensGetBungieRewardsForUserValidateBeforeCall(membershipId, null);
        Type localVarReturnType = new TypeToken<TokensGetBungieRewardsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the bungie rewards for the targeted user.
     * @param membershipId bungie.net user membershipId for requested user rewards. If not self, elevated permissions are required. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensGetBungieRewardsForUserAsync(Long membershipId, final ApiCallback<TokensGetBungieRewardsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokensGetBungieRewardsForUserValidateBeforeCall(membershipId, _callback);
        Type localVarReturnType = new TypeToken<TokensGetBungieRewardsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokensGetBungieRewardsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensGetBungieRewardsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Tokens/Rewards/BungieRewards/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokensGetBungieRewardsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return tokensGetBungieRewardsListCall(_callback);

    }

    /**
     * 
     * Returns a list of the current bungie rewards
     * @return TokensGetBungieRewardsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public TokensGetBungieRewardsList200Response tokensGetBungieRewardsList() throws ApiException {
        ApiResponse<TokensGetBungieRewardsList200Response> localVarResp = tokensGetBungieRewardsListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of the current bungie rewards
     * @return ApiResponse&lt;TokensGetBungieRewardsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokensGetBungieRewardsList200Response> tokensGetBungieRewardsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tokensGetBungieRewardsListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TokensGetBungieRewardsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of the current bungie rewards
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensGetBungieRewardsListAsync(final ApiCallback<TokensGetBungieRewardsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokensGetBungieRewardsListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TokensGetBungieRewardsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokensGetPartnerOfferSkuHistory
     * @param partnerApplicationId The partner application identifier. (required)
     * @param targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensGetPartnerOfferSkuHistoryCall(Integer partnerApplicationId, Long targetBnetMembershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Tokens/Partner/History/{partnerApplicationId}/{targetBnetMembershipId}/"
            .replace("{" + "partnerApplicationId" + "}", localVarApiClient.escapeString(partnerApplicationId.toString()))
            .replace("{" + "targetBnetMembershipId" + "}", localVarApiClient.escapeString(targetBnetMembershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokensGetPartnerOfferSkuHistoryValidateBeforeCall(Integer partnerApplicationId, Long targetBnetMembershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerApplicationId' is set
        if (partnerApplicationId == null) {
            throw new ApiException("Missing the required parameter 'partnerApplicationId' when calling tokensGetPartnerOfferSkuHistory(Async)");
        }

        // verify the required parameter 'targetBnetMembershipId' is set
        if (targetBnetMembershipId == null) {
            throw new ApiException("Missing the required parameter 'targetBnetMembershipId' when calling tokensGetPartnerOfferSkuHistory(Async)");
        }

        return tokensGetPartnerOfferSkuHistoryCall(partnerApplicationId, targetBnetMembershipId, _callback);

    }

    /**
     * 
     * Returns the partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself.
     * @param partnerApplicationId The partner application identifier. (required)
     * @param targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required. (required)
     * @return TokensGetPartnerOfferSkuHistory200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public TokensGetPartnerOfferSkuHistory200Response tokensGetPartnerOfferSkuHistory(Integer partnerApplicationId, Long targetBnetMembershipId) throws ApiException {
        ApiResponse<TokensGetPartnerOfferSkuHistory200Response> localVarResp = tokensGetPartnerOfferSkuHistoryWithHttpInfo(partnerApplicationId, targetBnetMembershipId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself.
     * @param partnerApplicationId The partner application identifier. (required)
     * @param targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required. (required)
     * @return ApiResponse&lt;TokensGetPartnerOfferSkuHistory200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokensGetPartnerOfferSkuHistory200Response> tokensGetPartnerOfferSkuHistoryWithHttpInfo(Integer partnerApplicationId, Long targetBnetMembershipId) throws ApiException {
        okhttp3.Call localVarCall = tokensGetPartnerOfferSkuHistoryValidateBeforeCall(partnerApplicationId, targetBnetMembershipId, null);
        Type localVarReturnType = new TypeToken<TokensGetPartnerOfferSkuHistory200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself.
     * @param partnerApplicationId The partner application identifier. (required)
     * @param targetBnetMembershipId The bungie.net user to apply missing offers to. If not self, elevated permissions are required. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensGetPartnerOfferSkuHistoryAsync(Integer partnerApplicationId, Long targetBnetMembershipId, final ApiCallback<TokensGetPartnerOfferSkuHistory200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokensGetPartnerOfferSkuHistoryValidateBeforeCall(partnerApplicationId, targetBnetMembershipId, _callback);
        Type localVarReturnType = new TypeToken<TokensGetPartnerOfferSkuHistory200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tokensGetPartnerRewardHistory
     * @param partnerApplicationId The partner application identifier. (required)
     * @param targetBnetMembershipId The bungie.net user to return reward history for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensGetPartnerRewardHistoryCall(Integer partnerApplicationId, Long targetBnetMembershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Tokens/Partner/History/{targetBnetMembershipId}/Application/{partnerApplicationId}/"
            .replace("{" + "partnerApplicationId" + "}", localVarApiClient.escapeString(partnerApplicationId.toString()))
            .replace("{" + "targetBnetMembershipId" + "}", localVarApiClient.escapeString(targetBnetMembershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokensGetPartnerRewardHistoryValidateBeforeCall(Integer partnerApplicationId, Long targetBnetMembershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerApplicationId' is set
        if (partnerApplicationId == null) {
            throw new ApiException("Missing the required parameter 'partnerApplicationId' when calling tokensGetPartnerRewardHistory(Async)");
        }

        // verify the required parameter 'targetBnetMembershipId' is set
        if (targetBnetMembershipId == null) {
            throw new ApiException("Missing the required parameter 'targetBnetMembershipId' when calling tokensGetPartnerRewardHistory(Async)");
        }

        return tokensGetPartnerRewardHistoryCall(partnerApplicationId, targetBnetMembershipId, _callback);

    }

    /**
     * 
     * Returns the partner rewards history of the targeted user, both partner offers and Twitch drops.
     * @param partnerApplicationId The partner application identifier. (required)
     * @param targetBnetMembershipId The bungie.net user to return reward history for. (required)
     * @return TokensGetPartnerRewardHistory200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public TokensGetPartnerRewardHistory200Response tokensGetPartnerRewardHistory(Integer partnerApplicationId, Long targetBnetMembershipId) throws ApiException {
        ApiResponse<TokensGetPartnerRewardHistory200Response> localVarResp = tokensGetPartnerRewardHistoryWithHttpInfo(partnerApplicationId, targetBnetMembershipId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the partner rewards history of the targeted user, both partner offers and Twitch drops.
     * @param partnerApplicationId The partner application identifier. (required)
     * @param targetBnetMembershipId The bungie.net user to return reward history for. (required)
     * @return ApiResponse&lt;TokensGetPartnerRewardHistory200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokensGetPartnerRewardHistory200Response> tokensGetPartnerRewardHistoryWithHttpInfo(Integer partnerApplicationId, Long targetBnetMembershipId) throws ApiException {
        okhttp3.Call localVarCall = tokensGetPartnerRewardHistoryValidateBeforeCall(partnerApplicationId, targetBnetMembershipId, null);
        Type localVarReturnType = new TypeToken<TokensGetPartnerRewardHistory200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the partner rewards history of the targeted user, both partner offers and Twitch drops.
     * @param partnerApplicationId The partner application identifier. (required)
     * @param targetBnetMembershipId The bungie.net user to return reward history for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tokensGetPartnerRewardHistoryAsync(Integer partnerApplicationId, Long targetBnetMembershipId, final ApiCallback<TokensGetPartnerRewardHistory200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokensGetPartnerRewardHistoryValidateBeforeCall(partnerApplicationId, targetBnetMembershipId, _callback);
        Type localVarReturnType = new TypeToken<TokensGetPartnerRewardHistory200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
