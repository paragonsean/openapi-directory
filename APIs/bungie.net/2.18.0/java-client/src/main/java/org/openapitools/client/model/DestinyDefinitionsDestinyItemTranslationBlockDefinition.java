/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyGearArtArrangementReference;
import org.openapitools.client.model.DestinyDyeReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This Block defines the rendering data associated with the item, if any.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemTranslationBlockDefinition {
  public static final String SERIALIZED_NAME_ARRANGEMENTS = "arrangements";
  @SerializedName(SERIALIZED_NAME_ARRANGEMENTS)
  private List<DestinyDefinitionsDestinyGearArtArrangementReference> arrangements = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_DYES = "customDyes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DYES)
  private List<DestinyDyeReference> customDyes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_DYES = "defaultDyes";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DYES)
  private List<DestinyDyeReference> defaultDyes = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_GEOMETRY = "hasGeometry";
  @SerializedName(SERIALIZED_NAME_HAS_GEOMETRY)
  private Boolean hasGeometry;

  public static final String SERIALIZED_NAME_LOCKED_DYES = "lockedDyes";
  @SerializedName(SERIALIZED_NAME_LOCKED_DYES)
  private List<DestinyDyeReference> lockedDyes = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEAPON_PATTERN_HASH = "weaponPatternHash";
  @SerializedName(SERIALIZED_NAME_WEAPON_PATTERN_HASH)
  private Integer weaponPatternHash;

  public static final String SERIALIZED_NAME_WEAPON_PATTERN_IDENTIFIER = "weaponPatternIdentifier";
  @SerializedName(SERIALIZED_NAME_WEAPON_PATTERN_IDENTIFIER)
  private String weaponPatternIdentifier;

  public DestinyDefinitionsDestinyItemTranslationBlockDefinition() {
  }

  public DestinyDefinitionsDestinyItemTranslationBlockDefinition arrangements(List<DestinyDefinitionsDestinyGearArtArrangementReference> arrangements) {
    this.arrangements = arrangements;
    return this;
  }

  public DestinyDefinitionsDestinyItemTranslationBlockDefinition addArrangementsItem(DestinyDefinitionsDestinyGearArtArrangementReference arrangementsItem) {
    if (this.arrangements == null) {
      this.arrangements = new ArrayList<>();
    }
    this.arrangements.add(arrangementsItem);
    return this;
  }

  /**
   * Get arrangements
   * @return arrangements
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyGearArtArrangementReference> getArrangements() {
    return arrangements;
  }

  public void setArrangements(List<DestinyDefinitionsDestinyGearArtArrangementReference> arrangements) {
    this.arrangements = arrangements;
  }


  public DestinyDefinitionsDestinyItemTranslationBlockDefinition customDyes(List<DestinyDyeReference> customDyes) {
    this.customDyes = customDyes;
    return this;
  }

  public DestinyDefinitionsDestinyItemTranslationBlockDefinition addCustomDyesItem(DestinyDyeReference customDyesItem) {
    if (this.customDyes == null) {
      this.customDyes = new ArrayList<>();
    }
    this.customDyes.add(customDyesItem);
    return this;
  }

  /**
   * Get customDyes
   * @return customDyes
   */
  @javax.annotation.Nullable
  public List<DestinyDyeReference> getCustomDyes() {
    return customDyes;
  }

  public void setCustomDyes(List<DestinyDyeReference> customDyes) {
    this.customDyes = customDyes;
  }


  public DestinyDefinitionsDestinyItemTranslationBlockDefinition defaultDyes(List<DestinyDyeReference> defaultDyes) {
    this.defaultDyes = defaultDyes;
    return this;
  }

  public DestinyDefinitionsDestinyItemTranslationBlockDefinition addDefaultDyesItem(DestinyDyeReference defaultDyesItem) {
    if (this.defaultDyes == null) {
      this.defaultDyes = new ArrayList<>();
    }
    this.defaultDyes.add(defaultDyesItem);
    return this;
  }

  /**
   * Get defaultDyes
   * @return defaultDyes
   */
  @javax.annotation.Nullable
  public List<DestinyDyeReference> getDefaultDyes() {
    return defaultDyes;
  }

  public void setDefaultDyes(List<DestinyDyeReference> defaultDyes) {
    this.defaultDyes = defaultDyes;
  }


  public DestinyDefinitionsDestinyItemTranslationBlockDefinition hasGeometry(Boolean hasGeometry) {
    this.hasGeometry = hasGeometry;
    return this;
  }

  /**
   * Get hasGeometry
   * @return hasGeometry
   */
  @javax.annotation.Nullable
  public Boolean getHasGeometry() {
    return hasGeometry;
  }

  public void setHasGeometry(Boolean hasGeometry) {
    this.hasGeometry = hasGeometry;
  }


  public DestinyDefinitionsDestinyItemTranslationBlockDefinition lockedDyes(List<DestinyDyeReference> lockedDyes) {
    this.lockedDyes = lockedDyes;
    return this;
  }

  public DestinyDefinitionsDestinyItemTranslationBlockDefinition addLockedDyesItem(DestinyDyeReference lockedDyesItem) {
    if (this.lockedDyes == null) {
      this.lockedDyes = new ArrayList<>();
    }
    this.lockedDyes.add(lockedDyesItem);
    return this;
  }

  /**
   * Get lockedDyes
   * @return lockedDyes
   */
  @javax.annotation.Nullable
  public List<DestinyDyeReference> getLockedDyes() {
    return lockedDyes;
  }

  public void setLockedDyes(List<DestinyDyeReference> lockedDyes) {
    this.lockedDyes = lockedDyes;
  }


  public DestinyDefinitionsDestinyItemTranslationBlockDefinition weaponPatternHash(Integer weaponPatternHash) {
    this.weaponPatternHash = weaponPatternHash;
    return this;
  }

  /**
   * Get weaponPatternHash
   * @return weaponPatternHash
   */
  @javax.annotation.Nullable
  public Integer getWeaponPatternHash() {
    return weaponPatternHash;
  }

  public void setWeaponPatternHash(Integer weaponPatternHash) {
    this.weaponPatternHash = weaponPatternHash;
  }


  public DestinyDefinitionsDestinyItemTranslationBlockDefinition weaponPatternIdentifier(String weaponPatternIdentifier) {
    this.weaponPatternIdentifier = weaponPatternIdentifier;
    return this;
  }

  /**
   * Get weaponPatternIdentifier
   * @return weaponPatternIdentifier
   */
  @javax.annotation.Nullable
  public String getWeaponPatternIdentifier() {
    return weaponPatternIdentifier;
  }

  public void setWeaponPatternIdentifier(String weaponPatternIdentifier) {
    this.weaponPatternIdentifier = weaponPatternIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemTranslationBlockDefinition destinyDefinitionsDestinyItemTranslationBlockDefinition = (DestinyDefinitionsDestinyItemTranslationBlockDefinition) o;
    return Objects.equals(this.arrangements, destinyDefinitionsDestinyItemTranslationBlockDefinition.arrangements) &&
        Objects.equals(this.customDyes, destinyDefinitionsDestinyItemTranslationBlockDefinition.customDyes) &&
        Objects.equals(this.defaultDyes, destinyDefinitionsDestinyItemTranslationBlockDefinition.defaultDyes) &&
        Objects.equals(this.hasGeometry, destinyDefinitionsDestinyItemTranslationBlockDefinition.hasGeometry) &&
        Objects.equals(this.lockedDyes, destinyDefinitionsDestinyItemTranslationBlockDefinition.lockedDyes) &&
        Objects.equals(this.weaponPatternHash, destinyDefinitionsDestinyItemTranslationBlockDefinition.weaponPatternHash) &&
        Objects.equals(this.weaponPatternIdentifier, destinyDefinitionsDestinyItemTranslationBlockDefinition.weaponPatternIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrangements, customDyes, defaultDyes, hasGeometry, lockedDyes, weaponPatternHash, weaponPatternIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemTranslationBlockDefinition {\n");
    sb.append("    arrangements: ").append(toIndentedString(arrangements)).append("\n");
    sb.append("    customDyes: ").append(toIndentedString(customDyes)).append("\n");
    sb.append("    defaultDyes: ").append(toIndentedString(defaultDyes)).append("\n");
    sb.append("    hasGeometry: ").append(toIndentedString(hasGeometry)).append("\n");
    sb.append("    lockedDyes: ").append(toIndentedString(lockedDyes)).append("\n");
    sb.append("    weaponPatternHash: ").append(toIndentedString(weaponPatternHash)).append("\n");
    sb.append("    weaponPatternIdentifier: ").append(toIndentedString(weaponPatternIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrangements");
    openapiFields.add("customDyes");
    openapiFields.add("defaultDyes");
    openapiFields.add("hasGeometry");
    openapiFields.add("lockedDyes");
    openapiFields.add("weaponPatternHash");
    openapiFields.add("weaponPatternIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemTranslationBlockDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemTranslationBlockDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemTranslationBlockDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemTranslationBlockDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemTranslationBlockDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemTranslationBlockDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("arrangements") != null && !jsonObj.get("arrangements").isJsonNull()) {
        JsonArray jsonArrayarrangements = jsonObj.getAsJsonArray("arrangements");
        if (jsonArrayarrangements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("arrangements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `arrangements` to be an array in the JSON string but got `%s`", jsonObj.get("arrangements").toString()));
          }

          // validate the optional field `arrangements` (array)
          for (int i = 0; i < jsonArrayarrangements.size(); i++) {
            DestinyDefinitionsDestinyGearArtArrangementReference.validateJsonElement(jsonArrayarrangements.get(i));
          };
        }
      }
      if (jsonObj.get("customDyes") != null && !jsonObj.get("customDyes").isJsonNull()) {
        JsonArray jsonArraycustomDyes = jsonObj.getAsJsonArray("customDyes");
        if (jsonArraycustomDyes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customDyes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customDyes` to be an array in the JSON string but got `%s`", jsonObj.get("customDyes").toString()));
          }

          // validate the optional field `customDyes` (array)
          for (int i = 0; i < jsonArraycustomDyes.size(); i++) {
            DestinyDyeReference.validateJsonElement(jsonArraycustomDyes.get(i));
          };
        }
      }
      if (jsonObj.get("defaultDyes") != null && !jsonObj.get("defaultDyes").isJsonNull()) {
        JsonArray jsonArraydefaultDyes = jsonObj.getAsJsonArray("defaultDyes");
        if (jsonArraydefaultDyes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("defaultDyes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `defaultDyes` to be an array in the JSON string but got `%s`", jsonObj.get("defaultDyes").toString()));
          }

          // validate the optional field `defaultDyes` (array)
          for (int i = 0; i < jsonArraydefaultDyes.size(); i++) {
            DestinyDyeReference.validateJsonElement(jsonArraydefaultDyes.get(i));
          };
        }
      }
      if (jsonObj.get("lockedDyes") != null && !jsonObj.get("lockedDyes").isJsonNull()) {
        JsonArray jsonArraylockedDyes = jsonObj.getAsJsonArray("lockedDyes");
        if (jsonArraylockedDyes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lockedDyes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lockedDyes` to be an array in the JSON string but got `%s`", jsonObj.get("lockedDyes").toString()));
          }

          // validate the optional field `lockedDyes` (array)
          for (int i = 0; i < jsonArraylockedDyes.size(); i++) {
            DestinyDyeReference.validateJsonElement(jsonArraylockedDyes.get(i));
          };
        }
      }
      if ((jsonObj.get("weaponPatternIdentifier") != null && !jsonObj.get("weaponPatternIdentifier").isJsonNull()) && !jsonObj.get("weaponPatternIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weaponPatternIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weaponPatternIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemTranslationBlockDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemTranslationBlockDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemTranslationBlockDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemTranslationBlockDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemTranslationBlockDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemTranslationBlockDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemTranslationBlockDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemTranslationBlockDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemTranslationBlockDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemTranslationBlockDefinition
   */
  public static DestinyDefinitionsDestinyItemTranslationBlockDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemTranslationBlockDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemTranslationBlockDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

