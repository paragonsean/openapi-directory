/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sometimes, we have large sets of reusable plugs that are defined identically and thus can (and in some cases, are so large that they *must*) be shared across the places where they are used. These are the definitions for those reusable sets of plugs.    See DestinyItemSocketEntryDefinition.plugSource and reusablePlugSetHash for the relationship between these reusable plug sets and the sockets that leverage them (for starters, Emotes).   As of the release of Shadowkeep (Late 2019), these will begin to be sourced from game content directly - which means there will be many more of them, but it also means we may not get all data that we used to get for them.   DisplayProperties, in particular, will no longer be guaranteed to contain valid information. We will make a best effort to guess what ought to be populated there where possible, but it will be invalid for many/most plug sets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsSocketsDestinyPlugSetDefinition {
  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_IS_FAKE_PLUG_SET = "isFakePlugSet";
  @SerializedName(SERIALIZED_NAME_IS_FAKE_PLUG_SET)
  private Boolean isFakePlugSet;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_REUSABLE_PLUG_ITEMS = "reusablePlugItems";
  @SerializedName(SERIALIZED_NAME_REUSABLE_PLUG_ITEMS)
  private List<DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition> reusablePlugItems = new ArrayList<>();

  public DestinyDefinitionsSocketsDestinyPlugSetDefinition() {
  }

  public DestinyDefinitionsSocketsDestinyPlugSetDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * If you want to show these plugs in isolation, these are the display properties for them.
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsSocketsDestinyPlugSetDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsSocketsDestinyPlugSetDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsSocketsDestinyPlugSetDefinition isFakePlugSet(Boolean isFakePlugSet) {
    this.isFakePlugSet = isFakePlugSet;
    return this;
  }

  /**
   * Mostly for our debugging or reporting bugs, BNet is making \&quot;fake\&quot; plug sets in a desperate effort to reduce socket sizes.   If this is true, the plug set was generated by BNet: if it looks wrong, that&#39;s a good indicator that it&#39;s bungie.net that fucked this up.
   * @return isFakePlugSet
   */
  @javax.annotation.Nullable
  public Boolean getIsFakePlugSet() {
    return isFakePlugSet;
  }

  public void setIsFakePlugSet(Boolean isFakePlugSet) {
    this.isFakePlugSet = isFakePlugSet;
  }


  public DestinyDefinitionsSocketsDestinyPlugSetDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsSocketsDestinyPlugSetDefinition reusablePlugItems(List<DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition> reusablePlugItems) {
    this.reusablePlugItems = reusablePlugItems;
    return this;
  }

  public DestinyDefinitionsSocketsDestinyPlugSetDefinition addReusablePlugItemsItem(DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition reusablePlugItemsItem) {
    if (this.reusablePlugItems == null) {
      this.reusablePlugItems = new ArrayList<>();
    }
    this.reusablePlugItems.add(reusablePlugItemsItem);
    return this;
  }

  /**
   * This is a list of pre-determined plugs that can be plugged into this socket, without the character having the plug in their inventory.  If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.
   * @return reusablePlugItems
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition> getReusablePlugItems() {
    return reusablePlugItems;
  }

  public void setReusablePlugItems(List<DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition> reusablePlugItems) {
    this.reusablePlugItems = reusablePlugItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsSocketsDestinyPlugSetDefinition destinyDefinitionsSocketsDestinyPlugSetDefinition = (DestinyDefinitionsSocketsDestinyPlugSetDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsSocketsDestinyPlugSetDefinition.displayProperties) &&
        Objects.equals(this.hash, destinyDefinitionsSocketsDestinyPlugSetDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsSocketsDestinyPlugSetDefinition.index) &&
        Objects.equals(this.isFakePlugSet, destinyDefinitionsSocketsDestinyPlugSetDefinition.isFakePlugSet) &&
        Objects.equals(this.redacted, destinyDefinitionsSocketsDestinyPlugSetDefinition.redacted) &&
        Objects.equals(this.reusablePlugItems, destinyDefinitionsSocketsDestinyPlugSetDefinition.reusablePlugItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, hash, index, isFakePlugSet, redacted, reusablePlugItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsSocketsDestinyPlugSetDefinition {\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    isFakePlugSet: ").append(toIndentedString(isFakePlugSet)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    reusablePlugItems: ").append(toIndentedString(reusablePlugItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayProperties");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("isFakePlugSet");
    openapiFields.add("redacted");
    openapiFields.add("reusablePlugItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsSocketsDestinyPlugSetDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsSocketsDestinyPlugSetDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsSocketsDestinyPlugSetDefinition is not found in the empty JSON string", DestinyDefinitionsSocketsDestinyPlugSetDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsSocketsDestinyPlugSetDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsSocketsDestinyPlugSetDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      if (jsonObj.get("reusablePlugItems") != null && !jsonObj.get("reusablePlugItems").isJsonNull()) {
        JsonArray jsonArrayreusablePlugItems = jsonObj.getAsJsonArray("reusablePlugItems");
        if (jsonArrayreusablePlugItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reusablePlugItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reusablePlugItems` to be an array in the JSON string but got `%s`", jsonObj.get("reusablePlugItems").toString()));
          }

          // validate the optional field `reusablePlugItems` (array)
          for (int i = 0; i < jsonArrayreusablePlugItems.size(); i++) {
            DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition.validateJsonElement(jsonArrayreusablePlugItems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsSocketsDestinyPlugSetDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsSocketsDestinyPlugSetDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsSocketsDestinyPlugSetDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsSocketsDestinyPlugSetDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsSocketsDestinyPlugSetDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsSocketsDestinyPlugSetDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsSocketsDestinyPlugSetDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsSocketsDestinyPlugSetDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsSocketsDestinyPlugSetDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsSocketsDestinyPlugSetDefinition
   */
  public static DestinyDefinitionsSocketsDestinyPlugSetDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsSocketsDestinyPlugSetDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsSocketsDestinyPlugSetDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

