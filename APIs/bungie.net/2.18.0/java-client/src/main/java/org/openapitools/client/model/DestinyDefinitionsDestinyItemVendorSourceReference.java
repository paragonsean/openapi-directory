/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents that a vendor could sell this item, and provides a quick link to that vendor and sale item.   Note that we do not and cannot make a guarantee that the vendor will ever *actually* sell this item, only that the Vendor has a definition that indicates it *could* be sold.   Note also that a vendor may sell the same item in multiple \&quot;ways\&quot;, which means there may be multiple vendorItemIndexes for a single Vendor hash.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemVendorSourceReference {
  public static final String SERIALIZED_NAME_VENDOR_HASH = "vendorHash";
  @SerializedName(SERIALIZED_NAME_VENDOR_HASH)
  private Integer vendorHash;

  public static final String SERIALIZED_NAME_VENDOR_ITEM_INDEXES = "vendorItemIndexes";
  @SerializedName(SERIALIZED_NAME_VENDOR_ITEM_INDEXES)
  private List<Integer> vendorItemIndexes = new ArrayList<>();

  public DestinyDefinitionsDestinyItemVendorSourceReference() {
  }

  public DestinyDefinitionsDestinyItemVendorSourceReference vendorHash(Integer vendorHash) {
    this.vendorHash = vendorHash;
    return this;
  }

  /**
   * The identifier for the vendor that may sell this item.
   * @return vendorHash
   */
  @javax.annotation.Nullable
  public Integer getVendorHash() {
    return vendorHash;
  }

  public void setVendorHash(Integer vendorHash) {
    this.vendorHash = vendorHash;
  }


  public DestinyDefinitionsDestinyItemVendorSourceReference vendorItemIndexes(List<Integer> vendorItemIndexes) {
    this.vendorItemIndexes = vendorItemIndexes;
    return this;
  }

  public DestinyDefinitionsDestinyItemVendorSourceReference addVendorItemIndexesItem(Integer vendorItemIndexesItem) {
    if (this.vendorItemIndexes == null) {
      this.vendorItemIndexes = new ArrayList<>();
    }
    this.vendorItemIndexes.add(vendorItemIndexesItem);
    return this;
  }

  /**
   * The Vendor sale item indexes that represent the sale information for this item. The same vendor may sell an item in multiple \&quot;ways\&quot;, hence why this is a list. (for instance, a weapon may be \&quot;sold\&quot; as a reward in a quest, for Glimmer, and for Masterwork Cores: each of those ways would be represented by a different vendor sale item with a different index)
   * @return vendorItemIndexes
   */
  @javax.annotation.Nullable
  public List<Integer> getVendorItemIndexes() {
    return vendorItemIndexes;
  }

  public void setVendorItemIndexes(List<Integer> vendorItemIndexes) {
    this.vendorItemIndexes = vendorItemIndexes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemVendorSourceReference destinyDefinitionsDestinyItemVendorSourceReference = (DestinyDefinitionsDestinyItemVendorSourceReference) o;
    return Objects.equals(this.vendorHash, destinyDefinitionsDestinyItemVendorSourceReference.vendorHash) &&
        Objects.equals(this.vendorItemIndexes, destinyDefinitionsDestinyItemVendorSourceReference.vendorItemIndexes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vendorHash, vendorItemIndexes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemVendorSourceReference {\n");
    sb.append("    vendorHash: ").append(toIndentedString(vendorHash)).append("\n");
    sb.append("    vendorItemIndexes: ").append(toIndentedString(vendorItemIndexes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vendorHash");
    openapiFields.add("vendorItemIndexes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemVendorSourceReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemVendorSourceReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemVendorSourceReference is not found in the empty JSON string", DestinyDefinitionsDestinyItemVendorSourceReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemVendorSourceReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemVendorSourceReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("vendorItemIndexes") != null && !jsonObj.get("vendorItemIndexes").isJsonNull() && !jsonObj.get("vendorItemIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorItemIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("vendorItemIndexes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemVendorSourceReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemVendorSourceReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemVendorSourceReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemVendorSourceReference.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemVendorSourceReference>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemVendorSourceReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemVendorSourceReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemVendorSourceReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemVendorSourceReference
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemVendorSourceReference
   */
  public static DestinyDefinitionsDestinyItemVendorSourceReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemVendorSourceReference.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemVendorSourceReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

