/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DestinyArtifactsDestinyArtifactProfileScoped;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The set of progression-related information that applies at a Profile-wide level for your Destiny experience. This differs from the Jimi Hendrix Experience because there&#39;s less guitars on fire. Yet. #spoileralert?  This will include information such as Checklist info.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyComponentsProfilesDestinyProfileProgressionComponent {
  public static final String SERIALIZED_NAME_CHECKLISTS = "checklists";
  @SerializedName(SERIALIZED_NAME_CHECKLISTS)
  private Map<String, Map<String, Boolean>> checklists = new HashMap<>();

  public static final String SERIALIZED_NAME_SEASONAL_ARTIFACT = "seasonalArtifact";
  @SerializedName(SERIALIZED_NAME_SEASONAL_ARTIFACT)
  private DestinyArtifactsDestinyArtifactProfileScoped seasonalArtifact;

  public DestinyComponentsProfilesDestinyProfileProgressionComponent() {
  }

  public DestinyComponentsProfilesDestinyProfileProgressionComponent checklists(Map<String, Map<String, Boolean>> checklists) {
    this.checklists = checklists;
    return this;
  }

  public DestinyComponentsProfilesDestinyProfileProgressionComponent putChecklistsItem(String key, Map<String, Boolean> checklistsItem) {
    if (this.checklists == null) {
      this.checklists = new HashMap<>();
    }
    this.checklists.put(key, checklistsItem);
    return this;
  }

  /**
   * The set of checklists that can be examined on a profile-wide basis, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)  For each checklist returned, its value is itself a Dictionary keyed by the checklist&#39;s hash identifier with the value being a boolean indicating if it&#39;s been discovered yet.
   * @return checklists
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, Boolean>> getChecklists() {
    return checklists;
  }

  public void setChecklists(Map<String, Map<String, Boolean>> checklists) {
    this.checklists = checklists;
  }


  public DestinyComponentsProfilesDestinyProfileProgressionComponent seasonalArtifact(DestinyArtifactsDestinyArtifactProfileScoped seasonalArtifact) {
    this.seasonalArtifact = seasonalArtifact;
    return this;
  }

  /**
   * Data related to your progress on the current season&#39;s artifact that is the same across characters.
   * @return seasonalArtifact
   */
  @javax.annotation.Nullable
  public DestinyArtifactsDestinyArtifactProfileScoped getSeasonalArtifact() {
    return seasonalArtifact;
  }

  public void setSeasonalArtifact(DestinyArtifactsDestinyArtifactProfileScoped seasonalArtifact) {
    this.seasonalArtifact = seasonalArtifact;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyComponentsProfilesDestinyProfileProgressionComponent destinyComponentsProfilesDestinyProfileProgressionComponent = (DestinyComponentsProfilesDestinyProfileProgressionComponent) o;
    return Objects.equals(this.checklists, destinyComponentsProfilesDestinyProfileProgressionComponent.checklists) &&
        Objects.equals(this.seasonalArtifact, destinyComponentsProfilesDestinyProfileProgressionComponent.seasonalArtifact);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checklists, seasonalArtifact);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyComponentsProfilesDestinyProfileProgressionComponent {\n");
    sb.append("    checklists: ").append(toIndentedString(checklists)).append("\n");
    sb.append("    seasonalArtifact: ").append(toIndentedString(seasonalArtifact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checklists");
    openapiFields.add("seasonalArtifact");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyComponentsProfilesDestinyProfileProgressionComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyComponentsProfilesDestinyProfileProgressionComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyComponentsProfilesDestinyProfileProgressionComponent is not found in the empty JSON string", DestinyComponentsProfilesDestinyProfileProgressionComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyComponentsProfilesDestinyProfileProgressionComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyComponentsProfilesDestinyProfileProgressionComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `seasonalArtifact`
      if (jsonObj.get("seasonalArtifact") != null && !jsonObj.get("seasonalArtifact").isJsonNull()) {
        DestinyArtifactsDestinyArtifactProfileScoped.validateJsonElement(jsonObj.get("seasonalArtifact"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyComponentsProfilesDestinyProfileProgressionComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyComponentsProfilesDestinyProfileProgressionComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyComponentsProfilesDestinyProfileProgressionComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyComponentsProfilesDestinyProfileProgressionComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyComponentsProfilesDestinyProfileProgressionComponent>() {
           @Override
           public void write(JsonWriter out, DestinyComponentsProfilesDestinyProfileProgressionComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyComponentsProfilesDestinyProfileProgressionComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyComponentsProfilesDestinyProfileProgressionComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyComponentsProfilesDestinyProfileProgressionComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyComponentsProfilesDestinyProfileProgressionComponent
   */
  public static DestinyComponentsProfilesDestinyProfileProgressionComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyComponentsProfilesDestinyProfileProgressionComponent.class);
  }

  /**
   * Convert an instance of DestinyComponentsProfilesDestinyProfileProgressionComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

