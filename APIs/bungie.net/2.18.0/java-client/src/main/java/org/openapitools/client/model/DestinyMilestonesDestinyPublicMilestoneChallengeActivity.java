/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyMilestonesDestinyPublicMilestoneChallengeActivity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyMilestonesDestinyPublicMilestoneChallengeActivity {
  public static final String SERIALIZED_NAME_ACTIVITY_HASH = "activityHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_HASH)
  private Integer activityHash;

  public static final String SERIALIZED_NAME_BOOLEAN_ACTIVITY_OPTIONS = "booleanActivityOptions";
  @SerializedName(SERIALIZED_NAME_BOOLEAN_ACTIVITY_OPTIONS)
  private Map<String, Boolean> booleanActivityOptions = new HashMap<>();

  public static final String SERIALIZED_NAME_CHALLENGE_OBJECTIVE_HASHES = "challengeObjectiveHashes";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_OBJECTIVE_HASHES)
  private List<Integer> challengeObjectiveHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOADOUT_REQUIREMENT_INDEX = "loadoutRequirementIndex";
  @SerializedName(SERIALIZED_NAME_LOADOUT_REQUIREMENT_INDEX)
  private Integer loadoutRequirementIndex;

  public static final String SERIALIZED_NAME_MODIFIER_HASHES = "modifierHashes";
  @SerializedName(SERIALIZED_NAME_MODIFIER_HASHES)
  private List<Integer> modifierHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHASE_HASHES = "phaseHashes";
  @SerializedName(SERIALIZED_NAME_PHASE_HASHES)
  private List<Integer> phaseHashes = new ArrayList<>();

  public DestinyMilestonesDestinyPublicMilestoneChallengeActivity() {
  }

  public DestinyMilestonesDestinyPublicMilestoneChallengeActivity activityHash(Integer activityHash) {
    this.activityHash = activityHash;
    return this;
  }

  /**
   * Get activityHash
   * @return activityHash
   */
  @javax.annotation.Nullable
  public Integer getActivityHash() {
    return activityHash;
  }

  public void setActivityHash(Integer activityHash) {
    this.activityHash = activityHash;
  }


  public DestinyMilestonesDestinyPublicMilestoneChallengeActivity booleanActivityOptions(Map<String, Boolean> booleanActivityOptions) {
    this.booleanActivityOptions = booleanActivityOptions;
    return this;
  }

  public DestinyMilestonesDestinyPublicMilestoneChallengeActivity putBooleanActivityOptionsItem(String key, Boolean booleanActivityOptionsItem) {
    if (this.booleanActivityOptions == null) {
      this.booleanActivityOptions = new HashMap<>();
    }
    this.booleanActivityOptions.put(key, booleanActivityOptionsItem);
    return this;
  }

  /**
   * The set of activity options for this activity, keyed by an identifier that&#39;s unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).  As a concrete example of this data, the hashes you get for Raids will correspond to the currently active \&quot;Challenge Mode\&quot;.  We have no human readable information for this data, so it&#39;s up to you if you want to associate it with such info to show it.
   * @return booleanActivityOptions
   */
  @javax.annotation.Nullable
  public Map<String, Boolean> getBooleanActivityOptions() {
    return booleanActivityOptions;
  }

  public void setBooleanActivityOptions(Map<String, Boolean> booleanActivityOptions) {
    this.booleanActivityOptions = booleanActivityOptions;
  }


  public DestinyMilestonesDestinyPublicMilestoneChallengeActivity challengeObjectiveHashes(List<Integer> challengeObjectiveHashes) {
    this.challengeObjectiveHashes = challengeObjectiveHashes;
    return this;
  }

  public DestinyMilestonesDestinyPublicMilestoneChallengeActivity addChallengeObjectiveHashesItem(Integer challengeObjectiveHashesItem) {
    if (this.challengeObjectiveHashes == null) {
      this.challengeObjectiveHashes = new ArrayList<>();
    }
    this.challengeObjectiveHashes.add(challengeObjectiveHashesItem);
    return this;
  }

  /**
   * Get challengeObjectiveHashes
   * @return challengeObjectiveHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getChallengeObjectiveHashes() {
    return challengeObjectiveHashes;
  }

  public void setChallengeObjectiveHashes(List<Integer> challengeObjectiveHashes) {
    this.challengeObjectiveHashes = challengeObjectiveHashes;
  }


  public DestinyMilestonesDestinyPublicMilestoneChallengeActivity loadoutRequirementIndex(Integer loadoutRequirementIndex) {
    this.loadoutRequirementIndex = loadoutRequirementIndex;
    return this;
  }

  /**
   * If returned, this is the index into the DestinyActivityDefinition&#39;s \&quot;loadouts\&quot; property, indicating the currently active loadout requirements.
   * @return loadoutRequirementIndex
   */
  @javax.annotation.Nullable
  public Integer getLoadoutRequirementIndex() {
    return loadoutRequirementIndex;
  }

  public void setLoadoutRequirementIndex(Integer loadoutRequirementIndex) {
    this.loadoutRequirementIndex = loadoutRequirementIndex;
  }


  public DestinyMilestonesDestinyPublicMilestoneChallengeActivity modifierHashes(List<Integer> modifierHashes) {
    this.modifierHashes = modifierHashes;
    return this;
  }

  public DestinyMilestonesDestinyPublicMilestoneChallengeActivity addModifierHashesItem(Integer modifierHashesItem) {
    if (this.modifierHashes == null) {
      this.modifierHashes = new ArrayList<>();
    }
    this.modifierHashes.add(modifierHashesItem);
    return this;
  }

  /**
   * If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.  Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what&#39;s really live.
   * @return modifierHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getModifierHashes() {
    return modifierHashes;
  }

  public void setModifierHashes(List<Integer> modifierHashes) {
    this.modifierHashes = modifierHashes;
  }


  public DestinyMilestonesDestinyPublicMilestoneChallengeActivity phaseHashes(List<Integer> phaseHashes) {
    this.phaseHashes = phaseHashes;
    return this;
  }

  public DestinyMilestonesDestinyPublicMilestoneChallengeActivity addPhaseHashesItem(Integer phaseHashesItem) {
    if (this.phaseHashes == null) {
      this.phaseHashes = new ArrayList<>();
    }
    this.phaseHashes.add(phaseHashesItem);
    return this;
  }

  /**
   * The ordered list of phases for this activity, if any. Note that we have no human readable info for phases, nor any entities to relate them to: relating these hashes to something human readable is up to you unfortunately.
   * @return phaseHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getPhaseHashes() {
    return phaseHashes;
  }

  public void setPhaseHashes(List<Integer> phaseHashes) {
    this.phaseHashes = phaseHashes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyMilestonesDestinyPublicMilestoneChallengeActivity destinyMilestonesDestinyPublicMilestoneChallengeActivity = (DestinyMilestonesDestinyPublicMilestoneChallengeActivity) o;
    return Objects.equals(this.activityHash, destinyMilestonesDestinyPublicMilestoneChallengeActivity.activityHash) &&
        Objects.equals(this.booleanActivityOptions, destinyMilestonesDestinyPublicMilestoneChallengeActivity.booleanActivityOptions) &&
        Objects.equals(this.challengeObjectiveHashes, destinyMilestonesDestinyPublicMilestoneChallengeActivity.challengeObjectiveHashes) &&
        Objects.equals(this.loadoutRequirementIndex, destinyMilestonesDestinyPublicMilestoneChallengeActivity.loadoutRequirementIndex) &&
        Objects.equals(this.modifierHashes, destinyMilestonesDestinyPublicMilestoneChallengeActivity.modifierHashes) &&
        Objects.equals(this.phaseHashes, destinyMilestonesDestinyPublicMilestoneChallengeActivity.phaseHashes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityHash, booleanActivityOptions, challengeObjectiveHashes, loadoutRequirementIndex, modifierHashes, phaseHashes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyMilestonesDestinyPublicMilestoneChallengeActivity {\n");
    sb.append("    activityHash: ").append(toIndentedString(activityHash)).append("\n");
    sb.append("    booleanActivityOptions: ").append(toIndentedString(booleanActivityOptions)).append("\n");
    sb.append("    challengeObjectiveHashes: ").append(toIndentedString(challengeObjectiveHashes)).append("\n");
    sb.append("    loadoutRequirementIndex: ").append(toIndentedString(loadoutRequirementIndex)).append("\n");
    sb.append("    modifierHashes: ").append(toIndentedString(modifierHashes)).append("\n");
    sb.append("    phaseHashes: ").append(toIndentedString(phaseHashes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityHash");
    openapiFields.add("booleanActivityOptions");
    openapiFields.add("challengeObjectiveHashes");
    openapiFields.add("loadoutRequirementIndex");
    openapiFields.add("modifierHashes");
    openapiFields.add("phaseHashes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyMilestonesDestinyPublicMilestoneChallengeActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyMilestonesDestinyPublicMilestoneChallengeActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyMilestonesDestinyPublicMilestoneChallengeActivity is not found in the empty JSON string", DestinyMilestonesDestinyPublicMilestoneChallengeActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyMilestonesDestinyPublicMilestoneChallengeActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyMilestonesDestinyPublicMilestoneChallengeActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("challengeObjectiveHashes") != null && !jsonObj.get("challengeObjectiveHashes").isJsonNull() && !jsonObj.get("challengeObjectiveHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `challengeObjectiveHashes` to be an array in the JSON string but got `%s`", jsonObj.get("challengeObjectiveHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modifierHashes") != null && !jsonObj.get("modifierHashes").isJsonNull() && !jsonObj.get("modifierHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifierHashes` to be an array in the JSON string but got `%s`", jsonObj.get("modifierHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("phaseHashes") != null && !jsonObj.get("phaseHashes").isJsonNull() && !jsonObj.get("phaseHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `phaseHashes` to be an array in the JSON string but got `%s`", jsonObj.get("phaseHashes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyMilestonesDestinyPublicMilestoneChallengeActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyMilestonesDestinyPublicMilestoneChallengeActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyMilestonesDestinyPublicMilestoneChallengeActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyMilestonesDestinyPublicMilestoneChallengeActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyMilestonesDestinyPublicMilestoneChallengeActivity>() {
           @Override
           public void write(JsonWriter out, DestinyMilestonesDestinyPublicMilestoneChallengeActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyMilestonesDestinyPublicMilestoneChallengeActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyMilestonesDestinyPublicMilestoneChallengeActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyMilestonesDestinyPublicMilestoneChallengeActivity
   * @throws IOException if the JSON string is invalid with respect to DestinyMilestonesDestinyPublicMilestoneChallengeActivity
   */
  public static DestinyMilestonesDestinyPublicMilestoneChallengeActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyMilestonesDestinyPublicMilestoneChallengeActivity.class);
  }

  /**
   * Convert an instance of DestinyMilestonesDestinyPublicMilestoneChallengeActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

