/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorInteractionReplyDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Vendor Interaction is a dialog shown by the vendor other than sale items or transfer screens. The vendor is showing you something, and asking you to reply to it by choosing an option or reward.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyVendorInteractionDefinition {
  public static final String SERIALIZED_NAME_FLAVOR_LINE_ONE = "flavorLineOne";
  @SerializedName(SERIALIZED_NAME_FLAVOR_LINE_ONE)
  private String flavorLineOne;

  public static final String SERIALIZED_NAME_FLAVOR_LINE_TWO = "flavorLineTwo";
  @SerializedName(SERIALIZED_NAME_FLAVOR_LINE_TWO)
  private String flavorLineTwo;

  public static final String SERIALIZED_NAME_HEADER_DISPLAY_PROPERTIES = "headerDisplayProperties";
  @SerializedName(SERIALIZED_NAME_HEADER_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition headerDisplayProperties;

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  private String instructions;

  public static final String SERIALIZED_NAME_INTERACTION_INDEX = "interactionIndex";
  @SerializedName(SERIALIZED_NAME_INTERACTION_INDEX)
  private Integer interactionIndex;

  public static final String SERIALIZED_NAME_INTERACTION_TYPE = "interactionType";
  @SerializedName(SERIALIZED_NAME_INTERACTION_TYPE)
  private Integer interactionType;

  public static final String SERIALIZED_NAME_QUESTLINE_ITEM_HASH = "questlineItemHash";
  @SerializedName(SERIALIZED_NAME_QUESTLINE_ITEM_HASH)
  private Integer questlineItemHash;

  public static final String SERIALIZED_NAME_REPLIES = "replies";
  @SerializedName(SERIALIZED_NAME_REPLIES)
  private List<DestinyDefinitionsDestinyVendorInteractionReplyDefinition> replies = new ArrayList<>();

  public static final String SERIALIZED_NAME_REWARD_BLOCK_LABEL = "rewardBlockLabel";
  @SerializedName(SERIALIZED_NAME_REWARD_BLOCK_LABEL)
  private String rewardBlockLabel;

  public static final String SERIALIZED_NAME_REWARD_VENDOR_CATEGORY_INDEX = "rewardVendorCategoryIndex";
  @SerializedName(SERIALIZED_NAME_REWARD_VENDOR_CATEGORY_INDEX)
  private Integer rewardVendorCategoryIndex;

  public static final String SERIALIZED_NAME_SACK_INTERACTION_LIST = "sackInteractionList";
  @SerializedName(SERIALIZED_NAME_SACK_INTERACTION_LIST)
  private List<DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition> sackInteractionList = new ArrayList<>();

  public static final String SERIALIZED_NAME_UI_INTERACTION_TYPE = "uiInteractionType";
  @SerializedName(SERIALIZED_NAME_UI_INTERACTION_TYPE)
  private Integer uiInteractionType;

  public static final String SERIALIZED_NAME_VENDOR_CATEGORY_INDEX = "vendorCategoryIndex";
  @SerializedName(SERIALIZED_NAME_VENDOR_CATEGORY_INDEX)
  private Integer vendorCategoryIndex;

  public DestinyDefinitionsDestinyVendorInteractionDefinition() {
  }

  public DestinyDefinitionsDestinyVendorInteractionDefinition flavorLineOne(String flavorLineOne) {
    this.flavorLineOne = flavorLineOne;
    return this;
  }

  /**
   * If the vendor interaction has flavor text, this is some of it.
   * @return flavorLineOne
   */
  @javax.annotation.Nullable
  public String getFlavorLineOne() {
    return flavorLineOne;
  }

  public void setFlavorLineOne(String flavorLineOne) {
    this.flavorLineOne = flavorLineOne;
  }


  public DestinyDefinitionsDestinyVendorInteractionDefinition flavorLineTwo(String flavorLineTwo) {
    this.flavorLineTwo = flavorLineTwo;
    return this;
  }

  /**
   * If the vendor interaction has flavor text, this is the rest of it.
   * @return flavorLineTwo
   */
  @javax.annotation.Nullable
  public String getFlavorLineTwo() {
    return flavorLineTwo;
  }

  public void setFlavorLineTwo(String flavorLineTwo) {
    this.flavorLineTwo = flavorLineTwo;
  }


  public DestinyDefinitionsDestinyVendorInteractionDefinition headerDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition headerDisplayProperties) {
    this.headerDisplayProperties = headerDisplayProperties;
    return this;
  }

  /**
   * The header for the interaction dialog.
   * @return headerDisplayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getHeaderDisplayProperties() {
    return headerDisplayProperties;
  }

  public void setHeaderDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition headerDisplayProperties) {
    this.headerDisplayProperties = headerDisplayProperties;
  }


  public DestinyDefinitionsDestinyVendorInteractionDefinition instructions(String instructions) {
    this.instructions = instructions;
    return this;
  }

  /**
   * The localized text telling the player what to do when they see this dialog.
   * @return instructions
   */
  @javax.annotation.Nullable
  public String getInstructions() {
    return instructions;
  }

  public void setInstructions(String instructions) {
    this.instructions = instructions;
  }


  public DestinyDefinitionsDestinyVendorInteractionDefinition interactionIndex(Integer interactionIndex) {
    this.interactionIndex = interactionIndex;
    return this;
  }

  /**
   * The position of this interaction in its parent array. Note that this is NOT content agnostic, and should not be used as such.
   * @return interactionIndex
   */
  @javax.annotation.Nullable
  public Integer getInteractionIndex() {
    return interactionIndex;
  }

  public void setInteractionIndex(Integer interactionIndex) {
    this.interactionIndex = interactionIndex;
  }


  public DestinyDefinitionsDestinyVendorInteractionDefinition interactionType(Integer interactionType) {
    this.interactionType = interactionType;
    return this;
  }

  /**
   * The enumerated version of the possible UI hints for vendor interactions, which is a little easier to grok than the hash found in uiInteractionType.
   * @return interactionType
   */
  @javax.annotation.Nullable
  public Integer getInteractionType() {
    return interactionType;
  }

  public void setInteractionType(Integer interactionType) {
    this.interactionType = interactionType;
  }


  public DestinyDefinitionsDestinyVendorInteractionDefinition questlineItemHash(Integer questlineItemHash) {
    this.questlineItemHash = questlineItemHash;
    return this;
  }

  /**
   * If this interaction dialog is about a quest, this is the questline related to the interaction. You can use this to show the quest overview, or even the character&#39;s status with the quest if you use it to find the character&#39;s current Quest Step by checking their inventory against this questlineItemHash&#39;s DestinyInventoryItemDefinition.setData.
   * @return questlineItemHash
   */
  @javax.annotation.Nullable
  public Integer getQuestlineItemHash() {
    return questlineItemHash;
  }

  public void setQuestlineItemHash(Integer questlineItemHash) {
    this.questlineItemHash = questlineItemHash;
  }


  public DestinyDefinitionsDestinyVendorInteractionDefinition replies(List<DestinyDefinitionsDestinyVendorInteractionReplyDefinition> replies) {
    this.replies = replies;
    return this;
  }

  public DestinyDefinitionsDestinyVendorInteractionDefinition addRepliesItem(DestinyDefinitionsDestinyVendorInteractionReplyDefinition repliesItem) {
    if (this.replies == null) {
      this.replies = new ArrayList<>();
    }
    this.replies.add(repliesItem);
    return this;
  }

  /**
   * The potential replies that the user can make to the interaction.
   * @return replies
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyVendorInteractionReplyDefinition> getReplies() {
    return replies;
  }

  public void setReplies(List<DestinyDefinitionsDestinyVendorInteractionReplyDefinition> replies) {
    this.replies = replies;
  }


  public DestinyDefinitionsDestinyVendorInteractionDefinition rewardBlockLabel(String rewardBlockLabel) {
    this.rewardBlockLabel = rewardBlockLabel;
    return this;
  }

  /**
   * If this interaction is displaying rewards, this is the text to use for the header of the reward-displaying section of the interaction.
   * @return rewardBlockLabel
   */
  @javax.annotation.Nullable
  public String getRewardBlockLabel() {
    return rewardBlockLabel;
  }

  public void setRewardBlockLabel(String rewardBlockLabel) {
    this.rewardBlockLabel = rewardBlockLabel;
  }


  public DestinyDefinitionsDestinyVendorInteractionDefinition rewardVendorCategoryIndex(Integer rewardVendorCategoryIndex) {
    this.rewardVendorCategoryIndex = rewardVendorCategoryIndex;
    return this;
  }

  /**
   * If the vendor&#39;s reward list is sourced from one of his categories, this is the index into the category array of items to show.
   * @return rewardVendorCategoryIndex
   */
  @javax.annotation.Nullable
  public Integer getRewardVendorCategoryIndex() {
    return rewardVendorCategoryIndex;
  }

  public void setRewardVendorCategoryIndex(Integer rewardVendorCategoryIndex) {
    this.rewardVendorCategoryIndex = rewardVendorCategoryIndex;
  }


  public DestinyDefinitionsDestinyVendorInteractionDefinition sackInteractionList(List<DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition> sackInteractionList) {
    this.sackInteractionList = sackInteractionList;
    return this;
  }

  public DestinyDefinitionsDestinyVendorInteractionDefinition addSackInteractionListItem(DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition sackInteractionListItem) {
    if (this.sackInteractionList == null) {
      this.sackInteractionList = new ArrayList<>();
    }
    this.sackInteractionList.add(sackInteractionListItem);
    return this;
  }

  /**
   * If this interaction is meant to show you sacks, this is the list of types of sacks to be shown. If empty, the interaction is not meant to show sacks.
   * @return sackInteractionList
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition> getSackInteractionList() {
    return sackInteractionList;
  }

  public void setSackInteractionList(List<DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition> sackInteractionList) {
    this.sackInteractionList = sackInteractionList;
  }


  public DestinyDefinitionsDestinyVendorInteractionDefinition uiInteractionType(Integer uiInteractionType) {
    this.uiInteractionType = uiInteractionType;
    return this;
  }

  /**
   * A UI hint for the behavior of the interaction screen. This is useful to determine what type of interaction is occurring, such as a prompt to receive a rank up reward or a prompt to choose a reward for completing a quest. The hash isn&#39;t as useful as the Enum in retrospect, well what can you do. Try using interactionType instead.
   * @return uiInteractionType
   */
  @javax.annotation.Nullable
  public Integer getUiInteractionType() {
    return uiInteractionType;
  }

  public void setUiInteractionType(Integer uiInteractionType) {
    this.uiInteractionType = uiInteractionType;
  }


  public DestinyDefinitionsDestinyVendorInteractionDefinition vendorCategoryIndex(Integer vendorCategoryIndex) {
    this.vendorCategoryIndex = vendorCategoryIndex;
    return this;
  }

  /**
   * If &gt;&#x3D; 0, this is the category of sale items to show along with this interaction dialog.
   * @return vendorCategoryIndex
   */
  @javax.annotation.Nullable
  public Integer getVendorCategoryIndex() {
    return vendorCategoryIndex;
  }

  public void setVendorCategoryIndex(Integer vendorCategoryIndex) {
    this.vendorCategoryIndex = vendorCategoryIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyVendorInteractionDefinition destinyDefinitionsDestinyVendorInteractionDefinition = (DestinyDefinitionsDestinyVendorInteractionDefinition) o;
    return Objects.equals(this.flavorLineOne, destinyDefinitionsDestinyVendorInteractionDefinition.flavorLineOne) &&
        Objects.equals(this.flavorLineTwo, destinyDefinitionsDestinyVendorInteractionDefinition.flavorLineTwo) &&
        Objects.equals(this.headerDisplayProperties, destinyDefinitionsDestinyVendorInteractionDefinition.headerDisplayProperties) &&
        Objects.equals(this.instructions, destinyDefinitionsDestinyVendorInteractionDefinition.instructions) &&
        Objects.equals(this.interactionIndex, destinyDefinitionsDestinyVendorInteractionDefinition.interactionIndex) &&
        Objects.equals(this.interactionType, destinyDefinitionsDestinyVendorInteractionDefinition.interactionType) &&
        Objects.equals(this.questlineItemHash, destinyDefinitionsDestinyVendorInteractionDefinition.questlineItemHash) &&
        Objects.equals(this.replies, destinyDefinitionsDestinyVendorInteractionDefinition.replies) &&
        Objects.equals(this.rewardBlockLabel, destinyDefinitionsDestinyVendorInteractionDefinition.rewardBlockLabel) &&
        Objects.equals(this.rewardVendorCategoryIndex, destinyDefinitionsDestinyVendorInteractionDefinition.rewardVendorCategoryIndex) &&
        Objects.equals(this.sackInteractionList, destinyDefinitionsDestinyVendorInteractionDefinition.sackInteractionList) &&
        Objects.equals(this.uiInteractionType, destinyDefinitionsDestinyVendorInteractionDefinition.uiInteractionType) &&
        Objects.equals(this.vendorCategoryIndex, destinyDefinitionsDestinyVendorInteractionDefinition.vendorCategoryIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flavorLineOne, flavorLineTwo, headerDisplayProperties, instructions, interactionIndex, interactionType, questlineItemHash, replies, rewardBlockLabel, rewardVendorCategoryIndex, sackInteractionList, uiInteractionType, vendorCategoryIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyVendorInteractionDefinition {\n");
    sb.append("    flavorLineOne: ").append(toIndentedString(flavorLineOne)).append("\n");
    sb.append("    flavorLineTwo: ").append(toIndentedString(flavorLineTwo)).append("\n");
    sb.append("    headerDisplayProperties: ").append(toIndentedString(headerDisplayProperties)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    interactionIndex: ").append(toIndentedString(interactionIndex)).append("\n");
    sb.append("    interactionType: ").append(toIndentedString(interactionType)).append("\n");
    sb.append("    questlineItemHash: ").append(toIndentedString(questlineItemHash)).append("\n");
    sb.append("    replies: ").append(toIndentedString(replies)).append("\n");
    sb.append("    rewardBlockLabel: ").append(toIndentedString(rewardBlockLabel)).append("\n");
    sb.append("    rewardVendorCategoryIndex: ").append(toIndentedString(rewardVendorCategoryIndex)).append("\n");
    sb.append("    sackInteractionList: ").append(toIndentedString(sackInteractionList)).append("\n");
    sb.append("    uiInteractionType: ").append(toIndentedString(uiInteractionType)).append("\n");
    sb.append("    vendorCategoryIndex: ").append(toIndentedString(vendorCategoryIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("flavorLineOne");
    openapiFields.add("flavorLineTwo");
    openapiFields.add("headerDisplayProperties");
    openapiFields.add("instructions");
    openapiFields.add("interactionIndex");
    openapiFields.add("interactionType");
    openapiFields.add("questlineItemHash");
    openapiFields.add("replies");
    openapiFields.add("rewardBlockLabel");
    openapiFields.add("rewardVendorCategoryIndex");
    openapiFields.add("sackInteractionList");
    openapiFields.add("uiInteractionType");
    openapiFields.add("vendorCategoryIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyVendorInteractionDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyVendorInteractionDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyVendorInteractionDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyVendorInteractionDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyVendorInteractionDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyVendorInteractionDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("flavorLineOne") != null && !jsonObj.get("flavorLineOne").isJsonNull()) && !jsonObj.get("flavorLineOne").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flavorLineOne` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flavorLineOne").toString()));
      }
      if ((jsonObj.get("flavorLineTwo") != null && !jsonObj.get("flavorLineTwo").isJsonNull()) && !jsonObj.get("flavorLineTwo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flavorLineTwo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flavorLineTwo").toString()));
      }
      // validate the optional field `headerDisplayProperties`
      if (jsonObj.get("headerDisplayProperties") != null && !jsonObj.get("headerDisplayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("headerDisplayProperties"));
      }
      if ((jsonObj.get("instructions") != null && !jsonObj.get("instructions").isJsonNull()) && !jsonObj.get("instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructions").toString()));
      }
      if (jsonObj.get("replies") != null && !jsonObj.get("replies").isJsonNull()) {
        JsonArray jsonArrayreplies = jsonObj.getAsJsonArray("replies");
        if (jsonArrayreplies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("replies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `replies` to be an array in the JSON string but got `%s`", jsonObj.get("replies").toString()));
          }

          // validate the optional field `replies` (array)
          for (int i = 0; i < jsonArrayreplies.size(); i++) {
            DestinyDefinitionsDestinyVendorInteractionReplyDefinition.validateJsonElement(jsonArrayreplies.get(i));
          };
        }
      }
      if ((jsonObj.get("rewardBlockLabel") != null && !jsonObj.get("rewardBlockLabel").isJsonNull()) && !jsonObj.get("rewardBlockLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rewardBlockLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rewardBlockLabel").toString()));
      }
      if (jsonObj.get("sackInteractionList") != null && !jsonObj.get("sackInteractionList").isJsonNull()) {
        JsonArray jsonArraysackInteractionList = jsonObj.getAsJsonArray("sackInteractionList");
        if (jsonArraysackInteractionList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sackInteractionList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sackInteractionList` to be an array in the JSON string but got `%s`", jsonObj.get("sackInteractionList").toString()));
          }

          // validate the optional field `sackInteractionList` (array)
          for (int i = 0; i < jsonArraysackInteractionList.size(); i++) {
            DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition.validateJsonElement(jsonArraysackInteractionList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyVendorInteractionDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyVendorInteractionDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyVendorInteractionDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyVendorInteractionDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyVendorInteractionDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyVendorInteractionDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyVendorInteractionDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyVendorInteractionDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyVendorInteractionDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyVendorInteractionDefinition
   */
  public static DestinyDefinitionsDestinyVendorInteractionDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyVendorInteractionDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyVendorInteractionDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

