/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UserGeneralUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ForumForumRecruitmentDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ForumForumRecruitmentDetail {
  public static final String SERIALIZED_NAME_FIRETEAM = "Fireteam";
  @SerializedName(SERIALIZED_NAME_FIRETEAM)
  private List<UserGeneralUser> fireteam = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPROVED = "approved";
  @SerializedName(SERIALIZED_NAME_APPROVED)
  private Boolean approved;

  public static final String SERIALIZED_NAME_CONVERSATION_ID = "conversationId";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ID)
  private Long conversationId;

  public static final String SERIALIZED_NAME_INTENSITY = "intensity";
  @SerializedName(SERIALIZED_NAME_INTENSITY)
  private Integer intensity;

  public static final String SERIALIZED_NAME_KICKED_PLAYER_IDS = "kickedPlayerIds";
  @SerializedName(SERIALIZED_NAME_KICKED_PLAYER_IDS)
  private List<Long> kickedPlayerIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MICROPHONE_REQUIRED = "microphoneRequired";
  @SerializedName(SERIALIZED_NAME_MICROPHONE_REQUIRED)
  private Boolean microphoneRequired;

  public static final String SERIALIZED_NAME_PLAYER_SLOTS_REMAINING = "playerSlotsRemaining";
  @SerializedName(SERIALIZED_NAME_PLAYER_SLOTS_REMAINING)
  private Integer playerSlotsRemaining;

  public static final String SERIALIZED_NAME_PLAYER_SLOTS_TOTAL = "playerSlotsTotal";
  @SerializedName(SERIALIZED_NAME_PLAYER_SLOTS_TOTAL)
  private Integer playerSlotsTotal;

  public static final String SERIALIZED_NAME_TONE = "tone";
  @SerializedName(SERIALIZED_NAME_TONE)
  private Integer tone;

  public static final String SERIALIZED_NAME_TOPIC_ID = "topicId";
  @SerializedName(SERIALIZED_NAME_TOPIC_ID)
  private Long topicId;

  public ForumForumRecruitmentDetail() {
  }

  public ForumForumRecruitmentDetail fireteam(List<UserGeneralUser> fireteam) {
    this.fireteam = fireteam;
    return this;
  }

  public ForumForumRecruitmentDetail addFireteamItem(UserGeneralUser fireteamItem) {
    if (this.fireteam == null) {
      this.fireteam = new ArrayList<>();
    }
    this.fireteam.add(fireteamItem);
    return this;
  }

  /**
   * Get fireteam
   * @return fireteam
   */
  @javax.annotation.Nullable
  public List<UserGeneralUser> getFireteam() {
    return fireteam;
  }

  public void setFireteam(List<UserGeneralUser> fireteam) {
    this.fireteam = fireteam;
  }


  public ForumForumRecruitmentDetail approved(Boolean approved) {
    this.approved = approved;
    return this;
  }

  /**
   * Get approved
   * @return approved
   */
  @javax.annotation.Nullable
  public Boolean getApproved() {
    return approved;
  }

  public void setApproved(Boolean approved) {
    this.approved = approved;
  }


  public ForumForumRecruitmentDetail conversationId(Long conversationId) {
    this.conversationId = conversationId;
    return this;
  }

  /**
   * Get conversationId
   * @return conversationId
   */
  @javax.annotation.Nullable
  public Long getConversationId() {
    return conversationId;
  }

  public void setConversationId(Long conversationId) {
    this.conversationId = conversationId;
  }


  public ForumForumRecruitmentDetail intensity(Integer intensity) {
    this.intensity = intensity;
    return this;
  }

  /**
   * Get intensity
   * @return intensity
   */
  @javax.annotation.Nullable
  public Integer getIntensity() {
    return intensity;
  }

  public void setIntensity(Integer intensity) {
    this.intensity = intensity;
  }


  public ForumForumRecruitmentDetail kickedPlayerIds(List<Long> kickedPlayerIds) {
    this.kickedPlayerIds = kickedPlayerIds;
    return this;
  }

  public ForumForumRecruitmentDetail addKickedPlayerIdsItem(Long kickedPlayerIdsItem) {
    if (this.kickedPlayerIds == null) {
      this.kickedPlayerIds = new ArrayList<>();
    }
    this.kickedPlayerIds.add(kickedPlayerIdsItem);
    return this;
  }

  /**
   * Get kickedPlayerIds
   * @return kickedPlayerIds
   */
  @javax.annotation.Nullable
  public List<Long> getKickedPlayerIds() {
    return kickedPlayerIds;
  }

  public void setKickedPlayerIds(List<Long> kickedPlayerIds) {
    this.kickedPlayerIds = kickedPlayerIds;
  }


  public ForumForumRecruitmentDetail microphoneRequired(Boolean microphoneRequired) {
    this.microphoneRequired = microphoneRequired;
    return this;
  }

  /**
   * Get microphoneRequired
   * @return microphoneRequired
   */
  @javax.annotation.Nullable
  public Boolean getMicrophoneRequired() {
    return microphoneRequired;
  }

  public void setMicrophoneRequired(Boolean microphoneRequired) {
    this.microphoneRequired = microphoneRequired;
  }


  public ForumForumRecruitmentDetail playerSlotsRemaining(Integer playerSlotsRemaining) {
    this.playerSlotsRemaining = playerSlotsRemaining;
    return this;
  }

  /**
   * Get playerSlotsRemaining
   * @return playerSlotsRemaining
   */
  @javax.annotation.Nullable
  public Integer getPlayerSlotsRemaining() {
    return playerSlotsRemaining;
  }

  public void setPlayerSlotsRemaining(Integer playerSlotsRemaining) {
    this.playerSlotsRemaining = playerSlotsRemaining;
  }


  public ForumForumRecruitmentDetail playerSlotsTotal(Integer playerSlotsTotal) {
    this.playerSlotsTotal = playerSlotsTotal;
    return this;
  }

  /**
   * Get playerSlotsTotal
   * @return playerSlotsTotal
   */
  @javax.annotation.Nullable
  public Integer getPlayerSlotsTotal() {
    return playerSlotsTotal;
  }

  public void setPlayerSlotsTotal(Integer playerSlotsTotal) {
    this.playerSlotsTotal = playerSlotsTotal;
  }


  public ForumForumRecruitmentDetail tone(Integer tone) {
    this.tone = tone;
    return this;
  }

  /**
   * Get tone
   * @return tone
   */
  @javax.annotation.Nullable
  public Integer getTone() {
    return tone;
  }

  public void setTone(Integer tone) {
    this.tone = tone;
  }


  public ForumForumRecruitmentDetail topicId(Long topicId) {
    this.topicId = topicId;
    return this;
  }

  /**
   * Get topicId
   * @return topicId
   */
  @javax.annotation.Nullable
  public Long getTopicId() {
    return topicId;
  }

  public void setTopicId(Long topicId) {
    this.topicId = topicId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForumForumRecruitmentDetail forumForumRecruitmentDetail = (ForumForumRecruitmentDetail) o;
    return Objects.equals(this.fireteam, forumForumRecruitmentDetail.fireteam) &&
        Objects.equals(this.approved, forumForumRecruitmentDetail.approved) &&
        Objects.equals(this.conversationId, forumForumRecruitmentDetail.conversationId) &&
        Objects.equals(this.intensity, forumForumRecruitmentDetail.intensity) &&
        Objects.equals(this.kickedPlayerIds, forumForumRecruitmentDetail.kickedPlayerIds) &&
        Objects.equals(this.microphoneRequired, forumForumRecruitmentDetail.microphoneRequired) &&
        Objects.equals(this.playerSlotsRemaining, forumForumRecruitmentDetail.playerSlotsRemaining) &&
        Objects.equals(this.playerSlotsTotal, forumForumRecruitmentDetail.playerSlotsTotal) &&
        Objects.equals(this.tone, forumForumRecruitmentDetail.tone) &&
        Objects.equals(this.topicId, forumForumRecruitmentDetail.topicId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fireteam, approved, conversationId, intensity, kickedPlayerIds, microphoneRequired, playerSlotsRemaining, playerSlotsTotal, tone, topicId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForumForumRecruitmentDetail {\n");
    sb.append("    fireteam: ").append(toIndentedString(fireteam)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
    sb.append("    intensity: ").append(toIndentedString(intensity)).append("\n");
    sb.append("    kickedPlayerIds: ").append(toIndentedString(kickedPlayerIds)).append("\n");
    sb.append("    microphoneRequired: ").append(toIndentedString(microphoneRequired)).append("\n");
    sb.append("    playerSlotsRemaining: ").append(toIndentedString(playerSlotsRemaining)).append("\n");
    sb.append("    playerSlotsTotal: ").append(toIndentedString(playerSlotsTotal)).append("\n");
    sb.append("    tone: ").append(toIndentedString(tone)).append("\n");
    sb.append("    topicId: ").append(toIndentedString(topicId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Fireteam");
    openapiFields.add("approved");
    openapiFields.add("conversationId");
    openapiFields.add("intensity");
    openapiFields.add("kickedPlayerIds");
    openapiFields.add("microphoneRequired");
    openapiFields.add("playerSlotsRemaining");
    openapiFields.add("playerSlotsTotal");
    openapiFields.add("tone");
    openapiFields.add("topicId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ForumForumRecruitmentDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForumForumRecruitmentDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForumForumRecruitmentDetail is not found in the empty JSON string", ForumForumRecruitmentDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForumForumRecruitmentDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForumForumRecruitmentDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Fireteam") != null && !jsonObj.get("Fireteam").isJsonNull()) {
        JsonArray jsonArrayfireteam = jsonObj.getAsJsonArray("Fireteam");
        if (jsonArrayfireteam != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Fireteam").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Fireteam` to be an array in the JSON string but got `%s`", jsonObj.get("Fireteam").toString()));
          }

          // validate the optional field `Fireteam` (array)
          for (int i = 0; i < jsonArrayfireteam.size(); i++) {
            UserGeneralUser.validateJsonElement(jsonArrayfireteam.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("kickedPlayerIds") != null && !jsonObj.get("kickedPlayerIds").isJsonNull() && !jsonObj.get("kickedPlayerIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `kickedPlayerIds` to be an array in the JSON string but got `%s`", jsonObj.get("kickedPlayerIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForumForumRecruitmentDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForumForumRecruitmentDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForumForumRecruitmentDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForumForumRecruitmentDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ForumForumRecruitmentDetail>() {
           @Override
           public void write(JsonWriter out, ForumForumRecruitmentDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForumForumRecruitmentDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ForumForumRecruitmentDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ForumForumRecruitmentDetail
   * @throws IOException if the JSON string is invalid with respect to ForumForumRecruitmentDetail
   */
  public static ForumForumRecruitmentDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForumForumRecruitmentDetail.class);
  }

  /**
   * Convert an instance of ForumForumRecruitmentDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

