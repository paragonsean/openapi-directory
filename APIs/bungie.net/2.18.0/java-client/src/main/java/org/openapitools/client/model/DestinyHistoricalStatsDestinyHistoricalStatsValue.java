/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyHistoricalStatsDestinyHistoricalStatsValuePair;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyHistoricalStatsDestinyHistoricalStatsValue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyHistoricalStatsDestinyHistoricalStatsValue {
  public static final String SERIALIZED_NAME_ACTIVITY_ID = "activityId";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_ID)
  private Long activityId;

  public static final String SERIALIZED_NAME_BASIC = "basic";
  @SerializedName(SERIALIZED_NAME_BASIC)
  private DestinyHistoricalStatsDestinyHistoricalStatsValuePair basic;

  public static final String SERIALIZED_NAME_PGA = "pga";
  @SerializedName(SERIALIZED_NAME_PGA)
  private DestinyHistoricalStatsDestinyHistoricalStatsValuePair pga;

  public static final String SERIALIZED_NAME_STAT_ID = "statId";
  @SerializedName(SERIALIZED_NAME_STAT_ID)
  private String statId;

  public static final String SERIALIZED_NAME_WEIGHTED = "weighted";
  @SerializedName(SERIALIZED_NAME_WEIGHTED)
  private DestinyHistoricalStatsDestinyHistoricalStatsValuePair weighted;

  public DestinyHistoricalStatsDestinyHistoricalStatsValue() {
  }

  public DestinyHistoricalStatsDestinyHistoricalStatsValue activityId(Long activityId) {
    this.activityId = activityId;
    return this;
  }

  /**
   * When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
   * @return activityId
   */
  @javax.annotation.Nullable
  public Long getActivityId() {
    return activityId;
  }

  public void setActivityId(Long activityId) {
    this.activityId = activityId;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsValue basic(DestinyHistoricalStatsDestinyHistoricalStatsValuePair basic) {
    this.basic = basic;
    return this;
  }

  /**
   * Basic stat value.
   * @return basic
   */
  @javax.annotation.Nullable
  public DestinyHistoricalStatsDestinyHistoricalStatsValuePair getBasic() {
    return basic;
  }

  public void setBasic(DestinyHistoricalStatsDestinyHistoricalStatsValuePair basic) {
    this.basic = basic;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsValue pga(DestinyHistoricalStatsDestinyHistoricalStatsValuePair pga) {
    this.pga = pga;
    return this;
  }

  /**
   * Per game average for the statistic, if applicable
   * @return pga
   */
  @javax.annotation.Nullable
  public DestinyHistoricalStatsDestinyHistoricalStatsValuePair getPga() {
    return pga;
  }

  public void setPga(DestinyHistoricalStatsDestinyHistoricalStatsValuePair pga) {
    this.pga = pga;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsValue statId(String statId) {
    this.statId = statId;
    return this;
  }

  /**
   * Unique ID for this stat
   * @return statId
   */
  @javax.annotation.Nullable
  public String getStatId() {
    return statId;
  }

  public void setStatId(String statId) {
    this.statId = statId;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsValue weighted(DestinyHistoricalStatsDestinyHistoricalStatsValuePair weighted) {
    this.weighted = weighted;
    return this;
  }

  /**
   * Weighted value of the stat if a weight greater than 1 has been assigned.
   * @return weighted
   */
  @javax.annotation.Nullable
  public DestinyHistoricalStatsDestinyHistoricalStatsValuePair getWeighted() {
    return weighted;
  }

  public void setWeighted(DestinyHistoricalStatsDestinyHistoricalStatsValuePair weighted) {
    this.weighted = weighted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyHistoricalStatsDestinyHistoricalStatsValue destinyHistoricalStatsDestinyHistoricalStatsValue = (DestinyHistoricalStatsDestinyHistoricalStatsValue) o;
    return Objects.equals(this.activityId, destinyHistoricalStatsDestinyHistoricalStatsValue.activityId) &&
        Objects.equals(this.basic, destinyHistoricalStatsDestinyHistoricalStatsValue.basic) &&
        Objects.equals(this.pga, destinyHistoricalStatsDestinyHistoricalStatsValue.pga) &&
        Objects.equals(this.statId, destinyHistoricalStatsDestinyHistoricalStatsValue.statId) &&
        Objects.equals(this.weighted, destinyHistoricalStatsDestinyHistoricalStatsValue.weighted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityId, basic, pga, statId, weighted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyHistoricalStatsDestinyHistoricalStatsValue {\n");
    sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
    sb.append("    basic: ").append(toIndentedString(basic)).append("\n");
    sb.append("    pga: ").append(toIndentedString(pga)).append("\n");
    sb.append("    statId: ").append(toIndentedString(statId)).append("\n");
    sb.append("    weighted: ").append(toIndentedString(weighted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityId");
    openapiFields.add("basic");
    openapiFields.add("pga");
    openapiFields.add("statId");
    openapiFields.add("weighted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyHistoricalStatsDestinyHistoricalStatsValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyHistoricalStatsDestinyHistoricalStatsValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyHistoricalStatsDestinyHistoricalStatsValue is not found in the empty JSON string", DestinyHistoricalStatsDestinyHistoricalStatsValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyHistoricalStatsDestinyHistoricalStatsValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyHistoricalStatsDestinyHistoricalStatsValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `basic`
      if (jsonObj.get("basic") != null && !jsonObj.get("basic").isJsonNull()) {
        DestinyHistoricalStatsDestinyHistoricalStatsValuePair.validateJsonElement(jsonObj.get("basic"));
      }
      // validate the optional field `pga`
      if (jsonObj.get("pga") != null && !jsonObj.get("pga").isJsonNull()) {
        DestinyHistoricalStatsDestinyHistoricalStatsValuePair.validateJsonElement(jsonObj.get("pga"));
      }
      if ((jsonObj.get("statId") != null && !jsonObj.get("statId").isJsonNull()) && !jsonObj.get("statId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statId").toString()));
      }
      // validate the optional field `weighted`
      if (jsonObj.get("weighted") != null && !jsonObj.get("weighted").isJsonNull()) {
        DestinyHistoricalStatsDestinyHistoricalStatsValuePair.validateJsonElement(jsonObj.get("weighted"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyHistoricalStatsDestinyHistoricalStatsValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyHistoricalStatsDestinyHistoricalStatsValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyHistoricalStatsDestinyHistoricalStatsValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyHistoricalStatsDestinyHistoricalStatsValue.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyHistoricalStatsDestinyHistoricalStatsValue>() {
           @Override
           public void write(JsonWriter out, DestinyHistoricalStatsDestinyHistoricalStatsValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyHistoricalStatsDestinyHistoricalStatsValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyHistoricalStatsDestinyHistoricalStatsValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyHistoricalStatsDestinyHistoricalStatsValue
   * @throws IOException if the JSON string is invalid with respect to DestinyHistoricalStatsDestinyHistoricalStatsValue
   */
  public static DestinyHistoricalStatsDestinyHistoricalStatsValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyHistoricalStatsDestinyHistoricalStatsValue.class);
  }

  /**
   * Convert an instance of DestinyHistoricalStatsDestinyHistoricalStatsValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

