/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UserUserInfoCard;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The most essential summary information about a Profile (in Destiny 1, we called these \&quot;Accounts\&quot;).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyEntitiesProfilesDestinyProfileComponent {
  public static final String SERIALIZED_NAME_ACTIVE_EVENT_CARD_HASH = "activeEventCardHash";
  @SerializedName(SERIALIZED_NAME_ACTIVE_EVENT_CARD_HASH)
  private Integer activeEventCardHash;

  public static final String SERIALIZED_NAME_CHARACTER_IDS = "characterIds";
  @SerializedName(SERIALIZED_NAME_CHARACTER_IDS)
  private List<Long> characterIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_GUARDIAN_RANK = "currentGuardianRank";
  @SerializedName(SERIALIZED_NAME_CURRENT_GUARDIAN_RANK)
  private Integer currentGuardianRank;

  public static final String SERIALIZED_NAME_CURRENT_SEASON_HASH = "currentSeasonHash";
  @SerializedName(SERIALIZED_NAME_CURRENT_SEASON_HASH)
  private Integer currentSeasonHash;

  public static final String SERIALIZED_NAME_CURRENT_SEASON_REWARD_POWER_CAP = "currentSeasonRewardPowerCap";
  @SerializedName(SERIALIZED_NAME_CURRENT_SEASON_REWARD_POWER_CAP)
  private Integer currentSeasonRewardPowerCap;

  public static final String SERIALIZED_NAME_DATE_LAST_PLAYED = "dateLastPlayed";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_PLAYED)
  private OffsetDateTime dateLastPlayed;

  public static final String SERIALIZED_NAME_EVENT_CARD_HASHES_OWNED = "eventCardHashesOwned";
  @SerializedName(SERIALIZED_NAME_EVENT_CARD_HASHES_OWNED)
  private List<Integer> eventCardHashesOwned = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIFETIME_HIGHEST_GUARDIAN_RANK = "lifetimeHighestGuardianRank";
  @SerializedName(SERIALIZED_NAME_LIFETIME_HIGHEST_GUARDIAN_RANK)
  private Integer lifetimeHighestGuardianRank;

  public static final String SERIALIZED_NAME_SEASON_HASHES = "seasonHashes";
  @SerializedName(SERIALIZED_NAME_SEASON_HASHES)
  private List<Integer> seasonHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_INFO = "userInfo";
  @SerializedName(SERIALIZED_NAME_USER_INFO)
  private UserUserInfoCard userInfo;

  public static final String SERIALIZED_NAME_VERSIONS_OWNED = "versionsOwned";
  @SerializedName(SERIALIZED_NAME_VERSIONS_OWNED)
  private Integer versionsOwned;

  public DestinyEntitiesProfilesDestinyProfileComponent() {
  }

  public DestinyEntitiesProfilesDestinyProfileComponent activeEventCardHash(Integer activeEventCardHash) {
    this.activeEventCardHash = activeEventCardHash;
    return this;
  }

  /**
   * If populated, this is a reference to the event card that is currently active.
   * @return activeEventCardHash
   */
  @javax.annotation.Nullable
  public Integer getActiveEventCardHash() {
    return activeEventCardHash;
  }

  public void setActiveEventCardHash(Integer activeEventCardHash) {
    this.activeEventCardHash = activeEventCardHash;
  }


  public DestinyEntitiesProfilesDestinyProfileComponent characterIds(List<Long> characterIds) {
    this.characterIds = characterIds;
    return this;
  }

  public DestinyEntitiesProfilesDestinyProfileComponent addCharacterIdsItem(Long characterIdsItem) {
    if (this.characterIds == null) {
      this.characterIds = new ArrayList<>();
    }
    this.characterIds.add(characterIdsItem);
    return this;
  }

  /**
   * A list of the character IDs, for further querying on your part.
   * @return characterIds
   */
  @javax.annotation.Nullable
  public List<Long> getCharacterIds() {
    return characterIds;
  }

  public void setCharacterIds(List<Long> characterIds) {
    this.characterIds = characterIds;
  }


  public DestinyEntitiesProfilesDestinyProfileComponent currentGuardianRank(Integer currentGuardianRank) {
    this.currentGuardianRank = currentGuardianRank;
    return this;
  }

  /**
   * The &#39;current&#39; Guardian Rank value, which starts at rank 1.
   * @return currentGuardianRank
   */
  @javax.annotation.Nullable
  public Integer getCurrentGuardianRank() {
    return currentGuardianRank;
  }

  public void setCurrentGuardianRank(Integer currentGuardianRank) {
    this.currentGuardianRank = currentGuardianRank;
  }


  public DestinyEntitiesProfilesDestinyProfileComponent currentSeasonHash(Integer currentSeasonHash) {
    this.currentSeasonHash = currentSeasonHash;
    return this;
  }

  /**
   * If populated, this is a reference to the season that is currently active.
   * @return currentSeasonHash
   */
  @javax.annotation.Nullable
  public Integer getCurrentSeasonHash() {
    return currentSeasonHash;
  }

  public void setCurrentSeasonHash(Integer currentSeasonHash) {
    this.currentSeasonHash = currentSeasonHash;
  }


  public DestinyEntitiesProfilesDestinyProfileComponent currentSeasonRewardPowerCap(Integer currentSeasonRewardPowerCap) {
    this.currentSeasonRewardPowerCap = currentSeasonRewardPowerCap;
    return this;
  }

  /**
   * If populated, this is the reward power cap for the current season.
   * @return currentSeasonRewardPowerCap
   */
  @javax.annotation.Nullable
  public Integer getCurrentSeasonRewardPowerCap() {
    return currentSeasonRewardPowerCap;
  }

  public void setCurrentSeasonRewardPowerCap(Integer currentSeasonRewardPowerCap) {
    this.currentSeasonRewardPowerCap = currentSeasonRewardPowerCap;
  }


  public DestinyEntitiesProfilesDestinyProfileComponent dateLastPlayed(OffsetDateTime dateLastPlayed) {
    this.dateLastPlayed = dateLastPlayed;
    return this;
  }

  /**
   * The last time the user played with any character on this Profile.
   * @return dateLastPlayed
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateLastPlayed() {
    return dateLastPlayed;
  }

  public void setDateLastPlayed(OffsetDateTime dateLastPlayed) {
    this.dateLastPlayed = dateLastPlayed;
  }


  public DestinyEntitiesProfilesDestinyProfileComponent eventCardHashesOwned(List<Integer> eventCardHashesOwned) {
    this.eventCardHashesOwned = eventCardHashesOwned;
    return this;
  }

  public DestinyEntitiesProfilesDestinyProfileComponent addEventCardHashesOwnedItem(Integer eventCardHashesOwnedItem) {
    if (this.eventCardHashesOwned == null) {
      this.eventCardHashesOwned = new ArrayList<>();
    }
    this.eventCardHashesOwned.add(eventCardHashesOwnedItem);
    return this;
  }

  /**
   * A list of hashes for event cards that a profile owns. Unlike most values in versionsOwned, these stay with the profile across all platforms.
   * @return eventCardHashesOwned
   */
  @javax.annotation.Nullable
  public List<Integer> getEventCardHashesOwned() {
    return eventCardHashesOwned;
  }

  public void setEventCardHashesOwned(List<Integer> eventCardHashesOwned) {
    this.eventCardHashesOwned = eventCardHashesOwned;
  }


  public DestinyEntitiesProfilesDestinyProfileComponent lifetimeHighestGuardianRank(Integer lifetimeHighestGuardianRank) {
    this.lifetimeHighestGuardianRank = lifetimeHighestGuardianRank;
    return this;
  }

  /**
   * The &#39;lifetime highest&#39; Guardian Rank value, which starts at rank 1.
   * @return lifetimeHighestGuardianRank
   */
  @javax.annotation.Nullable
  public Integer getLifetimeHighestGuardianRank() {
    return lifetimeHighestGuardianRank;
  }

  public void setLifetimeHighestGuardianRank(Integer lifetimeHighestGuardianRank) {
    this.lifetimeHighestGuardianRank = lifetimeHighestGuardianRank;
  }


  public DestinyEntitiesProfilesDestinyProfileComponent seasonHashes(List<Integer> seasonHashes) {
    this.seasonHashes = seasonHashes;
    return this;
  }

  public DestinyEntitiesProfilesDestinyProfileComponent addSeasonHashesItem(Integer seasonHashesItem) {
    if (this.seasonHashes == null) {
      this.seasonHashes = new ArrayList<>();
    }
    this.seasonHashes.add(seasonHashesItem);
    return this;
  }

  /**
   * A list of seasons that this profile owns. Unlike versionsOwned, these stay with the profile across Platforms, and thus will be valid.   It turns out that Stadia Pro subscriptions will give access to seasons but only while playing on Stadia and with an active subscription. So some users (users who have Stadia Pro but choose to play on some other platform) won&#39;t see these as available: it will be whatever seasons are available for the platform on which they last played.
   * @return seasonHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getSeasonHashes() {
    return seasonHashes;
  }

  public void setSeasonHashes(List<Integer> seasonHashes) {
    this.seasonHashes = seasonHashes;
  }


  public DestinyEntitiesProfilesDestinyProfileComponent userInfo(UserUserInfoCard userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  /**
   * If you need to render the Profile (their platform name, icon, etc...) somewhere, this property contains that information.
   * @return userInfo
   */
  @javax.annotation.Nullable
  public UserUserInfoCard getUserInfo() {
    return userInfo;
  }

  public void setUserInfo(UserUserInfoCard userInfo) {
    this.userInfo = userInfo;
  }


  public DestinyEntitiesProfilesDestinyProfileComponent versionsOwned(Integer versionsOwned) {
    this.versionsOwned = versionsOwned;
    return this;
  }

  /**
   * If you want to know what expansions they own, this will contain that data.   IMPORTANT: This field may not return the data you&#39;re interested in for Cross-Saved users. It returns the last ownership data we saw for this account - which is to say, what they&#39;ve purchased on the platform on which they last played, which now could be a different platform.   If you don&#39;t care about per-platform ownership and only care about whatever platform it seems they are playing on most recently, then this should be \&quot;good enough.\&quot; Otherwise, this should be considered deprecated. We do not have a good alternative to provide at this time with platform specific ownership data for DLC.
   * @return versionsOwned
   */
  @javax.annotation.Nullable
  public Integer getVersionsOwned() {
    return versionsOwned;
  }

  public void setVersionsOwned(Integer versionsOwned) {
    this.versionsOwned = versionsOwned;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesProfilesDestinyProfileComponent destinyEntitiesProfilesDestinyProfileComponent = (DestinyEntitiesProfilesDestinyProfileComponent) o;
    return Objects.equals(this.activeEventCardHash, destinyEntitiesProfilesDestinyProfileComponent.activeEventCardHash) &&
        Objects.equals(this.characterIds, destinyEntitiesProfilesDestinyProfileComponent.characterIds) &&
        Objects.equals(this.currentGuardianRank, destinyEntitiesProfilesDestinyProfileComponent.currentGuardianRank) &&
        Objects.equals(this.currentSeasonHash, destinyEntitiesProfilesDestinyProfileComponent.currentSeasonHash) &&
        Objects.equals(this.currentSeasonRewardPowerCap, destinyEntitiesProfilesDestinyProfileComponent.currentSeasonRewardPowerCap) &&
        Objects.equals(this.dateLastPlayed, destinyEntitiesProfilesDestinyProfileComponent.dateLastPlayed) &&
        Objects.equals(this.eventCardHashesOwned, destinyEntitiesProfilesDestinyProfileComponent.eventCardHashesOwned) &&
        Objects.equals(this.lifetimeHighestGuardianRank, destinyEntitiesProfilesDestinyProfileComponent.lifetimeHighestGuardianRank) &&
        Objects.equals(this.seasonHashes, destinyEntitiesProfilesDestinyProfileComponent.seasonHashes) &&
        Objects.equals(this.userInfo, destinyEntitiesProfilesDestinyProfileComponent.userInfo) &&
        Objects.equals(this.versionsOwned, destinyEntitiesProfilesDestinyProfileComponent.versionsOwned);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeEventCardHash, characterIds, currentGuardianRank, currentSeasonHash, currentSeasonRewardPowerCap, dateLastPlayed, eventCardHashesOwned, lifetimeHighestGuardianRank, seasonHashes, userInfo, versionsOwned);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesProfilesDestinyProfileComponent {\n");
    sb.append("    activeEventCardHash: ").append(toIndentedString(activeEventCardHash)).append("\n");
    sb.append("    characterIds: ").append(toIndentedString(characterIds)).append("\n");
    sb.append("    currentGuardianRank: ").append(toIndentedString(currentGuardianRank)).append("\n");
    sb.append("    currentSeasonHash: ").append(toIndentedString(currentSeasonHash)).append("\n");
    sb.append("    currentSeasonRewardPowerCap: ").append(toIndentedString(currentSeasonRewardPowerCap)).append("\n");
    sb.append("    dateLastPlayed: ").append(toIndentedString(dateLastPlayed)).append("\n");
    sb.append("    eventCardHashesOwned: ").append(toIndentedString(eventCardHashesOwned)).append("\n");
    sb.append("    lifetimeHighestGuardianRank: ").append(toIndentedString(lifetimeHighestGuardianRank)).append("\n");
    sb.append("    seasonHashes: ").append(toIndentedString(seasonHashes)).append("\n");
    sb.append("    userInfo: ").append(toIndentedString(userInfo)).append("\n");
    sb.append("    versionsOwned: ").append(toIndentedString(versionsOwned)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeEventCardHash");
    openapiFields.add("characterIds");
    openapiFields.add("currentGuardianRank");
    openapiFields.add("currentSeasonHash");
    openapiFields.add("currentSeasonRewardPowerCap");
    openapiFields.add("dateLastPlayed");
    openapiFields.add("eventCardHashesOwned");
    openapiFields.add("lifetimeHighestGuardianRank");
    openapiFields.add("seasonHashes");
    openapiFields.add("userInfo");
    openapiFields.add("versionsOwned");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyEntitiesProfilesDestinyProfileComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyEntitiesProfilesDestinyProfileComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyEntitiesProfilesDestinyProfileComponent is not found in the empty JSON string", DestinyEntitiesProfilesDestinyProfileComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyEntitiesProfilesDestinyProfileComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyEntitiesProfilesDestinyProfileComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("characterIds") != null && !jsonObj.get("characterIds").isJsonNull() && !jsonObj.get("characterIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `characterIds` to be an array in the JSON string but got `%s`", jsonObj.get("characterIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("eventCardHashesOwned") != null && !jsonObj.get("eventCardHashesOwned").isJsonNull() && !jsonObj.get("eventCardHashesOwned").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventCardHashesOwned` to be an array in the JSON string but got `%s`", jsonObj.get("eventCardHashesOwned").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("seasonHashes") != null && !jsonObj.get("seasonHashes").isJsonNull() && !jsonObj.get("seasonHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `seasonHashes` to be an array in the JSON string but got `%s`", jsonObj.get("seasonHashes").toString()));
      }
      // validate the optional field `userInfo`
      if (jsonObj.get("userInfo") != null && !jsonObj.get("userInfo").isJsonNull()) {
        UserUserInfoCard.validateJsonElement(jsonObj.get("userInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyEntitiesProfilesDestinyProfileComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyEntitiesProfilesDestinyProfileComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyEntitiesProfilesDestinyProfileComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyEntitiesProfilesDestinyProfileComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyEntitiesProfilesDestinyProfileComponent>() {
           @Override
           public void write(JsonWriter out, DestinyEntitiesProfilesDestinyProfileComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyEntitiesProfilesDestinyProfileComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyEntitiesProfilesDestinyProfileComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyEntitiesProfilesDestinyProfileComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyEntitiesProfilesDestinyProfileComponent
   */
  public static DestinyEntitiesProfilesDestinyProfileComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyEntitiesProfilesDestinyProfileComponent.class);
  }

  /**
   * Convert an instance of DestinyEntitiesProfilesDestinyProfileComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

