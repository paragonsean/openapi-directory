/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsSeasonsDestinySeasonPassDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsSeasonsDestinySeasonPassDefinition {
  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_PRESTIGE_PROGRESSION_HASH = "prestigeProgressionHash";
  @SerializedName(SERIALIZED_NAME_PRESTIGE_PROGRESSION_HASH)
  private Integer prestigeProgressionHash;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_REWARD_PROGRESSION_HASH = "rewardProgressionHash";
  @SerializedName(SERIALIZED_NAME_REWARD_PROGRESSION_HASH)
  private Integer rewardProgressionHash;

  public DestinyDefinitionsSeasonsDestinySeasonPassDefinition() {
  }

  public DestinyDefinitionsSeasonsDestinySeasonPassDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsSeasonsDestinySeasonPassDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsSeasonsDestinySeasonPassDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsSeasonsDestinySeasonPassDefinition prestigeProgressionHash(Integer prestigeProgressionHash) {
    this.prestigeProgressionHash = prestigeProgressionHash;
    return this;
  }

  /**
   * I know what you&#39;re thinking, but I promise we&#39;re not going to duplicate and drown you. Instead, we&#39;re giving you sweet, sweet power bonuses.   Prestige progression is further progression that you can make on the Season pass after you gain max ranks, that will ultimately increase your power/light level over the theoretical limit.
   * @return prestigeProgressionHash
   */
  @javax.annotation.Nullable
  public Integer getPrestigeProgressionHash() {
    return prestigeProgressionHash;
  }

  public void setPrestigeProgressionHash(Integer prestigeProgressionHash) {
    this.prestigeProgressionHash = prestigeProgressionHash;
  }


  public DestinyDefinitionsSeasonsDestinySeasonPassDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsSeasonsDestinySeasonPassDefinition rewardProgressionHash(Integer rewardProgressionHash) {
    this.rewardProgressionHash = rewardProgressionHash;
    return this;
  }

  /**
   * This is the progression definition related to the progression for the initial levels 1-100 that provide item rewards for the Season pass. Further experience after you reach the limit is provided in the \&quot;Prestige\&quot; progression referred to by prestigeProgressionHash.
   * @return rewardProgressionHash
   */
  @javax.annotation.Nullable
  public Integer getRewardProgressionHash() {
    return rewardProgressionHash;
  }

  public void setRewardProgressionHash(Integer rewardProgressionHash) {
    this.rewardProgressionHash = rewardProgressionHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsSeasonsDestinySeasonPassDefinition destinyDefinitionsSeasonsDestinySeasonPassDefinition = (DestinyDefinitionsSeasonsDestinySeasonPassDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsSeasonsDestinySeasonPassDefinition.displayProperties) &&
        Objects.equals(this.hash, destinyDefinitionsSeasonsDestinySeasonPassDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsSeasonsDestinySeasonPassDefinition.index) &&
        Objects.equals(this.prestigeProgressionHash, destinyDefinitionsSeasonsDestinySeasonPassDefinition.prestigeProgressionHash) &&
        Objects.equals(this.redacted, destinyDefinitionsSeasonsDestinySeasonPassDefinition.redacted) &&
        Objects.equals(this.rewardProgressionHash, destinyDefinitionsSeasonsDestinySeasonPassDefinition.rewardProgressionHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, hash, index, prestigeProgressionHash, redacted, rewardProgressionHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsSeasonsDestinySeasonPassDefinition {\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    prestigeProgressionHash: ").append(toIndentedString(prestigeProgressionHash)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    rewardProgressionHash: ").append(toIndentedString(rewardProgressionHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayProperties");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("prestigeProgressionHash");
    openapiFields.add("redacted");
    openapiFields.add("rewardProgressionHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsSeasonsDestinySeasonPassDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsSeasonsDestinySeasonPassDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsSeasonsDestinySeasonPassDefinition is not found in the empty JSON string", DestinyDefinitionsSeasonsDestinySeasonPassDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsSeasonsDestinySeasonPassDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsSeasonsDestinySeasonPassDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsSeasonsDestinySeasonPassDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsSeasonsDestinySeasonPassDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsSeasonsDestinySeasonPassDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsSeasonsDestinySeasonPassDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsSeasonsDestinySeasonPassDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsSeasonsDestinySeasonPassDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsSeasonsDestinySeasonPassDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsSeasonsDestinySeasonPassDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsSeasonsDestinySeasonPassDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsSeasonsDestinySeasonPassDefinition
   */
  public static DestinyDefinitionsSeasonsDestinySeasonPassDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsSeasonsDestinySeasonPassDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsSeasonsDestinySeasonPassDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

