/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DestinyBaseItemComponentSetOfuint32;
import org.openapitools.client.model.DestinyItemComponentSetOfint64;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyCharacterComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyCraftablesComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyInventoryComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyKiosksComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent;
import org.openapitools.client.model.DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyInventoryComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyKiosksComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyMetricsComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyPlatformSilverComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyPlugSetsComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyPresentationNodesComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyProfileCollectiblesComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyProfileComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyProfileProgressionComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyProfileRecordsComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyProfileTransitoryComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinySocialCommendationsComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyStringVariablesComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyVendorReceiptsComponent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response for GetDestinyProfile, with components for character and item-level data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyResponsesDestinyProfileResponse {
  public static final String SERIALIZED_NAME_CHARACTER_ACTIVITIES = "characterActivities";
  @SerializedName(SERIALIZED_NAME_CHARACTER_ACTIVITIES)
  private DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent characterActivities;

  public static final String SERIALIZED_NAME_CHARACTER_COLLECTIBLES = "characterCollectibles";
  @SerializedName(SERIALIZED_NAME_CHARACTER_COLLECTIBLES)
  private DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent characterCollectibles;

  public static final String SERIALIZED_NAME_CHARACTER_CRAFTABLES = "characterCraftables";
  @SerializedName(SERIALIZED_NAME_CHARACTER_CRAFTABLES)
  private DictionaryComponentResponseOfint64AndDestinyCraftablesComponent characterCraftables;

  public static final String SERIALIZED_NAME_CHARACTER_CURRENCY_LOOKUPS = "characterCurrencyLookups";
  @SerializedName(SERIALIZED_NAME_CHARACTER_CURRENCY_LOOKUPS)
  private DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent characterCurrencyLookups;

  public static final String SERIALIZED_NAME_CHARACTER_EQUIPMENT = "characterEquipment";
  @SerializedName(SERIALIZED_NAME_CHARACTER_EQUIPMENT)
  private DictionaryComponentResponseOfint64AndDestinyInventoryComponent characterEquipment;

  public static final String SERIALIZED_NAME_CHARACTER_INVENTORIES = "characterInventories";
  @SerializedName(SERIALIZED_NAME_CHARACTER_INVENTORIES)
  private DictionaryComponentResponseOfint64AndDestinyInventoryComponent characterInventories;

  public static final String SERIALIZED_NAME_CHARACTER_KIOSKS = "characterKiosks";
  @SerializedName(SERIALIZED_NAME_CHARACTER_KIOSKS)
  private DictionaryComponentResponseOfint64AndDestinyKiosksComponent characterKiosks;

  public static final String SERIALIZED_NAME_CHARACTER_LOADOUTS = "characterLoadouts";
  @SerializedName(SERIALIZED_NAME_CHARACTER_LOADOUTS)
  private DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent characterLoadouts;

  public static final String SERIALIZED_NAME_CHARACTER_PLUG_SETS = "characterPlugSets";
  @SerializedName(SERIALIZED_NAME_CHARACTER_PLUG_SETS)
  private DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent characterPlugSets;

  public static final String SERIALIZED_NAME_CHARACTER_PRESENTATION_NODES = "characterPresentationNodes";
  @SerializedName(SERIALIZED_NAME_CHARACTER_PRESENTATION_NODES)
  private DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent characterPresentationNodes;

  public static final String SERIALIZED_NAME_CHARACTER_PROGRESSIONS = "characterProgressions";
  @SerializedName(SERIALIZED_NAME_CHARACTER_PROGRESSIONS)
  private DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent characterProgressions;

  public static final String SERIALIZED_NAME_CHARACTER_RECORDS = "characterRecords";
  @SerializedName(SERIALIZED_NAME_CHARACTER_RECORDS)
  private DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent characterRecords;

  public static final String SERIALIZED_NAME_CHARACTER_RENDER_DATA = "characterRenderData";
  @SerializedName(SERIALIZED_NAME_CHARACTER_RENDER_DATA)
  private DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent characterRenderData;

  public static final String SERIALIZED_NAME_CHARACTER_STRING_VARIABLES = "characterStringVariables";
  @SerializedName(SERIALIZED_NAME_CHARACTER_STRING_VARIABLES)
  private DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent characterStringVariables;

  public static final String SERIALIZED_NAME_CHARACTER_UNINSTANCED_ITEM_COMPONENTS = "characterUninstancedItemComponents";
  @SerializedName(SERIALIZED_NAME_CHARACTER_UNINSTANCED_ITEM_COMPONENTS)
  private Map<String, DestinyBaseItemComponentSetOfuint32> characterUninstancedItemComponents = new HashMap<>();

  public static final String SERIALIZED_NAME_CHARACTERS = "characters";
  @SerializedName(SERIALIZED_NAME_CHARACTERS)
  private DictionaryComponentResponseOfint64AndDestinyCharacterComponent characters;

  public static final String SERIALIZED_NAME_ITEM_COMPONENTS = "itemComponents";
  @SerializedName(SERIALIZED_NAME_ITEM_COMPONENTS)
  private DestinyItemComponentSetOfint64 itemComponents;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private SingleComponentResponseOfDestinyMetricsComponent metrics;

  public static final String SERIALIZED_NAME_PLATFORM_SILVER = "platformSilver";
  @SerializedName(SERIALIZED_NAME_PLATFORM_SILVER)
  private SingleComponentResponseOfDestinyPlatformSilverComponent platformSilver;

  public static final String SERIALIZED_NAME_PROFILE = "profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private SingleComponentResponseOfDestinyProfileComponent profile;

  public static final String SERIALIZED_NAME_PROFILE_COLLECTIBLES = "profileCollectibles";
  @SerializedName(SERIALIZED_NAME_PROFILE_COLLECTIBLES)
  private SingleComponentResponseOfDestinyProfileCollectiblesComponent profileCollectibles;

  public static final String SERIALIZED_NAME_PROFILE_COMMENDATIONS = "profileCommendations";
  @SerializedName(SERIALIZED_NAME_PROFILE_COMMENDATIONS)
  private SingleComponentResponseOfDestinySocialCommendationsComponent profileCommendations;

  public static final String SERIALIZED_NAME_PROFILE_CURRENCIES = "profileCurrencies";
  @SerializedName(SERIALIZED_NAME_PROFILE_CURRENCIES)
  private SingleComponentResponseOfDestinyInventoryComponent profileCurrencies;

  public static final String SERIALIZED_NAME_PROFILE_INVENTORY = "profileInventory";
  @SerializedName(SERIALIZED_NAME_PROFILE_INVENTORY)
  private SingleComponentResponseOfDestinyInventoryComponent profileInventory;

  public static final String SERIALIZED_NAME_PROFILE_KIOSKS = "profileKiosks";
  @SerializedName(SERIALIZED_NAME_PROFILE_KIOSKS)
  private SingleComponentResponseOfDestinyKiosksComponent profileKiosks;

  public static final String SERIALIZED_NAME_PROFILE_PLUG_SETS = "profilePlugSets";
  @SerializedName(SERIALIZED_NAME_PROFILE_PLUG_SETS)
  private SingleComponentResponseOfDestinyPlugSetsComponent profilePlugSets;

  public static final String SERIALIZED_NAME_PROFILE_PRESENTATION_NODES = "profilePresentationNodes";
  @SerializedName(SERIALIZED_NAME_PROFILE_PRESENTATION_NODES)
  private SingleComponentResponseOfDestinyPresentationNodesComponent profilePresentationNodes;

  public static final String SERIALIZED_NAME_PROFILE_PROGRESSION = "profileProgression";
  @SerializedName(SERIALIZED_NAME_PROFILE_PROGRESSION)
  private SingleComponentResponseOfDestinyProfileProgressionComponent profileProgression;

  public static final String SERIALIZED_NAME_PROFILE_RECORDS = "profileRecords";
  @SerializedName(SERIALIZED_NAME_PROFILE_RECORDS)
  private SingleComponentResponseOfDestinyProfileRecordsComponent profileRecords;

  public static final String SERIALIZED_NAME_PROFILE_STRING_VARIABLES = "profileStringVariables";
  @SerializedName(SERIALIZED_NAME_PROFILE_STRING_VARIABLES)
  private SingleComponentResponseOfDestinyStringVariablesComponent profileStringVariables;

  public static final String SERIALIZED_NAME_PROFILE_TRANSITORY_DATA = "profileTransitoryData";
  @SerializedName(SERIALIZED_NAME_PROFILE_TRANSITORY_DATA)
  private SingleComponentResponseOfDestinyProfileTransitoryComponent profileTransitoryData;

  public static final String SERIALIZED_NAME_RESPONSE_MINTED_TIMESTAMP = "responseMintedTimestamp";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MINTED_TIMESTAMP)
  private OffsetDateTime responseMintedTimestamp;

  public static final String SERIALIZED_NAME_SECONDARY_COMPONENTS_MINTED_TIMESTAMP = "secondaryComponentsMintedTimestamp";
  @SerializedName(SERIALIZED_NAME_SECONDARY_COMPONENTS_MINTED_TIMESTAMP)
  private OffsetDateTime secondaryComponentsMintedTimestamp;

  public static final String SERIALIZED_NAME_VENDOR_RECEIPTS = "vendorReceipts";
  @SerializedName(SERIALIZED_NAME_VENDOR_RECEIPTS)
  private SingleComponentResponseOfDestinyVendorReceiptsComponent vendorReceipts;

  public DestinyResponsesDestinyProfileResponse() {
  }

  public DestinyResponsesDestinyProfileResponse characterActivities(DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent characterActivities) {
    this.characterActivities = characterActivities;
    return this;
  }

  /**
   * Character activity data - the activities available to this character and its status, keyed by the Character&#39;s Id.  COMPONENT TYPE: CharacterActivities
   * @return characterActivities
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent getCharacterActivities() {
    return characterActivities;
  }

  public void setCharacterActivities(DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent characterActivities) {
    this.characterActivities = characterActivities;
  }


  public DestinyResponsesDestinyProfileResponse characterCollectibles(DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent characterCollectibles) {
    this.characterCollectibles = characterCollectibles;
    return this;
  }

  /**
   * COMPONENT TYPE: Collectibles
   * @return characterCollectibles
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent getCharacterCollectibles() {
    return characterCollectibles;
  }

  public void setCharacterCollectibles(DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent characterCollectibles) {
    this.characterCollectibles = characterCollectibles;
  }


  public DestinyResponsesDestinyProfileResponse characterCraftables(DictionaryComponentResponseOfint64AndDestinyCraftablesComponent characterCraftables) {
    this.characterCraftables = characterCraftables;
    return this;
  }

  /**
   * COMPONENT TYPE: Craftables
   * @return characterCraftables
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyCraftablesComponent getCharacterCraftables() {
    return characterCraftables;
  }

  public void setCharacterCraftables(DictionaryComponentResponseOfint64AndDestinyCraftablesComponent characterCraftables) {
    this.characterCraftables = characterCraftables;
  }


  public DestinyResponsesDestinyProfileResponse characterCurrencyLookups(DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent characterCurrencyLookups) {
    this.characterCurrencyLookups = characterCurrencyLookups;
    return this;
  }

  /**
   * A \&quot;lookup\&quot; convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups
   * @return characterCurrencyLookups
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent getCharacterCurrencyLookups() {
    return characterCurrencyLookups;
  }

  public void setCharacterCurrencyLookups(DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent characterCurrencyLookups) {
    this.characterCurrencyLookups = characterCurrencyLookups;
  }


  public DestinyResponsesDestinyProfileResponse characterEquipment(DictionaryComponentResponseOfint64AndDestinyInventoryComponent characterEquipment) {
    this.characterEquipment = characterEquipment;
    return this;
  }

  /**
   * The character&#39;s equipped items, keyed by the Character&#39;s Id.  COMPONENT TYPE: CharacterEquipment
   * @return characterEquipment
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyInventoryComponent getCharacterEquipment() {
    return characterEquipment;
  }

  public void setCharacterEquipment(DictionaryComponentResponseOfint64AndDestinyInventoryComponent characterEquipment) {
    this.characterEquipment = characterEquipment;
  }


  public DestinyResponsesDestinyProfileResponse characterInventories(DictionaryComponentResponseOfint64AndDestinyInventoryComponent characterInventories) {
    this.characterInventories = characterInventories;
    return this;
  }

  /**
   * The character-level non-equipped inventory items, keyed by the Character&#39;s Id.  COMPONENT TYPE: CharacterInventories
   * @return characterInventories
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyInventoryComponent getCharacterInventories() {
    return characterInventories;
  }

  public void setCharacterInventories(DictionaryComponentResponseOfint64AndDestinyInventoryComponent characterInventories) {
    this.characterInventories = characterInventories;
  }


  public DestinyResponsesDestinyProfileResponse characterKiosks(DictionaryComponentResponseOfint64AndDestinyKiosksComponent characterKiosks) {
    this.characterKiosks = characterKiosks;
    return this;
  }

  /**
   * Items available from Kiosks that are available to a specific character as opposed to the account as a whole. It must be combined with data from the profileKiosks property to get a full picture of the character&#39;s available items to check out of a kiosk.  This component returns information about what Kiosk items are available to you on a *Character* level. Usually, kiosk items will be earned for the entire Profile (all characters) at once. To find those, look in the profileKiosks property.  COMPONENT TYPE: Kiosks
   * @return characterKiosks
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyKiosksComponent getCharacterKiosks() {
    return characterKiosks;
  }

  public void setCharacterKiosks(DictionaryComponentResponseOfint64AndDestinyKiosksComponent characterKiosks) {
    this.characterKiosks = characterKiosks;
  }


  public DestinyResponsesDestinyProfileResponse characterLoadouts(DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent characterLoadouts) {
    this.characterLoadouts = characterLoadouts;
    return this;
  }

  /**
   * The character loadouts, keyed by the Character&#39;s Id.  COMPONENT TYPE: CharacterLoadouts
   * @return characterLoadouts
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent getCharacterLoadouts() {
    return characterLoadouts;
  }

  public void setCharacterLoadouts(DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent characterLoadouts) {
    this.characterLoadouts = characterLoadouts;
  }


  public DestinyResponsesDestinyProfileResponse characterPlugSets(DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent characterPlugSets) {
    this.characterPlugSets = characterPlugSets;
    return this;
  }

  /**
   * When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states, per character, that are character-scoped.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets
   * @return characterPlugSets
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent getCharacterPlugSets() {
    return characterPlugSets;
  }

  public void setCharacterPlugSets(DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent characterPlugSets) {
    this.characterPlugSets = characterPlugSets;
  }


  public DestinyResponsesDestinyProfileResponse characterPresentationNodes(DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent characterPresentationNodes) {
    this.characterPresentationNodes = characterPresentationNodes;
    return this;
  }

  /**
   * COMPONENT TYPE: PresentationNodes
   * @return characterPresentationNodes
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent getCharacterPresentationNodes() {
    return characterPresentationNodes;
  }

  public void setCharacterPresentationNodes(DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent characterPresentationNodes) {
    this.characterPresentationNodes = characterPresentationNodes;
  }


  public DestinyResponsesDestinyProfileResponse characterProgressions(DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent characterProgressions) {
    this.characterProgressions = characterProgressions;
    return this;
  }

  /**
   * Character-level progression data, keyed by the Character&#39;s Id.  COMPONENT TYPE: CharacterProgressions
   * @return characterProgressions
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent getCharacterProgressions() {
    return characterProgressions;
  }

  public void setCharacterProgressions(DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent characterProgressions) {
    this.characterProgressions = characterProgressions;
  }


  public DestinyResponsesDestinyProfileResponse characterRecords(DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent characterRecords) {
    this.characterRecords = characterRecords;
    return this;
  }

  /**
   * COMPONENT TYPE: Records
   * @return characterRecords
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent getCharacterRecords() {
    return characterRecords;
  }

  public void setCharacterRecords(DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent characterRecords) {
    this.characterRecords = characterRecords;
  }


  public DestinyResponsesDestinyProfileResponse characterRenderData(DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent characterRenderData) {
    this.characterRenderData = characterRenderData;
    return this;
  }

  /**
   * Character rendering data - a minimal set of info needed to render a character in 3D - keyed by the Character&#39;s Id.  COMPONENT TYPE: CharacterRenderData
   * @return characterRenderData
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent getCharacterRenderData() {
    return characterRenderData;
  }

  public void setCharacterRenderData(DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent characterRenderData) {
    this.characterRenderData = characterRenderData;
  }


  public DestinyResponsesDestinyProfileResponse characterStringVariables(DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent characterStringVariables) {
    this.characterStringVariables = characterStringVariables;
    return this;
  }

  /**
   * COMPONENT TYPE: StringVariables
   * @return characterStringVariables
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent getCharacterStringVariables() {
    return characterStringVariables;
  }

  public void setCharacterStringVariables(DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent characterStringVariables) {
    this.characterStringVariables = characterStringVariables;
  }


  public DestinyResponsesDestinyProfileResponse characterUninstancedItemComponents(Map<String, DestinyBaseItemComponentSetOfuint32> characterUninstancedItemComponents) {
    this.characterUninstancedItemComponents = characterUninstancedItemComponents;
    return this;
  }

  public DestinyResponsesDestinyProfileResponse putCharacterUninstancedItemComponentsItem(String key, DestinyBaseItemComponentSetOfuint32 characterUninstancedItemComponentsItem) {
    if (this.characterUninstancedItemComponents == null) {
      this.characterUninstancedItemComponents = new HashMap<>();
    }
    this.characterUninstancedItemComponents.put(key, characterUninstancedItemComponentsItem);
    return this;
  }

  /**
   * Do you ever get the feeling that a system was designed *too* flexibly? That it can be used in so many different ways that you end up being unable to provide an easy to use abstraction for the mess that&#39;s happening under the surface?  Let&#39;s talk about character-specific data that might be related to items without instances. These two statements are totally unrelated, I promise.  At some point during D2, it was decided that items - such as Bounties - could be given to characters and *not* have instance data, but that *could* display and even use relevant state information on your account and character.  Up to now, any item that had meaningful dependencies on character or account state had to be instanced, and thus \&quot;itemComponents\&quot; was all that you needed: it was keyed by item&#39;s instance IDs and provided the stateful information you needed inside.  Unfortunately, we don&#39;t live in such a magical world anymore. This is information held on a per-character basis about non-instanced items that the characters have in their inventory - or that reference character-specific state information even if it&#39;s in Account-level inventory - and the values related to that item&#39;s state in relation to the given character.  To give a concrete example, look at a Moments of Triumph bounty. They exist in a character&#39;s inventory, and show/care about a character&#39;s progression toward completing the bounty. But the bounty itself is a non-instanced item, like a mod or a currency. This returns that data for the characters who have the bounty in their inventory.  I&#39;m not crying, you&#39;re crying Okay we&#39;re both crying but it&#39;s going to be okay I promise Actually I shouldn&#39;t promise that, I don&#39;t know if it&#39;s going to be okay
   * @return characterUninstancedItemComponents
   */
  @javax.annotation.Nullable
  public Map<String, DestinyBaseItemComponentSetOfuint32> getCharacterUninstancedItemComponents() {
    return characterUninstancedItemComponents;
  }

  public void setCharacterUninstancedItemComponents(Map<String, DestinyBaseItemComponentSetOfuint32> characterUninstancedItemComponents) {
    this.characterUninstancedItemComponents = characterUninstancedItemComponents;
  }


  public DestinyResponsesDestinyProfileResponse characters(DictionaryComponentResponseOfint64AndDestinyCharacterComponent characters) {
    this.characters = characters;
    return this;
  }

  /**
   * Basic information about each character, keyed by the CharacterId.  COMPONENT TYPE: Characters
   * @return characters
   */
  @javax.annotation.Nullable
  public DictionaryComponentResponseOfint64AndDestinyCharacterComponent getCharacters() {
    return characters;
  }

  public void setCharacters(DictionaryComponentResponseOfint64AndDestinyCharacterComponent characters) {
    this.characters = characters;
  }


  public DestinyResponsesDestinyProfileResponse itemComponents(DestinyItemComponentSetOfint64 itemComponents) {
    this.itemComponents = itemComponents;
    return this;
  }

  /**
   * Information about instanced items across all returned characters, keyed by the item&#39;s instance ID.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
   * @return itemComponents
   */
  @javax.annotation.Nullable
  public DestinyItemComponentSetOfint64 getItemComponents() {
    return itemComponents;
  }

  public void setItemComponents(DestinyItemComponentSetOfint64 itemComponents) {
    this.itemComponents = itemComponents;
  }


  public DestinyResponsesDestinyProfileResponse metrics(SingleComponentResponseOfDestinyMetricsComponent metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * COMPONENT TYPE: Metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyMetricsComponent getMetrics() {
    return metrics;
  }

  public void setMetrics(SingleComponentResponseOfDestinyMetricsComponent metrics) {
    this.metrics = metrics;
  }


  public DestinyResponsesDestinyProfileResponse platformSilver(SingleComponentResponseOfDestinyPlatformSilverComponent platformSilver) {
    this.platformSilver = platformSilver;
    return this;
  }

  /**
   * Silver quantities for any platform on which this Profile plays destiny.   COMPONENT TYPE: PlatformSilver
   * @return platformSilver
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyPlatformSilverComponent getPlatformSilver() {
    return platformSilver;
  }

  public void setPlatformSilver(SingleComponentResponseOfDestinyPlatformSilverComponent platformSilver) {
    this.platformSilver = platformSilver;
  }


  public DestinyResponsesDestinyProfileResponse profile(SingleComponentResponseOfDestinyProfileComponent profile) {
    this.profile = profile;
    return this;
  }

  /**
   * The basic information about the Destiny Profile (formerly \&quot;Account\&quot;).  COMPONENT TYPE: Profiles
   * @return profile
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyProfileComponent getProfile() {
    return profile;
  }

  public void setProfile(SingleComponentResponseOfDestinyProfileComponent profile) {
    this.profile = profile;
  }


  public DestinyResponsesDestinyProfileResponse profileCollectibles(SingleComponentResponseOfDestinyProfileCollectiblesComponent profileCollectibles) {
    this.profileCollectibles = profileCollectibles;
    return this;
  }

  /**
   * COMPONENT TYPE: Collectibles
   * @return profileCollectibles
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyProfileCollectiblesComponent getProfileCollectibles() {
    return profileCollectibles;
  }

  public void setProfileCollectibles(SingleComponentResponseOfDestinyProfileCollectiblesComponent profileCollectibles) {
    this.profileCollectibles = profileCollectibles;
  }


  public DestinyResponsesDestinyProfileResponse profileCommendations(SingleComponentResponseOfDestinySocialCommendationsComponent profileCommendations) {
    this.profileCommendations = profileCommendations;
    return this;
  }

  /**
   * COMPONENT TYPE: SocialCommendations
   * @return profileCommendations
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinySocialCommendationsComponent getProfileCommendations() {
    return profileCommendations;
  }

  public void setProfileCommendations(SingleComponentResponseOfDestinySocialCommendationsComponent profileCommendations) {
    this.profileCommendations = profileCommendations;
  }


  public DestinyResponsesDestinyProfileResponse profileCurrencies(SingleComponentResponseOfDestinyInventoryComponent profileCurrencies) {
    this.profileCurrencies = profileCurrencies;
    return this;
  }

  /**
   * The profile-level currencies owned by the Destiny Profile.  COMPONENT TYPE: ProfileCurrencies
   * @return profileCurrencies
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyInventoryComponent getProfileCurrencies() {
    return profileCurrencies;
  }

  public void setProfileCurrencies(SingleComponentResponseOfDestinyInventoryComponent profileCurrencies) {
    this.profileCurrencies = profileCurrencies;
  }


  public DestinyResponsesDestinyProfileResponse profileInventory(SingleComponentResponseOfDestinyInventoryComponent profileInventory) {
    this.profileInventory = profileInventory;
    return this;
  }

  /**
   * The profile-level inventory of the Destiny Profile.  COMPONENT TYPE: ProfileInventories
   * @return profileInventory
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyInventoryComponent getProfileInventory() {
    return profileInventory;
  }

  public void setProfileInventory(SingleComponentResponseOfDestinyInventoryComponent profileInventory) {
    this.profileInventory = profileInventory;
  }


  public DestinyResponsesDestinyProfileResponse profileKiosks(SingleComponentResponseOfDestinyKiosksComponent profileKiosks) {
    this.profileKiosks = profileKiosks;
    return this;
  }

  /**
   * Items available from Kiosks that are available Profile-wide (i.e. across all characters)  This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the characterKiosks property.  COMPONENT TYPE: Kiosks
   * @return profileKiosks
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyKiosksComponent getProfileKiosks() {
    return profileKiosks;
  }

  public void setProfileKiosks(SingleComponentResponseOfDestinyKiosksComponent profileKiosks) {
    this.profileKiosks = profileKiosks;
  }


  public DestinyResponsesDestinyProfileResponse profilePlugSets(SingleComponentResponseOfDestinyPlugSetsComponent profilePlugSets) {
    this.profilePlugSets = profilePlugSets;
    return this;
  }

  /**
   * When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are profile-scoped.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets
   * @return profilePlugSets
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyPlugSetsComponent getProfilePlugSets() {
    return profilePlugSets;
  }

  public void setProfilePlugSets(SingleComponentResponseOfDestinyPlugSetsComponent profilePlugSets) {
    this.profilePlugSets = profilePlugSets;
  }


  public DestinyResponsesDestinyProfileResponse profilePresentationNodes(SingleComponentResponseOfDestinyPresentationNodesComponent profilePresentationNodes) {
    this.profilePresentationNodes = profilePresentationNodes;
    return this;
  }

  /**
   * COMPONENT TYPE: PresentationNodes
   * @return profilePresentationNodes
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyPresentationNodesComponent getProfilePresentationNodes() {
    return profilePresentationNodes;
  }

  public void setProfilePresentationNodes(SingleComponentResponseOfDestinyPresentationNodesComponent profilePresentationNodes) {
    this.profilePresentationNodes = profilePresentationNodes;
  }


  public DestinyResponsesDestinyProfileResponse profileProgression(SingleComponentResponseOfDestinyProfileProgressionComponent profileProgression) {
    this.profileProgression = profileProgression;
    return this;
  }

  /**
   * When we have progression information - such as Checklists - that may apply profile-wide, it will be returned here rather than in the per-character progression data.  COMPONENT TYPE: ProfileProgression
   * @return profileProgression
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyProfileProgressionComponent getProfileProgression() {
    return profileProgression;
  }

  public void setProfileProgression(SingleComponentResponseOfDestinyProfileProgressionComponent profileProgression) {
    this.profileProgression = profileProgression;
  }


  public DestinyResponsesDestinyProfileResponse profileRecords(SingleComponentResponseOfDestinyProfileRecordsComponent profileRecords) {
    this.profileRecords = profileRecords;
    return this;
  }

  /**
   * COMPONENT TYPE: Records
   * @return profileRecords
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyProfileRecordsComponent getProfileRecords() {
    return profileRecords;
  }

  public void setProfileRecords(SingleComponentResponseOfDestinyProfileRecordsComponent profileRecords) {
    this.profileRecords = profileRecords;
  }


  public DestinyResponsesDestinyProfileResponse profileStringVariables(SingleComponentResponseOfDestinyStringVariablesComponent profileStringVariables) {
    this.profileStringVariables = profileStringVariables;
    return this;
  }

  /**
   * COMPONENT TYPE: StringVariables
   * @return profileStringVariables
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyStringVariablesComponent getProfileStringVariables() {
    return profileStringVariables;
  }

  public void setProfileStringVariables(SingleComponentResponseOfDestinyStringVariablesComponent profileStringVariables) {
    this.profileStringVariables = profileStringVariables;
  }


  public DestinyResponsesDestinyProfileResponse profileTransitoryData(SingleComponentResponseOfDestinyProfileTransitoryComponent profileTransitoryData) {
    this.profileTransitoryData = profileTransitoryData;
    return this;
  }

  /**
   * COMPONENT TYPE: Transitory
   * @return profileTransitoryData
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyProfileTransitoryComponent getProfileTransitoryData() {
    return profileTransitoryData;
  }

  public void setProfileTransitoryData(SingleComponentResponseOfDestinyProfileTransitoryComponent profileTransitoryData) {
    this.profileTransitoryData = profileTransitoryData;
  }


  public DestinyResponsesDestinyProfileResponse responseMintedTimestamp(OffsetDateTime responseMintedTimestamp) {
    this.responseMintedTimestamp = responseMintedTimestamp;
    return this;
  }

  /**
   * Records the timestamp of when most components were last generated from the world server source. Unless the component type is specified in the documentation for secondaryComponentsMintedTimestamp, this value is sufficient to do data freshness.
   * @return responseMintedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResponseMintedTimestamp() {
    return responseMintedTimestamp;
  }

  public void setResponseMintedTimestamp(OffsetDateTime responseMintedTimestamp) {
    this.responseMintedTimestamp = responseMintedTimestamp;
  }


  public DestinyResponsesDestinyProfileResponse secondaryComponentsMintedTimestamp(OffsetDateTime secondaryComponentsMintedTimestamp) {
    this.secondaryComponentsMintedTimestamp = secondaryComponentsMintedTimestamp;
    return this;
  }

  /**
   * Some secondary components are not tracked in the primary response timestamp and have their timestamp tracked here. If your component is any of the following, this field is where you will find your timestamp value:   PresentationNodes, Records, Collectibles, Metrics, StringVariables, Craftables, Transitory   All other component types may use the primary timestamp property.
   * @return secondaryComponentsMintedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSecondaryComponentsMintedTimestamp() {
    return secondaryComponentsMintedTimestamp;
  }

  public void setSecondaryComponentsMintedTimestamp(OffsetDateTime secondaryComponentsMintedTimestamp) {
    this.secondaryComponentsMintedTimestamp = secondaryComponentsMintedTimestamp;
  }


  public DestinyResponsesDestinyProfileResponse vendorReceipts(SingleComponentResponseOfDestinyVendorReceiptsComponent vendorReceipts) {
    this.vendorReceipts = vendorReceipts;
    return this;
  }

  /**
   * Recent, refundable purchases you have made from vendors. When will you use it? Couldn&#39;t say...  COMPONENT TYPE: VendorReceipts
   * @return vendorReceipts
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyVendorReceiptsComponent getVendorReceipts() {
    return vendorReceipts;
  }

  public void setVendorReceipts(SingleComponentResponseOfDestinyVendorReceiptsComponent vendorReceipts) {
    this.vendorReceipts = vendorReceipts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyResponsesDestinyProfileResponse destinyResponsesDestinyProfileResponse = (DestinyResponsesDestinyProfileResponse) o;
    return Objects.equals(this.characterActivities, destinyResponsesDestinyProfileResponse.characterActivities) &&
        Objects.equals(this.characterCollectibles, destinyResponsesDestinyProfileResponse.characterCollectibles) &&
        Objects.equals(this.characterCraftables, destinyResponsesDestinyProfileResponse.characterCraftables) &&
        Objects.equals(this.characterCurrencyLookups, destinyResponsesDestinyProfileResponse.characterCurrencyLookups) &&
        Objects.equals(this.characterEquipment, destinyResponsesDestinyProfileResponse.characterEquipment) &&
        Objects.equals(this.characterInventories, destinyResponsesDestinyProfileResponse.characterInventories) &&
        Objects.equals(this.characterKiosks, destinyResponsesDestinyProfileResponse.characterKiosks) &&
        Objects.equals(this.characterLoadouts, destinyResponsesDestinyProfileResponse.characterLoadouts) &&
        Objects.equals(this.characterPlugSets, destinyResponsesDestinyProfileResponse.characterPlugSets) &&
        Objects.equals(this.characterPresentationNodes, destinyResponsesDestinyProfileResponse.characterPresentationNodes) &&
        Objects.equals(this.characterProgressions, destinyResponsesDestinyProfileResponse.characterProgressions) &&
        Objects.equals(this.characterRecords, destinyResponsesDestinyProfileResponse.characterRecords) &&
        Objects.equals(this.characterRenderData, destinyResponsesDestinyProfileResponse.characterRenderData) &&
        Objects.equals(this.characterStringVariables, destinyResponsesDestinyProfileResponse.characterStringVariables) &&
        Objects.equals(this.characterUninstancedItemComponents, destinyResponsesDestinyProfileResponse.characterUninstancedItemComponents) &&
        Objects.equals(this.characters, destinyResponsesDestinyProfileResponse.characters) &&
        Objects.equals(this.itemComponents, destinyResponsesDestinyProfileResponse.itemComponents) &&
        Objects.equals(this.metrics, destinyResponsesDestinyProfileResponse.metrics) &&
        Objects.equals(this.platformSilver, destinyResponsesDestinyProfileResponse.platformSilver) &&
        Objects.equals(this.profile, destinyResponsesDestinyProfileResponse.profile) &&
        Objects.equals(this.profileCollectibles, destinyResponsesDestinyProfileResponse.profileCollectibles) &&
        Objects.equals(this.profileCommendations, destinyResponsesDestinyProfileResponse.profileCommendations) &&
        Objects.equals(this.profileCurrencies, destinyResponsesDestinyProfileResponse.profileCurrencies) &&
        Objects.equals(this.profileInventory, destinyResponsesDestinyProfileResponse.profileInventory) &&
        Objects.equals(this.profileKiosks, destinyResponsesDestinyProfileResponse.profileKiosks) &&
        Objects.equals(this.profilePlugSets, destinyResponsesDestinyProfileResponse.profilePlugSets) &&
        Objects.equals(this.profilePresentationNodes, destinyResponsesDestinyProfileResponse.profilePresentationNodes) &&
        Objects.equals(this.profileProgression, destinyResponsesDestinyProfileResponse.profileProgression) &&
        Objects.equals(this.profileRecords, destinyResponsesDestinyProfileResponse.profileRecords) &&
        Objects.equals(this.profileStringVariables, destinyResponsesDestinyProfileResponse.profileStringVariables) &&
        Objects.equals(this.profileTransitoryData, destinyResponsesDestinyProfileResponse.profileTransitoryData) &&
        Objects.equals(this.responseMintedTimestamp, destinyResponsesDestinyProfileResponse.responseMintedTimestamp) &&
        Objects.equals(this.secondaryComponentsMintedTimestamp, destinyResponsesDestinyProfileResponse.secondaryComponentsMintedTimestamp) &&
        Objects.equals(this.vendorReceipts, destinyResponsesDestinyProfileResponse.vendorReceipts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterActivities, characterCollectibles, characterCraftables, characterCurrencyLookups, characterEquipment, characterInventories, characterKiosks, characterLoadouts, characterPlugSets, characterPresentationNodes, characterProgressions, characterRecords, characterRenderData, characterStringVariables, characterUninstancedItemComponents, characters, itemComponents, metrics, platformSilver, profile, profileCollectibles, profileCommendations, profileCurrencies, profileInventory, profileKiosks, profilePlugSets, profilePresentationNodes, profileProgression, profileRecords, profileStringVariables, profileTransitoryData, responseMintedTimestamp, secondaryComponentsMintedTimestamp, vendorReceipts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyResponsesDestinyProfileResponse {\n");
    sb.append("    characterActivities: ").append(toIndentedString(characterActivities)).append("\n");
    sb.append("    characterCollectibles: ").append(toIndentedString(characterCollectibles)).append("\n");
    sb.append("    characterCraftables: ").append(toIndentedString(characterCraftables)).append("\n");
    sb.append("    characterCurrencyLookups: ").append(toIndentedString(characterCurrencyLookups)).append("\n");
    sb.append("    characterEquipment: ").append(toIndentedString(characterEquipment)).append("\n");
    sb.append("    characterInventories: ").append(toIndentedString(characterInventories)).append("\n");
    sb.append("    characterKiosks: ").append(toIndentedString(characterKiosks)).append("\n");
    sb.append("    characterLoadouts: ").append(toIndentedString(characterLoadouts)).append("\n");
    sb.append("    characterPlugSets: ").append(toIndentedString(characterPlugSets)).append("\n");
    sb.append("    characterPresentationNodes: ").append(toIndentedString(characterPresentationNodes)).append("\n");
    sb.append("    characterProgressions: ").append(toIndentedString(characterProgressions)).append("\n");
    sb.append("    characterRecords: ").append(toIndentedString(characterRecords)).append("\n");
    sb.append("    characterRenderData: ").append(toIndentedString(characterRenderData)).append("\n");
    sb.append("    characterStringVariables: ").append(toIndentedString(characterStringVariables)).append("\n");
    sb.append("    characterUninstancedItemComponents: ").append(toIndentedString(characterUninstancedItemComponents)).append("\n");
    sb.append("    characters: ").append(toIndentedString(characters)).append("\n");
    sb.append("    itemComponents: ").append(toIndentedString(itemComponents)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    platformSilver: ").append(toIndentedString(platformSilver)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    profileCollectibles: ").append(toIndentedString(profileCollectibles)).append("\n");
    sb.append("    profileCommendations: ").append(toIndentedString(profileCommendations)).append("\n");
    sb.append("    profileCurrencies: ").append(toIndentedString(profileCurrencies)).append("\n");
    sb.append("    profileInventory: ").append(toIndentedString(profileInventory)).append("\n");
    sb.append("    profileKiosks: ").append(toIndentedString(profileKiosks)).append("\n");
    sb.append("    profilePlugSets: ").append(toIndentedString(profilePlugSets)).append("\n");
    sb.append("    profilePresentationNodes: ").append(toIndentedString(profilePresentationNodes)).append("\n");
    sb.append("    profileProgression: ").append(toIndentedString(profileProgression)).append("\n");
    sb.append("    profileRecords: ").append(toIndentedString(profileRecords)).append("\n");
    sb.append("    profileStringVariables: ").append(toIndentedString(profileStringVariables)).append("\n");
    sb.append("    profileTransitoryData: ").append(toIndentedString(profileTransitoryData)).append("\n");
    sb.append("    responseMintedTimestamp: ").append(toIndentedString(responseMintedTimestamp)).append("\n");
    sb.append("    secondaryComponentsMintedTimestamp: ").append(toIndentedString(secondaryComponentsMintedTimestamp)).append("\n");
    sb.append("    vendorReceipts: ").append(toIndentedString(vendorReceipts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("characterActivities");
    openapiFields.add("characterCollectibles");
    openapiFields.add("characterCraftables");
    openapiFields.add("characterCurrencyLookups");
    openapiFields.add("characterEquipment");
    openapiFields.add("characterInventories");
    openapiFields.add("characterKiosks");
    openapiFields.add("characterLoadouts");
    openapiFields.add("characterPlugSets");
    openapiFields.add("characterPresentationNodes");
    openapiFields.add("characterProgressions");
    openapiFields.add("characterRecords");
    openapiFields.add("characterRenderData");
    openapiFields.add("characterStringVariables");
    openapiFields.add("characterUninstancedItemComponents");
    openapiFields.add("characters");
    openapiFields.add("itemComponents");
    openapiFields.add("metrics");
    openapiFields.add("platformSilver");
    openapiFields.add("profile");
    openapiFields.add("profileCollectibles");
    openapiFields.add("profileCommendations");
    openapiFields.add("profileCurrencies");
    openapiFields.add("profileInventory");
    openapiFields.add("profileKiosks");
    openapiFields.add("profilePlugSets");
    openapiFields.add("profilePresentationNodes");
    openapiFields.add("profileProgression");
    openapiFields.add("profileRecords");
    openapiFields.add("profileStringVariables");
    openapiFields.add("profileTransitoryData");
    openapiFields.add("responseMintedTimestamp");
    openapiFields.add("secondaryComponentsMintedTimestamp");
    openapiFields.add("vendorReceipts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyResponsesDestinyProfileResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyResponsesDestinyProfileResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyResponsesDestinyProfileResponse is not found in the empty JSON string", DestinyResponsesDestinyProfileResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyResponsesDestinyProfileResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyResponsesDestinyProfileResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `characterActivities`
      if (jsonObj.get("characterActivities") != null && !jsonObj.get("characterActivities").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent.validateJsonElement(jsonObj.get("characterActivities"));
      }
      // validate the optional field `characterCollectibles`
      if (jsonObj.get("characterCollectibles") != null && !jsonObj.get("characterCollectibles").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent.validateJsonElement(jsonObj.get("characterCollectibles"));
      }
      // validate the optional field `characterCraftables`
      if (jsonObj.get("characterCraftables") != null && !jsonObj.get("characterCraftables").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyCraftablesComponent.validateJsonElement(jsonObj.get("characterCraftables"));
      }
      // validate the optional field `characterCurrencyLookups`
      if (jsonObj.get("characterCurrencyLookups") != null && !jsonObj.get("characterCurrencyLookups").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent.validateJsonElement(jsonObj.get("characterCurrencyLookups"));
      }
      // validate the optional field `characterEquipment`
      if (jsonObj.get("characterEquipment") != null && !jsonObj.get("characterEquipment").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyInventoryComponent.validateJsonElement(jsonObj.get("characterEquipment"));
      }
      // validate the optional field `characterInventories`
      if (jsonObj.get("characterInventories") != null && !jsonObj.get("characterInventories").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyInventoryComponent.validateJsonElement(jsonObj.get("characterInventories"));
      }
      // validate the optional field `characterKiosks`
      if (jsonObj.get("characterKiosks") != null && !jsonObj.get("characterKiosks").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyKiosksComponent.validateJsonElement(jsonObj.get("characterKiosks"));
      }
      // validate the optional field `characterLoadouts`
      if (jsonObj.get("characterLoadouts") != null && !jsonObj.get("characterLoadouts").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent.validateJsonElement(jsonObj.get("characterLoadouts"));
      }
      // validate the optional field `characterPlugSets`
      if (jsonObj.get("characterPlugSets") != null && !jsonObj.get("characterPlugSets").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent.validateJsonElement(jsonObj.get("characterPlugSets"));
      }
      // validate the optional field `characterPresentationNodes`
      if (jsonObj.get("characterPresentationNodes") != null && !jsonObj.get("characterPresentationNodes").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent.validateJsonElement(jsonObj.get("characterPresentationNodes"));
      }
      // validate the optional field `characterProgressions`
      if (jsonObj.get("characterProgressions") != null && !jsonObj.get("characterProgressions").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent.validateJsonElement(jsonObj.get("characterProgressions"));
      }
      // validate the optional field `characterRecords`
      if (jsonObj.get("characterRecords") != null && !jsonObj.get("characterRecords").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent.validateJsonElement(jsonObj.get("characterRecords"));
      }
      // validate the optional field `characterRenderData`
      if (jsonObj.get("characterRenderData") != null && !jsonObj.get("characterRenderData").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent.validateJsonElement(jsonObj.get("characterRenderData"));
      }
      // validate the optional field `characterStringVariables`
      if (jsonObj.get("characterStringVariables") != null && !jsonObj.get("characterStringVariables").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent.validateJsonElement(jsonObj.get("characterStringVariables"));
      }
      // validate the optional field `characters`
      if (jsonObj.get("characters") != null && !jsonObj.get("characters").isJsonNull()) {
        DictionaryComponentResponseOfint64AndDestinyCharacterComponent.validateJsonElement(jsonObj.get("characters"));
      }
      // validate the optional field `itemComponents`
      if (jsonObj.get("itemComponents") != null && !jsonObj.get("itemComponents").isJsonNull()) {
        DestinyItemComponentSetOfint64.validateJsonElement(jsonObj.get("itemComponents"));
      }
      // validate the optional field `metrics`
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        SingleComponentResponseOfDestinyMetricsComponent.validateJsonElement(jsonObj.get("metrics"));
      }
      // validate the optional field `platformSilver`
      if (jsonObj.get("platformSilver") != null && !jsonObj.get("platformSilver").isJsonNull()) {
        SingleComponentResponseOfDestinyPlatformSilverComponent.validateJsonElement(jsonObj.get("platformSilver"));
      }
      // validate the optional field `profile`
      if (jsonObj.get("profile") != null && !jsonObj.get("profile").isJsonNull()) {
        SingleComponentResponseOfDestinyProfileComponent.validateJsonElement(jsonObj.get("profile"));
      }
      // validate the optional field `profileCollectibles`
      if (jsonObj.get("profileCollectibles") != null && !jsonObj.get("profileCollectibles").isJsonNull()) {
        SingleComponentResponseOfDestinyProfileCollectiblesComponent.validateJsonElement(jsonObj.get("profileCollectibles"));
      }
      // validate the optional field `profileCommendations`
      if (jsonObj.get("profileCommendations") != null && !jsonObj.get("profileCommendations").isJsonNull()) {
        SingleComponentResponseOfDestinySocialCommendationsComponent.validateJsonElement(jsonObj.get("profileCommendations"));
      }
      // validate the optional field `profileCurrencies`
      if (jsonObj.get("profileCurrencies") != null && !jsonObj.get("profileCurrencies").isJsonNull()) {
        SingleComponentResponseOfDestinyInventoryComponent.validateJsonElement(jsonObj.get("profileCurrencies"));
      }
      // validate the optional field `profileInventory`
      if (jsonObj.get("profileInventory") != null && !jsonObj.get("profileInventory").isJsonNull()) {
        SingleComponentResponseOfDestinyInventoryComponent.validateJsonElement(jsonObj.get("profileInventory"));
      }
      // validate the optional field `profileKiosks`
      if (jsonObj.get("profileKiosks") != null && !jsonObj.get("profileKiosks").isJsonNull()) {
        SingleComponentResponseOfDestinyKiosksComponent.validateJsonElement(jsonObj.get("profileKiosks"));
      }
      // validate the optional field `profilePlugSets`
      if (jsonObj.get("profilePlugSets") != null && !jsonObj.get("profilePlugSets").isJsonNull()) {
        SingleComponentResponseOfDestinyPlugSetsComponent.validateJsonElement(jsonObj.get("profilePlugSets"));
      }
      // validate the optional field `profilePresentationNodes`
      if (jsonObj.get("profilePresentationNodes") != null && !jsonObj.get("profilePresentationNodes").isJsonNull()) {
        SingleComponentResponseOfDestinyPresentationNodesComponent.validateJsonElement(jsonObj.get("profilePresentationNodes"));
      }
      // validate the optional field `profileProgression`
      if (jsonObj.get("profileProgression") != null && !jsonObj.get("profileProgression").isJsonNull()) {
        SingleComponentResponseOfDestinyProfileProgressionComponent.validateJsonElement(jsonObj.get("profileProgression"));
      }
      // validate the optional field `profileRecords`
      if (jsonObj.get("profileRecords") != null && !jsonObj.get("profileRecords").isJsonNull()) {
        SingleComponentResponseOfDestinyProfileRecordsComponent.validateJsonElement(jsonObj.get("profileRecords"));
      }
      // validate the optional field `profileStringVariables`
      if (jsonObj.get("profileStringVariables") != null && !jsonObj.get("profileStringVariables").isJsonNull()) {
        SingleComponentResponseOfDestinyStringVariablesComponent.validateJsonElement(jsonObj.get("profileStringVariables"));
      }
      // validate the optional field `profileTransitoryData`
      if (jsonObj.get("profileTransitoryData") != null && !jsonObj.get("profileTransitoryData").isJsonNull()) {
        SingleComponentResponseOfDestinyProfileTransitoryComponent.validateJsonElement(jsonObj.get("profileTransitoryData"));
      }
      // validate the optional field `vendorReceipts`
      if (jsonObj.get("vendorReceipts") != null && !jsonObj.get("vendorReceipts").isJsonNull()) {
        SingleComponentResponseOfDestinyVendorReceiptsComponent.validateJsonElement(jsonObj.get("vendorReceipts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyResponsesDestinyProfileResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyResponsesDestinyProfileResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyResponsesDestinyProfileResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyResponsesDestinyProfileResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyResponsesDestinyProfileResponse>() {
           @Override
           public void write(JsonWriter out, DestinyResponsesDestinyProfileResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyResponsesDestinyProfileResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyResponsesDestinyProfileResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyResponsesDestinyProfileResponse
   * @throws IOException if the JSON string is invalid with respect to DestinyResponsesDestinyProfileResponse
   */
  public static DestinyResponsesDestinyProfileResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyResponsesDestinyProfileResponse.class);
  }

  /**
   * Convert an instance of DestinyResponsesDestinyProfileResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

