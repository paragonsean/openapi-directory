/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GroupsV2GroupUserInfoCard;
import org.openapitools.client.model.UserGeneralUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserUserMembershipData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserUserMembershipData {
  public static final String SERIALIZED_NAME_BUNGIE_NET_USER = "bungieNetUser";
  @SerializedName(SERIALIZED_NAME_BUNGIE_NET_USER)
  private UserGeneralUser bungieNetUser;

  public static final String SERIALIZED_NAME_DESTINY_MEMBERSHIPS = "destinyMemberships";
  @SerializedName(SERIALIZED_NAME_DESTINY_MEMBERSHIPS)
  private List<GroupsV2GroupUserInfoCard> destinyMemberships = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_MEMBERSHIP_ID = "primaryMembershipId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_MEMBERSHIP_ID)
  private Long primaryMembershipId;

  public UserUserMembershipData() {
  }

  public UserUserMembershipData bungieNetUser(UserGeneralUser bungieNetUser) {
    this.bungieNetUser = bungieNetUser;
    return this;
  }

  /**
   * Get bungieNetUser
   * @return bungieNetUser
   */
  @javax.annotation.Nullable
  public UserGeneralUser getBungieNetUser() {
    return bungieNetUser;
  }

  public void setBungieNetUser(UserGeneralUser bungieNetUser) {
    this.bungieNetUser = bungieNetUser;
  }


  public UserUserMembershipData destinyMemberships(List<GroupsV2GroupUserInfoCard> destinyMemberships) {
    this.destinyMemberships = destinyMemberships;
    return this;
  }

  public UserUserMembershipData addDestinyMembershipsItem(GroupsV2GroupUserInfoCard destinyMembershipsItem) {
    if (this.destinyMemberships == null) {
      this.destinyMemberships = new ArrayList<>();
    }
    this.destinyMemberships.add(destinyMembershipsItem);
    return this;
  }

  /**
   * this allows you to see destiny memberships that are visible and linked to this account (regardless of whether or not they have characters on the world server)
   * @return destinyMemberships
   */
  @javax.annotation.Nullable
  public List<GroupsV2GroupUserInfoCard> getDestinyMemberships() {
    return destinyMemberships;
  }

  public void setDestinyMemberships(List<GroupsV2GroupUserInfoCard> destinyMemberships) {
    this.destinyMemberships = destinyMemberships;
  }


  public UserUserMembershipData primaryMembershipId(Long primaryMembershipId) {
    this.primaryMembershipId = primaryMembershipId;
    return this;
  }

  /**
   * If this property is populated, it will have the membership ID of the account considered to be \&quot;primary\&quot; in this user&#39;s cross save relationship.   If null, this user has no cross save relationship, nor primary account.
   * @return primaryMembershipId
   */
  @javax.annotation.Nullable
  public Long getPrimaryMembershipId() {
    return primaryMembershipId;
  }

  public void setPrimaryMembershipId(Long primaryMembershipId) {
    this.primaryMembershipId = primaryMembershipId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserUserMembershipData userUserMembershipData = (UserUserMembershipData) o;
    return Objects.equals(this.bungieNetUser, userUserMembershipData.bungieNetUser) &&
        Objects.equals(this.destinyMemberships, userUserMembershipData.destinyMemberships) &&
        Objects.equals(this.primaryMembershipId, userUserMembershipData.primaryMembershipId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bungieNetUser, destinyMemberships, primaryMembershipId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserUserMembershipData {\n");
    sb.append("    bungieNetUser: ").append(toIndentedString(bungieNetUser)).append("\n");
    sb.append("    destinyMemberships: ").append(toIndentedString(destinyMemberships)).append("\n");
    sb.append("    primaryMembershipId: ").append(toIndentedString(primaryMembershipId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bungieNetUser");
    openapiFields.add("destinyMemberships");
    openapiFields.add("primaryMembershipId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserUserMembershipData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserUserMembershipData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserUserMembershipData is not found in the empty JSON string", UserUserMembershipData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserUserMembershipData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserUserMembershipData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bungieNetUser`
      if (jsonObj.get("bungieNetUser") != null && !jsonObj.get("bungieNetUser").isJsonNull()) {
        UserGeneralUser.validateJsonElement(jsonObj.get("bungieNetUser"));
      }
      if (jsonObj.get("destinyMemberships") != null && !jsonObj.get("destinyMemberships").isJsonNull()) {
        JsonArray jsonArraydestinyMemberships = jsonObj.getAsJsonArray("destinyMemberships");
        if (jsonArraydestinyMemberships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinyMemberships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinyMemberships` to be an array in the JSON string but got `%s`", jsonObj.get("destinyMemberships").toString()));
          }

          // validate the optional field `destinyMemberships` (array)
          for (int i = 0; i < jsonArraydestinyMemberships.size(); i++) {
            GroupsV2GroupUserInfoCard.validateJsonElement(jsonArraydestinyMemberships.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserUserMembershipData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserUserMembershipData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserUserMembershipData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserUserMembershipData.class));

       return (TypeAdapter<T>) new TypeAdapter<UserUserMembershipData>() {
           @Override
           public void write(JsonWriter out, UserUserMembershipData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserUserMembershipData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserUserMembershipData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserUserMembershipData
   * @throws IOException if the JSON string is invalid with respect to UserUserMembershipData
   */
  public static UserUserMembershipData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserUserMembershipData.class);
  }

  /**
   * Convert an instance of UserUserMembershipData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

