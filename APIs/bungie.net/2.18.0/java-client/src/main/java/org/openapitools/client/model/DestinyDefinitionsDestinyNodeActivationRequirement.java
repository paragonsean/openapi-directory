/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Talent nodes have requirements that must be met before they can be activated.  This describes the material costs, the Level of the Talent Grid&#39;s progression required, and other conditional information that limits whether a talent node can be activated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyNodeActivationRequirement {
  public static final String SERIALIZED_NAME_GRID_LEVEL = "gridLevel";
  @SerializedName(SERIALIZED_NAME_GRID_LEVEL)
  private Integer gridLevel;

  public static final String SERIALIZED_NAME_MATERIAL_REQUIREMENT_HASHES = "materialRequirementHashes";
  @SerializedName(SERIALIZED_NAME_MATERIAL_REQUIREMENT_HASHES)
  private List<Integer> materialRequirementHashes = new ArrayList<>();

  public DestinyDefinitionsDestinyNodeActivationRequirement() {
  }

  public DestinyDefinitionsDestinyNodeActivationRequirement gridLevel(Integer gridLevel) {
    this.gridLevel = gridLevel;
    return this;
  }

  /**
   * The Progression level on the Talent Grid required to activate this node.  See DestinyTalentGridDefinition.progressionHash for the related Progression, and read DestinyProgressionDefinition&#39;s documentation to learn more about Progressions.
   * @return gridLevel
   */
  @javax.annotation.Nullable
  public Integer getGridLevel() {
    return gridLevel;
  }

  public void setGridLevel(Integer gridLevel) {
    this.gridLevel = gridLevel;
  }


  public DestinyDefinitionsDestinyNodeActivationRequirement materialRequirementHashes(List<Integer> materialRequirementHashes) {
    this.materialRequirementHashes = materialRequirementHashes;
    return this;
  }

  public DestinyDefinitionsDestinyNodeActivationRequirement addMaterialRequirementHashesItem(Integer materialRequirementHashesItem) {
    if (this.materialRequirementHashes == null) {
      this.materialRequirementHashes = new ArrayList<>();
    }
    this.materialRequirementHashes.add(materialRequirementHashesItem);
    return this;
  }

  /**
   * The list of hash identifiers for material requirement sets: materials that are required for the node to be activated. See DestinyMaterialRequirementSetDefinition for more information about material requirements.  In this case, only a single DestinyMaterialRequirementSetDefinition will be chosen from this list, and we won&#39;t know which one will be chosen until an instance of the item is created.
   * @return materialRequirementHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getMaterialRequirementHashes() {
    return materialRequirementHashes;
  }

  public void setMaterialRequirementHashes(List<Integer> materialRequirementHashes) {
    this.materialRequirementHashes = materialRequirementHashes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyNodeActivationRequirement destinyDefinitionsDestinyNodeActivationRequirement = (DestinyDefinitionsDestinyNodeActivationRequirement) o;
    return Objects.equals(this.gridLevel, destinyDefinitionsDestinyNodeActivationRequirement.gridLevel) &&
        Objects.equals(this.materialRequirementHashes, destinyDefinitionsDestinyNodeActivationRequirement.materialRequirementHashes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gridLevel, materialRequirementHashes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyNodeActivationRequirement {\n");
    sb.append("    gridLevel: ").append(toIndentedString(gridLevel)).append("\n");
    sb.append("    materialRequirementHashes: ").append(toIndentedString(materialRequirementHashes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gridLevel");
    openapiFields.add("materialRequirementHashes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyNodeActivationRequirement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyNodeActivationRequirement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyNodeActivationRequirement is not found in the empty JSON string", DestinyDefinitionsDestinyNodeActivationRequirement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyNodeActivationRequirement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyNodeActivationRequirement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("materialRequirementHashes") != null && !jsonObj.get("materialRequirementHashes").isJsonNull() && !jsonObj.get("materialRequirementHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `materialRequirementHashes` to be an array in the JSON string but got `%s`", jsonObj.get("materialRequirementHashes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyNodeActivationRequirement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyNodeActivationRequirement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyNodeActivationRequirement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyNodeActivationRequirement.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyNodeActivationRequirement>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyNodeActivationRequirement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyNodeActivationRequirement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyNodeActivationRequirement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyNodeActivationRequirement
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyNodeActivationRequirement
   */
  public static DestinyDefinitionsDestinyNodeActivationRequirement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyNodeActivationRequirement.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyNodeActivationRequirement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

