/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DatesDateRange;
import org.openapitools.client.model.DestinyDefinitionsDestinyDisplayCategoryDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorAcceptedItemDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorActionDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorCategoryEntryDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorGroupReference;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorInteractionDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorItemDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyVendorServiceDefinition;
import org.openapitools.client.model.DestinyDefinitionsVendorsDestinyVendorLocationDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * These are the definitions for Vendors.  In Destiny, a Vendor can be a lot of things - some things that you wouldn&#39;t expect, and some things that you don&#39;t even see directly in the game. Vendors are the Dolly Levi of the Destiny universe.  - Traditional Vendors as you see in game: people who you come up to and who give you quests, rewards, or who you can buy things from.  - Kiosks/Collections, which are really just Vendors that don&#39;t charge currency (or charge some pittance of a currency) and whose gating for purchases revolves more around your character&#39;s state.  - Previews for rewards or the contents of sacks. These are implemented as Vendors, where you can&#39;t actually purchase from them but the items that they have for sale and the categories of sale items reflect the rewards or contents of the sack. This is so that the game could reuse the existing Vendor display UI for rewards and save a bunch of wheel reinvention.  - Item Transfer capabilities, like the Vault and Postmaster. Vendors can have \&quot;acceptedItem\&quot; buckets that determine the source and destination buckets for transfers. When you interact with such a vendor, these buckets are what gets shown in the UI instead of any items that the Vendor would have for sale. Yep, the Vault is a vendor.  It is pretty much guaranteed that they&#39;ll be used for even more features in the future. They have come to be seen more as generic categorized containers for items than \&quot;vendors\&quot; in a traditional sense, for better or worse.  Where possible and time allows, we&#39;ll attempt to split those out into their own more digestible derived \&quot;Definitions\&quot;: but often time does not allow that, as you can see from the above ways that vendors are used which we never split off from Vendor Definitions externally.  Since Vendors are so many things to so many parts of the game, the definition is understandably complex. You will want to combine this data with live Vendor information from the API when it is available.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyVendorDefinition {
  public static final String SERIALIZED_NAME_ACCEPTED_ITEMS = "acceptedItems";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_ITEMS)
  private List<DestinyDefinitionsDestinyVendorAcceptedItemDefinition> acceptedItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<DestinyDefinitionsDestinyVendorActionDefinition> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUY_STRING = "buyString";
  @SerializedName(SERIALIZED_NAME_BUY_STRING)
  private String buyString;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSOLIDATE_CATEGORIES = "consolidateCategories";
  @SerializedName(SERIALIZED_NAME_CONSOLIDATE_CATEGORIES)
  private Boolean consolidateCategories;

  public static final String SERIALIZED_NAME_DISPLAY_CATEGORIES = "displayCategories";
  @SerializedName(SERIALIZED_NAME_DISPLAY_CATEGORIES)
  private List<DestinyDefinitionsDestinyDisplayCategoryDefinition> displayCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_ITEM_HASH = "displayItemHash";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ITEM_HASH)
  private Integer displayItemHash;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FACTION_HASH = "factionHash";
  @SerializedName(SERIALIZED_NAME_FACTION_HASH)
  private Integer factionHash;

  public static final String SERIALIZED_NAME_FAILURE_STRINGS = "failureStrings";
  @SerializedName(SERIALIZED_NAME_FAILURE_STRINGS)
  private List<String> failureStrings = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<DestinyDefinitionsDestinyVendorGroupReference> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_IGNORE_SALE_ITEM_HASHES = "ignoreSaleItemHashes";
  @SerializedName(SERIALIZED_NAME_IGNORE_SALE_ITEM_HASHES)
  private List<Integer> ignoreSaleItemHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_INHIBIT_BUYING = "inhibitBuying";
  @SerializedName(SERIALIZED_NAME_INHIBIT_BUYING)
  private Boolean inhibitBuying;

  public static final String SERIALIZED_NAME_INHIBIT_SELLING = "inhibitSelling";
  @SerializedName(SERIALIZED_NAME_INHIBIT_SELLING)
  private Boolean inhibitSelling;

  public static final String SERIALIZED_NAME_INTERACTIONS = "interactions";
  @SerializedName(SERIALIZED_NAME_INTERACTIONS)
  private List<DestinyDefinitionsDestinyVendorInteractionDefinition> interactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVENTORY_FLYOUTS = "inventoryFlyouts";
  @SerializedName(SERIALIZED_NAME_INVENTORY_FLYOUTS)
  private List<DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition> inventoryFlyouts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_LIST = "itemList";
  @SerializedName(SERIALIZED_NAME_ITEM_LIST)
  private List<DestinyDefinitionsDestinyVendorItemDefinition> itemList = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<DestinyDefinitionsVendorsDestinyVendorLocationDefinition> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIGINAL_CATEGORIES = "originalCategories";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CATEGORIES)
  private List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> originalCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_RESET_INTERVAL_MINUTES = "resetIntervalMinutes";
  @SerializedName(SERIALIZED_NAME_RESET_INTERVAL_MINUTES)
  private Integer resetIntervalMinutes;

  public static final String SERIALIZED_NAME_RESET_OFFSET_MINUTES = "resetOffsetMinutes";
  @SerializedName(SERIALIZED_NAME_RESET_OFFSET_MINUTES)
  private Integer resetOffsetMinutes;

  public static final String SERIALIZED_NAME_RETURN_WITH_VENDOR_REQUEST = "returnWithVendorRequest";
  @SerializedName(SERIALIZED_NAME_RETURN_WITH_VENDOR_REQUEST)
  private Boolean returnWithVendorRequest;

  public static final String SERIALIZED_NAME_SELL_STRING = "sellString";
  @SerializedName(SERIALIZED_NAME_SELL_STRING)
  private String sellString;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<DestinyDefinitionsDestinyVendorServiceDefinition> services = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNLOCK_RANGES = "unlockRanges";
  @SerializedName(SERIALIZED_NAME_UNLOCK_RANGES)
  private List<DatesDateRange> unlockRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENDOR_BANNER = "vendorBanner";
  @SerializedName(SERIALIZED_NAME_VENDOR_BANNER)
  private String vendorBanner;

  public static final String SERIALIZED_NAME_VENDOR_IDENTIFIER = "vendorIdentifier";
  @SerializedName(SERIALIZED_NAME_VENDOR_IDENTIFIER)
  private String vendorIdentifier;

  public static final String SERIALIZED_NAME_VENDOR_PORTRAIT = "vendorPortrait";
  @SerializedName(SERIALIZED_NAME_VENDOR_PORTRAIT)
  private String vendorPortrait;

  public static final String SERIALIZED_NAME_VENDOR_PROGRESSION_TYPE = "vendorProgressionType";
  @SerializedName(SERIALIZED_NAME_VENDOR_PROGRESSION_TYPE)
  private Integer vendorProgressionType;

  public static final String SERIALIZED_NAME_VENDOR_SUBCATEGORY_IDENTIFIER = "vendorSubcategoryIdentifier";
  @SerializedName(SERIALIZED_NAME_VENDOR_SUBCATEGORY_IDENTIFIER)
  private String vendorSubcategoryIdentifier;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public DestinyDefinitionsDestinyVendorDefinition() {
  }

  public DestinyDefinitionsDestinyVendorDefinition acceptedItems(List<DestinyDefinitionsDestinyVendorAcceptedItemDefinition> acceptedItems) {
    this.acceptedItems = acceptedItems;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addAcceptedItemsItem(DestinyDefinitionsDestinyVendorAcceptedItemDefinition acceptedItemsItem) {
    if (this.acceptedItems == null) {
      this.acceptedItems = new ArrayList<>();
    }
    this.acceptedItems.add(acceptedItemsItem);
    return this;
  }

  /**
   * If the Vendor is actually a vehicle for the transferring of items (like the Vault and Postmaster vendors), this defines the list of source-&gt;destination buckets for transferring.
   * @return acceptedItems
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyVendorAcceptedItemDefinition> getAcceptedItems() {
    return acceptedItems;
  }

  public void setAcceptedItems(List<DestinyDefinitionsDestinyVendorAcceptedItemDefinition> acceptedItems) {
    this.acceptedItems = acceptedItems;
  }


  public DestinyDefinitionsDestinyVendorDefinition actions(List<DestinyDefinitionsDestinyVendorActionDefinition> actions) {
    this.actions = actions;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addActionsItem(DestinyDefinitionsDestinyVendorActionDefinition actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Describes \&quot;actions\&quot; that can be performed on a vendor. Currently, none of these exist. But theoretically a Vendor could let you interact with it by performing actions. We&#39;ll see what these end up looking like if they ever get used.
   * @return actions
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyVendorActionDefinition> getActions() {
    return actions;
  }

  public void setActions(List<DestinyDefinitionsDestinyVendorActionDefinition> actions) {
    this.actions = actions;
  }


  public DestinyDefinitionsDestinyVendorDefinition buyString(String buyString) {
    this.buyString = buyString;
    return this;
  }

  /**
   * If the vendor has a custom localized string describing the \&quot;buy\&quot; action, that is returned here.
   * @return buyString
   */
  @javax.annotation.Nullable
  public String getBuyString() {
    return buyString;
  }

  public void setBuyString(String buyString) {
    this.buyString = buyString;
  }


  public DestinyDefinitionsDestinyVendorDefinition categories(List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> categories) {
    this.categories = categories;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addCategoriesItem(DestinyDefinitionsDestinyVendorCategoryEntryDefinition categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * These are the headers for sections of items that the vendor is selling. When you see items organized by category in the header, it is these categories that it is showing.  Well, technically not *exactly* these. On BNet, it doesn&#39;t make sense to have categories be \&quot;paged\&quot; as we do in Destiny, so we run some heuristics to attempt to aggregate pages of categories together.   These are the categories post-concatenation, if the vendor had concatenation applied. If you want the pre-aggregated category data, use originalCategories.
   * @return categories
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> getCategories() {
    return categories;
  }

  public void setCategories(List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> categories) {
    this.categories = categories;
  }


  public DestinyDefinitionsDestinyVendorDefinition consolidateCategories(Boolean consolidateCategories) {
    this.consolidateCategories = consolidateCategories;
    return this;
  }

  /**
   * If TRUE, consolidate categories that only differ by trivial properties (such as having minor differences in name)
   * @return consolidateCategories
   */
  @javax.annotation.Nullable
  public Boolean getConsolidateCategories() {
    return consolidateCategories;
  }

  public void setConsolidateCategories(Boolean consolidateCategories) {
    this.consolidateCategories = consolidateCategories;
  }


  public DestinyDefinitionsDestinyVendorDefinition displayCategories(List<DestinyDefinitionsDestinyDisplayCategoryDefinition> displayCategories) {
    this.displayCategories = displayCategories;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addDisplayCategoriesItem(DestinyDefinitionsDestinyDisplayCategoryDefinition displayCategoriesItem) {
    if (this.displayCategories == null) {
      this.displayCategories = new ArrayList<>();
    }
    this.displayCategories.add(displayCategoriesItem);
    return this;
  }

  /**
   * Display Categories are different from \&quot;categories\&quot; in that these are specifically for visual grouping and display of categories in Vendor UI.   The \&quot;categories\&quot; structure is for validation of the contained items, and can be categorized entirely separately from \&quot;Display Categories\&quot;, there need be and often will be no meaningful relationship between the two.
   * @return displayCategories
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyDisplayCategoryDefinition> getDisplayCategories() {
    return displayCategories;
  }

  public void setDisplayCategories(List<DestinyDefinitionsDestinyDisplayCategoryDefinition> displayCategories) {
    this.displayCategories = displayCategories;
  }


  public DestinyDefinitionsDestinyVendorDefinition displayItemHash(Integer displayItemHash) {
    this.displayItemHash = displayItemHash;
    return this;
  }

  /**
   * If the vendor has an item that should be displayed as the \&quot;featured\&quot; item, this is the hash identifier for that DestinyVendorItemDefinition.  Apparently this is usually a related currency, like a reputation token. But it need not be restricted to that.
   * @return displayItemHash
   */
  @javax.annotation.Nullable
  public Integer getDisplayItemHash() {
    return displayItemHash;
  }

  public void setDisplayItemHash(Integer displayItemHash) {
    this.displayItemHash = displayItemHash;
  }


  public DestinyDefinitionsDestinyVendorDefinition displayProperties(DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinyVendorDefinition enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * If a vendor is not enabled, we won&#39;t even save the vendor&#39;s definition, and we won&#39;t return any items or info about them. It&#39;s as if they don&#39;t exist.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public DestinyDefinitionsDestinyVendorDefinition factionHash(Integer factionHash) {
    this.factionHash = factionHash;
    return this;
  }

  /**
   * If the Vendor has a faction, this hash will be valid and point to a DestinyFactionDefinition.  The game UI and BNet often mine the faction definition for additional elements and details to place on the screen, such as the faction&#39;s Progression status (aka \&quot;Reputation\&quot;).
   * @return factionHash
   */
  @javax.annotation.Nullable
  public Integer getFactionHash() {
    return factionHash;
  }

  public void setFactionHash(Integer factionHash) {
    this.factionHash = factionHash;
  }


  public DestinyDefinitionsDestinyVendorDefinition failureStrings(List<String> failureStrings) {
    this.failureStrings = failureStrings;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addFailureStringsItem(String failureStringsItem) {
    if (this.failureStrings == null) {
      this.failureStrings = new ArrayList<>();
    }
    this.failureStrings.add(failureStringsItem);
    return this;
  }

  /**
   * If an item can&#39;t be purchased from the vendor, there may be many \&quot;custom\&quot;/game state specific reasons why not.  This is a list of localized strings with messages for those custom failures. The live BNet data will return a failureIndexes property for items that can&#39;t be purchased: using those values to index into this array, you can show the user the appropriate failure message for the item that can&#39;t be bought.
   * @return failureStrings
   */
  @javax.annotation.Nullable
  public List<String> getFailureStrings() {
    return failureStrings;
  }

  public void setFailureStrings(List<String> failureStrings) {
    this.failureStrings = failureStrings;
  }


  public DestinyDefinitionsDestinyVendorDefinition groups(List<DestinyDefinitionsDestinyVendorGroupReference> groups) {
    this.groups = groups;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addGroupsItem(DestinyDefinitionsDestinyVendorGroupReference groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * A vendor can be a part of 0 or 1 \&quot;groups\&quot; at a time: a group being a collection of Vendors related by either location or function/purpose. It&#39;s used for our our Companion Vendor UI. Only one of these can be active for a Vendor at a time.
   * @return groups
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyVendorGroupReference> getGroups() {
    return groups;
  }

  public void setGroups(List<DestinyDefinitionsDestinyVendorGroupReference> groups) {
    this.groups = groups;
  }


  public DestinyDefinitionsDestinyVendorDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDestinyVendorDefinition ignoreSaleItemHashes(List<Integer> ignoreSaleItemHashes) {
    this.ignoreSaleItemHashes = ignoreSaleItemHashes;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addIgnoreSaleItemHashesItem(Integer ignoreSaleItemHashesItem) {
    if (this.ignoreSaleItemHashes == null) {
      this.ignoreSaleItemHashes = new ArrayList<>();
    }
    this.ignoreSaleItemHashes.add(ignoreSaleItemHashesItem);
    return this;
  }

  /**
   * Some items don&#39;t make sense to return in the API, for example because they represent an action to be performed rather than an item being sold. I&#39;d rather we not do this, but at least in the short term this is a workable workaround.
   * @return ignoreSaleItemHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getIgnoreSaleItemHashes() {
    return ignoreSaleItemHashes;
  }

  public void setIgnoreSaleItemHashes(List<Integer> ignoreSaleItemHashes) {
    this.ignoreSaleItemHashes = ignoreSaleItemHashes;
  }


  public DestinyDefinitionsDestinyVendorDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinyVendorDefinition inhibitBuying(Boolean inhibitBuying) {
    this.inhibitBuying = inhibitBuying;
    return this;
  }

  /**
   * If this is true, you aren&#39;t allowed to buy whatever the vendor is selling.
   * @return inhibitBuying
   */
  @javax.annotation.Nullable
  public Boolean getInhibitBuying() {
    return inhibitBuying;
  }

  public void setInhibitBuying(Boolean inhibitBuying) {
    this.inhibitBuying = inhibitBuying;
  }


  public DestinyDefinitionsDestinyVendorDefinition inhibitSelling(Boolean inhibitSelling) {
    this.inhibitSelling = inhibitSelling;
    return this;
  }

  /**
   * If this is true, you&#39;re not allowed to sell whatever the vendor is buying.
   * @return inhibitSelling
   */
  @javax.annotation.Nullable
  public Boolean getInhibitSelling() {
    return inhibitSelling;
  }

  public void setInhibitSelling(Boolean inhibitSelling) {
    this.inhibitSelling = inhibitSelling;
  }


  public DestinyDefinitionsDestinyVendorDefinition interactions(List<DestinyDefinitionsDestinyVendorInteractionDefinition> interactions) {
    this.interactions = interactions;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addInteractionsItem(DestinyDefinitionsDestinyVendorInteractionDefinition interactionsItem) {
    if (this.interactions == null) {
      this.interactions = new ArrayList<>();
    }
    this.interactions.add(interactionsItem);
    return this;
  }

  /**
   * In addition to selling items, vendors can have \&quot;interactions\&quot;: UI where you \&quot;talk\&quot; with the vendor and they offer you a reward, some item, or merely acknowledge via dialog that you did something cool.
   * @return interactions
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyVendorInteractionDefinition> getInteractions() {
    return interactions;
  }

  public void setInteractions(List<DestinyDefinitionsDestinyVendorInteractionDefinition> interactions) {
    this.interactions = interactions;
  }


  public DestinyDefinitionsDestinyVendorDefinition inventoryFlyouts(List<DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition> inventoryFlyouts) {
    this.inventoryFlyouts = inventoryFlyouts;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addInventoryFlyoutsItem(DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition inventoryFlyoutsItem) {
    if (this.inventoryFlyouts == null) {
      this.inventoryFlyouts = new ArrayList<>();
    }
    this.inventoryFlyouts.add(inventoryFlyoutsItem);
    return this;
  }

  /**
   * If the vendor shows you items from your own inventory - such as the Vault vendor does - this data describes the UI around showing those inventory buckets and which ones get shown.
   * @return inventoryFlyouts
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition> getInventoryFlyouts() {
    return inventoryFlyouts;
  }

  public void setInventoryFlyouts(List<DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition> inventoryFlyouts) {
    this.inventoryFlyouts = inventoryFlyouts;
  }


  public DestinyDefinitionsDestinyVendorDefinition itemList(List<DestinyDefinitionsDestinyVendorItemDefinition> itemList) {
    this.itemList = itemList;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addItemListItem(DestinyDefinitionsDestinyVendorItemDefinition itemListItem) {
    if (this.itemList == null) {
      this.itemList = new ArrayList<>();
    }
    this.itemList.add(itemListItem);
    return this;
  }

  /**
   * If the vendor sells items (or merely has a list of items to show like the \&quot;Sack\&quot; vendors do), this is the list of those items that the vendor can sell. From this list, only a subset will be available from the vendor at any given time, selected randomly and reset on the vendor&#39;s refresh interval.  Note that a vendor can sell the same item multiple ways: for instance, nothing stops a vendor from selling you some specific weapon but using two different currencies, or the same weapon at multiple \&quot;item levels\&quot;.
   * @return itemList
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyVendorItemDefinition> getItemList() {
    return itemList;
  }

  public void setItemList(List<DestinyDefinitionsDestinyVendorItemDefinition> itemList) {
    this.itemList = itemList;
  }


  public DestinyDefinitionsDestinyVendorDefinition locations(List<DestinyDefinitionsVendorsDestinyVendorLocationDefinition> locations) {
    this.locations = locations;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addLocationsItem(DestinyDefinitionsVendorsDestinyVendorLocationDefinition locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * A vendor can be at different places in the world depending on the game/character/account state. This is the list of possible locations for the vendor, along with conditions we use to determine which one is currently active.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsVendorsDestinyVendorLocationDefinition> getLocations() {
    return locations;
  }

  public void setLocations(List<DestinyDefinitionsVendorsDestinyVendorLocationDefinition> locations) {
    this.locations = locations;
  }


  public DestinyDefinitionsDestinyVendorDefinition originalCategories(List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> originalCategories) {
    this.originalCategories = originalCategories;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addOriginalCategoriesItem(DestinyDefinitionsDestinyVendorCategoryEntryDefinition originalCategoriesItem) {
    if (this.originalCategories == null) {
      this.originalCategories = new ArrayList<>();
    }
    this.originalCategories.add(originalCategoriesItem);
    return this;
  }

  /**
   * See the categories property for a description of categories and why originalCategories exists.
   * @return originalCategories
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> getOriginalCategories() {
    return originalCategories;
  }

  public void setOriginalCategories(List<DestinyDefinitionsDestinyVendorCategoryEntryDefinition> originalCategories) {
    this.originalCategories = originalCategories;
  }


  public DestinyDefinitionsDestinyVendorDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsDestinyVendorDefinition resetIntervalMinutes(Integer resetIntervalMinutes) {
    this.resetIntervalMinutes = resetIntervalMinutes;
    return this;
  }

  /**
   * A number used for calculating the frequency of a vendor&#39;s inventory resetting/refreshing.  Don&#39;t worry about calculating this - we do it on the server side and send you the next refresh date with the live data.
   * @return resetIntervalMinutes
   */
  @javax.annotation.Nullable
  public Integer getResetIntervalMinutes() {
    return resetIntervalMinutes;
  }

  public void setResetIntervalMinutes(Integer resetIntervalMinutes) {
    this.resetIntervalMinutes = resetIntervalMinutes;
  }


  public DestinyDefinitionsDestinyVendorDefinition resetOffsetMinutes(Integer resetOffsetMinutes) {
    this.resetOffsetMinutes = resetOffsetMinutes;
    return this;
  }

  /**
   * Again, used for reset/refreshing of inventory. Don&#39;t worry too much about it. Unless you want to.
   * @return resetOffsetMinutes
   */
  @javax.annotation.Nullable
  public Integer getResetOffsetMinutes() {
    return resetOffsetMinutes;
  }

  public void setResetOffsetMinutes(Integer resetOffsetMinutes) {
    this.resetOffsetMinutes = resetOffsetMinutes;
  }


  public DestinyDefinitionsDestinyVendorDefinition returnWithVendorRequest(Boolean returnWithVendorRequest) {
    this.returnWithVendorRequest = returnWithVendorRequest;
    return this;
  }

  /**
   * As many of you know, Vendor data has historically been pretty brutal on the BNet servers. In an effort to reduce this workload, only Vendors with this flag set will be returned on Vendor requests. This allows us to filter out Vendors that don&#39;t dynamic data that&#39;s particularly useful: things like \&quot;Preview/Sack\&quot; vendors, for example, that you can usually suss out the details for using just the definitions themselves.
   * @return returnWithVendorRequest
   */
  @javax.annotation.Nullable
  public Boolean getReturnWithVendorRequest() {
    return returnWithVendorRequest;
  }

  public void setReturnWithVendorRequest(Boolean returnWithVendorRequest) {
    this.returnWithVendorRequest = returnWithVendorRequest;
  }


  public DestinyDefinitionsDestinyVendorDefinition sellString(String sellString) {
    this.sellString = sellString;
    return this;
  }

  /**
   * Ditto for selling. Not that you can sell items to a vendor anymore. Will it come back? Who knows. The string&#39;s still there.
   * @return sellString
   */
  @javax.annotation.Nullable
  public String getSellString() {
    return sellString;
  }

  public void setSellString(String sellString) {
    this.sellString = sellString;
  }


  public DestinyDefinitionsDestinyVendorDefinition services(List<DestinyDefinitionsDestinyVendorServiceDefinition> services) {
    this.services = services;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addServicesItem(DestinyDefinitionsDestinyVendorServiceDefinition servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

  /**
   * BNet doesn&#39;t use this data yet, but it appears to be an optional list of flavor text about services that the Vendor can provide.
   * @return services
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyVendorServiceDefinition> getServices() {
    return services;
  }

  public void setServices(List<DestinyDefinitionsDestinyVendorServiceDefinition> services) {
    this.services = services;
  }


  public DestinyDefinitionsDestinyVendorDefinition unlockRanges(List<DatesDateRange> unlockRanges) {
    this.unlockRanges = unlockRanges;
    return this;
  }

  public DestinyDefinitionsDestinyVendorDefinition addUnlockRangesItem(DatesDateRange unlockRangesItem) {
    if (this.unlockRanges == null) {
      this.unlockRanges = new ArrayList<>();
    }
    this.unlockRanges.add(unlockRangesItem);
    return this;
  }

  /**
   * If we were able to predict the dates when this Vendor will be visible/available, this will be the list of those date ranges. Sadly, we&#39;re not able to predict this very frequently, so this will often be useless data.
   * @return unlockRanges
   */
  @javax.annotation.Nullable
  public List<DatesDateRange> getUnlockRanges() {
    return unlockRanges;
  }

  public void setUnlockRanges(List<DatesDateRange> unlockRanges) {
    this.unlockRanges = unlockRanges;
  }


  public DestinyDefinitionsDestinyVendorDefinition vendorBanner(String vendorBanner) {
    this.vendorBanner = vendorBanner;
    return this;
  }

  /**
   * If the vendor has a custom banner image, that can be found here.
   * @return vendorBanner
   */
  @javax.annotation.Nullable
  public String getVendorBanner() {
    return vendorBanner;
  }

  public void setVendorBanner(String vendorBanner) {
    this.vendorBanner = vendorBanner;
  }


  public DestinyDefinitionsDestinyVendorDefinition vendorIdentifier(String vendorIdentifier) {
    this.vendorIdentifier = vendorIdentifier;
    return this;
  }

  /**
   * The internal identifier for the Vendor. A holdover from the old days of Vendors, but we don&#39;t have time to refactor it away.
   * @return vendorIdentifier
   */
  @javax.annotation.Nullable
  public String getVendorIdentifier() {
    return vendorIdentifier;
  }

  public void setVendorIdentifier(String vendorIdentifier) {
    this.vendorIdentifier = vendorIdentifier;
  }


  public DestinyDefinitionsDestinyVendorDefinition vendorPortrait(String vendorPortrait) {
    this.vendorPortrait = vendorPortrait;
    return this;
  }

  /**
   * A portrait of the Vendor&#39;s smiling mug. Or frothing tentacles.
   * @return vendorPortrait
   */
  @javax.annotation.Nullable
  public String getVendorPortrait() {
    return vendorPortrait;
  }

  public void setVendorPortrait(String vendorPortrait) {
    this.vendorPortrait = vendorPortrait;
  }


  public DestinyDefinitionsDestinyVendorDefinition vendorProgressionType(Integer vendorProgressionType) {
    this.vendorProgressionType = vendorProgressionType;
    return this;
  }

  /**
   * The type of reward progression that this vendor has. Default - The original rank progression from token redemption. Ritual - Progression from ranks in ritual content. For example: Crucible (Shaxx), Gambit (Drifter), and Battlegrounds (War Table).
   * @return vendorProgressionType
   */
  @javax.annotation.Nullable
  public Integer getVendorProgressionType() {
    return vendorProgressionType;
  }

  public void setVendorProgressionType(Integer vendorProgressionType) {
    this.vendorProgressionType = vendorProgressionType;
  }


  public DestinyDefinitionsDestinyVendorDefinition vendorSubcategoryIdentifier(String vendorSubcategoryIdentifier) {
    this.vendorSubcategoryIdentifier = vendorSubcategoryIdentifier;
    return this;
  }

  /**
   * The identifier of the VendorCategoryDefinition for this vendor&#39;s subcategory.
   * @return vendorSubcategoryIdentifier
   */
  @javax.annotation.Nullable
  public String getVendorSubcategoryIdentifier() {
    return vendorSubcategoryIdentifier;
  }

  public void setVendorSubcategoryIdentifier(String vendorSubcategoryIdentifier) {
    this.vendorSubcategoryIdentifier = vendorSubcategoryIdentifier;
  }


  public DestinyDefinitionsDestinyVendorDefinition visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * If a vendor is not visible, we still have and will give vendor definition info, but we won&#39;t use them for things like Advisors or UI.
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyVendorDefinition destinyDefinitionsDestinyVendorDefinition = (DestinyDefinitionsDestinyVendorDefinition) o;
    return Objects.equals(this.acceptedItems, destinyDefinitionsDestinyVendorDefinition.acceptedItems) &&
        Objects.equals(this.actions, destinyDefinitionsDestinyVendorDefinition.actions) &&
        Objects.equals(this.buyString, destinyDefinitionsDestinyVendorDefinition.buyString) &&
        Objects.equals(this.categories, destinyDefinitionsDestinyVendorDefinition.categories) &&
        Objects.equals(this.consolidateCategories, destinyDefinitionsDestinyVendorDefinition.consolidateCategories) &&
        Objects.equals(this.displayCategories, destinyDefinitionsDestinyVendorDefinition.displayCategories) &&
        Objects.equals(this.displayItemHash, destinyDefinitionsDestinyVendorDefinition.displayItemHash) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinyVendorDefinition.displayProperties) &&
        Objects.equals(this.enabled, destinyDefinitionsDestinyVendorDefinition.enabled) &&
        Objects.equals(this.factionHash, destinyDefinitionsDestinyVendorDefinition.factionHash) &&
        Objects.equals(this.failureStrings, destinyDefinitionsDestinyVendorDefinition.failureStrings) &&
        Objects.equals(this.groups, destinyDefinitionsDestinyVendorDefinition.groups) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyVendorDefinition.hash) &&
        Objects.equals(this.ignoreSaleItemHashes, destinyDefinitionsDestinyVendorDefinition.ignoreSaleItemHashes) &&
        Objects.equals(this.index, destinyDefinitionsDestinyVendorDefinition.index) &&
        Objects.equals(this.inhibitBuying, destinyDefinitionsDestinyVendorDefinition.inhibitBuying) &&
        Objects.equals(this.inhibitSelling, destinyDefinitionsDestinyVendorDefinition.inhibitSelling) &&
        Objects.equals(this.interactions, destinyDefinitionsDestinyVendorDefinition.interactions) &&
        Objects.equals(this.inventoryFlyouts, destinyDefinitionsDestinyVendorDefinition.inventoryFlyouts) &&
        Objects.equals(this.itemList, destinyDefinitionsDestinyVendorDefinition.itemList) &&
        Objects.equals(this.locations, destinyDefinitionsDestinyVendorDefinition.locations) &&
        Objects.equals(this.originalCategories, destinyDefinitionsDestinyVendorDefinition.originalCategories) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyVendorDefinition.redacted) &&
        Objects.equals(this.resetIntervalMinutes, destinyDefinitionsDestinyVendorDefinition.resetIntervalMinutes) &&
        Objects.equals(this.resetOffsetMinutes, destinyDefinitionsDestinyVendorDefinition.resetOffsetMinutes) &&
        Objects.equals(this.returnWithVendorRequest, destinyDefinitionsDestinyVendorDefinition.returnWithVendorRequest) &&
        Objects.equals(this.sellString, destinyDefinitionsDestinyVendorDefinition.sellString) &&
        Objects.equals(this.services, destinyDefinitionsDestinyVendorDefinition.services) &&
        Objects.equals(this.unlockRanges, destinyDefinitionsDestinyVendorDefinition.unlockRanges) &&
        Objects.equals(this.vendorBanner, destinyDefinitionsDestinyVendorDefinition.vendorBanner) &&
        Objects.equals(this.vendorIdentifier, destinyDefinitionsDestinyVendorDefinition.vendorIdentifier) &&
        Objects.equals(this.vendorPortrait, destinyDefinitionsDestinyVendorDefinition.vendorPortrait) &&
        Objects.equals(this.vendorProgressionType, destinyDefinitionsDestinyVendorDefinition.vendorProgressionType) &&
        Objects.equals(this.vendorSubcategoryIdentifier, destinyDefinitionsDestinyVendorDefinition.vendorSubcategoryIdentifier) &&
        Objects.equals(this.visible, destinyDefinitionsDestinyVendorDefinition.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedItems, actions, buyString, categories, consolidateCategories, displayCategories, displayItemHash, displayProperties, enabled, factionHash, failureStrings, groups, hash, ignoreSaleItemHashes, index, inhibitBuying, inhibitSelling, interactions, inventoryFlyouts, itemList, locations, originalCategories, redacted, resetIntervalMinutes, resetOffsetMinutes, returnWithVendorRequest, sellString, services, unlockRanges, vendorBanner, vendorIdentifier, vendorPortrait, vendorProgressionType, vendorSubcategoryIdentifier, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyVendorDefinition {\n");
    sb.append("    acceptedItems: ").append(toIndentedString(acceptedItems)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    buyString: ").append(toIndentedString(buyString)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    consolidateCategories: ").append(toIndentedString(consolidateCategories)).append("\n");
    sb.append("    displayCategories: ").append(toIndentedString(displayCategories)).append("\n");
    sb.append("    displayItemHash: ").append(toIndentedString(displayItemHash)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    factionHash: ").append(toIndentedString(factionHash)).append("\n");
    sb.append("    failureStrings: ").append(toIndentedString(failureStrings)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    ignoreSaleItemHashes: ").append(toIndentedString(ignoreSaleItemHashes)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    inhibitBuying: ").append(toIndentedString(inhibitBuying)).append("\n");
    sb.append("    inhibitSelling: ").append(toIndentedString(inhibitSelling)).append("\n");
    sb.append("    interactions: ").append(toIndentedString(interactions)).append("\n");
    sb.append("    inventoryFlyouts: ").append(toIndentedString(inventoryFlyouts)).append("\n");
    sb.append("    itemList: ").append(toIndentedString(itemList)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    originalCategories: ").append(toIndentedString(originalCategories)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    resetIntervalMinutes: ").append(toIndentedString(resetIntervalMinutes)).append("\n");
    sb.append("    resetOffsetMinutes: ").append(toIndentedString(resetOffsetMinutes)).append("\n");
    sb.append("    returnWithVendorRequest: ").append(toIndentedString(returnWithVendorRequest)).append("\n");
    sb.append("    sellString: ").append(toIndentedString(sellString)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    unlockRanges: ").append(toIndentedString(unlockRanges)).append("\n");
    sb.append("    vendorBanner: ").append(toIndentedString(vendorBanner)).append("\n");
    sb.append("    vendorIdentifier: ").append(toIndentedString(vendorIdentifier)).append("\n");
    sb.append("    vendorPortrait: ").append(toIndentedString(vendorPortrait)).append("\n");
    sb.append("    vendorProgressionType: ").append(toIndentedString(vendorProgressionType)).append("\n");
    sb.append("    vendorSubcategoryIdentifier: ").append(toIndentedString(vendorSubcategoryIdentifier)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptedItems");
    openapiFields.add("actions");
    openapiFields.add("buyString");
    openapiFields.add("categories");
    openapiFields.add("consolidateCategories");
    openapiFields.add("displayCategories");
    openapiFields.add("displayItemHash");
    openapiFields.add("displayProperties");
    openapiFields.add("enabled");
    openapiFields.add("factionHash");
    openapiFields.add("failureStrings");
    openapiFields.add("groups");
    openapiFields.add("hash");
    openapiFields.add("ignoreSaleItemHashes");
    openapiFields.add("index");
    openapiFields.add("inhibitBuying");
    openapiFields.add("inhibitSelling");
    openapiFields.add("interactions");
    openapiFields.add("inventoryFlyouts");
    openapiFields.add("itemList");
    openapiFields.add("locations");
    openapiFields.add("originalCategories");
    openapiFields.add("redacted");
    openapiFields.add("resetIntervalMinutes");
    openapiFields.add("resetOffsetMinutes");
    openapiFields.add("returnWithVendorRequest");
    openapiFields.add("sellString");
    openapiFields.add("services");
    openapiFields.add("unlockRanges");
    openapiFields.add("vendorBanner");
    openapiFields.add("vendorIdentifier");
    openapiFields.add("vendorPortrait");
    openapiFields.add("vendorProgressionType");
    openapiFields.add("vendorSubcategoryIdentifier");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyVendorDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyVendorDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyVendorDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyVendorDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyVendorDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyVendorDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("acceptedItems") != null && !jsonObj.get("acceptedItems").isJsonNull()) {
        JsonArray jsonArrayacceptedItems = jsonObj.getAsJsonArray("acceptedItems");
        if (jsonArrayacceptedItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acceptedItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acceptedItems` to be an array in the JSON string but got `%s`", jsonObj.get("acceptedItems").toString()));
          }

          // validate the optional field `acceptedItems` (array)
          for (int i = 0; i < jsonArrayacceptedItems.size(); i++) {
            DestinyDefinitionsDestinyVendorAcceptedItemDefinition.validateJsonElement(jsonArrayacceptedItems.get(i));
          };
        }
      }
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            DestinyDefinitionsDestinyVendorActionDefinition.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      if ((jsonObj.get("buyString") != null && !jsonObj.get("buyString").isJsonNull()) && !jsonObj.get("buyString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyString").toString()));
      }
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            DestinyDefinitionsDestinyVendorCategoryEntryDefinition.validateJsonElement(jsonArraycategories.get(i));
          };
        }
      }
      if (jsonObj.get("displayCategories") != null && !jsonObj.get("displayCategories").isJsonNull()) {
        JsonArray jsonArraydisplayCategories = jsonObj.getAsJsonArray("displayCategories");
        if (jsonArraydisplayCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("displayCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `displayCategories` to be an array in the JSON string but got `%s`", jsonObj.get("displayCategories").toString()));
          }

          // validate the optional field `displayCategories` (array)
          for (int i = 0; i < jsonArraydisplayCategories.size(); i++) {
            DestinyDefinitionsDestinyDisplayCategoryDefinition.validateJsonElement(jsonArraydisplayCategories.get(i));
          };
        }
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("failureStrings") != null && !jsonObj.get("failureStrings").isJsonNull() && !jsonObj.get("failureStrings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureStrings` to be an array in the JSON string but got `%s`", jsonObj.get("failureStrings").toString()));
      }
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            DestinyDefinitionsDestinyVendorGroupReference.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ignoreSaleItemHashes") != null && !jsonObj.get("ignoreSaleItemHashes").isJsonNull() && !jsonObj.get("ignoreSaleItemHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignoreSaleItemHashes` to be an array in the JSON string but got `%s`", jsonObj.get("ignoreSaleItemHashes").toString()));
      }
      if (jsonObj.get("interactions") != null && !jsonObj.get("interactions").isJsonNull()) {
        JsonArray jsonArrayinteractions = jsonObj.getAsJsonArray("interactions");
        if (jsonArrayinteractions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("interactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `interactions` to be an array in the JSON string but got `%s`", jsonObj.get("interactions").toString()));
          }

          // validate the optional field `interactions` (array)
          for (int i = 0; i < jsonArrayinteractions.size(); i++) {
            DestinyDefinitionsDestinyVendorInteractionDefinition.validateJsonElement(jsonArrayinteractions.get(i));
          };
        }
      }
      if (jsonObj.get("inventoryFlyouts") != null && !jsonObj.get("inventoryFlyouts").isJsonNull()) {
        JsonArray jsonArrayinventoryFlyouts = jsonObj.getAsJsonArray("inventoryFlyouts");
        if (jsonArrayinventoryFlyouts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inventoryFlyouts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inventoryFlyouts` to be an array in the JSON string but got `%s`", jsonObj.get("inventoryFlyouts").toString()));
          }

          // validate the optional field `inventoryFlyouts` (array)
          for (int i = 0; i < jsonArrayinventoryFlyouts.size(); i++) {
            DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition.validateJsonElement(jsonArrayinventoryFlyouts.get(i));
          };
        }
      }
      if (jsonObj.get("itemList") != null && !jsonObj.get("itemList").isJsonNull()) {
        JsonArray jsonArrayitemList = jsonObj.getAsJsonArray("itemList");
        if (jsonArrayitemList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("itemList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `itemList` to be an array in the JSON string but got `%s`", jsonObj.get("itemList").toString()));
          }

          // validate the optional field `itemList` (array)
          for (int i = 0; i < jsonArrayitemList.size(); i++) {
            DestinyDefinitionsDestinyVendorItemDefinition.validateJsonElement(jsonArrayitemList.get(i));
          };
        }
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            DestinyDefinitionsVendorsDestinyVendorLocationDefinition.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      if (jsonObj.get("originalCategories") != null && !jsonObj.get("originalCategories").isJsonNull()) {
        JsonArray jsonArrayoriginalCategories = jsonObj.getAsJsonArray("originalCategories");
        if (jsonArrayoriginalCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("originalCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `originalCategories` to be an array in the JSON string but got `%s`", jsonObj.get("originalCategories").toString()));
          }

          // validate the optional field `originalCategories` (array)
          for (int i = 0; i < jsonArrayoriginalCategories.size(); i++) {
            DestinyDefinitionsDestinyVendorCategoryEntryDefinition.validateJsonElement(jsonArrayoriginalCategories.get(i));
          };
        }
      }
      if ((jsonObj.get("sellString") != null && !jsonObj.get("sellString").isJsonNull()) && !jsonObj.get("sellString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellString").toString()));
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            DestinyDefinitionsDestinyVendorServiceDefinition.validateJsonElement(jsonArrayservices.get(i));
          };
        }
      }
      if (jsonObj.get("unlockRanges") != null && !jsonObj.get("unlockRanges").isJsonNull()) {
        JsonArray jsonArrayunlockRanges = jsonObj.getAsJsonArray("unlockRanges");
        if (jsonArrayunlockRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unlockRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unlockRanges` to be an array in the JSON string but got `%s`", jsonObj.get("unlockRanges").toString()));
          }

          // validate the optional field `unlockRanges` (array)
          for (int i = 0; i < jsonArrayunlockRanges.size(); i++) {
            DatesDateRange.validateJsonElement(jsonArrayunlockRanges.get(i));
          };
        }
      }
      if ((jsonObj.get("vendorBanner") != null && !jsonObj.get("vendorBanner").isJsonNull()) && !jsonObj.get("vendorBanner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorBanner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorBanner").toString()));
      }
      if ((jsonObj.get("vendorIdentifier") != null && !jsonObj.get("vendorIdentifier").isJsonNull()) && !jsonObj.get("vendorIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorIdentifier").toString()));
      }
      if ((jsonObj.get("vendorPortrait") != null && !jsonObj.get("vendorPortrait").isJsonNull()) && !jsonObj.get("vendorPortrait").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorPortrait` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorPortrait").toString()));
      }
      if ((jsonObj.get("vendorSubcategoryIdentifier") != null && !jsonObj.get("vendorSubcategoryIdentifier").isJsonNull()) && !jsonObj.get("vendorSubcategoryIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorSubcategoryIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorSubcategoryIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyVendorDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyVendorDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyVendorDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyVendorDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyVendorDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyVendorDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyVendorDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyVendorDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyVendorDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyVendorDefinition
   */
  public static DestinyDefinitionsDestinyVendorDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyVendorDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyVendorDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

