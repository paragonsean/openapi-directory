/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * These properties are an attempt to categorize talent node steps by certain common properties. See the related enumerations for the type of properties being categorized.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyTalentNodeStepGroups {
  public static final String SERIALIZED_NAME_DAMAGE_TYPES = "damageTypes";
  @SerializedName(SERIALIZED_NAME_DAMAGE_TYPES)
  private Integer damageTypes;

  public static final String SERIALIZED_NAME_GUARDIAN_ATTRIBUTES = "guardianAttributes";
  @SerializedName(SERIALIZED_NAME_GUARDIAN_ATTRIBUTES)
  private Integer guardianAttributes;

  public static final String SERIALIZED_NAME_IMPACT_EFFECTS = "impactEffects";
  @SerializedName(SERIALIZED_NAME_IMPACT_EFFECTS)
  private Integer impactEffects;

  public static final String SERIALIZED_NAME_LIGHT_ABILITIES = "lightAbilities";
  @SerializedName(SERIALIZED_NAME_LIGHT_ABILITIES)
  private Integer lightAbilities;

  public static final String SERIALIZED_NAME_WEAPON_PERFORMANCE = "weaponPerformance";
  @SerializedName(SERIALIZED_NAME_WEAPON_PERFORMANCE)
  private Integer weaponPerformance;

  public DestinyDefinitionsDestinyTalentNodeStepGroups() {
  }

  public DestinyDefinitionsDestinyTalentNodeStepGroups damageTypes(Integer damageTypes) {
    this.damageTypes = damageTypes;
    return this;
  }

  /**
   * Get damageTypes
   * @return damageTypes
   */
  @javax.annotation.Nullable
  public Integer getDamageTypes() {
    return damageTypes;
  }

  public void setDamageTypes(Integer damageTypes) {
    this.damageTypes = damageTypes;
  }


  public DestinyDefinitionsDestinyTalentNodeStepGroups guardianAttributes(Integer guardianAttributes) {
    this.guardianAttributes = guardianAttributes;
    return this;
  }

  /**
   * Get guardianAttributes
   * @return guardianAttributes
   */
  @javax.annotation.Nullable
  public Integer getGuardianAttributes() {
    return guardianAttributes;
  }

  public void setGuardianAttributes(Integer guardianAttributes) {
    this.guardianAttributes = guardianAttributes;
  }


  public DestinyDefinitionsDestinyTalentNodeStepGroups impactEffects(Integer impactEffects) {
    this.impactEffects = impactEffects;
    return this;
  }

  /**
   * Get impactEffects
   * @return impactEffects
   */
  @javax.annotation.Nullable
  public Integer getImpactEffects() {
    return impactEffects;
  }

  public void setImpactEffects(Integer impactEffects) {
    this.impactEffects = impactEffects;
  }


  public DestinyDefinitionsDestinyTalentNodeStepGroups lightAbilities(Integer lightAbilities) {
    this.lightAbilities = lightAbilities;
    return this;
  }

  /**
   * Get lightAbilities
   * @return lightAbilities
   */
  @javax.annotation.Nullable
  public Integer getLightAbilities() {
    return lightAbilities;
  }

  public void setLightAbilities(Integer lightAbilities) {
    this.lightAbilities = lightAbilities;
  }


  public DestinyDefinitionsDestinyTalentNodeStepGroups weaponPerformance(Integer weaponPerformance) {
    this.weaponPerformance = weaponPerformance;
    return this;
  }

  /**
   * Get weaponPerformance
   * @return weaponPerformance
   */
  @javax.annotation.Nullable
  public Integer getWeaponPerformance() {
    return weaponPerformance;
  }

  public void setWeaponPerformance(Integer weaponPerformance) {
    this.weaponPerformance = weaponPerformance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyTalentNodeStepGroups destinyDefinitionsDestinyTalentNodeStepGroups = (DestinyDefinitionsDestinyTalentNodeStepGroups) o;
    return Objects.equals(this.damageTypes, destinyDefinitionsDestinyTalentNodeStepGroups.damageTypes) &&
        Objects.equals(this.guardianAttributes, destinyDefinitionsDestinyTalentNodeStepGroups.guardianAttributes) &&
        Objects.equals(this.impactEffects, destinyDefinitionsDestinyTalentNodeStepGroups.impactEffects) &&
        Objects.equals(this.lightAbilities, destinyDefinitionsDestinyTalentNodeStepGroups.lightAbilities) &&
        Objects.equals(this.weaponPerformance, destinyDefinitionsDestinyTalentNodeStepGroups.weaponPerformance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(damageTypes, guardianAttributes, impactEffects, lightAbilities, weaponPerformance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyTalentNodeStepGroups {\n");
    sb.append("    damageTypes: ").append(toIndentedString(damageTypes)).append("\n");
    sb.append("    guardianAttributes: ").append(toIndentedString(guardianAttributes)).append("\n");
    sb.append("    impactEffects: ").append(toIndentedString(impactEffects)).append("\n");
    sb.append("    lightAbilities: ").append(toIndentedString(lightAbilities)).append("\n");
    sb.append("    weaponPerformance: ").append(toIndentedString(weaponPerformance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("damageTypes");
    openapiFields.add("guardianAttributes");
    openapiFields.add("impactEffects");
    openapiFields.add("lightAbilities");
    openapiFields.add("weaponPerformance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyTalentNodeStepGroups
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyTalentNodeStepGroups.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyTalentNodeStepGroups is not found in the empty JSON string", DestinyDefinitionsDestinyTalentNodeStepGroups.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyTalentNodeStepGroups.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyTalentNodeStepGroups` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyTalentNodeStepGroups.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyTalentNodeStepGroups' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyTalentNodeStepGroups> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyTalentNodeStepGroups.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyTalentNodeStepGroups>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyTalentNodeStepGroups value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyTalentNodeStepGroups read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyTalentNodeStepGroups given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyTalentNodeStepGroups
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyTalentNodeStepGroups
   */
  public static DestinyDefinitionsDestinyTalentNodeStepGroups fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyTalentNodeStepGroups.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyTalentNodeStepGroups to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

