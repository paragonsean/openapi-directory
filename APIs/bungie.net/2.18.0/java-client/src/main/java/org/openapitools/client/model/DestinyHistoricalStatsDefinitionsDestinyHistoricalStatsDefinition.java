/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Integer category;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private Integer group;

  public static final String SERIALIZED_NAME_ICON_IMAGE = "iconImage";
  @SerializedName(SERIALIZED_NAME_ICON_IMAGE)
  private String iconImage;

  public static final String SERIALIZED_NAME_MEDAL_TIER_HASH = "medalTierHash";
  @SerializedName(SERIALIZED_NAME_MEDAL_TIER_HASH)
  private Integer medalTierHash;

  /**
   * Optional icon for the statistic
   */
  @JsonAdapter(MergeMethodEnum.Adapter.class)
  public enum MergeMethodEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    MergeMethodEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MergeMethodEnum fromValue(Integer value) {
      for (MergeMethodEnum b : MergeMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MergeMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MergeMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MergeMethodEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return MergeMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      MergeMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MERGE_METHOD = "mergeMethod";
  @SerializedName(SERIALIZED_NAME_MERGE_METHOD)
  private MergeMethodEnum mergeMethod;

  public static final String SERIALIZED_NAME_MODES = "modes";
  @SerializedName(SERIALIZED_NAME_MODES)
  private List<Integer> modes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERIOD_TYPES = "periodTypes";
  @SerializedName(SERIALIZED_NAME_PERIOD_TYPES)
  private List<Integer> periodTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAT_DESCRIPTION = "statDescription";
  @SerializedName(SERIALIZED_NAME_STAT_DESCRIPTION)
  private String statDescription;

  public static final String SERIALIZED_NAME_STAT_ID = "statId";
  @SerializedName(SERIALIZED_NAME_STAT_ID)
  private String statId;

  public static final String SERIALIZED_NAME_STAT_NAME = "statName";
  @SerializedName(SERIALIZED_NAME_STAT_NAME)
  private String statName;

  public static final String SERIALIZED_NAME_STAT_NAME_ABBR = "statNameAbbr";
  @SerializedName(SERIALIZED_NAME_STAT_NAME_ABBR)
  private String statNameAbbr;

  public static final String SERIALIZED_NAME_UNIT_LABEL = "unitLabel";
  @SerializedName(SERIALIZED_NAME_UNIT_LABEL)
  private String unitLabel;

  public static final String SERIALIZED_NAME_UNIT_TYPE = "unitType";
  @SerializedName(SERIALIZED_NAME_UNIT_TYPE)
  private Integer unitType;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition() {
  }

  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition category(Integer category) {
    this.category = category;
    return this;
  }

  /**
   * Category for the stat.
   * @return category
   */
  @javax.annotation.Nullable
  public Integer getCategory() {
    return category;
  }

  public void setCategory(Integer category) {
    this.category = category;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition group(Integer group) {
    this.group = group;
    return this;
  }

  /**
   * Statistic group
   * @return group
   */
  @javax.annotation.Nullable
  public Integer getGroup() {
    return group;
  }

  public void setGroup(Integer group) {
    this.group = group;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition iconImage(String iconImage) {
    this.iconImage = iconImage;
    return this;
  }

  /**
   * Optional URI to an icon for the statistic
   * @return iconImage
   */
  @javax.annotation.Nullable
  public String getIconImage() {
    return iconImage;
  }

  public void setIconImage(String iconImage) {
    this.iconImage = iconImage;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition medalTierHash(Integer medalTierHash) {
    this.medalTierHash = medalTierHash;
    return this;
  }

  /**
   * The tier associated with this medal - be it implicitly or explicitly.
   * @return medalTierHash
   */
  @javax.annotation.Nullable
  public Integer getMedalTierHash() {
    return medalTierHash;
  }

  public void setMedalTierHash(Integer medalTierHash) {
    this.medalTierHash = medalTierHash;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition mergeMethod(MergeMethodEnum mergeMethod) {
    this.mergeMethod = mergeMethod;
    return this;
  }

  /**
   * Optional icon for the statistic
   * @return mergeMethod
   */
  @javax.annotation.Nullable
  public MergeMethodEnum getMergeMethod() {
    return mergeMethod;
  }

  public void setMergeMethod(MergeMethodEnum mergeMethod) {
    this.mergeMethod = mergeMethod;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition modes(List<Integer> modes) {
    this.modes = modes;
    return this;
  }

  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition addModesItem(Integer modesItem) {
    if (this.modes == null) {
      this.modes = new ArrayList<>();
    }
    this.modes.add(modesItem);
    return this;
  }

  /**
   * Game modes where this statistic can be reported.
   * @return modes
   */
  @javax.annotation.Nullable
  public List<Integer> getModes() {
    return modes;
  }

  public void setModes(List<Integer> modes) {
    this.modes = modes;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition periodTypes(List<Integer> periodTypes) {
    this.periodTypes = periodTypes;
    return this;
  }

  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition addPeriodTypesItem(Integer periodTypesItem) {
    if (this.periodTypes == null) {
      this.periodTypes = new ArrayList<>();
    }
    this.periodTypes.add(periodTypesItem);
    return this;
  }

  /**
   * Time periods the statistic covers
   * @return periodTypes
   */
  @javax.annotation.Nullable
  public List<Integer> getPeriodTypes() {
    return periodTypes;
  }

  public void setPeriodTypes(List<Integer> periodTypes) {
    this.periodTypes = periodTypes;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition statDescription(String statDescription) {
    this.statDescription = statDescription;
    return this;
  }

  /**
   * Description of a stat if applicable.
   * @return statDescription
   */
  @javax.annotation.Nullable
  public String getStatDescription() {
    return statDescription;
  }

  public void setStatDescription(String statDescription) {
    this.statDescription = statDescription;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition statId(String statId) {
    this.statId = statId;
    return this;
  }

  /**
   * Unique programmer friendly ID for this stat
   * @return statId
   */
  @javax.annotation.Nullable
  public String getStatId() {
    return statId;
  }

  public void setStatId(String statId) {
    this.statId = statId;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition statName(String statName) {
    this.statName = statName;
    return this;
  }

  /**
   * Display name
   * @return statName
   */
  @javax.annotation.Nullable
  public String getStatName() {
    return statName;
  }

  public void setStatName(String statName) {
    this.statName = statName;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition statNameAbbr(String statNameAbbr) {
    this.statNameAbbr = statNameAbbr;
    return this;
  }

  /**
   * Display name abbreviated
   * @return statNameAbbr
   */
  @javax.annotation.Nullable
  public String getStatNameAbbr() {
    return statNameAbbr;
  }

  public void setStatNameAbbr(String statNameAbbr) {
    this.statNameAbbr = statNameAbbr;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition unitLabel(String unitLabel) {
    this.unitLabel = unitLabel;
    return this;
  }

  /**
   * Localized Unit Name for the stat.
   * @return unitLabel
   */
  @javax.annotation.Nullable
  public String getUnitLabel() {
    return unitLabel;
  }

  public void setUnitLabel(String unitLabel) {
    this.unitLabel = unitLabel;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition unitType(Integer unitType) {
    this.unitType = unitType;
    return this;
  }

  /**
   * Unit, if any, for the statistic
   * @return unitType
   */
  @javax.annotation.Nullable
  public Integer getUnitType() {
    return unitType;
  }

  public void setUnitType(Integer unitType) {
    this.unitType = unitType;
  }


  public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Weight assigned to this stat indicating its relative impressiveness.
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition = (DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition) o;
    return Objects.equals(this.category, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.category) &&
        Objects.equals(this.group, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.group) &&
        Objects.equals(this.iconImage, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.iconImage) &&
        Objects.equals(this.medalTierHash, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.medalTierHash) &&
        Objects.equals(this.mergeMethod, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.mergeMethod) &&
        Objects.equals(this.modes, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.modes) &&
        Objects.equals(this.periodTypes, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.periodTypes) &&
        Objects.equals(this.statDescription, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.statDescription) &&
        Objects.equals(this.statId, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.statId) &&
        Objects.equals(this.statName, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.statName) &&
        Objects.equals(this.statNameAbbr, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.statNameAbbr) &&
        Objects.equals(this.unitLabel, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.unitLabel) &&
        Objects.equals(this.unitType, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.unitType) &&
        Objects.equals(this.weight, destinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, group, iconImage, medalTierHash, mergeMethod, modes, periodTypes, statDescription, statId, statName, statNameAbbr, unitLabel, unitType, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    iconImage: ").append(toIndentedString(iconImage)).append("\n");
    sb.append("    medalTierHash: ").append(toIndentedString(medalTierHash)).append("\n");
    sb.append("    mergeMethod: ").append(toIndentedString(mergeMethod)).append("\n");
    sb.append("    modes: ").append(toIndentedString(modes)).append("\n");
    sb.append("    periodTypes: ").append(toIndentedString(periodTypes)).append("\n");
    sb.append("    statDescription: ").append(toIndentedString(statDescription)).append("\n");
    sb.append("    statId: ").append(toIndentedString(statId)).append("\n");
    sb.append("    statName: ").append(toIndentedString(statName)).append("\n");
    sb.append("    statNameAbbr: ").append(toIndentedString(statNameAbbr)).append("\n");
    sb.append("    unitLabel: ").append(toIndentedString(unitLabel)).append("\n");
    sb.append("    unitType: ").append(toIndentedString(unitType)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("group");
    openapiFields.add("iconImage");
    openapiFields.add("medalTierHash");
    openapiFields.add("mergeMethod");
    openapiFields.add("modes");
    openapiFields.add("periodTypes");
    openapiFields.add("statDescription");
    openapiFields.add("statId");
    openapiFields.add("statName");
    openapiFields.add("statNameAbbr");
    openapiFields.add("unitLabel");
    openapiFields.add("unitType");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition is not found in the empty JSON string", DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("iconImage") != null && !jsonObj.get("iconImage").isJsonNull()) && !jsonObj.get("iconImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconImage").toString()));
      }
      // validate the optional field `mergeMethod`
      if (jsonObj.get("mergeMethod") != null && !jsonObj.get("mergeMethod").isJsonNull()) {
        MergeMethodEnum.validateJsonElement(jsonObj.get("mergeMethod"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modes") != null && !jsonObj.get("modes").isJsonNull() && !jsonObj.get("modes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modes` to be an array in the JSON string but got `%s`", jsonObj.get("modes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("periodTypes") != null && !jsonObj.get("periodTypes").isJsonNull() && !jsonObj.get("periodTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `periodTypes` to be an array in the JSON string but got `%s`", jsonObj.get("periodTypes").toString()));
      }
      if ((jsonObj.get("statDescription") != null && !jsonObj.get("statDescription").isJsonNull()) && !jsonObj.get("statDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statDescription").toString()));
      }
      if ((jsonObj.get("statId") != null && !jsonObj.get("statId").isJsonNull()) && !jsonObj.get("statId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statId").toString()));
      }
      if ((jsonObj.get("statName") != null && !jsonObj.get("statName").isJsonNull()) && !jsonObj.get("statName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statName").toString()));
      }
      if ((jsonObj.get("statNameAbbr") != null && !jsonObj.get("statNameAbbr").isJsonNull()) && !jsonObj.get("statNameAbbr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statNameAbbr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statNameAbbr").toString()));
      }
      if ((jsonObj.get("unitLabel") != null && !jsonObj.get("unitLabel").isJsonNull()) && !jsonObj.get("unitLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition
   */
  public static DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition.class);
  }

  /**
   * Convert an instance of DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

