/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyEntitiesItemsDestinyItemInstanceEnergy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyEntitiesItemsDestinyItemInstanceEnergy {
  public static final String SERIALIZED_NAME_ENERGY_CAPACITY = "energyCapacity";
  @SerializedName(SERIALIZED_NAME_ENERGY_CAPACITY)
  private Integer energyCapacity;

  public static final String SERIALIZED_NAME_ENERGY_TYPE = "energyType";
  @SerializedName(SERIALIZED_NAME_ENERGY_TYPE)
  private Integer energyType;

  public static final String SERIALIZED_NAME_ENERGY_TYPE_HASH = "energyTypeHash";
  @SerializedName(SERIALIZED_NAME_ENERGY_TYPE_HASH)
  private Integer energyTypeHash;

  public static final String SERIALIZED_NAME_ENERGY_UNUSED = "energyUnused";
  @SerializedName(SERIALIZED_NAME_ENERGY_UNUSED)
  private Integer energyUnused;

  public static final String SERIALIZED_NAME_ENERGY_USED = "energyUsed";
  @SerializedName(SERIALIZED_NAME_ENERGY_USED)
  private Integer energyUsed;

  public DestinyEntitiesItemsDestinyItemInstanceEnergy() {
  }

  public DestinyEntitiesItemsDestinyItemInstanceEnergy energyCapacity(Integer energyCapacity) {
    this.energyCapacity = energyCapacity;
    return this;
  }

  /**
   * The total capacity of Energy that the item currently has, regardless of if it is currently being used.
   * @return energyCapacity
   */
  @javax.annotation.Nullable
  public Integer getEnergyCapacity() {
    return energyCapacity;
  }

  public void setEnergyCapacity(Integer energyCapacity) {
    this.energyCapacity = energyCapacity;
  }


  public DestinyEntitiesItemsDestinyItemInstanceEnergy energyType(Integer energyType) {
    this.energyType = energyType;
    return this;
  }

  /**
   * This is the enum version of the Energy Type value, for convenience.
   * @return energyType
   */
  @javax.annotation.Nullable
  public Integer getEnergyType() {
    return energyType;
  }

  public void setEnergyType(Integer energyType) {
    this.energyType = energyType;
  }


  public DestinyEntitiesItemsDestinyItemInstanceEnergy energyTypeHash(Integer energyTypeHash) {
    this.energyTypeHash = energyTypeHash;
    return this;
  }

  /**
   * The type of energy for this item. Plugs that require Energy can only be inserted if they have the \&quot;Any\&quot; Energy Type or the matching energy type of this item. This is a reference to the DestinyEnergyTypeDefinition for the energy type, where you can find extended info about it.
   * @return energyTypeHash
   */
  @javax.annotation.Nullable
  public Integer getEnergyTypeHash() {
    return energyTypeHash;
  }

  public void setEnergyTypeHash(Integer energyTypeHash) {
    this.energyTypeHash = energyTypeHash;
  }


  public DestinyEntitiesItemsDestinyItemInstanceEnergy energyUnused(Integer energyUnused) {
    this.energyUnused = energyUnused;
    return this;
  }

  /**
   * The amount of energy still available for inserting new plugs.
   * @return energyUnused
   */
  @javax.annotation.Nullable
  public Integer getEnergyUnused() {
    return energyUnused;
  }

  public void setEnergyUnused(Integer energyUnused) {
    this.energyUnused = energyUnused;
  }


  public DestinyEntitiesItemsDestinyItemInstanceEnergy energyUsed(Integer energyUsed) {
    this.energyUsed = energyUsed;
    return this;
  }

  /**
   * The amount of Energy currently in use by inserted plugs.
   * @return energyUsed
   */
  @javax.annotation.Nullable
  public Integer getEnergyUsed() {
    return energyUsed;
  }

  public void setEnergyUsed(Integer energyUsed) {
    this.energyUsed = energyUsed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesItemsDestinyItemInstanceEnergy destinyEntitiesItemsDestinyItemInstanceEnergy = (DestinyEntitiesItemsDestinyItemInstanceEnergy) o;
    return Objects.equals(this.energyCapacity, destinyEntitiesItemsDestinyItemInstanceEnergy.energyCapacity) &&
        Objects.equals(this.energyType, destinyEntitiesItemsDestinyItemInstanceEnergy.energyType) &&
        Objects.equals(this.energyTypeHash, destinyEntitiesItemsDestinyItemInstanceEnergy.energyTypeHash) &&
        Objects.equals(this.energyUnused, destinyEntitiesItemsDestinyItemInstanceEnergy.energyUnused) &&
        Objects.equals(this.energyUsed, destinyEntitiesItemsDestinyItemInstanceEnergy.energyUsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(energyCapacity, energyType, energyTypeHash, energyUnused, energyUsed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesItemsDestinyItemInstanceEnergy {\n");
    sb.append("    energyCapacity: ").append(toIndentedString(energyCapacity)).append("\n");
    sb.append("    energyType: ").append(toIndentedString(energyType)).append("\n");
    sb.append("    energyTypeHash: ").append(toIndentedString(energyTypeHash)).append("\n");
    sb.append("    energyUnused: ").append(toIndentedString(energyUnused)).append("\n");
    sb.append("    energyUsed: ").append(toIndentedString(energyUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("energyCapacity");
    openapiFields.add("energyType");
    openapiFields.add("energyTypeHash");
    openapiFields.add("energyUnused");
    openapiFields.add("energyUsed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyEntitiesItemsDestinyItemInstanceEnergy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyEntitiesItemsDestinyItemInstanceEnergy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyEntitiesItemsDestinyItemInstanceEnergy is not found in the empty JSON string", DestinyEntitiesItemsDestinyItemInstanceEnergy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyEntitiesItemsDestinyItemInstanceEnergy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyEntitiesItemsDestinyItemInstanceEnergy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyEntitiesItemsDestinyItemInstanceEnergy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyEntitiesItemsDestinyItemInstanceEnergy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyEntitiesItemsDestinyItemInstanceEnergy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyEntitiesItemsDestinyItemInstanceEnergy.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyEntitiesItemsDestinyItemInstanceEnergy>() {
           @Override
           public void write(JsonWriter out, DestinyEntitiesItemsDestinyItemInstanceEnergy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyEntitiesItemsDestinyItemInstanceEnergy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyEntitiesItemsDestinyItemInstanceEnergy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyEntitiesItemsDestinyItemInstanceEnergy
   * @throws IOException if the JSON string is invalid with respect to DestinyEntitiesItemsDestinyItemInstanceEnergy
   */
  public static DestinyEntitiesItemsDestinyItemInstanceEnergy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyEntitiesItemsDestinyItemInstanceEnergy.class);
  }

  /**
   * Convert an instance of DestinyEntitiesItemsDestinyItemInstanceEnergy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

