/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyProgressionRewardItemQuantity;
import org.openapitools.client.model.DestinyDefinitionsDestinyProgressionStepDefinition;
import org.openapitools.client.model.DestinyMiscDestinyColor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A \&quot;Progression\&quot; in Destiny is best explained by an example.  A Character&#39;s \&quot;Level\&quot; is a progression: it has Experience that can be earned, levels that can be gained, and is evaluated and displayed at various points in the game. A Character&#39;s \&quot;Faction Reputation\&quot; is also a progression for much the same reason.  Progression is used by a variety of systems, and the definition of a Progression will generally only be useful if combining with live data (such as a character&#39;s DestinyCharacterProgressionComponent.progressions property, which holds that character&#39;s live Progression states).  Fundamentally, a Progression measures your \&quot;Level\&quot; by evaluating the thresholds in its Steps (one step per level, except for the last step which can be repeated indefinitely for \&quot;Levels\&quot; that have no ceiling) against the total earned \&quot;progression points\&quot;/experience. (for simplicity purposes, we will henceforth refer to earned progression points as experience, though it need not be a mechanic that in any way resembles Experience in a traditional sense).  Earned experience is calculated in a variety of ways, determined by the Progression&#39;s scope. These go from looking up a stored value to performing exceedingly obtuse calculations. This is why we provide live data in DestinyCharacterProgressionComponent.progressions, so you don&#39;t have to worry about those.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyProgressionDefinition {
  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private DestinyMiscDestinyColor color;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_FACTION_HASH = "factionHash";
  @SerializedName(SERIALIZED_NAME_FACTION_HASH)
  private Integer factionHash;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_RANK_ICON = "rankIcon";
  @SerializedName(SERIALIZED_NAME_RANK_ICON)
  private String rankIcon;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_REPEAT_LAST_STEP = "repeatLastStep";
  @SerializedName(SERIALIZED_NAME_REPEAT_LAST_STEP)
  private Boolean repeatLastStep;

  public static final String SERIALIZED_NAME_REWARD_ITEMS = "rewardItems";
  @SerializedName(SERIALIZED_NAME_REWARD_ITEMS)
  private List<DestinyDefinitionsDestinyProgressionRewardItemQuantity> rewardItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private Integer scope;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<DestinyDefinitionsDestinyProgressionStepDefinition> steps = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public DestinyDefinitionsDestinyProgressionDefinition() {
  }

  public DestinyDefinitionsDestinyProgressionDefinition color(DestinyMiscDestinyColor color) {
    this.color = color;
    return this;
  }

  /**
   * The #RGB string value for the color related to this progression, if there is one.
   * @return color
   */
  @javax.annotation.Nullable
  public DestinyMiscDestinyColor getColor() {
    return color;
  }

  public void setColor(DestinyMiscDestinyColor color) {
    this.color = color;
  }


  public DestinyDefinitionsDestinyProgressionDefinition displayProperties(DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinyProgressionDefinition factionHash(Integer factionHash) {
    this.factionHash = factionHash;
    return this;
  }

  /**
   * If the value exists, this is the hash identifier for the Faction that owns this Progression.  This is purely for convenience, if you&#39;re looking at a progression and want to know if and who it&#39;s related to in terms of Faction Reputation.
   * @return factionHash
   */
  @javax.annotation.Nullable
  public Integer getFactionHash() {
    return factionHash;
  }

  public void setFactionHash(Integer factionHash) {
    this.factionHash = factionHash;
  }


  public DestinyDefinitionsDestinyProgressionDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDestinyProgressionDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinyProgressionDefinition rankIcon(String rankIcon) {
    this.rankIcon = rankIcon;
    return this;
  }

  /**
   * For progressions that have it, this is the rank icon we use in the Companion, displayed above the progressions&#39; rank value.
   * @return rankIcon
   */
  @javax.annotation.Nullable
  public String getRankIcon() {
    return rankIcon;
  }

  public void setRankIcon(String rankIcon) {
    this.rankIcon = rankIcon;
  }


  public DestinyDefinitionsDestinyProgressionDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsDestinyProgressionDefinition repeatLastStep(Boolean repeatLastStep) {
    this.repeatLastStep = repeatLastStep;
    return this;
  }

  /**
   * If this is True, then the progression doesn&#39;t have a maximum level.
   * @return repeatLastStep
   */
  @javax.annotation.Nullable
  public Boolean getRepeatLastStep() {
    return repeatLastStep;
  }

  public void setRepeatLastStep(Boolean repeatLastStep) {
    this.repeatLastStep = repeatLastStep;
  }


  public DestinyDefinitionsDestinyProgressionDefinition rewardItems(List<DestinyDefinitionsDestinyProgressionRewardItemQuantity> rewardItems) {
    this.rewardItems = rewardItems;
    return this;
  }

  public DestinyDefinitionsDestinyProgressionDefinition addRewardItemsItem(DestinyDefinitionsDestinyProgressionRewardItemQuantity rewardItemsItem) {
    if (this.rewardItems == null) {
      this.rewardItems = new ArrayList<>();
    }
    this.rewardItems.add(rewardItemsItem);
    return this;
  }

  /**
   * Get rewardItems
   * @return rewardItems
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyProgressionRewardItemQuantity> getRewardItems() {
    return rewardItems;
  }

  public void setRewardItems(List<DestinyDefinitionsDestinyProgressionRewardItemQuantity> rewardItems) {
    this.rewardItems = rewardItems;
  }


  public DestinyDefinitionsDestinyProgressionDefinition scope(Integer scope) {
    this.scope = scope;
    return this;
  }

  /**
   * The \&quot;Scope\&quot; of the progression indicates the source of the progression&#39;s live data.  See the DestinyProgressionScope enum for more info: but essentially, a Progression can either be backed by a stored value, or it can be a calculated derivative of other values.
   * @return scope
   */
  @javax.annotation.Nullable
  public Integer getScope() {
    return scope;
  }

  public void setScope(Integer scope) {
    this.scope = scope;
  }


  public DestinyDefinitionsDestinyProgressionDefinition source(String source) {
    this.source = source;
    return this;
  }

  /**
   * If there&#39;s a description of how to earn this progression in the local config, this will be that localized description.
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public DestinyDefinitionsDestinyProgressionDefinition steps(List<DestinyDefinitionsDestinyProgressionStepDefinition> steps) {
    this.steps = steps;
    return this;
  }

  public DestinyDefinitionsDestinyProgressionDefinition addStepsItem(DestinyDefinitionsDestinyProgressionStepDefinition stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

  /**
   * Progressions are divided into Steps, which roughly equate to \&quot;Levels\&quot; in the traditional sense of a Progression. Notably, the last step can be repeated indefinitely if repeatLastStep is true, meaning that the calculation for your level is not as simple as comparing your current progress to the max progress of the steps.   These and more calculations are done for you if you grab live character progression data, such as in the DestinyCharacterProgressionComponent.
   * @return steps
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyProgressionStepDefinition> getSteps() {
    return steps;
  }

  public void setSteps(List<DestinyDefinitionsDestinyProgressionStepDefinition> steps) {
    this.steps = steps;
  }


  public DestinyDefinitionsDestinyProgressionDefinition visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  /**
   * If true, the Progression is something worth showing to users.  If false, BNet isn&#39;t going to show it. But that doesn&#39;t mean you can&#39;t. We&#39;re all friends here.
   * @return visible
   */
  @javax.annotation.Nullable
  public Boolean getVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyProgressionDefinition destinyDefinitionsDestinyProgressionDefinition = (DestinyDefinitionsDestinyProgressionDefinition) o;
    return Objects.equals(this.color, destinyDefinitionsDestinyProgressionDefinition.color) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinyProgressionDefinition.displayProperties) &&
        Objects.equals(this.factionHash, destinyDefinitionsDestinyProgressionDefinition.factionHash) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyProgressionDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinyProgressionDefinition.index) &&
        Objects.equals(this.rankIcon, destinyDefinitionsDestinyProgressionDefinition.rankIcon) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyProgressionDefinition.redacted) &&
        Objects.equals(this.repeatLastStep, destinyDefinitionsDestinyProgressionDefinition.repeatLastStep) &&
        Objects.equals(this.rewardItems, destinyDefinitionsDestinyProgressionDefinition.rewardItems) &&
        Objects.equals(this.scope, destinyDefinitionsDestinyProgressionDefinition.scope) &&
        Objects.equals(this.source, destinyDefinitionsDestinyProgressionDefinition.source) &&
        Objects.equals(this.steps, destinyDefinitionsDestinyProgressionDefinition.steps) &&
        Objects.equals(this.visible, destinyDefinitionsDestinyProgressionDefinition.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, displayProperties, factionHash, hash, index, rankIcon, redacted, repeatLastStep, rewardItems, scope, source, steps, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyProgressionDefinition {\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    factionHash: ").append(toIndentedString(factionHash)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    rankIcon: ").append(toIndentedString(rankIcon)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    repeatLastStep: ").append(toIndentedString(repeatLastStep)).append("\n");
    sb.append("    rewardItems: ").append(toIndentedString(rewardItems)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("color");
    openapiFields.add("displayProperties");
    openapiFields.add("factionHash");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("rankIcon");
    openapiFields.add("redacted");
    openapiFields.add("repeatLastStep");
    openapiFields.add("rewardItems");
    openapiFields.add("scope");
    openapiFields.add("source");
    openapiFields.add("steps");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyProgressionDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyProgressionDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyProgressionDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyProgressionDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyProgressionDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyProgressionDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `color`
      if (jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) {
        DestinyMiscDestinyColor.validateJsonElement(jsonObj.get("color"));
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      if ((jsonObj.get("rankIcon") != null && !jsonObj.get("rankIcon").isJsonNull()) && !jsonObj.get("rankIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rankIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rankIcon").toString()));
      }
      if (jsonObj.get("rewardItems") != null && !jsonObj.get("rewardItems").isJsonNull()) {
        JsonArray jsonArrayrewardItems = jsonObj.getAsJsonArray("rewardItems");
        if (jsonArrayrewardItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rewardItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rewardItems` to be an array in the JSON string but got `%s`", jsonObj.get("rewardItems").toString()));
          }

          // validate the optional field `rewardItems` (array)
          for (int i = 0; i < jsonArrayrewardItems.size(); i++) {
            DestinyDefinitionsDestinyProgressionRewardItemQuantity.validateJsonElement(jsonArrayrewardItems.get(i));
          };
        }
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (jsonObj.get("steps") != null && !jsonObj.get("steps").isJsonNull()) {
        JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
        if (jsonArraysteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("steps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
          }

          // validate the optional field `steps` (array)
          for (int i = 0; i < jsonArraysteps.size(); i++) {
            DestinyDefinitionsDestinyProgressionStepDefinition.validateJsonElement(jsonArraysteps.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyProgressionDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyProgressionDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyProgressionDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyProgressionDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyProgressionDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyProgressionDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyProgressionDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyProgressionDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyProgressionDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyProgressionDefinition
   */
  public static DestinyDefinitionsDestinyProgressionDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyProgressionDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyProgressionDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

