/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyComponentsInventoryDestinyPlatformSilverComponent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyResponsesDestinyProfileUserInfoCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyResponsesDestinyProfileUserInfoCard {
  public static final String SERIALIZED_NAME_APPLICABLE_MEMBERSHIP_TYPES = "applicableMembershipTypes";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_MEMBERSHIP_TYPES)
  private List<Integer> applicableMembershipTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUNGIE_GLOBAL_DISPLAY_NAME = "bungieGlobalDisplayName";
  @SerializedName(SERIALIZED_NAME_BUNGIE_GLOBAL_DISPLAY_NAME)
  private String bungieGlobalDisplayName;

  public static final String SERIALIZED_NAME_BUNGIE_GLOBAL_DISPLAY_NAME_CODE = "bungieGlobalDisplayNameCode";
  @SerializedName(SERIALIZED_NAME_BUNGIE_GLOBAL_DISPLAY_NAME_CODE)
  private Integer bungieGlobalDisplayNameCode;

  public static final String SERIALIZED_NAME_CROSS_SAVE_OVERRIDE = "crossSaveOverride";
  @SerializedName(SERIALIZED_NAME_CROSS_SAVE_OVERRIDE)
  private Integer crossSaveOverride;

  public static final String SERIALIZED_NAME_DATE_LAST_PLAYED = "dateLastPlayed";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_PLAYED)
  private OffsetDateTime dateLastPlayed;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ICON_PATH = "iconPath";
  @SerializedName(SERIALIZED_NAME_ICON_PATH)
  private String iconPath;

  public static final String SERIALIZED_NAME_IS_CROSS_SAVE_PRIMARY = "isCrossSavePrimary";
  @SerializedName(SERIALIZED_NAME_IS_CROSS_SAVE_PRIMARY)
  private Boolean isCrossSavePrimary;

  public static final String SERIALIZED_NAME_IS_OVERRIDDEN = "isOverridden";
  @SerializedName(SERIALIZED_NAME_IS_OVERRIDDEN)
  private Boolean isOverridden;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ID = "membershipId";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ID)
  private Long membershipId;

  public static final String SERIALIZED_NAME_MEMBERSHIP_TYPE = "membershipType";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_TYPE)
  private Integer membershipType;

  public static final String SERIALIZED_NAME_PLATFORM_SILVER = "platformSilver";
  @SerializedName(SERIALIZED_NAME_PLATFORM_SILVER)
  private DestinyComponentsInventoryDestinyPlatformSilverComponent platformSilver;

  public static final String SERIALIZED_NAME_SUPPLEMENTAL_DISPLAY_NAME = "supplementalDisplayName";
  @SerializedName(SERIALIZED_NAME_SUPPLEMENTAL_DISPLAY_NAME)
  private String supplementalDisplayName;

  /**
   * If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.   For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile&#39;s original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.   If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can&#39;t get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it.
   */
  @JsonAdapter(UnpairedGameVersionsEnum.Adapter.class)
  public enum UnpairedGameVersionsEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_4(4),
    
    NUMBER_8(8),
    
    NUMBER_16(16),
    
    NUMBER_32(32),
    
    NUMBER_64(64),
    
    NUMBER_128(128),
    
    NUMBER_256(256),
    
    NUMBER_512(512);

    private Integer value;

    UnpairedGameVersionsEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnpairedGameVersionsEnum fromValue(Integer value) {
      for (UnpairedGameVersionsEnum b : UnpairedGameVersionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnpairedGameVersionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnpairedGameVersionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnpairedGameVersionsEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return UnpairedGameVersionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      UnpairedGameVersionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNPAIRED_GAME_VERSIONS = "unpairedGameVersions";
  @SerializedName(SERIALIZED_NAME_UNPAIRED_GAME_VERSIONS)
  private UnpairedGameVersionsEnum unpairedGameVersions;

  public DestinyResponsesDestinyProfileUserInfoCard() {
  }

  public DestinyResponsesDestinyProfileUserInfoCard applicableMembershipTypes(List<Integer> applicableMembershipTypes) {
    this.applicableMembershipTypes = applicableMembershipTypes;
    return this;
  }

  public DestinyResponsesDestinyProfileUserInfoCard addApplicableMembershipTypesItem(Integer applicableMembershipTypesItem) {
    if (this.applicableMembershipTypes == null) {
      this.applicableMembershipTypes = new ArrayList<>();
    }
    this.applicableMembershipTypes.add(applicableMembershipTypesItem);
    return this;
  }

  /**
   * The list of Membership Types indicating the platforms on which this Membership can be used.   Not in Cross Save &#x3D; its original membership type. Cross Save Primary &#x3D; Any membership types it is overridding, and its original membership type Cross Save Overridden &#x3D; Empty list
   * @return applicableMembershipTypes
   */
  @javax.annotation.Nullable
  public List<Integer> getApplicableMembershipTypes() {
    return applicableMembershipTypes;
  }

  public void setApplicableMembershipTypes(List<Integer> applicableMembershipTypes) {
    this.applicableMembershipTypes = applicableMembershipTypes;
  }


  public DestinyResponsesDestinyProfileUserInfoCard bungieGlobalDisplayName(String bungieGlobalDisplayName) {
    this.bungieGlobalDisplayName = bungieGlobalDisplayName;
    return this;
  }

  /**
   * The bungie global display name, if set.
   * @return bungieGlobalDisplayName
   */
  @javax.annotation.Nullable
  public String getBungieGlobalDisplayName() {
    return bungieGlobalDisplayName;
  }

  public void setBungieGlobalDisplayName(String bungieGlobalDisplayName) {
    this.bungieGlobalDisplayName = bungieGlobalDisplayName;
  }


  public DestinyResponsesDestinyProfileUserInfoCard bungieGlobalDisplayNameCode(Integer bungieGlobalDisplayNameCode) {
    this.bungieGlobalDisplayNameCode = bungieGlobalDisplayNameCode;
    return this;
  }

  /**
   * The bungie global display name code, if set.
   * @return bungieGlobalDisplayNameCode
   */
  @javax.annotation.Nullable
  public Integer getBungieGlobalDisplayNameCode() {
    return bungieGlobalDisplayNameCode;
  }

  public void setBungieGlobalDisplayNameCode(Integer bungieGlobalDisplayNameCode) {
    this.bungieGlobalDisplayNameCode = bungieGlobalDisplayNameCode;
  }


  public DestinyResponsesDestinyProfileUserInfoCard crossSaveOverride(Integer crossSaveOverride) {
    this.crossSaveOverride = crossSaveOverride;
    return this;
  }

  /**
   * If there is a cross save override in effect, this value will tell you the type that is overridding this one.
   * @return crossSaveOverride
   */
  @javax.annotation.Nullable
  public Integer getCrossSaveOverride() {
    return crossSaveOverride;
  }

  public void setCrossSaveOverride(Integer crossSaveOverride) {
    this.crossSaveOverride = crossSaveOverride;
  }


  public DestinyResponsesDestinyProfileUserInfoCard dateLastPlayed(OffsetDateTime dateLastPlayed) {
    this.dateLastPlayed = dateLastPlayed;
    return this;
  }

  /**
   * Get dateLastPlayed
   * @return dateLastPlayed
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateLastPlayed() {
    return dateLastPlayed;
  }

  public void setDateLastPlayed(OffsetDateTime dateLastPlayed) {
    this.dateLastPlayed = dateLastPlayed;
  }


  public DestinyResponsesDestinyProfileUserInfoCard displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public DestinyResponsesDestinyProfileUserInfoCard iconPath(String iconPath) {
    this.iconPath = iconPath;
    return this;
  }

  /**
   * URL the Icon if available.
   * @return iconPath
   */
  @javax.annotation.Nullable
  public String getIconPath() {
    return iconPath;
  }

  public void setIconPath(String iconPath) {
    this.iconPath = iconPath;
  }


  public DestinyResponsesDestinyProfileUserInfoCard isCrossSavePrimary(Boolean isCrossSavePrimary) {
    this.isCrossSavePrimary = isCrossSavePrimary;
    return this;
  }

  /**
   * If true, this account is hooked up as the \&quot;Primary\&quot; cross save account for one or more platforms.
   * @return isCrossSavePrimary
   */
  @javax.annotation.Nullable
  public Boolean getIsCrossSavePrimary() {
    return isCrossSavePrimary;
  }

  public void setIsCrossSavePrimary(Boolean isCrossSavePrimary) {
    this.isCrossSavePrimary = isCrossSavePrimary;
  }


  public DestinyResponsesDestinyProfileUserInfoCard isOverridden(Boolean isOverridden) {
    this.isOverridden = isOverridden;
    return this;
  }

  /**
   * If this profile is being overridden/obscured by Cross Save, this will be set to true. We will still return the profile for display purposes where users need to know the info: it is up to any given area of the app/site to determine if this profile should still be shown.
   * @return isOverridden
   */
  @javax.annotation.Nullable
  public Boolean getIsOverridden() {
    return isOverridden;
  }

  public void setIsOverridden(Boolean isOverridden) {
    this.isOverridden = isOverridden;
  }


  public DestinyResponsesDestinyProfileUserInfoCard isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * If True, this is a public user membership.
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public DestinyResponsesDestinyProfileUserInfoCard membershipId(Long membershipId) {
    this.membershipId = membershipId;
    return this;
  }

  /**
   * Membership ID as they user is known in the Accounts service
   * @return membershipId
   */
  @javax.annotation.Nullable
  public Long getMembershipId() {
    return membershipId;
  }

  public void setMembershipId(Long membershipId) {
    this.membershipId = membershipId;
  }


  public DestinyResponsesDestinyProfileUserInfoCard membershipType(Integer membershipType) {
    this.membershipType = membershipType;
    return this;
  }

  /**
   * Type of the membership. Not necessarily the native type.
   * @return membershipType
   */
  @javax.annotation.Nullable
  public Integer getMembershipType() {
    return membershipType;
  }

  public void setMembershipType(Integer membershipType) {
    this.membershipType = membershipType;
  }


  public DestinyResponsesDestinyProfileUserInfoCard platformSilver(DestinyComponentsInventoryDestinyPlatformSilverComponent platformSilver) {
    this.platformSilver = platformSilver;
    return this;
  }

  /**
   * This is the silver available on this Profile across any platforms on which they have purchased silver.   This is only available if you are requesting yourself.
   * @return platformSilver
   */
  @javax.annotation.Nullable
  public DestinyComponentsInventoryDestinyPlatformSilverComponent getPlatformSilver() {
    return platformSilver;
  }

  public void setPlatformSilver(DestinyComponentsInventoryDestinyPlatformSilverComponent platformSilver) {
    this.platformSilver = platformSilver;
  }


  public DestinyResponsesDestinyProfileUserInfoCard supplementalDisplayName(String supplementalDisplayName) {
    this.supplementalDisplayName = supplementalDisplayName;
    return this;
  }

  /**
   * A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
   * @return supplementalDisplayName
   */
  @javax.annotation.Nullable
  public String getSupplementalDisplayName() {
    return supplementalDisplayName;
  }

  public void setSupplementalDisplayName(String supplementalDisplayName) {
    this.supplementalDisplayName = supplementalDisplayName;
  }


  public DestinyResponsesDestinyProfileUserInfoCard unpairedGameVersions(UnpairedGameVersionsEnum unpairedGameVersions) {
    this.unpairedGameVersions = unpairedGameVersions;
    return this;
  }

  /**
   * If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.   For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile&#39;s original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.   If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can&#39;t get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it.
   * @return unpairedGameVersions
   */
  @javax.annotation.Nullable
  public UnpairedGameVersionsEnum getUnpairedGameVersions() {
    return unpairedGameVersions;
  }

  public void setUnpairedGameVersions(UnpairedGameVersionsEnum unpairedGameVersions) {
    this.unpairedGameVersions = unpairedGameVersions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyResponsesDestinyProfileUserInfoCard destinyResponsesDestinyProfileUserInfoCard = (DestinyResponsesDestinyProfileUserInfoCard) o;
    return Objects.equals(this.applicableMembershipTypes, destinyResponsesDestinyProfileUserInfoCard.applicableMembershipTypes) &&
        Objects.equals(this.bungieGlobalDisplayName, destinyResponsesDestinyProfileUserInfoCard.bungieGlobalDisplayName) &&
        Objects.equals(this.bungieGlobalDisplayNameCode, destinyResponsesDestinyProfileUserInfoCard.bungieGlobalDisplayNameCode) &&
        Objects.equals(this.crossSaveOverride, destinyResponsesDestinyProfileUserInfoCard.crossSaveOverride) &&
        Objects.equals(this.dateLastPlayed, destinyResponsesDestinyProfileUserInfoCard.dateLastPlayed) &&
        Objects.equals(this.displayName, destinyResponsesDestinyProfileUserInfoCard.displayName) &&
        Objects.equals(this.iconPath, destinyResponsesDestinyProfileUserInfoCard.iconPath) &&
        Objects.equals(this.isCrossSavePrimary, destinyResponsesDestinyProfileUserInfoCard.isCrossSavePrimary) &&
        Objects.equals(this.isOverridden, destinyResponsesDestinyProfileUserInfoCard.isOverridden) &&
        Objects.equals(this.isPublic, destinyResponsesDestinyProfileUserInfoCard.isPublic) &&
        Objects.equals(this.membershipId, destinyResponsesDestinyProfileUserInfoCard.membershipId) &&
        Objects.equals(this.membershipType, destinyResponsesDestinyProfileUserInfoCard.membershipType) &&
        Objects.equals(this.platformSilver, destinyResponsesDestinyProfileUserInfoCard.platformSilver) &&
        Objects.equals(this.supplementalDisplayName, destinyResponsesDestinyProfileUserInfoCard.supplementalDisplayName) &&
        Objects.equals(this.unpairedGameVersions, destinyResponsesDestinyProfileUserInfoCard.unpairedGameVersions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicableMembershipTypes, bungieGlobalDisplayName, bungieGlobalDisplayNameCode, crossSaveOverride, dateLastPlayed, displayName, iconPath, isCrossSavePrimary, isOverridden, isPublic, membershipId, membershipType, platformSilver, supplementalDisplayName, unpairedGameVersions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyResponsesDestinyProfileUserInfoCard {\n");
    sb.append("    applicableMembershipTypes: ").append(toIndentedString(applicableMembershipTypes)).append("\n");
    sb.append("    bungieGlobalDisplayName: ").append(toIndentedString(bungieGlobalDisplayName)).append("\n");
    sb.append("    bungieGlobalDisplayNameCode: ").append(toIndentedString(bungieGlobalDisplayNameCode)).append("\n");
    sb.append("    crossSaveOverride: ").append(toIndentedString(crossSaveOverride)).append("\n");
    sb.append("    dateLastPlayed: ").append(toIndentedString(dateLastPlayed)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    iconPath: ").append(toIndentedString(iconPath)).append("\n");
    sb.append("    isCrossSavePrimary: ").append(toIndentedString(isCrossSavePrimary)).append("\n");
    sb.append("    isOverridden: ").append(toIndentedString(isOverridden)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    membershipId: ").append(toIndentedString(membershipId)).append("\n");
    sb.append("    membershipType: ").append(toIndentedString(membershipType)).append("\n");
    sb.append("    platformSilver: ").append(toIndentedString(platformSilver)).append("\n");
    sb.append("    supplementalDisplayName: ").append(toIndentedString(supplementalDisplayName)).append("\n");
    sb.append("    unpairedGameVersions: ").append(toIndentedString(unpairedGameVersions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicableMembershipTypes");
    openapiFields.add("bungieGlobalDisplayName");
    openapiFields.add("bungieGlobalDisplayNameCode");
    openapiFields.add("crossSaveOverride");
    openapiFields.add("dateLastPlayed");
    openapiFields.add("displayName");
    openapiFields.add("iconPath");
    openapiFields.add("isCrossSavePrimary");
    openapiFields.add("isOverridden");
    openapiFields.add("isPublic");
    openapiFields.add("membershipId");
    openapiFields.add("membershipType");
    openapiFields.add("platformSilver");
    openapiFields.add("supplementalDisplayName");
    openapiFields.add("unpairedGameVersions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyResponsesDestinyProfileUserInfoCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyResponsesDestinyProfileUserInfoCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyResponsesDestinyProfileUserInfoCard is not found in the empty JSON string", DestinyResponsesDestinyProfileUserInfoCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyResponsesDestinyProfileUserInfoCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyResponsesDestinyProfileUserInfoCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicableMembershipTypes") != null && !jsonObj.get("applicableMembershipTypes").isJsonNull() && !jsonObj.get("applicableMembershipTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicableMembershipTypes` to be an array in the JSON string but got `%s`", jsonObj.get("applicableMembershipTypes").toString()));
      }
      if ((jsonObj.get("bungieGlobalDisplayName") != null && !jsonObj.get("bungieGlobalDisplayName").isJsonNull()) && !jsonObj.get("bungieGlobalDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bungieGlobalDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bungieGlobalDisplayName").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("iconPath") != null && !jsonObj.get("iconPath").isJsonNull()) && !jsonObj.get("iconPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconPath").toString()));
      }
      // validate the optional field `platformSilver`
      if (jsonObj.get("platformSilver") != null && !jsonObj.get("platformSilver").isJsonNull()) {
        DestinyComponentsInventoryDestinyPlatformSilverComponent.validateJsonElement(jsonObj.get("platformSilver"));
      }
      if ((jsonObj.get("supplementalDisplayName") != null && !jsonObj.get("supplementalDisplayName").isJsonNull()) && !jsonObj.get("supplementalDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplementalDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supplementalDisplayName").toString()));
      }
      // validate the optional field `unpairedGameVersions`
      if (jsonObj.get("unpairedGameVersions") != null && !jsonObj.get("unpairedGameVersions").isJsonNull()) {
        UnpairedGameVersionsEnum.validateJsonElement(jsonObj.get("unpairedGameVersions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyResponsesDestinyProfileUserInfoCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyResponsesDestinyProfileUserInfoCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyResponsesDestinyProfileUserInfoCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyResponsesDestinyProfileUserInfoCard.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyResponsesDestinyProfileUserInfoCard>() {
           @Override
           public void write(JsonWriter out, DestinyResponsesDestinyProfileUserInfoCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyResponsesDestinyProfileUserInfoCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyResponsesDestinyProfileUserInfoCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyResponsesDestinyProfileUserInfoCard
   * @throws IOException if the JSON string is invalid with respect to DestinyResponsesDestinyProfileUserInfoCard
   */
  public static DestinyResponsesDestinyProfileUserInfoCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyResponsesDestinyProfileUserInfoCard.class);
  }

  /**
   * Convert an instance of DestinyResponsesDestinyProfileUserInfoCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

