/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyMilestonesDestinyMilestoneActivityCompletionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents custom data that we know about an individual variant of an activity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyMilestonesDestinyMilestoneActivityVariant {
  public static final String SERIALIZED_NAME_ACTIVITY_HASH = "activityHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_HASH)
  private Integer activityHash;

  public static final String SERIALIZED_NAME_ACTIVITY_MODE_HASH = "activityModeHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_MODE_HASH)
  private Integer activityModeHash;

  /**
   * The enumeration equivalent of the most specific Activity Mode under which this activity is played.
   */
  @JsonAdapter(ActivityModeTypeEnum.Adapter.class)
  public enum ActivityModeTypeEnum {
    NUMBER_0(0),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_19(19),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27),
    
    NUMBER_28(28),
    
    NUMBER_29(29),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_37(37),
    
    NUMBER_38(38),
    
    NUMBER_39(39),
    
    NUMBER_40(40),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_44(44),
    
    NUMBER_45(45),
    
    NUMBER_46(46),
    
    NUMBER_47(47),
    
    NUMBER_48(48),
    
    NUMBER_49(49),
    
    NUMBER_50(50),
    
    NUMBER_51(51),
    
    NUMBER_52(52),
    
    NUMBER_53(53),
    
    NUMBER_54(54),
    
    NUMBER_55(55),
    
    NUMBER_56(56),
    
    NUMBER_57(57),
    
    NUMBER_58(58),
    
    NUMBER_59(59),
    
    NUMBER_60(60),
    
    NUMBER_61(61),
    
    NUMBER_62(62),
    
    NUMBER_63(63),
    
    NUMBER_64(64),
    
    NUMBER_65(65),
    
    NUMBER_66(66),
    
    NUMBER_67(67),
    
    NUMBER_68(68),
    
    NUMBER_69(69),
    
    NUMBER_70(70),
    
    NUMBER_71(71),
    
    NUMBER_72(72),
    
    NUMBER_73(73),
    
    NUMBER_74(74),
    
    NUMBER_75(75),
    
    NUMBER_76(76),
    
    NUMBER_77(77),
    
    NUMBER_78(78),
    
    NUMBER_79(79),
    
    NUMBER_80(80),
    
    NUMBER_81(81),
    
    NUMBER_82(82),
    
    NUMBER_83(83),
    
    NUMBER_84(84),
    
    NUMBER_85(85),
    
    NUMBER_86(86),
    
    NUMBER_87(87),
    
    NUMBER_88(88),
    
    NUMBER_89(89),
    
    NUMBER_90(90),
    
    NUMBER_91(91);

    private Integer value;

    ActivityModeTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActivityModeTypeEnum fromValue(Integer value) {
      for (ActivityModeTypeEnum b : ActivityModeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActivityModeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActivityModeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActivityModeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ActivityModeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ActivityModeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVITY_MODE_TYPE = "activityModeType";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_MODE_TYPE)
  private ActivityModeTypeEnum activityModeType;

  public static final String SERIALIZED_NAME_COMPLETION_STATUS = "completionStatus";
  @SerializedName(SERIALIZED_NAME_COMPLETION_STATUS)
  private DestinyMilestonesDestinyMilestoneActivityCompletionStatus completionStatus;

  public DestinyMilestonesDestinyMilestoneActivityVariant() {
  }

  public DestinyMilestonesDestinyMilestoneActivityVariant activityHash(Integer activityHash) {
    this.activityHash = activityHash;
    return this;
  }

  /**
   * The hash for the specific variant of the activity related to this milestone. You can pull more detailed static info from the DestinyActivityDefinition, such as difficulty level.
   * @return activityHash
   */
  @javax.annotation.Nullable
  public Integer getActivityHash() {
    return activityHash;
  }

  public void setActivityHash(Integer activityHash) {
    this.activityHash = activityHash;
  }


  public DestinyMilestonesDestinyMilestoneActivityVariant activityModeHash(Integer activityModeHash) {
    this.activityModeHash = activityModeHash;
    return this;
  }

  /**
   * The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it&#39;s not clear what mode the PVP map is being played under. If it&#39;s a playlist, this will be less specific: but hopefully useful in some way.
   * @return activityModeHash
   */
  @javax.annotation.Nullable
  public Integer getActivityModeHash() {
    return activityModeHash;
  }

  public void setActivityModeHash(Integer activityModeHash) {
    this.activityModeHash = activityModeHash;
  }


  public DestinyMilestonesDestinyMilestoneActivityVariant activityModeType(ActivityModeTypeEnum activityModeType) {
    this.activityModeType = activityModeType;
    return this;
  }

  /**
   * The enumeration equivalent of the most specific Activity Mode under which this activity is played.
   * @return activityModeType
   */
  @javax.annotation.Nullable
  public ActivityModeTypeEnum getActivityModeType() {
    return activityModeType;
  }

  public void setActivityModeType(ActivityModeTypeEnum activityModeType) {
    this.activityModeType = activityModeType;
  }


  public DestinyMilestonesDestinyMilestoneActivityVariant completionStatus(DestinyMilestonesDestinyMilestoneActivityCompletionStatus completionStatus) {
    this.completionStatus = completionStatus;
    return this;
  }

  /**
   * An OPTIONAL component: if it makes sense to talk about this activity variant in terms of whether or not it has been completed or what progress you have made in it, this will be returned. Otherwise, this will be NULL.
   * @return completionStatus
   */
  @javax.annotation.Nullable
  public DestinyMilestonesDestinyMilestoneActivityCompletionStatus getCompletionStatus() {
    return completionStatus;
  }

  public void setCompletionStatus(DestinyMilestonesDestinyMilestoneActivityCompletionStatus completionStatus) {
    this.completionStatus = completionStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyMilestonesDestinyMilestoneActivityVariant destinyMilestonesDestinyMilestoneActivityVariant = (DestinyMilestonesDestinyMilestoneActivityVariant) o;
    return Objects.equals(this.activityHash, destinyMilestonesDestinyMilestoneActivityVariant.activityHash) &&
        Objects.equals(this.activityModeHash, destinyMilestonesDestinyMilestoneActivityVariant.activityModeHash) &&
        Objects.equals(this.activityModeType, destinyMilestonesDestinyMilestoneActivityVariant.activityModeType) &&
        Objects.equals(this.completionStatus, destinyMilestonesDestinyMilestoneActivityVariant.completionStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityHash, activityModeHash, activityModeType, completionStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyMilestonesDestinyMilestoneActivityVariant {\n");
    sb.append("    activityHash: ").append(toIndentedString(activityHash)).append("\n");
    sb.append("    activityModeHash: ").append(toIndentedString(activityModeHash)).append("\n");
    sb.append("    activityModeType: ").append(toIndentedString(activityModeType)).append("\n");
    sb.append("    completionStatus: ").append(toIndentedString(completionStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityHash");
    openapiFields.add("activityModeHash");
    openapiFields.add("activityModeType");
    openapiFields.add("completionStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyMilestonesDestinyMilestoneActivityVariant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyMilestonesDestinyMilestoneActivityVariant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyMilestonesDestinyMilestoneActivityVariant is not found in the empty JSON string", DestinyMilestonesDestinyMilestoneActivityVariant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyMilestonesDestinyMilestoneActivityVariant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyMilestonesDestinyMilestoneActivityVariant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activityModeType`
      if (jsonObj.get("activityModeType") != null && !jsonObj.get("activityModeType").isJsonNull()) {
        ActivityModeTypeEnum.validateJsonElement(jsonObj.get("activityModeType"));
      }
      // validate the optional field `completionStatus`
      if (jsonObj.get("completionStatus") != null && !jsonObj.get("completionStatus").isJsonNull()) {
        DestinyMilestonesDestinyMilestoneActivityCompletionStatus.validateJsonElement(jsonObj.get("completionStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyMilestonesDestinyMilestoneActivityVariant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyMilestonesDestinyMilestoneActivityVariant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyMilestonesDestinyMilestoneActivityVariant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyMilestonesDestinyMilestoneActivityVariant.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyMilestonesDestinyMilestoneActivityVariant>() {
           @Override
           public void write(JsonWriter out, DestinyMilestonesDestinyMilestoneActivityVariant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyMilestonesDestinyMilestoneActivityVariant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyMilestonesDestinyMilestoneActivityVariant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyMilestonesDestinyMilestoneActivityVariant
   * @throws IOException if the JSON string is invalid with respect to DestinyMilestonesDestinyMilestoneActivityVariant
   */
  public static DestinyMilestonesDestinyMilestoneActivityVariant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyMilestonesDestinyMilestoneActivityVariant.class);
  }

  /**
   * Convert an instance of DestinyMilestonesDestinyMilestoneActivityVariant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

