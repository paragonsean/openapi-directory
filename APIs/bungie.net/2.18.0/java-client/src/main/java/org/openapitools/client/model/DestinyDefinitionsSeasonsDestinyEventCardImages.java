/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsSeasonsDestinyEventCardImages
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsSeasonsDestinyEventCardImages {
  public static final String SERIALIZED_NAME_CARD_COMPLETE_IMAGE_PATH = "cardCompleteImagePath";
  @SerializedName(SERIALIZED_NAME_CARD_COMPLETE_IMAGE_PATH)
  private String cardCompleteImagePath;

  public static final String SERIALIZED_NAME_CARD_COMPLETE_WRAP_IMAGE_PATH = "cardCompleteWrapImagePath";
  @SerializedName(SERIALIZED_NAME_CARD_COMPLETE_WRAP_IMAGE_PATH)
  private String cardCompleteWrapImagePath;

  public static final String SERIALIZED_NAME_CARD_INCOMPLETE_IMAGE_PATH = "cardIncompleteImagePath";
  @SerializedName(SERIALIZED_NAME_CARD_INCOMPLETE_IMAGE_PATH)
  private String cardIncompleteImagePath;

  public static final String SERIALIZED_NAME_PROGRESS_ICON_IMAGE_PATH = "progressIconImagePath";
  @SerializedName(SERIALIZED_NAME_PROGRESS_ICON_IMAGE_PATH)
  private String progressIconImagePath;

  public static final String SERIALIZED_NAME_THEME_BACKGROUND_IMAGE_PATH = "themeBackgroundImagePath";
  @SerializedName(SERIALIZED_NAME_THEME_BACKGROUND_IMAGE_PATH)
  private String themeBackgroundImagePath;

  public static final String SERIALIZED_NAME_UNOWNED_CARD_SLEEVE_IMAGE_PATH = "unownedCardSleeveImagePath";
  @SerializedName(SERIALIZED_NAME_UNOWNED_CARD_SLEEVE_IMAGE_PATH)
  private String unownedCardSleeveImagePath;

  public static final String SERIALIZED_NAME_UNOWNED_CARD_SLEEVE_WRAP_IMAGE_PATH = "unownedCardSleeveWrapImagePath";
  @SerializedName(SERIALIZED_NAME_UNOWNED_CARD_SLEEVE_WRAP_IMAGE_PATH)
  private String unownedCardSleeveWrapImagePath;

  public DestinyDefinitionsSeasonsDestinyEventCardImages() {
  }

  public DestinyDefinitionsSeasonsDestinyEventCardImages cardCompleteImagePath(String cardCompleteImagePath) {
    this.cardCompleteImagePath = cardCompleteImagePath;
    return this;
  }

  /**
   * Get cardCompleteImagePath
   * @return cardCompleteImagePath
   */
  @javax.annotation.Nullable
  public String getCardCompleteImagePath() {
    return cardCompleteImagePath;
  }

  public void setCardCompleteImagePath(String cardCompleteImagePath) {
    this.cardCompleteImagePath = cardCompleteImagePath;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardImages cardCompleteWrapImagePath(String cardCompleteWrapImagePath) {
    this.cardCompleteWrapImagePath = cardCompleteWrapImagePath;
    return this;
  }

  /**
   * Get cardCompleteWrapImagePath
   * @return cardCompleteWrapImagePath
   */
  @javax.annotation.Nullable
  public String getCardCompleteWrapImagePath() {
    return cardCompleteWrapImagePath;
  }

  public void setCardCompleteWrapImagePath(String cardCompleteWrapImagePath) {
    this.cardCompleteWrapImagePath = cardCompleteWrapImagePath;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardImages cardIncompleteImagePath(String cardIncompleteImagePath) {
    this.cardIncompleteImagePath = cardIncompleteImagePath;
    return this;
  }

  /**
   * Get cardIncompleteImagePath
   * @return cardIncompleteImagePath
   */
  @javax.annotation.Nullable
  public String getCardIncompleteImagePath() {
    return cardIncompleteImagePath;
  }

  public void setCardIncompleteImagePath(String cardIncompleteImagePath) {
    this.cardIncompleteImagePath = cardIncompleteImagePath;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardImages progressIconImagePath(String progressIconImagePath) {
    this.progressIconImagePath = progressIconImagePath;
    return this;
  }

  /**
   * Get progressIconImagePath
   * @return progressIconImagePath
   */
  @javax.annotation.Nullable
  public String getProgressIconImagePath() {
    return progressIconImagePath;
  }

  public void setProgressIconImagePath(String progressIconImagePath) {
    this.progressIconImagePath = progressIconImagePath;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardImages themeBackgroundImagePath(String themeBackgroundImagePath) {
    this.themeBackgroundImagePath = themeBackgroundImagePath;
    return this;
  }

  /**
   * Get themeBackgroundImagePath
   * @return themeBackgroundImagePath
   */
  @javax.annotation.Nullable
  public String getThemeBackgroundImagePath() {
    return themeBackgroundImagePath;
  }

  public void setThemeBackgroundImagePath(String themeBackgroundImagePath) {
    this.themeBackgroundImagePath = themeBackgroundImagePath;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardImages unownedCardSleeveImagePath(String unownedCardSleeveImagePath) {
    this.unownedCardSleeveImagePath = unownedCardSleeveImagePath;
    return this;
  }

  /**
   * Get unownedCardSleeveImagePath
   * @return unownedCardSleeveImagePath
   */
  @javax.annotation.Nullable
  public String getUnownedCardSleeveImagePath() {
    return unownedCardSleeveImagePath;
  }

  public void setUnownedCardSleeveImagePath(String unownedCardSleeveImagePath) {
    this.unownedCardSleeveImagePath = unownedCardSleeveImagePath;
  }


  public DestinyDefinitionsSeasonsDestinyEventCardImages unownedCardSleeveWrapImagePath(String unownedCardSleeveWrapImagePath) {
    this.unownedCardSleeveWrapImagePath = unownedCardSleeveWrapImagePath;
    return this;
  }

  /**
   * Get unownedCardSleeveWrapImagePath
   * @return unownedCardSleeveWrapImagePath
   */
  @javax.annotation.Nullable
  public String getUnownedCardSleeveWrapImagePath() {
    return unownedCardSleeveWrapImagePath;
  }

  public void setUnownedCardSleeveWrapImagePath(String unownedCardSleeveWrapImagePath) {
    this.unownedCardSleeveWrapImagePath = unownedCardSleeveWrapImagePath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsSeasonsDestinyEventCardImages destinyDefinitionsSeasonsDestinyEventCardImages = (DestinyDefinitionsSeasonsDestinyEventCardImages) o;
    return Objects.equals(this.cardCompleteImagePath, destinyDefinitionsSeasonsDestinyEventCardImages.cardCompleteImagePath) &&
        Objects.equals(this.cardCompleteWrapImagePath, destinyDefinitionsSeasonsDestinyEventCardImages.cardCompleteWrapImagePath) &&
        Objects.equals(this.cardIncompleteImagePath, destinyDefinitionsSeasonsDestinyEventCardImages.cardIncompleteImagePath) &&
        Objects.equals(this.progressIconImagePath, destinyDefinitionsSeasonsDestinyEventCardImages.progressIconImagePath) &&
        Objects.equals(this.themeBackgroundImagePath, destinyDefinitionsSeasonsDestinyEventCardImages.themeBackgroundImagePath) &&
        Objects.equals(this.unownedCardSleeveImagePath, destinyDefinitionsSeasonsDestinyEventCardImages.unownedCardSleeveImagePath) &&
        Objects.equals(this.unownedCardSleeveWrapImagePath, destinyDefinitionsSeasonsDestinyEventCardImages.unownedCardSleeveWrapImagePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardCompleteImagePath, cardCompleteWrapImagePath, cardIncompleteImagePath, progressIconImagePath, themeBackgroundImagePath, unownedCardSleeveImagePath, unownedCardSleeveWrapImagePath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsSeasonsDestinyEventCardImages {\n");
    sb.append("    cardCompleteImagePath: ").append(toIndentedString(cardCompleteImagePath)).append("\n");
    sb.append("    cardCompleteWrapImagePath: ").append(toIndentedString(cardCompleteWrapImagePath)).append("\n");
    sb.append("    cardIncompleteImagePath: ").append(toIndentedString(cardIncompleteImagePath)).append("\n");
    sb.append("    progressIconImagePath: ").append(toIndentedString(progressIconImagePath)).append("\n");
    sb.append("    themeBackgroundImagePath: ").append(toIndentedString(themeBackgroundImagePath)).append("\n");
    sb.append("    unownedCardSleeveImagePath: ").append(toIndentedString(unownedCardSleeveImagePath)).append("\n");
    sb.append("    unownedCardSleeveWrapImagePath: ").append(toIndentedString(unownedCardSleeveWrapImagePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardCompleteImagePath");
    openapiFields.add("cardCompleteWrapImagePath");
    openapiFields.add("cardIncompleteImagePath");
    openapiFields.add("progressIconImagePath");
    openapiFields.add("themeBackgroundImagePath");
    openapiFields.add("unownedCardSleeveImagePath");
    openapiFields.add("unownedCardSleeveWrapImagePath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsSeasonsDestinyEventCardImages
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsSeasonsDestinyEventCardImages.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsSeasonsDestinyEventCardImages is not found in the empty JSON string", DestinyDefinitionsSeasonsDestinyEventCardImages.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsSeasonsDestinyEventCardImages.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsSeasonsDestinyEventCardImages` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cardCompleteImagePath") != null && !jsonObj.get("cardCompleteImagePath").isJsonNull()) && !jsonObj.get("cardCompleteImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardCompleteImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardCompleteImagePath").toString()));
      }
      if ((jsonObj.get("cardCompleteWrapImagePath") != null && !jsonObj.get("cardCompleteWrapImagePath").isJsonNull()) && !jsonObj.get("cardCompleteWrapImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardCompleteWrapImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardCompleteWrapImagePath").toString()));
      }
      if ((jsonObj.get("cardIncompleteImagePath") != null && !jsonObj.get("cardIncompleteImagePath").isJsonNull()) && !jsonObj.get("cardIncompleteImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardIncompleteImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardIncompleteImagePath").toString()));
      }
      if ((jsonObj.get("progressIconImagePath") != null && !jsonObj.get("progressIconImagePath").isJsonNull()) && !jsonObj.get("progressIconImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `progressIconImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("progressIconImagePath").toString()));
      }
      if ((jsonObj.get("themeBackgroundImagePath") != null && !jsonObj.get("themeBackgroundImagePath").isJsonNull()) && !jsonObj.get("themeBackgroundImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `themeBackgroundImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("themeBackgroundImagePath").toString()));
      }
      if ((jsonObj.get("unownedCardSleeveImagePath") != null && !jsonObj.get("unownedCardSleeveImagePath").isJsonNull()) && !jsonObj.get("unownedCardSleeveImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unownedCardSleeveImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unownedCardSleeveImagePath").toString()));
      }
      if ((jsonObj.get("unownedCardSleeveWrapImagePath") != null && !jsonObj.get("unownedCardSleeveWrapImagePath").isJsonNull()) && !jsonObj.get("unownedCardSleeveWrapImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unownedCardSleeveWrapImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unownedCardSleeveWrapImagePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsSeasonsDestinyEventCardImages.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsSeasonsDestinyEventCardImages' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsSeasonsDestinyEventCardImages> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsSeasonsDestinyEventCardImages.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsSeasonsDestinyEventCardImages>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsSeasonsDestinyEventCardImages value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsSeasonsDestinyEventCardImages read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsSeasonsDestinyEventCardImages given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsSeasonsDestinyEventCardImages
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsSeasonsDestinyEventCardImages
   */
  public static DestinyDefinitionsSeasonsDestinyEventCardImages fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsSeasonsDestinyEventCardImages.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsSeasonsDestinyEventCardImages to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

