/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary information about the activity that was played.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyHistoricalStatsDestinyHistoricalStatsActivity {
  public static final String SERIALIZED_NAME_DIRECTOR_ACTIVITY_HASH = "directorActivityHash";
  @SerializedName(SERIALIZED_NAME_DIRECTOR_ACTIVITY_HASH)
  private Integer directorActivityHash;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private Long instanceId;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "isPrivate";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_MEMBERSHIP_TYPE = "membershipType";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_TYPE)
  private Integer membershipType;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private Integer mode;

  public static final String SERIALIZED_NAME_MODES = "modes";
  @SerializedName(SERIALIZED_NAME_MODES)
  private List<Integer> modes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private Integer referenceId;

  public DestinyHistoricalStatsDestinyHistoricalStatsActivity() {
  }

  public DestinyHistoricalStatsDestinyHistoricalStatsActivity directorActivityHash(Integer directorActivityHash) {
    this.directorActivityHash = directorActivityHash;
    return this;
  }

  /**
   * The unique hash identifier of the DestinyActivityDefinition that was played.
   * @return directorActivityHash
   */
  @javax.annotation.Nullable
  public Integer getDirectorActivityHash() {
    return directorActivityHash;
  }

  public void setDirectorActivityHash(Integer directorActivityHash) {
    this.directorActivityHash = directorActivityHash;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsActivity instanceId(Long instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * The unique identifier for this *specific* match that was played.  This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.
   * @return instanceId
   */
  @javax.annotation.Nullable
  public Long getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(Long instanceId) {
    this.instanceId = instanceId;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsActivity isPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

  /**
   * Whether or not the match was a private match.
   * @return isPrivate
   */
  @javax.annotation.Nullable
  public Boolean getIsPrivate() {
    return isPrivate;
  }

  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsActivity membershipType(Integer membershipType) {
    this.membershipType = membershipType;
    return this;
  }

  /**
   * The Membership Type indicating the platform on which this match was played.
   * @return membershipType
   */
  @javax.annotation.Nullable
  public Integer getMembershipType() {
    return membershipType;
  }

  public void setMembershipType(Integer membershipType) {
    this.membershipType = membershipType;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsActivity mode(Integer mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Indicates the most specific game mode of the activity that we could find.
   * @return mode
   */
  @javax.annotation.Nullable
  public Integer getMode() {
    return mode;
  }

  public void setMode(Integer mode) {
    this.mode = mode;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsActivity modes(List<Integer> modes) {
    this.modes = modes;
    return this;
  }

  public DestinyHistoricalStatsDestinyHistoricalStatsActivity addModesItem(Integer modesItem) {
    if (this.modes == null) {
      this.modes = new ArrayList<>();
    }
    this.modes.add(modesItem);
    return this;
  }

  /**
   * The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.
   * @return modes
   */
  @javax.annotation.Nullable
  public List<Integer> getModes() {
    return modes;
  }

  public void setModes(List<Integer> modes) {
    this.modes = modes;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsActivity referenceId(Integer referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it&#39;d be named activityHash. Too late now.
   * @return referenceId
   */
  @javax.annotation.Nullable
  public Integer getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(Integer referenceId) {
    this.referenceId = referenceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyHistoricalStatsDestinyHistoricalStatsActivity destinyHistoricalStatsDestinyHistoricalStatsActivity = (DestinyHistoricalStatsDestinyHistoricalStatsActivity) o;
    return Objects.equals(this.directorActivityHash, destinyHistoricalStatsDestinyHistoricalStatsActivity.directorActivityHash) &&
        Objects.equals(this.instanceId, destinyHistoricalStatsDestinyHistoricalStatsActivity.instanceId) &&
        Objects.equals(this.isPrivate, destinyHistoricalStatsDestinyHistoricalStatsActivity.isPrivate) &&
        Objects.equals(this.membershipType, destinyHistoricalStatsDestinyHistoricalStatsActivity.membershipType) &&
        Objects.equals(this.mode, destinyHistoricalStatsDestinyHistoricalStatsActivity.mode) &&
        Objects.equals(this.modes, destinyHistoricalStatsDestinyHistoricalStatsActivity.modes) &&
        Objects.equals(this.referenceId, destinyHistoricalStatsDestinyHistoricalStatsActivity.referenceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directorActivityHash, instanceId, isPrivate, membershipType, mode, modes, referenceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyHistoricalStatsDestinyHistoricalStatsActivity {\n");
    sb.append("    directorActivityHash: ").append(toIndentedString(directorActivityHash)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    membershipType: ").append(toIndentedString(membershipType)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    modes: ").append(toIndentedString(modes)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("directorActivityHash");
    openapiFields.add("instanceId");
    openapiFields.add("isPrivate");
    openapiFields.add("membershipType");
    openapiFields.add("mode");
    openapiFields.add("modes");
    openapiFields.add("referenceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyHistoricalStatsDestinyHistoricalStatsActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyHistoricalStatsDestinyHistoricalStatsActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyHistoricalStatsDestinyHistoricalStatsActivity is not found in the empty JSON string", DestinyHistoricalStatsDestinyHistoricalStatsActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyHistoricalStatsDestinyHistoricalStatsActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyHistoricalStatsDestinyHistoricalStatsActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("modes") != null && !jsonObj.get("modes").isJsonNull() && !jsonObj.get("modes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modes` to be an array in the JSON string but got `%s`", jsonObj.get("modes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyHistoricalStatsDestinyHistoricalStatsActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyHistoricalStatsDestinyHistoricalStatsActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyHistoricalStatsDestinyHistoricalStatsActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyHistoricalStatsDestinyHistoricalStatsActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyHistoricalStatsDestinyHistoricalStatsActivity>() {
           @Override
           public void write(JsonWriter out, DestinyHistoricalStatsDestinyHistoricalStatsActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyHistoricalStatsDestinyHistoricalStatsActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyHistoricalStatsDestinyHistoricalStatsActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyHistoricalStatsDestinyHistoricalStatsActivity
   * @throws IOException if the JSON string is invalid with respect to DestinyHistoricalStatsDestinyHistoricalStatsActivity
   */
  public static DestinyHistoricalStatsDestinyHistoricalStatsActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyHistoricalStatsDestinyHistoricalStatsActivity.class);
  }

  /**
   * Convert an instance of DestinyHistoricalStatsDestinyHistoricalStatsActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

