/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GroupsV2GroupEditAction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupsV2GroupEditAction {
  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private String about;

  public static final String SERIALIZED_NAME_ALLOW_CHAT = "allowChat";
  @SerializedName(SERIALIZED_NAME_ALLOW_CHAT)
  private Boolean allowChat;

  public static final String SERIALIZED_NAME_AVATAR_IMAGE_INDEX = "avatarImageIndex";
  @SerializedName(SERIALIZED_NAME_AVATAR_IMAGE_INDEX)
  private Integer avatarImageIndex;

  public static final String SERIALIZED_NAME_CALLSIGN = "callsign";
  @SerializedName(SERIALIZED_NAME_CALLSIGN)
  private String callsign;

  /**
   * Gets or Sets chatSecurity
   */
  @JsonAdapter(ChatSecurityEnum.Adapter.class)
  public enum ChatSecurityEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    ChatSecurityEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChatSecurityEnum fromValue(Integer value) {
      for (ChatSecurityEnum b : ChatSecurityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChatSecurityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChatSecurityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChatSecurityEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ChatSecurityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ChatSecurityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHAT_SECURITY = "chatSecurity";
  @SerializedName(SERIALIZED_NAME_CHAT_SECURITY)
  private ChatSecurityEnum chatSecurity;

  /**
   * Gets or Sets defaultPublicity
   */
  @JsonAdapter(DefaultPublicityEnum.Adapter.class)
  public enum DefaultPublicityEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    DefaultPublicityEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultPublicityEnum fromValue(Integer value) {
      for (DefaultPublicityEnum b : DefaultPublicityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultPublicityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultPublicityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultPublicityEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DefaultPublicityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DefaultPublicityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_PUBLICITY = "defaultPublicity";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PUBLICITY)
  private DefaultPublicityEnum defaultPublicity;

  public static final String SERIALIZED_NAME_ENABLE_INVITATION_MESSAGING_FOR_ADMINS = "enableInvitationMessagingForAdmins";
  @SerializedName(SERIALIZED_NAME_ENABLE_INVITATION_MESSAGING_FOR_ADMINS)
  private Boolean enableInvitationMessagingForAdmins;

  /**
   * Gets or Sets homepage
   */
  @JsonAdapter(HomepageEnum.Adapter.class)
  public enum HomepageEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    HomepageEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HomepageEnum fromValue(Integer value) {
      for (HomepageEnum b : HomepageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HomepageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HomepageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HomepageEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return HomepageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      HomepageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private HomepageEnum homepage;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_IS_PUBLIC_TOPIC_ADMIN_ONLY = "isPublicTopicAdminOnly";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC_TOPIC_ADMIN_ONLY)
  private Boolean isPublicTopicAdminOnly;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  /**
   * Gets or Sets membershipOption
   */
  @JsonAdapter(MembershipOptionEnum.Adapter.class)
  public enum MembershipOptionEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    MembershipOptionEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MembershipOptionEnum fromValue(Integer value) {
      for (MembershipOptionEnum b : MembershipOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MembershipOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MembershipOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MembershipOptionEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return MembershipOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      MembershipOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEMBERSHIP_OPTION = "membershipOption";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_OPTION)
  private MembershipOptionEnum membershipOption;

  public static final String SERIALIZED_NAME_MOTTO = "motto";
  @SerializedName(SERIALIZED_NAME_MOTTO)
  private String motto;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private String theme;

  public GroupsV2GroupEditAction() {
  }

  public GroupsV2GroupEditAction about(String about) {
    this.about = about;
    return this;
  }

  /**
   * Get about
   * @return about
   */
  @javax.annotation.Nullable
  public String getAbout() {
    return about;
  }

  public void setAbout(String about) {
    this.about = about;
  }


  public GroupsV2GroupEditAction allowChat(Boolean allowChat) {
    this.allowChat = allowChat;
    return this;
  }

  /**
   * Get allowChat
   * @return allowChat
   */
  @javax.annotation.Nullable
  public Boolean getAllowChat() {
    return allowChat;
  }

  public void setAllowChat(Boolean allowChat) {
    this.allowChat = allowChat;
  }


  public GroupsV2GroupEditAction avatarImageIndex(Integer avatarImageIndex) {
    this.avatarImageIndex = avatarImageIndex;
    return this;
  }

  /**
   * Get avatarImageIndex
   * @return avatarImageIndex
   */
  @javax.annotation.Nullable
  public Integer getAvatarImageIndex() {
    return avatarImageIndex;
  }

  public void setAvatarImageIndex(Integer avatarImageIndex) {
    this.avatarImageIndex = avatarImageIndex;
  }


  public GroupsV2GroupEditAction callsign(String callsign) {
    this.callsign = callsign;
    return this;
  }

  /**
   * Get callsign
   * @return callsign
   */
  @javax.annotation.Nullable
  public String getCallsign() {
    return callsign;
  }

  public void setCallsign(String callsign) {
    this.callsign = callsign;
  }


  public GroupsV2GroupEditAction chatSecurity(ChatSecurityEnum chatSecurity) {
    this.chatSecurity = chatSecurity;
    return this;
  }

  /**
   * Get chatSecurity
   * @return chatSecurity
   */
  @javax.annotation.Nullable
  public ChatSecurityEnum getChatSecurity() {
    return chatSecurity;
  }

  public void setChatSecurity(ChatSecurityEnum chatSecurity) {
    this.chatSecurity = chatSecurity;
  }


  public GroupsV2GroupEditAction defaultPublicity(DefaultPublicityEnum defaultPublicity) {
    this.defaultPublicity = defaultPublicity;
    return this;
  }

  /**
   * Get defaultPublicity
   * @return defaultPublicity
   */
  @javax.annotation.Nullable
  public DefaultPublicityEnum getDefaultPublicity() {
    return defaultPublicity;
  }

  public void setDefaultPublicity(DefaultPublicityEnum defaultPublicity) {
    this.defaultPublicity = defaultPublicity;
  }


  public GroupsV2GroupEditAction enableInvitationMessagingForAdmins(Boolean enableInvitationMessagingForAdmins) {
    this.enableInvitationMessagingForAdmins = enableInvitationMessagingForAdmins;
    return this;
  }

  /**
   * Get enableInvitationMessagingForAdmins
   * @return enableInvitationMessagingForAdmins
   */
  @javax.annotation.Nullable
  public Boolean getEnableInvitationMessagingForAdmins() {
    return enableInvitationMessagingForAdmins;
  }

  public void setEnableInvitationMessagingForAdmins(Boolean enableInvitationMessagingForAdmins) {
    this.enableInvitationMessagingForAdmins = enableInvitationMessagingForAdmins;
  }


  public GroupsV2GroupEditAction homepage(HomepageEnum homepage) {
    this.homepage = homepage;
    return this;
  }

  /**
   * Get homepage
   * @return homepage
   */
  @javax.annotation.Nullable
  public HomepageEnum getHomepage() {
    return homepage;
  }

  public void setHomepage(HomepageEnum homepage) {
    this.homepage = homepage;
  }


  public GroupsV2GroupEditAction isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * Get isPublic
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public GroupsV2GroupEditAction isPublicTopicAdminOnly(Boolean isPublicTopicAdminOnly) {
    this.isPublicTopicAdminOnly = isPublicTopicAdminOnly;
    return this;
  }

  /**
   * Get isPublicTopicAdminOnly
   * @return isPublicTopicAdminOnly
   */
  @javax.annotation.Nullable
  public Boolean getIsPublicTopicAdminOnly() {
    return isPublicTopicAdminOnly;
  }

  public void setIsPublicTopicAdminOnly(Boolean isPublicTopicAdminOnly) {
    this.isPublicTopicAdminOnly = isPublicTopicAdminOnly;
  }


  public GroupsV2GroupEditAction locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public GroupsV2GroupEditAction membershipOption(MembershipOptionEnum membershipOption) {
    this.membershipOption = membershipOption;
    return this;
  }

  /**
   * Get membershipOption
   * @return membershipOption
   */
  @javax.annotation.Nullable
  public MembershipOptionEnum getMembershipOption() {
    return membershipOption;
  }

  public void setMembershipOption(MembershipOptionEnum membershipOption) {
    this.membershipOption = membershipOption;
  }


  public GroupsV2GroupEditAction motto(String motto) {
    this.motto = motto;
    return this;
  }

  /**
   * Get motto
   * @return motto
   */
  @javax.annotation.Nullable
  public String getMotto() {
    return motto;
  }

  public void setMotto(String motto) {
    this.motto = motto;
  }


  public GroupsV2GroupEditAction name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GroupsV2GroupEditAction tags(String tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }


  public GroupsV2GroupEditAction theme(String theme) {
    this.theme = theme;
    return this;
  }

  /**
   * Get theme
   * @return theme
   */
  @javax.annotation.Nullable
  public String getTheme() {
    return theme;
  }

  public void setTheme(String theme) {
    this.theme = theme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupsV2GroupEditAction groupsV2GroupEditAction = (GroupsV2GroupEditAction) o;
    return Objects.equals(this.about, groupsV2GroupEditAction.about) &&
        Objects.equals(this.allowChat, groupsV2GroupEditAction.allowChat) &&
        Objects.equals(this.avatarImageIndex, groupsV2GroupEditAction.avatarImageIndex) &&
        Objects.equals(this.callsign, groupsV2GroupEditAction.callsign) &&
        Objects.equals(this.chatSecurity, groupsV2GroupEditAction.chatSecurity) &&
        Objects.equals(this.defaultPublicity, groupsV2GroupEditAction.defaultPublicity) &&
        Objects.equals(this.enableInvitationMessagingForAdmins, groupsV2GroupEditAction.enableInvitationMessagingForAdmins) &&
        Objects.equals(this.homepage, groupsV2GroupEditAction.homepage) &&
        Objects.equals(this.isPublic, groupsV2GroupEditAction.isPublic) &&
        Objects.equals(this.isPublicTopicAdminOnly, groupsV2GroupEditAction.isPublicTopicAdminOnly) &&
        Objects.equals(this.locale, groupsV2GroupEditAction.locale) &&
        Objects.equals(this.membershipOption, groupsV2GroupEditAction.membershipOption) &&
        Objects.equals(this.motto, groupsV2GroupEditAction.motto) &&
        Objects.equals(this.name, groupsV2GroupEditAction.name) &&
        Objects.equals(this.tags, groupsV2GroupEditAction.tags) &&
        Objects.equals(this.theme, groupsV2GroupEditAction.theme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, allowChat, avatarImageIndex, callsign, chatSecurity, defaultPublicity, enableInvitationMessagingForAdmins, homepage, isPublic, isPublicTopicAdminOnly, locale, membershipOption, motto, name, tags, theme);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupsV2GroupEditAction {\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    allowChat: ").append(toIndentedString(allowChat)).append("\n");
    sb.append("    avatarImageIndex: ").append(toIndentedString(avatarImageIndex)).append("\n");
    sb.append("    callsign: ").append(toIndentedString(callsign)).append("\n");
    sb.append("    chatSecurity: ").append(toIndentedString(chatSecurity)).append("\n");
    sb.append("    defaultPublicity: ").append(toIndentedString(defaultPublicity)).append("\n");
    sb.append("    enableInvitationMessagingForAdmins: ").append(toIndentedString(enableInvitationMessagingForAdmins)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    isPublicTopicAdminOnly: ").append(toIndentedString(isPublicTopicAdminOnly)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    membershipOption: ").append(toIndentedString(membershipOption)).append("\n");
    sb.append("    motto: ").append(toIndentedString(motto)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("about");
    openapiFields.add("allowChat");
    openapiFields.add("avatarImageIndex");
    openapiFields.add("callsign");
    openapiFields.add("chatSecurity");
    openapiFields.add("defaultPublicity");
    openapiFields.add("enableInvitationMessagingForAdmins");
    openapiFields.add("homepage");
    openapiFields.add("isPublic");
    openapiFields.add("isPublicTopicAdminOnly");
    openapiFields.add("locale");
    openapiFields.add("membershipOption");
    openapiFields.add("motto");
    openapiFields.add("name");
    openapiFields.add("tags");
    openapiFields.add("theme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupsV2GroupEditAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupsV2GroupEditAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupsV2GroupEditAction is not found in the empty JSON string", GroupsV2GroupEditAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupsV2GroupEditAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupsV2GroupEditAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) && !jsonObj.get("about").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `about` to be a primitive type in the JSON string but got `%s`", jsonObj.get("about").toString()));
      }
      if ((jsonObj.get("callsign") != null && !jsonObj.get("callsign").isJsonNull()) && !jsonObj.get("callsign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callsign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callsign").toString()));
      }
      // validate the optional field `chatSecurity`
      if (jsonObj.get("chatSecurity") != null && !jsonObj.get("chatSecurity").isJsonNull()) {
        ChatSecurityEnum.validateJsonElement(jsonObj.get("chatSecurity"));
      }
      // validate the optional field `defaultPublicity`
      if (jsonObj.get("defaultPublicity") != null && !jsonObj.get("defaultPublicity").isJsonNull()) {
        DefaultPublicityEnum.validateJsonElement(jsonObj.get("defaultPublicity"));
      }
      // validate the optional field `homepage`
      if (jsonObj.get("homepage") != null && !jsonObj.get("homepage").isJsonNull()) {
        HomepageEnum.validateJsonElement(jsonObj.get("homepage"));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the optional field `membershipOption`
      if (jsonObj.get("membershipOption") != null && !jsonObj.get("membershipOption").isJsonNull()) {
        MembershipOptionEnum.validateJsonElement(jsonObj.get("membershipOption"));
      }
      if ((jsonObj.get("motto") != null && !jsonObj.get("motto").isJsonNull()) && !jsonObj.get("motto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `motto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("motto").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) && !jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupsV2GroupEditAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupsV2GroupEditAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupsV2GroupEditAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupsV2GroupEditAction.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupsV2GroupEditAction>() {
           @Override
           public void write(JsonWriter out, GroupsV2GroupEditAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupsV2GroupEditAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupsV2GroupEditAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupsV2GroupEditAction
   * @throws IOException if the JSON string is invalid with respect to GroupsV2GroupEditAction
   */
  public static GroupsV2GroupEditAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupsV2GroupEditAction.class);
  }

  /**
   * Convert an instance of GroupsV2GroupEditAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

