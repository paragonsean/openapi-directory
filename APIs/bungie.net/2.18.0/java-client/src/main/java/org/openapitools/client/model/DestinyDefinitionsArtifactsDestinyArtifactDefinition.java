/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsArtifactsDestinyArtifactTierDefinition;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyItemTranslationBlockDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents known info about a Destiny Artifact.  We cannot guarantee that artifact definitions will be immutable between seasons - in fact, we&#39;ve been told that they will be replaced between seasons. But this definition is built both to minimize the amount of lookups for related data that have to occur, and is built in hope that, if this plan changes, we will be able to accommodate it more easily.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsArtifactsDestinyArtifactDefinition {
  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_TIERS = "tiers";
  @SerializedName(SERIALIZED_NAME_TIERS)
  private List<DestinyDefinitionsArtifactsDestinyArtifactTierDefinition> tiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSLATION_BLOCK = "translationBlock";
  @SerializedName(SERIALIZED_NAME_TRANSLATION_BLOCK)
  private DestinyDefinitionsDestinyItemTranslationBlockDefinition translationBlock;

  public DestinyDefinitionsArtifactsDestinyArtifactDefinition() {
  }

  public DestinyDefinitionsArtifactsDestinyArtifactDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Any basic display info we know about the Artifact. Currently sourced from a related inventory item, but the source of this data is subject to change.
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsArtifactsDestinyArtifactDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsArtifactsDestinyArtifactDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsArtifactsDestinyArtifactDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsArtifactsDestinyArtifactDefinition tiers(List<DestinyDefinitionsArtifactsDestinyArtifactTierDefinition> tiers) {
    this.tiers = tiers;
    return this;
  }

  public DestinyDefinitionsArtifactsDestinyArtifactDefinition addTiersItem(DestinyDefinitionsArtifactsDestinyArtifactTierDefinition tiersItem) {
    if (this.tiers == null) {
      this.tiers = new ArrayList<>();
    }
    this.tiers.add(tiersItem);
    return this;
  }

  /**
   * Any Tier/Rank data related to this artifact, listed in display order.  Currently sourced from a Vendor, but this source is subject to change.
   * @return tiers
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsArtifactsDestinyArtifactTierDefinition> getTiers() {
    return tiers;
  }

  public void setTiers(List<DestinyDefinitionsArtifactsDestinyArtifactTierDefinition> tiers) {
    this.tiers = tiers;
  }


  public DestinyDefinitionsArtifactsDestinyArtifactDefinition translationBlock(DestinyDefinitionsDestinyItemTranslationBlockDefinition translationBlock) {
    this.translationBlock = translationBlock;
    return this;
  }

  /**
   * Any Geometry/3D info we know about the Artifact. Currently sourced from a related inventory item&#39;s gearset information, but the source of this data is subject to change.
   * @return translationBlock
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsDestinyItemTranslationBlockDefinition getTranslationBlock() {
    return translationBlock;
  }

  public void setTranslationBlock(DestinyDefinitionsDestinyItemTranslationBlockDefinition translationBlock) {
    this.translationBlock = translationBlock;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsArtifactsDestinyArtifactDefinition destinyDefinitionsArtifactsDestinyArtifactDefinition = (DestinyDefinitionsArtifactsDestinyArtifactDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsArtifactsDestinyArtifactDefinition.displayProperties) &&
        Objects.equals(this.hash, destinyDefinitionsArtifactsDestinyArtifactDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsArtifactsDestinyArtifactDefinition.index) &&
        Objects.equals(this.redacted, destinyDefinitionsArtifactsDestinyArtifactDefinition.redacted) &&
        Objects.equals(this.tiers, destinyDefinitionsArtifactsDestinyArtifactDefinition.tiers) &&
        Objects.equals(this.translationBlock, destinyDefinitionsArtifactsDestinyArtifactDefinition.translationBlock);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, hash, index, redacted, tiers, translationBlock);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsArtifactsDestinyArtifactDefinition {\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    tiers: ").append(toIndentedString(tiers)).append("\n");
    sb.append("    translationBlock: ").append(toIndentedString(translationBlock)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayProperties");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("redacted");
    openapiFields.add("tiers");
    openapiFields.add("translationBlock");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsArtifactsDestinyArtifactDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsArtifactsDestinyArtifactDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsArtifactsDestinyArtifactDefinition is not found in the empty JSON string", DestinyDefinitionsArtifactsDestinyArtifactDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsArtifactsDestinyArtifactDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsArtifactsDestinyArtifactDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      if (jsonObj.get("tiers") != null && !jsonObj.get("tiers").isJsonNull()) {
        JsonArray jsonArraytiers = jsonObj.getAsJsonArray("tiers");
        if (jsonArraytiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tiers` to be an array in the JSON string but got `%s`", jsonObj.get("tiers").toString()));
          }

          // validate the optional field `tiers` (array)
          for (int i = 0; i < jsonArraytiers.size(); i++) {
            DestinyDefinitionsArtifactsDestinyArtifactTierDefinition.validateJsonElement(jsonArraytiers.get(i));
          };
        }
      }
      // validate the optional field `translationBlock`
      if (jsonObj.get("translationBlock") != null && !jsonObj.get("translationBlock").isJsonNull()) {
        DestinyDefinitionsDestinyItemTranslationBlockDefinition.validateJsonElement(jsonObj.get("translationBlock"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsArtifactsDestinyArtifactDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsArtifactsDestinyArtifactDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsArtifactsDestinyArtifactDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsArtifactsDestinyArtifactDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsArtifactsDestinyArtifactDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsArtifactsDestinyArtifactDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsArtifactsDestinyArtifactDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsArtifactsDestinyArtifactDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsArtifactsDestinyArtifactDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsArtifactsDestinyArtifactDefinition
   */
  public static DestinyDefinitionsArtifactsDestinyArtifactDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsArtifactsDestinyArtifactDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsArtifactsDestinyArtifactDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

