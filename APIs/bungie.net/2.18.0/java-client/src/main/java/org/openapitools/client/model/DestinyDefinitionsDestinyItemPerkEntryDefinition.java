/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An intrinsic perk on an item, and the requirements for it to be activated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemPerkEntryDefinition {
  public static final String SERIALIZED_NAME_PERK_HASH = "perkHash";
  @SerializedName(SERIALIZED_NAME_PERK_HASH)
  private Integer perkHash;

  public static final String SERIALIZED_NAME_PERK_VISIBILITY = "perkVisibility";
  @SerializedName(SERIALIZED_NAME_PERK_VISIBILITY)
  private Integer perkVisibility;

  public static final String SERIALIZED_NAME_REQUIREMENT_DISPLAY_STRING = "requirementDisplayString";
  @SerializedName(SERIALIZED_NAME_REQUIREMENT_DISPLAY_STRING)
  private String requirementDisplayString;

  public DestinyDefinitionsDestinyItemPerkEntryDefinition() {
  }

  public DestinyDefinitionsDestinyItemPerkEntryDefinition perkHash(Integer perkHash) {
    this.perkHash = perkHash;
    return this;
  }

  /**
   * A hash identifier for the DestinySandboxPerkDefinition being provided on the item.
   * @return perkHash
   */
  @javax.annotation.Nullable
  public Integer getPerkHash() {
    return perkHash;
  }

  public void setPerkHash(Integer perkHash) {
    this.perkHash = perkHash;
  }


  public DestinyDefinitionsDestinyItemPerkEntryDefinition perkVisibility(Integer perkVisibility) {
    this.perkVisibility = perkVisibility;
    return this;
  }

  /**
   * Indicates whether this perk should be shown, or if it should be shown disabled.
   * @return perkVisibility
   */
  @javax.annotation.Nullable
  public Integer getPerkVisibility() {
    return perkVisibility;
  }

  public void setPerkVisibility(Integer perkVisibility) {
    this.perkVisibility = perkVisibility;
  }


  public DestinyDefinitionsDestinyItemPerkEntryDefinition requirementDisplayString(String requirementDisplayString) {
    this.requirementDisplayString = requirementDisplayString;
    return this;
  }

  /**
   * If this perk is not active, this is the string to show for why it&#39;s not providing its benefits.
   * @return requirementDisplayString
   */
  @javax.annotation.Nullable
  public String getRequirementDisplayString() {
    return requirementDisplayString;
  }

  public void setRequirementDisplayString(String requirementDisplayString) {
    this.requirementDisplayString = requirementDisplayString;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemPerkEntryDefinition destinyDefinitionsDestinyItemPerkEntryDefinition = (DestinyDefinitionsDestinyItemPerkEntryDefinition) o;
    return Objects.equals(this.perkHash, destinyDefinitionsDestinyItemPerkEntryDefinition.perkHash) &&
        Objects.equals(this.perkVisibility, destinyDefinitionsDestinyItemPerkEntryDefinition.perkVisibility) &&
        Objects.equals(this.requirementDisplayString, destinyDefinitionsDestinyItemPerkEntryDefinition.requirementDisplayString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(perkHash, perkVisibility, requirementDisplayString);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemPerkEntryDefinition {\n");
    sb.append("    perkHash: ").append(toIndentedString(perkHash)).append("\n");
    sb.append("    perkVisibility: ").append(toIndentedString(perkVisibility)).append("\n");
    sb.append("    requirementDisplayString: ").append(toIndentedString(requirementDisplayString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("perkHash");
    openapiFields.add("perkVisibility");
    openapiFields.add("requirementDisplayString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemPerkEntryDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemPerkEntryDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemPerkEntryDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemPerkEntryDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemPerkEntryDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemPerkEntryDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("requirementDisplayString") != null && !jsonObj.get("requirementDisplayString").isJsonNull()) && !jsonObj.get("requirementDisplayString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requirementDisplayString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requirementDisplayString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemPerkEntryDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemPerkEntryDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemPerkEntryDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemPerkEntryDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemPerkEntryDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemPerkEntryDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemPerkEntryDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemPerkEntryDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemPerkEntryDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemPerkEntryDefinition
   */
  public static DestinyDefinitionsDestinyItemPerkEntryDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemPerkEntryDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemPerkEntryDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

