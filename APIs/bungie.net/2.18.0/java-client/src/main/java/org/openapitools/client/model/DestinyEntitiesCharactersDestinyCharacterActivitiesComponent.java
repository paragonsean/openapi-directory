/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDestinyActivity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This component holds activity data for a character. It will tell you about the character&#39;s current activity status, as well as activities that are available to the user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {
  public static final String SERIALIZED_NAME_AVAILABLE_ACTIVITIES = "availableActivities";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ACTIVITIES)
  private List<DestinyDestinyActivity> availableActivities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_ACTIVITY_HASH = "currentActivityHash";
  @SerializedName(SERIALIZED_NAME_CURRENT_ACTIVITY_HASH)
  private Integer currentActivityHash;

  public static final String SERIALIZED_NAME_CURRENT_ACTIVITY_MODE_HASH = "currentActivityModeHash";
  @SerializedName(SERIALIZED_NAME_CURRENT_ACTIVITY_MODE_HASH)
  private Integer currentActivityModeHash;

  public static final String SERIALIZED_NAME_CURRENT_ACTIVITY_MODE_HASHES = "currentActivityModeHashes";
  @SerializedName(SERIALIZED_NAME_CURRENT_ACTIVITY_MODE_HASHES)
  private List<Integer> currentActivityModeHashes = new ArrayList<>();

  /**
   * And the current activity&#39;s most specific mode type, if it can be found.
   */
  @JsonAdapter(CurrentActivityModeTypeEnum.Adapter.class)
  public enum CurrentActivityModeTypeEnum {
    NUMBER_0(0),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_19(19),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27),
    
    NUMBER_28(28),
    
    NUMBER_29(29),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_37(37),
    
    NUMBER_38(38),
    
    NUMBER_39(39),
    
    NUMBER_40(40),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_44(44),
    
    NUMBER_45(45),
    
    NUMBER_46(46),
    
    NUMBER_47(47),
    
    NUMBER_48(48),
    
    NUMBER_49(49),
    
    NUMBER_50(50),
    
    NUMBER_51(51),
    
    NUMBER_52(52),
    
    NUMBER_53(53),
    
    NUMBER_54(54),
    
    NUMBER_55(55),
    
    NUMBER_56(56),
    
    NUMBER_57(57),
    
    NUMBER_58(58),
    
    NUMBER_59(59),
    
    NUMBER_60(60),
    
    NUMBER_61(61),
    
    NUMBER_62(62),
    
    NUMBER_63(63),
    
    NUMBER_64(64),
    
    NUMBER_65(65),
    
    NUMBER_66(66),
    
    NUMBER_67(67),
    
    NUMBER_68(68),
    
    NUMBER_69(69),
    
    NUMBER_70(70),
    
    NUMBER_71(71),
    
    NUMBER_72(72),
    
    NUMBER_73(73),
    
    NUMBER_74(74),
    
    NUMBER_75(75),
    
    NUMBER_76(76),
    
    NUMBER_77(77),
    
    NUMBER_78(78),
    
    NUMBER_79(79),
    
    NUMBER_80(80),
    
    NUMBER_81(81),
    
    NUMBER_82(82),
    
    NUMBER_83(83),
    
    NUMBER_84(84),
    
    NUMBER_85(85),
    
    NUMBER_86(86),
    
    NUMBER_87(87),
    
    NUMBER_88(88),
    
    NUMBER_89(89),
    
    NUMBER_90(90),
    
    NUMBER_91(91);

    private Integer value;

    CurrentActivityModeTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentActivityModeTypeEnum fromValue(Integer value) {
      for (CurrentActivityModeTypeEnum b : CurrentActivityModeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrentActivityModeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentActivityModeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentActivityModeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return CurrentActivityModeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      CurrentActivityModeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENT_ACTIVITY_MODE_TYPE = "currentActivityModeType";
  @SerializedName(SERIALIZED_NAME_CURRENT_ACTIVITY_MODE_TYPE)
  private CurrentActivityModeTypeEnum currentActivityModeType;

  public static final String SERIALIZED_NAME_CURRENT_ACTIVITY_MODE_TYPES = "currentActivityModeTypes";
  @SerializedName(SERIALIZED_NAME_CURRENT_ACTIVITY_MODE_TYPES)
  private List<Integer> currentActivityModeTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_PLAYLIST_ACTIVITY_HASH = "currentPlaylistActivityHash";
  @SerializedName(SERIALIZED_NAME_CURRENT_PLAYLIST_ACTIVITY_HASH)
  private Integer currentPlaylistActivityHash;

  public static final String SERIALIZED_NAME_DATE_ACTIVITY_STARTED = "dateActivityStarted";
  @SerializedName(SERIALIZED_NAME_DATE_ACTIVITY_STARTED)
  private OffsetDateTime dateActivityStarted;

  public static final String SERIALIZED_NAME_LAST_COMPLETED_STORY_HASH = "lastCompletedStoryHash";
  @SerializedName(SERIALIZED_NAME_LAST_COMPLETED_STORY_HASH)
  private Integer lastCompletedStoryHash;

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent() {
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent availableActivities(List<DestinyDestinyActivity> availableActivities) {
    this.availableActivities = availableActivities;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent addAvailableActivitiesItem(DestinyDestinyActivity availableActivitiesItem) {
    if (this.availableActivities == null) {
      this.availableActivities = new ArrayList<>();
    }
    this.availableActivities.add(availableActivitiesItem);
    return this;
  }

  /**
   * The list of activities that the user can play.
   * @return availableActivities
   */
  @javax.annotation.Nullable
  public List<DestinyDestinyActivity> getAvailableActivities() {
    return availableActivities;
  }

  public void setAvailableActivities(List<DestinyDestinyActivity> availableActivities) {
    this.availableActivities = availableActivities;
  }


  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent currentActivityHash(Integer currentActivityHash) {
    this.currentActivityHash = currentActivityHash;
    return this;
  }

  /**
   * If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP \&quot;Activities\&quot; are just maps: it&#39;s the ActivityMode that determines what type of PVP game they&#39;re playing.
   * @return currentActivityHash
   */
  @javax.annotation.Nullable
  public Integer getCurrentActivityHash() {
    return currentActivityHash;
  }

  public void setCurrentActivityHash(Integer currentActivityHash) {
    this.currentActivityHash = currentActivityHash;
  }


  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent currentActivityModeHash(Integer currentActivityModeHash) {
    this.currentActivityModeHash = currentActivityModeHash;
    return this;
  }

  /**
   * If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now.
   * @return currentActivityModeHash
   */
  @javax.annotation.Nullable
  public Integer getCurrentActivityModeHash() {
    return currentActivityModeHash;
  }

  public void setCurrentActivityModeHash(Integer currentActivityModeHash) {
    this.currentActivityModeHash = currentActivityModeHash;
  }


  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent currentActivityModeHashes(List<Integer> currentActivityModeHashes) {
    this.currentActivityModeHashes = currentActivityModeHashes;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent addCurrentActivityModeHashesItem(Integer currentActivityModeHashesItem) {
    if (this.currentActivityModeHashes == null) {
      this.currentActivityModeHashes = new ArrayList<>();
    }
    this.currentActivityModeHashes.add(currentActivityModeHashesItem);
    return this;
  }

  /**
   * If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they&#39;re doing right now.
   * @return currentActivityModeHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getCurrentActivityModeHashes() {
    return currentActivityModeHashes;
  }

  public void setCurrentActivityModeHashes(List<Integer> currentActivityModeHashes) {
    this.currentActivityModeHashes = currentActivityModeHashes;
  }


  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent currentActivityModeType(CurrentActivityModeTypeEnum currentActivityModeType) {
    this.currentActivityModeType = currentActivityModeType;
    return this;
  }

  /**
   * And the current activity&#39;s most specific mode type, if it can be found.
   * @return currentActivityModeType
   */
  @javax.annotation.Nullable
  public CurrentActivityModeTypeEnum getCurrentActivityModeType() {
    return currentActivityModeType;
  }

  public void setCurrentActivityModeType(CurrentActivityModeTypeEnum currentActivityModeType) {
    this.currentActivityModeType = currentActivityModeType;
  }


  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent currentActivityModeTypes(List<Integer> currentActivityModeTypes) {
    this.currentActivityModeTypes = currentActivityModeTypes;
    return this;
  }

  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent addCurrentActivityModeTypesItem(Integer currentActivityModeTypesItem) {
    if (this.currentActivityModeTypes == null) {
      this.currentActivityModeTypes = new ArrayList<>();
    }
    this.currentActivityModeTypes.add(currentActivityModeTypesItem);
    return this;
  }

  /**
   * All Activity Modes that apply to the current activity being played, in enum form.
   * @return currentActivityModeTypes
   */
  @javax.annotation.Nullable
  public List<Integer> getCurrentActivityModeTypes() {
    return currentActivityModeTypes;
  }

  public void setCurrentActivityModeTypes(List<Integer> currentActivityModeTypes) {
    this.currentActivityModeTypes = currentActivityModeTypes;
  }


  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent currentPlaylistActivityHash(Integer currentPlaylistActivityHash) {
    this.currentPlaylistActivityHash = currentPlaylistActivityHash;
    return this;
  }

  /**
   * If the user is in a playlist, this is the hash identifier for the playlist that they chose.
   * @return currentPlaylistActivityHash
   */
  @javax.annotation.Nullable
  public Integer getCurrentPlaylistActivityHash() {
    return currentPlaylistActivityHash;
  }

  public void setCurrentPlaylistActivityHash(Integer currentPlaylistActivityHash) {
    this.currentPlaylistActivityHash = currentPlaylistActivityHash;
  }


  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent dateActivityStarted(OffsetDateTime dateActivityStarted) {
    this.dateActivityStarted = dateActivityStarted;
    return this;
  }

  /**
   * The last date that the user started playing an activity.
   * @return dateActivityStarted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateActivityStarted() {
    return dateActivityStarted;
  }

  public void setDateActivityStarted(OffsetDateTime dateActivityStarted) {
    this.dateActivityStarted = dateActivityStarted;
  }


  public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent lastCompletedStoryHash(Integer lastCompletedStoryHash) {
    this.lastCompletedStoryHash = lastCompletedStoryHash;
    return this;
  }

  /**
   * This will have the activity hash of the last completed story/campaign mission, in case you care about that.
   * @return lastCompletedStoryHash
   */
  @javax.annotation.Nullable
  public Integer getLastCompletedStoryHash() {
    return lastCompletedStoryHash;
  }

  public void setLastCompletedStoryHash(Integer lastCompletedStoryHash) {
    this.lastCompletedStoryHash = lastCompletedStoryHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesCharactersDestinyCharacterActivitiesComponent destinyEntitiesCharactersDestinyCharacterActivitiesComponent = (DestinyEntitiesCharactersDestinyCharacterActivitiesComponent) o;
    return Objects.equals(this.availableActivities, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.availableActivities) &&
        Objects.equals(this.currentActivityHash, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.currentActivityHash) &&
        Objects.equals(this.currentActivityModeHash, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.currentActivityModeHash) &&
        Objects.equals(this.currentActivityModeHashes, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.currentActivityModeHashes) &&
        Objects.equals(this.currentActivityModeType, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.currentActivityModeType) &&
        Objects.equals(this.currentActivityModeTypes, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.currentActivityModeTypes) &&
        Objects.equals(this.currentPlaylistActivityHash, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.currentPlaylistActivityHash) &&
        Objects.equals(this.dateActivityStarted, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.dateActivityStarted) &&
        Objects.equals(this.lastCompletedStoryHash, destinyEntitiesCharactersDestinyCharacterActivitiesComponent.lastCompletedStoryHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableActivities, currentActivityHash, currentActivityModeHash, currentActivityModeHashes, currentActivityModeType, currentActivityModeTypes, currentPlaylistActivityHash, dateActivityStarted, lastCompletedStoryHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesCharactersDestinyCharacterActivitiesComponent {\n");
    sb.append("    availableActivities: ").append(toIndentedString(availableActivities)).append("\n");
    sb.append("    currentActivityHash: ").append(toIndentedString(currentActivityHash)).append("\n");
    sb.append("    currentActivityModeHash: ").append(toIndentedString(currentActivityModeHash)).append("\n");
    sb.append("    currentActivityModeHashes: ").append(toIndentedString(currentActivityModeHashes)).append("\n");
    sb.append("    currentActivityModeType: ").append(toIndentedString(currentActivityModeType)).append("\n");
    sb.append("    currentActivityModeTypes: ").append(toIndentedString(currentActivityModeTypes)).append("\n");
    sb.append("    currentPlaylistActivityHash: ").append(toIndentedString(currentPlaylistActivityHash)).append("\n");
    sb.append("    dateActivityStarted: ").append(toIndentedString(dateActivityStarted)).append("\n");
    sb.append("    lastCompletedStoryHash: ").append(toIndentedString(lastCompletedStoryHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableActivities");
    openapiFields.add("currentActivityHash");
    openapiFields.add("currentActivityModeHash");
    openapiFields.add("currentActivityModeHashes");
    openapiFields.add("currentActivityModeType");
    openapiFields.add("currentActivityModeTypes");
    openapiFields.add("currentPlaylistActivityHash");
    openapiFields.add("dateActivityStarted");
    openapiFields.add("lastCompletedStoryHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyEntitiesCharactersDestinyCharacterActivitiesComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyEntitiesCharactersDestinyCharacterActivitiesComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyEntitiesCharactersDestinyCharacterActivitiesComponent is not found in the empty JSON string", DestinyEntitiesCharactersDestinyCharacterActivitiesComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyEntitiesCharactersDestinyCharacterActivitiesComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyEntitiesCharactersDestinyCharacterActivitiesComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("availableActivities") != null && !jsonObj.get("availableActivities").isJsonNull()) {
        JsonArray jsonArrayavailableActivities = jsonObj.getAsJsonArray("availableActivities");
        if (jsonArrayavailableActivities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availableActivities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availableActivities` to be an array in the JSON string but got `%s`", jsonObj.get("availableActivities").toString()));
          }

          // validate the optional field `availableActivities` (array)
          for (int i = 0; i < jsonArrayavailableActivities.size(); i++) {
            DestinyDestinyActivity.validateJsonElement(jsonArrayavailableActivities.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("currentActivityModeHashes") != null && !jsonObj.get("currentActivityModeHashes").isJsonNull() && !jsonObj.get("currentActivityModeHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentActivityModeHashes` to be an array in the JSON string but got `%s`", jsonObj.get("currentActivityModeHashes").toString()));
      }
      // validate the optional field `currentActivityModeType`
      if (jsonObj.get("currentActivityModeType") != null && !jsonObj.get("currentActivityModeType").isJsonNull()) {
        CurrentActivityModeTypeEnum.validateJsonElement(jsonObj.get("currentActivityModeType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("currentActivityModeTypes") != null && !jsonObj.get("currentActivityModeTypes").isJsonNull() && !jsonObj.get("currentActivityModeTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentActivityModeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("currentActivityModeTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyEntitiesCharactersDestinyCharacterActivitiesComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyEntitiesCharactersDestinyCharacterActivitiesComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyEntitiesCharactersDestinyCharacterActivitiesComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyEntitiesCharactersDestinyCharacterActivitiesComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyEntitiesCharactersDestinyCharacterActivitiesComponent>() {
           @Override
           public void write(JsonWriter out, DestinyEntitiesCharactersDestinyCharacterActivitiesComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyEntitiesCharactersDestinyCharacterActivitiesComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyEntitiesCharactersDestinyCharacterActivitiesComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyEntitiesCharactersDestinyCharacterActivitiesComponent
   */
  public static DestinyEntitiesCharactersDestinyCharacterActivitiesComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyEntitiesCharactersDestinyCharacterActivitiesComponent.class);
  }

  /**
   * Convert an instance of DestinyEntitiesCharactersDestinyCharacterActivitiesComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

