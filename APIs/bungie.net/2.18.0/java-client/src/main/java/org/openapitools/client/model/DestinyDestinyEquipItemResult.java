/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The results of an Equipping operation performed through the Destiny API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDestinyEquipItemResult {
  public static final String SERIALIZED_NAME_EQUIP_STATUS = "equipStatus";
  @SerializedName(SERIALIZED_NAME_EQUIP_STATUS)
  private Integer equipStatus;

  public static final String SERIALIZED_NAME_ITEM_INSTANCE_ID = "itemInstanceId";
  @SerializedName(SERIALIZED_NAME_ITEM_INSTANCE_ID)
  private Long itemInstanceId;

  public DestinyDestinyEquipItemResult() {
  }

  public DestinyDestinyEquipItemResult equipStatus(Integer equipStatus) {
    this.equipStatus = equipStatus;
    return this;
  }

  /**
   * A PlatformErrorCodes enum indicating whether it succeeded, and if it failed why.
   * @return equipStatus
   */
  @javax.annotation.Nullable
  public Integer getEquipStatus() {
    return equipStatus;
  }

  public void setEquipStatus(Integer equipStatus) {
    this.equipStatus = equipStatus;
  }


  public DestinyDestinyEquipItemResult itemInstanceId(Long itemInstanceId) {
    this.itemInstanceId = itemInstanceId;
    return this;
  }

  /**
   * The instance ID of the item in question (all items that can be equipped must, but definition, be Instanced and thus have an Instance ID that you can use to refer to them)
   * @return itemInstanceId
   */
  @javax.annotation.Nullable
  public Long getItemInstanceId() {
    return itemInstanceId;
  }

  public void setItemInstanceId(Long itemInstanceId) {
    this.itemInstanceId = itemInstanceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDestinyEquipItemResult destinyDestinyEquipItemResult = (DestinyDestinyEquipItemResult) o;
    return Objects.equals(this.equipStatus, destinyDestinyEquipItemResult.equipStatus) &&
        Objects.equals(this.itemInstanceId, destinyDestinyEquipItemResult.itemInstanceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(equipStatus, itemInstanceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDestinyEquipItemResult {\n");
    sb.append("    equipStatus: ").append(toIndentedString(equipStatus)).append("\n");
    sb.append("    itemInstanceId: ").append(toIndentedString(itemInstanceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("equipStatus");
    openapiFields.add("itemInstanceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDestinyEquipItemResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDestinyEquipItemResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDestinyEquipItemResult is not found in the empty JSON string", DestinyDestinyEquipItemResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDestinyEquipItemResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDestinyEquipItemResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDestinyEquipItemResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDestinyEquipItemResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDestinyEquipItemResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDestinyEquipItemResult.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDestinyEquipItemResult>() {
           @Override
           public void write(JsonWriter out, DestinyDestinyEquipItemResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDestinyEquipItemResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDestinyEquipItemResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDestinyEquipItemResult
   * @throws IOException if the JSON string is invalid with respect to DestinyDestinyEquipItemResult
   */
  public static DestinyDestinyEquipItemResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDestinyEquipItemResult.class);
  }

  /**
   * Convert an instance of DestinyDestinyEquipItemResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

