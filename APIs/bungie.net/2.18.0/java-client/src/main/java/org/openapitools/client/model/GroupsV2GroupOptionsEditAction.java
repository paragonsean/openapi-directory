/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GroupsV2GroupOptionsEditAction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupsV2GroupOptionsEditAction {
  /**
   * Minimum Member Level allowed to host guided games  Always Allowed: Founder, Acting Founder, Admin  Allowed Overrides: None, Member, Beginner  Default is Member for clans, None for groups, although this means nothing for groups.
   */
  @JsonAdapter(HostGuidedGamePermissionOverrideEnum.Adapter.class)
  public enum HostGuidedGamePermissionOverrideEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    HostGuidedGamePermissionOverrideEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HostGuidedGamePermissionOverrideEnum fromValue(Integer value) {
      for (HostGuidedGamePermissionOverrideEnum b : HostGuidedGamePermissionOverrideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HostGuidedGamePermissionOverrideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostGuidedGamePermissionOverrideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostGuidedGamePermissionOverrideEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return HostGuidedGamePermissionOverrideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      HostGuidedGamePermissionOverrideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOST_GUIDED_GAME_PERMISSION_OVERRIDE = "HostGuidedGamePermissionOverride";
  @SerializedName(SERIALIZED_NAME_HOST_GUIDED_GAME_PERMISSION_OVERRIDE)
  private HostGuidedGamePermissionOverrideEnum hostGuidedGamePermissionOverride;

  public static final String SERIALIZED_NAME_INVITE_PERMISSION_OVERRIDE = "InvitePermissionOverride";
  @SerializedName(SERIALIZED_NAME_INVITE_PERMISSION_OVERRIDE)
  private Boolean invitePermissionOverride;

  /**
   * Level to join a member at when accepting an invite, application, or joining an open clan  Default is Beginner.
   */
  @JsonAdapter(JoinLevelEnum.Adapter.class)
  public enum JoinLevelEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5);

    private Integer value;

    JoinLevelEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JoinLevelEnum fromValue(Integer value) {
      for (JoinLevelEnum b : JoinLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JoinLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JoinLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JoinLevelEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return JoinLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      JoinLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOIN_LEVEL = "JoinLevel";
  @SerializedName(SERIALIZED_NAME_JOIN_LEVEL)
  private JoinLevelEnum joinLevel;

  public static final String SERIALIZED_NAME_UPDATE_BANNER_PERMISSION_OVERRIDE = "UpdateBannerPermissionOverride";
  @SerializedName(SERIALIZED_NAME_UPDATE_BANNER_PERMISSION_OVERRIDE)
  private Boolean updateBannerPermissionOverride;

  public static final String SERIALIZED_NAME_UPDATE_CULTURE_PERMISSION_OVERRIDE = "UpdateCulturePermissionOverride";
  @SerializedName(SERIALIZED_NAME_UPDATE_CULTURE_PERMISSION_OVERRIDE)
  private Boolean updateCulturePermissionOverride;

  public GroupsV2GroupOptionsEditAction() {
  }

  public GroupsV2GroupOptionsEditAction hostGuidedGamePermissionOverride(HostGuidedGamePermissionOverrideEnum hostGuidedGamePermissionOverride) {
    this.hostGuidedGamePermissionOverride = hostGuidedGamePermissionOverride;
    return this;
  }

  /**
   * Minimum Member Level allowed to host guided games  Always Allowed: Founder, Acting Founder, Admin  Allowed Overrides: None, Member, Beginner  Default is Member for clans, None for groups, although this means nothing for groups.
   * @return hostGuidedGamePermissionOverride
   */
  @javax.annotation.Nullable
  public HostGuidedGamePermissionOverrideEnum getHostGuidedGamePermissionOverride() {
    return hostGuidedGamePermissionOverride;
  }

  public void setHostGuidedGamePermissionOverride(HostGuidedGamePermissionOverrideEnum hostGuidedGamePermissionOverride) {
    this.hostGuidedGamePermissionOverride = hostGuidedGamePermissionOverride;
  }


  public GroupsV2GroupOptionsEditAction invitePermissionOverride(Boolean invitePermissionOverride) {
    this.invitePermissionOverride = invitePermissionOverride;
    return this;
  }

  /**
   * Minimum Member Level allowed to invite new members to group  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don&#39;t  Default is false for clans, true for groups.
   * @return invitePermissionOverride
   */
  @javax.annotation.Nullable
  public Boolean getInvitePermissionOverride() {
    return invitePermissionOverride;
  }

  public void setInvitePermissionOverride(Boolean invitePermissionOverride) {
    this.invitePermissionOverride = invitePermissionOverride;
  }


  public GroupsV2GroupOptionsEditAction joinLevel(JoinLevelEnum joinLevel) {
    this.joinLevel = joinLevel;
    return this;
  }

  /**
   * Level to join a member at when accepting an invite, application, or joining an open clan  Default is Beginner.
   * @return joinLevel
   */
  @javax.annotation.Nullable
  public JoinLevelEnum getJoinLevel() {
    return joinLevel;
  }

  public void setJoinLevel(JoinLevelEnum joinLevel) {
    this.joinLevel = joinLevel;
  }


  public GroupsV2GroupOptionsEditAction updateBannerPermissionOverride(Boolean updateBannerPermissionOverride) {
    this.updateBannerPermissionOverride = updateBannerPermissionOverride;
    return this;
  }

  /**
   * Minimum Member Level allowed to update banner  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don&#39;t  Default is false for clans, true for groups.
   * @return updateBannerPermissionOverride
   */
  @javax.annotation.Nullable
  public Boolean getUpdateBannerPermissionOverride() {
    return updateBannerPermissionOverride;
  }

  public void setUpdateBannerPermissionOverride(Boolean updateBannerPermissionOverride) {
    this.updateBannerPermissionOverride = updateBannerPermissionOverride;
  }


  public GroupsV2GroupOptionsEditAction updateCulturePermissionOverride(Boolean updateCulturePermissionOverride) {
    this.updateCulturePermissionOverride = updateCulturePermissionOverride;
    return this;
  }

  /**
   * Minimum Member Level allowed to update group culture  Always Allowed: Founder, Acting Founder  True means admins have this power, false means they don&#39;t  Default is false for clans, true for groups.
   * @return updateCulturePermissionOverride
   */
  @javax.annotation.Nullable
  public Boolean getUpdateCulturePermissionOverride() {
    return updateCulturePermissionOverride;
  }

  public void setUpdateCulturePermissionOverride(Boolean updateCulturePermissionOverride) {
    this.updateCulturePermissionOverride = updateCulturePermissionOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupsV2GroupOptionsEditAction groupsV2GroupOptionsEditAction = (GroupsV2GroupOptionsEditAction) o;
    return Objects.equals(this.hostGuidedGamePermissionOverride, groupsV2GroupOptionsEditAction.hostGuidedGamePermissionOverride) &&
        Objects.equals(this.invitePermissionOverride, groupsV2GroupOptionsEditAction.invitePermissionOverride) &&
        Objects.equals(this.joinLevel, groupsV2GroupOptionsEditAction.joinLevel) &&
        Objects.equals(this.updateBannerPermissionOverride, groupsV2GroupOptionsEditAction.updateBannerPermissionOverride) &&
        Objects.equals(this.updateCulturePermissionOverride, groupsV2GroupOptionsEditAction.updateCulturePermissionOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostGuidedGamePermissionOverride, invitePermissionOverride, joinLevel, updateBannerPermissionOverride, updateCulturePermissionOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupsV2GroupOptionsEditAction {\n");
    sb.append("    hostGuidedGamePermissionOverride: ").append(toIndentedString(hostGuidedGamePermissionOverride)).append("\n");
    sb.append("    invitePermissionOverride: ").append(toIndentedString(invitePermissionOverride)).append("\n");
    sb.append("    joinLevel: ").append(toIndentedString(joinLevel)).append("\n");
    sb.append("    updateBannerPermissionOverride: ").append(toIndentedString(updateBannerPermissionOverride)).append("\n");
    sb.append("    updateCulturePermissionOverride: ").append(toIndentedString(updateCulturePermissionOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HostGuidedGamePermissionOverride");
    openapiFields.add("InvitePermissionOverride");
    openapiFields.add("JoinLevel");
    openapiFields.add("UpdateBannerPermissionOverride");
    openapiFields.add("UpdateCulturePermissionOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupsV2GroupOptionsEditAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupsV2GroupOptionsEditAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupsV2GroupOptionsEditAction is not found in the empty JSON string", GroupsV2GroupOptionsEditAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupsV2GroupOptionsEditAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupsV2GroupOptionsEditAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HostGuidedGamePermissionOverride`
      if (jsonObj.get("HostGuidedGamePermissionOverride") != null && !jsonObj.get("HostGuidedGamePermissionOverride").isJsonNull()) {
        HostGuidedGamePermissionOverrideEnum.validateJsonElement(jsonObj.get("HostGuidedGamePermissionOverride"));
      }
      // validate the optional field `JoinLevel`
      if (jsonObj.get("JoinLevel") != null && !jsonObj.get("JoinLevel").isJsonNull()) {
        JoinLevelEnum.validateJsonElement(jsonObj.get("JoinLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupsV2GroupOptionsEditAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupsV2GroupOptionsEditAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupsV2GroupOptionsEditAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupsV2GroupOptionsEditAction.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupsV2GroupOptionsEditAction>() {
           @Override
           public void write(JsonWriter out, GroupsV2GroupOptionsEditAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupsV2GroupOptionsEditAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupsV2GroupOptionsEditAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupsV2GroupOptionsEditAction
   * @throws IOException if the JSON string is invalid with respect to GroupsV2GroupOptionsEditAction
   */
  public static GroupsV2GroupOptionsEditAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupsV2GroupOptionsEditAction.class);
  }

  /**
   * Convert an instance of GroupsV2GroupOptionsEditAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

