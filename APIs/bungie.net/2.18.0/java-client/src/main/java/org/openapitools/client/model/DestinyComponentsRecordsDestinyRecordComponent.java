/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyQuestsDestinyObjectiveProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyComponentsRecordsDestinyRecordComponent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyComponentsRecordsDestinyRecordComponent {
  public static final String SERIALIZED_NAME_COMPLETED_COUNT = "completedCount";
  @SerializedName(SERIALIZED_NAME_COMPLETED_COUNT)
  private Integer completedCount;

  public static final String SERIALIZED_NAME_INTERVAL_OBJECTIVES = "intervalObjectives";
  @SerializedName(SERIALIZED_NAME_INTERVAL_OBJECTIVES)
  private List<DestinyQuestsDestinyObjectiveProgress> intervalObjectives = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERVALS_REDEEMED_COUNT = "intervalsRedeemedCount";
  @SerializedName(SERIALIZED_NAME_INTERVALS_REDEEMED_COUNT)
  private Integer intervalsRedeemedCount;

  public static final String SERIALIZED_NAME_OBJECTIVES = "objectives";
  @SerializedName(SERIALIZED_NAME_OBJECTIVES)
  private List<DestinyQuestsDestinyObjectiveProgress> objectives = new ArrayList<>();

  public static final String SERIALIZED_NAME_REWARD_VISIBILTY = "rewardVisibilty";
  @SerializedName(SERIALIZED_NAME_REWARD_VISIBILTY)
  private List<Boolean> rewardVisibilty = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Integer state;

  public DestinyComponentsRecordsDestinyRecordComponent() {
  }

  public DestinyComponentsRecordsDestinyRecordComponent completedCount(Integer completedCount) {
    this.completedCount = completedCount;
    return this;
  }

  /**
   * If available, this is the number of times this record has been completed. For example, the number of times a seal title has been gilded.
   * @return completedCount
   */
  @javax.annotation.Nullable
  public Integer getCompletedCount() {
    return completedCount;
  }

  public void setCompletedCount(Integer completedCount) {
    this.completedCount = completedCount;
  }


  public DestinyComponentsRecordsDestinyRecordComponent intervalObjectives(List<DestinyQuestsDestinyObjectiveProgress> intervalObjectives) {
    this.intervalObjectives = intervalObjectives;
    return this;
  }

  public DestinyComponentsRecordsDestinyRecordComponent addIntervalObjectivesItem(DestinyQuestsDestinyObjectiveProgress intervalObjectivesItem) {
    if (this.intervalObjectives == null) {
      this.intervalObjectives = new ArrayList<>();
    }
    this.intervalObjectives.add(intervalObjectivesItem);
    return this;
  }

  /**
   * Get intervalObjectives
   * @return intervalObjectives
   */
  @javax.annotation.Nullable
  public List<DestinyQuestsDestinyObjectiveProgress> getIntervalObjectives() {
    return intervalObjectives;
  }

  public void setIntervalObjectives(List<DestinyQuestsDestinyObjectiveProgress> intervalObjectives) {
    this.intervalObjectives = intervalObjectives;
  }


  public DestinyComponentsRecordsDestinyRecordComponent intervalsRedeemedCount(Integer intervalsRedeemedCount) {
    this.intervalsRedeemedCount = intervalsRedeemedCount;
    return this;
  }

  /**
   * Get intervalsRedeemedCount
   * @return intervalsRedeemedCount
   */
  @javax.annotation.Nullable
  public Integer getIntervalsRedeemedCount() {
    return intervalsRedeemedCount;
  }

  public void setIntervalsRedeemedCount(Integer intervalsRedeemedCount) {
    this.intervalsRedeemedCount = intervalsRedeemedCount;
  }


  public DestinyComponentsRecordsDestinyRecordComponent objectives(List<DestinyQuestsDestinyObjectiveProgress> objectives) {
    this.objectives = objectives;
    return this;
  }

  public DestinyComponentsRecordsDestinyRecordComponent addObjectivesItem(DestinyQuestsDestinyObjectiveProgress objectivesItem) {
    if (this.objectives == null) {
      this.objectives = new ArrayList<>();
    }
    this.objectives.add(objectivesItem);
    return this;
  }

  /**
   * Get objectives
   * @return objectives
   */
  @javax.annotation.Nullable
  public List<DestinyQuestsDestinyObjectiveProgress> getObjectives() {
    return objectives;
  }

  public void setObjectives(List<DestinyQuestsDestinyObjectiveProgress> objectives) {
    this.objectives = objectives;
  }


  public DestinyComponentsRecordsDestinyRecordComponent rewardVisibilty(List<Boolean> rewardVisibilty) {
    this.rewardVisibilty = rewardVisibilty;
    return this;
  }

  public DestinyComponentsRecordsDestinyRecordComponent addRewardVisibiltyItem(Boolean rewardVisibiltyItem) {
    if (this.rewardVisibilty == null) {
      this.rewardVisibilty = new ArrayList<>();
    }
    this.rewardVisibilty.add(rewardVisibiltyItem);
    return this;
  }

  /**
   * If available, a list that describes which reward rewards should be shown (true) or hidden (false). This property is for regular record rewards, and not for interval objective rewards.
   * @return rewardVisibilty
   */
  @javax.annotation.Nullable
  public List<Boolean> getRewardVisibilty() {
    return rewardVisibilty;
  }

  public void setRewardVisibilty(List<Boolean> rewardVisibilty) {
    this.rewardVisibilty = rewardVisibilty;
  }


  public DestinyComponentsRecordsDestinyRecordComponent state(Integer state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public Integer getState() {
    return state;
  }

  public void setState(Integer state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyComponentsRecordsDestinyRecordComponent destinyComponentsRecordsDestinyRecordComponent = (DestinyComponentsRecordsDestinyRecordComponent) o;
    return Objects.equals(this.completedCount, destinyComponentsRecordsDestinyRecordComponent.completedCount) &&
        Objects.equals(this.intervalObjectives, destinyComponentsRecordsDestinyRecordComponent.intervalObjectives) &&
        Objects.equals(this.intervalsRedeemedCount, destinyComponentsRecordsDestinyRecordComponent.intervalsRedeemedCount) &&
        Objects.equals(this.objectives, destinyComponentsRecordsDestinyRecordComponent.objectives) &&
        Objects.equals(this.rewardVisibilty, destinyComponentsRecordsDestinyRecordComponent.rewardVisibilty) &&
        Objects.equals(this.state, destinyComponentsRecordsDestinyRecordComponent.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completedCount, intervalObjectives, intervalsRedeemedCount, objectives, rewardVisibilty, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyComponentsRecordsDestinyRecordComponent {\n");
    sb.append("    completedCount: ").append(toIndentedString(completedCount)).append("\n");
    sb.append("    intervalObjectives: ").append(toIndentedString(intervalObjectives)).append("\n");
    sb.append("    intervalsRedeemedCount: ").append(toIndentedString(intervalsRedeemedCount)).append("\n");
    sb.append("    objectives: ").append(toIndentedString(objectives)).append("\n");
    sb.append("    rewardVisibilty: ").append(toIndentedString(rewardVisibilty)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completedCount");
    openapiFields.add("intervalObjectives");
    openapiFields.add("intervalsRedeemedCount");
    openapiFields.add("objectives");
    openapiFields.add("rewardVisibilty");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyComponentsRecordsDestinyRecordComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyComponentsRecordsDestinyRecordComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyComponentsRecordsDestinyRecordComponent is not found in the empty JSON string", DestinyComponentsRecordsDestinyRecordComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyComponentsRecordsDestinyRecordComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyComponentsRecordsDestinyRecordComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("intervalObjectives") != null && !jsonObj.get("intervalObjectives").isJsonNull()) {
        JsonArray jsonArrayintervalObjectives = jsonObj.getAsJsonArray("intervalObjectives");
        if (jsonArrayintervalObjectives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("intervalObjectives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `intervalObjectives` to be an array in the JSON string but got `%s`", jsonObj.get("intervalObjectives").toString()));
          }

          // validate the optional field `intervalObjectives` (array)
          for (int i = 0; i < jsonArrayintervalObjectives.size(); i++) {
            DestinyQuestsDestinyObjectiveProgress.validateJsonElement(jsonArrayintervalObjectives.get(i));
          };
        }
      }
      if (jsonObj.get("objectives") != null && !jsonObj.get("objectives").isJsonNull()) {
        JsonArray jsonArrayobjectives = jsonObj.getAsJsonArray("objectives");
        if (jsonArrayobjectives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("objectives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `objectives` to be an array in the JSON string but got `%s`", jsonObj.get("objectives").toString()));
          }

          // validate the optional field `objectives` (array)
          for (int i = 0; i < jsonArrayobjectives.size(); i++) {
            DestinyQuestsDestinyObjectiveProgress.validateJsonElement(jsonArrayobjectives.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rewardVisibilty") != null && !jsonObj.get("rewardVisibilty").isJsonNull() && !jsonObj.get("rewardVisibilty").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rewardVisibilty` to be an array in the JSON string but got `%s`", jsonObj.get("rewardVisibilty").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyComponentsRecordsDestinyRecordComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyComponentsRecordsDestinyRecordComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyComponentsRecordsDestinyRecordComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyComponentsRecordsDestinyRecordComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyComponentsRecordsDestinyRecordComponent>() {
           @Override
           public void write(JsonWriter out, DestinyComponentsRecordsDestinyRecordComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyComponentsRecordsDestinyRecordComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyComponentsRecordsDestinyRecordComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyComponentsRecordsDestinyRecordComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyComponentsRecordsDestinyRecordComponent
   */
  public static DestinyComponentsRecordsDestinyRecordComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyComponentsRecordsDestinyRecordComponent.class);
  }

  /**
   * Convert an instance of DestinyComponentsRecordsDestinyRecordComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

