/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyMilestonesDestinyPublicMilestoneActivity;
import org.openapitools.client.model.DestinyMilestonesDestinyPublicMilestoneChallenge;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyMilestonesDestinyPublicMilestoneQuest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyMilestonesDestinyPublicMilestoneQuest {
  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private DestinyMilestonesDestinyPublicMilestoneActivity activity;

  public static final String SERIALIZED_NAME_CHALLENGES = "challenges";
  @SerializedName(SERIALIZED_NAME_CHALLENGES)
  private List<DestinyMilestonesDestinyPublicMilestoneChallenge> challenges = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUEST_ITEM_HASH = "questItemHash";
  @SerializedName(SERIALIZED_NAME_QUEST_ITEM_HASH)
  private Integer questItemHash;

  public DestinyMilestonesDestinyPublicMilestoneQuest() {
  }

  public DestinyMilestonesDestinyPublicMilestoneQuest activity(DestinyMilestonesDestinyPublicMilestoneActivity activity) {
    this.activity = activity;
    return this;
  }

  /**
   * A milestone need not have an active activity, but if there is one it will be returned here, along with any variant and additional information.
   * @return activity
   */
  @javax.annotation.Nullable
  public DestinyMilestonesDestinyPublicMilestoneActivity getActivity() {
    return activity;
  }

  public void setActivity(DestinyMilestonesDestinyPublicMilestoneActivity activity) {
    this.activity = activity;
  }


  public DestinyMilestonesDestinyPublicMilestoneQuest challenges(List<DestinyMilestonesDestinyPublicMilestoneChallenge> challenges) {
    this.challenges = challenges;
    return this;
  }

  public DestinyMilestonesDestinyPublicMilestoneQuest addChallengesItem(DestinyMilestonesDestinyPublicMilestoneChallenge challengesItem) {
    if (this.challenges == null) {
      this.challenges = new ArrayList<>();
    }
    this.challenges.add(challengesItem);
    return this;
  }

  /**
   * For the given quest there could be 0-to-Many challenges: mini quests that you can perform in the course of doing this quest, that may grant you rewards and benefits.
   * @return challenges
   */
  @javax.annotation.Nullable
  public List<DestinyMilestonesDestinyPublicMilestoneChallenge> getChallenges() {
    return challenges;
  }

  public void setChallenges(List<DestinyMilestonesDestinyPublicMilestoneChallenge> challenges) {
    this.challenges = challenges;
  }


  public DestinyMilestonesDestinyPublicMilestoneQuest questItemHash(Integer questItemHash) {
    this.questItemHash = questItemHash;
    return this;
  }

  /**
   * Quests are defined as Items in content. As such, this is the hash identifier of the DestinyInventoryItemDefinition that represents this quest. It will have pointers to all of the steps in the quest, and display information for the quest (title, description, icon etc) Individual steps will be referred to in the Quest item&#39;s DestinyInventoryItemDefinition.setData property, and themselves are Items with their own renderable data.
   * @return questItemHash
   */
  @javax.annotation.Nullable
  public Integer getQuestItemHash() {
    return questItemHash;
  }

  public void setQuestItemHash(Integer questItemHash) {
    this.questItemHash = questItemHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyMilestonesDestinyPublicMilestoneQuest destinyMilestonesDestinyPublicMilestoneQuest = (DestinyMilestonesDestinyPublicMilestoneQuest) o;
    return Objects.equals(this.activity, destinyMilestonesDestinyPublicMilestoneQuest.activity) &&
        Objects.equals(this.challenges, destinyMilestonesDestinyPublicMilestoneQuest.challenges) &&
        Objects.equals(this.questItemHash, destinyMilestonesDestinyPublicMilestoneQuest.questItemHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activity, challenges, questItemHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyMilestonesDestinyPublicMilestoneQuest {\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    challenges: ").append(toIndentedString(challenges)).append("\n");
    sb.append("    questItemHash: ").append(toIndentedString(questItemHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity");
    openapiFields.add("challenges");
    openapiFields.add("questItemHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyMilestonesDestinyPublicMilestoneQuest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyMilestonesDestinyPublicMilestoneQuest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyMilestonesDestinyPublicMilestoneQuest is not found in the empty JSON string", DestinyMilestonesDestinyPublicMilestoneQuest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyMilestonesDestinyPublicMilestoneQuest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyMilestonesDestinyPublicMilestoneQuest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activity`
      if (jsonObj.get("activity") != null && !jsonObj.get("activity").isJsonNull()) {
        DestinyMilestonesDestinyPublicMilestoneActivity.validateJsonElement(jsonObj.get("activity"));
      }
      if (jsonObj.get("challenges") != null && !jsonObj.get("challenges").isJsonNull()) {
        JsonArray jsonArraychallenges = jsonObj.getAsJsonArray("challenges");
        if (jsonArraychallenges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("challenges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `challenges` to be an array in the JSON string but got `%s`", jsonObj.get("challenges").toString()));
          }

          // validate the optional field `challenges` (array)
          for (int i = 0; i < jsonArraychallenges.size(); i++) {
            DestinyMilestonesDestinyPublicMilestoneChallenge.validateJsonElement(jsonArraychallenges.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyMilestonesDestinyPublicMilestoneQuest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyMilestonesDestinyPublicMilestoneQuest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyMilestonesDestinyPublicMilestoneQuest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyMilestonesDestinyPublicMilestoneQuest.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyMilestonesDestinyPublicMilestoneQuest>() {
           @Override
           public void write(JsonWriter out, DestinyMilestonesDestinyPublicMilestoneQuest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyMilestonesDestinyPublicMilestoneQuest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyMilestonesDestinyPublicMilestoneQuest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyMilestonesDestinyPublicMilestoneQuest
   * @throws IOException if the JSON string is invalid with respect to DestinyMilestonesDestinyPublicMilestoneQuest
   */
  public static DestinyMilestonesDestinyPublicMilestoneQuest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyMilestonesDestinyPublicMilestoneQuest.class);
  }

  /**
   * Convert an instance of DestinyMilestonesDestinyPublicMilestoneQuest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

