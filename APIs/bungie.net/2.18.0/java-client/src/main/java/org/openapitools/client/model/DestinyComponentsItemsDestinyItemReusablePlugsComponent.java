/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DestinySocketsDestinyItemPlugBase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyComponentsItemsDestinyItemReusablePlugsComponent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyComponentsItemsDestinyItemReusablePlugsComponent {
  public static final String SERIALIZED_NAME_PLUGS = "plugs";
  @SerializedName(SERIALIZED_NAME_PLUGS)
  private Map<String, List<DestinySocketsDestinyItemPlugBase>> plugs = new HashMap<>();

  public DestinyComponentsItemsDestinyItemReusablePlugsComponent() {
  }

  public DestinyComponentsItemsDestinyItemReusablePlugsComponent plugs(Map<String, List<DestinySocketsDestinyItemPlugBase>> plugs) {
    this.plugs = plugs;
    return this;
  }

  public DestinyComponentsItemsDestinyItemReusablePlugsComponent putPlugsItem(String key, List<DestinySocketsDestinyItemPlugBase> plugsItem) {
    if (this.plugs == null) {
      this.plugs = new HashMap<>();
    }
    this.plugs.put(key, plugsItem);
    return this;
  }

  /**
   * If the item supports reusable plugs, this is the list of plugs that are allowed to be used for the socket, and any relevant information about whether they are \&quot;enabled\&quot;, whether they are allowed to be inserted, and any other information such as objectives.   A Reusable Plug is a plug that you can always insert into this socket as long as its insertion rules are passed, regardless of whether or not you have the plug in your inventory. An example of it failing an insertion rule would be if it has an Objective that needs to be completed before it can be inserted, and that objective hasn&#39;t been completed yet.   In practice, a socket will *either* have reusable plugs *or* it will allow for plugs in your inventory to be inserted. See DestinyInventoryItemDefinition.socket for more info.   KEY &#x3D; The INDEX into the item&#39;s list of sockets. VALUE &#x3D; The set of plugs for that socket.   If a socket doesn&#39;t have any reusable plugs defined at the item scope, there will be no entry for that socket.
   * @return plugs
   */
  @javax.annotation.Nullable
  public Map<String, List<DestinySocketsDestinyItemPlugBase>> getPlugs() {
    return plugs;
  }

  public void setPlugs(Map<String, List<DestinySocketsDestinyItemPlugBase>> plugs) {
    this.plugs = plugs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyComponentsItemsDestinyItemReusablePlugsComponent destinyComponentsItemsDestinyItemReusablePlugsComponent = (DestinyComponentsItemsDestinyItemReusablePlugsComponent) o;
    return Objects.equals(this.plugs, destinyComponentsItemsDestinyItemReusablePlugsComponent.plugs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plugs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyComponentsItemsDestinyItemReusablePlugsComponent {\n");
    sb.append("    plugs: ").append(toIndentedString(plugs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("plugs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyComponentsItemsDestinyItemReusablePlugsComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyComponentsItemsDestinyItemReusablePlugsComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyComponentsItemsDestinyItemReusablePlugsComponent is not found in the empty JSON string", DestinyComponentsItemsDestinyItemReusablePlugsComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyComponentsItemsDestinyItemReusablePlugsComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyComponentsItemsDestinyItemReusablePlugsComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyComponentsItemsDestinyItemReusablePlugsComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyComponentsItemsDestinyItemReusablePlugsComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyComponentsItemsDestinyItemReusablePlugsComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyComponentsItemsDestinyItemReusablePlugsComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyComponentsItemsDestinyItemReusablePlugsComponent>() {
           @Override
           public void write(JsonWriter out, DestinyComponentsItemsDestinyItemReusablePlugsComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyComponentsItemsDestinyItemReusablePlugsComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyComponentsItemsDestinyItemReusablePlugsComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyComponentsItemsDestinyItemReusablePlugsComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyComponentsItemsDestinyItemReusablePlugsComponent
   */
  public static DestinyComponentsItemsDestinyItemReusablePlugsComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyComponentsItemsDestinyItemReusablePlugsComponent.class);
  }

  /**
   * Convert an instance of DestinyComponentsItemsDestinyItemReusablePlugsComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

