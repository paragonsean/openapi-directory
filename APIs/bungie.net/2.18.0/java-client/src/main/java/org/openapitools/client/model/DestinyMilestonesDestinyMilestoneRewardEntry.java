/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The character-specific data for a milestone&#39;s reward entry. See DestinyMilestoneDefinition for more information about Reward Entries.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyMilestonesDestinyMilestoneRewardEntry {
  public static final String SERIALIZED_NAME_EARNED = "earned";
  @SerializedName(SERIALIZED_NAME_EARNED)
  private Boolean earned;

  public static final String SERIALIZED_NAME_REDEEMED = "redeemed";
  @SerializedName(SERIALIZED_NAME_REDEEMED)
  private Boolean redeemed;

  public static final String SERIALIZED_NAME_REWARD_ENTRY_HASH = "rewardEntryHash";
  @SerializedName(SERIALIZED_NAME_REWARD_ENTRY_HASH)
  private Integer rewardEntryHash;

  public DestinyMilestonesDestinyMilestoneRewardEntry() {
  }

  public DestinyMilestonesDestinyMilestoneRewardEntry earned(Boolean earned) {
    this.earned = earned;
    return this;
  }

  /**
   * If TRUE, the player has earned this reward.
   * @return earned
   */
  @javax.annotation.Nullable
  public Boolean getEarned() {
    return earned;
  }

  public void setEarned(Boolean earned) {
    this.earned = earned;
  }


  public DestinyMilestonesDestinyMilestoneRewardEntry redeemed(Boolean redeemed) {
    this.redeemed = redeemed;
    return this;
  }

  /**
   * If TRUE, the player has redeemed/picked up/obtained this reward. Feel free to alias this to \&quot;gotTheShinyBauble\&quot; in your own codebase.
   * @return redeemed
   */
  @javax.annotation.Nullable
  public Boolean getRedeemed() {
    return redeemed;
  }

  public void setRedeemed(Boolean redeemed) {
    this.redeemed = redeemed;
  }


  public DestinyMilestonesDestinyMilestoneRewardEntry rewardEntryHash(Integer rewardEntryHash) {
    this.rewardEntryHash = rewardEntryHash;
    return this;
  }

  /**
   * The identifier for the reward entry in question. It is important to look up the related DestinyMilestoneRewardEntryDefinition to get the static details about the reward, which you can do by looking up the milestone&#39;s DestinyMilestoneDefinition and examining the DestinyMilestoneDefinition.rewards[rewardCategoryHash].rewardEntries[rewardEntryHash] data.
   * @return rewardEntryHash
   */
  @javax.annotation.Nullable
  public Integer getRewardEntryHash() {
    return rewardEntryHash;
  }

  public void setRewardEntryHash(Integer rewardEntryHash) {
    this.rewardEntryHash = rewardEntryHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyMilestonesDestinyMilestoneRewardEntry destinyMilestonesDestinyMilestoneRewardEntry = (DestinyMilestonesDestinyMilestoneRewardEntry) o;
    return Objects.equals(this.earned, destinyMilestonesDestinyMilestoneRewardEntry.earned) &&
        Objects.equals(this.redeemed, destinyMilestonesDestinyMilestoneRewardEntry.redeemed) &&
        Objects.equals(this.rewardEntryHash, destinyMilestonesDestinyMilestoneRewardEntry.rewardEntryHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(earned, redeemed, rewardEntryHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyMilestonesDestinyMilestoneRewardEntry {\n");
    sb.append("    earned: ").append(toIndentedString(earned)).append("\n");
    sb.append("    redeemed: ").append(toIndentedString(redeemed)).append("\n");
    sb.append("    rewardEntryHash: ").append(toIndentedString(rewardEntryHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("earned");
    openapiFields.add("redeemed");
    openapiFields.add("rewardEntryHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyMilestonesDestinyMilestoneRewardEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyMilestonesDestinyMilestoneRewardEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyMilestonesDestinyMilestoneRewardEntry is not found in the empty JSON string", DestinyMilestonesDestinyMilestoneRewardEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyMilestonesDestinyMilestoneRewardEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyMilestonesDestinyMilestoneRewardEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyMilestonesDestinyMilestoneRewardEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyMilestonesDestinyMilestoneRewardEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyMilestonesDestinyMilestoneRewardEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyMilestonesDestinyMilestoneRewardEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyMilestonesDestinyMilestoneRewardEntry>() {
           @Override
           public void write(JsonWriter out, DestinyMilestonesDestinyMilestoneRewardEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyMilestonesDestinyMilestoneRewardEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyMilestonesDestinyMilestoneRewardEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyMilestonesDestinyMilestoneRewardEntry
   * @throws IOException if the JSON string is invalid with respect to DestinyMilestonesDestinyMilestoneRewardEntry
   */
  public static DestinyMilestonesDestinyMilestoneRewardEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyMilestonesDestinyMilestoneRewardEntry.class);
  }

  /**
   * Convert an instance of DestinyMilestonesDestinyMilestoneRewardEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

