/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The information for how the vendor purchase should override a given socket with custom plug data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyVendorItemSocketOverride {
  public static final String SERIALIZED_NAME_RANDOMIZED_OPTIONS_COUNT = "randomizedOptionsCount";
  @SerializedName(SERIALIZED_NAME_RANDOMIZED_OPTIONS_COUNT)
  private Integer randomizedOptionsCount;

  public static final String SERIALIZED_NAME_SINGLE_ITEM_HASH = "singleItemHash";
  @SerializedName(SERIALIZED_NAME_SINGLE_ITEM_HASH)
  private Integer singleItemHash;

  public static final String SERIALIZED_NAME_SOCKET_TYPE_HASH = "socketTypeHash";
  @SerializedName(SERIALIZED_NAME_SOCKET_TYPE_HASH)
  private Integer socketTypeHash;

  public DestinyDefinitionsDestinyVendorItemSocketOverride() {
  }

  public DestinyDefinitionsDestinyVendorItemSocketOverride randomizedOptionsCount(Integer randomizedOptionsCount) {
    this.randomizedOptionsCount = randomizedOptionsCount;
    return this;
  }

  /**
   * If this is greater than -1, the number of randomized plugs on this socket will be set to this quantity instead of whatever it&#39;s set to by default.
   * @return randomizedOptionsCount
   */
  @javax.annotation.Nullable
  public Integer getRandomizedOptionsCount() {
    return randomizedOptionsCount;
  }

  public void setRandomizedOptionsCount(Integer randomizedOptionsCount) {
    this.randomizedOptionsCount = randomizedOptionsCount;
  }


  public DestinyDefinitionsDestinyVendorItemSocketOverride singleItemHash(Integer singleItemHash) {
    this.singleItemHash = singleItemHash;
    return this;
  }

  /**
   * If this is populated, the socket will be overridden with a specific plug.  If this isn&#39;t populated, it&#39;s being overridden by something more complicated that is only known by the Game Server and God, which means we can&#39;t tell you in advance what it&#39;ll be.
   * @return singleItemHash
   */
  @javax.annotation.Nullable
  public Integer getSingleItemHash() {
    return singleItemHash;
  }

  public void setSingleItemHash(Integer singleItemHash) {
    this.singleItemHash = singleItemHash;
  }


  public DestinyDefinitionsDestinyVendorItemSocketOverride socketTypeHash(Integer socketTypeHash) {
    this.socketTypeHash = socketTypeHash;
    return this;
  }

  /**
   * This appears to be used to select which socket ultimately gets the override defined here.
   * @return socketTypeHash
   */
  @javax.annotation.Nullable
  public Integer getSocketTypeHash() {
    return socketTypeHash;
  }

  public void setSocketTypeHash(Integer socketTypeHash) {
    this.socketTypeHash = socketTypeHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyVendorItemSocketOverride destinyDefinitionsDestinyVendorItemSocketOverride = (DestinyDefinitionsDestinyVendorItemSocketOverride) o;
    return Objects.equals(this.randomizedOptionsCount, destinyDefinitionsDestinyVendorItemSocketOverride.randomizedOptionsCount) &&
        Objects.equals(this.singleItemHash, destinyDefinitionsDestinyVendorItemSocketOverride.singleItemHash) &&
        Objects.equals(this.socketTypeHash, destinyDefinitionsDestinyVendorItemSocketOverride.socketTypeHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(randomizedOptionsCount, singleItemHash, socketTypeHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyVendorItemSocketOverride {\n");
    sb.append("    randomizedOptionsCount: ").append(toIndentedString(randomizedOptionsCount)).append("\n");
    sb.append("    singleItemHash: ").append(toIndentedString(singleItemHash)).append("\n");
    sb.append("    socketTypeHash: ").append(toIndentedString(socketTypeHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("randomizedOptionsCount");
    openapiFields.add("singleItemHash");
    openapiFields.add("socketTypeHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyVendorItemSocketOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyVendorItemSocketOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyVendorItemSocketOverride is not found in the empty JSON string", DestinyDefinitionsDestinyVendorItemSocketOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyVendorItemSocketOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyVendorItemSocketOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyVendorItemSocketOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyVendorItemSocketOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyVendorItemSocketOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyVendorItemSocketOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyVendorItemSocketOverride>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyVendorItemSocketOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyVendorItemSocketOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyVendorItemSocketOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyVendorItemSocketOverride
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyVendorItemSocketOverride
   */
  public static DestinyDefinitionsDestinyVendorItemSocketOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyVendorItemSocketOverride.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyVendorItemSocketOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

