/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If the activity is a playlist, this is the definition for a specific entry in the playlist: a single possible combination of Activity and Activity Mode that can be chosen.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyActivityPlaylistItemDefinition {
  public static final String SERIALIZED_NAME_ACTIVITY_HASH = "activityHash";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_HASH)
  private Integer activityHash;

  public static final String SERIALIZED_NAME_ACTIVITY_MODE_HASHES = "activityModeHashes";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_MODE_HASHES)
  private List<Integer> activityModeHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIVITY_MODE_TYPES = "activityModeTypes";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_MODE_TYPES)
  private List<Integer> activityModeTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIRECT_ACTIVITY_MODE_HASH = "directActivityModeHash";
  @SerializedName(SERIALIZED_NAME_DIRECT_ACTIVITY_MODE_HASH)
  private Integer directActivityModeHash;

  /**
   * If the playlist entry had an activity mode directly defined on it, this will be the enum value of that mode.
   */
  @JsonAdapter(DirectActivityModeTypeEnum.Adapter.class)
  public enum DirectActivityModeTypeEnum {
    NUMBER_0(0),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_19(19),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27),
    
    NUMBER_28(28),
    
    NUMBER_29(29),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_37(37),
    
    NUMBER_38(38),
    
    NUMBER_39(39),
    
    NUMBER_40(40),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_44(44),
    
    NUMBER_45(45),
    
    NUMBER_46(46),
    
    NUMBER_47(47),
    
    NUMBER_48(48),
    
    NUMBER_49(49),
    
    NUMBER_50(50),
    
    NUMBER_51(51),
    
    NUMBER_52(52),
    
    NUMBER_53(53),
    
    NUMBER_54(54),
    
    NUMBER_55(55),
    
    NUMBER_56(56),
    
    NUMBER_57(57),
    
    NUMBER_58(58),
    
    NUMBER_59(59),
    
    NUMBER_60(60),
    
    NUMBER_61(61),
    
    NUMBER_62(62),
    
    NUMBER_63(63),
    
    NUMBER_64(64),
    
    NUMBER_65(65),
    
    NUMBER_66(66),
    
    NUMBER_67(67),
    
    NUMBER_68(68),
    
    NUMBER_69(69),
    
    NUMBER_70(70),
    
    NUMBER_71(71),
    
    NUMBER_72(72),
    
    NUMBER_73(73),
    
    NUMBER_74(74),
    
    NUMBER_75(75),
    
    NUMBER_76(76),
    
    NUMBER_77(77),
    
    NUMBER_78(78),
    
    NUMBER_79(79),
    
    NUMBER_80(80),
    
    NUMBER_81(81),
    
    NUMBER_82(82),
    
    NUMBER_83(83),
    
    NUMBER_84(84),
    
    NUMBER_85(85),
    
    NUMBER_86(86),
    
    NUMBER_87(87),
    
    NUMBER_88(88),
    
    NUMBER_89(89),
    
    NUMBER_90(90),
    
    NUMBER_91(91);

    private Integer value;

    DirectActivityModeTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectActivityModeTypeEnum fromValue(Integer value) {
      for (DirectActivityModeTypeEnum b : DirectActivityModeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectActivityModeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectActivityModeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectActivityModeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DirectActivityModeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      DirectActivityModeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECT_ACTIVITY_MODE_TYPE = "directActivityModeType";
  @SerializedName(SERIALIZED_NAME_DIRECT_ACTIVITY_MODE_TYPE)
  private DirectActivityModeTypeEnum directActivityModeType;

  public DestinyDefinitionsDestinyActivityPlaylistItemDefinition() {
  }

  public DestinyDefinitionsDestinyActivityPlaylistItemDefinition activityHash(Integer activityHash) {
    this.activityHash = activityHash;
    return this;
  }

  /**
   * The hash identifier of the Activity that can be played. Use it to look up the DestinyActivityDefinition.
   * @return activityHash
   */
  @javax.annotation.Nullable
  public Integer getActivityHash() {
    return activityHash;
  }

  public void setActivityHash(Integer activityHash) {
    this.activityHash = activityHash;
  }


  public DestinyDefinitionsDestinyActivityPlaylistItemDefinition activityModeHashes(List<Integer> activityModeHashes) {
    this.activityModeHashes = activityModeHashes;
    return this;
  }

  public DestinyDefinitionsDestinyActivityPlaylistItemDefinition addActivityModeHashesItem(Integer activityModeHashesItem) {
    if (this.activityModeHashes == null) {
      this.activityModeHashes = new ArrayList<>();
    }
    this.activityModeHashes.add(activityModeHashesItem);
    return this;
  }

  /**
   * The hash identifiers for Activity Modes relevant to this entry.
   * @return activityModeHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getActivityModeHashes() {
    return activityModeHashes;
  }

  public void setActivityModeHashes(List<Integer> activityModeHashes) {
    this.activityModeHashes = activityModeHashes;
  }


  public DestinyDefinitionsDestinyActivityPlaylistItemDefinition activityModeTypes(List<Integer> activityModeTypes) {
    this.activityModeTypes = activityModeTypes;
    return this;
  }

  public DestinyDefinitionsDestinyActivityPlaylistItemDefinition addActivityModeTypesItem(Integer activityModeTypesItem) {
    if (this.activityModeTypes == null) {
      this.activityModeTypes = new ArrayList<>();
    }
    this.activityModeTypes.add(activityModeTypesItem);
    return this;
  }

  /**
   * The activity modes - if any - in enum form. Because we can&#39;t seem to escape the enums.
   * @return activityModeTypes
   */
  @javax.annotation.Nullable
  public List<Integer> getActivityModeTypes() {
    return activityModeTypes;
  }

  public void setActivityModeTypes(List<Integer> activityModeTypes) {
    this.activityModeTypes = activityModeTypes;
  }


  public DestinyDefinitionsDestinyActivityPlaylistItemDefinition directActivityModeHash(Integer directActivityModeHash) {
    this.directActivityModeHash = directActivityModeHash;
    return this;
  }

  /**
   * If this playlist entry had an activity mode directly defined on it, this will be the hash of that mode.
   * @return directActivityModeHash
   */
  @javax.annotation.Nullable
  public Integer getDirectActivityModeHash() {
    return directActivityModeHash;
  }

  public void setDirectActivityModeHash(Integer directActivityModeHash) {
    this.directActivityModeHash = directActivityModeHash;
  }


  public DestinyDefinitionsDestinyActivityPlaylistItemDefinition directActivityModeType(DirectActivityModeTypeEnum directActivityModeType) {
    this.directActivityModeType = directActivityModeType;
    return this;
  }

  /**
   * If the playlist entry had an activity mode directly defined on it, this will be the enum value of that mode.
   * @return directActivityModeType
   */
  @javax.annotation.Nullable
  public DirectActivityModeTypeEnum getDirectActivityModeType() {
    return directActivityModeType;
  }

  public void setDirectActivityModeType(DirectActivityModeTypeEnum directActivityModeType) {
    this.directActivityModeType = directActivityModeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyActivityPlaylistItemDefinition destinyDefinitionsDestinyActivityPlaylistItemDefinition = (DestinyDefinitionsDestinyActivityPlaylistItemDefinition) o;
    return Objects.equals(this.activityHash, destinyDefinitionsDestinyActivityPlaylistItemDefinition.activityHash) &&
        Objects.equals(this.activityModeHashes, destinyDefinitionsDestinyActivityPlaylistItemDefinition.activityModeHashes) &&
        Objects.equals(this.activityModeTypes, destinyDefinitionsDestinyActivityPlaylistItemDefinition.activityModeTypes) &&
        Objects.equals(this.directActivityModeHash, destinyDefinitionsDestinyActivityPlaylistItemDefinition.directActivityModeHash) &&
        Objects.equals(this.directActivityModeType, destinyDefinitionsDestinyActivityPlaylistItemDefinition.directActivityModeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityHash, activityModeHashes, activityModeTypes, directActivityModeHash, directActivityModeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyActivityPlaylistItemDefinition {\n");
    sb.append("    activityHash: ").append(toIndentedString(activityHash)).append("\n");
    sb.append("    activityModeHashes: ").append(toIndentedString(activityModeHashes)).append("\n");
    sb.append("    activityModeTypes: ").append(toIndentedString(activityModeTypes)).append("\n");
    sb.append("    directActivityModeHash: ").append(toIndentedString(directActivityModeHash)).append("\n");
    sb.append("    directActivityModeType: ").append(toIndentedString(directActivityModeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityHash");
    openapiFields.add("activityModeHashes");
    openapiFields.add("activityModeTypes");
    openapiFields.add("directActivityModeHash");
    openapiFields.add("directActivityModeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyActivityPlaylistItemDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyActivityPlaylistItemDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyActivityPlaylistItemDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyActivityPlaylistItemDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyActivityPlaylistItemDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyActivityPlaylistItemDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("activityModeHashes") != null && !jsonObj.get("activityModeHashes").isJsonNull() && !jsonObj.get("activityModeHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityModeHashes` to be an array in the JSON string but got `%s`", jsonObj.get("activityModeHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("activityModeTypes") != null && !jsonObj.get("activityModeTypes").isJsonNull() && !jsonObj.get("activityModeTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityModeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("activityModeTypes").toString()));
      }
      // validate the optional field `directActivityModeType`
      if (jsonObj.get("directActivityModeType") != null && !jsonObj.get("directActivityModeType").isJsonNull()) {
        DirectActivityModeTypeEnum.validateJsonElement(jsonObj.get("directActivityModeType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyActivityPlaylistItemDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyActivityPlaylistItemDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyActivityPlaylistItemDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyActivityPlaylistItemDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyActivityPlaylistItemDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyActivityPlaylistItemDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyActivityPlaylistItemDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyActivityPlaylistItemDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyActivityPlaylistItemDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyActivityPlaylistItemDefinition
   */
  public static DestinyDefinitionsDestinyActivityPlaylistItemDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyActivityPlaylistItemDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyActivityPlaylistItemDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

