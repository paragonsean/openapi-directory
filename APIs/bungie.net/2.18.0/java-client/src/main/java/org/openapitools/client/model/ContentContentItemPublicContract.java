/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ContentCommentSummary;
import org.openapitools.client.model.ContentContentRepresentation;
import org.openapitools.client.model.UserGeneralUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContentContentItemPublicContract
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentContentItemPublicContract {
  public static final String SERIALIZED_NAME_ALLOW_COMMENTS = "allowComments";
  @SerializedName(SERIALIZED_NAME_ALLOW_COMMENTS)
  private Boolean allowComments;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private UserGeneralUser author;

  public static final String SERIALIZED_NAME_AUTO_ENGLISH_PROPERTY_FALLBACK = "autoEnglishPropertyFallback";
  @SerializedName(SERIALIZED_NAME_AUTO_ENGLISH_PROPERTY_FALLBACK)
  private Boolean autoEnglishPropertyFallback;

  public static final String SERIALIZED_NAME_C_TYPE = "cType";
  @SerializedName(SERIALIZED_NAME_C_TYPE)
  private String cType;

  public static final String SERIALIZED_NAME_CMS_PATH = "cmsPath";
  @SerializedName(SERIALIZED_NAME_CMS_PATH)
  private String cmsPath;

  public static final String SERIALIZED_NAME_COMMENT_SUMMARY = "commentSummary";
  @SerializedName(SERIALIZED_NAME_COMMENT_SUMMARY)
  private ContentCommentSummary commentSummary;

  public static final String SERIALIZED_NAME_CONTENT_ID = "contentId";
  @SerializedName(SERIALIZED_NAME_CONTENT_ID)
  private Long contentId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_HAS_AGE_GATE = "hasAgeGate";
  @SerializedName(SERIALIZED_NAME_HAS_AGE_GATE)
  private Boolean hasAgeGate;

  public static final String SERIALIZED_NAME_MINIMUM_AGE = "minimumAge";
  @SerializedName(SERIALIZED_NAME_MINIMUM_AGE)
  private Integer minimumAge;

  public static final String SERIALIZED_NAME_MODIFY_DATE = "modifyDate";
  @SerializedName(SERIALIZED_NAME_MODIFY_DATE)
  private OffsetDateTime modifyDate;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Object> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_RATING_IMAGE_PATH = "ratingImagePath";
  @SerializedName(SERIALIZED_NAME_RATING_IMAGE_PATH)
  private String ratingImagePath;

  public static final String SERIALIZED_NAME_REPRESENTATIONS = "representations";
  @SerializedName(SERIALIZED_NAME_REPRESENTATIONS)
  private List<ContentContentRepresentation> representations = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public ContentContentItemPublicContract() {
  }

  public ContentContentItemPublicContract allowComments(Boolean allowComments) {
    this.allowComments = allowComments;
    return this;
  }

  /**
   * Get allowComments
   * @return allowComments
   */
  @javax.annotation.Nullable
  public Boolean getAllowComments() {
    return allowComments;
  }

  public void setAllowComments(Boolean allowComments) {
    this.allowComments = allowComments;
  }


  public ContentContentItemPublicContract author(UserGeneralUser author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public UserGeneralUser getAuthor() {
    return author;
  }

  public void setAuthor(UserGeneralUser author) {
    this.author = author;
  }


  public ContentContentItemPublicContract autoEnglishPropertyFallback(Boolean autoEnglishPropertyFallback) {
    this.autoEnglishPropertyFallback = autoEnglishPropertyFallback;
    return this;
  }

  /**
   * Get autoEnglishPropertyFallback
   * @return autoEnglishPropertyFallback
   */
  @javax.annotation.Nullable
  public Boolean getAutoEnglishPropertyFallback() {
    return autoEnglishPropertyFallback;
  }

  public void setAutoEnglishPropertyFallback(Boolean autoEnglishPropertyFallback) {
    this.autoEnglishPropertyFallback = autoEnglishPropertyFallback;
  }


  public ContentContentItemPublicContract cType(String cType) {
    this.cType = cType;
    return this;
  }

  /**
   * Get cType
   * @return cType
   */
  @javax.annotation.Nullable
  public String getcType() {
    return cType;
  }

  public void setcType(String cType) {
    this.cType = cType;
  }


  public ContentContentItemPublicContract cmsPath(String cmsPath) {
    this.cmsPath = cmsPath;
    return this;
  }

  /**
   * Get cmsPath
   * @return cmsPath
   */
  @javax.annotation.Nullable
  public String getCmsPath() {
    return cmsPath;
  }

  public void setCmsPath(String cmsPath) {
    this.cmsPath = cmsPath;
  }


  public ContentContentItemPublicContract commentSummary(ContentCommentSummary commentSummary) {
    this.commentSummary = commentSummary;
    return this;
  }

  /**
   * Get commentSummary
   * @return commentSummary
   */
  @javax.annotation.Nullable
  public ContentCommentSummary getCommentSummary() {
    return commentSummary;
  }

  public void setCommentSummary(ContentCommentSummary commentSummary) {
    this.commentSummary = commentSummary;
  }


  public ContentContentItemPublicContract contentId(Long contentId) {
    this.contentId = contentId;
    return this;
  }

  /**
   * Get contentId
   * @return contentId
   */
  @javax.annotation.Nullable
  public Long getContentId() {
    return contentId;
  }

  public void setContentId(Long contentId) {
    this.contentId = contentId;
  }


  public ContentContentItemPublicContract creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public ContentContentItemPublicContract hasAgeGate(Boolean hasAgeGate) {
    this.hasAgeGate = hasAgeGate;
    return this;
  }

  /**
   * Get hasAgeGate
   * @return hasAgeGate
   */
  @javax.annotation.Nullable
  public Boolean getHasAgeGate() {
    return hasAgeGate;
  }

  public void setHasAgeGate(Boolean hasAgeGate) {
    this.hasAgeGate = hasAgeGate;
  }


  public ContentContentItemPublicContract minimumAge(Integer minimumAge) {
    this.minimumAge = minimumAge;
    return this;
  }

  /**
   * Get minimumAge
   * @return minimumAge
   */
  @javax.annotation.Nullable
  public Integer getMinimumAge() {
    return minimumAge;
  }

  public void setMinimumAge(Integer minimumAge) {
    this.minimumAge = minimumAge;
  }


  public ContentContentItemPublicContract modifyDate(OffsetDateTime modifyDate) {
    this.modifyDate = modifyDate;
    return this;
  }

  /**
   * Get modifyDate
   * @return modifyDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifyDate() {
    return modifyDate;
  }

  public void setModifyDate(OffsetDateTime modifyDate) {
    this.modifyDate = modifyDate;
  }


  public ContentContentItemPublicContract properties(Map<String, Object> properties) {
    this.properties = properties;
    return this;
  }

  public ContentContentItemPublicContract putPropertiesItem(String key, Object propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Firehose content is really a collection of metadata and \&quot;properties\&quot;, which are the potentially-but-not-strictly localizable data that comprises the meat of whatever content is being shown.  As Cole Porter would have crooned, \&quot;Anything Goes\&quot; with Firehose properties. They are most often strings, but they can theoretically be anything. They are JSON encoded, and could be JSON structures, simple strings, numbers etc... The Content Type of the item (cType) will describe the properties, and thus how they ought to be deserialized.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, Object> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, Object> properties) {
    this.properties = properties;
  }


  public ContentContentItemPublicContract ratingImagePath(String ratingImagePath) {
    this.ratingImagePath = ratingImagePath;
    return this;
  }

  /**
   * Get ratingImagePath
   * @return ratingImagePath
   */
  @javax.annotation.Nullable
  public String getRatingImagePath() {
    return ratingImagePath;
  }

  public void setRatingImagePath(String ratingImagePath) {
    this.ratingImagePath = ratingImagePath;
  }


  public ContentContentItemPublicContract representations(List<ContentContentRepresentation> representations) {
    this.representations = representations;
    return this;
  }

  public ContentContentItemPublicContract addRepresentationsItem(ContentContentRepresentation representationsItem) {
    if (this.representations == null) {
      this.representations = new ArrayList<>();
    }
    this.representations.add(representationsItem);
    return this;
  }

  /**
   * Get representations
   * @return representations
   */
  @javax.annotation.Nullable
  public List<ContentContentRepresentation> getRepresentations() {
    return representations;
  }

  public void setRepresentations(List<ContentContentRepresentation> representations) {
    this.representations = representations;
  }


  public ContentContentItemPublicContract tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ContentContentItemPublicContract addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * NOTE: Tags will always be lower case.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentContentItemPublicContract contentContentItemPublicContract = (ContentContentItemPublicContract) o;
    return Objects.equals(this.allowComments, contentContentItemPublicContract.allowComments) &&
        Objects.equals(this.author, contentContentItemPublicContract.author) &&
        Objects.equals(this.autoEnglishPropertyFallback, contentContentItemPublicContract.autoEnglishPropertyFallback) &&
        Objects.equals(this.cType, contentContentItemPublicContract.cType) &&
        Objects.equals(this.cmsPath, contentContentItemPublicContract.cmsPath) &&
        Objects.equals(this.commentSummary, contentContentItemPublicContract.commentSummary) &&
        Objects.equals(this.contentId, contentContentItemPublicContract.contentId) &&
        Objects.equals(this.creationDate, contentContentItemPublicContract.creationDate) &&
        Objects.equals(this.hasAgeGate, contentContentItemPublicContract.hasAgeGate) &&
        Objects.equals(this.minimumAge, contentContentItemPublicContract.minimumAge) &&
        Objects.equals(this.modifyDate, contentContentItemPublicContract.modifyDate) &&
        Objects.equals(this.properties, contentContentItemPublicContract.properties) &&
        Objects.equals(this.ratingImagePath, contentContentItemPublicContract.ratingImagePath) &&
        Objects.equals(this.representations, contentContentItemPublicContract.representations) &&
        Objects.equals(this.tags, contentContentItemPublicContract.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowComments, author, autoEnglishPropertyFallback, cType, cmsPath, commentSummary, contentId, creationDate, hasAgeGate, minimumAge, modifyDate, properties, ratingImagePath, representations, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentContentItemPublicContract {\n");
    sb.append("    allowComments: ").append(toIndentedString(allowComments)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    autoEnglishPropertyFallback: ").append(toIndentedString(autoEnglishPropertyFallback)).append("\n");
    sb.append("    cType: ").append(toIndentedString(cType)).append("\n");
    sb.append("    cmsPath: ").append(toIndentedString(cmsPath)).append("\n");
    sb.append("    commentSummary: ").append(toIndentedString(commentSummary)).append("\n");
    sb.append("    contentId: ").append(toIndentedString(contentId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    hasAgeGate: ").append(toIndentedString(hasAgeGate)).append("\n");
    sb.append("    minimumAge: ").append(toIndentedString(minimumAge)).append("\n");
    sb.append("    modifyDate: ").append(toIndentedString(modifyDate)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    ratingImagePath: ").append(toIndentedString(ratingImagePath)).append("\n");
    sb.append("    representations: ").append(toIndentedString(representations)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowComments");
    openapiFields.add("author");
    openapiFields.add("autoEnglishPropertyFallback");
    openapiFields.add("cType");
    openapiFields.add("cmsPath");
    openapiFields.add("commentSummary");
    openapiFields.add("contentId");
    openapiFields.add("creationDate");
    openapiFields.add("hasAgeGate");
    openapiFields.add("minimumAge");
    openapiFields.add("modifyDate");
    openapiFields.add("properties");
    openapiFields.add("ratingImagePath");
    openapiFields.add("representations");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentContentItemPublicContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentContentItemPublicContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentContentItemPublicContract is not found in the empty JSON string", ContentContentItemPublicContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentContentItemPublicContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentContentItemPublicContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        UserGeneralUser.validateJsonElement(jsonObj.get("author"));
      }
      if ((jsonObj.get("cType") != null && !jsonObj.get("cType").isJsonNull()) && !jsonObj.get("cType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cType").toString()));
      }
      if ((jsonObj.get("cmsPath") != null && !jsonObj.get("cmsPath").isJsonNull()) && !jsonObj.get("cmsPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmsPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cmsPath").toString()));
      }
      // validate the optional field `commentSummary`
      if (jsonObj.get("commentSummary") != null && !jsonObj.get("commentSummary").isJsonNull()) {
        ContentCommentSummary.validateJsonElement(jsonObj.get("commentSummary"));
      }
      if ((jsonObj.get("ratingImagePath") != null && !jsonObj.get("ratingImagePath").isJsonNull()) && !jsonObj.get("ratingImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratingImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratingImagePath").toString()));
      }
      if (jsonObj.get("representations") != null && !jsonObj.get("representations").isJsonNull()) {
        JsonArray jsonArrayrepresentations = jsonObj.getAsJsonArray("representations");
        if (jsonArrayrepresentations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("representations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `representations` to be an array in the JSON string but got `%s`", jsonObj.get("representations").toString()));
          }

          // validate the optional field `representations` (array)
          for (int i = 0; i < jsonArrayrepresentations.size(); i++) {
            ContentContentRepresentation.validateJsonElement(jsonArrayrepresentations.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentContentItemPublicContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentContentItemPublicContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentContentItemPublicContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentContentItemPublicContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentContentItemPublicContract>() {
           @Override
           public void write(JsonWriter out, ContentContentItemPublicContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentContentItemPublicContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentContentItemPublicContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentContentItemPublicContract
   * @throws IOException if the JSON string is invalid with respect to ContentContentItemPublicContract
   */
  public static ContentContentItemPublicContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentContentItemPublicContract.class);
  }

  /**
   * Convert an instance of ContentContentItemPublicContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

