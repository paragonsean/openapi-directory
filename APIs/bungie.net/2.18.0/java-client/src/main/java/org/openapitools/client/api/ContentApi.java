/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContentGetContentById200Response;
import org.openapitools.client.model.ContentGetContentType200Response;
import org.openapitools.client.model.ContentRssNewsArticles200Response;
import org.openapitools.client.model.ContentSearchContentWithText200Response;
import org.openapitools.client.model.ContentSearchHelpArticles200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for contentGetContentById
     * @param id  (required)
     * @param locale  (required)
     * @param head false (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentGetContentByIdCall(Long id, String locale, Boolean head, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Content/GetContentById/{id}/{locale}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (head != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("head", head));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentGetContentByIdValidateBeforeCall(Long id, String locale, Boolean head, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contentGetContentById(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling contentGetContentById(Async)");
        }

        return contentGetContentByIdCall(id, locale, head, _callback);

    }

    /**
     * 
     * Returns a content item referenced by id
     * @param id  (required)
     * @param locale  (required)
     * @param head false (optional)
     * @return ContentGetContentById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ContentGetContentById200Response contentGetContentById(Long id, String locale, Boolean head) throws ApiException {
        ApiResponse<ContentGetContentById200Response> localVarResp = contentGetContentByIdWithHttpInfo(id, locale, head);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a content item referenced by id
     * @param id  (required)
     * @param locale  (required)
     * @param head false (optional)
     * @return ApiResponse&lt;ContentGetContentById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGetContentById200Response> contentGetContentByIdWithHttpInfo(Long id, String locale, Boolean head) throws ApiException {
        okhttp3.Call localVarCall = contentGetContentByIdValidateBeforeCall(id, locale, head, null);
        Type localVarReturnType = new TypeToken<ContentGetContentById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a content item referenced by id
     * @param id  (required)
     * @param locale  (required)
     * @param head false (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentGetContentByIdAsync(Long id, String locale, Boolean head, final ApiCallback<ContentGetContentById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentGetContentByIdValidateBeforeCall(id, locale, head, _callback);
        Type localVarReturnType = new TypeToken<ContentGetContentById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentGetContentByTagAndType
     * @param locale  (required)
     * @param tag  (required)
     * @param type  (required)
     * @param head Not used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentGetContentByTagAndTypeCall(String locale, String tag, String type, Boolean head, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Content/GetContentByTagAndType/{tag}/{type}/{locale}/"
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (head != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("head", head));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentGetContentByTagAndTypeValidateBeforeCall(String locale, String tag, String type, Boolean head, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling contentGetContentByTagAndType(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling contentGetContentByTagAndType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling contentGetContentByTagAndType(Async)");
        }

        return contentGetContentByTagAndTypeCall(locale, tag, type, head, _callback);

    }

    /**
     * 
     * Returns the newest item that matches a given tag and Content Type.
     * @param locale  (required)
     * @param tag  (required)
     * @param type  (required)
     * @param head Not used. (optional)
     * @return ContentGetContentById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ContentGetContentById200Response contentGetContentByTagAndType(String locale, String tag, String type, Boolean head) throws ApiException {
        ApiResponse<ContentGetContentById200Response> localVarResp = contentGetContentByTagAndTypeWithHttpInfo(locale, tag, type, head);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the newest item that matches a given tag and Content Type.
     * @param locale  (required)
     * @param tag  (required)
     * @param type  (required)
     * @param head Not used. (optional)
     * @return ApiResponse&lt;ContentGetContentById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGetContentById200Response> contentGetContentByTagAndTypeWithHttpInfo(String locale, String tag, String type, Boolean head) throws ApiException {
        okhttp3.Call localVarCall = contentGetContentByTagAndTypeValidateBeforeCall(locale, tag, type, head, null);
        Type localVarReturnType = new TypeToken<ContentGetContentById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the newest item that matches a given tag and Content Type.
     * @param locale  (required)
     * @param tag  (required)
     * @param type  (required)
     * @param head Not used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentGetContentByTagAndTypeAsync(String locale, String tag, String type, Boolean head, final ApiCallback<ContentGetContentById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentGetContentByTagAndTypeValidateBeforeCall(locale, tag, type, head, _callback);
        Type localVarReturnType = new TypeToken<ContentGetContentById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentGetContentType
     * @param type  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentGetContentTypeCall(String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Content/GetContentType/{type}/"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentGetContentTypeValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling contentGetContentType(Async)");
        }

        return contentGetContentTypeCall(type, _callback);

    }

    /**
     * 
     * Gets an object describing a particular variant of content.
     * @param type  (required)
     * @return ContentGetContentType200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ContentGetContentType200Response contentGetContentType(String type) throws ApiException {
        ApiResponse<ContentGetContentType200Response> localVarResp = contentGetContentTypeWithHttpInfo(type);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an object describing a particular variant of content.
     * @param type  (required)
     * @return ApiResponse&lt;ContentGetContentType200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGetContentType200Response> contentGetContentTypeWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = contentGetContentTypeValidateBeforeCall(type, null);
        Type localVarReturnType = new TypeToken<ContentGetContentType200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an object describing a particular variant of content.
     * @param type  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentGetContentTypeAsync(String type, final ApiCallback<ContentGetContentType200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentGetContentTypeValidateBeforeCall(type, _callback);
        Type localVarReturnType = new TypeToken<ContentGetContentType200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentRssNewsArticles
     * @param pageToken Zero-based pagination token for paging through result sets. (required)
     * @param categoryfilter Optionally filter response to only include news items in a certain category. (optional)
     * @param includebody Optionally include full content body for each news item. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentRssNewsArticlesCall(String pageToken, String categoryfilter, Boolean includebody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Content/Rss/NewsArticles/{pageToken}/"
            .replace("{" + "pageToken" + "}", localVarApiClient.escapeString(pageToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryfilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryfilter", categoryfilter));
        }

        if (includebody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includebody", includebody));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentRssNewsArticlesValidateBeforeCall(String pageToken, String categoryfilter, Boolean includebody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageToken' is set
        if (pageToken == null) {
            throw new ApiException("Missing the required parameter 'pageToken' when calling contentRssNewsArticles(Async)");
        }

        return contentRssNewsArticlesCall(pageToken, categoryfilter, includebody, _callback);

    }

    /**
     * 
     * Returns a JSON string response that is the RSS feed for news articles.
     * @param pageToken Zero-based pagination token for paging through result sets. (required)
     * @param categoryfilter Optionally filter response to only include news items in a certain category. (optional)
     * @param includebody Optionally include full content body for each news item. (optional)
     * @return ContentRssNewsArticles200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ContentRssNewsArticles200Response contentRssNewsArticles(String pageToken, String categoryfilter, Boolean includebody) throws ApiException {
        ApiResponse<ContentRssNewsArticles200Response> localVarResp = contentRssNewsArticlesWithHttpInfo(pageToken, categoryfilter, includebody);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a JSON string response that is the RSS feed for news articles.
     * @param pageToken Zero-based pagination token for paging through result sets. (required)
     * @param categoryfilter Optionally filter response to only include news items in a certain category. (optional)
     * @param includebody Optionally include full content body for each news item. (optional)
     * @return ApiResponse&lt;ContentRssNewsArticles200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentRssNewsArticles200Response> contentRssNewsArticlesWithHttpInfo(String pageToken, String categoryfilter, Boolean includebody) throws ApiException {
        okhttp3.Call localVarCall = contentRssNewsArticlesValidateBeforeCall(pageToken, categoryfilter, includebody, null);
        Type localVarReturnType = new TypeToken<ContentRssNewsArticles200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a JSON string response that is the RSS feed for news articles.
     * @param pageToken Zero-based pagination token for paging through result sets. (required)
     * @param categoryfilter Optionally filter response to only include news items in a certain category. (optional)
     * @param includebody Optionally include full content body for each news item. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentRssNewsArticlesAsync(String pageToken, String categoryfilter, Boolean includebody, final ApiCallback<ContentRssNewsArticles200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentRssNewsArticlesValidateBeforeCall(pageToken, categoryfilter, includebody, _callback);
        Type localVarReturnType = new TypeToken<ContentRssNewsArticles200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSearchContentByTagAndType
     * @param locale  (required)
     * @param tag  (required)
     * @param type  (required)
     * @param currentpage Page number for the search results starting with page 1. (optional)
     * @param head Not used. (optional)
     * @param itemsperpage Not used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSearchContentByTagAndTypeCall(String locale, String tag, String type, Integer currentpage, Boolean head, Integer itemsperpage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/"
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()))
            .replace("{" + "tag" + "}", localVarApiClient.escapeString(tag.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentpage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentpage", currentpage));
        }

        if (head != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("head", head));
        }

        if (itemsperpage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemsperpage", itemsperpage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSearchContentByTagAndTypeValidateBeforeCall(String locale, String tag, String type, Integer currentpage, Boolean head, Integer itemsperpage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling contentSearchContentByTagAndType(Async)");
        }

        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling contentSearchContentByTagAndType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling contentSearchContentByTagAndType(Async)");
        }

        return contentSearchContentByTagAndTypeCall(locale, tag, type, currentpage, head, itemsperpage, _callback);

    }

    /**
     * 
     * Searches for Content Items that match the given Tag and Content Type.
     * @param locale  (required)
     * @param tag  (required)
     * @param type  (required)
     * @param currentpage Page number for the search results starting with page 1. (optional)
     * @param head Not used. (optional)
     * @param itemsperpage Not used. (optional)
     * @return ContentSearchContentWithText200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ContentSearchContentWithText200Response contentSearchContentByTagAndType(String locale, String tag, String type, Integer currentpage, Boolean head, Integer itemsperpage) throws ApiException {
        ApiResponse<ContentSearchContentWithText200Response> localVarResp = contentSearchContentByTagAndTypeWithHttpInfo(locale, tag, type, currentpage, head, itemsperpage);
        return localVarResp.getData();
    }

    /**
     * 
     * Searches for Content Items that match the given Tag and Content Type.
     * @param locale  (required)
     * @param tag  (required)
     * @param type  (required)
     * @param currentpage Page number for the search results starting with page 1. (optional)
     * @param head Not used. (optional)
     * @param itemsperpage Not used. (optional)
     * @return ApiResponse&lt;ContentSearchContentWithText200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentSearchContentWithText200Response> contentSearchContentByTagAndTypeWithHttpInfo(String locale, String tag, String type, Integer currentpage, Boolean head, Integer itemsperpage) throws ApiException {
        okhttp3.Call localVarCall = contentSearchContentByTagAndTypeValidateBeforeCall(locale, tag, type, currentpage, head, itemsperpage, null);
        Type localVarReturnType = new TypeToken<ContentSearchContentWithText200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Searches for Content Items that match the given Tag and Content Type.
     * @param locale  (required)
     * @param tag  (required)
     * @param type  (required)
     * @param currentpage Page number for the search results starting with page 1. (optional)
     * @param head Not used. (optional)
     * @param itemsperpage Not used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSearchContentByTagAndTypeAsync(String locale, String tag, String type, Integer currentpage, Boolean head, Integer itemsperpage, final ApiCallback<ContentSearchContentWithText200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSearchContentByTagAndTypeValidateBeforeCall(locale, tag, type, currentpage, head, itemsperpage, _callback);
        Type localVarReturnType = new TypeToken<ContentSearchContentWithText200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSearchContentWithText
     * @param locale  (required)
     * @param ctype Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)
     * @param currentpage Page number for the search results, starting with page 1. (optional)
     * @param head Not used. (optional)
     * @param searchtext Word or phrase for the search. (optional)
     * @param source For analytics, hint at the part of the app that triggered the search. Optional. (optional)
     * @param tag Tag used on the content to be searched. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSearchContentWithTextCall(String locale, String ctype, Integer currentpage, Boolean head, String searchtext, String source, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Content/Search/{locale}/"
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ctype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ctype", ctype));
        }

        if (currentpage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentpage", currentpage));
        }

        if (head != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("head", head));
        }

        if (searchtext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchtext", searchtext));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSearchContentWithTextValidateBeforeCall(String locale, String ctype, Integer currentpage, Boolean head, String searchtext, String source, String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling contentSearchContentWithText(Async)");
        }

        return contentSearchContentWithTextCall(locale, ctype, currentpage, head, searchtext, source, tag, _callback);

    }

    /**
     * 
     * Gets content based on querystring information passed in. Provides basic search and text search capabilities.
     * @param locale  (required)
     * @param ctype Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)
     * @param currentpage Page number for the search results, starting with page 1. (optional)
     * @param head Not used. (optional)
     * @param searchtext Word or phrase for the search. (optional)
     * @param source For analytics, hint at the part of the app that triggered the search. Optional. (optional)
     * @param tag Tag used on the content to be searched. (optional)
     * @return ContentSearchContentWithText200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ContentSearchContentWithText200Response contentSearchContentWithText(String locale, String ctype, Integer currentpage, Boolean head, String searchtext, String source, String tag) throws ApiException {
        ApiResponse<ContentSearchContentWithText200Response> localVarResp = contentSearchContentWithTextWithHttpInfo(locale, ctype, currentpage, head, searchtext, source, tag);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets content based on querystring information passed in. Provides basic search and text search capabilities.
     * @param locale  (required)
     * @param ctype Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)
     * @param currentpage Page number for the search results, starting with page 1. (optional)
     * @param head Not used. (optional)
     * @param searchtext Word or phrase for the search. (optional)
     * @param source For analytics, hint at the part of the app that triggered the search. Optional. (optional)
     * @param tag Tag used on the content to be searched. (optional)
     * @return ApiResponse&lt;ContentSearchContentWithText200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentSearchContentWithText200Response> contentSearchContentWithTextWithHttpInfo(String locale, String ctype, Integer currentpage, Boolean head, String searchtext, String source, String tag) throws ApiException {
        okhttp3.Call localVarCall = contentSearchContentWithTextValidateBeforeCall(locale, ctype, currentpage, head, searchtext, source, tag, null);
        Type localVarReturnType = new TypeToken<ContentSearchContentWithText200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets content based on querystring information passed in. Provides basic search and text search capabilities.
     * @param locale  (required)
     * @param ctype Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)
     * @param currentpage Page number for the search results, starting with page 1. (optional)
     * @param head Not used. (optional)
     * @param searchtext Word or phrase for the search. (optional)
     * @param source For analytics, hint at the part of the app that triggered the search. Optional. (optional)
     * @param tag Tag used on the content to be searched. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSearchContentWithTextAsync(String locale, String ctype, Integer currentpage, Boolean head, String searchtext, String source, String tag, final ApiCallback<ContentSearchContentWithText200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSearchContentWithTextValidateBeforeCall(locale, ctype, currentpage, head, searchtext, source, tag, _callback);
        Type localVarReturnType = new TypeToken<ContentSearchContentWithText200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentSearchHelpArticles
     * @param searchtext  (required)
     * @param size  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSearchHelpArticlesCall(String searchtext, String size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Content/SearchHelpArticles/{searchtext}/{size}/"
            .replace("{" + "searchtext" + "}", localVarApiClient.escapeString(searchtext.toString()))
            .replace("{" + "size" + "}", localVarApiClient.escapeString(size.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentSearchHelpArticlesValidateBeforeCall(String searchtext, String size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchtext' is set
        if (searchtext == null) {
            throw new ApiException("Missing the required parameter 'searchtext' when calling contentSearchHelpArticles(Async)");
        }

        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling contentSearchHelpArticles(Async)");
        }

        return contentSearchHelpArticlesCall(searchtext, size, _callback);

    }

    /**
     * 
     * Search for Help Articles.
     * @param searchtext  (required)
     * @param size  (required)
     * @return ContentSearchHelpArticles200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ContentSearchHelpArticles200Response contentSearchHelpArticles(String searchtext, String size) throws ApiException {
        ApiResponse<ContentSearchHelpArticles200Response> localVarResp = contentSearchHelpArticlesWithHttpInfo(searchtext, size);
        return localVarResp.getData();
    }

    /**
     * 
     * Search for Help Articles.
     * @param searchtext  (required)
     * @param size  (required)
     * @return ApiResponse&lt;ContentSearchHelpArticles200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentSearchHelpArticles200Response> contentSearchHelpArticlesWithHttpInfo(String searchtext, String size) throws ApiException {
        okhttp3.Call localVarCall = contentSearchHelpArticlesValidateBeforeCall(searchtext, size, null);
        Type localVarReturnType = new TypeToken<ContentSearchHelpArticles200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for Help Articles.
     * @param searchtext  (required)
     * @param size  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentSearchHelpArticlesAsync(String searchtext, String size, final ApiCallback<ContentSearchHelpArticles200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentSearchHelpArticlesValidateBeforeCall(searchtext, size, _callback);
        Type localVarReturnType = new TypeToken<ContentSearchHelpArticles200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
