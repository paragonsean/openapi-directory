/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationsApplicationDeveloper;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApplicationsApplication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationsApplication {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "applicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private Integer applicationId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_FIRST_PUBLISHED = "firstPublished";
  @SerializedName(SERIALIZED_NAME_FIRST_PUBLISHED)
  private OffsetDateTime firstPublished;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_OVERRIDE_AUTHORIZE_VIEW_NAME = "overrideAuthorizeViewName";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_AUTHORIZE_VIEW_NAME)
  private String overrideAuthorizeViewName;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private Long scope;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_STATUS_CHANGED = "statusChanged";
  @SerializedName(SERIALIZED_NAME_STATUS_CHANGED)
  private OffsetDateTime statusChanged;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private List<ApplicationsApplicationDeveloper> team = new ArrayList<>();

  public ApplicationsApplication() {
  }

  public ApplicationsApplication applicationId(Integer applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Unique ID assigned to the application
   * @return applicationId
   */
  @javax.annotation.Nullable
  public Integer getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(Integer applicationId) {
    this.applicationId = applicationId;
  }


  public ApplicationsApplication creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Date the application was first added to our database.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public ApplicationsApplication firstPublished(OffsetDateTime firstPublished) {
    this.firstPublished = firstPublished;
    return this;
  }

  /**
   * Date the first time the application status entered the &#39;Public&#39; status.
   * @return firstPublished
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstPublished() {
    return firstPublished;
  }

  public void setFirstPublished(OffsetDateTime firstPublished) {
    this.firstPublished = firstPublished;
  }


  public ApplicationsApplication link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Link to website for the application where a user can learn more about the app.
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public ApplicationsApplication name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the application
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationsApplication origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Value of the Origin header sent in requests generated by this application.
   * @return origin
   */
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public ApplicationsApplication overrideAuthorizeViewName(String overrideAuthorizeViewName) {
    this.overrideAuthorizeViewName = overrideAuthorizeViewName;
    return this;
  }

  /**
   * An optional override for the Authorize view name.
   * @return overrideAuthorizeViewName
   */
  @javax.annotation.Nullable
  public String getOverrideAuthorizeViewName() {
    return overrideAuthorizeViewName;
  }

  public void setOverrideAuthorizeViewName(String overrideAuthorizeViewName) {
    this.overrideAuthorizeViewName = overrideAuthorizeViewName;
  }


  public ApplicationsApplication redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * URL used to pass the user&#39;s authorization code to the application
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public ApplicationsApplication scope(Long scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Permissions the application needs to work
   * @return scope
   */
  @javax.annotation.Nullable
  public Long getScope() {
    return scope;
  }

  public void setScope(Long scope) {
    this.scope = scope;
  }


  public ApplicationsApplication status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Current status of the application.
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public ApplicationsApplication statusChanged(OffsetDateTime statusChanged) {
    this.statusChanged = statusChanged;
    return this;
  }

  /**
   * Date the application status last changed.
   * @return statusChanged
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStatusChanged() {
    return statusChanged;
  }

  public void setStatusChanged(OffsetDateTime statusChanged) {
    this.statusChanged = statusChanged;
  }


  public ApplicationsApplication team(List<ApplicationsApplicationDeveloper> team) {
    this.team = team;
    return this;
  }

  public ApplicationsApplication addTeamItem(ApplicationsApplicationDeveloper teamItem) {
    if (this.team == null) {
      this.team = new ArrayList<>();
    }
    this.team.add(teamItem);
    return this;
  }

  /**
   * List of team members who manage this application on Bungie.net. Will always consist of at least the application owner.
   * @return team
   */
  @javax.annotation.Nullable
  public List<ApplicationsApplicationDeveloper> getTeam() {
    return team;
  }

  public void setTeam(List<ApplicationsApplicationDeveloper> team) {
    this.team = team;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationsApplication applicationsApplication = (ApplicationsApplication) o;
    return Objects.equals(this.applicationId, applicationsApplication.applicationId) &&
        Objects.equals(this.creationDate, applicationsApplication.creationDate) &&
        Objects.equals(this.firstPublished, applicationsApplication.firstPublished) &&
        Objects.equals(this.link, applicationsApplication.link) &&
        Objects.equals(this.name, applicationsApplication.name) &&
        Objects.equals(this.origin, applicationsApplication.origin) &&
        Objects.equals(this.overrideAuthorizeViewName, applicationsApplication.overrideAuthorizeViewName) &&
        Objects.equals(this.redirectUrl, applicationsApplication.redirectUrl) &&
        Objects.equals(this.scope, applicationsApplication.scope) &&
        Objects.equals(this.status, applicationsApplication.status) &&
        Objects.equals(this.statusChanged, applicationsApplication.statusChanged) &&
        Objects.equals(this.team, applicationsApplication.team);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, creationDate, firstPublished, link, name, origin, overrideAuthorizeViewName, redirectUrl, scope, status, statusChanged, team);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationsApplication {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    firstPublished: ").append(toIndentedString(firstPublished)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    overrideAuthorizeViewName: ").append(toIndentedString(overrideAuthorizeViewName)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusChanged: ").append(toIndentedString(statusChanged)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationId");
    openapiFields.add("creationDate");
    openapiFields.add("firstPublished");
    openapiFields.add("link");
    openapiFields.add("name");
    openapiFields.add("origin");
    openapiFields.add("overrideAuthorizeViewName");
    openapiFields.add("redirectUrl");
    openapiFields.add("scope");
    openapiFields.add("status");
    openapiFields.add("statusChanged");
    openapiFields.add("team");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationsApplication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationsApplication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationsApplication is not found in the empty JSON string", ApplicationsApplication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationsApplication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationsApplication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if ((jsonObj.get("overrideAuthorizeViewName") != null && !jsonObj.get("overrideAuthorizeViewName").isJsonNull()) && !jsonObj.get("overrideAuthorizeViewName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overrideAuthorizeViewName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overrideAuthorizeViewName").toString()));
      }
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if (jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) {
        JsonArray jsonArrayteam = jsonObj.getAsJsonArray("team");
        if (jsonArrayteam != null) {
          // ensure the json data is an array
          if (!jsonObj.get("team").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `team` to be an array in the JSON string but got `%s`", jsonObj.get("team").toString()));
          }

          // validate the optional field `team` (array)
          for (int i = 0; i < jsonArrayteam.size(); i++) {
            ApplicationsApplicationDeveloper.validateJsonElement(jsonArrayteam.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationsApplication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationsApplication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationsApplication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationsApplication.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationsApplication>() {
           @Override
           public void write(JsonWriter out, ApplicationsApplication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationsApplication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationsApplication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationsApplication
   * @throws IOException if the JSON string is invalid with respect to ApplicationsApplication
   */
  public static ApplicationsApplication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationsApplication.class);
  }

  /**
   * Convert an instance of ApplicationsApplication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

