/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyItemSocketCategoryDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyItemSocketEntryDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If defined, the item has at least one socket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemSocketBlockDefinition {
  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_INTRINSIC_SOCKETS = "intrinsicSockets";
  @SerializedName(SERIALIZED_NAME_INTRINSIC_SOCKETS)
  private List<DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition> intrinsicSockets = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOCKET_CATEGORIES = "socketCategories";
  @SerializedName(SERIALIZED_NAME_SOCKET_CATEGORIES)
  private List<DestinyDefinitionsDestinyItemSocketCategoryDefinition> socketCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOCKET_ENTRIES = "socketEntries";
  @SerializedName(SERIALIZED_NAME_SOCKET_ENTRIES)
  private List<DestinyDefinitionsDestinyItemSocketEntryDefinition> socketEntries = new ArrayList<>();

  public DestinyDefinitionsDestinyItemSocketBlockDefinition() {
  }

  public DestinyDefinitionsDestinyItemSocketBlockDefinition detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * This was supposed to be a string that would give per-item details about sockets. In practice, it turns out that all this ever has is the localized word \&quot;details\&quot;. ... that&#39;s lame, but perhaps it will become something cool in the future.
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }


  public DestinyDefinitionsDestinyItemSocketBlockDefinition intrinsicSockets(List<DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition> intrinsicSockets) {
    this.intrinsicSockets = intrinsicSockets;
    return this;
  }

  public DestinyDefinitionsDestinyItemSocketBlockDefinition addIntrinsicSocketsItem(DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition intrinsicSocketsItem) {
    if (this.intrinsicSockets == null) {
      this.intrinsicSockets = new ArrayList<>();
    }
    this.intrinsicSockets.add(intrinsicSocketsItem);
    return this;
  }

  /**
   * Each intrinsic (or immutable/permanent) socket on an item is defined here, along with the plug that is permanently affixed to the socket.
   * @return intrinsicSockets
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition> getIntrinsicSockets() {
    return intrinsicSockets;
  }

  public void setIntrinsicSockets(List<DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition> intrinsicSockets) {
    this.intrinsicSockets = intrinsicSockets;
  }


  public DestinyDefinitionsDestinyItemSocketBlockDefinition socketCategories(List<DestinyDefinitionsDestinyItemSocketCategoryDefinition> socketCategories) {
    this.socketCategories = socketCategories;
    return this;
  }

  public DestinyDefinitionsDestinyItemSocketBlockDefinition addSocketCategoriesItem(DestinyDefinitionsDestinyItemSocketCategoryDefinition socketCategoriesItem) {
    if (this.socketCategories == null) {
      this.socketCategories = new ArrayList<>();
    }
    this.socketCategories.add(socketCategoriesItem);
    return this;
  }

  /**
   * A convenience property, that refers to the sockets in the \&quot;sockets\&quot; property, pre-grouped by category and ordered in the manner that they should be grouped in the UI. You could form this yourself with the existing data, but why would you want to? Enjoy life man.
   * @return socketCategories
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyItemSocketCategoryDefinition> getSocketCategories() {
    return socketCategories;
  }

  public void setSocketCategories(List<DestinyDefinitionsDestinyItemSocketCategoryDefinition> socketCategories) {
    this.socketCategories = socketCategories;
  }


  public DestinyDefinitionsDestinyItemSocketBlockDefinition socketEntries(List<DestinyDefinitionsDestinyItemSocketEntryDefinition> socketEntries) {
    this.socketEntries = socketEntries;
    return this;
  }

  public DestinyDefinitionsDestinyItemSocketBlockDefinition addSocketEntriesItem(DestinyDefinitionsDestinyItemSocketEntryDefinition socketEntriesItem) {
    if (this.socketEntries == null) {
      this.socketEntries = new ArrayList<>();
    }
    this.socketEntries.add(socketEntriesItem);
    return this;
  }

  /**
   * Each non-intrinsic (or mutable) socket on an item is defined here. Check inside for more info.
   * @return socketEntries
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyItemSocketEntryDefinition> getSocketEntries() {
    return socketEntries;
  }

  public void setSocketEntries(List<DestinyDefinitionsDestinyItemSocketEntryDefinition> socketEntries) {
    this.socketEntries = socketEntries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemSocketBlockDefinition destinyDefinitionsDestinyItemSocketBlockDefinition = (DestinyDefinitionsDestinyItemSocketBlockDefinition) o;
    return Objects.equals(this.detail, destinyDefinitionsDestinyItemSocketBlockDefinition.detail) &&
        Objects.equals(this.intrinsicSockets, destinyDefinitionsDestinyItemSocketBlockDefinition.intrinsicSockets) &&
        Objects.equals(this.socketCategories, destinyDefinitionsDestinyItemSocketBlockDefinition.socketCategories) &&
        Objects.equals(this.socketEntries, destinyDefinitionsDestinyItemSocketBlockDefinition.socketEntries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detail, intrinsicSockets, socketCategories, socketEntries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemSocketBlockDefinition {\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    intrinsicSockets: ").append(toIndentedString(intrinsicSockets)).append("\n");
    sb.append("    socketCategories: ").append(toIndentedString(socketCategories)).append("\n");
    sb.append("    socketEntries: ").append(toIndentedString(socketEntries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detail");
    openapiFields.add("intrinsicSockets");
    openapiFields.add("socketCategories");
    openapiFields.add("socketEntries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemSocketBlockDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemSocketBlockDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemSocketBlockDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemSocketBlockDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemSocketBlockDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemSocketBlockDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      if (jsonObj.get("intrinsicSockets") != null && !jsonObj.get("intrinsicSockets").isJsonNull()) {
        JsonArray jsonArrayintrinsicSockets = jsonObj.getAsJsonArray("intrinsicSockets");
        if (jsonArrayintrinsicSockets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("intrinsicSockets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `intrinsicSockets` to be an array in the JSON string but got `%s`", jsonObj.get("intrinsicSockets").toString()));
          }

          // validate the optional field `intrinsicSockets` (array)
          for (int i = 0; i < jsonArrayintrinsicSockets.size(); i++) {
            DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition.validateJsonElement(jsonArrayintrinsicSockets.get(i));
          };
        }
      }
      if (jsonObj.get("socketCategories") != null && !jsonObj.get("socketCategories").isJsonNull()) {
        JsonArray jsonArraysocketCategories = jsonObj.getAsJsonArray("socketCategories");
        if (jsonArraysocketCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("socketCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `socketCategories` to be an array in the JSON string but got `%s`", jsonObj.get("socketCategories").toString()));
          }

          // validate the optional field `socketCategories` (array)
          for (int i = 0; i < jsonArraysocketCategories.size(); i++) {
            DestinyDefinitionsDestinyItemSocketCategoryDefinition.validateJsonElement(jsonArraysocketCategories.get(i));
          };
        }
      }
      if (jsonObj.get("socketEntries") != null && !jsonObj.get("socketEntries").isJsonNull()) {
        JsonArray jsonArraysocketEntries = jsonObj.getAsJsonArray("socketEntries");
        if (jsonArraysocketEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("socketEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `socketEntries` to be an array in the JSON string but got `%s`", jsonObj.get("socketEntries").toString()));
          }

          // validate the optional field `socketEntries` (array)
          for (int i = 0; i < jsonArraysocketEntries.size(); i++) {
            DestinyDefinitionsDestinyItemSocketEntryDefinition.validateJsonElement(jsonArraysocketEntries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemSocketBlockDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemSocketBlockDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemSocketBlockDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemSocketBlockDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemSocketBlockDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemSocketBlockDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemSocketBlockDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemSocketBlockDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemSocketBlockDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemSocketBlockDefinition
   */
  public static DestinyDefinitionsDestinyItemSocketBlockDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemSocketBlockDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemSocketBlockDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

