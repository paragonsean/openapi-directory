/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If an item can have an action performed on it (like \&quot;Dismantle\&quot;), it will be defined here if you care.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemCraftingBlockDefinition {
  public static final String SERIALIZED_NAME_BASE_MATERIAL_REQUIREMENTS = "baseMaterialRequirements";
  @SerializedName(SERIALIZED_NAME_BASE_MATERIAL_REQUIREMENTS)
  private Integer baseMaterialRequirements;

  public static final String SERIALIZED_NAME_BONUS_PLUGS = "bonusPlugs";
  @SerializedName(SERIALIZED_NAME_BONUS_PLUGS)
  private List<DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition> bonusPlugs = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILED_REQUIREMENT_STRINGS = "failedRequirementStrings";
  @SerializedName(SERIALIZED_NAME_FAILED_REQUIREMENT_STRINGS)
  private List<String> failedRequirementStrings = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_ITEM_HASH = "outputItemHash";
  @SerializedName(SERIALIZED_NAME_OUTPUT_ITEM_HASH)
  private Integer outputItemHash;

  public static final String SERIALIZED_NAME_REQUIRED_SOCKET_TYPE_HASHES = "requiredSocketTypeHashes";
  @SerializedName(SERIALIZED_NAME_REQUIRED_SOCKET_TYPE_HASHES)
  private List<Integer> requiredSocketTypeHashes = new ArrayList<>();

  public DestinyDefinitionsDestinyItemCraftingBlockDefinition() {
  }

  public DestinyDefinitionsDestinyItemCraftingBlockDefinition baseMaterialRequirements(Integer baseMaterialRequirements) {
    this.baseMaterialRequirements = baseMaterialRequirements;
    return this;
  }

  /**
   * A reference to the base material requirements for crafting with this recipe.
   * @return baseMaterialRequirements
   */
  @javax.annotation.Nullable
  public Integer getBaseMaterialRequirements() {
    return baseMaterialRequirements;
  }

  public void setBaseMaterialRequirements(Integer baseMaterialRequirements) {
    this.baseMaterialRequirements = baseMaterialRequirements;
  }


  public DestinyDefinitionsDestinyItemCraftingBlockDefinition bonusPlugs(List<DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition> bonusPlugs) {
    this.bonusPlugs = bonusPlugs;
    return this;
  }

  public DestinyDefinitionsDestinyItemCraftingBlockDefinition addBonusPlugsItem(DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition bonusPlugsItem) {
    if (this.bonusPlugs == null) {
      this.bonusPlugs = new ArrayList<>();
    }
    this.bonusPlugs.add(bonusPlugsItem);
    return this;
  }

  /**
   * A list of &#39;bonus&#39; socket plugs that may be available if certain requirements are met.
   * @return bonusPlugs
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition> getBonusPlugs() {
    return bonusPlugs;
  }

  public void setBonusPlugs(List<DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition> bonusPlugs) {
    this.bonusPlugs = bonusPlugs;
  }


  public DestinyDefinitionsDestinyItemCraftingBlockDefinition failedRequirementStrings(List<String> failedRequirementStrings) {
    this.failedRequirementStrings = failedRequirementStrings;
    return this;
  }

  public DestinyDefinitionsDestinyItemCraftingBlockDefinition addFailedRequirementStringsItem(String failedRequirementStringsItem) {
    if (this.failedRequirementStrings == null) {
      this.failedRequirementStrings = new ArrayList<>();
    }
    this.failedRequirementStrings.add(failedRequirementStringsItem);
    return this;
  }

  /**
   * Get failedRequirementStrings
   * @return failedRequirementStrings
   */
  @javax.annotation.Nullable
  public List<String> getFailedRequirementStrings() {
    return failedRequirementStrings;
  }

  public void setFailedRequirementStrings(List<String> failedRequirementStrings) {
    this.failedRequirementStrings = failedRequirementStrings;
  }


  public DestinyDefinitionsDestinyItemCraftingBlockDefinition outputItemHash(Integer outputItemHash) {
    this.outputItemHash = outputItemHash;
    return this;
  }

  /**
   * A reference to the item definition that is created when crafting with this &#39;recipe&#39; item.
   * @return outputItemHash
   */
  @javax.annotation.Nullable
  public Integer getOutputItemHash() {
    return outputItemHash;
  }

  public void setOutputItemHash(Integer outputItemHash) {
    this.outputItemHash = outputItemHash;
  }


  public DestinyDefinitionsDestinyItemCraftingBlockDefinition requiredSocketTypeHashes(List<Integer> requiredSocketTypeHashes) {
    this.requiredSocketTypeHashes = requiredSocketTypeHashes;
    return this;
  }

  public DestinyDefinitionsDestinyItemCraftingBlockDefinition addRequiredSocketTypeHashesItem(Integer requiredSocketTypeHashesItem) {
    if (this.requiredSocketTypeHashes == null) {
      this.requiredSocketTypeHashes = new ArrayList<>();
    }
    this.requiredSocketTypeHashes.add(requiredSocketTypeHashesItem);
    return this;
  }

  /**
   * A list of socket type hashes that describes which sockets are required for crafting with this recipe.
   * @return requiredSocketTypeHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getRequiredSocketTypeHashes() {
    return requiredSocketTypeHashes;
  }

  public void setRequiredSocketTypeHashes(List<Integer> requiredSocketTypeHashes) {
    this.requiredSocketTypeHashes = requiredSocketTypeHashes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemCraftingBlockDefinition destinyDefinitionsDestinyItemCraftingBlockDefinition = (DestinyDefinitionsDestinyItemCraftingBlockDefinition) o;
    return Objects.equals(this.baseMaterialRequirements, destinyDefinitionsDestinyItemCraftingBlockDefinition.baseMaterialRequirements) &&
        Objects.equals(this.bonusPlugs, destinyDefinitionsDestinyItemCraftingBlockDefinition.bonusPlugs) &&
        Objects.equals(this.failedRequirementStrings, destinyDefinitionsDestinyItemCraftingBlockDefinition.failedRequirementStrings) &&
        Objects.equals(this.outputItemHash, destinyDefinitionsDestinyItemCraftingBlockDefinition.outputItemHash) &&
        Objects.equals(this.requiredSocketTypeHashes, destinyDefinitionsDestinyItemCraftingBlockDefinition.requiredSocketTypeHashes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseMaterialRequirements, bonusPlugs, failedRequirementStrings, outputItemHash, requiredSocketTypeHashes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemCraftingBlockDefinition {\n");
    sb.append("    baseMaterialRequirements: ").append(toIndentedString(baseMaterialRequirements)).append("\n");
    sb.append("    bonusPlugs: ").append(toIndentedString(bonusPlugs)).append("\n");
    sb.append("    failedRequirementStrings: ").append(toIndentedString(failedRequirementStrings)).append("\n");
    sb.append("    outputItemHash: ").append(toIndentedString(outputItemHash)).append("\n");
    sb.append("    requiredSocketTypeHashes: ").append(toIndentedString(requiredSocketTypeHashes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseMaterialRequirements");
    openapiFields.add("bonusPlugs");
    openapiFields.add("failedRequirementStrings");
    openapiFields.add("outputItemHash");
    openapiFields.add("requiredSocketTypeHashes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemCraftingBlockDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemCraftingBlockDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemCraftingBlockDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemCraftingBlockDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemCraftingBlockDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemCraftingBlockDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bonusPlugs") != null && !jsonObj.get("bonusPlugs").isJsonNull()) {
        JsonArray jsonArraybonusPlugs = jsonObj.getAsJsonArray("bonusPlugs");
        if (jsonArraybonusPlugs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bonusPlugs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bonusPlugs` to be an array in the JSON string but got `%s`", jsonObj.get("bonusPlugs").toString()));
          }

          // validate the optional field `bonusPlugs` (array)
          for (int i = 0; i < jsonArraybonusPlugs.size(); i++) {
            DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition.validateJsonElement(jsonArraybonusPlugs.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("failedRequirementStrings") != null && !jsonObj.get("failedRequirementStrings").isJsonNull() && !jsonObj.get("failedRequirementStrings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failedRequirementStrings` to be an array in the JSON string but got `%s`", jsonObj.get("failedRequirementStrings").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requiredSocketTypeHashes") != null && !jsonObj.get("requiredSocketTypeHashes").isJsonNull() && !jsonObj.get("requiredSocketTypeHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredSocketTypeHashes` to be an array in the JSON string but got `%s`", jsonObj.get("requiredSocketTypeHashes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemCraftingBlockDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemCraftingBlockDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemCraftingBlockDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemCraftingBlockDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemCraftingBlockDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemCraftingBlockDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemCraftingBlockDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemCraftingBlockDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemCraftingBlockDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemCraftingBlockDefinition
   */
  public static DestinyDefinitionsDestinyItemCraftingBlockDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemCraftingBlockDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemCraftingBlockDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

