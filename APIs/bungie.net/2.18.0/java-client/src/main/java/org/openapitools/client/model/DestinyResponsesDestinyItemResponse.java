/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SingleComponentResponseOfDestinyItemComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyItemInstanceComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyItemObjectivesComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyItemPerksComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyItemPlugObjectivesComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyItemRenderComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyItemReusablePlugsComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyItemSocketsComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyItemStatsComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyItemTalentGridComponent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn&#39;t have an \&quot;itemInstanceId\&quot;: for those, get your information from the DestinyInventoryDefinition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyResponsesDestinyItemResponse {
  public static final String SERIALIZED_NAME_CHARACTER_ID = "characterId";
  @SerializedName(SERIALIZED_NAME_CHARACTER_ID)
  private Long characterId;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private SingleComponentResponseOfDestinyItemInstanceComponent instance;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private SingleComponentResponseOfDestinyItemComponent item;

  public static final String SERIALIZED_NAME_OBJECTIVES = "objectives";
  @SerializedName(SERIALIZED_NAME_OBJECTIVES)
  private SingleComponentResponseOfDestinyItemObjectivesComponent objectives;

  public static final String SERIALIZED_NAME_PERKS = "perks";
  @SerializedName(SERIALIZED_NAME_PERKS)
  private SingleComponentResponseOfDestinyItemPerksComponent perks;

  public static final String SERIALIZED_NAME_PLUG_OBJECTIVES = "plugObjectives";
  @SerializedName(SERIALIZED_NAME_PLUG_OBJECTIVES)
  private SingleComponentResponseOfDestinyItemPlugObjectivesComponent plugObjectives;

  public static final String SERIALIZED_NAME_RENDER_DATA = "renderData";
  @SerializedName(SERIALIZED_NAME_RENDER_DATA)
  private SingleComponentResponseOfDestinyItemRenderComponent renderData;

  public static final String SERIALIZED_NAME_REUSABLE_PLUGS = "reusablePlugs";
  @SerializedName(SERIALIZED_NAME_REUSABLE_PLUGS)
  private SingleComponentResponseOfDestinyItemReusablePlugsComponent reusablePlugs;

  public static final String SERIALIZED_NAME_SOCKETS = "sockets";
  @SerializedName(SERIALIZED_NAME_SOCKETS)
  private SingleComponentResponseOfDestinyItemSocketsComponent sockets;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private SingleComponentResponseOfDestinyItemStatsComponent stats;

  public static final String SERIALIZED_NAME_TALENT_GRID = "talentGrid";
  @SerializedName(SERIALIZED_NAME_TALENT_GRID)
  private SingleComponentResponseOfDestinyItemTalentGridComponent talentGrid;

  public DestinyResponsesDestinyItemResponse() {
  }

  public DestinyResponsesDestinyItemResponse characterId(Long characterId) {
    this.characterId = characterId;
    return this;
  }

  /**
   * If the item is on a character, this will return the ID of the character that is holding the item.
   * @return characterId
   */
  @javax.annotation.Nullable
  public Long getCharacterId() {
    return characterId;
  }

  public void setCharacterId(Long characterId) {
    this.characterId = characterId;
  }


  public DestinyResponsesDestinyItemResponse instance(SingleComponentResponseOfDestinyItemInstanceComponent instance) {
    this.instance = instance;
    return this;
  }

  /**
   * Basic instance data for the item.  COMPONENT TYPE: ItemInstances
   * @return instance
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyItemInstanceComponent getInstance() {
    return instance;
  }

  public void setInstance(SingleComponentResponseOfDestinyItemInstanceComponent instance) {
    this.instance = instance;
  }


  public DestinyResponsesDestinyItemResponse item(SingleComponentResponseOfDestinyItemComponent item) {
    this.item = item;
    return this;
  }

  /**
   * Common data for the item relevant to its non-instanced properties.  COMPONENT TYPE: ItemCommonData
   * @return item
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyItemComponent getItem() {
    return item;
  }

  public void setItem(SingleComponentResponseOfDestinyItemComponent item) {
    this.item = item;
  }


  public DestinyResponsesDestinyItemResponse objectives(SingleComponentResponseOfDestinyItemObjectivesComponent objectives) {
    this.objectives = objectives;
    return this;
  }

  /**
   * Information specifically about the item&#39;s objectives.  COMPONENT TYPE: ItemObjectives
   * @return objectives
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyItemObjectivesComponent getObjectives() {
    return objectives;
  }

  public void setObjectives(SingleComponentResponseOfDestinyItemObjectivesComponent objectives) {
    this.objectives = objectives;
  }


  public DestinyResponsesDestinyItemResponse perks(SingleComponentResponseOfDestinyItemPerksComponent perks) {
    this.perks = perks;
    return this;
  }

  /**
   * Information specifically about the perks currently active on the item.  COMPONENT TYPE: ItemPerks
   * @return perks
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyItemPerksComponent getPerks() {
    return perks;
  }

  public void setPerks(SingleComponentResponseOfDestinyItemPerksComponent perks) {
    this.perks = perks;
  }


  public DestinyResponsesDestinyItemResponse plugObjectives(SingleComponentResponseOfDestinyItemPlugObjectivesComponent plugObjectives) {
    this.plugObjectives = plugObjectives;
    return this;
  }

  /**
   * Information about objectives on Plugs for a given item. See the component&#39;s documentation for more info.  COMPONENT TYPE: ItemPlugObjectives
   * @return plugObjectives
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyItemPlugObjectivesComponent getPlugObjectives() {
    return plugObjectives;
  }

  public void setPlugObjectives(SingleComponentResponseOfDestinyItemPlugObjectivesComponent plugObjectives) {
    this.plugObjectives = plugObjectives;
  }


  public DestinyResponsesDestinyItemResponse renderData(SingleComponentResponseOfDestinyItemRenderComponent renderData) {
    this.renderData = renderData;
    return this;
  }

  /**
   * Information about how to render the item in 3D.  COMPONENT TYPE: ItemRenderData
   * @return renderData
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyItemRenderComponent getRenderData() {
    return renderData;
  }

  public void setRenderData(SingleComponentResponseOfDestinyItemRenderComponent renderData) {
    this.renderData = renderData;
  }


  public DestinyResponsesDestinyItemResponse reusablePlugs(SingleComponentResponseOfDestinyItemReusablePlugsComponent reusablePlugs) {
    this.reusablePlugs = reusablePlugs;
    return this;
  }

  /**
   * Information about the Reusable Plugs for sockets on an item. These are plugs that you can insert into the given socket regardless of if you actually own an instance of that plug: they are logic-driven plugs rather than inventory-driven.   These may need to be combined with Plug Set component data to get a full picture of available plugs on a given socket.   COMPONENT TYPE: ItemReusablePlugs
   * @return reusablePlugs
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyItemReusablePlugsComponent getReusablePlugs() {
    return reusablePlugs;
  }

  public void setReusablePlugs(SingleComponentResponseOfDestinyItemReusablePlugsComponent reusablePlugs) {
    this.reusablePlugs = reusablePlugs;
  }


  public DestinyResponsesDestinyItemResponse sockets(SingleComponentResponseOfDestinyItemSocketsComponent sockets) {
    this.sockets = sockets;
    return this;
  }

  /**
   * Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.  COMPONENT TYPE: ItemSockets
   * @return sockets
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyItemSocketsComponent getSockets() {
    return sockets;
  }

  public void setSockets(SingleComponentResponseOfDestinyItemSocketsComponent sockets) {
    this.sockets = sockets;
  }


  public DestinyResponsesDestinyItemResponse stats(SingleComponentResponseOfDestinyItemStatsComponent stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Information about the computed stats of the item: power, defense, etc...  COMPONENT TYPE: ItemStats
   * @return stats
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyItemStatsComponent getStats() {
    return stats;
  }

  public void setStats(SingleComponentResponseOfDestinyItemStatsComponent stats) {
    this.stats = stats;
  }


  public DestinyResponsesDestinyItemResponse talentGrid(SingleComponentResponseOfDestinyItemTalentGridComponent talentGrid) {
    this.talentGrid = talentGrid;
    return this;
  }

  /**
   * Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character&#39;s \&quot;Builds\&quot;.  COMPONENT TYPE: ItemTalentGrids
   * @return talentGrid
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyItemTalentGridComponent getTalentGrid() {
    return talentGrid;
  }

  public void setTalentGrid(SingleComponentResponseOfDestinyItemTalentGridComponent talentGrid) {
    this.talentGrid = talentGrid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyResponsesDestinyItemResponse destinyResponsesDestinyItemResponse = (DestinyResponsesDestinyItemResponse) o;
    return Objects.equals(this.characterId, destinyResponsesDestinyItemResponse.characterId) &&
        Objects.equals(this.instance, destinyResponsesDestinyItemResponse.instance) &&
        Objects.equals(this.item, destinyResponsesDestinyItemResponse.item) &&
        Objects.equals(this.objectives, destinyResponsesDestinyItemResponse.objectives) &&
        Objects.equals(this.perks, destinyResponsesDestinyItemResponse.perks) &&
        Objects.equals(this.plugObjectives, destinyResponsesDestinyItemResponse.plugObjectives) &&
        Objects.equals(this.renderData, destinyResponsesDestinyItemResponse.renderData) &&
        Objects.equals(this.reusablePlugs, destinyResponsesDestinyItemResponse.reusablePlugs) &&
        Objects.equals(this.sockets, destinyResponsesDestinyItemResponse.sockets) &&
        Objects.equals(this.stats, destinyResponsesDestinyItemResponse.stats) &&
        Objects.equals(this.talentGrid, destinyResponsesDestinyItemResponse.talentGrid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterId, instance, item, objectives, perks, plugObjectives, renderData, reusablePlugs, sockets, stats, talentGrid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyResponsesDestinyItemResponse {\n");
    sb.append("    characterId: ").append(toIndentedString(characterId)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    objectives: ").append(toIndentedString(objectives)).append("\n");
    sb.append("    perks: ").append(toIndentedString(perks)).append("\n");
    sb.append("    plugObjectives: ").append(toIndentedString(plugObjectives)).append("\n");
    sb.append("    renderData: ").append(toIndentedString(renderData)).append("\n");
    sb.append("    reusablePlugs: ").append(toIndentedString(reusablePlugs)).append("\n");
    sb.append("    sockets: ").append(toIndentedString(sockets)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    talentGrid: ").append(toIndentedString(talentGrid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("characterId");
    openapiFields.add("instance");
    openapiFields.add("item");
    openapiFields.add("objectives");
    openapiFields.add("perks");
    openapiFields.add("plugObjectives");
    openapiFields.add("renderData");
    openapiFields.add("reusablePlugs");
    openapiFields.add("sockets");
    openapiFields.add("stats");
    openapiFields.add("talentGrid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyResponsesDestinyItemResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyResponsesDestinyItemResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyResponsesDestinyItemResponse is not found in the empty JSON string", DestinyResponsesDestinyItemResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyResponsesDestinyItemResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyResponsesDestinyItemResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `instance`
      if (jsonObj.get("instance") != null && !jsonObj.get("instance").isJsonNull()) {
        SingleComponentResponseOfDestinyItemInstanceComponent.validateJsonElement(jsonObj.get("instance"));
      }
      // validate the optional field `item`
      if (jsonObj.get("item") != null && !jsonObj.get("item").isJsonNull()) {
        SingleComponentResponseOfDestinyItemComponent.validateJsonElement(jsonObj.get("item"));
      }
      // validate the optional field `objectives`
      if (jsonObj.get("objectives") != null && !jsonObj.get("objectives").isJsonNull()) {
        SingleComponentResponseOfDestinyItemObjectivesComponent.validateJsonElement(jsonObj.get("objectives"));
      }
      // validate the optional field `perks`
      if (jsonObj.get("perks") != null && !jsonObj.get("perks").isJsonNull()) {
        SingleComponentResponseOfDestinyItemPerksComponent.validateJsonElement(jsonObj.get("perks"));
      }
      // validate the optional field `plugObjectives`
      if (jsonObj.get("plugObjectives") != null && !jsonObj.get("plugObjectives").isJsonNull()) {
        SingleComponentResponseOfDestinyItemPlugObjectivesComponent.validateJsonElement(jsonObj.get("plugObjectives"));
      }
      // validate the optional field `renderData`
      if (jsonObj.get("renderData") != null && !jsonObj.get("renderData").isJsonNull()) {
        SingleComponentResponseOfDestinyItemRenderComponent.validateJsonElement(jsonObj.get("renderData"));
      }
      // validate the optional field `reusablePlugs`
      if (jsonObj.get("reusablePlugs") != null && !jsonObj.get("reusablePlugs").isJsonNull()) {
        SingleComponentResponseOfDestinyItemReusablePlugsComponent.validateJsonElement(jsonObj.get("reusablePlugs"));
      }
      // validate the optional field `sockets`
      if (jsonObj.get("sockets") != null && !jsonObj.get("sockets").isJsonNull()) {
        SingleComponentResponseOfDestinyItemSocketsComponent.validateJsonElement(jsonObj.get("sockets"));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        SingleComponentResponseOfDestinyItemStatsComponent.validateJsonElement(jsonObj.get("stats"));
      }
      // validate the optional field `talentGrid`
      if (jsonObj.get("talentGrid") != null && !jsonObj.get("talentGrid").isJsonNull()) {
        SingleComponentResponseOfDestinyItemTalentGridComponent.validateJsonElement(jsonObj.get("talentGrid"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyResponsesDestinyItemResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyResponsesDestinyItemResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyResponsesDestinyItemResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyResponsesDestinyItemResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyResponsesDestinyItemResponse>() {
           @Override
           public void write(JsonWriter out, DestinyResponsesDestinyItemResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyResponsesDestinyItemResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyResponsesDestinyItemResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyResponsesDestinyItemResponse
   * @throws IOException if the JSON string is invalid with respect to DestinyResponsesDestinyItemResponse
   */
  public static DestinyResponsesDestinyItemResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyResponsesDestinyItemResponse.class);
  }

  /**
   * Convert an instance of DestinyResponsesDestinyItemResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

