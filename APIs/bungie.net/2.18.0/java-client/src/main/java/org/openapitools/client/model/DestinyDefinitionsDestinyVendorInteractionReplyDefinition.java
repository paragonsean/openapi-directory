/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * When the interaction is replied to, Reward sites will fire and items potentially selected based on whether the given unlock expression is TRUE.  You can potentially choose one from multiple replies when replying to an interaction: this is how you get either/or rewards from vendors.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyVendorInteractionReplyDefinition {
  public static final String SERIALIZED_NAME_ITEM_REWARDS_SELECTION = "itemRewardsSelection";
  @SerializedName(SERIALIZED_NAME_ITEM_REWARDS_SELECTION)
  private Integer itemRewardsSelection;

  public static final String SERIALIZED_NAME_REPLY = "reply";
  @SerializedName(SERIALIZED_NAME_REPLY)
  private String reply;

  public static final String SERIALIZED_NAME_REPLY_TYPE = "replyType";
  @SerializedName(SERIALIZED_NAME_REPLY_TYPE)
  private Integer replyType;

  public DestinyDefinitionsDestinyVendorInteractionReplyDefinition() {
  }

  public DestinyDefinitionsDestinyVendorInteractionReplyDefinition itemRewardsSelection(Integer itemRewardsSelection) {
    this.itemRewardsSelection = itemRewardsSelection;
    return this;
  }

  /**
   * The rewards granted upon responding to the vendor.
   * @return itemRewardsSelection
   */
  @javax.annotation.Nullable
  public Integer getItemRewardsSelection() {
    return itemRewardsSelection;
  }

  public void setItemRewardsSelection(Integer itemRewardsSelection) {
    this.itemRewardsSelection = itemRewardsSelection;
  }


  public DestinyDefinitionsDestinyVendorInteractionReplyDefinition reply(String reply) {
    this.reply = reply;
    return this;
  }

  /**
   * The localized text for the reply.
   * @return reply
   */
  @javax.annotation.Nullable
  public String getReply() {
    return reply;
  }

  public void setReply(String reply) {
    this.reply = reply;
  }


  public DestinyDefinitionsDestinyVendorInteractionReplyDefinition replyType(Integer replyType) {
    this.replyType = replyType;
    return this;
  }

  /**
   * An enum indicating the type of reply being made.
   * @return replyType
   */
  @javax.annotation.Nullable
  public Integer getReplyType() {
    return replyType;
  }

  public void setReplyType(Integer replyType) {
    this.replyType = replyType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyVendorInteractionReplyDefinition destinyDefinitionsDestinyVendorInteractionReplyDefinition = (DestinyDefinitionsDestinyVendorInteractionReplyDefinition) o;
    return Objects.equals(this.itemRewardsSelection, destinyDefinitionsDestinyVendorInteractionReplyDefinition.itemRewardsSelection) &&
        Objects.equals(this.reply, destinyDefinitionsDestinyVendorInteractionReplyDefinition.reply) &&
        Objects.equals(this.replyType, destinyDefinitionsDestinyVendorInteractionReplyDefinition.replyType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemRewardsSelection, reply, replyType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyVendorInteractionReplyDefinition {\n");
    sb.append("    itemRewardsSelection: ").append(toIndentedString(itemRewardsSelection)).append("\n");
    sb.append("    reply: ").append(toIndentedString(reply)).append("\n");
    sb.append("    replyType: ").append(toIndentedString(replyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemRewardsSelection");
    openapiFields.add("reply");
    openapiFields.add("replyType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyVendorInteractionReplyDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyVendorInteractionReplyDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyVendorInteractionReplyDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyVendorInteractionReplyDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyVendorInteractionReplyDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyVendorInteractionReplyDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("reply") != null && !jsonObj.get("reply").isJsonNull()) && !jsonObj.get("reply").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reply` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reply").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyVendorInteractionReplyDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyVendorInteractionReplyDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyVendorInteractionReplyDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyVendorInteractionReplyDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyVendorInteractionReplyDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyVendorInteractionReplyDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyVendorInteractionReplyDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyVendorInteractionReplyDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyVendorInteractionReplyDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyVendorInteractionReplyDefinition
   */
  public static DestinyDefinitionsDestinyVendorInteractionReplyDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyVendorInteractionReplyDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyVendorInteractionReplyDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

