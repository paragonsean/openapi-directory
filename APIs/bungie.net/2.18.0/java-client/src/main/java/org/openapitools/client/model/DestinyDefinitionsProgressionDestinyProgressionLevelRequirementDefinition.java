/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InterpolationInterpolationPointFloat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * These are pre-constructed collections of data that can be used to determine the Level Requirement for an item given a Progression to be tested (such as the Character&#39;s level).  For instance, say a character receives a new Auto Rifle, and that Auto Rifle&#39;s DestinyInventoryItemDefinition.quality.progressionLevelRequirementHash property is pointing at one of these DestinyProgressionLevelRequirementDefinitions. Let&#39;s pretend also that the progressionHash it is pointing at is the Character Level progression. In that situation, the character&#39;s level will be used to interpolate a value in the requirementCurve property. The value picked up from that interpolation will be the required level for the item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition {
  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_PROGRESSION_HASH = "progressionHash";
  @SerializedName(SERIALIZED_NAME_PROGRESSION_HASH)
  private Integer progressionHash;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_REQUIREMENT_CURVE = "requirementCurve";
  @SerializedName(SERIALIZED_NAME_REQUIREMENT_CURVE)
  private List<InterpolationInterpolationPointFloat> requirementCurve = new ArrayList<>();

  public DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition() {
  }

  public DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition progressionHash(Integer progressionHash) {
    this.progressionHash = progressionHash;
    return this;
  }

  /**
   * The progression whose level should be used to determine the level requirement.  Look up the DestinyProgressionDefinition with this hash for more information about the progression in question.
   * @return progressionHash
   */
  @javax.annotation.Nullable
  public Integer getProgressionHash() {
    return progressionHash;
  }

  public void setProgressionHash(Integer progressionHash) {
    this.progressionHash = progressionHash;
  }


  public DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition requirementCurve(List<InterpolationInterpolationPointFloat> requirementCurve) {
    this.requirementCurve = requirementCurve;
    return this;
  }

  public DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition addRequirementCurveItem(InterpolationInterpolationPointFloat requirementCurveItem) {
    if (this.requirementCurve == null) {
      this.requirementCurve = new ArrayList<>();
    }
    this.requirementCurve.add(requirementCurveItem);
    return this;
  }

  /**
   * A curve of level requirements, weighted by the related progressions&#39; level.  Interpolate against this curve with the character&#39;s progression level to determine what the level requirement of the generated item that is using this data will be.
   * @return requirementCurve
   */
  @javax.annotation.Nullable
  public List<InterpolationInterpolationPointFloat> getRequirementCurve() {
    return requirementCurve;
  }

  public void setRequirementCurve(List<InterpolationInterpolationPointFloat> requirementCurve) {
    this.requirementCurve = requirementCurve;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition destinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition = (DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition) o;
    return Objects.equals(this.hash, destinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition.index) &&
        Objects.equals(this.progressionHash, destinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition.progressionHash) &&
        Objects.equals(this.redacted, destinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition.redacted) &&
        Objects.equals(this.requirementCurve, destinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition.requirementCurve);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hash, index, progressionHash, redacted, requirementCurve);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition {\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    progressionHash: ").append(toIndentedString(progressionHash)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    requirementCurve: ").append(toIndentedString(requirementCurve)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("progressionHash");
    openapiFields.add("redacted");
    openapiFields.add("requirementCurve");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition is not found in the empty JSON string", DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("requirementCurve") != null && !jsonObj.get("requirementCurve").isJsonNull()) {
        JsonArray jsonArrayrequirementCurve = jsonObj.getAsJsonArray("requirementCurve");
        if (jsonArrayrequirementCurve != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requirementCurve").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requirementCurve` to be an array in the JSON string but got `%s`", jsonObj.get("requirementCurve").toString()));
          }

          // validate the optional field `requirementCurve` (array)
          for (int i = 0; i < jsonArrayrequirementCurve.size(); i++) {
            InterpolationInterpolationPointFloat.validateJsonElement(jsonArrayrequirementCurve.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition
   */
  public static DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

