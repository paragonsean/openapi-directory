/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyMilestonesDestinyMilestoneContentItemCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents localized, extended content related to Milestones. This is intentionally returned by a separate endpoint and not with Character-level Milestone data because we do not put localized data into standard Destiny responses, both for brevity of response and for caching purposes. If you really need this data, hit the Milestone Content endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyMilestonesDestinyMilestoneContent {
  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private String about;

  public static final String SERIALIZED_NAME_ITEM_CATEGORIES = "itemCategories";
  @SerializedName(SERIALIZED_NAME_ITEM_CATEGORIES)
  private List<DestinyMilestonesDestinyMilestoneContentItemCategory> itemCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIPS = "tips";
  @SerializedName(SERIALIZED_NAME_TIPS)
  private List<String> tips = new ArrayList<>();

  public DestinyMilestonesDestinyMilestoneContent() {
  }

  public DestinyMilestonesDestinyMilestoneContent about(String about) {
    this.about = about;
    return this;
  }

  /**
   * The \&quot;About this Milestone\&quot; text from the Firehose.
   * @return about
   */
  @javax.annotation.Nullable
  public String getAbout() {
    return about;
  }

  public void setAbout(String about) {
    this.about = about;
  }


  public DestinyMilestonesDestinyMilestoneContent itemCategories(List<DestinyMilestonesDestinyMilestoneContentItemCategory> itemCategories) {
    this.itemCategories = itemCategories;
    return this;
  }

  public DestinyMilestonesDestinyMilestoneContent addItemCategoriesItem(DestinyMilestonesDestinyMilestoneContentItemCategory itemCategoriesItem) {
    if (this.itemCategories == null) {
      this.itemCategories = new ArrayList<>();
    }
    this.itemCategories.add(itemCategoriesItem);
    return this;
  }

  /**
   * If DPS has defined items related to this Milestone, they can categorize those items in the Firehose. That data will then be returned as item categories here.
   * @return itemCategories
   */
  @javax.annotation.Nullable
  public List<DestinyMilestonesDestinyMilestoneContentItemCategory> getItemCategories() {
    return itemCategories;
  }

  public void setItemCategories(List<DestinyMilestonesDestinyMilestoneContentItemCategory> itemCategories) {
    this.itemCategories = itemCategories;
  }


  public DestinyMilestonesDestinyMilestoneContent status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The Current Status of the Milestone, as driven by the Firehose.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DestinyMilestonesDestinyMilestoneContent tips(List<String> tips) {
    this.tips = tips;
    return this;
  }

  public DestinyMilestonesDestinyMilestoneContent addTipsItem(String tipsItem) {
    if (this.tips == null) {
      this.tips = new ArrayList<>();
    }
    this.tips.add(tipsItem);
    return this;
  }

  /**
   * A list of tips, provided by the Firehose.
   * @return tips
   */
  @javax.annotation.Nullable
  public List<String> getTips() {
    return tips;
  }

  public void setTips(List<String> tips) {
    this.tips = tips;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyMilestonesDestinyMilestoneContent destinyMilestonesDestinyMilestoneContent = (DestinyMilestonesDestinyMilestoneContent) o;
    return Objects.equals(this.about, destinyMilestonesDestinyMilestoneContent.about) &&
        Objects.equals(this.itemCategories, destinyMilestonesDestinyMilestoneContent.itemCategories) &&
        Objects.equals(this.status, destinyMilestonesDestinyMilestoneContent.status) &&
        Objects.equals(this.tips, destinyMilestonesDestinyMilestoneContent.tips);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, itemCategories, status, tips);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyMilestonesDestinyMilestoneContent {\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    itemCategories: ").append(toIndentedString(itemCategories)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tips: ").append(toIndentedString(tips)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("about");
    openapiFields.add("itemCategories");
    openapiFields.add("status");
    openapiFields.add("tips");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyMilestonesDestinyMilestoneContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyMilestonesDestinyMilestoneContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyMilestonesDestinyMilestoneContent is not found in the empty JSON string", DestinyMilestonesDestinyMilestoneContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyMilestonesDestinyMilestoneContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyMilestonesDestinyMilestoneContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) && !jsonObj.get("about").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `about` to be a primitive type in the JSON string but got `%s`", jsonObj.get("about").toString()));
      }
      if (jsonObj.get("itemCategories") != null && !jsonObj.get("itemCategories").isJsonNull()) {
        JsonArray jsonArrayitemCategories = jsonObj.getAsJsonArray("itemCategories");
        if (jsonArrayitemCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("itemCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `itemCategories` to be an array in the JSON string but got `%s`", jsonObj.get("itemCategories").toString()));
          }

          // validate the optional field `itemCategories` (array)
          for (int i = 0; i < jsonArrayitemCategories.size(); i++) {
            DestinyMilestonesDestinyMilestoneContentItemCategory.validateJsonElement(jsonArrayitemCategories.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tips") != null && !jsonObj.get("tips").isJsonNull() && !jsonObj.get("tips").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tips` to be an array in the JSON string but got `%s`", jsonObj.get("tips").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyMilestonesDestinyMilestoneContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyMilestonesDestinyMilestoneContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyMilestonesDestinyMilestoneContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyMilestonesDestinyMilestoneContent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyMilestonesDestinyMilestoneContent>() {
           @Override
           public void write(JsonWriter out, DestinyMilestonesDestinyMilestoneContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyMilestonesDestinyMilestoneContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyMilestonesDestinyMilestoneContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyMilestonesDestinyMilestoneContent
   * @throws IOException if the JSON string is invalid with respect to DestinyMilestonesDestinyMilestoneContent
   */
  public static DestinyMilestonesDestinyMilestoneContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyMilestonesDestinyMilestoneContent.class);
  }

  /**
   * Convert an instance of DestinyMilestonesDestinyMilestoneContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

