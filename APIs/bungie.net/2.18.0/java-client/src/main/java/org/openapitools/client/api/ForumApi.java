/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CommunityContentGetCommunityContent200Response;
import org.openapitools.client.model.ForumGetForumTagSuggestions200Response;
import org.openapitools.client.model.ForumGetRecruitmentThreadSummaries200Response;
import org.openapitools.client.model.ForumGetTopicForContent200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ForumApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ForumApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ForumApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for forumGetCoreTopicsPaged
     * @param categoryFilter The category filter. (required)
     * @param page Zero base page (required)
     * @param quickDate The date filter. (required)
     * @param sort The sort mode. (required)
     * @param locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetCoreTopicsPagedCall(Integer categoryFilter, Integer page, Integer quickDate, Integer sort, String locales, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/"
            .replace("{" + "categoryFilter" + "}", localVarApiClient.escapeString(categoryFilter.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()))
            .replace("{" + "quickDate" + "}", localVarApiClient.escapeString(quickDate.toString()))
            .replace("{" + "sort" + "}", localVarApiClient.escapeString(sort.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locales != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locales", locales));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forumGetCoreTopicsPagedValidateBeforeCall(Integer categoryFilter, Integer page, Integer quickDate, Integer sort, String locales, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryFilter' is set
        if (categoryFilter == null) {
            throw new ApiException("Missing the required parameter 'categoryFilter' when calling forumGetCoreTopicsPaged(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling forumGetCoreTopicsPaged(Async)");
        }

        // verify the required parameter 'quickDate' is set
        if (quickDate == null) {
            throw new ApiException("Missing the required parameter 'quickDate' when calling forumGetCoreTopicsPaged(Async)");
        }

        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling forumGetCoreTopicsPaged(Async)");
        }

        return forumGetCoreTopicsPagedCall(categoryFilter, page, quickDate, sort, locales, _callback);

    }

    /**
     * 
     * Gets a listing of all topics marked as part of the core group.
     * @param categoryFilter The category filter. (required)
     * @param page Zero base page (required)
     * @param quickDate The date filter. (required)
     * @param sort The sort mode. (required)
     * @param locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @return CommunityContentGetCommunityContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public CommunityContentGetCommunityContent200Response forumGetCoreTopicsPaged(Integer categoryFilter, Integer page, Integer quickDate, Integer sort, String locales) throws ApiException {
        ApiResponse<CommunityContentGetCommunityContent200Response> localVarResp = forumGetCoreTopicsPagedWithHttpInfo(categoryFilter, page, quickDate, sort, locales);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a listing of all topics marked as part of the core group.
     * @param categoryFilter The category filter. (required)
     * @param page Zero base page (required)
     * @param quickDate The date filter. (required)
     * @param sort The sort mode. (required)
     * @param locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @return ApiResponse&lt;CommunityContentGetCommunityContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunityContentGetCommunityContent200Response> forumGetCoreTopicsPagedWithHttpInfo(Integer categoryFilter, Integer page, Integer quickDate, Integer sort, String locales) throws ApiException {
        okhttp3.Call localVarCall = forumGetCoreTopicsPagedValidateBeforeCall(categoryFilter, page, quickDate, sort, locales, null);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a listing of all topics marked as part of the core group.
     * @param categoryFilter The category filter. (required)
     * @param page Zero base page (required)
     * @param quickDate The date filter. (required)
     * @param sort The sort mode. (required)
     * @param locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetCoreTopicsPagedAsync(Integer categoryFilter, Integer page, Integer quickDate, Integer sort, String locales, final ApiCallback<CommunityContentGetCommunityContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = forumGetCoreTopicsPagedValidateBeforeCall(categoryFilter, page, quickDate, sort, locales, _callback);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forumGetForumTagSuggestions
     * @param partialtag The partial tag input to generate suggestions from. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetForumTagSuggestionsCall(String partialtag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Forum/GetForumTagSuggestions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (partialtag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partialtag", partialtag));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forumGetForumTagSuggestionsValidateBeforeCall(String partialtag, final ApiCallback _callback) throws ApiException {
        return forumGetForumTagSuggestionsCall(partialtag, _callback);

    }

    /**
     * 
     * Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
     * @param partialtag The partial tag input to generate suggestions from. (optional)
     * @return ForumGetForumTagSuggestions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ForumGetForumTagSuggestions200Response forumGetForumTagSuggestions(String partialtag) throws ApiException {
        ApiResponse<ForumGetForumTagSuggestions200Response> localVarResp = forumGetForumTagSuggestionsWithHttpInfo(partialtag);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
     * @param partialtag The partial tag input to generate suggestions from. (optional)
     * @return ApiResponse&lt;ForumGetForumTagSuggestions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ForumGetForumTagSuggestions200Response> forumGetForumTagSuggestionsWithHttpInfo(String partialtag) throws ApiException {
        okhttp3.Call localVarCall = forumGetForumTagSuggestionsValidateBeforeCall(partialtag, null);
        Type localVarReturnType = new TypeToken<ForumGetForumTagSuggestions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
     * @param partialtag The partial tag input to generate suggestions from. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetForumTagSuggestionsAsync(String partialtag, final ApiCallback<ForumGetForumTagSuggestions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = forumGetForumTagSuggestionsValidateBeforeCall(partialtag, _callback);
        Type localVarReturnType = new TypeToken<ForumGetForumTagSuggestions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forumGetPoll
     * @param topicId The post id of the topic that has the poll. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetPollCall(Long topicId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Forum/Poll/{topicId}/"
            .replace("{" + "topicId" + "}", localVarApiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forumGetPollValidateBeforeCall(Long topicId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling forumGetPoll(Async)");
        }

        return forumGetPollCall(topicId, _callback);

    }

    /**
     * 
     * Gets the specified forum poll.
     * @param topicId The post id of the topic that has the poll. (required)
     * @return CommunityContentGetCommunityContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public CommunityContentGetCommunityContent200Response forumGetPoll(Long topicId) throws ApiException {
        ApiResponse<CommunityContentGetCommunityContent200Response> localVarResp = forumGetPollWithHttpInfo(topicId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified forum poll.
     * @param topicId The post id of the topic that has the poll. (required)
     * @return ApiResponse&lt;CommunityContentGetCommunityContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunityContentGetCommunityContent200Response> forumGetPollWithHttpInfo(Long topicId) throws ApiException {
        okhttp3.Call localVarCall = forumGetPollValidateBeforeCall(topicId, null);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified forum poll.
     * @param topicId The post id of the topic that has the poll. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetPollAsync(Long topicId, final ApiCallback<CommunityContentGetCommunityContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = forumGetPollValidateBeforeCall(topicId, _callback);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forumGetPostAndParent
     * @param childPostId  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetPostAndParentCall(Long childPostId, String showbanned, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Forum/GetPostAndParent/{childPostId}/"
            .replace("{" + "childPostId" + "}", localVarApiClient.escapeString(childPostId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showbanned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showbanned", showbanned));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forumGetPostAndParentValidateBeforeCall(Long childPostId, String showbanned, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'childPostId' is set
        if (childPostId == null) {
            throw new ApiException("Missing the required parameter 'childPostId' when calling forumGetPostAndParent(Async)");
        }

        return forumGetPostAndParentCall(childPostId, showbanned, _callback);

    }

    /**
     * 
     * Returns the post specified and its immediate parent.
     * @param childPostId  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @return CommunityContentGetCommunityContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public CommunityContentGetCommunityContent200Response forumGetPostAndParent(Long childPostId, String showbanned) throws ApiException {
        ApiResponse<CommunityContentGetCommunityContent200Response> localVarResp = forumGetPostAndParentWithHttpInfo(childPostId, showbanned);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the post specified and its immediate parent.
     * @param childPostId  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @return ApiResponse&lt;CommunityContentGetCommunityContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunityContentGetCommunityContent200Response> forumGetPostAndParentWithHttpInfo(Long childPostId, String showbanned) throws ApiException {
        okhttp3.Call localVarCall = forumGetPostAndParentValidateBeforeCall(childPostId, showbanned, null);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the post specified and its immediate parent.
     * @param childPostId  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetPostAndParentAsync(Long childPostId, String showbanned, final ApiCallback<CommunityContentGetCommunityContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = forumGetPostAndParentValidateBeforeCall(childPostId, showbanned, _callback);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forumGetPostAndParentAwaitingApproval
     * @param childPostId  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetPostAndParentAwaitingApprovalCall(Long childPostId, String showbanned, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Forum/GetPostAndParentAwaitingApproval/{childPostId}/"
            .replace("{" + "childPostId" + "}", localVarApiClient.escapeString(childPostId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showbanned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showbanned", showbanned));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forumGetPostAndParentAwaitingApprovalValidateBeforeCall(Long childPostId, String showbanned, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'childPostId' is set
        if (childPostId == null) {
            throw new ApiException("Missing the required parameter 'childPostId' when calling forumGetPostAndParentAwaitingApproval(Async)");
        }

        return forumGetPostAndParentAwaitingApprovalCall(childPostId, showbanned, _callback);

    }

    /**
     * 
     * Returns the post specified and its immediate parent of posts that are awaiting approval.
     * @param childPostId  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @return CommunityContentGetCommunityContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public CommunityContentGetCommunityContent200Response forumGetPostAndParentAwaitingApproval(Long childPostId, String showbanned) throws ApiException {
        ApiResponse<CommunityContentGetCommunityContent200Response> localVarResp = forumGetPostAndParentAwaitingApprovalWithHttpInfo(childPostId, showbanned);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the post specified and its immediate parent of posts that are awaiting approval.
     * @param childPostId  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @return ApiResponse&lt;CommunityContentGetCommunityContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunityContentGetCommunityContent200Response> forumGetPostAndParentAwaitingApprovalWithHttpInfo(Long childPostId, String showbanned) throws ApiException {
        okhttp3.Call localVarCall = forumGetPostAndParentAwaitingApprovalValidateBeforeCall(childPostId, showbanned, null);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the post specified and its immediate parent of posts that are awaiting approval.
     * @param childPostId  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetPostAndParentAwaitingApprovalAsync(Long childPostId, String showbanned, final ApiCallback<CommunityContentGetCommunityContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = forumGetPostAndParentAwaitingApprovalValidateBeforeCall(childPostId, showbanned, _callback);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forumGetPostsThreadedPaged
     * @param getParentPost  (required)
     * @param page  (required)
     * @param pageSize  (required)
     * @param parentPostId  (required)
     * @param replySize  (required)
     * @param rootThreadMode  (required)
     * @param sortMode  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetPostsThreadedPagedCall(Boolean getParentPost, Integer page, Integer pageSize, Long parentPostId, Integer replySize, Boolean rootThreadMode, Integer sortMode, String showbanned, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/"
            .replace("{" + "getParentPost" + "}", localVarApiClient.escapeString(getParentPost.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()))
            .replace("{" + "pageSize" + "}", localVarApiClient.escapeString(pageSize.toString()))
            .replace("{" + "parentPostId" + "}", localVarApiClient.escapeString(parentPostId.toString()))
            .replace("{" + "replySize" + "}", localVarApiClient.escapeString(replySize.toString()))
            .replace("{" + "rootThreadMode" + "}", localVarApiClient.escapeString(rootThreadMode.toString()))
            .replace("{" + "sortMode" + "}", localVarApiClient.escapeString(sortMode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showbanned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showbanned", showbanned));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forumGetPostsThreadedPagedValidateBeforeCall(Boolean getParentPost, Integer page, Integer pageSize, Long parentPostId, Integer replySize, Boolean rootThreadMode, Integer sortMode, String showbanned, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getParentPost' is set
        if (getParentPost == null) {
            throw new ApiException("Missing the required parameter 'getParentPost' when calling forumGetPostsThreadedPaged(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling forumGetPostsThreadedPaged(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling forumGetPostsThreadedPaged(Async)");
        }

        // verify the required parameter 'parentPostId' is set
        if (parentPostId == null) {
            throw new ApiException("Missing the required parameter 'parentPostId' when calling forumGetPostsThreadedPaged(Async)");
        }

        // verify the required parameter 'replySize' is set
        if (replySize == null) {
            throw new ApiException("Missing the required parameter 'replySize' when calling forumGetPostsThreadedPaged(Async)");
        }

        // verify the required parameter 'rootThreadMode' is set
        if (rootThreadMode == null) {
            throw new ApiException("Missing the required parameter 'rootThreadMode' when calling forumGetPostsThreadedPaged(Async)");
        }

        // verify the required parameter 'sortMode' is set
        if (sortMode == null) {
            throw new ApiException("Missing the required parameter 'sortMode' when calling forumGetPostsThreadedPaged(Async)");
        }

        return forumGetPostsThreadedPagedCall(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned, _callback);

    }

    /**
     * 
     * Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
     * @param getParentPost  (required)
     * @param page  (required)
     * @param pageSize  (required)
     * @param parentPostId  (required)
     * @param replySize  (required)
     * @param rootThreadMode  (required)
     * @param sortMode  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @return CommunityContentGetCommunityContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public CommunityContentGetCommunityContent200Response forumGetPostsThreadedPaged(Boolean getParentPost, Integer page, Integer pageSize, Long parentPostId, Integer replySize, Boolean rootThreadMode, Integer sortMode, String showbanned) throws ApiException {
        ApiResponse<CommunityContentGetCommunityContent200Response> localVarResp = forumGetPostsThreadedPagedWithHttpInfo(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
     * @param getParentPost  (required)
     * @param page  (required)
     * @param pageSize  (required)
     * @param parentPostId  (required)
     * @param replySize  (required)
     * @param rootThreadMode  (required)
     * @param sortMode  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @return ApiResponse&lt;CommunityContentGetCommunityContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunityContentGetCommunityContent200Response> forumGetPostsThreadedPagedWithHttpInfo(Boolean getParentPost, Integer page, Integer pageSize, Long parentPostId, Integer replySize, Boolean rootThreadMode, Integer sortMode, String showbanned) throws ApiException {
        okhttp3.Call localVarCall = forumGetPostsThreadedPagedValidateBeforeCall(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned, null);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
     * @param getParentPost  (required)
     * @param page  (required)
     * @param pageSize  (required)
     * @param parentPostId  (required)
     * @param replySize  (required)
     * @param rootThreadMode  (required)
     * @param sortMode  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetPostsThreadedPagedAsync(Boolean getParentPost, Integer page, Integer pageSize, Long parentPostId, Integer replySize, Boolean rootThreadMode, Integer sortMode, String showbanned, final ApiCallback<CommunityContentGetCommunityContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = forumGetPostsThreadedPagedValidateBeforeCall(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned, _callback);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forumGetPostsThreadedPagedFromChild
     * @param childPostId  (required)
     * @param page  (required)
     * @param pageSize  (required)
     * @param replySize  (required)
     * @param rootThreadMode  (required)
     * @param sortMode  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetPostsThreadedPagedFromChildCall(Long childPostId, Integer page, Integer pageSize, Integer replySize, Boolean rootThreadMode, Integer sortMode, String showbanned, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/"
            .replace("{" + "childPostId" + "}", localVarApiClient.escapeString(childPostId.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()))
            .replace("{" + "pageSize" + "}", localVarApiClient.escapeString(pageSize.toString()))
            .replace("{" + "replySize" + "}", localVarApiClient.escapeString(replySize.toString()))
            .replace("{" + "rootThreadMode" + "}", localVarApiClient.escapeString(rootThreadMode.toString()))
            .replace("{" + "sortMode" + "}", localVarApiClient.escapeString(sortMode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showbanned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showbanned", showbanned));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forumGetPostsThreadedPagedFromChildValidateBeforeCall(Long childPostId, Integer page, Integer pageSize, Integer replySize, Boolean rootThreadMode, Integer sortMode, String showbanned, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'childPostId' is set
        if (childPostId == null) {
            throw new ApiException("Missing the required parameter 'childPostId' when calling forumGetPostsThreadedPagedFromChild(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling forumGetPostsThreadedPagedFromChild(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling forumGetPostsThreadedPagedFromChild(Async)");
        }

        // verify the required parameter 'replySize' is set
        if (replySize == null) {
            throw new ApiException("Missing the required parameter 'replySize' when calling forumGetPostsThreadedPagedFromChild(Async)");
        }

        // verify the required parameter 'rootThreadMode' is set
        if (rootThreadMode == null) {
            throw new ApiException("Missing the required parameter 'rootThreadMode' when calling forumGetPostsThreadedPagedFromChild(Async)");
        }

        // verify the required parameter 'sortMode' is set
        if (sortMode == null) {
            throw new ApiException("Missing the required parameter 'sortMode' when calling forumGetPostsThreadedPagedFromChild(Async)");
        }

        return forumGetPostsThreadedPagedFromChildCall(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned, _callback);

    }

    /**
     * 
     * Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
     * @param childPostId  (required)
     * @param page  (required)
     * @param pageSize  (required)
     * @param replySize  (required)
     * @param rootThreadMode  (required)
     * @param sortMode  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @return CommunityContentGetCommunityContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public CommunityContentGetCommunityContent200Response forumGetPostsThreadedPagedFromChild(Long childPostId, Integer page, Integer pageSize, Integer replySize, Boolean rootThreadMode, Integer sortMode, String showbanned) throws ApiException {
        ApiResponse<CommunityContentGetCommunityContent200Response> localVarResp = forumGetPostsThreadedPagedFromChildWithHttpInfo(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
     * @param childPostId  (required)
     * @param page  (required)
     * @param pageSize  (required)
     * @param replySize  (required)
     * @param rootThreadMode  (required)
     * @param sortMode  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @return ApiResponse&lt;CommunityContentGetCommunityContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunityContentGetCommunityContent200Response> forumGetPostsThreadedPagedFromChildWithHttpInfo(Long childPostId, Integer page, Integer pageSize, Integer replySize, Boolean rootThreadMode, Integer sortMode, String showbanned) throws ApiException {
        okhttp3.Call localVarCall = forumGetPostsThreadedPagedFromChildValidateBeforeCall(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned, null);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
     * @param childPostId  (required)
     * @param page  (required)
     * @param pageSize  (required)
     * @param replySize  (required)
     * @param rootThreadMode  (required)
     * @param sortMode  (required)
     * @param showbanned If this value is not null or empty, banned posts are requested to be returned (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetPostsThreadedPagedFromChildAsync(Long childPostId, Integer page, Integer pageSize, Integer replySize, Boolean rootThreadMode, Integer sortMode, String showbanned, final ApiCallback<CommunityContentGetCommunityContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = forumGetPostsThreadedPagedFromChildValidateBeforeCall(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned, _callback);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forumGetRecruitmentThreadSummaries
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetRecruitmentThreadSummariesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Forum/Recruit/Summaries/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forumGetRecruitmentThreadSummariesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return forumGetRecruitmentThreadSummariesCall(_callback);

    }

    /**
     * 
     * Allows the caller to get a list of to 25 recruitment thread summary information objects.
     * @return ForumGetRecruitmentThreadSummaries200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ForumGetRecruitmentThreadSummaries200Response forumGetRecruitmentThreadSummaries() throws ApiException {
        ApiResponse<ForumGetRecruitmentThreadSummaries200Response> localVarResp = forumGetRecruitmentThreadSummariesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Allows the caller to get a list of to 25 recruitment thread summary information objects.
     * @return ApiResponse&lt;ForumGetRecruitmentThreadSummaries200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ForumGetRecruitmentThreadSummaries200Response> forumGetRecruitmentThreadSummariesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = forumGetRecruitmentThreadSummariesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ForumGetRecruitmentThreadSummaries200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows the caller to get a list of to 25 recruitment thread summary information objects.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetRecruitmentThreadSummariesAsync(final ApiCallback<ForumGetRecruitmentThreadSummaries200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = forumGetRecruitmentThreadSummariesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ForumGetRecruitmentThreadSummaries200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forumGetTopicForContent
     * @param contentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetTopicForContentCall(Long contentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Forum/GetTopicForContent/{contentId}/"
            .replace("{" + "contentId" + "}", localVarApiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forumGetTopicForContentValidateBeforeCall(Long contentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling forumGetTopicForContent(Async)");
        }

        return forumGetTopicForContentCall(contentId, _callback);

    }

    /**
     * 
     * Gets the post Id for the given content item&#39;s comments, if it exists.
     * @param contentId  (required)
     * @return ForumGetTopicForContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ForumGetTopicForContent200Response forumGetTopicForContent(Long contentId) throws ApiException {
        ApiResponse<ForumGetTopicForContent200Response> localVarResp = forumGetTopicForContentWithHttpInfo(contentId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the post Id for the given content item&#39;s comments, if it exists.
     * @param contentId  (required)
     * @return ApiResponse&lt;ForumGetTopicForContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ForumGetTopicForContent200Response> forumGetTopicForContentWithHttpInfo(Long contentId) throws ApiException {
        okhttp3.Call localVarCall = forumGetTopicForContentValidateBeforeCall(contentId, null);
        Type localVarReturnType = new TypeToken<ForumGetTopicForContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the post Id for the given content item&#39;s comments, if it exists.
     * @param contentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetTopicForContentAsync(Long contentId, final ApiCallback<ForumGetTopicForContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = forumGetTopicForContentValidateBeforeCall(contentId, _callback);
        Type localVarReturnType = new TypeToken<ForumGetTopicForContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forumGetTopicsPaged
     * @param categoryFilter A category filter (required)
     * @param group The group, if any. (required)
     * @param page Zero paged page number (required)
     * @param pageSize Unused (required)
     * @param quickDate A date filter. (required)
     * @param sort The sort mode. (required)
     * @param locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param tagstring The tags to search, if any. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetTopicsPagedCall(Integer categoryFilter, Long group, Integer page, Integer pageSize, Integer quickDate, Integer sort, String locales, String tagstring, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/"
            .replace("{" + "categoryFilter" + "}", localVarApiClient.escapeString(categoryFilter.toString()))
            .replace("{" + "group" + "}", localVarApiClient.escapeString(group.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()))
            .replace("{" + "pageSize" + "}", localVarApiClient.escapeString(pageSize.toString()))
            .replace("{" + "quickDate" + "}", localVarApiClient.escapeString(quickDate.toString()))
            .replace("{" + "sort" + "}", localVarApiClient.escapeString(sort.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locales != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locales", locales));
        }

        if (tagstring != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagstring", tagstring));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forumGetTopicsPagedValidateBeforeCall(Integer categoryFilter, Long group, Integer page, Integer pageSize, Integer quickDate, Integer sort, String locales, String tagstring, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryFilter' is set
        if (categoryFilter == null) {
            throw new ApiException("Missing the required parameter 'categoryFilter' when calling forumGetTopicsPaged(Async)");
        }

        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling forumGetTopicsPaged(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling forumGetTopicsPaged(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling forumGetTopicsPaged(Async)");
        }

        // verify the required parameter 'quickDate' is set
        if (quickDate == null) {
            throw new ApiException("Missing the required parameter 'quickDate' when calling forumGetTopicsPaged(Async)");
        }

        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling forumGetTopicsPaged(Async)");
        }

        return forumGetTopicsPagedCall(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring, _callback);

    }

    /**
     * 
     * Get topics from any forum.
     * @param categoryFilter A category filter (required)
     * @param group The group, if any. (required)
     * @param page Zero paged page number (required)
     * @param pageSize Unused (required)
     * @param quickDate A date filter. (required)
     * @param sort The sort mode. (required)
     * @param locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param tagstring The tags to search, if any. (optional)
     * @return CommunityContentGetCommunityContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public CommunityContentGetCommunityContent200Response forumGetTopicsPaged(Integer categoryFilter, Long group, Integer page, Integer pageSize, Integer quickDate, Integer sort, String locales, String tagstring) throws ApiException {
        ApiResponse<CommunityContentGetCommunityContent200Response> localVarResp = forumGetTopicsPagedWithHttpInfo(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring);
        return localVarResp.getData();
    }

    /**
     * 
     * Get topics from any forum.
     * @param categoryFilter A category filter (required)
     * @param group The group, if any. (required)
     * @param page Zero paged page number (required)
     * @param pageSize Unused (required)
     * @param quickDate A date filter. (required)
     * @param sort The sort mode. (required)
     * @param locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param tagstring The tags to search, if any. (optional)
     * @return ApiResponse&lt;CommunityContentGetCommunityContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunityContentGetCommunityContent200Response> forumGetTopicsPagedWithHttpInfo(Integer categoryFilter, Long group, Integer page, Integer pageSize, Integer quickDate, Integer sort, String locales, String tagstring) throws ApiException {
        okhttp3.Call localVarCall = forumGetTopicsPagedValidateBeforeCall(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring, null);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get topics from any forum.
     * @param categoryFilter A category filter (required)
     * @param group The group, if any. (required)
     * @param page Zero paged page number (required)
     * @param pageSize Unused (required)
     * @param quickDate A date filter. (required)
     * @param sort The sort mode. (required)
     * @param locales Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)
     * @param tagstring The tags to search, if any. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forumGetTopicsPagedAsync(Integer categoryFilter, Long group, Integer page, Integer pageSize, Integer quickDate, Integer sort, String locales, String tagstring, final ApiCallback<CommunityContentGetCommunityContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = forumGetTopicsPagedValidateBeforeCall(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring, _callback);
        Type localVarReturnType = new TypeToken<CommunityContentGetCommunityContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
