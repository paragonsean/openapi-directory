/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup;
import org.openapitools.client.model.DestinyHistoricalStatsDestinyHistoricalStatsValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyHistoricalStatsDestinyHistoricalStatsByPeriod
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyHistoricalStatsDestinyHistoricalStatsByPeriod {
  public static final String SERIALIZED_NAME_ALL_TIME = "allTime";
  @SerializedName(SERIALIZED_NAME_ALL_TIME)
  private Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> allTime = new HashMap<>();

  public static final String SERIALIZED_NAME_ALL_TIME_TIER1 = "allTimeTier1";
  @SerializedName(SERIALIZED_NAME_ALL_TIME_TIER1)
  private Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> allTimeTier1 = new HashMap<>();

  public static final String SERIALIZED_NAME_ALL_TIME_TIER2 = "allTimeTier2";
  @SerializedName(SERIALIZED_NAME_ALL_TIME_TIER2)
  private Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> allTimeTier2 = new HashMap<>();

  public static final String SERIALIZED_NAME_ALL_TIME_TIER3 = "allTimeTier3";
  @SerializedName(SERIALIZED_NAME_ALL_TIME_TIER3)
  private Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> allTimeTier3 = new HashMap<>();

  public static final String SERIALIZED_NAME_DAILY = "daily";
  @SerializedName(SERIALIZED_NAME_DAILY)
  private List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup> daily = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONTHLY = "monthly";
  @SerializedName(SERIALIZED_NAME_MONTHLY)
  private List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup> monthly = new ArrayList<>();

  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod() {
  }

  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod allTime(Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> allTime) {
    this.allTime = allTime;
    return this;
  }

  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod putAllTimeItem(String key, DestinyHistoricalStatsDestinyHistoricalStatsValue allTimeItem) {
    if (this.allTime == null) {
      this.allTime = new HashMap<>();
    }
    this.allTime.put(key, allTimeItem);
    return this;
  }

  /**
   * Get allTime
   * @return allTime
   */
  @javax.annotation.Nullable
  public Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> getAllTime() {
    return allTime;
  }

  public void setAllTime(Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> allTime) {
    this.allTime = allTime;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod allTimeTier1(Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> allTimeTier1) {
    this.allTimeTier1 = allTimeTier1;
    return this;
  }

  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod putAllTimeTier1Item(String key, DestinyHistoricalStatsDestinyHistoricalStatsValue allTimeTier1Item) {
    if (this.allTimeTier1 == null) {
      this.allTimeTier1 = new HashMap<>();
    }
    this.allTimeTier1.put(key, allTimeTier1Item);
    return this;
  }

  /**
   * Get allTimeTier1
   * @return allTimeTier1
   */
  @javax.annotation.Nullable
  public Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> getAllTimeTier1() {
    return allTimeTier1;
  }

  public void setAllTimeTier1(Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> allTimeTier1) {
    this.allTimeTier1 = allTimeTier1;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod allTimeTier2(Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> allTimeTier2) {
    this.allTimeTier2 = allTimeTier2;
    return this;
  }

  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod putAllTimeTier2Item(String key, DestinyHistoricalStatsDestinyHistoricalStatsValue allTimeTier2Item) {
    if (this.allTimeTier2 == null) {
      this.allTimeTier2 = new HashMap<>();
    }
    this.allTimeTier2.put(key, allTimeTier2Item);
    return this;
  }

  /**
   * Get allTimeTier2
   * @return allTimeTier2
   */
  @javax.annotation.Nullable
  public Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> getAllTimeTier2() {
    return allTimeTier2;
  }

  public void setAllTimeTier2(Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> allTimeTier2) {
    this.allTimeTier2 = allTimeTier2;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod allTimeTier3(Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> allTimeTier3) {
    this.allTimeTier3 = allTimeTier3;
    return this;
  }

  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod putAllTimeTier3Item(String key, DestinyHistoricalStatsDestinyHistoricalStatsValue allTimeTier3Item) {
    if (this.allTimeTier3 == null) {
      this.allTimeTier3 = new HashMap<>();
    }
    this.allTimeTier3.put(key, allTimeTier3Item);
    return this;
  }

  /**
   * Get allTimeTier3
   * @return allTimeTier3
   */
  @javax.annotation.Nullable
  public Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> getAllTimeTier3() {
    return allTimeTier3;
  }

  public void setAllTimeTier3(Map<String, DestinyHistoricalStatsDestinyHistoricalStatsValue> allTimeTier3) {
    this.allTimeTier3 = allTimeTier3;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod daily(List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup> daily) {
    this.daily = daily;
    return this;
  }

  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod addDailyItem(DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup dailyItem) {
    if (this.daily == null) {
      this.daily = new ArrayList<>();
    }
    this.daily.add(dailyItem);
    return this;
  }

  /**
   * Get daily
   * @return daily
   */
  @javax.annotation.Nullable
  public List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup> getDaily() {
    return daily;
  }

  public void setDaily(List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup> daily) {
    this.daily = daily;
  }


  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod monthly(List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup> monthly) {
    this.monthly = monthly;
    return this;
  }

  public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod addMonthlyItem(DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup monthlyItem) {
    if (this.monthly == null) {
      this.monthly = new ArrayList<>();
    }
    this.monthly.add(monthlyItem);
    return this;
  }

  /**
   * Get monthly
   * @return monthly
   */
  @javax.annotation.Nullable
  public List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup> getMonthly() {
    return monthly;
  }

  public void setMonthly(List<DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup> monthly) {
    this.monthly = monthly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyHistoricalStatsDestinyHistoricalStatsByPeriod destinyHistoricalStatsDestinyHistoricalStatsByPeriod = (DestinyHistoricalStatsDestinyHistoricalStatsByPeriod) o;
    return Objects.equals(this.allTime, destinyHistoricalStatsDestinyHistoricalStatsByPeriod.allTime) &&
        Objects.equals(this.allTimeTier1, destinyHistoricalStatsDestinyHistoricalStatsByPeriod.allTimeTier1) &&
        Objects.equals(this.allTimeTier2, destinyHistoricalStatsDestinyHistoricalStatsByPeriod.allTimeTier2) &&
        Objects.equals(this.allTimeTier3, destinyHistoricalStatsDestinyHistoricalStatsByPeriod.allTimeTier3) &&
        Objects.equals(this.daily, destinyHistoricalStatsDestinyHistoricalStatsByPeriod.daily) &&
        Objects.equals(this.monthly, destinyHistoricalStatsDestinyHistoricalStatsByPeriod.monthly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allTime, allTimeTier1, allTimeTier2, allTimeTier3, daily, monthly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyHistoricalStatsDestinyHistoricalStatsByPeriod {\n");
    sb.append("    allTime: ").append(toIndentedString(allTime)).append("\n");
    sb.append("    allTimeTier1: ").append(toIndentedString(allTimeTier1)).append("\n");
    sb.append("    allTimeTier2: ").append(toIndentedString(allTimeTier2)).append("\n");
    sb.append("    allTimeTier3: ").append(toIndentedString(allTimeTier3)).append("\n");
    sb.append("    daily: ").append(toIndentedString(daily)).append("\n");
    sb.append("    monthly: ").append(toIndentedString(monthly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allTime");
    openapiFields.add("allTimeTier1");
    openapiFields.add("allTimeTier2");
    openapiFields.add("allTimeTier3");
    openapiFields.add("daily");
    openapiFields.add("monthly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyHistoricalStatsDestinyHistoricalStatsByPeriod
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyHistoricalStatsDestinyHistoricalStatsByPeriod is not found in the empty JSON string", DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyHistoricalStatsDestinyHistoricalStatsByPeriod` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("daily") != null && !jsonObj.get("daily").isJsonNull()) {
        JsonArray jsonArraydaily = jsonObj.getAsJsonArray("daily");
        if (jsonArraydaily != null) {
          // ensure the json data is an array
          if (!jsonObj.get("daily").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `daily` to be an array in the JSON string but got `%s`", jsonObj.get("daily").toString()));
          }

          // validate the optional field `daily` (array)
          for (int i = 0; i < jsonArraydaily.size(); i++) {
            DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.validateJsonElement(jsonArraydaily.get(i));
          };
        }
      }
      if (jsonObj.get("monthly") != null && !jsonObj.get("monthly").isJsonNull()) {
        JsonArray jsonArraymonthly = jsonObj.getAsJsonArray("monthly");
        if (jsonArraymonthly != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monthly").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monthly` to be an array in the JSON string but got `%s`", jsonObj.get("monthly").toString()));
          }

          // validate the optional field `monthly` (array)
          for (int i = 0; i < jsonArraymonthly.size(); i++) {
            DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup.validateJsonElement(jsonArraymonthly.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyHistoricalStatsDestinyHistoricalStatsByPeriod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyHistoricalStatsDestinyHistoricalStatsByPeriod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyHistoricalStatsDestinyHistoricalStatsByPeriod>() {
           @Override
           public void write(JsonWriter out, DestinyHistoricalStatsDestinyHistoricalStatsByPeriod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyHistoricalStatsDestinyHistoricalStatsByPeriod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyHistoricalStatsDestinyHistoricalStatsByPeriod
   * @throws IOException if the JSON string is invalid with respect to DestinyHistoricalStatsDestinyHistoricalStatsByPeriod
   */
  public static DestinyHistoricalStatsDestinyHistoricalStatsByPeriod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyHistoricalStatsDestinyHistoricalStatsByPeriod.class);
  }

  /**
   * Convert an instance of DestinyHistoricalStatsDestinyHistoricalStatsByPeriod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

