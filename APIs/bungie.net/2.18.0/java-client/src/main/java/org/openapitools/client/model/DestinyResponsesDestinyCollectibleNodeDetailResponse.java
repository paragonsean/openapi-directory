/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyItemComponentSetOfuint32;
import org.openapitools.client.model.SingleComponentResponseOfDestinyCollectiblesComponent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Returns the detailed information about a Collectible Presentation Node and any Collectibles that are direct descendants.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyResponsesDestinyCollectibleNodeDetailResponse {
  public static final String SERIALIZED_NAME_COLLECTIBLE_ITEM_COMPONENTS = "collectibleItemComponents";
  @SerializedName(SERIALIZED_NAME_COLLECTIBLE_ITEM_COMPONENTS)
  private DestinyItemComponentSetOfuint32 collectibleItemComponents;

  public static final String SERIALIZED_NAME_COLLECTIBLES = "collectibles";
  @SerializedName(SERIALIZED_NAME_COLLECTIBLES)
  private SingleComponentResponseOfDestinyCollectiblesComponent collectibles;

  public DestinyResponsesDestinyCollectibleNodeDetailResponse() {
  }

  public DestinyResponsesDestinyCollectibleNodeDetailResponse collectibleItemComponents(DestinyItemComponentSetOfuint32 collectibleItemComponents) {
    this.collectibleItemComponents = collectibleItemComponents;
    return this;
  }

  /**
   * Item components, keyed by the item hash of the items pointed at collectibles found under the requested Presentation Node.  NOTE: I had a lot of hemming and hawing about whether these should be keyed by collectible hash or item hash... but ultimately having it be keyed by item hash meant that UI that already uses DestinyItemComponentSet data wouldn&#39;t have to have a special override to do the collectible -&gt; item lookup once you delve into an item&#39;s details, and it also meant that you didn&#39;t have to remember that the Hash being used as the key for plugSets was different from the Hash being used for the other Dictionaries. As a result, using the Item Hash felt like the least crappy solution.  We may all come to regret this decision. We will see.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
   * @return collectibleItemComponents
   */
  @javax.annotation.Nullable
  public DestinyItemComponentSetOfuint32 getCollectibleItemComponents() {
    return collectibleItemComponents;
  }

  public void setCollectibleItemComponents(DestinyItemComponentSetOfuint32 collectibleItemComponents) {
    this.collectibleItemComponents = collectibleItemComponents;
  }


  public DestinyResponsesDestinyCollectibleNodeDetailResponse collectibles(SingleComponentResponseOfDestinyCollectiblesComponent collectibles) {
    this.collectibles = collectibles;
    return this;
  }

  /**
   * COMPONENT TYPE: Collectibles
   * @return collectibles
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyCollectiblesComponent getCollectibles() {
    return collectibles;
  }

  public void setCollectibles(SingleComponentResponseOfDestinyCollectiblesComponent collectibles) {
    this.collectibles = collectibles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyResponsesDestinyCollectibleNodeDetailResponse destinyResponsesDestinyCollectibleNodeDetailResponse = (DestinyResponsesDestinyCollectibleNodeDetailResponse) o;
    return Objects.equals(this.collectibleItemComponents, destinyResponsesDestinyCollectibleNodeDetailResponse.collectibleItemComponents) &&
        Objects.equals(this.collectibles, destinyResponsesDestinyCollectibleNodeDetailResponse.collectibles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectibleItemComponents, collectibles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyResponsesDestinyCollectibleNodeDetailResponse {\n");
    sb.append("    collectibleItemComponents: ").append(toIndentedString(collectibleItemComponents)).append("\n");
    sb.append("    collectibles: ").append(toIndentedString(collectibles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collectibleItemComponents");
    openapiFields.add("collectibles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyResponsesDestinyCollectibleNodeDetailResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyResponsesDestinyCollectibleNodeDetailResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyResponsesDestinyCollectibleNodeDetailResponse is not found in the empty JSON string", DestinyResponsesDestinyCollectibleNodeDetailResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyResponsesDestinyCollectibleNodeDetailResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyResponsesDestinyCollectibleNodeDetailResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `collectibleItemComponents`
      if (jsonObj.get("collectibleItemComponents") != null && !jsonObj.get("collectibleItemComponents").isJsonNull()) {
        DestinyItemComponentSetOfuint32.validateJsonElement(jsonObj.get("collectibleItemComponents"));
      }
      // validate the optional field `collectibles`
      if (jsonObj.get("collectibles") != null && !jsonObj.get("collectibles").isJsonNull()) {
        SingleComponentResponseOfDestinyCollectiblesComponent.validateJsonElement(jsonObj.get("collectibles"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyResponsesDestinyCollectibleNodeDetailResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyResponsesDestinyCollectibleNodeDetailResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyResponsesDestinyCollectibleNodeDetailResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyResponsesDestinyCollectibleNodeDetailResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyResponsesDestinyCollectibleNodeDetailResponse>() {
           @Override
           public void write(JsonWriter out, DestinyResponsesDestinyCollectibleNodeDetailResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyResponsesDestinyCollectibleNodeDetailResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyResponsesDestinyCollectibleNodeDetailResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyResponsesDestinyCollectibleNodeDetailResponse
   * @throws IOException if the JSON string is invalid with respect to DestinyResponsesDestinyCollectibleNodeDetailResponse
   */
  public static DestinyResponsesDestinyCollectibleNodeDetailResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyResponsesDestinyCollectibleNodeDetailResponse.class);
  }

  /**
   * Convert an instance of DestinyResponsesDestinyCollectibleNodeDetailResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

