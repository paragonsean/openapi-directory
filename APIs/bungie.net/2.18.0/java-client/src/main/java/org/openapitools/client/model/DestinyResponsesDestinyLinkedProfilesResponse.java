/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyResponsesDestinyErrorProfile;
import org.openapitools.client.model.DestinyResponsesDestinyProfileUserInfoCard;
import org.openapitools.client.model.UserUserInfoCard;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * I know what you seek. You seek linked accounts. Found them, you have.  This contract returns a minimal amount of data about Destiny Accounts that are linked through your Bungie.Net account. We will not return accounts in this response whose
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyResponsesDestinyLinkedProfilesResponse {
  public static final String SERIALIZED_NAME_BNET_MEMBERSHIP = "bnetMembership";
  @SerializedName(SERIALIZED_NAME_BNET_MEMBERSHIP)
  private UserUserInfoCard bnetMembership;

  public static final String SERIALIZED_NAME_PROFILES = "profiles";
  @SerializedName(SERIALIZED_NAME_PROFILES)
  private List<DestinyResponsesDestinyProfileUserInfoCard> profiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFILES_WITH_ERRORS = "profilesWithErrors";
  @SerializedName(SERIALIZED_NAME_PROFILES_WITH_ERRORS)
  private List<DestinyResponsesDestinyErrorProfile> profilesWithErrors = new ArrayList<>();

  public DestinyResponsesDestinyLinkedProfilesResponse() {
  }

  public DestinyResponsesDestinyLinkedProfilesResponse bnetMembership(UserUserInfoCard bnetMembership) {
    this.bnetMembership = bnetMembership;
    return this;
  }

  /**
   * If the requested membership had a linked Bungie.Net membership ID, this is the basic information about that BNet account.  I know, Tetron; I know this is mixing UserServices concerns with DestinyServices concerns. But it&#39;s so damn convenient! https://www.youtube.com/watch?v&#x3D;X5R-bB-gKVI
   * @return bnetMembership
   */
  @javax.annotation.Nullable
  public UserUserInfoCard getBnetMembership() {
    return bnetMembership;
  }

  public void setBnetMembership(UserUserInfoCard bnetMembership) {
    this.bnetMembership = bnetMembership;
  }


  public DestinyResponsesDestinyLinkedProfilesResponse profiles(List<DestinyResponsesDestinyProfileUserInfoCard> profiles) {
    this.profiles = profiles;
    return this;
  }

  public DestinyResponsesDestinyLinkedProfilesResponse addProfilesItem(DestinyResponsesDestinyProfileUserInfoCard profilesItem) {
    if (this.profiles == null) {
      this.profiles = new ArrayList<>();
    }
    this.profiles.add(profilesItem);
    return this;
  }

  /**
   * Any Destiny account for whom we could successfully pull characters will be returned here, as the Platform-level summary of user data. (no character data, no Destiny account data other than the Membership ID and Type so you can make further queries)
   * @return profiles
   */
  @javax.annotation.Nullable
  public List<DestinyResponsesDestinyProfileUserInfoCard> getProfiles() {
    return profiles;
  }

  public void setProfiles(List<DestinyResponsesDestinyProfileUserInfoCard> profiles) {
    this.profiles = profiles;
  }


  public DestinyResponsesDestinyLinkedProfilesResponse profilesWithErrors(List<DestinyResponsesDestinyErrorProfile> profilesWithErrors) {
    this.profilesWithErrors = profilesWithErrors;
    return this;
  }

  public DestinyResponsesDestinyLinkedProfilesResponse addProfilesWithErrorsItem(DestinyResponsesDestinyErrorProfile profilesWithErrorsItem) {
    if (this.profilesWithErrors == null) {
      this.profilesWithErrors = new ArrayList<>();
    }
    this.profilesWithErrors.add(profilesWithErrorsItem);
    return this;
  }

  /**
   * This is brief summary info for profiles that we believe have valid Destiny info, but who failed to return data for some other reason and thus we know that subsequent calls for their info will also fail.
   * @return profilesWithErrors
   */
  @javax.annotation.Nullable
  public List<DestinyResponsesDestinyErrorProfile> getProfilesWithErrors() {
    return profilesWithErrors;
  }

  public void setProfilesWithErrors(List<DestinyResponsesDestinyErrorProfile> profilesWithErrors) {
    this.profilesWithErrors = profilesWithErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyResponsesDestinyLinkedProfilesResponse destinyResponsesDestinyLinkedProfilesResponse = (DestinyResponsesDestinyLinkedProfilesResponse) o;
    return Objects.equals(this.bnetMembership, destinyResponsesDestinyLinkedProfilesResponse.bnetMembership) &&
        Objects.equals(this.profiles, destinyResponsesDestinyLinkedProfilesResponse.profiles) &&
        Objects.equals(this.profilesWithErrors, destinyResponsesDestinyLinkedProfilesResponse.profilesWithErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bnetMembership, profiles, profilesWithErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyResponsesDestinyLinkedProfilesResponse {\n");
    sb.append("    bnetMembership: ").append(toIndentedString(bnetMembership)).append("\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("    profilesWithErrors: ").append(toIndentedString(profilesWithErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bnetMembership");
    openapiFields.add("profiles");
    openapiFields.add("profilesWithErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyResponsesDestinyLinkedProfilesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyResponsesDestinyLinkedProfilesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyResponsesDestinyLinkedProfilesResponse is not found in the empty JSON string", DestinyResponsesDestinyLinkedProfilesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyResponsesDestinyLinkedProfilesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyResponsesDestinyLinkedProfilesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bnetMembership`
      if (jsonObj.get("bnetMembership") != null && !jsonObj.get("bnetMembership").isJsonNull()) {
        UserUserInfoCard.validateJsonElement(jsonObj.get("bnetMembership"));
      }
      if (jsonObj.get("profiles") != null && !jsonObj.get("profiles").isJsonNull()) {
        JsonArray jsonArrayprofiles = jsonObj.getAsJsonArray("profiles");
        if (jsonArrayprofiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("profiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `profiles` to be an array in the JSON string but got `%s`", jsonObj.get("profiles").toString()));
          }

          // validate the optional field `profiles` (array)
          for (int i = 0; i < jsonArrayprofiles.size(); i++) {
            DestinyResponsesDestinyProfileUserInfoCard.validateJsonElement(jsonArrayprofiles.get(i));
          };
        }
      }
      if (jsonObj.get("profilesWithErrors") != null && !jsonObj.get("profilesWithErrors").isJsonNull()) {
        JsonArray jsonArrayprofilesWithErrors = jsonObj.getAsJsonArray("profilesWithErrors");
        if (jsonArrayprofilesWithErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("profilesWithErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `profilesWithErrors` to be an array in the JSON string but got `%s`", jsonObj.get("profilesWithErrors").toString()));
          }

          // validate the optional field `profilesWithErrors` (array)
          for (int i = 0; i < jsonArrayprofilesWithErrors.size(); i++) {
            DestinyResponsesDestinyErrorProfile.validateJsonElement(jsonArrayprofilesWithErrors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyResponsesDestinyLinkedProfilesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyResponsesDestinyLinkedProfilesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyResponsesDestinyLinkedProfilesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyResponsesDestinyLinkedProfilesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyResponsesDestinyLinkedProfilesResponse>() {
           @Override
           public void write(JsonWriter out, DestinyResponsesDestinyLinkedProfilesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyResponsesDestinyLinkedProfilesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyResponsesDestinyLinkedProfilesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyResponsesDestinyLinkedProfilesResponse
   * @throws IOException if the JSON string is invalid with respect to DestinyResponsesDestinyLinkedProfilesResponse
   */
  public static DestinyResponsesDestinyLinkedProfilesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyResponsesDestinyLinkedProfilesResponse.class);
  }

  /**
   * Convert an instance of DestinyResponsesDestinyLinkedProfilesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

