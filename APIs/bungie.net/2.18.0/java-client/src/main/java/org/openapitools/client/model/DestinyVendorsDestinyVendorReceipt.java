/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDestinyItemQuantity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If a character purchased an item that is refundable, a Vendor Receipt will be created on the user&#39;s Destiny Profile. These expire after a configurable period of time, but until then can be used to get refunds on items. BNet does not provide the ability to refund a purchase *yet*, but you know.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyVendorsDestinyVendorReceipt {
  public static final String SERIALIZED_NAME_CURRENCY_PAID = "currencyPaid";
  @SerializedName(SERIALIZED_NAME_CURRENCY_PAID)
  private List<DestinyDestinyItemQuantity> currencyPaid = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRES_ON = "expiresOn";
  @SerializedName(SERIALIZED_NAME_EXPIRES_ON)
  private OffsetDateTime expiresOn;

  public static final String SERIALIZED_NAME_ITEM_RECEIVED = "itemReceived";
  @SerializedName(SERIALIZED_NAME_ITEM_RECEIVED)
  private DestinyDestinyItemQuantity itemReceived;

  public static final String SERIALIZED_NAME_LICENSE_UNLOCK_HASH = "licenseUnlockHash";
  @SerializedName(SERIALIZED_NAME_LICENSE_UNLOCK_HASH)
  private Integer licenseUnlockHash;

  public static final String SERIALIZED_NAME_PURCHASED_BY_CHARACTER_ID = "purchasedByCharacterId";
  @SerializedName(SERIALIZED_NAME_PURCHASED_BY_CHARACTER_ID)
  private Long purchasedByCharacterId;

  public static final String SERIALIZED_NAME_REFUND_POLICY = "refundPolicy";
  @SerializedName(SERIALIZED_NAME_REFUND_POLICY)
  private Integer refundPolicy;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private Integer sequenceNumber;

  public static final String SERIALIZED_NAME_TIME_TO_EXPIRATION = "timeToExpiration";
  @SerializedName(SERIALIZED_NAME_TIME_TO_EXPIRATION)
  private Long timeToExpiration;

  public DestinyVendorsDestinyVendorReceipt() {
  }

  public DestinyVendorsDestinyVendorReceipt currencyPaid(List<DestinyDestinyItemQuantity> currencyPaid) {
    this.currencyPaid = currencyPaid;
    return this;
  }

  public DestinyVendorsDestinyVendorReceipt addCurrencyPaidItem(DestinyDestinyItemQuantity currencyPaidItem) {
    if (this.currencyPaid == null) {
      this.currencyPaid = new ArrayList<>();
    }
    this.currencyPaid.add(currencyPaidItem);
    return this;
  }

  /**
   * The amount paid for the item, in terms of items that were consumed in the purchase and their quantity.
   * @return currencyPaid
   */
  @javax.annotation.Nullable
  public List<DestinyDestinyItemQuantity> getCurrencyPaid() {
    return currencyPaid;
  }

  public void setCurrencyPaid(List<DestinyDestinyItemQuantity> currencyPaid) {
    this.currencyPaid = currencyPaid;
  }


  public DestinyVendorsDestinyVendorReceipt expiresOn(OffsetDateTime expiresOn) {
    this.expiresOn = expiresOn;
    return this;
  }

  /**
   * The date at which this receipt is rendered invalid.
   * @return expiresOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiresOn() {
    return expiresOn;
  }

  public void setExpiresOn(OffsetDateTime expiresOn) {
    this.expiresOn = expiresOn;
  }


  public DestinyVendorsDestinyVendorReceipt itemReceived(DestinyDestinyItemQuantity itemReceived) {
    this.itemReceived = itemReceived;
    return this;
  }

  /**
   * The item that was received, and its quantity.
   * @return itemReceived
   */
  @javax.annotation.Nullable
  public DestinyDestinyItemQuantity getItemReceived() {
    return itemReceived;
  }

  public void setItemReceived(DestinyDestinyItemQuantity itemReceived) {
    this.itemReceived = itemReceived;
  }


  public DestinyVendorsDestinyVendorReceipt licenseUnlockHash(Integer licenseUnlockHash) {
    this.licenseUnlockHash = licenseUnlockHash;
    return this;
  }

  /**
   * The unlock flag used to determine whether you still have the purchased item.
   * @return licenseUnlockHash
   */
  @javax.annotation.Nullable
  public Integer getLicenseUnlockHash() {
    return licenseUnlockHash;
  }

  public void setLicenseUnlockHash(Integer licenseUnlockHash) {
    this.licenseUnlockHash = licenseUnlockHash;
  }


  public DestinyVendorsDestinyVendorReceipt purchasedByCharacterId(Long purchasedByCharacterId) {
    this.purchasedByCharacterId = purchasedByCharacterId;
    return this;
  }

  /**
   * The ID of the character who made the purchase.
   * @return purchasedByCharacterId
   */
  @javax.annotation.Nullable
  public Long getPurchasedByCharacterId() {
    return purchasedByCharacterId;
  }

  public void setPurchasedByCharacterId(Long purchasedByCharacterId) {
    this.purchasedByCharacterId = purchasedByCharacterId;
  }


  public DestinyVendorsDestinyVendorReceipt refundPolicy(Integer refundPolicy) {
    this.refundPolicy = refundPolicy;
    return this;
  }

  /**
   * Whether you can get a refund, and what happens in order for the refund to be received. See the DestinyVendorItemRefundPolicy enum for details.
   * @return refundPolicy
   */
  @javax.annotation.Nullable
  public Integer getRefundPolicy() {
    return refundPolicy;
  }

  public void setRefundPolicy(Integer refundPolicy) {
    this.refundPolicy = refundPolicy;
  }


  public DestinyVendorsDestinyVendorReceipt sequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * The identifier of this receipt.
   * @return sequenceNumber
   */
  @javax.annotation.Nullable
  public Integer getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public DestinyVendorsDestinyVendorReceipt timeToExpiration(Long timeToExpiration) {
    this.timeToExpiration = timeToExpiration;
    return this;
  }

  /**
   * The seconds since epoch at which this receipt is rendered invalid.
   * @return timeToExpiration
   */
  @javax.annotation.Nullable
  public Long getTimeToExpiration() {
    return timeToExpiration;
  }

  public void setTimeToExpiration(Long timeToExpiration) {
    this.timeToExpiration = timeToExpiration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyVendorsDestinyVendorReceipt destinyVendorsDestinyVendorReceipt = (DestinyVendorsDestinyVendorReceipt) o;
    return Objects.equals(this.currencyPaid, destinyVendorsDestinyVendorReceipt.currencyPaid) &&
        Objects.equals(this.expiresOn, destinyVendorsDestinyVendorReceipt.expiresOn) &&
        Objects.equals(this.itemReceived, destinyVendorsDestinyVendorReceipt.itemReceived) &&
        Objects.equals(this.licenseUnlockHash, destinyVendorsDestinyVendorReceipt.licenseUnlockHash) &&
        Objects.equals(this.purchasedByCharacterId, destinyVendorsDestinyVendorReceipt.purchasedByCharacterId) &&
        Objects.equals(this.refundPolicy, destinyVendorsDestinyVendorReceipt.refundPolicy) &&
        Objects.equals(this.sequenceNumber, destinyVendorsDestinyVendorReceipt.sequenceNumber) &&
        Objects.equals(this.timeToExpiration, destinyVendorsDestinyVendorReceipt.timeToExpiration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyPaid, expiresOn, itemReceived, licenseUnlockHash, purchasedByCharacterId, refundPolicy, sequenceNumber, timeToExpiration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyVendorsDestinyVendorReceipt {\n");
    sb.append("    currencyPaid: ").append(toIndentedString(currencyPaid)).append("\n");
    sb.append("    expiresOn: ").append(toIndentedString(expiresOn)).append("\n");
    sb.append("    itemReceived: ").append(toIndentedString(itemReceived)).append("\n");
    sb.append("    licenseUnlockHash: ").append(toIndentedString(licenseUnlockHash)).append("\n");
    sb.append("    purchasedByCharacterId: ").append(toIndentedString(purchasedByCharacterId)).append("\n");
    sb.append("    refundPolicy: ").append(toIndentedString(refundPolicy)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    timeToExpiration: ").append(toIndentedString(timeToExpiration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currencyPaid");
    openapiFields.add("expiresOn");
    openapiFields.add("itemReceived");
    openapiFields.add("licenseUnlockHash");
    openapiFields.add("purchasedByCharacterId");
    openapiFields.add("refundPolicy");
    openapiFields.add("sequenceNumber");
    openapiFields.add("timeToExpiration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyVendorsDestinyVendorReceipt
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyVendorsDestinyVendorReceipt.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyVendorsDestinyVendorReceipt is not found in the empty JSON string", DestinyVendorsDestinyVendorReceipt.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyVendorsDestinyVendorReceipt.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyVendorsDestinyVendorReceipt` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("currencyPaid") != null && !jsonObj.get("currencyPaid").isJsonNull()) {
        JsonArray jsonArraycurrencyPaid = jsonObj.getAsJsonArray("currencyPaid");
        if (jsonArraycurrencyPaid != null) {
          // ensure the json data is an array
          if (!jsonObj.get("currencyPaid").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `currencyPaid` to be an array in the JSON string but got `%s`", jsonObj.get("currencyPaid").toString()));
          }

          // validate the optional field `currencyPaid` (array)
          for (int i = 0; i < jsonArraycurrencyPaid.size(); i++) {
            DestinyDestinyItemQuantity.validateJsonElement(jsonArraycurrencyPaid.get(i));
          };
        }
      }
      // validate the optional field `itemReceived`
      if (jsonObj.get("itemReceived") != null && !jsonObj.get("itemReceived").isJsonNull()) {
        DestinyDestinyItemQuantity.validateJsonElement(jsonObj.get("itemReceived"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyVendorsDestinyVendorReceipt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyVendorsDestinyVendorReceipt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyVendorsDestinyVendorReceipt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyVendorsDestinyVendorReceipt.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyVendorsDestinyVendorReceipt>() {
           @Override
           public void write(JsonWriter out, DestinyVendorsDestinyVendorReceipt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyVendorsDestinyVendorReceipt read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyVendorsDestinyVendorReceipt given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyVendorsDestinyVendorReceipt
   * @throws IOException if the JSON string is invalid with respect to DestinyVendorsDestinyVendorReceipt
   */
  public static DestinyVendorsDestinyVendorReceipt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyVendorsDestinyVendorReceipt.class);
  }

  /**
   * Convert an instance of DestinyVendorsDestinyVendorReceipt to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

