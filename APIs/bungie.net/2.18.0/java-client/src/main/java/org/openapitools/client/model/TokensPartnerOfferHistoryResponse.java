/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TokensPartnerOfferHistoryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TokensPartnerOfferHistoryResponse {
  public static final String SERIALIZED_NAME_APPLY_DATE = "ApplyDate";
  @SerializedName(SERIALIZED_NAME_APPLY_DATE)
  private OffsetDateTime applyDate;

  public static final String SERIALIZED_NAME_IS_CONSUMABLE = "IsConsumable";
  @SerializedName(SERIALIZED_NAME_IS_CONSUMABLE)
  private Boolean isConsumable;

  public static final String SERIALIZED_NAME_LOCALIZED_DESCRIPTION = "LocalizedDescription";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_DESCRIPTION)
  private String localizedDescription;

  public static final String SERIALIZED_NAME_LOCALIZED_NAME = "LocalizedName";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_NAME)
  private String localizedName;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ID = "MembershipId";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ID)
  private Long membershipId;

  /**
   * Gets or Sets membershipType
   */
  @JsonAdapter(MembershipTypeEnum.Adapter.class)
  public enum MembershipTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_10(10),
    
    NUMBER_254(254),
    
    NUMBER_MINUS_1(-1);

    private Integer value;

    MembershipTypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MembershipTypeEnum fromValue(Integer value) {
      for (MembershipTypeEnum b : MembershipTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MembershipTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MembershipTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MembershipTypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return MembershipTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      MembershipTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEMBERSHIP_TYPE = "MembershipType";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_TYPE)
  private MembershipTypeEnum membershipType;

  public static final String SERIALIZED_NAME_PARTNER_OFFER_KEY = "PartnerOfferKey";
  @SerializedName(SERIALIZED_NAME_PARTNER_OFFER_KEY)
  private String partnerOfferKey;

  public static final String SERIALIZED_NAME_QUANTITY_APPLIED = "QuantityApplied";
  @SerializedName(SERIALIZED_NAME_QUANTITY_APPLIED)
  private Integer quantityApplied;

  public TokensPartnerOfferHistoryResponse() {
  }

  public TokensPartnerOfferHistoryResponse applyDate(OffsetDateTime applyDate) {
    this.applyDate = applyDate;
    return this;
  }

  /**
   * Get applyDate
   * @return applyDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getApplyDate() {
    return applyDate;
  }

  public void setApplyDate(OffsetDateTime applyDate) {
    this.applyDate = applyDate;
  }


  public TokensPartnerOfferHistoryResponse isConsumable(Boolean isConsumable) {
    this.isConsumable = isConsumable;
    return this;
  }

  /**
   * Get isConsumable
   * @return isConsumable
   */
  @javax.annotation.Nullable
  public Boolean getIsConsumable() {
    return isConsumable;
  }

  public void setIsConsumable(Boolean isConsumable) {
    this.isConsumable = isConsumable;
  }


  public TokensPartnerOfferHistoryResponse localizedDescription(String localizedDescription) {
    this.localizedDescription = localizedDescription;
    return this;
  }

  /**
   * Get localizedDescription
   * @return localizedDescription
   */
  @javax.annotation.Nullable
  public String getLocalizedDescription() {
    return localizedDescription;
  }

  public void setLocalizedDescription(String localizedDescription) {
    this.localizedDescription = localizedDescription;
  }


  public TokensPartnerOfferHistoryResponse localizedName(String localizedName) {
    this.localizedName = localizedName;
    return this;
  }

  /**
   * Get localizedName
   * @return localizedName
   */
  @javax.annotation.Nullable
  public String getLocalizedName() {
    return localizedName;
  }

  public void setLocalizedName(String localizedName) {
    this.localizedName = localizedName;
  }


  public TokensPartnerOfferHistoryResponse membershipId(Long membershipId) {
    this.membershipId = membershipId;
    return this;
  }

  /**
   * Get membershipId
   * @return membershipId
   */
  @javax.annotation.Nullable
  public Long getMembershipId() {
    return membershipId;
  }

  public void setMembershipId(Long membershipId) {
    this.membershipId = membershipId;
  }


  public TokensPartnerOfferHistoryResponse membershipType(MembershipTypeEnum membershipType) {
    this.membershipType = membershipType;
    return this;
  }

  /**
   * Get membershipType
   * @return membershipType
   */
  @javax.annotation.Nullable
  public MembershipTypeEnum getMembershipType() {
    return membershipType;
  }

  public void setMembershipType(MembershipTypeEnum membershipType) {
    this.membershipType = membershipType;
  }


  public TokensPartnerOfferHistoryResponse partnerOfferKey(String partnerOfferKey) {
    this.partnerOfferKey = partnerOfferKey;
    return this;
  }

  /**
   * Get partnerOfferKey
   * @return partnerOfferKey
   */
  @javax.annotation.Nullable
  public String getPartnerOfferKey() {
    return partnerOfferKey;
  }

  public void setPartnerOfferKey(String partnerOfferKey) {
    this.partnerOfferKey = partnerOfferKey;
  }


  public TokensPartnerOfferHistoryResponse quantityApplied(Integer quantityApplied) {
    this.quantityApplied = quantityApplied;
    return this;
  }

  /**
   * Get quantityApplied
   * @return quantityApplied
   */
  @javax.annotation.Nullable
  public Integer getQuantityApplied() {
    return quantityApplied;
  }

  public void setQuantityApplied(Integer quantityApplied) {
    this.quantityApplied = quantityApplied;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokensPartnerOfferHistoryResponse tokensPartnerOfferHistoryResponse = (TokensPartnerOfferHistoryResponse) o;
    return Objects.equals(this.applyDate, tokensPartnerOfferHistoryResponse.applyDate) &&
        Objects.equals(this.isConsumable, tokensPartnerOfferHistoryResponse.isConsumable) &&
        Objects.equals(this.localizedDescription, tokensPartnerOfferHistoryResponse.localizedDescription) &&
        Objects.equals(this.localizedName, tokensPartnerOfferHistoryResponse.localizedName) &&
        Objects.equals(this.membershipId, tokensPartnerOfferHistoryResponse.membershipId) &&
        Objects.equals(this.membershipType, tokensPartnerOfferHistoryResponse.membershipType) &&
        Objects.equals(this.partnerOfferKey, tokensPartnerOfferHistoryResponse.partnerOfferKey) &&
        Objects.equals(this.quantityApplied, tokensPartnerOfferHistoryResponse.quantityApplied);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyDate, isConsumable, localizedDescription, localizedName, membershipId, membershipType, partnerOfferKey, quantityApplied);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokensPartnerOfferHistoryResponse {\n");
    sb.append("    applyDate: ").append(toIndentedString(applyDate)).append("\n");
    sb.append("    isConsumable: ").append(toIndentedString(isConsumable)).append("\n");
    sb.append("    localizedDescription: ").append(toIndentedString(localizedDescription)).append("\n");
    sb.append("    localizedName: ").append(toIndentedString(localizedName)).append("\n");
    sb.append("    membershipId: ").append(toIndentedString(membershipId)).append("\n");
    sb.append("    membershipType: ").append(toIndentedString(membershipType)).append("\n");
    sb.append("    partnerOfferKey: ").append(toIndentedString(partnerOfferKey)).append("\n");
    sb.append("    quantityApplied: ").append(toIndentedString(quantityApplied)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplyDate");
    openapiFields.add("IsConsumable");
    openapiFields.add("LocalizedDescription");
    openapiFields.add("LocalizedName");
    openapiFields.add("MembershipId");
    openapiFields.add("MembershipType");
    openapiFields.add("PartnerOfferKey");
    openapiFields.add("QuantityApplied");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TokensPartnerOfferHistoryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokensPartnerOfferHistoryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokensPartnerOfferHistoryResponse is not found in the empty JSON string", TokensPartnerOfferHistoryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TokensPartnerOfferHistoryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokensPartnerOfferHistoryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("LocalizedDescription") != null && !jsonObj.get("LocalizedDescription").isJsonNull()) && !jsonObj.get("LocalizedDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalizedDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalizedDescription").toString()));
      }
      if ((jsonObj.get("LocalizedName") != null && !jsonObj.get("LocalizedName").isJsonNull()) && !jsonObj.get("LocalizedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocalizedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocalizedName").toString()));
      }
      // validate the optional field `MembershipType`
      if (jsonObj.get("MembershipType") != null && !jsonObj.get("MembershipType").isJsonNull()) {
        MembershipTypeEnum.validateJsonElement(jsonObj.get("MembershipType"));
      }
      if ((jsonObj.get("PartnerOfferKey") != null && !jsonObj.get("PartnerOfferKey").isJsonNull()) && !jsonObj.get("PartnerOfferKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartnerOfferKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartnerOfferKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokensPartnerOfferHistoryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokensPartnerOfferHistoryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokensPartnerOfferHistoryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokensPartnerOfferHistoryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TokensPartnerOfferHistoryResponse>() {
           @Override
           public void write(JsonWriter out, TokensPartnerOfferHistoryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokensPartnerOfferHistoryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TokensPartnerOfferHistoryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TokensPartnerOfferHistoryResponse
   * @throws IOException if the JSON string is invalid with respect to TokensPartnerOfferHistoryResponse
   */
  public static TokensPartnerOfferHistoryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokensPartnerOfferHistoryResponse.class);
  }

  /**
   * Convert an instance of TokensPartnerOfferHistoryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

