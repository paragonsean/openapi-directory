/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDestinyItemQuantity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Activities can refer to one or more sets of tooltip-friendly reward data. These are the definitions for those tooltip friendly rewards.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyActivityRewardDefinition {
  public static final String SERIALIZED_NAME_REWARD_ITEMS = "rewardItems";
  @SerializedName(SERIALIZED_NAME_REWARD_ITEMS)
  private List<DestinyDestinyItemQuantity> rewardItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_REWARD_TEXT = "rewardText";
  @SerializedName(SERIALIZED_NAME_REWARD_TEXT)
  private String rewardText;

  public DestinyDefinitionsDestinyActivityRewardDefinition() {
  }

  public DestinyDefinitionsDestinyActivityRewardDefinition rewardItems(List<DestinyDestinyItemQuantity> rewardItems) {
    this.rewardItems = rewardItems;
    return this;
  }

  public DestinyDefinitionsDestinyActivityRewardDefinition addRewardItemsItem(DestinyDestinyItemQuantity rewardItemsItem) {
    if (this.rewardItems == null) {
      this.rewardItems = new ArrayList<>();
    }
    this.rewardItems.add(rewardItemsItem);
    return this;
  }

  /**
   * The \&quot;Items provided\&quot; in the reward. This is almost always a pointer to a DestinyInventoryItemDefintion for an item that you can&#39;t actually earn in-game, but that has name/description/icon information for the vague concept of the rewards you will receive. This is because the actual reward generation is non-deterministic and extremely complicated, so the best the game can do is tell you what you&#39;ll get in vague terms. And so too shall we.  Interesting trivia: you actually *do* earn these items when you complete the activity. They go into a single-slot bucket on your profile, which is how you see the pop-ups of these rewards when you complete an activity that match these \&quot;dummy\&quot; items. You can even see them if you look at the last one you earned in your profile-level inventory through the BNet API! Who said reading documentation is a waste of time?
   * @return rewardItems
   */
  @javax.annotation.Nullable
  public List<DestinyDestinyItemQuantity> getRewardItems() {
    return rewardItems;
  }

  public void setRewardItems(List<DestinyDestinyItemQuantity> rewardItems) {
    this.rewardItems = rewardItems;
  }


  public DestinyDefinitionsDestinyActivityRewardDefinition rewardText(String rewardText) {
    this.rewardText = rewardText;
    return this;
  }

  /**
   * The header for the reward set, if any.
   * @return rewardText
   */
  @javax.annotation.Nullable
  public String getRewardText() {
    return rewardText;
  }

  public void setRewardText(String rewardText) {
    this.rewardText = rewardText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyActivityRewardDefinition destinyDefinitionsDestinyActivityRewardDefinition = (DestinyDefinitionsDestinyActivityRewardDefinition) o;
    return Objects.equals(this.rewardItems, destinyDefinitionsDestinyActivityRewardDefinition.rewardItems) &&
        Objects.equals(this.rewardText, destinyDefinitionsDestinyActivityRewardDefinition.rewardText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rewardItems, rewardText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyActivityRewardDefinition {\n");
    sb.append("    rewardItems: ").append(toIndentedString(rewardItems)).append("\n");
    sb.append("    rewardText: ").append(toIndentedString(rewardText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rewardItems");
    openapiFields.add("rewardText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyActivityRewardDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyActivityRewardDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyActivityRewardDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyActivityRewardDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyActivityRewardDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyActivityRewardDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("rewardItems") != null && !jsonObj.get("rewardItems").isJsonNull()) {
        JsonArray jsonArrayrewardItems = jsonObj.getAsJsonArray("rewardItems");
        if (jsonArrayrewardItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rewardItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rewardItems` to be an array in the JSON string but got `%s`", jsonObj.get("rewardItems").toString()));
          }

          // validate the optional field `rewardItems` (array)
          for (int i = 0; i < jsonArrayrewardItems.size(); i++) {
            DestinyDestinyItemQuantity.validateJsonElement(jsonArrayrewardItems.get(i));
          };
        }
      }
      if ((jsonObj.get("rewardText") != null && !jsonObj.get("rewardText").isJsonNull()) && !jsonObj.get("rewardText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rewardText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rewardText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyActivityRewardDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyActivityRewardDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyActivityRewardDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyActivityRewardDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyActivityRewardDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyActivityRewardDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyActivityRewardDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyActivityRewardDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyActivityRewardDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyActivityRewardDefinition
   */
  public static DestinyDefinitionsDestinyActivityRewardDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyActivityRewardDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyActivityRewardDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

