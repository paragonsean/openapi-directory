/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GroupV2GetUserClanInviteSetting200Response;
import org.openapitools.client.model.SocialGetFriendList200Response;
import org.openapitools.client.model.SocialGetFriendRequestList200Response;
import org.openapitools.client.model.SocialGetPlatformFriendList200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SocialApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SocialApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SocialApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for socialAcceptFriendRequest
     * @param membershipId The membership id of the user you wish to accept. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialAcceptFriendRequestCall(String membershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Social/Friends/Requests/Accept/{membershipId}/"
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialAcceptFriendRequestValidateBeforeCall(String membershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling socialAcceptFriendRequest(Async)");
        }

        return socialAcceptFriendRequestCall(membershipId, _callback);

    }

    /**
     * 
     * Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to accept. (required)
     * @return GroupV2GetUserClanInviteSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetUserClanInviteSetting200Response socialAcceptFriendRequest(String membershipId) throws ApiException {
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResp = socialAcceptFriendRequestWithHttpInfo(membershipId);
        return localVarResp.getData();
    }

    /**
     * 
     * Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to accept. (required)
     * @return ApiResponse&lt;GroupV2GetUserClanInviteSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetUserClanInviteSetting200Response> socialAcceptFriendRequestWithHttpInfo(String membershipId) throws ApiException {
        okhttp3.Call localVarCall = socialAcceptFriendRequestValidateBeforeCall(membershipId, null);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to accept. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialAcceptFriendRequestAsync(String membershipId, final ApiCallback<GroupV2GetUserClanInviteSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialAcceptFriendRequestValidateBeforeCall(membershipId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialDeclineFriendRequest
     * @param membershipId The membership id of the user you wish to decline. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialDeclineFriendRequestCall(String membershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Social/Friends/Requests/Decline/{membershipId}/"
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialDeclineFriendRequestValidateBeforeCall(String membershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling socialDeclineFriendRequest(Async)");
        }

        return socialDeclineFriendRequestCall(membershipId, _callback);

    }

    /**
     * 
     * Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to decline. (required)
     * @return GroupV2GetUserClanInviteSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetUserClanInviteSetting200Response socialDeclineFriendRequest(String membershipId) throws ApiException {
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResp = socialDeclineFriendRequestWithHttpInfo(membershipId);
        return localVarResp.getData();
    }

    /**
     * 
     * Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to decline. (required)
     * @return ApiResponse&lt;GroupV2GetUserClanInviteSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetUserClanInviteSetting200Response> socialDeclineFriendRequestWithHttpInfo(String membershipId) throws ApiException {
        okhttp3.Call localVarCall = socialDeclineFriendRequestValidateBeforeCall(membershipId, null);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to decline. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialDeclineFriendRequestAsync(String membershipId, final ApiCallback<GroupV2GetUserClanInviteSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialDeclineFriendRequestValidateBeforeCall(membershipId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialGetFriendList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialGetFriendListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Social/Friends/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialGetFriendListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return socialGetFriendListCall(_callback);

    }

    /**
     * 
     * Returns your Bungie Friend list
     * @return SocialGetFriendList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public SocialGetFriendList200Response socialGetFriendList() throws ApiException {
        ApiResponse<SocialGetFriendList200Response> localVarResp = socialGetFriendListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns your Bungie Friend list
     * @return ApiResponse&lt;SocialGetFriendList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SocialGetFriendList200Response> socialGetFriendListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = socialGetFriendListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SocialGetFriendList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns your Bungie Friend list
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialGetFriendListAsync(final ApiCallback<SocialGetFriendList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialGetFriendListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SocialGetFriendList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialGetFriendRequestList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialGetFriendRequestListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Social/Friends/Requests/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialGetFriendRequestListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return socialGetFriendRequestListCall(_callback);

    }

    /**
     * 
     * Returns your friend request queue.
     * @return SocialGetFriendRequestList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public SocialGetFriendRequestList200Response socialGetFriendRequestList() throws ApiException {
        ApiResponse<SocialGetFriendRequestList200Response> localVarResp = socialGetFriendRequestListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns your friend request queue.
     * @return ApiResponse&lt;SocialGetFriendRequestList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SocialGetFriendRequestList200Response> socialGetFriendRequestListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = socialGetFriendRequestListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SocialGetFriendRequestList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns your friend request queue.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialGetFriendRequestListAsync(final ApiCallback<SocialGetFriendRequestList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialGetFriendRequestListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SocialGetFriendRequestList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialGetPlatformFriendList
     * @param friendPlatform The platform friend type. (required)
     * @param page The zero based page to return. Page size is 100. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialGetPlatformFriendListCall(Integer friendPlatform, String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Social/PlatformFriends/{friendPlatform}/{page}/"
            .replace("{" + "friendPlatform" + "}", localVarApiClient.escapeString(friendPlatform.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialGetPlatformFriendListValidateBeforeCall(Integer friendPlatform, String page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'friendPlatform' is set
        if (friendPlatform == null) {
            throw new ApiException("Missing the required parameter 'friendPlatform' when calling socialGetPlatformFriendList(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling socialGetPlatformFriendList(Async)");
        }

        return socialGetPlatformFriendListCall(friendPlatform, page, _callback);

    }

    /**
     * 
     * Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
     * @param friendPlatform The platform friend type. (required)
     * @param page The zero based page to return. Page size is 100. (required)
     * @return SocialGetPlatformFriendList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public SocialGetPlatformFriendList200Response socialGetPlatformFriendList(Integer friendPlatform, String page) throws ApiException {
        ApiResponse<SocialGetPlatformFriendList200Response> localVarResp = socialGetPlatformFriendListWithHttpInfo(friendPlatform, page);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
     * @param friendPlatform The platform friend type. (required)
     * @param page The zero based page to return. Page size is 100. (required)
     * @return ApiResponse&lt;SocialGetPlatformFriendList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SocialGetPlatformFriendList200Response> socialGetPlatformFriendListWithHttpInfo(Integer friendPlatform, String page) throws ApiException {
        okhttp3.Call localVarCall = socialGetPlatformFriendListValidateBeforeCall(friendPlatform, page, null);
        Type localVarReturnType = new TypeToken<SocialGetPlatformFriendList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
     * @param friendPlatform The platform friend type. (required)
     * @param page The zero based page to return. Page size is 100. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialGetPlatformFriendListAsync(Integer friendPlatform, String page, final ApiCallback<SocialGetPlatformFriendList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialGetPlatformFriendListValidateBeforeCall(friendPlatform, page, _callback);
        Type localVarReturnType = new TypeToken<SocialGetPlatformFriendList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialIssueFriendRequest
     * @param membershipId The membership id of the user you wish to add. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialIssueFriendRequestCall(String membershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Social/Friends/Add/{membershipId}/"
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialIssueFriendRequestValidateBeforeCall(String membershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling socialIssueFriendRequest(Async)");
        }

        return socialIssueFriendRequestCall(membershipId, _callback);

    }

    /**
     * 
     * Requests a friend relationship with the target user. Any of the target user&#39;s linked membership ids are valid inputs.
     * @param membershipId The membership id of the user you wish to add. (required)
     * @return GroupV2GetUserClanInviteSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetUserClanInviteSetting200Response socialIssueFriendRequest(String membershipId) throws ApiException {
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResp = socialIssueFriendRequestWithHttpInfo(membershipId);
        return localVarResp.getData();
    }

    /**
     * 
     * Requests a friend relationship with the target user. Any of the target user&#39;s linked membership ids are valid inputs.
     * @param membershipId The membership id of the user you wish to add. (required)
     * @return ApiResponse&lt;GroupV2GetUserClanInviteSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetUserClanInviteSetting200Response> socialIssueFriendRequestWithHttpInfo(String membershipId) throws ApiException {
        okhttp3.Call localVarCall = socialIssueFriendRequestValidateBeforeCall(membershipId, null);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Requests a friend relationship with the target user. Any of the target user&#39;s linked membership ids are valid inputs.
     * @param membershipId The membership id of the user you wish to add. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialIssueFriendRequestAsync(String membershipId, final ApiCallback<GroupV2GetUserClanInviteSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialIssueFriendRequestValidateBeforeCall(membershipId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialRemoveFriend
     * @param membershipId The membership id of the user you wish to remove. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialRemoveFriendCall(String membershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Social/Friends/Remove/{membershipId}/"
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialRemoveFriendValidateBeforeCall(String membershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling socialRemoveFriend(Async)");
        }

        return socialRemoveFriendCall(membershipId, _callback);

    }

    /**
     * 
     * Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to remove. (required)
     * @return GroupV2GetUserClanInviteSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetUserClanInviteSetting200Response socialRemoveFriend(String membershipId) throws ApiException {
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResp = socialRemoveFriendWithHttpInfo(membershipId);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to remove. (required)
     * @return ApiResponse&lt;GroupV2GetUserClanInviteSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetUserClanInviteSetting200Response> socialRemoveFriendWithHttpInfo(String membershipId) throws ApiException {
        okhttp3.Call localVarCall = socialRemoveFriendValidateBeforeCall(membershipId, null);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to remove. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialRemoveFriendAsync(String membershipId, final ApiCallback<GroupV2GetUserClanInviteSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialRemoveFriendValidateBeforeCall(membershipId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialRemoveFriendRequest
     * @param membershipId The membership id of the user you wish to remove. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialRemoveFriendRequestCall(String membershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Social/Friends/Requests/Remove/{membershipId}/"
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialRemoveFriendRequestValidateBeforeCall(String membershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling socialRemoveFriendRequest(Async)");
        }

        return socialRemoveFriendRequestCall(membershipId, _callback);

    }

    /**
     * 
     * Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to remove. (required)
     * @return GroupV2GetUserClanInviteSetting200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GroupV2GetUserClanInviteSetting200Response socialRemoveFriendRequest(String membershipId) throws ApiException {
        ApiResponse<GroupV2GetUserClanInviteSetting200Response> localVarResp = socialRemoveFriendRequestWithHttpInfo(membershipId);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to remove. (required)
     * @return ApiResponse&lt;GroupV2GetUserClanInviteSetting200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupV2GetUserClanInviteSetting200Response> socialRemoveFriendRequestWithHttpInfo(String membershipId) throws ApiException {
        okhttp3.Call localVarCall = socialRemoveFriendRequestValidateBeforeCall(membershipId, null);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
     * @param membershipId The membership id of the user you wish to remove. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialRemoveFriendRequestAsync(String membershipId, final ApiCallback<GroupV2GetUserClanInviteSetting200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialRemoveFriendRequestValidateBeforeCall(membershipId, _callback);
        Type localVarReturnType = new TypeToken<GroupV2GetUserClanInviteSetting200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
