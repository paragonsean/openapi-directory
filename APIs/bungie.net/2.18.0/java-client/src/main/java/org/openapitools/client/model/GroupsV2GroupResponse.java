/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GroupsV2GroupMember;
import org.openapitools.client.model.GroupsV2GroupPotentialMember;
import org.openapitools.client.model.GroupsV2GroupV2;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GroupsV2GroupResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupsV2GroupResponse {
  public static final String SERIALIZED_NAME_ALLIANCE_STATUS = "allianceStatus";
  @SerializedName(SERIALIZED_NAME_ALLIANCE_STATUS)
  private Integer allianceStatus;

  public static final String SERIALIZED_NAME_ALLIED_IDS = "alliedIds";
  @SerializedName(SERIALIZED_NAME_ALLIED_IDS)
  private List<Long> alliedIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENT_USER_MEMBER_MAP = "currentUserMemberMap";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_MEMBER_MAP)
  private Map<String, GroupsV2GroupMember> currentUserMemberMap = new HashMap<>();

  public static final String SERIALIZED_NAME_CURRENT_USER_MEMBERSHIPS_INACTIVE_FOR_DESTINY = "currentUserMembershipsInactiveForDestiny";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_MEMBERSHIPS_INACTIVE_FOR_DESTINY)
  private Boolean currentUserMembershipsInactiveForDestiny;

  public static final String SERIALIZED_NAME_CURRENT_USER_POTENTIAL_MEMBER_MAP = "currentUserPotentialMemberMap";
  @SerializedName(SERIALIZED_NAME_CURRENT_USER_POTENTIAL_MEMBER_MAP)
  private Map<String, GroupsV2GroupPotentialMember> currentUserPotentialMemberMap = new HashMap<>();

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private GroupsV2GroupV2 detail;

  public static final String SERIALIZED_NAME_FOUNDER = "founder";
  @SerializedName(SERIALIZED_NAME_FOUNDER)
  private GroupsV2GroupMember founder;

  public static final String SERIALIZED_NAME_GROUP_JOIN_INVITE_COUNT = "groupJoinInviteCount";
  @SerializedName(SERIALIZED_NAME_GROUP_JOIN_INVITE_COUNT)
  private Integer groupJoinInviteCount;

  public static final String SERIALIZED_NAME_PARENT_GROUP = "parentGroup";
  @SerializedName(SERIALIZED_NAME_PARENT_GROUP)
  private GroupsV2GroupV2 parentGroup;

  public GroupsV2GroupResponse() {
  }

  public GroupsV2GroupResponse allianceStatus(Integer allianceStatus) {
    this.allianceStatus = allianceStatus;
    return this;
  }

  /**
   * Get allianceStatus
   * @return allianceStatus
   */
  @javax.annotation.Nullable
  public Integer getAllianceStatus() {
    return allianceStatus;
  }

  public void setAllianceStatus(Integer allianceStatus) {
    this.allianceStatus = allianceStatus;
  }


  public GroupsV2GroupResponse alliedIds(List<Long> alliedIds) {
    this.alliedIds = alliedIds;
    return this;
  }

  public GroupsV2GroupResponse addAlliedIdsItem(Long alliedIdsItem) {
    if (this.alliedIds == null) {
      this.alliedIds = new ArrayList<>();
    }
    this.alliedIds.add(alliedIdsItem);
    return this;
  }

  /**
   * Get alliedIds
   * @return alliedIds
   */
  @javax.annotation.Nullable
  public List<Long> getAlliedIds() {
    return alliedIds;
  }

  public void setAlliedIds(List<Long> alliedIds) {
    this.alliedIds = alliedIds;
  }


  public GroupsV2GroupResponse currentUserMemberMap(Map<String, GroupsV2GroupMember> currentUserMemberMap) {
    this.currentUserMemberMap = currentUserMemberMap;
    return this;
  }

  public GroupsV2GroupResponse putCurrentUserMemberMapItem(String key, GroupsV2GroupMember currentUserMemberMapItem) {
    if (this.currentUserMemberMap == null) {
      this.currentUserMemberMap = new HashMap<>();
    }
    this.currentUserMemberMap.put(key, currentUserMemberMapItem);
    return this;
  }

  /**
   * This property will be populated if the authenticated user is a member of the group. Note that because of account linking, a user can sometimes be part of a clan more than once. As such, this returns the highest member type available.
   * @return currentUserMemberMap
   */
  @javax.annotation.Nullable
  public Map<String, GroupsV2GroupMember> getCurrentUserMemberMap() {
    return currentUserMemberMap;
  }

  public void setCurrentUserMemberMap(Map<String, GroupsV2GroupMember> currentUserMemberMap) {
    this.currentUserMemberMap = currentUserMemberMap;
  }


  public GroupsV2GroupResponse currentUserMembershipsInactiveForDestiny(Boolean currentUserMembershipsInactiveForDestiny) {
    this.currentUserMembershipsInactiveForDestiny = currentUserMembershipsInactiveForDestiny;
    return this;
  }

  /**
   * A convenience property that indicates if every membership you (the current user) have that is a part of this group are part of an account that is considered inactive - for example, overridden accounts in Cross Save.
   * @return currentUserMembershipsInactiveForDestiny
   */
  @javax.annotation.Nullable
  public Boolean getCurrentUserMembershipsInactiveForDestiny() {
    return currentUserMembershipsInactiveForDestiny;
  }

  public void setCurrentUserMembershipsInactiveForDestiny(Boolean currentUserMembershipsInactiveForDestiny) {
    this.currentUserMembershipsInactiveForDestiny = currentUserMembershipsInactiveForDestiny;
  }


  public GroupsV2GroupResponse currentUserPotentialMemberMap(Map<String, GroupsV2GroupPotentialMember> currentUserPotentialMemberMap) {
    this.currentUserPotentialMemberMap = currentUserPotentialMemberMap;
    return this;
  }

  public GroupsV2GroupResponse putCurrentUserPotentialMemberMapItem(String key, GroupsV2GroupPotentialMember currentUserPotentialMemberMapItem) {
    if (this.currentUserPotentialMemberMap == null) {
      this.currentUserPotentialMemberMap = new HashMap<>();
    }
    this.currentUserPotentialMemberMap.put(key, currentUserPotentialMemberMapItem);
    return this;
  }

  /**
   * This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join. Note that because of account linking, a user can sometimes be part of a clan more than once.
   * @return currentUserPotentialMemberMap
   */
  @javax.annotation.Nullable
  public Map<String, GroupsV2GroupPotentialMember> getCurrentUserPotentialMemberMap() {
    return currentUserPotentialMemberMap;
  }

  public void setCurrentUserPotentialMemberMap(Map<String, GroupsV2GroupPotentialMember> currentUserPotentialMemberMap) {
    this.currentUserPotentialMemberMap = currentUserPotentialMemberMap;
  }


  public GroupsV2GroupResponse detail(GroupsV2GroupV2 detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Get detail
   * @return detail
   */
  @javax.annotation.Nullable
  public GroupsV2GroupV2 getDetail() {
    return detail;
  }

  public void setDetail(GroupsV2GroupV2 detail) {
    this.detail = detail;
  }


  public GroupsV2GroupResponse founder(GroupsV2GroupMember founder) {
    this.founder = founder;
    return this;
  }

  /**
   * Get founder
   * @return founder
   */
  @javax.annotation.Nullable
  public GroupsV2GroupMember getFounder() {
    return founder;
  }

  public void setFounder(GroupsV2GroupMember founder) {
    this.founder = founder;
  }


  public GroupsV2GroupResponse groupJoinInviteCount(Integer groupJoinInviteCount) {
    this.groupJoinInviteCount = groupJoinInviteCount;
    return this;
  }

  /**
   * Get groupJoinInviteCount
   * @return groupJoinInviteCount
   */
  @javax.annotation.Nullable
  public Integer getGroupJoinInviteCount() {
    return groupJoinInviteCount;
  }

  public void setGroupJoinInviteCount(Integer groupJoinInviteCount) {
    this.groupJoinInviteCount = groupJoinInviteCount;
  }


  public GroupsV2GroupResponse parentGroup(GroupsV2GroupV2 parentGroup) {
    this.parentGroup = parentGroup;
    return this;
  }

  /**
   * Get parentGroup
   * @return parentGroup
   */
  @javax.annotation.Nullable
  public GroupsV2GroupV2 getParentGroup() {
    return parentGroup;
  }

  public void setParentGroup(GroupsV2GroupV2 parentGroup) {
    this.parentGroup = parentGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupsV2GroupResponse groupsV2GroupResponse = (GroupsV2GroupResponse) o;
    return Objects.equals(this.allianceStatus, groupsV2GroupResponse.allianceStatus) &&
        Objects.equals(this.alliedIds, groupsV2GroupResponse.alliedIds) &&
        Objects.equals(this.currentUserMemberMap, groupsV2GroupResponse.currentUserMemberMap) &&
        Objects.equals(this.currentUserMembershipsInactiveForDestiny, groupsV2GroupResponse.currentUserMembershipsInactiveForDestiny) &&
        Objects.equals(this.currentUserPotentialMemberMap, groupsV2GroupResponse.currentUserPotentialMemberMap) &&
        Objects.equals(this.detail, groupsV2GroupResponse.detail) &&
        Objects.equals(this.founder, groupsV2GroupResponse.founder) &&
        Objects.equals(this.groupJoinInviteCount, groupsV2GroupResponse.groupJoinInviteCount) &&
        Objects.equals(this.parentGroup, groupsV2GroupResponse.parentGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allianceStatus, alliedIds, currentUserMemberMap, currentUserMembershipsInactiveForDestiny, currentUserPotentialMemberMap, detail, founder, groupJoinInviteCount, parentGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupsV2GroupResponse {\n");
    sb.append("    allianceStatus: ").append(toIndentedString(allianceStatus)).append("\n");
    sb.append("    alliedIds: ").append(toIndentedString(alliedIds)).append("\n");
    sb.append("    currentUserMemberMap: ").append(toIndentedString(currentUserMemberMap)).append("\n");
    sb.append("    currentUserMembershipsInactiveForDestiny: ").append(toIndentedString(currentUserMembershipsInactiveForDestiny)).append("\n");
    sb.append("    currentUserPotentialMemberMap: ").append(toIndentedString(currentUserPotentialMemberMap)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    founder: ").append(toIndentedString(founder)).append("\n");
    sb.append("    groupJoinInviteCount: ").append(toIndentedString(groupJoinInviteCount)).append("\n");
    sb.append("    parentGroup: ").append(toIndentedString(parentGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allianceStatus");
    openapiFields.add("alliedIds");
    openapiFields.add("currentUserMemberMap");
    openapiFields.add("currentUserMembershipsInactiveForDestiny");
    openapiFields.add("currentUserPotentialMemberMap");
    openapiFields.add("detail");
    openapiFields.add("founder");
    openapiFields.add("groupJoinInviteCount");
    openapiFields.add("parentGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupsV2GroupResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupsV2GroupResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupsV2GroupResponse is not found in the empty JSON string", GroupsV2GroupResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupsV2GroupResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupsV2GroupResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("alliedIds") != null && !jsonObj.get("alliedIds").isJsonNull() && !jsonObj.get("alliedIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alliedIds` to be an array in the JSON string but got `%s`", jsonObj.get("alliedIds").toString()));
      }
      // validate the optional field `detail`
      if (jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) {
        GroupsV2GroupV2.validateJsonElement(jsonObj.get("detail"));
      }
      // validate the optional field `founder`
      if (jsonObj.get("founder") != null && !jsonObj.get("founder").isJsonNull()) {
        GroupsV2GroupMember.validateJsonElement(jsonObj.get("founder"));
      }
      // validate the optional field `parentGroup`
      if (jsonObj.get("parentGroup") != null && !jsonObj.get("parentGroup").isJsonNull()) {
        GroupsV2GroupV2.validateJsonElement(jsonObj.get("parentGroup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupsV2GroupResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupsV2GroupResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupsV2GroupResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupsV2GroupResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupsV2GroupResponse>() {
           @Override
           public void write(JsonWriter out, GroupsV2GroupResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupsV2GroupResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupsV2GroupResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupsV2GroupResponse
   * @throws IOException if the JSON string is invalid with respect to GroupsV2GroupResponse
   */
  public static GroupsV2GroupResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupsV2GroupResponse.class);
  }

  /**
   * Convert an instance of GroupsV2GroupResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

