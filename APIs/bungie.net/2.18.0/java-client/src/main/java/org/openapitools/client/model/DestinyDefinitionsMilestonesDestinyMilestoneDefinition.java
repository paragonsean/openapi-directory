/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition;
import org.openapitools.client.model.DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition;
import org.openapitools.client.model.DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition;
import org.openapitools.client.model.DestinyDefinitionsMilestonesDestinyMilestoneValueDefinition;
import org.openapitools.client.model.DestinyDefinitionsMilestonesDestinyMilestoneVendorDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Milestones are an in-game concept where they&#39;re attempting to tell you what you can do next in-game.  If that sounds a lot like Advisors in Destiny 1, it is! So we threw out Advisors in the Destiny 2 API and tacked all of the data we would have put on Advisors onto Milestones instead.  Each Milestone represents something going on in the game right now:  - A \&quot;ritual activity\&quot; you can perform, like nightfall  - A \&quot;special event\&quot; that may have activities related to it, like Taco Tuesday (there&#39;s no Taco Tuesday in Destiny 2)  - A checklist you can fulfill, like helping your Clan complete all of its weekly objectives  - A tutorial quest you can play through, like the introduction to the Crucible.  Most of these milestones appear in game as well. Some of them are BNet only, because we&#39;re so extra. You&#39;re welcome.  There are some important caveats to understand about how we currently render Milestones and their deficiencies. The game currently doesn&#39;t have any content that actually tells you oughtright *what* the Milestone is: that is to say, what you&#39;ll be doing. The best we get is either a description of the overall Milestone, or of the Quest that the Milestone is having you partake in: which is usually something that assumes you already know what it&#39;s talking about, like \&quot;Complete 5 Challenges\&quot;. 5 Challenges for what? What&#39;s a challenge? These are not questions that the Milestone data will answer for you unfortunately.  This isn&#39;t great, and in the future I&#39;d like to add some custom text to give you more contextual information to pass on to your users. But for now, you can do what we do to render what little display info we do have:  Start by looking at the currently active quest (ideally, you&#39;ve fetched DestinyMilestone or DestinyPublicMilestone data from the API, so you know the currently active quest for the Milestone in question). Look up the Quests property in the Milestone Definition, and check if it has display properties. If it does, show that as the description of the Milestone. If it doesn&#39;t, fall back on the Milestone&#39;s description.  This approach will let you avoid, whenever possible, the even less useful (and sometimes nonexistant) milestone-level names and descriptions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsMilestonesDestinyMilestoneDefinition {
  public static final String SERIALIZED_NAME_ACTIVITIES = "activities";
  @SerializedName(SERIALIZED_NAME_ACTIVITIES)
  private List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition> activities = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_ORDER = "defaultOrder";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ORDER)
  private Integer defaultOrder;

  public static final String SERIALIZED_NAME_DISPLAY_PREFERENCE = "displayPreference";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PREFERENCE)
  private Integer displayPreference;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_EXPLORE_PRIORITIZES_ACTIVITY_IMAGE = "explorePrioritizesActivityImage";
  @SerializedName(SERIALIZED_NAME_EXPLORE_PRIORITIZES_ACTIVITY_IMAGE)
  private Boolean explorePrioritizesActivityImage;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_HAS_PREDICTABLE_DATES = "hasPredictableDates";
  @SerializedName(SERIALIZED_NAME_HAS_PREDICTABLE_DATES)
  private Boolean hasPredictableDates;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_IS_IN_GAME_MILESTONE = "isInGameMilestone";
  @SerializedName(SERIALIZED_NAME_IS_IN_GAME_MILESTONE)
  private Boolean isInGameMilestone;

  public static final String SERIALIZED_NAME_MILESTONE_TYPE = "milestoneType";
  @SerializedName(SERIALIZED_NAME_MILESTONE_TYPE)
  private Integer milestoneType;

  public static final String SERIALIZED_NAME_QUESTS = "quests";
  @SerializedName(SERIALIZED_NAME_QUESTS)
  private Map<String, DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition> quests = new HashMap<>();

  public static final String SERIALIZED_NAME_RECRUITABLE = "recruitable";
  @SerializedName(SERIALIZED_NAME_RECRUITABLE)
  private Boolean recruitable;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_REWARDS = "rewards";
  @SerializedName(SERIALIZED_NAME_REWARDS)
  private Map<String, DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition> rewards = new HashMap<>();

  public static final String SERIALIZED_NAME_SHOW_IN_EXPLORER = "showInExplorer";
  @SerializedName(SERIALIZED_NAME_SHOW_IN_EXPLORER)
  private Boolean showInExplorer;

  public static final String SERIALIZED_NAME_SHOW_IN_MILESTONES = "showInMilestones";
  @SerializedName(SERIALIZED_NAME_SHOW_IN_MILESTONES)
  private Boolean showInMilestones;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private Map<String, DestinyDefinitionsMilestonesDestinyMilestoneValueDefinition> values = new HashMap<>();

  public static final String SERIALIZED_NAME_VENDORS = "vendors";
  @SerializedName(SERIALIZED_NAME_VENDORS)
  private List<DestinyDefinitionsMilestonesDestinyMilestoneVendorDefinition> vendors = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENDORS_DISPLAY_TITLE = "vendorsDisplayTitle";
  @SerializedName(SERIALIZED_NAME_VENDORS_DISPLAY_TITLE)
  private String vendorsDisplayTitle;

  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition() {
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition activities(List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition> activities) {
    this.activities = activities;
    return this;
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition addActivitiesItem(DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition activitiesItem) {
    if (this.activities == null) {
      this.activities = new ArrayList<>();
    }
    this.activities.add(activitiesItem);
    return this;
  }

  /**
   * A Milestone can now be represented by one or more activities directly (without a backing Quest), and that activity can have many challenges, modifiers, and related to it.
   * @return activities
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition> getActivities() {
    return activities;
  }

  public void setActivities(List<DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition> activities) {
    this.activities = activities;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition defaultOrder(Integer defaultOrder) {
    this.defaultOrder = defaultOrder;
    return this;
  }

  /**
   * Get defaultOrder
   * @return defaultOrder
   */
  @javax.annotation.Nullable
  public Integer getDefaultOrder() {
    return defaultOrder;
  }

  public void setDefaultOrder(Integer defaultOrder) {
    this.defaultOrder = defaultOrder;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition displayPreference(Integer displayPreference) {
    this.displayPreference = displayPreference;
    return this;
  }

  /**
   * A hint to the UI to indicate what to show as the display properties for this Milestone when showing \&quot;Live\&quot; milestone data. Feel free to show more than this if desired: this hint is meant to simplify our own UI, but it may prove useful to you as well.
   * @return displayPreference
   */
  @javax.annotation.Nullable
  public Integer getDisplayPreference() {
    return displayPreference;
  }

  public void setDisplayPreference(Integer displayPreference) {
    this.displayPreference = displayPreference;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition explorePrioritizesActivityImage(Boolean explorePrioritizesActivityImage) {
    this.explorePrioritizesActivityImage = explorePrioritizesActivityImage;
    return this;
  }

  /**
   * If TRUE, \&quot;Explore Destiny\&quot; (the front page of BNet and the companion app) prioritize using the activity image over any overriding Quest or Milestone image provided. This unfortunate hack is brought to you by Trials of The Nine.
   * @return explorePrioritizesActivityImage
   */
  @javax.annotation.Nullable
  public Boolean getExplorePrioritizesActivityImage() {
    return explorePrioritizesActivityImage;
  }

  public void setExplorePrioritizesActivityImage(Boolean explorePrioritizesActivityImage) {
    this.explorePrioritizesActivityImage = explorePrioritizesActivityImage;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * If the milestone has a friendly identifier for association with other features - such as Recruiting - that identifier can be found here. This is \&quot;friendly\&quot; in that it looks better in a URL than whatever the identifier for the Milestone actually is.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition hasPredictableDates(Boolean hasPredictableDates) {
    this.hasPredictableDates = hasPredictableDates;
    return this;
  }

  /**
   * A shortcut for clients - and the server - to understand whether we can predict the start and end dates for this event. In practice, there are multiple ways that an event could have predictable date ranges, but not all events will be able to be predicted via any mechanism (for instance, events that are manually triggered on and off)
   * @return hasPredictableDates
   */
  @javax.annotation.Nullable
  public Boolean getHasPredictableDates() {
    return hasPredictableDates;
  }

  public void setHasPredictableDates(Boolean hasPredictableDates) {
    this.hasPredictableDates = hasPredictableDates;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition image(String image) {
    this.image = image;
    return this;
  }

  /**
   * A custom image someone made just for the milestone. Isn&#39;t that special?
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition isInGameMilestone(Boolean isInGameMilestone) {
    this.isInGameMilestone = isInGameMilestone;
    return this;
  }

  /**
   * Some milestones are explicit objectives that you can see and interact with in the game. Some milestones are more conceptual, built by BNet to help advise you on activities and events that happen in-game but that aren&#39;t explicitly shown in game as Milestones. If this is TRUE, you can see this as a milestone in the game. If this is FALSE, it&#39;s an event or activity you can participate in, but you won&#39;t see it as a Milestone in the game&#39;s UI.
   * @return isInGameMilestone
   */
  @javax.annotation.Nullable
  public Boolean getIsInGameMilestone() {
    return isInGameMilestone;
  }

  public void setIsInGameMilestone(Boolean isInGameMilestone) {
    this.isInGameMilestone = isInGameMilestone;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition milestoneType(Integer milestoneType) {
    this.milestoneType = milestoneType;
    return this;
  }

  /**
   * An enumeration listing one of the possible types of milestones. Check out the DestinyMilestoneType enum for more info!
   * @return milestoneType
   */
  @javax.annotation.Nullable
  public Integer getMilestoneType() {
    return milestoneType;
  }

  public void setMilestoneType(Integer milestoneType) {
    this.milestoneType = milestoneType;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition quests(Map<String, DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition> quests) {
    this.quests = quests;
    return this;
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition putQuestsItem(String key, DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition questsItem) {
    if (this.quests == null) {
      this.quests = new HashMap<>();
    }
    this.quests.put(key, questsItem);
    return this;
  }

  /**
   * The full set of possible Quests that give the overview of the Milestone event/activity in question. Only one of these can be active at a time for a given Conceptual Milestone, but many of them may be \&quot;available\&quot; for the user to choose from. (for instance, with Milestones you can choose from the three available Quests, but only one can be active at a time) Keyed by the quest item.  As of Forsaken (~September 2018), Quest-style Milestones are being removed for many types of activities. There will likely be further revisions to the Milestone concept in the future.
   * @return quests
   */
  @javax.annotation.Nullable
  public Map<String, DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition> getQuests() {
    return quests;
  }

  public void setQuests(Map<String, DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition> quests) {
    this.quests = quests;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition recruitable(Boolean recruitable) {
    this.recruitable = recruitable;
    return this;
  }

  /**
   * If True, then the Milestone has been integrated with BNet&#39;s recruiting feature.
   * @return recruitable
   */
  @javax.annotation.Nullable
  public Boolean getRecruitable() {
    return recruitable;
  }

  public void setRecruitable(Boolean recruitable) {
    this.recruitable = recruitable;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition rewards(Map<String, DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition> rewards) {
    this.rewards = rewards;
    return this;
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition putRewardsItem(String key, DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition rewardsItem) {
    if (this.rewards == null) {
      this.rewards = new HashMap<>();
    }
    this.rewards.put(key, rewardsItem);
    return this;
  }

  /**
   * If this milestone can provide rewards, this will define the categories into which the individual reward entries are placed.  This is keyed by the Category&#39;s hash, which is only guaranteed to be unique within a given Milestone.
   * @return rewards
   */
  @javax.annotation.Nullable
  public Map<String, DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition> getRewards() {
    return rewards;
  }

  public void setRewards(Map<String, DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition> rewards) {
    this.rewards = rewards;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition showInExplorer(Boolean showInExplorer) {
    this.showInExplorer = showInExplorer;
    return this;
  }

  /**
   * If TRUE, this entry should be returned in the list of milestones for the \&quot;Explore Destiny\&quot; (i.e. new BNet homepage) features of Bungie.net (as long as the underlying event is active) Note that this is a property specifically used by BNet and the companion app for the \&quot;Live Events\&quot; feature of the front page/welcome view: it&#39;s not a reflection of what you see in-game.
   * @return showInExplorer
   */
  @javax.annotation.Nullable
  public Boolean getShowInExplorer() {
    return showInExplorer;
  }

  public void setShowInExplorer(Boolean showInExplorer) {
    this.showInExplorer = showInExplorer;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition showInMilestones(Boolean showInMilestones) {
    this.showInMilestones = showInMilestones;
    return this;
  }

  /**
   * Determines whether we&#39;ll show this Milestone in the user&#39;s personal Milestones list.
   * @return showInMilestones
   */
  @javax.annotation.Nullable
  public Boolean getShowInMilestones() {
    return showInMilestones;
  }

  public void setShowInMilestones(Boolean showInMilestones) {
    this.showInMilestones = showInMilestones;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition values(Map<String, DestinyDefinitionsMilestonesDestinyMilestoneValueDefinition> values) {
    this.values = values;
    return this;
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition putValuesItem(String key, DestinyDefinitionsMilestonesDestinyMilestoneValueDefinition valuesItem) {
    if (this.values == null) {
      this.values = new HashMap<>();
    }
    this.values.put(key, valuesItem);
    return this;
  }

  /**
   * Sometimes, milestones will have arbitrary values associated with them that are of interest to us or to third party developers. This is the collection of those values&#39; definitions, keyed by the identifier of the value and providing useful definition information such as localizable names and descriptions for the value.
   * @return values
   */
  @javax.annotation.Nullable
  public Map<String, DestinyDefinitionsMilestonesDestinyMilestoneValueDefinition> getValues() {
    return values;
  }

  public void setValues(Map<String, DestinyDefinitionsMilestonesDestinyMilestoneValueDefinition> values) {
    this.values = values;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition vendors(List<DestinyDefinitionsMilestonesDestinyMilestoneVendorDefinition> vendors) {
    this.vendors = vendors;
    return this;
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition addVendorsItem(DestinyDefinitionsMilestonesDestinyMilestoneVendorDefinition vendorsItem) {
    if (this.vendors == null) {
      this.vendors = new ArrayList<>();
    }
    this.vendors.add(vendorsItem);
    return this;
  }

  /**
   * Sometimes, milestones will have rewards provided by Vendors. This definition gives the information needed to understand which vendors are relevant, the order in which they should be returned if order matters, and the conditions under which the Vendor is relevant to the user.
   * @return vendors
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsMilestonesDestinyMilestoneVendorDefinition> getVendors() {
    return vendors;
  }

  public void setVendors(List<DestinyDefinitionsMilestonesDestinyMilestoneVendorDefinition> vendors) {
    this.vendors = vendors;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneDefinition vendorsDisplayTitle(String vendorsDisplayTitle) {
    this.vendorsDisplayTitle = vendorsDisplayTitle;
    return this;
  }

  /**
   * If you&#39;re going to show Vendors for the Milestone, you can use this as a localized \&quot;header\&quot; for the section where you show that vendor data. It&#39;ll provide a more context-relevant clue about what the vendor&#39;s role is in the Milestone.
   * @return vendorsDisplayTitle
   */
  @javax.annotation.Nullable
  public String getVendorsDisplayTitle() {
    return vendorsDisplayTitle;
  }

  public void setVendorsDisplayTitle(String vendorsDisplayTitle) {
    this.vendorsDisplayTitle = vendorsDisplayTitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsMilestonesDestinyMilestoneDefinition destinyDefinitionsMilestonesDestinyMilestoneDefinition = (DestinyDefinitionsMilestonesDestinyMilestoneDefinition) o;
    return Objects.equals(this.activities, destinyDefinitionsMilestonesDestinyMilestoneDefinition.activities) &&
        Objects.equals(this.defaultOrder, destinyDefinitionsMilestonesDestinyMilestoneDefinition.defaultOrder) &&
        Objects.equals(this.displayPreference, destinyDefinitionsMilestonesDestinyMilestoneDefinition.displayPreference) &&
        Objects.equals(this.displayProperties, destinyDefinitionsMilestonesDestinyMilestoneDefinition.displayProperties) &&
        Objects.equals(this.explorePrioritizesActivityImage, destinyDefinitionsMilestonesDestinyMilestoneDefinition.explorePrioritizesActivityImage) &&
        Objects.equals(this.friendlyName, destinyDefinitionsMilestonesDestinyMilestoneDefinition.friendlyName) &&
        Objects.equals(this.hasPredictableDates, destinyDefinitionsMilestonesDestinyMilestoneDefinition.hasPredictableDates) &&
        Objects.equals(this.hash, destinyDefinitionsMilestonesDestinyMilestoneDefinition.hash) &&
        Objects.equals(this.image, destinyDefinitionsMilestonesDestinyMilestoneDefinition.image) &&
        Objects.equals(this.index, destinyDefinitionsMilestonesDestinyMilestoneDefinition.index) &&
        Objects.equals(this.isInGameMilestone, destinyDefinitionsMilestonesDestinyMilestoneDefinition.isInGameMilestone) &&
        Objects.equals(this.milestoneType, destinyDefinitionsMilestonesDestinyMilestoneDefinition.milestoneType) &&
        Objects.equals(this.quests, destinyDefinitionsMilestonesDestinyMilestoneDefinition.quests) &&
        Objects.equals(this.recruitable, destinyDefinitionsMilestonesDestinyMilestoneDefinition.recruitable) &&
        Objects.equals(this.redacted, destinyDefinitionsMilestonesDestinyMilestoneDefinition.redacted) &&
        Objects.equals(this.rewards, destinyDefinitionsMilestonesDestinyMilestoneDefinition.rewards) &&
        Objects.equals(this.showInExplorer, destinyDefinitionsMilestonesDestinyMilestoneDefinition.showInExplorer) &&
        Objects.equals(this.showInMilestones, destinyDefinitionsMilestonesDestinyMilestoneDefinition.showInMilestones) &&
        Objects.equals(this.values, destinyDefinitionsMilestonesDestinyMilestoneDefinition.values) &&
        Objects.equals(this.vendors, destinyDefinitionsMilestonesDestinyMilestoneDefinition.vendors) &&
        Objects.equals(this.vendorsDisplayTitle, destinyDefinitionsMilestonesDestinyMilestoneDefinition.vendorsDisplayTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activities, defaultOrder, displayPreference, displayProperties, explorePrioritizesActivityImage, friendlyName, hasPredictableDates, hash, image, index, isInGameMilestone, milestoneType, quests, recruitable, redacted, rewards, showInExplorer, showInMilestones, values, vendors, vendorsDisplayTitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsMilestonesDestinyMilestoneDefinition {\n");
    sb.append("    activities: ").append(toIndentedString(activities)).append("\n");
    sb.append("    defaultOrder: ").append(toIndentedString(defaultOrder)).append("\n");
    sb.append("    displayPreference: ").append(toIndentedString(displayPreference)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    explorePrioritizesActivityImage: ").append(toIndentedString(explorePrioritizesActivityImage)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    hasPredictableDates: ").append(toIndentedString(hasPredictableDates)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    isInGameMilestone: ").append(toIndentedString(isInGameMilestone)).append("\n");
    sb.append("    milestoneType: ").append(toIndentedString(milestoneType)).append("\n");
    sb.append("    quests: ").append(toIndentedString(quests)).append("\n");
    sb.append("    recruitable: ").append(toIndentedString(recruitable)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    rewards: ").append(toIndentedString(rewards)).append("\n");
    sb.append("    showInExplorer: ").append(toIndentedString(showInExplorer)).append("\n");
    sb.append("    showInMilestones: ").append(toIndentedString(showInMilestones)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    vendors: ").append(toIndentedString(vendors)).append("\n");
    sb.append("    vendorsDisplayTitle: ").append(toIndentedString(vendorsDisplayTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activities");
    openapiFields.add("defaultOrder");
    openapiFields.add("displayPreference");
    openapiFields.add("displayProperties");
    openapiFields.add("explorePrioritizesActivityImage");
    openapiFields.add("friendlyName");
    openapiFields.add("hasPredictableDates");
    openapiFields.add("hash");
    openapiFields.add("image");
    openapiFields.add("index");
    openapiFields.add("isInGameMilestone");
    openapiFields.add("milestoneType");
    openapiFields.add("quests");
    openapiFields.add("recruitable");
    openapiFields.add("redacted");
    openapiFields.add("rewards");
    openapiFields.add("showInExplorer");
    openapiFields.add("showInMilestones");
    openapiFields.add("values");
    openapiFields.add("vendors");
    openapiFields.add("vendorsDisplayTitle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsMilestonesDestinyMilestoneDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsMilestonesDestinyMilestoneDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsMilestonesDestinyMilestoneDefinition is not found in the empty JSON string", DestinyDefinitionsMilestonesDestinyMilestoneDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsMilestonesDestinyMilestoneDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsMilestonesDestinyMilestoneDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("activities") != null && !jsonObj.get("activities").isJsonNull()) {
        JsonArray jsonArrayactivities = jsonObj.getAsJsonArray("activities");
        if (jsonArrayactivities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activities` to be an array in the JSON string but got `%s`", jsonObj.get("activities").toString()));
          }

          // validate the optional field `activities` (array)
          for (int i = 0; i < jsonArrayactivities.size(); i++) {
            DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition.validateJsonElement(jsonArrayactivities.get(i));
          };
        }
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if (jsonObj.get("vendors") != null && !jsonObj.get("vendors").isJsonNull()) {
        JsonArray jsonArrayvendors = jsonObj.getAsJsonArray("vendors");
        if (jsonArrayvendors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vendors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vendors` to be an array in the JSON string but got `%s`", jsonObj.get("vendors").toString()));
          }

          // validate the optional field `vendors` (array)
          for (int i = 0; i < jsonArrayvendors.size(); i++) {
            DestinyDefinitionsMilestonesDestinyMilestoneVendorDefinition.validateJsonElement(jsonArrayvendors.get(i));
          };
        }
      }
      if ((jsonObj.get("vendorsDisplayTitle") != null && !jsonObj.get("vendorsDisplayTitle").isJsonNull()) && !jsonObj.get("vendorsDisplayTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorsDisplayTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorsDisplayTitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsMilestonesDestinyMilestoneDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsMilestonesDestinyMilestoneDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsMilestonesDestinyMilestoneDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsMilestonesDestinyMilestoneDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsMilestonesDestinyMilestoneDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsMilestonesDestinyMilestoneDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsMilestonesDestinyMilestoneDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsMilestonesDestinyMilestoneDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsMilestonesDestinyMilestoneDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsMilestonesDestinyMilestoneDefinition
   */
  public static DestinyDefinitionsMilestonesDestinyMilestoneDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsMilestonesDestinyMilestoneDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsMilestonesDestinyMilestoneDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

