/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DestinyDefinitionsDestinyInventoryItemStatDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a DestinyInventoryItemDefinition that store all of the information we were able to discern about how the item spawns, and where you can find the item.  Items will have many of these sources, one per level at which it spawns, to try and give more granular data about where items spawn for specific level ranges.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsSourcesDestinyItemSourceDefinition {
  public static final String SERIALIZED_NAME_COMPUTED_STATS = "computedStats";
  @SerializedName(SERIALIZED_NAME_COMPUTED_STATS)
  private Map<String, DestinyDefinitionsDestinyInventoryItemStatDefinition> computedStats = new HashMap<>();

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_MAX_LEVEL_REQUIRED = "maxLevelRequired";
  @SerializedName(SERIALIZED_NAME_MAX_LEVEL_REQUIRED)
  private Integer maxLevelRequired;

  public static final String SERIALIZED_NAME_MAX_QUALITY = "maxQuality";
  @SerializedName(SERIALIZED_NAME_MAX_QUALITY)
  private Integer maxQuality;

  public static final String SERIALIZED_NAME_MIN_LEVEL_REQUIRED = "minLevelRequired";
  @SerializedName(SERIALIZED_NAME_MIN_LEVEL_REQUIRED)
  private Integer minLevelRequired;

  public static final String SERIALIZED_NAME_MIN_QUALITY = "minQuality";
  @SerializedName(SERIALIZED_NAME_MIN_QUALITY)
  private Integer minQuality;

  public static final String SERIALIZED_NAME_SOURCE_HASHES = "sourceHashes";
  @SerializedName(SERIALIZED_NAME_SOURCE_HASHES)
  private List<Integer> sourceHashes = new ArrayList<>();

  public DestinyDefinitionsSourcesDestinyItemSourceDefinition() {
  }

  public DestinyDefinitionsSourcesDestinyItemSourceDefinition computedStats(Map<String, DestinyDefinitionsDestinyInventoryItemStatDefinition> computedStats) {
    this.computedStats = computedStats;
    return this;
  }

  public DestinyDefinitionsSourcesDestinyItemSourceDefinition putComputedStatsItem(String key, DestinyDefinitionsDestinyInventoryItemStatDefinition computedStatsItem) {
    if (this.computedStats == null) {
      this.computedStats = new HashMap<>();
    }
    this.computedStats.put(key, computedStatsItem);
    return this;
  }

  /**
   * The stats computed for this level/quality range.
   * @return computedStats
   */
  @javax.annotation.Nullable
  public Map<String, DestinyDefinitionsDestinyInventoryItemStatDefinition> getComputedStats() {
    return computedStats;
  }

  public void setComputedStats(Map<String, DestinyDefinitionsDestinyInventoryItemStatDefinition> computedStats) {
    this.computedStats = computedStats;
  }


  public DestinyDefinitionsSourcesDestinyItemSourceDefinition level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * The level at which the item spawns. Essentially the Primary Key for this source data: there will be multiple of these source entries per item that has source data, grouped by the level at which the item spawns.
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public DestinyDefinitionsSourcesDestinyItemSourceDefinition maxLevelRequired(Integer maxLevelRequired) {
    this.maxLevelRequired = maxLevelRequired;
    return this;
  }

  /**
   * The maximum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.
   * @return maxLevelRequired
   */
  @javax.annotation.Nullable
  public Integer getMaxLevelRequired() {
    return maxLevelRequired;
  }

  public void setMaxLevelRequired(Integer maxLevelRequired) {
    this.maxLevelRequired = maxLevelRequired;
  }


  public DestinyDefinitionsSourcesDestinyItemSourceDefinition maxQuality(Integer maxQuality) {
    this.maxQuality = maxQuality;
    return this;
  }

  /**
   * The maximum quality at which the item spawns for this level.
   * @return maxQuality
   */
  @javax.annotation.Nullable
  public Integer getMaxQuality() {
    return maxQuality;
  }

  public void setMaxQuality(Integer maxQuality) {
    this.maxQuality = maxQuality;
  }


  public DestinyDefinitionsSourcesDestinyItemSourceDefinition minLevelRequired(Integer minLevelRequired) {
    this.minLevelRequired = minLevelRequired;
    return this;
  }

  /**
   * The minimum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.
   * @return minLevelRequired
   */
  @javax.annotation.Nullable
  public Integer getMinLevelRequired() {
    return minLevelRequired;
  }

  public void setMinLevelRequired(Integer minLevelRequired) {
    this.minLevelRequired = minLevelRequired;
  }


  public DestinyDefinitionsSourcesDestinyItemSourceDefinition minQuality(Integer minQuality) {
    this.minQuality = minQuality;
    return this;
  }

  /**
   * The minimum Quality at which the item spawns for this level. Examine DestinyInventoryItemDefinition for more information about what Quality means. Just don&#39;t ask Phaedrus about it, he&#39;ll never stop talking and you&#39;ll have to write a book about it.
   * @return minQuality
   */
  @javax.annotation.Nullable
  public Integer getMinQuality() {
    return minQuality;
  }

  public void setMinQuality(Integer minQuality) {
    this.minQuality = minQuality;
  }


  public DestinyDefinitionsSourcesDestinyItemSourceDefinition sourceHashes(List<Integer> sourceHashes) {
    this.sourceHashes = sourceHashes;
    return this;
  }

  public DestinyDefinitionsSourcesDestinyItemSourceDefinition addSourceHashesItem(Integer sourceHashesItem) {
    if (this.sourceHashes == null) {
      this.sourceHashes = new ArrayList<>();
    }
    this.sourceHashes.add(sourceHashesItem);
    return this;
  }

  /**
   * The DestinyRewardSourceDefinitions found that can spawn the item at this level.
   * @return sourceHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getSourceHashes() {
    return sourceHashes;
  }

  public void setSourceHashes(List<Integer> sourceHashes) {
    this.sourceHashes = sourceHashes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsSourcesDestinyItemSourceDefinition destinyDefinitionsSourcesDestinyItemSourceDefinition = (DestinyDefinitionsSourcesDestinyItemSourceDefinition) o;
    return Objects.equals(this.computedStats, destinyDefinitionsSourcesDestinyItemSourceDefinition.computedStats) &&
        Objects.equals(this.level, destinyDefinitionsSourcesDestinyItemSourceDefinition.level) &&
        Objects.equals(this.maxLevelRequired, destinyDefinitionsSourcesDestinyItemSourceDefinition.maxLevelRequired) &&
        Objects.equals(this.maxQuality, destinyDefinitionsSourcesDestinyItemSourceDefinition.maxQuality) &&
        Objects.equals(this.minLevelRequired, destinyDefinitionsSourcesDestinyItemSourceDefinition.minLevelRequired) &&
        Objects.equals(this.minQuality, destinyDefinitionsSourcesDestinyItemSourceDefinition.minQuality) &&
        Objects.equals(this.sourceHashes, destinyDefinitionsSourcesDestinyItemSourceDefinition.sourceHashes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computedStats, level, maxLevelRequired, maxQuality, minLevelRequired, minQuality, sourceHashes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsSourcesDestinyItemSourceDefinition {\n");
    sb.append("    computedStats: ").append(toIndentedString(computedStats)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    maxLevelRequired: ").append(toIndentedString(maxLevelRequired)).append("\n");
    sb.append("    maxQuality: ").append(toIndentedString(maxQuality)).append("\n");
    sb.append("    minLevelRequired: ").append(toIndentedString(minLevelRequired)).append("\n");
    sb.append("    minQuality: ").append(toIndentedString(minQuality)).append("\n");
    sb.append("    sourceHashes: ").append(toIndentedString(sourceHashes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computedStats");
    openapiFields.add("level");
    openapiFields.add("maxLevelRequired");
    openapiFields.add("maxQuality");
    openapiFields.add("minLevelRequired");
    openapiFields.add("minQuality");
    openapiFields.add("sourceHashes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsSourcesDestinyItemSourceDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsSourcesDestinyItemSourceDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsSourcesDestinyItemSourceDefinition is not found in the empty JSON string", DestinyDefinitionsSourcesDestinyItemSourceDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsSourcesDestinyItemSourceDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsSourcesDestinyItemSourceDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceHashes") != null && !jsonObj.get("sourceHashes").isJsonNull() && !jsonObj.get("sourceHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceHashes` to be an array in the JSON string but got `%s`", jsonObj.get("sourceHashes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsSourcesDestinyItemSourceDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsSourcesDestinyItemSourceDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsSourcesDestinyItemSourceDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsSourcesDestinyItemSourceDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsSourcesDestinyItemSourceDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsSourcesDestinyItemSourceDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsSourcesDestinyItemSourceDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsSourcesDestinyItemSourceDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsSourcesDestinyItemSourceDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsSourcesDestinyItemSourceDefinition
   */
  public static DestinyDefinitionsSourcesDestinyItemSourceDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsSourcesDestinyItemSourceDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsSourcesDestinyItemSourceDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

