/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If you ever wondered how the Vault works, here it is.  The Vault is merely a set of inventory buckets that exist on your Profile/Account level. When you transfer items in the Vault, the game is using the Vault Vendor&#39;s DestinyVendorAcceptedItemDefinitions to see where the appropriate destination bucket is for the source bucket from whence your item is moving. If it finds such an entry, it transfers the item to the other bucket.  The mechanics for Postmaster works similarly, which is also a vendor. All driven by Accepted Items.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyVendorAcceptedItemDefinition {
  public static final String SERIALIZED_NAME_ACCEPTED_INVENTORY_BUCKET_HASH = "acceptedInventoryBucketHash";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_INVENTORY_BUCKET_HASH)
  private Integer acceptedInventoryBucketHash;

  public static final String SERIALIZED_NAME_DESTINATION_INVENTORY_BUCKET_HASH = "destinationInventoryBucketHash";
  @SerializedName(SERIALIZED_NAME_DESTINATION_INVENTORY_BUCKET_HASH)
  private Integer destinationInventoryBucketHash;

  public DestinyDefinitionsDestinyVendorAcceptedItemDefinition() {
  }

  public DestinyDefinitionsDestinyVendorAcceptedItemDefinition acceptedInventoryBucketHash(Integer acceptedInventoryBucketHash) {
    this.acceptedInventoryBucketHash = acceptedInventoryBucketHash;
    return this;
  }

  /**
   * The \&quot;source\&quot; bucket for a transfer. When a user wants to transfer an item, the appropriate DestinyVendorDefinition&#39;s acceptedItems property is evaluated, looking for an entry where acceptedInventoryBucketHash matches the bucket that the item being transferred is currently located. If it exists, the item will be transferred into whatever bucket is defined by destinationInventoryBucketHash.
   * @return acceptedInventoryBucketHash
   */
  @javax.annotation.Nullable
  public Integer getAcceptedInventoryBucketHash() {
    return acceptedInventoryBucketHash;
  }

  public void setAcceptedInventoryBucketHash(Integer acceptedInventoryBucketHash) {
    this.acceptedInventoryBucketHash = acceptedInventoryBucketHash;
  }


  public DestinyDefinitionsDestinyVendorAcceptedItemDefinition destinationInventoryBucketHash(Integer destinationInventoryBucketHash) {
    this.destinationInventoryBucketHash = destinationInventoryBucketHash;
    return this;
  }

  /**
   * This is the bucket where the item being transferred will be put, given that it was being transferred *from* the bucket defined in acceptedInventoryBucketHash.
   * @return destinationInventoryBucketHash
   */
  @javax.annotation.Nullable
  public Integer getDestinationInventoryBucketHash() {
    return destinationInventoryBucketHash;
  }

  public void setDestinationInventoryBucketHash(Integer destinationInventoryBucketHash) {
    this.destinationInventoryBucketHash = destinationInventoryBucketHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyVendorAcceptedItemDefinition destinyDefinitionsDestinyVendorAcceptedItemDefinition = (DestinyDefinitionsDestinyVendorAcceptedItemDefinition) o;
    return Objects.equals(this.acceptedInventoryBucketHash, destinyDefinitionsDestinyVendorAcceptedItemDefinition.acceptedInventoryBucketHash) &&
        Objects.equals(this.destinationInventoryBucketHash, destinyDefinitionsDestinyVendorAcceptedItemDefinition.destinationInventoryBucketHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedInventoryBucketHash, destinationInventoryBucketHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyVendorAcceptedItemDefinition {\n");
    sb.append("    acceptedInventoryBucketHash: ").append(toIndentedString(acceptedInventoryBucketHash)).append("\n");
    sb.append("    destinationInventoryBucketHash: ").append(toIndentedString(destinationInventoryBucketHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptedInventoryBucketHash");
    openapiFields.add("destinationInventoryBucketHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyVendorAcceptedItemDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyVendorAcceptedItemDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyVendorAcceptedItemDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyVendorAcceptedItemDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyVendorAcceptedItemDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyVendorAcceptedItemDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyVendorAcceptedItemDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyVendorAcceptedItemDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyVendorAcceptedItemDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyVendorAcceptedItemDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyVendorAcceptedItemDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyVendorAcceptedItemDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyVendorAcceptedItemDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyVendorAcceptedItemDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyVendorAcceptedItemDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyVendorAcceptedItemDefinition
   */
  public static DestinyDefinitionsDestinyVendorAcceptedItemDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyVendorAcceptedItemDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyVendorAcceptedItemDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

