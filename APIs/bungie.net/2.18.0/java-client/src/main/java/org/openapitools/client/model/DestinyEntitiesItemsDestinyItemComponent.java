/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyQuestsDestinyObjectiveProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The base item component, filled with properties that are generally useful to know in any item request or that don&#39;t feel worthwhile to put in their own component.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyEntitiesItemsDestinyItemComponent {
  public static final String SERIALIZED_NAME_BIND_STATUS = "bindStatus";
  @SerializedName(SERIALIZED_NAME_BIND_STATUS)
  private Integer bindStatus;

  public static final String SERIALIZED_NAME_BUCKET_HASH = "bucketHash";
  @SerializedName(SERIALIZED_NAME_BUCKET_HASH)
  private Integer bucketHash;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_IS_WRAPPER = "isWrapper";
  @SerializedName(SERIALIZED_NAME_IS_WRAPPER)
  private Boolean isWrapper;

  public static final String SERIALIZED_NAME_ITEM_HASH = "itemHash";
  @SerializedName(SERIALIZED_NAME_ITEM_HASH)
  private Integer itemHash;

  public static final String SERIALIZED_NAME_ITEM_INSTANCE_ID = "itemInstanceId";
  @SerializedName(SERIALIZED_NAME_ITEM_INSTANCE_ID)
  private Long itemInstanceId;

  public static final String SERIALIZED_NAME_ITEM_VALUE_VISIBILITY = "itemValueVisibility";
  @SerializedName(SERIALIZED_NAME_ITEM_VALUE_VISIBILITY)
  private List<Boolean> itemValueVisibility = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Integer location;

  public static final String SERIALIZED_NAME_LOCKABLE = "lockable";
  @SerializedName(SERIALIZED_NAME_LOCKABLE)
  private Boolean lockable;

  public static final String SERIALIZED_NAME_METRIC_HASH = "metricHash";
  @SerializedName(SERIALIZED_NAME_METRIC_HASH)
  private Integer metricHash;

  public static final String SERIALIZED_NAME_METRIC_OBJECTIVE = "metricObjective";
  @SerializedName(SERIALIZED_NAME_METRIC_OBJECTIVE)
  private DestinyQuestsDestinyObjectiveProgress metricObjective;

  public static final String SERIALIZED_NAME_OVERRIDE_STYLE_ITEM_HASH = "overrideStyleItemHash";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_STYLE_ITEM_HASH)
  private Integer overrideStyleItemHash;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Integer state;

  public static final String SERIALIZED_NAME_TOOLTIP_NOTIFICATION_INDEXES = "tooltipNotificationIndexes";
  @SerializedName(SERIALIZED_NAME_TOOLTIP_NOTIFICATION_INDEXES)
  private List<Integer> tooltipNotificationIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFER_STATUS = "transferStatus";
  @SerializedName(SERIALIZED_NAME_TRANSFER_STATUS)
  private Integer transferStatus;

  public static final String SERIALIZED_NAME_VERSION_NUMBER = "versionNumber";
  @SerializedName(SERIALIZED_NAME_VERSION_NUMBER)
  private Integer versionNumber;

  public DestinyEntitiesItemsDestinyItemComponent() {
  }

  public DestinyEntitiesItemsDestinyItemComponent bindStatus(Integer bindStatus) {
    this.bindStatus = bindStatus;
    return this;
  }

  /**
   * If the item is bound to a location, it will be specified in this enum.
   * @return bindStatus
   */
  @javax.annotation.Nullable
  public Integer getBindStatus() {
    return bindStatus;
  }

  public void setBindStatus(Integer bindStatus) {
    this.bindStatus = bindStatus;
  }


  public DestinyEntitiesItemsDestinyItemComponent bucketHash(Integer bucketHash) {
    this.bucketHash = bucketHash;
    return this;
  }

  /**
   * The hash identifier for the specific inventory bucket in which the item is located.
   * @return bucketHash
   */
  @javax.annotation.Nullable
  public Integer getBucketHash() {
    return bucketHash;
  }

  public void setBucketHash(Integer bucketHash) {
    this.bucketHash = bucketHash;
  }


  public DestinyEntitiesItemsDestinyItemComponent expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * If the item can expire, this is the date at which it will/did expire.
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public DestinyEntitiesItemsDestinyItemComponent isWrapper(Boolean isWrapper) {
    this.isWrapper = isWrapper;
    return this;
  }

  /**
   * If this is true, the object is actually a \&quot;wrapper\&quot; of the object it&#39;s representing. This means that it&#39;s not the actual item itself, but rather an item that must be \&quot;opened\&quot; in game before you have and can use the item.   Wrappers are an evolution of \&quot;bundles\&quot;, which give an easy way to let you preview the contents of what you purchased while still letting you get a refund before you \&quot;open\&quot; it.
   * @return isWrapper
   */
  @javax.annotation.Nullable
  public Boolean getIsWrapper() {
    return isWrapper;
  }

  public void setIsWrapper(Boolean isWrapper) {
    this.isWrapper = isWrapper;
  }


  public DestinyEntitiesItemsDestinyItemComponent itemHash(Integer itemHash) {
    this.itemHash = itemHash;
    return this;
  }

  /**
   * The identifier for the item&#39;s definition, which is where most of the useful static information for the item can be found.
   * @return itemHash
   */
  @javax.annotation.Nullable
  public Integer getItemHash() {
    return itemHash;
  }

  public void setItemHash(Integer itemHash) {
    this.itemHash = itemHash;
  }


  public DestinyEntitiesItemsDestinyItemComponent itemInstanceId(Long itemInstanceId) {
    this.itemInstanceId = itemInstanceId;
    return this;
  }

  /**
   * If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size.
   * @return itemInstanceId
   */
  @javax.annotation.Nullable
  public Long getItemInstanceId() {
    return itemInstanceId;
  }

  public void setItemInstanceId(Long itemInstanceId) {
    this.itemInstanceId = itemInstanceId;
  }


  public DestinyEntitiesItemsDestinyItemComponent itemValueVisibility(List<Boolean> itemValueVisibility) {
    this.itemValueVisibility = itemValueVisibility;
    return this;
  }

  public DestinyEntitiesItemsDestinyItemComponent addItemValueVisibilityItem(Boolean itemValueVisibilityItem) {
    if (this.itemValueVisibility == null) {
      this.itemValueVisibility = new ArrayList<>();
    }
    this.itemValueVisibility.add(itemValueVisibilityItem);
    return this;
  }

  /**
   * If available, a list that describes which item values (rewards) should be shown (true) or hidden (false).
   * @return itemValueVisibility
   */
  @javax.annotation.Nullable
  public List<Boolean> getItemValueVisibility() {
    return itemValueVisibility;
  }

  public void setItemValueVisibility(List<Boolean> itemValueVisibility) {
    this.itemValueVisibility = itemValueVisibility;
  }


  public DestinyEntitiesItemsDestinyItemComponent location(Integer location) {
    this.location = location;
    return this;
  }

  /**
   * An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items.
   * @return location
   */
  @javax.annotation.Nullable
  public Integer getLocation() {
    return location;
  }

  public void setLocation(Integer location) {
    this.location = location;
  }


  public DestinyEntitiesItemsDestinyItemComponent lockable(Boolean lockable) {
    this.lockable = lockable;
    return this;
  }

  /**
   * If the item can be locked, this will indicate that state.
   * @return lockable
   */
  @javax.annotation.Nullable
  public Boolean getLockable() {
    return lockable;
  }

  public void setLockable(Boolean lockable) {
    this.lockable = lockable;
  }


  public DestinyEntitiesItemsDestinyItemComponent metricHash(Integer metricHash) {
    this.metricHash = metricHash;
    return this;
  }

  /**
   * The identifier for the currently-selected metric definition, to be displayed on the emblem nameplate.
   * @return metricHash
   */
  @javax.annotation.Nullable
  public Integer getMetricHash() {
    return metricHash;
  }

  public void setMetricHash(Integer metricHash) {
    this.metricHash = metricHash;
  }


  public DestinyEntitiesItemsDestinyItemComponent metricObjective(DestinyQuestsDestinyObjectiveProgress metricObjective) {
    this.metricObjective = metricObjective;
    return this;
  }

  /**
   * The objective progress for the currently-selected metric definition, to be displayed on the emblem nameplate.
   * @return metricObjective
   */
  @javax.annotation.Nullable
  public DestinyQuestsDestinyObjectiveProgress getMetricObjective() {
    return metricObjective;
  }

  public void setMetricObjective(DestinyQuestsDestinyObjectiveProgress metricObjective) {
    this.metricObjective = metricObjective;
  }


  public DestinyEntitiesItemsDestinyItemComponent overrideStyleItemHash(Integer overrideStyleItemHash) {
    this.overrideStyleItemHash = overrideStyleItemHash;
    return this;
  }

  /**
   * If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.  If you don&#39;t do this, certain items whose styles are being overridden by socketed items - such as the \&quot;Recycle Shader\&quot; item - would show whatever their default icon/style is, and it wouldn&#39;t be pretty or look accurate.
   * @return overrideStyleItemHash
   */
  @javax.annotation.Nullable
  public Integer getOverrideStyleItemHash() {
    return overrideStyleItemHash;
  }

  public void setOverrideStyleItemHash(Integer overrideStyleItemHash) {
    this.overrideStyleItemHash = overrideStyleItemHash;
  }


  public DestinyEntitiesItemsDestinyItemComponent quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public DestinyEntitiesItemsDestinyItemComponent state(Integer state) {
    this.state = state;
    return this;
  }

  /**
   * A flags enumeration indicating the transient/custom states of the item that affect how it is rendered: whether it&#39;s tracked or locked for example, or whether it has a masterwork plug inserted.
   * @return state
   */
  @javax.annotation.Nullable
  public Integer getState() {
    return state;
  }

  public void setState(Integer state) {
    this.state = state;
  }


  public DestinyEntitiesItemsDestinyItemComponent tooltipNotificationIndexes(List<Integer> tooltipNotificationIndexes) {
    this.tooltipNotificationIndexes = tooltipNotificationIndexes;
    return this;
  }

  public DestinyEntitiesItemsDestinyItemComponent addTooltipNotificationIndexesItem(Integer tooltipNotificationIndexesItem) {
    if (this.tooltipNotificationIndexes == null) {
      this.tooltipNotificationIndexes = new ArrayList<>();
    }
    this.tooltipNotificationIndexes.add(tooltipNotificationIndexesItem);
    return this;
  }

  /**
   * If this is populated, it is a list of indexes into DestinyInventoryItemDefinition.tooltipNotifications for any special tooltip messages that need to be shown for this item.
   * @return tooltipNotificationIndexes
   */
  @javax.annotation.Nullable
  public List<Integer> getTooltipNotificationIndexes() {
    return tooltipNotificationIndexes;
  }

  public void setTooltipNotificationIndexes(List<Integer> tooltipNotificationIndexes) {
    this.tooltipNotificationIndexes = tooltipNotificationIndexes;
  }


  public DestinyEntitiesItemsDestinyItemComponent transferStatus(Integer transferStatus) {
    this.transferStatus = transferStatus;
    return this;
  }

  /**
   * If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer).
   * @return transferStatus
   */
  @javax.annotation.Nullable
  public Integer getTransferStatus() {
    return transferStatus;
  }

  public void setTransferStatus(Integer transferStatus) {
    this.transferStatus = transferStatus;
  }


  public DestinyEntitiesItemsDestinyItemComponent versionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

  /**
   * The version of this item, used to index into the versions list in the item definition quality block.
   * @return versionNumber
   */
  @javax.annotation.Nullable
  public Integer getVersionNumber() {
    return versionNumber;
  }

  public void setVersionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesItemsDestinyItemComponent destinyEntitiesItemsDestinyItemComponent = (DestinyEntitiesItemsDestinyItemComponent) o;
    return Objects.equals(this.bindStatus, destinyEntitiesItemsDestinyItemComponent.bindStatus) &&
        Objects.equals(this.bucketHash, destinyEntitiesItemsDestinyItemComponent.bucketHash) &&
        Objects.equals(this.expirationDate, destinyEntitiesItemsDestinyItemComponent.expirationDate) &&
        Objects.equals(this.isWrapper, destinyEntitiesItemsDestinyItemComponent.isWrapper) &&
        Objects.equals(this.itemHash, destinyEntitiesItemsDestinyItemComponent.itemHash) &&
        Objects.equals(this.itemInstanceId, destinyEntitiesItemsDestinyItemComponent.itemInstanceId) &&
        Objects.equals(this.itemValueVisibility, destinyEntitiesItemsDestinyItemComponent.itemValueVisibility) &&
        Objects.equals(this.location, destinyEntitiesItemsDestinyItemComponent.location) &&
        Objects.equals(this.lockable, destinyEntitiesItemsDestinyItemComponent.lockable) &&
        Objects.equals(this.metricHash, destinyEntitiesItemsDestinyItemComponent.metricHash) &&
        Objects.equals(this.metricObjective, destinyEntitiesItemsDestinyItemComponent.metricObjective) &&
        Objects.equals(this.overrideStyleItemHash, destinyEntitiesItemsDestinyItemComponent.overrideStyleItemHash) &&
        Objects.equals(this.quantity, destinyEntitiesItemsDestinyItemComponent.quantity) &&
        Objects.equals(this.state, destinyEntitiesItemsDestinyItemComponent.state) &&
        Objects.equals(this.tooltipNotificationIndexes, destinyEntitiesItemsDestinyItemComponent.tooltipNotificationIndexes) &&
        Objects.equals(this.transferStatus, destinyEntitiesItemsDestinyItemComponent.transferStatus) &&
        Objects.equals(this.versionNumber, destinyEntitiesItemsDestinyItemComponent.versionNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bindStatus, bucketHash, expirationDate, isWrapper, itemHash, itemInstanceId, itemValueVisibility, location, lockable, metricHash, metricObjective, overrideStyleItemHash, quantity, state, tooltipNotificationIndexes, transferStatus, versionNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesItemsDestinyItemComponent {\n");
    sb.append("    bindStatus: ").append(toIndentedString(bindStatus)).append("\n");
    sb.append("    bucketHash: ").append(toIndentedString(bucketHash)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    isWrapper: ").append(toIndentedString(isWrapper)).append("\n");
    sb.append("    itemHash: ").append(toIndentedString(itemHash)).append("\n");
    sb.append("    itemInstanceId: ").append(toIndentedString(itemInstanceId)).append("\n");
    sb.append("    itemValueVisibility: ").append(toIndentedString(itemValueVisibility)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    lockable: ").append(toIndentedString(lockable)).append("\n");
    sb.append("    metricHash: ").append(toIndentedString(metricHash)).append("\n");
    sb.append("    metricObjective: ").append(toIndentedString(metricObjective)).append("\n");
    sb.append("    overrideStyleItemHash: ").append(toIndentedString(overrideStyleItemHash)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tooltipNotificationIndexes: ").append(toIndentedString(tooltipNotificationIndexes)).append("\n");
    sb.append("    transferStatus: ").append(toIndentedString(transferStatus)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bindStatus");
    openapiFields.add("bucketHash");
    openapiFields.add("expirationDate");
    openapiFields.add("isWrapper");
    openapiFields.add("itemHash");
    openapiFields.add("itemInstanceId");
    openapiFields.add("itemValueVisibility");
    openapiFields.add("location");
    openapiFields.add("lockable");
    openapiFields.add("metricHash");
    openapiFields.add("metricObjective");
    openapiFields.add("overrideStyleItemHash");
    openapiFields.add("quantity");
    openapiFields.add("state");
    openapiFields.add("tooltipNotificationIndexes");
    openapiFields.add("transferStatus");
    openapiFields.add("versionNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyEntitiesItemsDestinyItemComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyEntitiesItemsDestinyItemComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyEntitiesItemsDestinyItemComponent is not found in the empty JSON string", DestinyEntitiesItemsDestinyItemComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyEntitiesItemsDestinyItemComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyEntitiesItemsDestinyItemComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("itemValueVisibility") != null && !jsonObj.get("itemValueVisibility").isJsonNull() && !jsonObj.get("itemValueVisibility").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemValueVisibility` to be an array in the JSON string but got `%s`", jsonObj.get("itemValueVisibility").toString()));
      }
      // validate the optional field `metricObjective`
      if (jsonObj.get("metricObjective") != null && !jsonObj.get("metricObjective").isJsonNull()) {
        DestinyQuestsDestinyObjectiveProgress.validateJsonElement(jsonObj.get("metricObjective"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tooltipNotificationIndexes") != null && !jsonObj.get("tooltipNotificationIndexes").isJsonNull() && !jsonObj.get("tooltipNotificationIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tooltipNotificationIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("tooltipNotificationIndexes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyEntitiesItemsDestinyItemComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyEntitiesItemsDestinyItemComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyEntitiesItemsDestinyItemComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyEntitiesItemsDestinyItemComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyEntitiesItemsDestinyItemComponent>() {
           @Override
           public void write(JsonWriter out, DestinyEntitiesItemsDestinyItemComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyEntitiesItemsDestinyItemComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyEntitiesItemsDestinyItemComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyEntitiesItemsDestinyItemComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyEntitiesItemsDestinyItemComponent
   */
  public static DestinyEntitiesItemsDestinyItemComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyEntitiesItemsDestinyItemComponent.class);
  }

  /**
   * Convert an instance of DestinyEntitiesItemsDestinyItemComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

