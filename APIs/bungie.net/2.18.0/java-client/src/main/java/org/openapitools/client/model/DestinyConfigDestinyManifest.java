/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DestinyConfigGearAssetDataBaseDefinition;
import org.openapitools.client.model.DestinyConfigImagePyramidEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyConfigDestinyManifest {
  public static final String SERIALIZED_NAME_ICON_IMAGE_PYRAMID_INFO = "iconImagePyramidInfo";
  @SerializedName(SERIALIZED_NAME_ICON_IMAGE_PYRAMID_INFO)
  private List<DestinyConfigImagePyramidEntry> iconImagePyramidInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_JSON_WORLD_COMPONENT_CONTENT_PATHS = "jsonWorldComponentContentPaths";
  @SerializedName(SERIALIZED_NAME_JSON_WORLD_COMPONENT_CONTENT_PATHS)
  private Map<String, Map<String, String>> jsonWorldComponentContentPaths = new HashMap<>();

  public static final String SERIALIZED_NAME_JSON_WORLD_CONTENT_PATHS = "jsonWorldContentPaths";
  @SerializedName(SERIALIZED_NAME_JSON_WORLD_CONTENT_PATHS)
  private Map<String, String> jsonWorldContentPaths = new HashMap<>();

  public static final String SERIALIZED_NAME_MOBILE_ASSET_CONTENT_PATH = "mobileAssetContentPath";
  @SerializedName(SERIALIZED_NAME_MOBILE_ASSET_CONTENT_PATH)
  private String mobileAssetContentPath;

  public static final String SERIALIZED_NAME_MOBILE_CLAN_BANNER_DATABASE_PATH = "mobileClanBannerDatabasePath";
  @SerializedName(SERIALIZED_NAME_MOBILE_CLAN_BANNER_DATABASE_PATH)
  private String mobileClanBannerDatabasePath;

  public static final String SERIALIZED_NAME_MOBILE_GEAR_ASSET_DATA_BASES = "mobileGearAssetDataBases";
  @SerializedName(SERIALIZED_NAME_MOBILE_GEAR_ASSET_DATA_BASES)
  private List<DestinyConfigGearAssetDataBaseDefinition> mobileGearAssetDataBases = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOBILE_GEAR_C_D_N = "mobileGearCDN";
  @SerializedName(SERIALIZED_NAME_MOBILE_GEAR_C_D_N)
  private Map<String, String> mobileGearCDN = new HashMap<>();

  public static final String SERIALIZED_NAME_MOBILE_WORLD_CONTENT_PATHS = "mobileWorldContentPaths";
  @SerializedName(SERIALIZED_NAME_MOBILE_WORLD_CONTENT_PATHS)
  private Map<String, String> mobileWorldContentPaths = new HashMap<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public DestinyConfigDestinyManifest() {
  }

  public DestinyConfigDestinyManifest iconImagePyramidInfo(List<DestinyConfigImagePyramidEntry> iconImagePyramidInfo) {
    this.iconImagePyramidInfo = iconImagePyramidInfo;
    return this;
  }

  public DestinyConfigDestinyManifest addIconImagePyramidInfoItem(DestinyConfigImagePyramidEntry iconImagePyramidInfoItem) {
    if (this.iconImagePyramidInfo == null) {
      this.iconImagePyramidInfo = new ArrayList<>();
    }
    this.iconImagePyramidInfo.add(iconImagePyramidInfoItem);
    return this;
  }

  /**
   * Information about the \&quot;Image Pyramid\&quot; for Destiny icons. Where possible, we create smaller versions of Destiny icons. These are found as subfolders under the location of the \&quot;original/full size\&quot; Destiny images, with the same file name and extension as the original image itself. (this lets us avoid sending largely redundant path info with every entity, at the expense of the smaller versions of the image being less discoverable)
   * @return iconImagePyramidInfo
   */
  @javax.annotation.Nullable
  public List<DestinyConfigImagePyramidEntry> getIconImagePyramidInfo() {
    return iconImagePyramidInfo;
  }

  public void setIconImagePyramidInfo(List<DestinyConfigImagePyramidEntry> iconImagePyramidInfo) {
    this.iconImagePyramidInfo = iconImagePyramidInfo;
  }


  public DestinyConfigDestinyManifest jsonWorldComponentContentPaths(Map<String, Map<String, String>> jsonWorldComponentContentPaths) {
    this.jsonWorldComponentContentPaths = jsonWorldComponentContentPaths;
    return this;
  }

  public DestinyConfigDestinyManifest putJsonWorldComponentContentPathsItem(String key, Map<String, String> jsonWorldComponentContentPathsItem) {
    if (this.jsonWorldComponentContentPaths == null) {
      this.jsonWorldComponentContentPaths = new HashMap<>();
    }
    this.jsonWorldComponentContentPaths.put(key, jsonWorldComponentContentPathsItem);
    return this;
  }

  /**
   * This points to the generated JSON that contains all the Definitions. Each key is a locale. The value is a dictionary, where the key is a definition type by name, and the value is the path to the file for that definition. WARNING: This is unsafe and subject to change - do not depend on data in these files staying around long-term.
   * @return jsonWorldComponentContentPaths
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, String>> getJsonWorldComponentContentPaths() {
    return jsonWorldComponentContentPaths;
  }

  public void setJsonWorldComponentContentPaths(Map<String, Map<String, String>> jsonWorldComponentContentPaths) {
    this.jsonWorldComponentContentPaths = jsonWorldComponentContentPaths;
  }


  public DestinyConfigDestinyManifest jsonWorldContentPaths(Map<String, String> jsonWorldContentPaths) {
    this.jsonWorldContentPaths = jsonWorldContentPaths;
    return this;
  }

  public DestinyConfigDestinyManifest putJsonWorldContentPathsItem(String key, String jsonWorldContentPathsItem) {
    if (this.jsonWorldContentPaths == null) {
      this.jsonWorldContentPaths = new HashMap<>();
    }
    this.jsonWorldContentPaths.put(key, jsonWorldContentPathsItem);
    return this;
  }

  /**
   * This points to the generated JSON that contains all the Definitions. Each key is a locale. The value is a path to the aggregated world definitions (warning: large file!)
   * @return jsonWorldContentPaths
   */
  @javax.annotation.Nullable
  public Map<String, String> getJsonWorldContentPaths() {
    return jsonWorldContentPaths;
  }

  public void setJsonWorldContentPaths(Map<String, String> jsonWorldContentPaths) {
    this.jsonWorldContentPaths = jsonWorldContentPaths;
  }


  public DestinyConfigDestinyManifest mobileAssetContentPath(String mobileAssetContentPath) {
    this.mobileAssetContentPath = mobileAssetContentPath;
    return this;
  }

  /**
   * Get mobileAssetContentPath
   * @return mobileAssetContentPath
   */
  @javax.annotation.Nullable
  public String getMobileAssetContentPath() {
    return mobileAssetContentPath;
  }

  public void setMobileAssetContentPath(String mobileAssetContentPath) {
    this.mobileAssetContentPath = mobileAssetContentPath;
  }


  public DestinyConfigDestinyManifest mobileClanBannerDatabasePath(String mobileClanBannerDatabasePath) {
    this.mobileClanBannerDatabasePath = mobileClanBannerDatabasePath;
    return this;
  }

  /**
   * Get mobileClanBannerDatabasePath
   * @return mobileClanBannerDatabasePath
   */
  @javax.annotation.Nullable
  public String getMobileClanBannerDatabasePath() {
    return mobileClanBannerDatabasePath;
  }

  public void setMobileClanBannerDatabasePath(String mobileClanBannerDatabasePath) {
    this.mobileClanBannerDatabasePath = mobileClanBannerDatabasePath;
  }


  public DestinyConfigDestinyManifest mobileGearAssetDataBases(List<DestinyConfigGearAssetDataBaseDefinition> mobileGearAssetDataBases) {
    this.mobileGearAssetDataBases = mobileGearAssetDataBases;
    return this;
  }

  public DestinyConfigDestinyManifest addMobileGearAssetDataBasesItem(DestinyConfigGearAssetDataBaseDefinition mobileGearAssetDataBasesItem) {
    if (this.mobileGearAssetDataBases == null) {
      this.mobileGearAssetDataBases = new ArrayList<>();
    }
    this.mobileGearAssetDataBases.add(mobileGearAssetDataBasesItem);
    return this;
  }

  /**
   * Get mobileGearAssetDataBases
   * @return mobileGearAssetDataBases
   */
  @javax.annotation.Nullable
  public List<DestinyConfigGearAssetDataBaseDefinition> getMobileGearAssetDataBases() {
    return mobileGearAssetDataBases;
  }

  public void setMobileGearAssetDataBases(List<DestinyConfigGearAssetDataBaseDefinition> mobileGearAssetDataBases) {
    this.mobileGearAssetDataBases = mobileGearAssetDataBases;
  }


  public DestinyConfigDestinyManifest mobileGearCDN(Map<String, String> mobileGearCDN) {
    this.mobileGearCDN = mobileGearCDN;
    return this;
  }

  public DestinyConfigDestinyManifest putMobileGearCDNItem(String key, String mobileGearCDNItem) {
    if (this.mobileGearCDN == null) {
      this.mobileGearCDN = new HashMap<>();
    }
    this.mobileGearCDN.put(key, mobileGearCDNItem);
    return this;
  }

  /**
   * Get mobileGearCDN
   * @return mobileGearCDN
   */
  @javax.annotation.Nullable
  public Map<String, String> getMobileGearCDN() {
    return mobileGearCDN;
  }

  public void setMobileGearCDN(Map<String, String> mobileGearCDN) {
    this.mobileGearCDN = mobileGearCDN;
  }


  public DestinyConfigDestinyManifest mobileWorldContentPaths(Map<String, String> mobileWorldContentPaths) {
    this.mobileWorldContentPaths = mobileWorldContentPaths;
    return this;
  }

  public DestinyConfigDestinyManifest putMobileWorldContentPathsItem(String key, String mobileWorldContentPathsItem) {
    if (this.mobileWorldContentPaths == null) {
      this.mobileWorldContentPaths = new HashMap<>();
    }
    this.mobileWorldContentPaths.put(key, mobileWorldContentPathsItem);
    return this;
  }

  /**
   * Get mobileWorldContentPaths
   * @return mobileWorldContentPaths
   */
  @javax.annotation.Nullable
  public Map<String, String> getMobileWorldContentPaths() {
    return mobileWorldContentPaths;
  }

  public void setMobileWorldContentPaths(Map<String, String> mobileWorldContentPaths) {
    this.mobileWorldContentPaths = mobileWorldContentPaths;
  }


  public DestinyConfigDestinyManifest version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyConfigDestinyManifest destinyConfigDestinyManifest = (DestinyConfigDestinyManifest) o;
    return Objects.equals(this.iconImagePyramidInfo, destinyConfigDestinyManifest.iconImagePyramidInfo) &&
        Objects.equals(this.jsonWorldComponentContentPaths, destinyConfigDestinyManifest.jsonWorldComponentContentPaths) &&
        Objects.equals(this.jsonWorldContentPaths, destinyConfigDestinyManifest.jsonWorldContentPaths) &&
        Objects.equals(this.mobileAssetContentPath, destinyConfigDestinyManifest.mobileAssetContentPath) &&
        Objects.equals(this.mobileClanBannerDatabasePath, destinyConfigDestinyManifest.mobileClanBannerDatabasePath) &&
        Objects.equals(this.mobileGearAssetDataBases, destinyConfigDestinyManifest.mobileGearAssetDataBases) &&
        Objects.equals(this.mobileGearCDN, destinyConfigDestinyManifest.mobileGearCDN) &&
        Objects.equals(this.mobileWorldContentPaths, destinyConfigDestinyManifest.mobileWorldContentPaths) &&
        Objects.equals(this.version, destinyConfigDestinyManifest.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iconImagePyramidInfo, jsonWorldComponentContentPaths, jsonWorldContentPaths, mobileAssetContentPath, mobileClanBannerDatabasePath, mobileGearAssetDataBases, mobileGearCDN, mobileWorldContentPaths, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyConfigDestinyManifest {\n");
    sb.append("    iconImagePyramidInfo: ").append(toIndentedString(iconImagePyramidInfo)).append("\n");
    sb.append("    jsonWorldComponentContentPaths: ").append(toIndentedString(jsonWorldComponentContentPaths)).append("\n");
    sb.append("    jsonWorldContentPaths: ").append(toIndentedString(jsonWorldContentPaths)).append("\n");
    sb.append("    mobileAssetContentPath: ").append(toIndentedString(mobileAssetContentPath)).append("\n");
    sb.append("    mobileClanBannerDatabasePath: ").append(toIndentedString(mobileClanBannerDatabasePath)).append("\n");
    sb.append("    mobileGearAssetDataBases: ").append(toIndentedString(mobileGearAssetDataBases)).append("\n");
    sb.append("    mobileGearCDN: ").append(toIndentedString(mobileGearCDN)).append("\n");
    sb.append("    mobileWorldContentPaths: ").append(toIndentedString(mobileWorldContentPaths)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iconImagePyramidInfo");
    openapiFields.add("jsonWorldComponentContentPaths");
    openapiFields.add("jsonWorldContentPaths");
    openapiFields.add("mobileAssetContentPath");
    openapiFields.add("mobileClanBannerDatabasePath");
    openapiFields.add("mobileGearAssetDataBases");
    openapiFields.add("mobileGearCDN");
    openapiFields.add("mobileWorldContentPaths");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyConfigDestinyManifest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyConfigDestinyManifest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyConfigDestinyManifest is not found in the empty JSON string", DestinyConfigDestinyManifest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyConfigDestinyManifest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyConfigDestinyManifest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("iconImagePyramidInfo") != null && !jsonObj.get("iconImagePyramidInfo").isJsonNull()) {
        JsonArray jsonArrayiconImagePyramidInfo = jsonObj.getAsJsonArray("iconImagePyramidInfo");
        if (jsonArrayiconImagePyramidInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("iconImagePyramidInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `iconImagePyramidInfo` to be an array in the JSON string but got `%s`", jsonObj.get("iconImagePyramidInfo").toString()));
          }

          // validate the optional field `iconImagePyramidInfo` (array)
          for (int i = 0; i < jsonArrayiconImagePyramidInfo.size(); i++) {
            DestinyConfigImagePyramidEntry.validateJsonElement(jsonArrayiconImagePyramidInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("mobileAssetContentPath") != null && !jsonObj.get("mobileAssetContentPath").isJsonNull()) && !jsonObj.get("mobileAssetContentPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileAssetContentPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileAssetContentPath").toString()));
      }
      if ((jsonObj.get("mobileClanBannerDatabasePath") != null && !jsonObj.get("mobileClanBannerDatabasePath").isJsonNull()) && !jsonObj.get("mobileClanBannerDatabasePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileClanBannerDatabasePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobileClanBannerDatabasePath").toString()));
      }
      if (jsonObj.get("mobileGearAssetDataBases") != null && !jsonObj.get("mobileGearAssetDataBases").isJsonNull()) {
        JsonArray jsonArraymobileGearAssetDataBases = jsonObj.getAsJsonArray("mobileGearAssetDataBases");
        if (jsonArraymobileGearAssetDataBases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mobileGearAssetDataBases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mobileGearAssetDataBases` to be an array in the JSON string but got `%s`", jsonObj.get("mobileGearAssetDataBases").toString()));
          }

          // validate the optional field `mobileGearAssetDataBases` (array)
          for (int i = 0; i < jsonArraymobileGearAssetDataBases.size(); i++) {
            DestinyConfigGearAssetDataBaseDefinition.validateJsonElement(jsonArraymobileGearAssetDataBases.get(i));
          };
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyConfigDestinyManifest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyConfigDestinyManifest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyConfigDestinyManifest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyConfigDestinyManifest.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyConfigDestinyManifest>() {
           @Override
           public void write(JsonWriter out, DestinyConfigDestinyManifest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyConfigDestinyManifest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyConfigDestinyManifest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyConfigDestinyManifest
   * @throws IOException if the JSON string is invalid with respect to DestinyConfigDestinyManifest
   */
  public static DestinyConfigDestinyManifest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyConfigDestinyManifest.class);
  }

  /**
   * Convert an instance of DestinyConfigDestinyManifest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

