/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DestinySocketsDestinyItemPlug;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sockets may refer to a \&quot;Plug Set\&quot;: a set of reusable plugs that may be shared across multiple sockets (or even, in theory, multiple sockets over multiple items).  This is the set of those plugs that we came across in the users&#39; inventory, along with the values for plugs in the set. Any given set in this component may be represented in Character and Profile-level, as some plugs may be Profile-level restricted, and some character-level restricted. (note that the ones that are even more specific will remain on the actual socket component itself, as they cannot be reused)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyComponentsPlugSetsDestinyPlugSetsComponent {
  public static final String SERIALIZED_NAME_PLUGS = "plugs";
  @SerializedName(SERIALIZED_NAME_PLUGS)
  private Map<String, List<DestinySocketsDestinyItemPlug>> plugs = new HashMap<>();

  public DestinyComponentsPlugSetsDestinyPlugSetsComponent() {
  }

  public DestinyComponentsPlugSetsDestinyPlugSetsComponent plugs(Map<String, List<DestinySocketsDestinyItemPlug>> plugs) {
    this.plugs = plugs;
    return this;
  }

  public DestinyComponentsPlugSetsDestinyPlugSetsComponent putPlugsItem(String key, List<DestinySocketsDestinyItemPlug> plugsItem) {
    if (this.plugs == null) {
      this.plugs = new HashMap<>();
    }
    this.plugs.put(key, plugsItem);
    return this;
  }

  /**
   * The shared list of plugs for each relevant PlugSet, keyed by the hash identifier of the PlugSet (DestinyPlugSetDefinition).
   * @return plugs
   */
  @javax.annotation.Nullable
  public Map<String, List<DestinySocketsDestinyItemPlug>> getPlugs() {
    return plugs;
  }

  public void setPlugs(Map<String, List<DestinySocketsDestinyItemPlug>> plugs) {
    this.plugs = plugs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyComponentsPlugSetsDestinyPlugSetsComponent destinyComponentsPlugSetsDestinyPlugSetsComponent = (DestinyComponentsPlugSetsDestinyPlugSetsComponent) o;
    return Objects.equals(this.plugs, destinyComponentsPlugSetsDestinyPlugSetsComponent.plugs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plugs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyComponentsPlugSetsDestinyPlugSetsComponent {\n");
    sb.append("    plugs: ").append(toIndentedString(plugs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("plugs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyComponentsPlugSetsDestinyPlugSetsComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyComponentsPlugSetsDestinyPlugSetsComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyComponentsPlugSetsDestinyPlugSetsComponent is not found in the empty JSON string", DestinyComponentsPlugSetsDestinyPlugSetsComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyComponentsPlugSetsDestinyPlugSetsComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyComponentsPlugSetsDestinyPlugSetsComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyComponentsPlugSetsDestinyPlugSetsComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyComponentsPlugSetsDestinyPlugSetsComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyComponentsPlugSetsDestinyPlugSetsComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyComponentsPlugSetsDestinyPlugSetsComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyComponentsPlugSetsDestinyPlugSetsComponent>() {
           @Override
           public void write(JsonWriter out, DestinyComponentsPlugSetsDestinyPlugSetsComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyComponentsPlugSetsDestinyPlugSetsComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyComponentsPlugSetsDestinyPlugSetsComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyComponentsPlugSetsDestinyPlugSetsComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyComponentsPlugSetsDestinyPlugSetsComponent
   */
  public static DestinyComponentsPlugSetsDestinyPlugSetsComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyComponentsPlugSetsDestinyPlugSetsComponent.class);
  }

  /**
   * Convert an instance of DestinyComponentsPlugSetsDestinyPlugSetsComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

