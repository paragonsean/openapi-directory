/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InterpolationInterpolationPoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the way that an Item Stat (see DestinyStatDefinition) is transformed using the DestinyStatGroupDefinition related to that item. See both of the aforementioned definitions for more information about the stages of stat transformation.  This represents the transformation of a stat into a \&quot;Display\&quot; stat (the closest value that BNet can get to the in-game display value of the stat)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyStatDisplayDefinition {
  public static final String SERIALIZED_NAME_DISPLAY_AS_NUMERIC = "displayAsNumeric";
  @SerializedName(SERIALIZED_NAME_DISPLAY_AS_NUMERIC)
  private Boolean displayAsNumeric;

  public static final String SERIALIZED_NAME_DISPLAY_INTERPOLATION = "displayInterpolation";
  @SerializedName(SERIALIZED_NAME_DISPLAY_INTERPOLATION)
  private List<InterpolationInterpolationPoint> displayInterpolation = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAXIMUM_VALUE = "maximumValue";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_VALUE)
  private Integer maximumValue;

  public static final String SERIALIZED_NAME_STAT_HASH = "statHash";
  @SerializedName(SERIALIZED_NAME_STAT_HASH)
  private Integer statHash;

  public DestinyDefinitionsDestinyStatDisplayDefinition() {
  }

  public DestinyDefinitionsDestinyStatDisplayDefinition displayAsNumeric(Boolean displayAsNumeric) {
    this.displayAsNumeric = displayAsNumeric;
    return this;
  }

  /**
   * If this is true, the stat should be displayed as a number. Otherwise, display it as a progress bar. Or, you know, do whatever you want. There&#39;s no displayAsNumeric police.
   * @return displayAsNumeric
   */
  @javax.annotation.Nullable
  public Boolean getDisplayAsNumeric() {
    return displayAsNumeric;
  }

  public void setDisplayAsNumeric(Boolean displayAsNumeric) {
    this.displayAsNumeric = displayAsNumeric;
  }


  public DestinyDefinitionsDestinyStatDisplayDefinition displayInterpolation(List<InterpolationInterpolationPoint> displayInterpolation) {
    this.displayInterpolation = displayInterpolation;
    return this;
  }

  public DestinyDefinitionsDestinyStatDisplayDefinition addDisplayInterpolationItem(InterpolationInterpolationPoint displayInterpolationItem) {
    if (this.displayInterpolation == null) {
      this.displayInterpolation = new ArrayList<>();
    }
    this.displayInterpolation.add(displayInterpolationItem);
    return this;
  }

  /**
   * The interpolation table representing how the Investment Stat is transformed into a Display Stat.   See DestinyStatDefinition for a description of the stages of stat transformation.
   * @return displayInterpolation
   */
  @javax.annotation.Nullable
  public List<InterpolationInterpolationPoint> getDisplayInterpolation() {
    return displayInterpolation;
  }

  public void setDisplayInterpolation(List<InterpolationInterpolationPoint> displayInterpolation) {
    this.displayInterpolation = displayInterpolation;
  }


  public DestinyDefinitionsDestinyStatDisplayDefinition maximumValue(Integer maximumValue) {
    this.maximumValue = maximumValue;
    return this;
  }

  /**
   * Regardless of the output of interpolation, this is the maximum possible value that the stat can be. It should also be used as the upper bound for displaying the stat as a progress bar (the minimum always being 0)
   * @return maximumValue
   */
  @javax.annotation.Nullable
  public Integer getMaximumValue() {
    return maximumValue;
  }

  public void setMaximumValue(Integer maximumValue) {
    this.maximumValue = maximumValue;
  }


  public DestinyDefinitionsDestinyStatDisplayDefinition statHash(Integer statHash) {
    this.statHash = statHash;
    return this;
  }

  /**
   * The hash identifier for the stat being transformed into a Display stat.  Use it to look up the DestinyStatDefinition, or key into a DestinyInventoryItemDefinition&#39;s stats property.
   * @return statHash
   */
  @javax.annotation.Nullable
  public Integer getStatHash() {
    return statHash;
  }

  public void setStatHash(Integer statHash) {
    this.statHash = statHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyStatDisplayDefinition destinyDefinitionsDestinyStatDisplayDefinition = (DestinyDefinitionsDestinyStatDisplayDefinition) o;
    return Objects.equals(this.displayAsNumeric, destinyDefinitionsDestinyStatDisplayDefinition.displayAsNumeric) &&
        Objects.equals(this.displayInterpolation, destinyDefinitionsDestinyStatDisplayDefinition.displayInterpolation) &&
        Objects.equals(this.maximumValue, destinyDefinitionsDestinyStatDisplayDefinition.maximumValue) &&
        Objects.equals(this.statHash, destinyDefinitionsDestinyStatDisplayDefinition.statHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayAsNumeric, displayInterpolation, maximumValue, statHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyStatDisplayDefinition {\n");
    sb.append("    displayAsNumeric: ").append(toIndentedString(displayAsNumeric)).append("\n");
    sb.append("    displayInterpolation: ").append(toIndentedString(displayInterpolation)).append("\n");
    sb.append("    maximumValue: ").append(toIndentedString(maximumValue)).append("\n");
    sb.append("    statHash: ").append(toIndentedString(statHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayAsNumeric");
    openapiFields.add("displayInterpolation");
    openapiFields.add("maximumValue");
    openapiFields.add("statHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyStatDisplayDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyStatDisplayDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyStatDisplayDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyStatDisplayDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyStatDisplayDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyStatDisplayDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("displayInterpolation") != null && !jsonObj.get("displayInterpolation").isJsonNull()) {
        JsonArray jsonArraydisplayInterpolation = jsonObj.getAsJsonArray("displayInterpolation");
        if (jsonArraydisplayInterpolation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("displayInterpolation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `displayInterpolation` to be an array in the JSON string but got `%s`", jsonObj.get("displayInterpolation").toString()));
          }

          // validate the optional field `displayInterpolation` (array)
          for (int i = 0; i < jsonArraydisplayInterpolation.size(); i++) {
            InterpolationInterpolationPoint.validateJsonElement(jsonArraydisplayInterpolation.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyStatDisplayDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyStatDisplayDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyStatDisplayDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyStatDisplayDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyStatDisplayDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyStatDisplayDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyStatDisplayDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyStatDisplayDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyStatDisplayDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyStatDisplayDefinition
   */
  public static DestinyDefinitionsDestinyStatDisplayDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyStatDisplayDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyStatDisplayDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

