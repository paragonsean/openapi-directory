/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GroupsV2GroupFeatures;
import org.openapitools.client.model.GroupsV2GroupV2ClanInfoAndInvestment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GroupsV2GroupV2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupsV2GroupV2 {
  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private String about;

  public static final String SERIALIZED_NAME_ALLOW_CHAT = "allowChat";
  @SerializedName(SERIALIZED_NAME_ALLOW_CHAT)
  private Boolean allowChat;

  public static final String SERIALIZED_NAME_AVATAR_IMAGE_INDEX = "avatarImageIndex";
  @SerializedName(SERIALIZED_NAME_AVATAR_IMAGE_INDEX)
  private Integer avatarImageIndex;

  public static final String SERIALIZED_NAME_AVATAR_PATH = "avatarPath";
  @SerializedName(SERIALIZED_NAME_AVATAR_PATH)
  private String avatarPath;

  public static final String SERIALIZED_NAME_BAN_EXPIRE_DATE = "banExpireDate";
  @SerializedName(SERIALIZED_NAME_BAN_EXPIRE_DATE)
  private OffsetDateTime banExpireDate;

  public static final String SERIALIZED_NAME_BANNER_PATH = "bannerPath";
  @SerializedName(SERIALIZED_NAME_BANNER_PATH)
  private String bannerPath;

  public static final String SERIALIZED_NAME_CHAT_SECURITY = "chatSecurity";
  @SerializedName(SERIALIZED_NAME_CHAT_SECURITY)
  private Integer chatSecurity;

  public static final String SERIALIZED_NAME_CLAN_INFO = "clanInfo";
  @SerializedName(SERIALIZED_NAME_CLAN_INFO)
  private GroupsV2GroupV2ClanInfoAndInvestment clanInfo;

  public static final String SERIALIZED_NAME_CONVERSATION_ID = "conversationId";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ID)
  private Long conversationId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DEFAULT_PUBLICITY = "defaultPublicity";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PUBLICITY)
  private Integer defaultPublicity;

  public static final String SERIALIZED_NAME_ENABLE_INVITATION_MESSAGING_FOR_ADMINS = "enableInvitationMessagingForAdmins";
  @SerializedName(SERIALIZED_NAME_ENABLE_INVITATION_MESSAGING_FOR_ADMINS)
  private Boolean enableInvitationMessagingForAdmins;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private GroupsV2GroupFeatures features;

  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Long groupId;

  public static final String SERIALIZED_NAME_GROUP_TYPE = "groupType";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE)
  private Integer groupType;

  public static final String SERIALIZED_NAME_HOMEPAGE = "homepage";
  @SerializedName(SERIALIZED_NAME_HOMEPAGE)
  private Integer homepage;

  public static final String SERIALIZED_NAME_IS_DEFAULT_POST_PUBLIC = "isDefaultPostPublic";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT_POST_PUBLIC)
  private Boolean isDefaultPostPublic;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_IS_PUBLIC_TOPIC_ADMIN_ONLY = "isPublicTopicAdminOnly";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC_TOPIC_ADMIN_ONLY)
  private Boolean isPublicTopicAdminOnly;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_MEMBER_COUNT = "memberCount";
  @SerializedName(SERIALIZED_NAME_MEMBER_COUNT)
  private Integer memberCount;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ID_CREATED = "membershipIdCreated";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ID_CREATED)
  private Long membershipIdCreated;

  public static final String SERIALIZED_NAME_MEMBERSHIP_OPTION = "membershipOption";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_OPTION)
  private Integer membershipOption;

  public static final String SERIALIZED_NAME_MODIFICATION_DATE = "modificationDate";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_DATE)
  private OffsetDateTime modificationDate;

  public static final String SERIALIZED_NAME_MOTTO = "motto";
  @SerializedName(SERIALIZED_NAME_MOTTO)
  private String motto;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_THEME = "theme";
  @SerializedName(SERIALIZED_NAME_THEME)
  private String theme;

  public GroupsV2GroupV2() {
  }

  public GroupsV2GroupV2 about(String about) {
    this.about = about;
    return this;
  }

  /**
   * Get about
   * @return about
   */
  @javax.annotation.Nullable
  public String getAbout() {
    return about;
  }

  public void setAbout(String about) {
    this.about = about;
  }


  public GroupsV2GroupV2 allowChat(Boolean allowChat) {
    this.allowChat = allowChat;
    return this;
  }

  /**
   * Get allowChat
   * @return allowChat
   */
  @javax.annotation.Nullable
  public Boolean getAllowChat() {
    return allowChat;
  }

  public void setAllowChat(Boolean allowChat) {
    this.allowChat = allowChat;
  }


  public GroupsV2GroupV2 avatarImageIndex(Integer avatarImageIndex) {
    this.avatarImageIndex = avatarImageIndex;
    return this;
  }

  /**
   * Get avatarImageIndex
   * @return avatarImageIndex
   */
  @javax.annotation.Nullable
  public Integer getAvatarImageIndex() {
    return avatarImageIndex;
  }

  public void setAvatarImageIndex(Integer avatarImageIndex) {
    this.avatarImageIndex = avatarImageIndex;
  }


  public GroupsV2GroupV2 avatarPath(String avatarPath) {
    this.avatarPath = avatarPath;
    return this;
  }

  /**
   * Get avatarPath
   * @return avatarPath
   */
  @javax.annotation.Nullable
  public String getAvatarPath() {
    return avatarPath;
  }

  public void setAvatarPath(String avatarPath) {
    this.avatarPath = avatarPath;
  }


  public GroupsV2GroupV2 banExpireDate(OffsetDateTime banExpireDate) {
    this.banExpireDate = banExpireDate;
    return this;
  }

  /**
   * Get banExpireDate
   * @return banExpireDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBanExpireDate() {
    return banExpireDate;
  }

  public void setBanExpireDate(OffsetDateTime banExpireDate) {
    this.banExpireDate = banExpireDate;
  }


  public GroupsV2GroupV2 bannerPath(String bannerPath) {
    this.bannerPath = bannerPath;
    return this;
  }

  /**
   * Get bannerPath
   * @return bannerPath
   */
  @javax.annotation.Nullable
  public String getBannerPath() {
    return bannerPath;
  }

  public void setBannerPath(String bannerPath) {
    this.bannerPath = bannerPath;
  }


  public GroupsV2GroupV2 chatSecurity(Integer chatSecurity) {
    this.chatSecurity = chatSecurity;
    return this;
  }

  /**
   * Get chatSecurity
   * @return chatSecurity
   */
  @javax.annotation.Nullable
  public Integer getChatSecurity() {
    return chatSecurity;
  }

  public void setChatSecurity(Integer chatSecurity) {
    this.chatSecurity = chatSecurity;
  }


  public GroupsV2GroupV2 clanInfo(GroupsV2GroupV2ClanInfoAndInvestment clanInfo) {
    this.clanInfo = clanInfo;
    return this;
  }

  /**
   * Get clanInfo
   * @return clanInfo
   */
  @javax.annotation.Nullable
  public GroupsV2GroupV2ClanInfoAndInvestment getClanInfo() {
    return clanInfo;
  }

  public void setClanInfo(GroupsV2GroupV2ClanInfoAndInvestment clanInfo) {
    this.clanInfo = clanInfo;
  }


  public GroupsV2GroupV2 conversationId(Long conversationId) {
    this.conversationId = conversationId;
    return this;
  }

  /**
   * Get conversationId
   * @return conversationId
   */
  @javax.annotation.Nullable
  public Long getConversationId() {
    return conversationId;
  }

  public void setConversationId(Long conversationId) {
    this.conversationId = conversationId;
  }


  public GroupsV2GroupV2 creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public GroupsV2GroupV2 defaultPublicity(Integer defaultPublicity) {
    this.defaultPublicity = defaultPublicity;
    return this;
  }

  /**
   * Get defaultPublicity
   * @return defaultPublicity
   */
  @javax.annotation.Nullable
  public Integer getDefaultPublicity() {
    return defaultPublicity;
  }

  public void setDefaultPublicity(Integer defaultPublicity) {
    this.defaultPublicity = defaultPublicity;
  }


  public GroupsV2GroupV2 enableInvitationMessagingForAdmins(Boolean enableInvitationMessagingForAdmins) {
    this.enableInvitationMessagingForAdmins = enableInvitationMessagingForAdmins;
    return this;
  }

  /**
   * Get enableInvitationMessagingForAdmins
   * @return enableInvitationMessagingForAdmins
   */
  @javax.annotation.Nullable
  public Boolean getEnableInvitationMessagingForAdmins() {
    return enableInvitationMessagingForAdmins;
  }

  public void setEnableInvitationMessagingForAdmins(Boolean enableInvitationMessagingForAdmins) {
    this.enableInvitationMessagingForAdmins = enableInvitationMessagingForAdmins;
  }


  public GroupsV2GroupV2 features(GroupsV2GroupFeatures features) {
    this.features = features;
    return this;
  }

  /**
   * Get features
   * @return features
   */
  @javax.annotation.Nullable
  public GroupsV2GroupFeatures getFeatures() {
    return features;
  }

  public void setFeatures(GroupsV2GroupFeatures features) {
    this.features = features;
  }


  public GroupsV2GroupV2 groupId(Long groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Get groupId
   * @return groupId
   */
  @javax.annotation.Nullable
  public Long getGroupId() {
    return groupId;
  }

  public void setGroupId(Long groupId) {
    this.groupId = groupId;
  }


  public GroupsV2GroupV2 groupType(Integer groupType) {
    this.groupType = groupType;
    return this;
  }

  /**
   * Get groupType
   * @return groupType
   */
  @javax.annotation.Nullable
  public Integer getGroupType() {
    return groupType;
  }

  public void setGroupType(Integer groupType) {
    this.groupType = groupType;
  }


  public GroupsV2GroupV2 homepage(Integer homepage) {
    this.homepage = homepage;
    return this;
  }

  /**
   * Get homepage
   * @return homepage
   */
  @javax.annotation.Nullable
  public Integer getHomepage() {
    return homepage;
  }

  public void setHomepage(Integer homepage) {
    this.homepage = homepage;
  }


  public GroupsV2GroupV2 isDefaultPostPublic(Boolean isDefaultPostPublic) {
    this.isDefaultPostPublic = isDefaultPostPublic;
    return this;
  }

  /**
   * Get isDefaultPostPublic
   * @return isDefaultPostPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsDefaultPostPublic() {
    return isDefaultPostPublic;
  }

  public void setIsDefaultPostPublic(Boolean isDefaultPostPublic) {
    this.isDefaultPostPublic = isDefaultPostPublic;
  }


  public GroupsV2GroupV2 isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * Get isPublic
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public GroupsV2GroupV2 isPublicTopicAdminOnly(Boolean isPublicTopicAdminOnly) {
    this.isPublicTopicAdminOnly = isPublicTopicAdminOnly;
    return this;
  }

  /**
   * Get isPublicTopicAdminOnly
   * @return isPublicTopicAdminOnly
   */
  @javax.annotation.Nullable
  public Boolean getIsPublicTopicAdminOnly() {
    return isPublicTopicAdminOnly;
  }

  public void setIsPublicTopicAdminOnly(Boolean isPublicTopicAdminOnly) {
    this.isPublicTopicAdminOnly = isPublicTopicAdminOnly;
  }


  public GroupsV2GroupV2 locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public GroupsV2GroupV2 memberCount(Integer memberCount) {
    this.memberCount = memberCount;
    return this;
  }

  /**
   * Get memberCount
   * @return memberCount
   */
  @javax.annotation.Nullable
  public Integer getMemberCount() {
    return memberCount;
  }

  public void setMemberCount(Integer memberCount) {
    this.memberCount = memberCount;
  }


  public GroupsV2GroupV2 membershipIdCreated(Long membershipIdCreated) {
    this.membershipIdCreated = membershipIdCreated;
    return this;
  }

  /**
   * Get membershipIdCreated
   * @return membershipIdCreated
   */
  @javax.annotation.Nullable
  public Long getMembershipIdCreated() {
    return membershipIdCreated;
  }

  public void setMembershipIdCreated(Long membershipIdCreated) {
    this.membershipIdCreated = membershipIdCreated;
  }


  public GroupsV2GroupV2 membershipOption(Integer membershipOption) {
    this.membershipOption = membershipOption;
    return this;
  }

  /**
   * Get membershipOption
   * @return membershipOption
   */
  @javax.annotation.Nullable
  public Integer getMembershipOption() {
    return membershipOption;
  }

  public void setMembershipOption(Integer membershipOption) {
    this.membershipOption = membershipOption;
  }


  public GroupsV2GroupV2 modificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
    return this;
  }

  /**
   * Get modificationDate
   * @return modificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModificationDate() {
    return modificationDate;
  }

  public void setModificationDate(OffsetDateTime modificationDate) {
    this.modificationDate = modificationDate;
  }


  public GroupsV2GroupV2 motto(String motto) {
    this.motto = motto;
    return this;
  }

  /**
   * Get motto
   * @return motto
   */
  @javax.annotation.Nullable
  public String getMotto() {
    return motto;
  }

  public void setMotto(String motto) {
    this.motto = motto;
  }


  public GroupsV2GroupV2 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GroupsV2GroupV2 tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public GroupsV2GroupV2 addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public GroupsV2GroupV2 theme(String theme) {
    this.theme = theme;
    return this;
  }

  /**
   * Get theme
   * @return theme
   */
  @javax.annotation.Nullable
  public String getTheme() {
    return theme;
  }

  public void setTheme(String theme) {
    this.theme = theme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupsV2GroupV2 groupsV2GroupV2 = (GroupsV2GroupV2) o;
    return Objects.equals(this.about, groupsV2GroupV2.about) &&
        Objects.equals(this.allowChat, groupsV2GroupV2.allowChat) &&
        Objects.equals(this.avatarImageIndex, groupsV2GroupV2.avatarImageIndex) &&
        Objects.equals(this.avatarPath, groupsV2GroupV2.avatarPath) &&
        Objects.equals(this.banExpireDate, groupsV2GroupV2.banExpireDate) &&
        Objects.equals(this.bannerPath, groupsV2GroupV2.bannerPath) &&
        Objects.equals(this.chatSecurity, groupsV2GroupV2.chatSecurity) &&
        Objects.equals(this.clanInfo, groupsV2GroupV2.clanInfo) &&
        Objects.equals(this.conversationId, groupsV2GroupV2.conversationId) &&
        Objects.equals(this.creationDate, groupsV2GroupV2.creationDate) &&
        Objects.equals(this.defaultPublicity, groupsV2GroupV2.defaultPublicity) &&
        Objects.equals(this.enableInvitationMessagingForAdmins, groupsV2GroupV2.enableInvitationMessagingForAdmins) &&
        Objects.equals(this.features, groupsV2GroupV2.features) &&
        Objects.equals(this.groupId, groupsV2GroupV2.groupId) &&
        Objects.equals(this.groupType, groupsV2GroupV2.groupType) &&
        Objects.equals(this.homepage, groupsV2GroupV2.homepage) &&
        Objects.equals(this.isDefaultPostPublic, groupsV2GroupV2.isDefaultPostPublic) &&
        Objects.equals(this.isPublic, groupsV2GroupV2.isPublic) &&
        Objects.equals(this.isPublicTopicAdminOnly, groupsV2GroupV2.isPublicTopicAdminOnly) &&
        Objects.equals(this.locale, groupsV2GroupV2.locale) &&
        Objects.equals(this.memberCount, groupsV2GroupV2.memberCount) &&
        Objects.equals(this.membershipIdCreated, groupsV2GroupV2.membershipIdCreated) &&
        Objects.equals(this.membershipOption, groupsV2GroupV2.membershipOption) &&
        Objects.equals(this.modificationDate, groupsV2GroupV2.modificationDate) &&
        Objects.equals(this.motto, groupsV2GroupV2.motto) &&
        Objects.equals(this.name, groupsV2GroupV2.name) &&
        Objects.equals(this.tags, groupsV2GroupV2.tags) &&
        Objects.equals(this.theme, groupsV2GroupV2.theme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, allowChat, avatarImageIndex, avatarPath, banExpireDate, bannerPath, chatSecurity, clanInfo, conversationId, creationDate, defaultPublicity, enableInvitationMessagingForAdmins, features, groupId, groupType, homepage, isDefaultPostPublic, isPublic, isPublicTopicAdminOnly, locale, memberCount, membershipIdCreated, membershipOption, modificationDate, motto, name, tags, theme);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupsV2GroupV2 {\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    allowChat: ").append(toIndentedString(allowChat)).append("\n");
    sb.append("    avatarImageIndex: ").append(toIndentedString(avatarImageIndex)).append("\n");
    sb.append("    avatarPath: ").append(toIndentedString(avatarPath)).append("\n");
    sb.append("    banExpireDate: ").append(toIndentedString(banExpireDate)).append("\n");
    sb.append("    bannerPath: ").append(toIndentedString(bannerPath)).append("\n");
    sb.append("    chatSecurity: ").append(toIndentedString(chatSecurity)).append("\n");
    sb.append("    clanInfo: ").append(toIndentedString(clanInfo)).append("\n");
    sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    defaultPublicity: ").append(toIndentedString(defaultPublicity)).append("\n");
    sb.append("    enableInvitationMessagingForAdmins: ").append(toIndentedString(enableInvitationMessagingForAdmins)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    homepage: ").append(toIndentedString(homepage)).append("\n");
    sb.append("    isDefaultPostPublic: ").append(toIndentedString(isDefaultPostPublic)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    isPublicTopicAdminOnly: ").append(toIndentedString(isPublicTopicAdminOnly)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
    sb.append("    membershipIdCreated: ").append(toIndentedString(membershipIdCreated)).append("\n");
    sb.append("    membershipOption: ").append(toIndentedString(membershipOption)).append("\n");
    sb.append("    modificationDate: ").append(toIndentedString(modificationDate)).append("\n");
    sb.append("    motto: ").append(toIndentedString(motto)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("about");
    openapiFields.add("allowChat");
    openapiFields.add("avatarImageIndex");
    openapiFields.add("avatarPath");
    openapiFields.add("banExpireDate");
    openapiFields.add("bannerPath");
    openapiFields.add("chatSecurity");
    openapiFields.add("clanInfo");
    openapiFields.add("conversationId");
    openapiFields.add("creationDate");
    openapiFields.add("defaultPublicity");
    openapiFields.add("enableInvitationMessagingForAdmins");
    openapiFields.add("features");
    openapiFields.add("groupId");
    openapiFields.add("groupType");
    openapiFields.add("homepage");
    openapiFields.add("isDefaultPostPublic");
    openapiFields.add("isPublic");
    openapiFields.add("isPublicTopicAdminOnly");
    openapiFields.add("locale");
    openapiFields.add("memberCount");
    openapiFields.add("membershipIdCreated");
    openapiFields.add("membershipOption");
    openapiFields.add("modificationDate");
    openapiFields.add("motto");
    openapiFields.add("name");
    openapiFields.add("tags");
    openapiFields.add("theme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupsV2GroupV2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupsV2GroupV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupsV2GroupV2 is not found in the empty JSON string", GroupsV2GroupV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupsV2GroupV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupsV2GroupV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) && !jsonObj.get("about").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `about` to be a primitive type in the JSON string but got `%s`", jsonObj.get("about").toString()));
      }
      if ((jsonObj.get("avatarPath") != null && !jsonObj.get("avatarPath").isJsonNull()) && !jsonObj.get("avatarPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatarPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatarPath").toString()));
      }
      if ((jsonObj.get("bannerPath") != null && !jsonObj.get("bannerPath").isJsonNull()) && !jsonObj.get("bannerPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bannerPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bannerPath").toString()));
      }
      // validate the optional field `clanInfo`
      if (jsonObj.get("clanInfo") != null && !jsonObj.get("clanInfo").isJsonNull()) {
        GroupsV2GroupV2ClanInfoAndInvestment.validateJsonElement(jsonObj.get("clanInfo"));
      }
      // validate the optional field `features`
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        GroupsV2GroupFeatures.validateJsonElement(jsonObj.get("features"));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("motto") != null && !jsonObj.get("motto").isJsonNull()) && !jsonObj.get("motto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `motto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("motto").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("theme") != null && !jsonObj.get("theme").isJsonNull()) && !jsonObj.get("theme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupsV2GroupV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupsV2GroupV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupsV2GroupV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupsV2GroupV2.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupsV2GroupV2>() {
           @Override
           public void write(JsonWriter out, GroupsV2GroupV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupsV2GroupV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupsV2GroupV2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupsV2GroupV2
   * @throws IOException if the JSON string is invalid with respect to GroupsV2GroupV2
   */
  public static GroupsV2GroupV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupsV2GroupV2.class);
  }

  /**
   * Convert an instance of GroupsV2GroupV2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

