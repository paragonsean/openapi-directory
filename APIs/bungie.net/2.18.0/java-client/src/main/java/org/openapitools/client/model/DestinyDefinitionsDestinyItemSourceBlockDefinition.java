/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyItemVendorSourceReference;
import org.openapitools.client.model.DestinyDefinitionsSourcesDestinyItemSourceDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data about an item&#39;s \&quot;sources\&quot;: ways that the item can be obtained.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemSourceBlockDefinition {
  public static final String SERIALIZED_NAME_EXCLUSIVE = "exclusive";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE)
  private Integer exclusive;

  public static final String SERIALIZED_NAME_SOURCE_HASHES = "sourceHashes";
  @SerializedName(SERIALIZED_NAME_SOURCE_HASHES)
  private List<Integer> sourceHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<DestinyDefinitionsSourcesDestinyItemSourceDefinition> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_VENDOR_SOURCES = "vendorSources";
  @SerializedName(SERIALIZED_NAME_VENDOR_SOURCES)
  private List<DestinyDefinitionsDestinyItemVendorSourceReference> vendorSources = new ArrayList<>();

  public DestinyDefinitionsDestinyItemSourceBlockDefinition() {
  }

  public DestinyDefinitionsDestinyItemSourceBlockDefinition exclusive(Integer exclusive) {
    this.exclusive = exclusive;
    return this;
  }

  /**
   * If we found that this item is exclusive to a specific platform, this will be set to the BungieMembershipType enumeration that matches that platform.
   * @return exclusive
   */
  @javax.annotation.Nullable
  public Integer getExclusive() {
    return exclusive;
  }

  public void setExclusive(Integer exclusive) {
    this.exclusive = exclusive;
  }


  public DestinyDefinitionsDestinyItemSourceBlockDefinition sourceHashes(List<Integer> sourceHashes) {
    this.sourceHashes = sourceHashes;
    return this;
  }

  public DestinyDefinitionsDestinyItemSourceBlockDefinition addSourceHashesItem(Integer sourceHashesItem) {
    if (this.sourceHashes == null) {
      this.sourceHashes = new ArrayList<>();
    }
    this.sourceHashes.add(sourceHashesItem);
    return this;
  }

  /**
   * The list of hash identifiers for Reward Sources that hint where the item can be found (DestinyRewardSourceDefinition).
   * @return sourceHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getSourceHashes() {
    return sourceHashes;
  }

  public void setSourceHashes(List<Integer> sourceHashes) {
    this.sourceHashes = sourceHashes;
  }


  public DestinyDefinitionsDestinyItemSourceBlockDefinition sources(List<DestinyDefinitionsSourcesDestinyItemSourceDefinition> sources) {
    this.sources = sources;
    return this;
  }

  public DestinyDefinitionsDestinyItemSourceBlockDefinition addSourcesItem(DestinyDefinitionsSourcesDestinyItemSourceDefinition sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * A collection of details about the stats that were computed for the ways we found that the item could be spawned.
   * @return sources
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsSourcesDestinyItemSourceDefinition> getSources() {
    return sources;
  }

  public void setSources(List<DestinyDefinitionsSourcesDestinyItemSourceDefinition> sources) {
    this.sources = sources;
  }


  public DestinyDefinitionsDestinyItemSourceBlockDefinition vendorSources(List<DestinyDefinitionsDestinyItemVendorSourceReference> vendorSources) {
    this.vendorSources = vendorSources;
    return this;
  }

  public DestinyDefinitionsDestinyItemSourceBlockDefinition addVendorSourcesItem(DestinyDefinitionsDestinyItemVendorSourceReference vendorSourcesItem) {
    if (this.vendorSources == null) {
      this.vendorSources = new ArrayList<>();
    }
    this.vendorSources.add(vendorSourcesItem);
    return this;
  }

  /**
   * A denormalized reference back to vendors that potentially sell this item.
   * @return vendorSources
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyItemVendorSourceReference> getVendorSources() {
    return vendorSources;
  }

  public void setVendorSources(List<DestinyDefinitionsDestinyItemVendorSourceReference> vendorSources) {
    this.vendorSources = vendorSources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemSourceBlockDefinition destinyDefinitionsDestinyItemSourceBlockDefinition = (DestinyDefinitionsDestinyItemSourceBlockDefinition) o;
    return Objects.equals(this.exclusive, destinyDefinitionsDestinyItemSourceBlockDefinition.exclusive) &&
        Objects.equals(this.sourceHashes, destinyDefinitionsDestinyItemSourceBlockDefinition.sourceHashes) &&
        Objects.equals(this.sources, destinyDefinitionsDestinyItemSourceBlockDefinition.sources) &&
        Objects.equals(this.vendorSources, destinyDefinitionsDestinyItemSourceBlockDefinition.vendorSources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exclusive, sourceHashes, sources, vendorSources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemSourceBlockDefinition {\n");
    sb.append("    exclusive: ").append(toIndentedString(exclusive)).append("\n");
    sb.append("    sourceHashes: ").append(toIndentedString(sourceHashes)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    vendorSources: ").append(toIndentedString(vendorSources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exclusive");
    openapiFields.add("sourceHashes");
    openapiFields.add("sources");
    openapiFields.add("vendorSources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemSourceBlockDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemSourceBlockDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemSourceBlockDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemSourceBlockDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemSourceBlockDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemSourceBlockDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceHashes") != null && !jsonObj.get("sourceHashes").isJsonNull() && !jsonObj.get("sourceHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceHashes` to be an array in the JSON string but got `%s`", jsonObj.get("sourceHashes").toString()));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            DestinyDefinitionsSourcesDestinyItemSourceDefinition.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
      if (jsonObj.get("vendorSources") != null && !jsonObj.get("vendorSources").isJsonNull()) {
        JsonArray jsonArrayvendorSources = jsonObj.getAsJsonArray("vendorSources");
        if (jsonArrayvendorSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vendorSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vendorSources` to be an array in the JSON string but got `%s`", jsonObj.get("vendorSources").toString()));
          }

          // validate the optional field `vendorSources` (array)
          for (int i = 0; i < jsonArrayvendorSources.size(); i++) {
            DestinyDefinitionsDestinyItemVendorSourceReference.validateJsonElement(jsonArrayvendorSources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemSourceBlockDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemSourceBlockDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemSourceBlockDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemSourceBlockDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemSourceBlockDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemSourceBlockDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemSourceBlockDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemSourceBlockDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemSourceBlockDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemSourceBlockDefinition
   */
  public static DestinyDefinitionsDestinyItemSourceBlockDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemSourceBlockDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemSourceBlockDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

