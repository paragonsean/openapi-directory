/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Many actions relating to items require you to expend materials: - Activating a talent node - Inserting a plug into a socket The items will refer to material requirements by a materialRequirementsHash in these cases, and this is the definition for those requirements in terms of the item required, how much of it is required and other interesting info. This is one of the rare/strange times where a single contract class is used both in definitions *and* in live data response contracts. I&#39;m not sure yet whether I regret that.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyMaterialRequirement {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_COUNT_IS_CONSTANT = "countIsConstant";
  @SerializedName(SERIALIZED_NAME_COUNT_IS_CONSTANT)
  private Boolean countIsConstant;

  public static final String SERIALIZED_NAME_DELETE_ON_ACTION = "deleteOnAction";
  @SerializedName(SERIALIZED_NAME_DELETE_ON_ACTION)
  private Boolean deleteOnAction;

  public static final String SERIALIZED_NAME_ITEM_HASH = "itemHash";
  @SerializedName(SERIALIZED_NAME_ITEM_HASH)
  private Integer itemHash;

  public static final String SERIALIZED_NAME_OMIT_FROM_REQUIREMENTS = "omitFromRequirements";
  @SerializedName(SERIALIZED_NAME_OMIT_FROM_REQUIREMENTS)
  private Boolean omitFromRequirements;

  public DestinyDefinitionsDestinyMaterialRequirement() {
  }

  public DestinyDefinitionsDestinyMaterialRequirement count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * The amount of the material required.
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public DestinyDefinitionsDestinyMaterialRequirement countIsConstant(Boolean countIsConstant) {
    this.countIsConstant = countIsConstant;
    return this;
  }

  /**
   * If true, the material requirement count value is constant. Since The Witch Queen expansion, some material requirement counts can be dynamic and will need to be returned with an API call.
   * @return countIsConstant
   */
  @javax.annotation.Nullable
  public Boolean getCountIsConstant() {
    return countIsConstant;
  }

  public void setCountIsConstant(Boolean countIsConstant) {
    this.countIsConstant = countIsConstant;
  }


  public DestinyDefinitionsDestinyMaterialRequirement deleteOnAction(Boolean deleteOnAction) {
    this.deleteOnAction = deleteOnAction;
    return this;
  }

  /**
   * If True, the material will be removed from the character&#39;s inventory when the action is performed.
   * @return deleteOnAction
   */
  @javax.annotation.Nullable
  public Boolean getDeleteOnAction() {
    return deleteOnAction;
  }

  public void setDeleteOnAction(Boolean deleteOnAction) {
    this.deleteOnAction = deleteOnAction;
  }


  public DestinyDefinitionsDestinyMaterialRequirement itemHash(Integer itemHash) {
    this.itemHash = itemHash;
    return this;
  }

  /**
   * The hash identifier of the material required. Use it to look up the material&#39;s DestinyInventoryItemDefinition.
   * @return itemHash
   */
  @javax.annotation.Nullable
  public Integer getItemHash() {
    return itemHash;
  }

  public void setItemHash(Integer itemHash) {
    this.itemHash = itemHash;
  }


  public DestinyDefinitionsDestinyMaterialRequirement omitFromRequirements(Boolean omitFromRequirements) {
    this.omitFromRequirements = omitFromRequirements;
    return this;
  }

  /**
   * If True, this requirement is \&quot;silent\&quot;: don&#39;t bother showing it in a material requirements display. I mean, I&#39;m not your mom: I&#39;m not going to tell you you *can&#39;t* show it. But we won&#39;t show it in our UI.
   * @return omitFromRequirements
   */
  @javax.annotation.Nullable
  public Boolean getOmitFromRequirements() {
    return omitFromRequirements;
  }

  public void setOmitFromRequirements(Boolean omitFromRequirements) {
    this.omitFromRequirements = omitFromRequirements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyMaterialRequirement destinyDefinitionsDestinyMaterialRequirement = (DestinyDefinitionsDestinyMaterialRequirement) o;
    return Objects.equals(this.count, destinyDefinitionsDestinyMaterialRequirement.count) &&
        Objects.equals(this.countIsConstant, destinyDefinitionsDestinyMaterialRequirement.countIsConstant) &&
        Objects.equals(this.deleteOnAction, destinyDefinitionsDestinyMaterialRequirement.deleteOnAction) &&
        Objects.equals(this.itemHash, destinyDefinitionsDestinyMaterialRequirement.itemHash) &&
        Objects.equals(this.omitFromRequirements, destinyDefinitionsDestinyMaterialRequirement.omitFromRequirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, countIsConstant, deleteOnAction, itemHash, omitFromRequirements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyMaterialRequirement {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    countIsConstant: ").append(toIndentedString(countIsConstant)).append("\n");
    sb.append("    deleteOnAction: ").append(toIndentedString(deleteOnAction)).append("\n");
    sb.append("    itemHash: ").append(toIndentedString(itemHash)).append("\n");
    sb.append("    omitFromRequirements: ").append(toIndentedString(omitFromRequirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("countIsConstant");
    openapiFields.add("deleteOnAction");
    openapiFields.add("itemHash");
    openapiFields.add("omitFromRequirements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyMaterialRequirement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyMaterialRequirement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyMaterialRequirement is not found in the empty JSON string", DestinyDefinitionsDestinyMaterialRequirement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyMaterialRequirement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyMaterialRequirement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyMaterialRequirement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyMaterialRequirement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyMaterialRequirement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyMaterialRequirement.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyMaterialRequirement>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyMaterialRequirement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyMaterialRequirement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyMaterialRequirement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyMaterialRequirement
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyMaterialRequirement
   */
  public static DestinyDefinitionsDestinyMaterialRequirement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyMaterialRequirement.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyMaterialRequirement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

