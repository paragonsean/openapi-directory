/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is a bit of an odd duck. Apparently, if talent nodes steps have this data, the game will go through on step activation and alter the first Socket it finds on the item that has a type matching the given socket type, inserting the indicated plug item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyNodeSocketReplaceResponse {
  public static final String SERIALIZED_NAME_PLUG_ITEM_HASH = "plugItemHash";
  @SerializedName(SERIALIZED_NAME_PLUG_ITEM_HASH)
  private Integer plugItemHash;

  public static final String SERIALIZED_NAME_SOCKET_TYPE_HASH = "socketTypeHash";
  @SerializedName(SERIALIZED_NAME_SOCKET_TYPE_HASH)
  private Integer socketTypeHash;

  public DestinyDefinitionsDestinyNodeSocketReplaceResponse() {
  }

  public DestinyDefinitionsDestinyNodeSocketReplaceResponse plugItemHash(Integer plugItemHash) {
    this.plugItemHash = plugItemHash;
    return this;
  }

  /**
   * The hash identifier of the plug item that will be inserted into the socket found.
   * @return plugItemHash
   */
  @javax.annotation.Nullable
  public Integer getPlugItemHash() {
    return plugItemHash;
  }

  public void setPlugItemHash(Integer plugItemHash) {
    this.plugItemHash = plugItemHash;
  }


  public DestinyDefinitionsDestinyNodeSocketReplaceResponse socketTypeHash(Integer socketTypeHash) {
    this.socketTypeHash = socketTypeHash;
    return this;
  }

  /**
   * The hash identifier of the socket type to find amidst the item&#39;s sockets (the item to which this talent grid is attached). See DestinyInventoryItemDefinition.sockets.socketEntries to find the socket type of sockets on the item in question.
   * @return socketTypeHash
   */
  @javax.annotation.Nullable
  public Integer getSocketTypeHash() {
    return socketTypeHash;
  }

  public void setSocketTypeHash(Integer socketTypeHash) {
    this.socketTypeHash = socketTypeHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyNodeSocketReplaceResponse destinyDefinitionsDestinyNodeSocketReplaceResponse = (DestinyDefinitionsDestinyNodeSocketReplaceResponse) o;
    return Objects.equals(this.plugItemHash, destinyDefinitionsDestinyNodeSocketReplaceResponse.plugItemHash) &&
        Objects.equals(this.socketTypeHash, destinyDefinitionsDestinyNodeSocketReplaceResponse.socketTypeHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plugItemHash, socketTypeHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyNodeSocketReplaceResponse {\n");
    sb.append("    plugItemHash: ").append(toIndentedString(plugItemHash)).append("\n");
    sb.append("    socketTypeHash: ").append(toIndentedString(socketTypeHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("plugItemHash");
    openapiFields.add("socketTypeHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyNodeSocketReplaceResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyNodeSocketReplaceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyNodeSocketReplaceResponse is not found in the empty JSON string", DestinyDefinitionsDestinyNodeSocketReplaceResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyNodeSocketReplaceResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyNodeSocketReplaceResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyNodeSocketReplaceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyNodeSocketReplaceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyNodeSocketReplaceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyNodeSocketReplaceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyNodeSocketReplaceResponse>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyNodeSocketReplaceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyNodeSocketReplaceResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyNodeSocketReplaceResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyNodeSocketReplaceResponse
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyNodeSocketReplaceResponse
   */
  public static DestinyDefinitionsDestinyNodeSocketReplaceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyNodeSocketReplaceResponse.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyNodeSocketReplaceResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

