/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetAvailableLocales200Response;
import org.openapitools.client.model.UserGetAvailableThemes200Response;
import org.openapitools.client.model.UserGetBungieNetUserById200Response;
import org.openapitools.client.model.UserGetCredentialTypesForTargetAccount200Response;
import org.openapitools.client.model.UserGetMembershipDataById200Response;
import org.openapitools.client.model.UserGetMembershipFromHardLinkedCredential200Response;
import org.openapitools.client.model.UserSearchByGlobalNamePost200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for userGetAvailableThemes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetAvailableThemesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/User/GetAvailableThemes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetAvailableThemesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userGetAvailableThemesCall(_callback);

    }

    /**
     * 
     * Returns a list of all available user themes.
     * @return UserGetAvailableThemes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public UserGetAvailableThemes200Response userGetAvailableThemes() throws ApiException {
        ApiResponse<UserGetAvailableThemes200Response> localVarResp = userGetAvailableThemesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of all available user themes.
     * @return ApiResponse&lt;UserGetAvailableThemes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGetAvailableThemes200Response> userGetAvailableThemesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userGetAvailableThemesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserGetAvailableThemes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of all available user themes.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetAvailableThemesAsync(final ApiCallback<UserGetAvailableThemes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetAvailableThemesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserGetAvailableThemes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetBungieNetUserById
     * @param id The requested Bungie.net membership id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetBungieNetUserByIdCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/User/GetBungieNetUserById/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetBungieNetUserByIdValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userGetBungieNetUserById(Async)");
        }

        return userGetBungieNetUserByIdCall(id, _callback);

    }

    /**
     * 
     * Loads a bungienet user by membership id.
     * @param id The requested Bungie.net membership id. (required)
     * @return UserGetBungieNetUserById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public UserGetBungieNetUserById200Response userGetBungieNetUserById(Long id) throws ApiException {
        ApiResponse<UserGetBungieNetUserById200Response> localVarResp = userGetBungieNetUserByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Loads a bungienet user by membership id.
     * @param id The requested Bungie.net membership id. (required)
     * @return ApiResponse&lt;UserGetBungieNetUserById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGetBungieNetUserById200Response> userGetBungieNetUserByIdWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = userGetBungieNetUserByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UserGetBungieNetUserById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Loads a bungienet user by membership id.
     * @param id The requested Bungie.net membership id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetBungieNetUserByIdAsync(Long id, final ApiCallback<UserGetBungieNetUserById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetBungieNetUserByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UserGetBungieNetUserById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetCredentialTypesForTargetAccount
     * @param membershipId The user&#39;s membership id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetCredentialTypesForTargetAccountCall(Long membershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/User/GetCredentialTypesForTargetAccount/{membershipId}/"
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetCredentialTypesForTargetAccountValidateBeforeCall(Long membershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling userGetCredentialTypesForTargetAccount(Async)");
        }

        return userGetCredentialTypesForTargetAccountCall(membershipId, _callback);

    }

    /**
     * 
     * Returns a list of credential types attached to the requested account
     * @param membershipId The user&#39;s membership id (required)
     * @return UserGetCredentialTypesForTargetAccount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public UserGetCredentialTypesForTargetAccount200Response userGetCredentialTypesForTargetAccount(Long membershipId) throws ApiException {
        ApiResponse<UserGetCredentialTypesForTargetAccount200Response> localVarResp = userGetCredentialTypesForTargetAccountWithHttpInfo(membershipId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of credential types attached to the requested account
     * @param membershipId The user&#39;s membership id (required)
     * @return ApiResponse&lt;UserGetCredentialTypesForTargetAccount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGetCredentialTypesForTargetAccount200Response> userGetCredentialTypesForTargetAccountWithHttpInfo(Long membershipId) throws ApiException {
        okhttp3.Call localVarCall = userGetCredentialTypesForTargetAccountValidateBeforeCall(membershipId, null);
        Type localVarReturnType = new TypeToken<UserGetCredentialTypesForTargetAccount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of credential types attached to the requested account
     * @param membershipId The user&#39;s membership id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetCredentialTypesForTargetAccountAsync(Long membershipId, final ApiCallback<UserGetCredentialTypesForTargetAccount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetCredentialTypesForTargetAccountValidateBeforeCall(membershipId, _callback);
        Type localVarReturnType = new TypeToken<UserGetCredentialTypesForTargetAccount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetMembershipDataById
     * @param membershipId The membership ID of the target user. (required)
     * @param membershipType Type of the supplied membership ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetMembershipDataByIdCall(Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/User/GetMembershipsById/{membershipId}/{membershipType}/"
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetMembershipDataByIdValidateBeforeCall(Long membershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling userGetMembershipDataById(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling userGetMembershipDataById(Async)");
        }

        return userGetMembershipDataByIdCall(membershipId, membershipType, _callback);

    }

    /**
     * 
     * Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
     * @param membershipId The membership ID of the target user. (required)
     * @param membershipType Type of the supplied membership ID. (required)
     * @return UserGetMembershipDataById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public UserGetMembershipDataById200Response userGetMembershipDataById(Long membershipId, Integer membershipType) throws ApiException {
        ApiResponse<UserGetMembershipDataById200Response> localVarResp = userGetMembershipDataByIdWithHttpInfo(membershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
     * @param membershipId The membership ID of the target user. (required)
     * @param membershipType Type of the supplied membership ID. (required)
     * @return ApiResponse&lt;UserGetMembershipDataById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGetMembershipDataById200Response> userGetMembershipDataByIdWithHttpInfo(Long membershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = userGetMembershipDataByIdValidateBeforeCall(membershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<UserGetMembershipDataById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
     * @param membershipId The membership ID of the target user. (required)
     * @param membershipType Type of the supplied membership ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetMembershipDataByIdAsync(Long membershipId, Integer membershipType, final ApiCallback<UserGetMembershipDataById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetMembershipDataByIdValidateBeforeCall(membershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<UserGetMembershipDataById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetMembershipDataForCurrentUser
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetMembershipDataForCurrentUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/User/GetMembershipsForCurrentUser/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetMembershipDataForCurrentUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userGetMembershipDataForCurrentUserCall(_callback);

    }

    /**
     * 
     * Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
     * @return UserGetMembershipDataById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public UserGetMembershipDataById200Response userGetMembershipDataForCurrentUser() throws ApiException {
        ApiResponse<UserGetMembershipDataById200Response> localVarResp = userGetMembershipDataForCurrentUserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
     * @return ApiResponse&lt;UserGetMembershipDataById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGetMembershipDataById200Response> userGetMembershipDataForCurrentUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userGetMembershipDataForCurrentUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserGetMembershipDataById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetMembershipDataForCurrentUserAsync(final ApiCallback<UserGetMembershipDataById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetMembershipDataForCurrentUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserGetMembershipDataById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetMembershipFromHardLinkedCredential
     * @param credential The credential to look up. Must be a valid SteamID64. (required)
     * @param crType The credential type. &#39;SteamId&#39; is the only valid value at present. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetMembershipFromHardLinkedCredentialCall(String credential, Integer crType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/User/GetMembershipFromHardLinkedCredential/{crType}/{credential}/"
            .replace("{" + "credential" + "}", localVarApiClient.escapeString(credential.toString()))
            .replace("{" + "crType" + "}", localVarApiClient.escapeString(crType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetMembershipFromHardLinkedCredentialValidateBeforeCall(String credential, Integer crType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'credential' is set
        if (credential == null) {
            throw new ApiException("Missing the required parameter 'credential' when calling userGetMembershipFromHardLinkedCredential(Async)");
        }

        // verify the required parameter 'crType' is set
        if (crType == null) {
            throw new ApiException("Missing the required parameter 'crType' when calling userGetMembershipFromHardLinkedCredential(Async)");
        }

        return userGetMembershipFromHardLinkedCredentialCall(credential, crType, _callback);

    }

    /**
     * 
     * Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
     * @param credential The credential to look up. Must be a valid SteamID64. (required)
     * @param crType The credential type. &#39;SteamId&#39; is the only valid value at present. (required)
     * @return UserGetMembershipFromHardLinkedCredential200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public UserGetMembershipFromHardLinkedCredential200Response userGetMembershipFromHardLinkedCredential(String credential, Integer crType) throws ApiException {
        ApiResponse<UserGetMembershipFromHardLinkedCredential200Response> localVarResp = userGetMembershipFromHardLinkedCredentialWithHttpInfo(credential, crType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
     * @param credential The credential to look up. Must be a valid SteamID64. (required)
     * @param crType The credential type. &#39;SteamId&#39; is the only valid value at present. (required)
     * @return ApiResponse&lt;UserGetMembershipFromHardLinkedCredential200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGetMembershipFromHardLinkedCredential200Response> userGetMembershipFromHardLinkedCredentialWithHttpInfo(String credential, Integer crType) throws ApiException {
        okhttp3.Call localVarCall = userGetMembershipFromHardLinkedCredentialValidateBeforeCall(credential, crType, null);
        Type localVarReturnType = new TypeToken<UserGetMembershipFromHardLinkedCredential200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
     * @param credential The credential to look up. Must be a valid SteamID64. (required)
     * @param crType The credential type. &#39;SteamId&#39; is the only valid value at present. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetMembershipFromHardLinkedCredentialAsync(String credential, Integer crType, final ApiCallback<UserGetMembershipFromHardLinkedCredential200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetMembershipFromHardLinkedCredentialValidateBeforeCall(credential, crType, _callback);
        Type localVarReturnType = new TypeToken<UserGetMembershipFromHardLinkedCredential200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userGetSanitizedPlatformDisplayNames
     * @param membershipId The requested membership id to load. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetSanitizedPlatformDisplayNamesCall(Long membershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/User/GetSanitizedPlatformDisplayNames/{membershipId}/"
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetSanitizedPlatformDisplayNamesValidateBeforeCall(Long membershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling userGetSanitizedPlatformDisplayNames(Async)");
        }

        return userGetSanitizedPlatformDisplayNamesCall(membershipId, _callback);

    }

    /**
     * 
     * Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
     * @param membershipId The requested membership id to load. (required)
     * @return GetAvailableLocales200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableLocales200Response userGetSanitizedPlatformDisplayNames(Long membershipId) throws ApiException {
        ApiResponse<GetAvailableLocales200Response> localVarResp = userGetSanitizedPlatformDisplayNamesWithHttpInfo(membershipId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
     * @param membershipId The requested membership id to load. (required)
     * @return ApiResponse&lt;GetAvailableLocales200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAvailableLocales200Response> userGetSanitizedPlatformDisplayNamesWithHttpInfo(Long membershipId) throws ApiException {
        okhttp3.Call localVarCall = userGetSanitizedPlatformDisplayNamesValidateBeforeCall(membershipId, null);
        Type localVarReturnType = new TypeToken<GetAvailableLocales200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
     * @param membershipId The requested membership id to load. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetSanitizedPlatformDisplayNamesAsync(Long membershipId, final ApiCallback<GetAvailableLocales200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetSanitizedPlatformDisplayNamesValidateBeforeCall(membershipId, _callback);
        Type localVarReturnType = new TypeToken<GetAvailableLocales200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSearchByGlobalNamePost
     * @param page The zero-based page of results you desire. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSearchByGlobalNamePostCall(Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/User/Search/GlobalName/{page}/"
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSearchByGlobalNamePostValidateBeforeCall(Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling userSearchByGlobalNamePost(Async)");
        }

        return userSearchByGlobalNamePostCall(page, _callback);

    }

    /**
     * 
     * Given the prefix of a global display name, returns all users who share that name.
     * @param page The zero-based page of results you desire. (required)
     * @return UserSearchByGlobalNamePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public UserSearchByGlobalNamePost200Response userSearchByGlobalNamePost(Integer page) throws ApiException {
        ApiResponse<UserSearchByGlobalNamePost200Response> localVarResp = userSearchByGlobalNamePostWithHttpInfo(page);
        return localVarResp.getData();
    }

    /**
     * 
     * Given the prefix of a global display name, returns all users who share that name.
     * @param page The zero-based page of results you desire. (required)
     * @return ApiResponse&lt;UserSearchByGlobalNamePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserSearchByGlobalNamePost200Response> userSearchByGlobalNamePostWithHttpInfo(Integer page) throws ApiException {
        okhttp3.Call localVarCall = userSearchByGlobalNamePostValidateBeforeCall(page, null);
        Type localVarReturnType = new TypeToken<UserSearchByGlobalNamePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Given the prefix of a global display name, returns all users who share that name.
     * @param page The zero-based page of results you desire. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSearchByGlobalNamePostAsync(Integer page, final ApiCallback<UserSearchByGlobalNamePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSearchByGlobalNamePostValidateBeforeCall(page, _callback);
        Type localVarReturnType = new TypeToken<UserSearchByGlobalNamePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSearchByGlobalNamePrefix
     * @param displayNamePrefix The display name prefix you&#39;re looking for. (required)
     * @param page The zero-based page of results you desire. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSearchByGlobalNamePrefixCall(String displayNamePrefix, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/User/Search/Prefix/{displayNamePrefix}/{page}/"
            .replace("{" + "displayNamePrefix" + "}", localVarApiClient.escapeString(displayNamePrefix.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSearchByGlobalNamePrefixValidateBeforeCall(String displayNamePrefix, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'displayNamePrefix' is set
        if (displayNamePrefix == null) {
            throw new ApiException("Missing the required parameter 'displayNamePrefix' when calling userSearchByGlobalNamePrefix(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling userSearchByGlobalNamePrefix(Async)");
        }

        return userSearchByGlobalNamePrefixCall(displayNamePrefix, page, _callback);

    }

    /**
     * 
     * [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
     * @param displayNamePrefix The display name prefix you&#39;re looking for. (required)
     * @param page The zero-based page of results you desire. (required)
     * @return UserSearchByGlobalNamePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public UserSearchByGlobalNamePost200Response userSearchByGlobalNamePrefix(String displayNamePrefix, Integer page) throws ApiException {
        ApiResponse<UserSearchByGlobalNamePost200Response> localVarResp = userSearchByGlobalNamePrefixWithHttpInfo(displayNamePrefix, page);
        return localVarResp.getData();
    }

    /**
     * 
     * [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
     * @param displayNamePrefix The display name prefix you&#39;re looking for. (required)
     * @param page The zero-based page of results you desire. (required)
     * @return ApiResponse&lt;UserSearchByGlobalNamePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserSearchByGlobalNamePost200Response> userSearchByGlobalNamePrefixWithHttpInfo(String displayNamePrefix, Integer page) throws ApiException {
        okhttp3.Call localVarCall = userSearchByGlobalNamePrefixValidateBeforeCall(displayNamePrefix, page, null);
        Type localVarReturnType = new TypeToken<UserSearchByGlobalNamePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
     * @param displayNamePrefix The display name prefix you&#39;re looking for. (required)
     * @param page The zero-based page of results you desire. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSearchByGlobalNamePrefixAsync(String displayNamePrefix, Integer page, final ApiCallback<UserSearchByGlobalNamePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSearchByGlobalNamePrefixValidateBeforeCall(displayNamePrefix, page, _callback);
        Type localVarReturnType = new TypeToken<UserSearchByGlobalNamePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
