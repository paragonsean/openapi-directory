/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Destiny2EquipItem200Response;
import org.openapitools.client.model.FireteamGetAvailableClanFireteams200Response;
import org.openapitools.client.model.FireteamGetClanFireteam200Response;
import org.openapitools.client.model.FireteamGetMyClanFireteams200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FireteamApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FireteamApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FireteamApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fireteamGetActivePrivateClanFireteamCount
     * @param groupId The group id of the clan. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fireteamGetActivePrivateClanFireteamCountCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Fireteam/Clan/{groupId}/ActiveCount/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fireteamGetActivePrivateClanFireteamCountValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling fireteamGetActivePrivateClanFireteamCount(Async)");
        }

        return fireteamGetActivePrivateClanFireteamCountCall(groupId, _callback);

    }

    /**
     * 
     * Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
     * @param groupId The group id of the clan. (required)
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response fireteamGetActivePrivateClanFireteamCount(Long groupId) throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = fireteamGetActivePrivateClanFireteamCountWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
     * @param groupId The group id of the clan. (required)
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> fireteamGetActivePrivateClanFireteamCountWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = fireteamGetActivePrivateClanFireteamCountValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
     * @param groupId The group id of the clan. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fireteamGetActivePrivateClanFireteamCountAsync(Long groupId, final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = fireteamGetActivePrivateClanFireteamCountValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fireteamGetAvailableClanFireteams
     * @param activityType The activity type to filter by. (required)
     * @param dateRange The date range to grab available fireteams. (required)
     * @param groupId The group id of the clan. (required)
     * @param page Zero based page (required)
     * @param platform The platform filter. (required)
     * @param publicOnly Determines public/private filtering. (required)
     * @param slotFilter Filters based on available slots (required)
     * @param excludeImmediate If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)
     * @param langFilter An optional language filter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fireteamGetAvailableClanFireteamsCall(Integer activityType, Integer dateRange, Long groupId, Integer page, Integer platform, Integer publicOnly, Integer slotFilter, Boolean excludeImmediate, String langFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/"
            .replace("{" + "activityType" + "}", localVarApiClient.escapeString(activityType.toString()))
            .replace("{" + "dateRange" + "}", localVarApiClient.escapeString(dateRange.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()))
            .replace("{" + "platform" + "}", localVarApiClient.escapeString(platform.toString()))
            .replace("{" + "publicOnly" + "}", localVarApiClient.escapeString(publicOnly.toString()))
            .replace("{" + "slotFilter" + "}", localVarApiClient.escapeString(slotFilter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludeImmediate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeImmediate", excludeImmediate));
        }

        if (langFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("langFilter", langFilter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fireteamGetAvailableClanFireteamsValidateBeforeCall(Integer activityType, Integer dateRange, Long groupId, Integer page, Integer platform, Integer publicOnly, Integer slotFilter, Boolean excludeImmediate, String langFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityType' is set
        if (activityType == null) {
            throw new ApiException("Missing the required parameter 'activityType' when calling fireteamGetAvailableClanFireteams(Async)");
        }

        // verify the required parameter 'dateRange' is set
        if (dateRange == null) {
            throw new ApiException("Missing the required parameter 'dateRange' when calling fireteamGetAvailableClanFireteams(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling fireteamGetAvailableClanFireteams(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling fireteamGetAvailableClanFireteams(Async)");
        }

        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling fireteamGetAvailableClanFireteams(Async)");
        }

        // verify the required parameter 'publicOnly' is set
        if (publicOnly == null) {
            throw new ApiException("Missing the required parameter 'publicOnly' when calling fireteamGetAvailableClanFireteams(Async)");
        }

        // verify the required parameter 'slotFilter' is set
        if (slotFilter == null) {
            throw new ApiException("Missing the required parameter 'slotFilter' when calling fireteamGetAvailableClanFireteams(Async)");
        }

        return fireteamGetAvailableClanFireteamsCall(activityType, dateRange, groupId, page, platform, publicOnly, slotFilter, excludeImmediate, langFilter, _callback);

    }

    /**
     * 
     * Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
     * @param activityType The activity type to filter by. (required)
     * @param dateRange The date range to grab available fireteams. (required)
     * @param groupId The group id of the clan. (required)
     * @param page Zero based page (required)
     * @param platform The platform filter. (required)
     * @param publicOnly Determines public/private filtering. (required)
     * @param slotFilter Filters based on available slots (required)
     * @param excludeImmediate If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)
     * @param langFilter An optional language filter. (optional)
     * @return FireteamGetAvailableClanFireteams200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public FireteamGetAvailableClanFireteams200Response fireteamGetAvailableClanFireteams(Integer activityType, Integer dateRange, Long groupId, Integer page, Integer platform, Integer publicOnly, Integer slotFilter, Boolean excludeImmediate, String langFilter) throws ApiException {
        ApiResponse<FireteamGetAvailableClanFireteams200Response> localVarResp = fireteamGetAvailableClanFireteamsWithHttpInfo(activityType, dateRange, groupId, page, platform, publicOnly, slotFilter, excludeImmediate, langFilter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
     * @param activityType The activity type to filter by. (required)
     * @param dateRange The date range to grab available fireteams. (required)
     * @param groupId The group id of the clan. (required)
     * @param page Zero based page (required)
     * @param platform The platform filter. (required)
     * @param publicOnly Determines public/private filtering. (required)
     * @param slotFilter Filters based on available slots (required)
     * @param excludeImmediate If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)
     * @param langFilter An optional language filter. (optional)
     * @return ApiResponse&lt;FireteamGetAvailableClanFireteams200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FireteamGetAvailableClanFireteams200Response> fireteamGetAvailableClanFireteamsWithHttpInfo(Integer activityType, Integer dateRange, Long groupId, Integer page, Integer platform, Integer publicOnly, Integer slotFilter, Boolean excludeImmediate, String langFilter) throws ApiException {
        okhttp3.Call localVarCall = fireteamGetAvailableClanFireteamsValidateBeforeCall(activityType, dateRange, groupId, page, platform, publicOnly, slotFilter, excludeImmediate, langFilter, null);
        Type localVarReturnType = new TypeToken<FireteamGetAvailableClanFireteams200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
     * @param activityType The activity type to filter by. (required)
     * @param dateRange The date range to grab available fireteams. (required)
     * @param groupId The group id of the clan. (required)
     * @param page Zero based page (required)
     * @param platform The platform filter. (required)
     * @param publicOnly Determines public/private filtering. (required)
     * @param slotFilter Filters based on available slots (required)
     * @param excludeImmediate If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)
     * @param langFilter An optional language filter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fireteamGetAvailableClanFireteamsAsync(Integer activityType, Integer dateRange, Long groupId, Integer page, Integer platform, Integer publicOnly, Integer slotFilter, Boolean excludeImmediate, String langFilter, final ApiCallback<FireteamGetAvailableClanFireteams200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = fireteamGetAvailableClanFireteamsValidateBeforeCall(activityType, dateRange, groupId, page, platform, publicOnly, slotFilter, excludeImmediate, langFilter, _callback);
        Type localVarReturnType = new TypeToken<FireteamGetAvailableClanFireteams200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fireteamGetClanFireteam
     * @param fireteamId The unique id of the fireteam. (required)
     * @param groupId The group id of the clan. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fireteamGetClanFireteamCall(Long fireteamId, Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Fireteam/Clan/{groupId}/Summary/{fireteamId}/"
            .replace("{" + "fireteamId" + "}", localVarApiClient.escapeString(fireteamId.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fireteamGetClanFireteamValidateBeforeCall(Long fireteamId, Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fireteamId' is set
        if (fireteamId == null) {
            throw new ApiException("Missing the required parameter 'fireteamId' when calling fireteamGetClanFireteam(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling fireteamGetClanFireteam(Async)");
        }

        return fireteamGetClanFireteamCall(fireteamId, groupId, _callback);

    }

    /**
     * 
     * Gets a specific fireteam.
     * @param fireteamId The unique id of the fireteam. (required)
     * @param groupId The group id of the clan. (required)
     * @return FireteamGetClanFireteam200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public FireteamGetClanFireteam200Response fireteamGetClanFireteam(Long fireteamId, Long groupId) throws ApiException {
        ApiResponse<FireteamGetClanFireteam200Response> localVarResp = fireteamGetClanFireteamWithHttpInfo(fireteamId, groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a specific fireteam.
     * @param fireteamId The unique id of the fireteam. (required)
     * @param groupId The group id of the clan. (required)
     * @return ApiResponse&lt;FireteamGetClanFireteam200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FireteamGetClanFireteam200Response> fireteamGetClanFireteamWithHttpInfo(Long fireteamId, Long groupId) throws ApiException {
        okhttp3.Call localVarCall = fireteamGetClanFireteamValidateBeforeCall(fireteamId, groupId, null);
        Type localVarReturnType = new TypeToken<FireteamGetClanFireteam200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a specific fireteam.
     * @param fireteamId The unique id of the fireteam. (required)
     * @param groupId The group id of the clan. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fireteamGetClanFireteamAsync(Long fireteamId, Long groupId, final ApiCallback<FireteamGetClanFireteam200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = fireteamGetClanFireteamValidateBeforeCall(fireteamId, groupId, _callback);
        Type localVarReturnType = new TypeToken<FireteamGetClanFireteam200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fireteamGetMyClanFireteams
     * @param groupId The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param includeClosed If true, return fireteams that have been closed. (required)
     * @param page Deprecated parameter, ignored. (required)
     * @param platform The platform filter. (required)
     * @param groupFilter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param langFilter An optional language filter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fireteamGetMyClanFireteamsCall(Long groupId, Boolean includeClosed, Integer page, Integer platform, Boolean groupFilter, String langFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()))
            .replace("{" + "includeClosed" + "}", localVarApiClient.escapeString(includeClosed.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()))
            .replace("{" + "platform" + "}", localVarApiClient.escapeString(platform.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupFilter", groupFilter));
        }

        if (langFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("langFilter", langFilter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fireteamGetMyClanFireteamsValidateBeforeCall(Long groupId, Boolean includeClosed, Integer page, Integer platform, Boolean groupFilter, String langFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling fireteamGetMyClanFireteams(Async)");
        }

        // verify the required parameter 'includeClosed' is set
        if (includeClosed == null) {
            throw new ApiException("Missing the required parameter 'includeClosed' when calling fireteamGetMyClanFireteams(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling fireteamGetMyClanFireteams(Async)");
        }

        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling fireteamGetMyClanFireteams(Async)");
        }

        return fireteamGetMyClanFireteamsCall(groupId, includeClosed, page, platform, groupFilter, langFilter, _callback);

    }

    /**
     * 
     * Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
     * @param groupId The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param includeClosed If true, return fireteams that have been closed. (required)
     * @param page Deprecated parameter, ignored. (required)
     * @param platform The platform filter. (required)
     * @param groupFilter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param langFilter An optional language filter. (optional)
     * @return FireteamGetMyClanFireteams200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public FireteamGetMyClanFireteams200Response fireteamGetMyClanFireteams(Long groupId, Boolean includeClosed, Integer page, Integer platform, Boolean groupFilter, String langFilter) throws ApiException {
        ApiResponse<FireteamGetMyClanFireteams200Response> localVarResp = fireteamGetMyClanFireteamsWithHttpInfo(groupId, includeClosed, page, platform, groupFilter, langFilter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
     * @param groupId The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param includeClosed If true, return fireteams that have been closed. (required)
     * @param page Deprecated parameter, ignored. (required)
     * @param platform The platform filter. (required)
     * @param groupFilter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param langFilter An optional language filter. (optional)
     * @return ApiResponse&lt;FireteamGetMyClanFireteams200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FireteamGetMyClanFireteams200Response> fireteamGetMyClanFireteamsWithHttpInfo(Long groupId, Boolean includeClosed, Integer page, Integer platform, Boolean groupFilter, String langFilter) throws ApiException {
        okhttp3.Call localVarCall = fireteamGetMyClanFireteamsValidateBeforeCall(groupId, includeClosed, page, platform, groupFilter, langFilter, null);
        Type localVarReturnType = new TypeToken<FireteamGetMyClanFireteams200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
     * @param groupId The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true). (required)
     * @param includeClosed If true, return fireteams that have been closed. (required)
     * @param page Deprecated parameter, ignored. (required)
     * @param platform The platform filter. (required)
     * @param groupFilter If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)
     * @param langFilter An optional language filter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fireteamGetMyClanFireteamsAsync(Long groupId, Boolean includeClosed, Integer page, Integer platform, Boolean groupFilter, String langFilter, final ApiCallback<FireteamGetMyClanFireteams200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = fireteamGetMyClanFireteamsValidateBeforeCall(groupId, includeClosed, page, platform, groupFilter, langFilter, _callback);
        Type localVarReturnType = new TypeToken<FireteamGetMyClanFireteams200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fireteamSearchPublicAvailableClanFireteams
     * @param activityType The activity type to filter by. (required)
     * @param dateRange The date range to grab available fireteams. (required)
     * @param page Zero based page (required)
     * @param platform The platform filter. (required)
     * @param slotFilter Filters based on available slots (required)
     * @param excludeImmediate If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)
     * @param langFilter An optional language filter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fireteamSearchPublicAvailableClanFireteamsCall(Integer activityType, Integer dateRange, Integer page, Integer platform, Integer slotFilter, Boolean excludeImmediate, String langFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/"
            .replace("{" + "activityType" + "}", localVarApiClient.escapeString(activityType.toString()))
            .replace("{" + "dateRange" + "}", localVarApiClient.escapeString(dateRange.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()))
            .replace("{" + "platform" + "}", localVarApiClient.escapeString(platform.toString()))
            .replace("{" + "slotFilter" + "}", localVarApiClient.escapeString(slotFilter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludeImmediate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeImmediate", excludeImmediate));
        }

        if (langFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("langFilter", langFilter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fireteamSearchPublicAvailableClanFireteamsValidateBeforeCall(Integer activityType, Integer dateRange, Integer page, Integer platform, Integer slotFilter, Boolean excludeImmediate, String langFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityType' is set
        if (activityType == null) {
            throw new ApiException("Missing the required parameter 'activityType' when calling fireteamSearchPublicAvailableClanFireteams(Async)");
        }

        // verify the required parameter 'dateRange' is set
        if (dateRange == null) {
            throw new ApiException("Missing the required parameter 'dateRange' when calling fireteamSearchPublicAvailableClanFireteams(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling fireteamSearchPublicAvailableClanFireteams(Async)");
        }

        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling fireteamSearchPublicAvailableClanFireteams(Async)");
        }

        // verify the required parameter 'slotFilter' is set
        if (slotFilter == null) {
            throw new ApiException("Missing the required parameter 'slotFilter' when calling fireteamSearchPublicAvailableClanFireteams(Async)");
        }

        return fireteamSearchPublicAvailableClanFireteamsCall(activityType, dateRange, page, platform, slotFilter, excludeImmediate, langFilter, _callback);

    }

    /**
     * 
     * Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
     * @param activityType The activity type to filter by. (required)
     * @param dateRange The date range to grab available fireteams. (required)
     * @param page Zero based page (required)
     * @param platform The platform filter. (required)
     * @param slotFilter Filters based on available slots (required)
     * @param excludeImmediate If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)
     * @param langFilter An optional language filter. (optional)
     * @return FireteamGetAvailableClanFireteams200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public FireteamGetAvailableClanFireteams200Response fireteamSearchPublicAvailableClanFireteams(Integer activityType, Integer dateRange, Integer page, Integer platform, Integer slotFilter, Boolean excludeImmediate, String langFilter) throws ApiException {
        ApiResponse<FireteamGetAvailableClanFireteams200Response> localVarResp = fireteamSearchPublicAvailableClanFireteamsWithHttpInfo(activityType, dateRange, page, platform, slotFilter, excludeImmediate, langFilter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
     * @param activityType The activity type to filter by. (required)
     * @param dateRange The date range to grab available fireteams. (required)
     * @param page Zero based page (required)
     * @param platform The platform filter. (required)
     * @param slotFilter Filters based on available slots (required)
     * @param excludeImmediate If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)
     * @param langFilter An optional language filter. (optional)
     * @return ApiResponse&lt;FireteamGetAvailableClanFireteams200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FireteamGetAvailableClanFireteams200Response> fireteamSearchPublicAvailableClanFireteamsWithHttpInfo(Integer activityType, Integer dateRange, Integer page, Integer platform, Integer slotFilter, Boolean excludeImmediate, String langFilter) throws ApiException {
        okhttp3.Call localVarCall = fireteamSearchPublicAvailableClanFireteamsValidateBeforeCall(activityType, dateRange, page, platform, slotFilter, excludeImmediate, langFilter, null);
        Type localVarReturnType = new TypeToken<FireteamGetAvailableClanFireteams200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
     * @param activityType The activity type to filter by. (required)
     * @param dateRange The date range to grab available fireteams. (required)
     * @param page Zero based page (required)
     * @param platform The platform filter. (required)
     * @param slotFilter Filters based on available slots (required)
     * @param excludeImmediate If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum. (optional)
     * @param langFilter An optional language filter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fireteamSearchPublicAvailableClanFireteamsAsync(Integer activityType, Integer dateRange, Integer page, Integer platform, Integer slotFilter, Boolean excludeImmediate, String langFilter, final ApiCallback<FireteamGetAvailableClanFireteams200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = fireteamSearchPublicAvailableClanFireteamsValidateBeforeCall(activityType, dateRange, page, platform, slotFilter, excludeImmediate, langFilter, _callback);
        Type localVarReturnType = new TypeToken<FireteamGetAvailableClanFireteams200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
