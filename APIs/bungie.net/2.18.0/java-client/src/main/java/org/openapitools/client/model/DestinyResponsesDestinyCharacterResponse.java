/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyBaseItemComponentSetOfuint32;
import org.openapitools.client.model.DestinyItemComponentSetOfint64;
import org.openapitools.client.model.SingleComponentResponseOfDestinyCharacterActivitiesComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyCharacterComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyCharacterProgressionComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyCharacterRecordsComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyCharacterRenderComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyCollectiblesComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyCurrenciesComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyInventoryComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyKiosksComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyLoadoutsComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyPlugSetsComponent;
import org.openapitools.client.model.SingleComponentResponseOfDestinyPresentationNodesComponent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyResponsesDestinyCharacterResponse {
  public static final String SERIALIZED_NAME_ACTIVITIES = "activities";
  @SerializedName(SERIALIZED_NAME_ACTIVITIES)
  private SingleComponentResponseOfDestinyCharacterActivitiesComponent activities;

  public static final String SERIALIZED_NAME_CHARACTER = "character";
  @SerializedName(SERIALIZED_NAME_CHARACTER)
  private SingleComponentResponseOfDestinyCharacterComponent character;

  public static final String SERIALIZED_NAME_COLLECTIBLES = "collectibles";
  @SerializedName(SERIALIZED_NAME_COLLECTIBLES)
  private SingleComponentResponseOfDestinyCollectiblesComponent collectibles;

  public static final String SERIALIZED_NAME_CURRENCY_LOOKUPS = "currencyLookups";
  @SerializedName(SERIALIZED_NAME_CURRENCY_LOOKUPS)
  private SingleComponentResponseOfDestinyCurrenciesComponent currencyLookups;

  public static final String SERIALIZED_NAME_EQUIPMENT = "equipment";
  @SerializedName(SERIALIZED_NAME_EQUIPMENT)
  private SingleComponentResponseOfDestinyInventoryComponent equipment;

  public static final String SERIALIZED_NAME_INVENTORY = "inventory";
  @SerializedName(SERIALIZED_NAME_INVENTORY)
  private SingleComponentResponseOfDestinyInventoryComponent inventory;

  public static final String SERIALIZED_NAME_ITEM_COMPONENTS = "itemComponents";
  @SerializedName(SERIALIZED_NAME_ITEM_COMPONENTS)
  private DestinyItemComponentSetOfint64 itemComponents;

  public static final String SERIALIZED_NAME_KIOSKS = "kiosks";
  @SerializedName(SERIALIZED_NAME_KIOSKS)
  private SingleComponentResponseOfDestinyKiosksComponent kiosks;

  public static final String SERIALIZED_NAME_LOADOUTS = "loadouts";
  @SerializedName(SERIALIZED_NAME_LOADOUTS)
  private SingleComponentResponseOfDestinyLoadoutsComponent loadouts;

  public static final String SERIALIZED_NAME_PLUG_SETS = "plugSets";
  @SerializedName(SERIALIZED_NAME_PLUG_SETS)
  private SingleComponentResponseOfDestinyPlugSetsComponent plugSets;

  public static final String SERIALIZED_NAME_PRESENTATION_NODES = "presentationNodes";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_NODES)
  private SingleComponentResponseOfDestinyPresentationNodesComponent presentationNodes;

  public static final String SERIALIZED_NAME_PROGRESSIONS = "progressions";
  @SerializedName(SERIALIZED_NAME_PROGRESSIONS)
  private SingleComponentResponseOfDestinyCharacterProgressionComponent progressions;

  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private SingleComponentResponseOfDestinyCharacterRecordsComponent records;

  public static final String SERIALIZED_NAME_RENDER_DATA = "renderData";
  @SerializedName(SERIALIZED_NAME_RENDER_DATA)
  private SingleComponentResponseOfDestinyCharacterRenderComponent renderData;

  public static final String SERIALIZED_NAME_UNINSTANCED_ITEM_COMPONENTS = "uninstancedItemComponents";
  @SerializedName(SERIALIZED_NAME_UNINSTANCED_ITEM_COMPONENTS)
  private DestinyBaseItemComponentSetOfuint32 uninstancedItemComponents;

  public DestinyResponsesDestinyCharacterResponse() {
  }

  public DestinyResponsesDestinyCharacterResponse activities(SingleComponentResponseOfDestinyCharacterActivitiesComponent activities) {
    this.activities = activities;
    return this;
  }

  /**
   * Activity data - info about current activities available to the player.  COMPONENT TYPE: CharacterActivities
   * @return activities
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyCharacterActivitiesComponent getActivities() {
    return activities;
  }

  public void setActivities(SingleComponentResponseOfDestinyCharacterActivitiesComponent activities) {
    this.activities = activities;
  }


  public DestinyResponsesDestinyCharacterResponse character(SingleComponentResponseOfDestinyCharacterComponent character) {
    this.character = character;
    return this;
  }

  /**
   * Base information about the character in question.  COMPONENT TYPE: Characters
   * @return character
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyCharacterComponent getCharacter() {
    return character;
  }

  public void setCharacter(SingleComponentResponseOfDestinyCharacterComponent character) {
    this.character = character;
  }


  public DestinyResponsesDestinyCharacterResponse collectibles(SingleComponentResponseOfDestinyCollectiblesComponent collectibles) {
    this.collectibles = collectibles;
    return this;
  }

  /**
   * COMPONENT TYPE: Collectibles
   * @return collectibles
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyCollectiblesComponent getCollectibles() {
    return collectibles;
  }

  public void setCollectibles(SingleComponentResponseOfDestinyCollectiblesComponent collectibles) {
    this.collectibles = collectibles;
  }


  public DestinyResponsesDestinyCharacterResponse currencyLookups(SingleComponentResponseOfDestinyCurrenciesComponent currencyLookups) {
    this.currencyLookups = currencyLookups;
    return this;
  }

  /**
   * A \&quot;lookup\&quot; convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.  COMPONENT TYPE: CurrencyLookups
   * @return currencyLookups
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyCurrenciesComponent getCurrencyLookups() {
    return currencyLookups;
  }

  public void setCurrencyLookups(SingleComponentResponseOfDestinyCurrenciesComponent currencyLookups) {
    this.currencyLookups = currencyLookups;
  }


  public DestinyResponsesDestinyCharacterResponse equipment(SingleComponentResponseOfDestinyInventoryComponent equipment) {
    this.equipment = equipment;
    return this;
  }

  /**
   * Equipped items on the character.  COMPONENT TYPE: CharacterEquipment
   * @return equipment
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyInventoryComponent getEquipment() {
    return equipment;
  }

  public void setEquipment(SingleComponentResponseOfDestinyInventoryComponent equipment) {
    this.equipment = equipment;
  }


  public DestinyResponsesDestinyCharacterResponse inventory(SingleComponentResponseOfDestinyInventoryComponent inventory) {
    this.inventory = inventory;
    return this;
  }

  /**
   * The character-level non-equipped inventory items.  COMPONENT TYPE: CharacterInventories
   * @return inventory
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyInventoryComponent getInventory() {
    return inventory;
  }

  public void setInventory(SingleComponentResponseOfDestinyInventoryComponent inventory) {
    this.inventory = inventory;
  }


  public DestinyResponsesDestinyCharacterResponse itemComponents(DestinyItemComponentSetOfint64 itemComponents) {
    this.itemComponents = itemComponents;
    return this;
  }

  /**
   * The set of components belonging to the player&#39;s instanced items.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
   * @return itemComponents
   */
  @javax.annotation.Nullable
  public DestinyItemComponentSetOfint64 getItemComponents() {
    return itemComponents;
  }

  public void setItemComponents(DestinyItemComponentSetOfint64 itemComponents) {
    this.itemComponents = itemComponents;
  }


  public DestinyResponsesDestinyCharacterResponse kiosks(SingleComponentResponseOfDestinyKiosksComponent kiosks) {
    this.kiosks = kiosks;
    return this;
  }

  /**
   * Items available from Kiosks that are available to this specific character.   COMPONENT TYPE: Kiosks
   * @return kiosks
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyKiosksComponent getKiosks() {
    return kiosks;
  }

  public void setKiosks(SingleComponentResponseOfDestinyKiosksComponent kiosks) {
    this.kiosks = kiosks;
  }


  public DestinyResponsesDestinyCharacterResponse loadouts(SingleComponentResponseOfDestinyLoadoutsComponent loadouts) {
    this.loadouts = loadouts;
    return this;
  }

  /**
   * The loadouts available to the character.  COMPONENT TYPE: CharacterLoadouts
   * @return loadouts
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyLoadoutsComponent getLoadouts() {
    return loadouts;
  }

  public void setLoadouts(SingleComponentResponseOfDestinyLoadoutsComponent loadouts) {
    this.loadouts = loadouts;
  }


  public DestinyResponsesDestinyCharacterResponse plugSets(SingleComponentResponseOfDestinyPlugSetsComponent plugSets) {
    this.plugSets = plugSets;
    return this;
  }

  /**
   * When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.  This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.  COMPONENT TYPE: ItemSockets
   * @return plugSets
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyPlugSetsComponent getPlugSets() {
    return plugSets;
  }

  public void setPlugSets(SingleComponentResponseOfDestinyPlugSetsComponent plugSets) {
    this.plugSets = plugSets;
  }


  public DestinyResponsesDestinyCharacterResponse presentationNodes(SingleComponentResponseOfDestinyPresentationNodesComponent presentationNodes) {
    this.presentationNodes = presentationNodes;
    return this;
  }

  /**
   * COMPONENT TYPE: PresentationNodes
   * @return presentationNodes
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyPresentationNodesComponent getPresentationNodes() {
    return presentationNodes;
  }

  public void setPresentationNodes(SingleComponentResponseOfDestinyPresentationNodesComponent presentationNodes) {
    this.presentationNodes = presentationNodes;
  }


  public DestinyResponsesDestinyCharacterResponse progressions(SingleComponentResponseOfDestinyCharacterProgressionComponent progressions) {
    this.progressions = progressions;
    return this;
  }

  /**
   * Character progression data, including Milestones.  COMPONENT TYPE: CharacterProgressions
   * @return progressions
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyCharacterProgressionComponent getProgressions() {
    return progressions;
  }

  public void setProgressions(SingleComponentResponseOfDestinyCharacterProgressionComponent progressions) {
    this.progressions = progressions;
  }


  public DestinyResponsesDestinyCharacterResponse records(SingleComponentResponseOfDestinyCharacterRecordsComponent records) {
    this.records = records;
    return this;
  }

  /**
   * COMPONENT TYPE: Records
   * @return records
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyCharacterRecordsComponent getRecords() {
    return records;
  }

  public void setRecords(SingleComponentResponseOfDestinyCharacterRecordsComponent records) {
    this.records = records;
  }


  public DestinyResponsesDestinyCharacterResponse renderData(SingleComponentResponseOfDestinyCharacterRenderComponent renderData) {
    this.renderData = renderData;
    return this;
  }

  /**
   * Character rendering data - a minimal set of information about equipment and dyes used for rendering.  COMPONENT TYPE: CharacterRenderData
   * @return renderData
   */
  @javax.annotation.Nullable
  public SingleComponentResponseOfDestinyCharacterRenderComponent getRenderData() {
    return renderData;
  }

  public void setRenderData(SingleComponentResponseOfDestinyCharacterRenderComponent renderData) {
    this.renderData = renderData;
  }


  public DestinyResponsesDestinyCharacterResponse uninstancedItemComponents(DestinyBaseItemComponentSetOfuint32 uninstancedItemComponents) {
    this.uninstancedItemComponents = uninstancedItemComponents;
    return this;
  }

  /**
   * The set of components belonging to the player&#39;s UNinstanced items. Because apparently now those too can have information relevant to the character&#39;s state.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
   * @return uninstancedItemComponents
   */
  @javax.annotation.Nullable
  public DestinyBaseItemComponentSetOfuint32 getUninstancedItemComponents() {
    return uninstancedItemComponents;
  }

  public void setUninstancedItemComponents(DestinyBaseItemComponentSetOfuint32 uninstancedItemComponents) {
    this.uninstancedItemComponents = uninstancedItemComponents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyResponsesDestinyCharacterResponse destinyResponsesDestinyCharacterResponse = (DestinyResponsesDestinyCharacterResponse) o;
    return Objects.equals(this.activities, destinyResponsesDestinyCharacterResponse.activities) &&
        Objects.equals(this.character, destinyResponsesDestinyCharacterResponse.character) &&
        Objects.equals(this.collectibles, destinyResponsesDestinyCharacterResponse.collectibles) &&
        Objects.equals(this.currencyLookups, destinyResponsesDestinyCharacterResponse.currencyLookups) &&
        Objects.equals(this.equipment, destinyResponsesDestinyCharacterResponse.equipment) &&
        Objects.equals(this.inventory, destinyResponsesDestinyCharacterResponse.inventory) &&
        Objects.equals(this.itemComponents, destinyResponsesDestinyCharacterResponse.itemComponents) &&
        Objects.equals(this.kiosks, destinyResponsesDestinyCharacterResponse.kiosks) &&
        Objects.equals(this.loadouts, destinyResponsesDestinyCharacterResponse.loadouts) &&
        Objects.equals(this.plugSets, destinyResponsesDestinyCharacterResponse.plugSets) &&
        Objects.equals(this.presentationNodes, destinyResponsesDestinyCharacterResponse.presentationNodes) &&
        Objects.equals(this.progressions, destinyResponsesDestinyCharacterResponse.progressions) &&
        Objects.equals(this.records, destinyResponsesDestinyCharacterResponse.records) &&
        Objects.equals(this.renderData, destinyResponsesDestinyCharacterResponse.renderData) &&
        Objects.equals(this.uninstancedItemComponents, destinyResponsesDestinyCharacterResponse.uninstancedItemComponents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activities, character, collectibles, currencyLookups, equipment, inventory, itemComponents, kiosks, loadouts, plugSets, presentationNodes, progressions, records, renderData, uninstancedItemComponents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyResponsesDestinyCharacterResponse {\n");
    sb.append("    activities: ").append(toIndentedString(activities)).append("\n");
    sb.append("    character: ").append(toIndentedString(character)).append("\n");
    sb.append("    collectibles: ").append(toIndentedString(collectibles)).append("\n");
    sb.append("    currencyLookups: ").append(toIndentedString(currencyLookups)).append("\n");
    sb.append("    equipment: ").append(toIndentedString(equipment)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    itemComponents: ").append(toIndentedString(itemComponents)).append("\n");
    sb.append("    kiosks: ").append(toIndentedString(kiosks)).append("\n");
    sb.append("    loadouts: ").append(toIndentedString(loadouts)).append("\n");
    sb.append("    plugSets: ").append(toIndentedString(plugSets)).append("\n");
    sb.append("    presentationNodes: ").append(toIndentedString(presentationNodes)).append("\n");
    sb.append("    progressions: ").append(toIndentedString(progressions)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    renderData: ").append(toIndentedString(renderData)).append("\n");
    sb.append("    uninstancedItemComponents: ").append(toIndentedString(uninstancedItemComponents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activities");
    openapiFields.add("character");
    openapiFields.add("collectibles");
    openapiFields.add("currencyLookups");
    openapiFields.add("equipment");
    openapiFields.add("inventory");
    openapiFields.add("itemComponents");
    openapiFields.add("kiosks");
    openapiFields.add("loadouts");
    openapiFields.add("plugSets");
    openapiFields.add("presentationNodes");
    openapiFields.add("progressions");
    openapiFields.add("records");
    openapiFields.add("renderData");
    openapiFields.add("uninstancedItemComponents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyResponsesDestinyCharacterResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyResponsesDestinyCharacterResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyResponsesDestinyCharacterResponse is not found in the empty JSON string", DestinyResponsesDestinyCharacterResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyResponsesDestinyCharacterResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyResponsesDestinyCharacterResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activities`
      if (jsonObj.get("activities") != null && !jsonObj.get("activities").isJsonNull()) {
        SingleComponentResponseOfDestinyCharacterActivitiesComponent.validateJsonElement(jsonObj.get("activities"));
      }
      // validate the optional field `character`
      if (jsonObj.get("character") != null && !jsonObj.get("character").isJsonNull()) {
        SingleComponentResponseOfDestinyCharacterComponent.validateJsonElement(jsonObj.get("character"));
      }
      // validate the optional field `collectibles`
      if (jsonObj.get("collectibles") != null && !jsonObj.get("collectibles").isJsonNull()) {
        SingleComponentResponseOfDestinyCollectiblesComponent.validateJsonElement(jsonObj.get("collectibles"));
      }
      // validate the optional field `currencyLookups`
      if (jsonObj.get("currencyLookups") != null && !jsonObj.get("currencyLookups").isJsonNull()) {
        SingleComponentResponseOfDestinyCurrenciesComponent.validateJsonElement(jsonObj.get("currencyLookups"));
      }
      // validate the optional field `equipment`
      if (jsonObj.get("equipment") != null && !jsonObj.get("equipment").isJsonNull()) {
        SingleComponentResponseOfDestinyInventoryComponent.validateJsonElement(jsonObj.get("equipment"));
      }
      // validate the optional field `inventory`
      if (jsonObj.get("inventory") != null && !jsonObj.get("inventory").isJsonNull()) {
        SingleComponentResponseOfDestinyInventoryComponent.validateJsonElement(jsonObj.get("inventory"));
      }
      // validate the optional field `itemComponents`
      if (jsonObj.get("itemComponents") != null && !jsonObj.get("itemComponents").isJsonNull()) {
        DestinyItemComponentSetOfint64.validateJsonElement(jsonObj.get("itemComponents"));
      }
      // validate the optional field `kiosks`
      if (jsonObj.get("kiosks") != null && !jsonObj.get("kiosks").isJsonNull()) {
        SingleComponentResponseOfDestinyKiosksComponent.validateJsonElement(jsonObj.get("kiosks"));
      }
      // validate the optional field `loadouts`
      if (jsonObj.get("loadouts") != null && !jsonObj.get("loadouts").isJsonNull()) {
        SingleComponentResponseOfDestinyLoadoutsComponent.validateJsonElement(jsonObj.get("loadouts"));
      }
      // validate the optional field `plugSets`
      if (jsonObj.get("plugSets") != null && !jsonObj.get("plugSets").isJsonNull()) {
        SingleComponentResponseOfDestinyPlugSetsComponent.validateJsonElement(jsonObj.get("plugSets"));
      }
      // validate the optional field `presentationNodes`
      if (jsonObj.get("presentationNodes") != null && !jsonObj.get("presentationNodes").isJsonNull()) {
        SingleComponentResponseOfDestinyPresentationNodesComponent.validateJsonElement(jsonObj.get("presentationNodes"));
      }
      // validate the optional field `progressions`
      if (jsonObj.get("progressions") != null && !jsonObj.get("progressions").isJsonNull()) {
        SingleComponentResponseOfDestinyCharacterProgressionComponent.validateJsonElement(jsonObj.get("progressions"));
      }
      // validate the optional field `records`
      if (jsonObj.get("records") != null && !jsonObj.get("records").isJsonNull()) {
        SingleComponentResponseOfDestinyCharacterRecordsComponent.validateJsonElement(jsonObj.get("records"));
      }
      // validate the optional field `renderData`
      if (jsonObj.get("renderData") != null && !jsonObj.get("renderData").isJsonNull()) {
        SingleComponentResponseOfDestinyCharacterRenderComponent.validateJsonElement(jsonObj.get("renderData"));
      }
      // validate the optional field `uninstancedItemComponents`
      if (jsonObj.get("uninstancedItemComponents") != null && !jsonObj.get("uninstancedItemComponents").isJsonNull()) {
        DestinyBaseItemComponentSetOfuint32.validateJsonElement(jsonObj.get("uninstancedItemComponents"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyResponsesDestinyCharacterResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyResponsesDestinyCharacterResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyResponsesDestinyCharacterResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyResponsesDestinyCharacterResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyResponsesDestinyCharacterResponse>() {
           @Override
           public void write(JsonWriter out, DestinyResponsesDestinyCharacterResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyResponsesDestinyCharacterResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyResponsesDestinyCharacterResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyResponsesDestinyCharacterResponse
   * @throws IOException if the JSON string is invalid with respect to DestinyResponsesDestinyCharacterResponse
   */
  public static DestinyResponsesDestinyCharacterResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyResponsesDestinyCharacterResponse.class);
  }

  /**
   * Convert an instance of DestinyResponsesDestinyCharacterResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

