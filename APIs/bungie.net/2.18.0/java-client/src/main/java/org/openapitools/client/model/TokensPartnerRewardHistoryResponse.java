/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TokensPartnerOfferSkuHistoryResponse;
import org.openapitools.client.model.TokensTwitchDropHistoryResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TokensPartnerRewardHistoryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TokensPartnerRewardHistoryResponse {
  public static final String SERIALIZED_NAME_PARTNER_OFFERS = "PartnerOffers";
  @SerializedName(SERIALIZED_NAME_PARTNER_OFFERS)
  private List<TokensPartnerOfferSkuHistoryResponse> partnerOffers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TWITCH_DROPS = "TwitchDrops";
  @SerializedName(SERIALIZED_NAME_TWITCH_DROPS)
  private List<TokensTwitchDropHistoryResponse> twitchDrops = new ArrayList<>();

  public TokensPartnerRewardHistoryResponse() {
  }

  public TokensPartnerRewardHistoryResponse partnerOffers(List<TokensPartnerOfferSkuHistoryResponse> partnerOffers) {
    this.partnerOffers = partnerOffers;
    return this;
  }

  public TokensPartnerRewardHistoryResponse addPartnerOffersItem(TokensPartnerOfferSkuHistoryResponse partnerOffersItem) {
    if (this.partnerOffers == null) {
      this.partnerOffers = new ArrayList<>();
    }
    this.partnerOffers.add(partnerOffersItem);
    return this;
  }

  /**
   * Get partnerOffers
   * @return partnerOffers
   */
  @javax.annotation.Nullable
  public List<TokensPartnerOfferSkuHistoryResponse> getPartnerOffers() {
    return partnerOffers;
  }

  public void setPartnerOffers(List<TokensPartnerOfferSkuHistoryResponse> partnerOffers) {
    this.partnerOffers = partnerOffers;
  }


  public TokensPartnerRewardHistoryResponse twitchDrops(List<TokensTwitchDropHistoryResponse> twitchDrops) {
    this.twitchDrops = twitchDrops;
    return this;
  }

  public TokensPartnerRewardHistoryResponse addTwitchDropsItem(TokensTwitchDropHistoryResponse twitchDropsItem) {
    if (this.twitchDrops == null) {
      this.twitchDrops = new ArrayList<>();
    }
    this.twitchDrops.add(twitchDropsItem);
    return this;
  }

  /**
   * Get twitchDrops
   * @return twitchDrops
   */
  @javax.annotation.Nullable
  public List<TokensTwitchDropHistoryResponse> getTwitchDrops() {
    return twitchDrops;
  }

  public void setTwitchDrops(List<TokensTwitchDropHistoryResponse> twitchDrops) {
    this.twitchDrops = twitchDrops;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokensPartnerRewardHistoryResponse tokensPartnerRewardHistoryResponse = (TokensPartnerRewardHistoryResponse) o;
    return Objects.equals(this.partnerOffers, tokensPartnerRewardHistoryResponse.partnerOffers) &&
        Objects.equals(this.twitchDrops, tokensPartnerRewardHistoryResponse.twitchDrops);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partnerOffers, twitchDrops);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokensPartnerRewardHistoryResponse {\n");
    sb.append("    partnerOffers: ").append(toIndentedString(partnerOffers)).append("\n");
    sb.append("    twitchDrops: ").append(toIndentedString(twitchDrops)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PartnerOffers");
    openapiFields.add("TwitchDrops");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TokensPartnerRewardHistoryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TokensPartnerRewardHistoryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TokensPartnerRewardHistoryResponse is not found in the empty JSON string", TokensPartnerRewardHistoryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TokensPartnerRewardHistoryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TokensPartnerRewardHistoryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("PartnerOffers") != null && !jsonObj.get("PartnerOffers").isJsonNull()) {
        JsonArray jsonArraypartnerOffers = jsonObj.getAsJsonArray("PartnerOffers");
        if (jsonArraypartnerOffers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PartnerOffers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PartnerOffers` to be an array in the JSON string but got `%s`", jsonObj.get("PartnerOffers").toString()));
          }

          // validate the optional field `PartnerOffers` (array)
          for (int i = 0; i < jsonArraypartnerOffers.size(); i++) {
            TokensPartnerOfferSkuHistoryResponse.validateJsonElement(jsonArraypartnerOffers.get(i));
          };
        }
      }
      if (jsonObj.get("TwitchDrops") != null && !jsonObj.get("TwitchDrops").isJsonNull()) {
        JsonArray jsonArraytwitchDrops = jsonObj.getAsJsonArray("TwitchDrops");
        if (jsonArraytwitchDrops != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TwitchDrops").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TwitchDrops` to be an array in the JSON string but got `%s`", jsonObj.get("TwitchDrops").toString()));
          }

          // validate the optional field `TwitchDrops` (array)
          for (int i = 0; i < jsonArraytwitchDrops.size(); i++) {
            TokensTwitchDropHistoryResponse.validateJsonElement(jsonArraytwitchDrops.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TokensPartnerRewardHistoryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TokensPartnerRewardHistoryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TokensPartnerRewardHistoryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TokensPartnerRewardHistoryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TokensPartnerRewardHistoryResponse>() {
           @Override
           public void write(JsonWriter out, TokensPartnerRewardHistoryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TokensPartnerRewardHistoryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TokensPartnerRewardHistoryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TokensPartnerRewardHistoryResponse
   * @throws IOException if the JSON string is invalid with respect to TokensPartnerRewardHistoryResponse
   */
  public static TokensPartnerRewardHistoryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TokensPartnerRewardHistoryResponse.class);
  }

  /**
   * Convert an instance of TokensPartnerRewardHistoryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

