/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition {
  public static final String SERIALIZED_NAME_BLACK_ICON_IMAGE_PATH = "blackIconImagePath";
  @SerializedName(SERIALIZED_NAME_BLACK_ICON_IMAGE_PATH)
  private String blackIconImagePath;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_LOADOUT_COLOR_HASHES = "loadoutColorHashes";
  @SerializedName(SERIALIZED_NAME_LOADOUT_COLOR_HASHES)
  private List<Integer> loadoutColorHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOADOUT_COUNT_PER_CHARACTER = "loadoutCountPerCharacter";
  @SerializedName(SERIALIZED_NAME_LOADOUT_COUNT_PER_CHARACTER)
  private Integer loadoutCountPerCharacter;

  public static final String SERIALIZED_NAME_LOADOUT_ICON_HASHES = "loadoutIconHashes";
  @SerializedName(SERIALIZED_NAME_LOADOUT_ICON_HASHES)
  private List<Integer> loadoutIconHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOADOUT_NAME_HASHES = "loadoutNameHashes";
  @SerializedName(SERIALIZED_NAME_LOADOUT_NAME_HASHES)
  private List<Integer> loadoutNameHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOADOUT_PREVIEW_FILTER_OUT_SOCKET_CATEGORY_HASHES = "loadoutPreviewFilterOutSocketCategoryHashes";
  @SerializedName(SERIALIZED_NAME_LOADOUT_PREVIEW_FILTER_OUT_SOCKET_CATEGORY_HASHES)
  private List<Integer> loadoutPreviewFilterOutSocketCategoryHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOADOUT_PREVIEW_FILTER_OUT_SOCKET_TYPE_HASHES = "loadoutPreviewFilterOutSocketTypeHashes";
  @SerializedName(SERIALIZED_NAME_LOADOUT_PREVIEW_FILTER_OUT_SOCKET_TYPE_HASHES)
  private List<Integer> loadoutPreviewFilterOutSocketTypeHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_WHITE_ICON_IMAGE_PATH = "whiteIconImagePath";
  @SerializedName(SERIALIZED_NAME_WHITE_ICON_IMAGE_PATH)
  private String whiteIconImagePath;

  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition() {
  }

  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition blackIconImagePath(String blackIconImagePath) {
    this.blackIconImagePath = blackIconImagePath;
    return this;
  }

  /**
   * This is a color-inverted version of the whiteIconImagePath.
   * @return blackIconImagePath
   */
  @javax.annotation.Nullable
  public String getBlackIconImagePath() {
    return blackIconImagePath;
  }

  public void setBlackIconImagePath(String blackIconImagePath) {
    this.blackIconImagePath = blackIconImagePath;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition loadoutColorHashes(List<Integer> loadoutColorHashes) {
    this.loadoutColorHashes = loadoutColorHashes;
    return this;
  }

  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition addLoadoutColorHashesItem(Integer loadoutColorHashesItem) {
    if (this.loadoutColorHashes == null) {
      this.loadoutColorHashes = new ArrayList<>();
    }
    this.loadoutColorHashes.add(loadoutColorHashesItem);
    return this;
  }

  /**
   * A list of the loadout color hashes in index order, for convenience.
   * @return loadoutColorHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getLoadoutColorHashes() {
    return loadoutColorHashes;
  }

  public void setLoadoutColorHashes(List<Integer> loadoutColorHashes) {
    this.loadoutColorHashes = loadoutColorHashes;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition loadoutCountPerCharacter(Integer loadoutCountPerCharacter) {
    this.loadoutCountPerCharacter = loadoutCountPerCharacter;
    return this;
  }

  /**
   * The maximum number of loadouts available to each character. The loadouts component API response can return fewer loadouts than this, as more loadouts are unlocked by reaching higher Guardian Ranks.
   * @return loadoutCountPerCharacter
   */
  @javax.annotation.Nullable
  public Integer getLoadoutCountPerCharacter() {
    return loadoutCountPerCharacter;
  }

  public void setLoadoutCountPerCharacter(Integer loadoutCountPerCharacter) {
    this.loadoutCountPerCharacter = loadoutCountPerCharacter;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition loadoutIconHashes(List<Integer> loadoutIconHashes) {
    this.loadoutIconHashes = loadoutIconHashes;
    return this;
  }

  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition addLoadoutIconHashesItem(Integer loadoutIconHashesItem) {
    if (this.loadoutIconHashes == null) {
      this.loadoutIconHashes = new ArrayList<>();
    }
    this.loadoutIconHashes.add(loadoutIconHashesItem);
    return this;
  }

  /**
   * A list of the loadout icon hashes in index order, for convenience.
   * @return loadoutIconHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getLoadoutIconHashes() {
    return loadoutIconHashes;
  }

  public void setLoadoutIconHashes(List<Integer> loadoutIconHashes) {
    this.loadoutIconHashes = loadoutIconHashes;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition loadoutNameHashes(List<Integer> loadoutNameHashes) {
    this.loadoutNameHashes = loadoutNameHashes;
    return this;
  }

  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition addLoadoutNameHashesItem(Integer loadoutNameHashesItem) {
    if (this.loadoutNameHashes == null) {
      this.loadoutNameHashes = new ArrayList<>();
    }
    this.loadoutNameHashes.add(loadoutNameHashesItem);
    return this;
  }

  /**
   * A list of the loadout name hashes in index order, for convenience.
   * @return loadoutNameHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getLoadoutNameHashes() {
    return loadoutNameHashes;
  }

  public void setLoadoutNameHashes(List<Integer> loadoutNameHashes) {
    this.loadoutNameHashes = loadoutNameHashes;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition loadoutPreviewFilterOutSocketCategoryHashes(List<Integer> loadoutPreviewFilterOutSocketCategoryHashes) {
    this.loadoutPreviewFilterOutSocketCategoryHashes = loadoutPreviewFilterOutSocketCategoryHashes;
    return this;
  }

  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition addLoadoutPreviewFilterOutSocketCategoryHashesItem(Integer loadoutPreviewFilterOutSocketCategoryHashesItem) {
    if (this.loadoutPreviewFilterOutSocketCategoryHashes == null) {
      this.loadoutPreviewFilterOutSocketCategoryHashes = new ArrayList<>();
    }
    this.loadoutPreviewFilterOutSocketCategoryHashes.add(loadoutPreviewFilterOutSocketCategoryHashesItem);
    return this;
  }

  /**
   * A list of the socket category hashes to be filtered out of loadout item preview displays.
   * @return loadoutPreviewFilterOutSocketCategoryHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getLoadoutPreviewFilterOutSocketCategoryHashes() {
    return loadoutPreviewFilterOutSocketCategoryHashes;
  }

  public void setLoadoutPreviewFilterOutSocketCategoryHashes(List<Integer> loadoutPreviewFilterOutSocketCategoryHashes) {
    this.loadoutPreviewFilterOutSocketCategoryHashes = loadoutPreviewFilterOutSocketCategoryHashes;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition loadoutPreviewFilterOutSocketTypeHashes(List<Integer> loadoutPreviewFilterOutSocketTypeHashes) {
    this.loadoutPreviewFilterOutSocketTypeHashes = loadoutPreviewFilterOutSocketTypeHashes;
    return this;
  }

  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition addLoadoutPreviewFilterOutSocketTypeHashesItem(Integer loadoutPreviewFilterOutSocketTypeHashesItem) {
    if (this.loadoutPreviewFilterOutSocketTypeHashes == null) {
      this.loadoutPreviewFilterOutSocketTypeHashes = new ArrayList<>();
    }
    this.loadoutPreviewFilterOutSocketTypeHashes.add(loadoutPreviewFilterOutSocketTypeHashesItem);
    return this;
  }

  /**
   * A list of the socket type hashes to be filtered out of loadout item preview displays.
   * @return loadoutPreviewFilterOutSocketTypeHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getLoadoutPreviewFilterOutSocketTypeHashes() {
    return loadoutPreviewFilterOutSocketTypeHashes;
  }

  public void setLoadoutPreviewFilterOutSocketTypeHashes(List<Integer> loadoutPreviewFilterOutSocketTypeHashes) {
    this.loadoutPreviewFilterOutSocketTypeHashes = loadoutPreviewFilterOutSocketTypeHashes;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition whiteIconImagePath(String whiteIconImagePath) {
    this.whiteIconImagePath = whiteIconImagePath;
    return this;
  }

  /**
   * This is the same icon as the one in the display properties, offered here as well with a more descriptive name.
   * @return whiteIconImagePath
   */
  @javax.annotation.Nullable
  public String getWhiteIconImagePath() {
    return whiteIconImagePath;
  }

  public void setWhiteIconImagePath(String whiteIconImagePath) {
    this.whiteIconImagePath = whiteIconImagePath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition = (DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition) o;
    return Objects.equals(this.blackIconImagePath, destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.blackIconImagePath) &&
        Objects.equals(this.displayProperties, destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.displayProperties) &&
        Objects.equals(this.hash, destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.index) &&
        Objects.equals(this.loadoutColorHashes, destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.loadoutColorHashes) &&
        Objects.equals(this.loadoutCountPerCharacter, destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.loadoutCountPerCharacter) &&
        Objects.equals(this.loadoutIconHashes, destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.loadoutIconHashes) &&
        Objects.equals(this.loadoutNameHashes, destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.loadoutNameHashes) &&
        Objects.equals(this.loadoutPreviewFilterOutSocketCategoryHashes, destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.loadoutPreviewFilterOutSocketCategoryHashes) &&
        Objects.equals(this.loadoutPreviewFilterOutSocketTypeHashes, destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.loadoutPreviewFilterOutSocketTypeHashes) &&
        Objects.equals(this.redacted, destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.redacted) &&
        Objects.equals(this.whiteIconImagePath, destinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.whiteIconImagePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blackIconImagePath, displayProperties, hash, index, loadoutColorHashes, loadoutCountPerCharacter, loadoutIconHashes, loadoutNameHashes, loadoutPreviewFilterOutSocketCategoryHashes, loadoutPreviewFilterOutSocketTypeHashes, redacted, whiteIconImagePath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition {\n");
    sb.append("    blackIconImagePath: ").append(toIndentedString(blackIconImagePath)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    loadoutColorHashes: ").append(toIndentedString(loadoutColorHashes)).append("\n");
    sb.append("    loadoutCountPerCharacter: ").append(toIndentedString(loadoutCountPerCharacter)).append("\n");
    sb.append("    loadoutIconHashes: ").append(toIndentedString(loadoutIconHashes)).append("\n");
    sb.append("    loadoutNameHashes: ").append(toIndentedString(loadoutNameHashes)).append("\n");
    sb.append("    loadoutPreviewFilterOutSocketCategoryHashes: ").append(toIndentedString(loadoutPreviewFilterOutSocketCategoryHashes)).append("\n");
    sb.append("    loadoutPreviewFilterOutSocketTypeHashes: ").append(toIndentedString(loadoutPreviewFilterOutSocketTypeHashes)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    whiteIconImagePath: ").append(toIndentedString(whiteIconImagePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blackIconImagePath");
    openapiFields.add("displayProperties");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("loadoutColorHashes");
    openapiFields.add("loadoutCountPerCharacter");
    openapiFields.add("loadoutIconHashes");
    openapiFields.add("loadoutNameHashes");
    openapiFields.add("loadoutPreviewFilterOutSocketCategoryHashes");
    openapiFields.add("loadoutPreviewFilterOutSocketTypeHashes");
    openapiFields.add("redacted");
    openapiFields.add("whiteIconImagePath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition is not found in the empty JSON string", DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blackIconImagePath") != null && !jsonObj.get("blackIconImagePath").isJsonNull()) && !jsonObj.get("blackIconImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blackIconImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blackIconImagePath").toString()));
      }
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("loadoutColorHashes") != null && !jsonObj.get("loadoutColorHashes").isJsonNull() && !jsonObj.get("loadoutColorHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadoutColorHashes` to be an array in the JSON string but got `%s`", jsonObj.get("loadoutColorHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("loadoutIconHashes") != null && !jsonObj.get("loadoutIconHashes").isJsonNull() && !jsonObj.get("loadoutIconHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadoutIconHashes` to be an array in the JSON string but got `%s`", jsonObj.get("loadoutIconHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("loadoutNameHashes") != null && !jsonObj.get("loadoutNameHashes").isJsonNull() && !jsonObj.get("loadoutNameHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadoutNameHashes` to be an array in the JSON string but got `%s`", jsonObj.get("loadoutNameHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("loadoutPreviewFilterOutSocketCategoryHashes") != null && !jsonObj.get("loadoutPreviewFilterOutSocketCategoryHashes").isJsonNull() && !jsonObj.get("loadoutPreviewFilterOutSocketCategoryHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadoutPreviewFilterOutSocketCategoryHashes` to be an array in the JSON string but got `%s`", jsonObj.get("loadoutPreviewFilterOutSocketCategoryHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("loadoutPreviewFilterOutSocketTypeHashes") != null && !jsonObj.get("loadoutPreviewFilterOutSocketTypeHashes").isJsonNull() && !jsonObj.get("loadoutPreviewFilterOutSocketTypeHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loadoutPreviewFilterOutSocketTypeHashes` to be an array in the JSON string but got `%s`", jsonObj.get("loadoutPreviewFilterOutSocketTypeHashes").toString()));
      }
      if ((jsonObj.get("whiteIconImagePath") != null && !jsonObj.get("whiteIconImagePath").isJsonNull()) && !jsonObj.get("whiteIconImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `whiteIconImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("whiteIconImagePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition
   */
  public static DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

