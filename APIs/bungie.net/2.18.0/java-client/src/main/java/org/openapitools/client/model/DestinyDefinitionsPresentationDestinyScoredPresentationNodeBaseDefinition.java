/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition {
  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_MAX_CATEGORY_RECORD_SCORE = "maxCategoryRecordScore";
  @SerializedName(SERIALIZED_NAME_MAX_CATEGORY_RECORD_SCORE)
  private Integer maxCategoryRecordScore;

  public static final String SERIALIZED_NAME_PARENT_NODE_HASHES = "parentNodeHashes";
  @SerializedName(SERIALIZED_NAME_PARENT_NODE_HASHES)
  private List<Integer> parentNodeHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRESENTATION_NODE_TYPE = "presentationNodeType";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_NODE_TYPE)
  private Integer presentationNodeType;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_TRAIT_HASHES = "traitHashes";
  @SerializedName(SERIALIZED_NAME_TRAIT_HASHES)
  private List<Integer> traitHashes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRAIT_IDS = "traitIds";
  @SerializedName(SERIALIZED_NAME_TRAIT_IDS)
  private List<String> traitIds = new ArrayList<>();

  public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition() {
  }

  public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition maxCategoryRecordScore(Integer maxCategoryRecordScore) {
    this.maxCategoryRecordScore = maxCategoryRecordScore;
    return this;
  }

  /**
   * Get maxCategoryRecordScore
   * @return maxCategoryRecordScore
   */
  @javax.annotation.Nullable
  public Integer getMaxCategoryRecordScore() {
    return maxCategoryRecordScore;
  }

  public void setMaxCategoryRecordScore(Integer maxCategoryRecordScore) {
    this.maxCategoryRecordScore = maxCategoryRecordScore;
  }


  public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition parentNodeHashes(List<Integer> parentNodeHashes) {
    this.parentNodeHashes = parentNodeHashes;
    return this;
  }

  public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition addParentNodeHashesItem(Integer parentNodeHashesItem) {
    if (this.parentNodeHashes == null) {
      this.parentNodeHashes = new ArrayList<>();
    }
    this.parentNodeHashes.add(parentNodeHashesItem);
    return this;
  }

  /**
   * A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
   * @return parentNodeHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getParentNodeHashes() {
    return parentNodeHashes;
  }

  public void setParentNodeHashes(List<Integer> parentNodeHashes) {
    this.parentNodeHashes = parentNodeHashes;
  }


  public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition presentationNodeType(Integer presentationNodeType) {
    this.presentationNodeType = presentationNodeType;
    return this;
  }

  /**
   * Get presentationNodeType
   * @return presentationNodeType
   */
  @javax.annotation.Nullable
  public Integer getPresentationNodeType() {
    return presentationNodeType;
  }

  public void setPresentationNodeType(Integer presentationNodeType) {
    this.presentationNodeType = presentationNodeType;
  }


  public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition traitHashes(List<Integer> traitHashes) {
    this.traitHashes = traitHashes;
    return this;
  }

  public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition addTraitHashesItem(Integer traitHashesItem) {
    if (this.traitHashes == null) {
      this.traitHashes = new ArrayList<>();
    }
    this.traitHashes.add(traitHashesItem);
    return this;
  }

  /**
   * Get traitHashes
   * @return traitHashes
   */
  @javax.annotation.Nullable
  public List<Integer> getTraitHashes() {
    return traitHashes;
  }

  public void setTraitHashes(List<Integer> traitHashes) {
    this.traitHashes = traitHashes;
  }


  public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition traitIds(List<String> traitIds) {
    this.traitIds = traitIds;
    return this;
  }

  public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition addTraitIdsItem(String traitIdsItem) {
    if (this.traitIds == null) {
      this.traitIds = new ArrayList<>();
    }
    this.traitIds.add(traitIdsItem);
    return this;
  }

  /**
   * Get traitIds
   * @return traitIds
   */
  @javax.annotation.Nullable
  public List<String> getTraitIds() {
    return traitIds;
  }

  public void setTraitIds(List<String> traitIds) {
    this.traitIds = traitIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition destinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition = (DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition) o;
    return Objects.equals(this.hash, destinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.index) &&
        Objects.equals(this.maxCategoryRecordScore, destinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.maxCategoryRecordScore) &&
        Objects.equals(this.parentNodeHashes, destinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.parentNodeHashes) &&
        Objects.equals(this.presentationNodeType, destinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.presentationNodeType) &&
        Objects.equals(this.redacted, destinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.redacted) &&
        Objects.equals(this.traitHashes, destinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.traitHashes) &&
        Objects.equals(this.traitIds, destinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.traitIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hash, index, maxCategoryRecordScore, parentNodeHashes, presentationNodeType, redacted, traitHashes, traitIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition {\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    maxCategoryRecordScore: ").append(toIndentedString(maxCategoryRecordScore)).append("\n");
    sb.append("    parentNodeHashes: ").append(toIndentedString(parentNodeHashes)).append("\n");
    sb.append("    presentationNodeType: ").append(toIndentedString(presentationNodeType)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    traitHashes: ").append(toIndentedString(traitHashes)).append("\n");
    sb.append("    traitIds: ").append(toIndentedString(traitIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("maxCategoryRecordScore");
    openapiFields.add("parentNodeHashes");
    openapiFields.add("presentationNodeType");
    openapiFields.add("redacted");
    openapiFields.add("traitHashes");
    openapiFields.add("traitIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition is not found in the empty JSON string", DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("parentNodeHashes") != null && !jsonObj.get("parentNodeHashes").isJsonNull() && !jsonObj.get("parentNodeHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentNodeHashes` to be an array in the JSON string but got `%s`", jsonObj.get("parentNodeHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("traitHashes") != null && !jsonObj.get("traitHashes").isJsonNull() && !jsonObj.get("traitHashes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `traitHashes` to be an array in the JSON string but got `%s`", jsonObj.get("traitHashes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("traitIds") != null && !jsonObj.get("traitIds").isJsonNull() && !jsonObj.get("traitIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `traitIds` to be an array in the JSON string but got `%s`", jsonObj.get("traitIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition
   */
  public static DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

