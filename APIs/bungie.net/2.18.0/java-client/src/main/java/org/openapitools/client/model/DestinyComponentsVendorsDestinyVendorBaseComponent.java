/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This component contains essential/summary information about the vendor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyComponentsVendorsDestinyVendorBaseComponent {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_NEXT_REFRESH_DATE = "nextRefreshDate";
  @SerializedName(SERIALIZED_NAME_NEXT_REFRESH_DATE)
  private OffsetDateTime nextRefreshDate;

  public static final String SERIALIZED_NAME_VENDOR_HASH = "vendorHash";
  @SerializedName(SERIALIZED_NAME_VENDOR_HASH)
  private Integer vendorHash;

  public DestinyComponentsVendorsDestinyVendorBaseComponent() {
  }

  public DestinyComponentsVendorsDestinyVendorBaseComponent enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * If True, the Vendor is currently accessible.   If False, they may not actually be visible in the world at the moment.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public DestinyComponentsVendorsDestinyVendorBaseComponent nextRefreshDate(OffsetDateTime nextRefreshDate) {
    this.nextRefreshDate = nextRefreshDate;
    return this;
  }

  /**
   * The date when this vendor&#39;s inventory will next rotate/refresh.  Note that this is distinct from the date ranges that the vendor is visible/available in-game: this field indicates the specific time when the vendor&#39;s available items refresh and rotate, regardless of whether the vendor is actually available at that time. Unfortunately, these two values may be (and are, for the case of important vendors like Xur) different.  Issue https://github.com/Bungie-net/api/issues/353 is tracking a fix to start providing visibility date ranges where possible in addition to this refresh date, so that all important dates for vendors are available for use.
   * @return nextRefreshDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextRefreshDate() {
    return nextRefreshDate;
  }

  public void setNextRefreshDate(OffsetDateTime nextRefreshDate) {
    this.nextRefreshDate = nextRefreshDate;
  }


  public DestinyComponentsVendorsDestinyVendorBaseComponent vendorHash(Integer vendorHash) {
    this.vendorHash = vendorHash;
    return this;
  }

  /**
   * The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition.
   * @return vendorHash
   */
  @javax.annotation.Nullable
  public Integer getVendorHash() {
    return vendorHash;
  }

  public void setVendorHash(Integer vendorHash) {
    this.vendorHash = vendorHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyComponentsVendorsDestinyVendorBaseComponent destinyComponentsVendorsDestinyVendorBaseComponent = (DestinyComponentsVendorsDestinyVendorBaseComponent) o;
    return Objects.equals(this.enabled, destinyComponentsVendorsDestinyVendorBaseComponent.enabled) &&
        Objects.equals(this.nextRefreshDate, destinyComponentsVendorsDestinyVendorBaseComponent.nextRefreshDate) &&
        Objects.equals(this.vendorHash, destinyComponentsVendorsDestinyVendorBaseComponent.vendorHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, nextRefreshDate, vendorHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyComponentsVendorsDestinyVendorBaseComponent {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    nextRefreshDate: ").append(toIndentedString(nextRefreshDate)).append("\n");
    sb.append("    vendorHash: ").append(toIndentedString(vendorHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("nextRefreshDate");
    openapiFields.add("vendorHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyComponentsVendorsDestinyVendorBaseComponent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyComponentsVendorsDestinyVendorBaseComponent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyComponentsVendorsDestinyVendorBaseComponent is not found in the empty JSON string", DestinyComponentsVendorsDestinyVendorBaseComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyComponentsVendorsDestinyVendorBaseComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyComponentsVendorsDestinyVendorBaseComponent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyComponentsVendorsDestinyVendorBaseComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyComponentsVendorsDestinyVendorBaseComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyComponentsVendorsDestinyVendorBaseComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyComponentsVendorsDestinyVendorBaseComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyComponentsVendorsDestinyVendorBaseComponent>() {
           @Override
           public void write(JsonWriter out, DestinyComponentsVendorsDestinyVendorBaseComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyComponentsVendorsDestinyVendorBaseComponent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyComponentsVendorsDestinyVendorBaseComponent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyComponentsVendorsDestinyVendorBaseComponent
   * @throws IOException if the JSON string is invalid with respect to DestinyComponentsVendorsDestinyVendorBaseComponent
   */
  public static DestinyComponentsVendorsDestinyVendorBaseComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyComponentsVendorsDestinyVendorBaseComponent.class);
  }

  /**
   * Convert an instance of DestinyComponentsVendorsDestinyVendorBaseComponent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

