/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDestinyItemQuantity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This defines a single Step in a progression (which roughly equates to a level. See DestinyProgressionDefinition for caveats).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyProgressionStepDefinition {
  public static final String SERIALIZED_NAME_DISPLAY_EFFECT_TYPE = "displayEffectType";
  @SerializedName(SERIALIZED_NAME_DISPLAY_EFFECT_TYPE)
  private Integer displayEffectType;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_PROGRESS_TOTAL = "progressTotal";
  @SerializedName(SERIALIZED_NAME_PROGRESS_TOTAL)
  private Integer progressTotal;

  public static final String SERIALIZED_NAME_REWARD_ITEMS = "rewardItems";
  @SerializedName(SERIALIZED_NAME_REWARD_ITEMS)
  private List<DestinyDestinyItemQuantity> rewardItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_STEP_NAME = "stepName";
  @SerializedName(SERIALIZED_NAME_STEP_NAME)
  private String stepName;

  public DestinyDefinitionsDestinyProgressionStepDefinition() {
  }

  public DestinyDefinitionsDestinyProgressionStepDefinition displayEffectType(Integer displayEffectType) {
    this.displayEffectType = displayEffectType;
    return this;
  }

  /**
   * This appears to be, when you \&quot;level up\&quot;, whether a visual effect will display and on what entity. See DestinyProgressionStepDisplayEffect for slightly more info.
   * @return displayEffectType
   */
  @javax.annotation.Nullable
  public Integer getDisplayEffectType() {
    return displayEffectType;
  }

  public void setDisplayEffectType(Integer displayEffectType) {
    this.displayEffectType = displayEffectType;
  }


  public DestinyDefinitionsDestinyProgressionStepDefinition icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * If this progression step has a specific icon related to it, this is the icon to show.
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public DestinyDefinitionsDestinyProgressionStepDefinition progressTotal(Integer progressTotal) {
    this.progressTotal = progressTotal;
    return this;
  }

  /**
   * The total amount of progression points/\&quot;experience\&quot; you will need to initially reach this step. If this is the last step and the progression is repeating indefinitely (DestinyProgressionDefinition.repeatLastStep), this will also be the progress needed to level it up further by repeating this step again.
   * @return progressTotal
   */
  @javax.annotation.Nullable
  public Integer getProgressTotal() {
    return progressTotal;
  }

  public void setProgressTotal(Integer progressTotal) {
    this.progressTotal = progressTotal;
  }


  public DestinyDefinitionsDestinyProgressionStepDefinition rewardItems(List<DestinyDestinyItemQuantity> rewardItems) {
    this.rewardItems = rewardItems;
    return this;
  }

  public DestinyDefinitionsDestinyProgressionStepDefinition addRewardItemsItem(DestinyDestinyItemQuantity rewardItemsItem) {
    if (this.rewardItems == null) {
      this.rewardItems = new ArrayList<>();
    }
    this.rewardItems.add(rewardItemsItem);
    return this;
  }

  /**
   * A listing of items rewarded as a result of reaching this level.
   * @return rewardItems
   */
  @javax.annotation.Nullable
  public List<DestinyDestinyItemQuantity> getRewardItems() {
    return rewardItems;
  }

  public void setRewardItems(List<DestinyDestinyItemQuantity> rewardItems) {
    this.rewardItems = rewardItems;
  }


  public DestinyDefinitionsDestinyProgressionStepDefinition stepName(String stepName) {
    this.stepName = stepName;
    return this;
  }

  /**
   * Very rarely, Progressions will have localized text describing the Level of the progression. This will be that localized text, if it exists. Otherwise, the standard appears to be to simply show the level numerically.
   * @return stepName
   */
  @javax.annotation.Nullable
  public String getStepName() {
    return stepName;
  }

  public void setStepName(String stepName) {
    this.stepName = stepName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyProgressionStepDefinition destinyDefinitionsDestinyProgressionStepDefinition = (DestinyDefinitionsDestinyProgressionStepDefinition) o;
    return Objects.equals(this.displayEffectType, destinyDefinitionsDestinyProgressionStepDefinition.displayEffectType) &&
        Objects.equals(this.icon, destinyDefinitionsDestinyProgressionStepDefinition.icon) &&
        Objects.equals(this.progressTotal, destinyDefinitionsDestinyProgressionStepDefinition.progressTotal) &&
        Objects.equals(this.rewardItems, destinyDefinitionsDestinyProgressionStepDefinition.rewardItems) &&
        Objects.equals(this.stepName, destinyDefinitionsDestinyProgressionStepDefinition.stepName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayEffectType, icon, progressTotal, rewardItems, stepName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyProgressionStepDefinition {\n");
    sb.append("    displayEffectType: ").append(toIndentedString(displayEffectType)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    progressTotal: ").append(toIndentedString(progressTotal)).append("\n");
    sb.append("    rewardItems: ").append(toIndentedString(rewardItems)).append("\n");
    sb.append("    stepName: ").append(toIndentedString(stepName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayEffectType");
    openapiFields.add("icon");
    openapiFields.add("progressTotal");
    openapiFields.add("rewardItems");
    openapiFields.add("stepName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyProgressionStepDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyProgressionStepDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyProgressionStepDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyProgressionStepDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyProgressionStepDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyProgressionStepDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if (jsonObj.get("rewardItems") != null && !jsonObj.get("rewardItems").isJsonNull()) {
        JsonArray jsonArrayrewardItems = jsonObj.getAsJsonArray("rewardItems");
        if (jsonArrayrewardItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rewardItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rewardItems` to be an array in the JSON string but got `%s`", jsonObj.get("rewardItems").toString()));
          }

          // validate the optional field `rewardItems` (array)
          for (int i = 0; i < jsonArrayrewardItems.size(); i++) {
            DestinyDestinyItemQuantity.validateJsonElement(jsonArrayrewardItems.get(i));
          };
        }
      }
      if ((jsonObj.get("stepName") != null && !jsonObj.get("stepName").isJsonNull()) && !jsonObj.get("stepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyProgressionStepDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyProgressionStepDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyProgressionStepDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyProgressionStepDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyProgressionStepDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyProgressionStepDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyProgressionStepDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyProgressionStepDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyProgressionStepDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyProgressionStepDefinition
   */
  public static DestinyDefinitionsDestinyProgressionStepDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyProgressionStepDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyProgressionStepDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

