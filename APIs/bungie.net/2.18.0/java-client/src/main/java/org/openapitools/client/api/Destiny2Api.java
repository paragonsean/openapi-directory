/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Destiny2AwaGetActionToken200Response;
import org.openapitools.client.model.Destiny2AwaInitializeRequest200Response;
import org.openapitools.client.model.Destiny2EquipItem200Response;
import org.openapitools.client.model.Destiny2EquipItems200Response;
import org.openapitools.client.model.Destiny2GetActivityHistory200Response;
import org.openapitools.client.model.Destiny2GetCharacter200Response;
import org.openapitools.client.model.Destiny2GetClanAggregateStats200Response;
import org.openapitools.client.model.Destiny2GetClanBannerSource200Response;
import org.openapitools.client.model.Destiny2GetClanLeaderboards200Response;
import org.openapitools.client.model.Destiny2GetClanWeeklyRewardState200Response;
import org.openapitools.client.model.Destiny2GetCollectibleNodeDetails200Response;
import org.openapitools.client.model.Destiny2GetDestinyAggregateActivityStats200Response;
import org.openapitools.client.model.Destiny2GetDestinyEntityDefinition200Response;
import org.openapitools.client.model.Destiny2GetDestinyManifest200Response;
import org.openapitools.client.model.Destiny2GetHistoricalStats200Response;
import org.openapitools.client.model.Destiny2GetHistoricalStatsDefinition200Response;
import org.openapitools.client.model.Destiny2GetHistoricalStatsForAccount200Response;
import org.openapitools.client.model.Destiny2GetItem200Response;
import org.openapitools.client.model.Destiny2GetLinkedProfiles200Response;
import org.openapitools.client.model.Destiny2GetPostGameCarnageReport200Response;
import org.openapitools.client.model.Destiny2GetProfile200Response;
import org.openapitools.client.model.Destiny2GetPublicMilestoneContent200Response;
import org.openapitools.client.model.Destiny2GetPublicMilestones200Response;
import org.openapitools.client.model.Destiny2GetPublicVendors200Response;
import org.openapitools.client.model.Destiny2GetUniqueWeaponHistory200Response;
import org.openapitools.client.model.Destiny2GetVendor200Response;
import org.openapitools.client.model.Destiny2GetVendors200Response;
import org.openapitools.client.model.Destiny2InsertSocketPlug200Response;
import org.openapitools.client.model.Destiny2SearchDestinyEntities200Response;
import org.openapitools.client.model.Destiny2SearchDestinyPlayerByBungieName200Response;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Destiny2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Destiny2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Destiny2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for destiny2AwaGetActionToken
     * @param correlationId The identifier for the advanced write action request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2AwaGetActionTokenCall(String correlationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Awa/GetActionToken/{correlationId}/"
            .replace("{" + "correlationId" + "}", localVarApiClient.escapeString(correlationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2AwaGetActionTokenValidateBeforeCall(String correlationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'correlationId' is set
        if (correlationId == null) {
            throw new ApiException("Missing the required parameter 'correlationId' when calling destiny2AwaGetActionToken(Async)");
        }

        return destiny2AwaGetActionTokenCall(correlationId, _callback);

    }

    /**
     * 
     * Returns the action token if user approves the request.
     * @param correlationId The identifier for the advanced write action request. (required)
     * @return Destiny2AwaGetActionToken200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2AwaGetActionToken200Response destiny2AwaGetActionToken(String correlationId) throws ApiException {
        ApiResponse<Destiny2AwaGetActionToken200Response> localVarResp = destiny2AwaGetActionTokenWithHttpInfo(correlationId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the action token if user approves the request.
     * @param correlationId The identifier for the advanced write action request. (required)
     * @return ApiResponse&lt;Destiny2AwaGetActionToken200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2AwaGetActionToken200Response> destiny2AwaGetActionTokenWithHttpInfo(String correlationId) throws ApiException {
        okhttp3.Call localVarCall = destiny2AwaGetActionTokenValidateBeforeCall(correlationId, null);
        Type localVarReturnType = new TypeToken<Destiny2AwaGetActionToken200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the action token if user approves the request.
     * @param correlationId The identifier for the advanced write action request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2AwaGetActionTokenAsync(String correlationId, final ApiCallback<Destiny2AwaGetActionToken200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2AwaGetActionTokenValidateBeforeCall(correlationId, _callback);
        Type localVarReturnType = new TypeToken<Destiny2AwaGetActionToken200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2AwaInitializeRequest
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2AwaInitializeRequestCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Awa/Initialize/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2AwaInitializeRequestValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2AwaInitializeRequestCall(_callback);

    }

    /**
     * 
     * Initialize a request to perform an advanced write action.
     * @return Destiny2AwaInitializeRequest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2AwaInitializeRequest200Response destiny2AwaInitializeRequest() throws ApiException {
        ApiResponse<Destiny2AwaInitializeRequest200Response> localVarResp = destiny2AwaInitializeRequestWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Initialize a request to perform an advanced write action.
     * @return ApiResponse&lt;Destiny2AwaInitializeRequest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2AwaInitializeRequest200Response> destiny2AwaInitializeRequestWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2AwaInitializeRequestValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2AwaInitializeRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Initialize a request to perform an advanced write action.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2AwaInitializeRequestAsync(final ApiCallback<Destiny2AwaInitializeRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2AwaInitializeRequestValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2AwaInitializeRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2AwaProvideAuthorizationResult
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2AwaProvideAuthorizationResultCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Awa/AwaProvideAuthorizationResult/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2AwaProvideAuthorizationResultValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2AwaProvideAuthorizationResultCall(_callback);

    }

    /**
     * 
     * Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response destiny2AwaProvideAuthorizationResult() throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = destiny2AwaProvideAuthorizationResultWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> destiny2AwaProvideAuthorizationResultWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2AwaProvideAuthorizationResultValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2AwaProvideAuthorizationResultAsync(final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2AwaProvideAuthorizationResultValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2ClearLoadout
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2ClearLoadoutCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Loadouts/ClearLoadout/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2ClearLoadoutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2ClearLoadoutCall(_callback);

    }

    /**
     * 
     * Clear the identifiers and items of a loadout.
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response destiny2ClearLoadout() throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = destiny2ClearLoadoutWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Clear the identifiers and items of a loadout.
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> destiny2ClearLoadoutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2ClearLoadoutValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clear the identifiers and items of a loadout.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2ClearLoadoutAsync(final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2ClearLoadoutValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2EquipItem
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2EquipItemCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Items/EquipItem/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2EquipItemValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2EquipItemCall(_callback);

    }

    /**
     * 
     * Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response destiny2EquipItem() throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = destiny2EquipItemWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> destiny2EquipItemWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2EquipItemValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2EquipItemAsync(final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2EquipItemValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2EquipItems
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results of a bulk Equipping operation performed through the Destiny API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2EquipItemsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Items/EquipItems/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2EquipItemsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2EquipItemsCall(_callback);

    }

    /**
     * 
     * Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
     * @return Destiny2EquipItems200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results of a bulk Equipping operation performed through the Destiny API. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItems200Response destiny2EquipItems() throws ApiException {
        ApiResponse<Destiny2EquipItems200Response> localVarResp = destiny2EquipItemsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
     * @return ApiResponse&lt;Destiny2EquipItems200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results of a bulk Equipping operation performed through the Destiny API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItems200Response> destiny2EquipItemsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2EquipItemsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItems200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results of a bulk Equipping operation performed through the Destiny API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2EquipItemsAsync(final ApiCallback<Destiny2EquipItems200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2EquipItemsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItems200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2EquipLoadout
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2EquipLoadoutCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Loadouts/EquipLoadout/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2EquipLoadoutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2EquipLoadoutCall(_callback);

    }

    /**
     * 
     * Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response destiny2EquipLoadout() throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = destiny2EquipLoadoutWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> destiny2EquipLoadoutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2EquipLoadoutValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2EquipLoadoutAsync(final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2EquipLoadoutValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetActivityHistory
     * @param characterId The id of the character to retrieve. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param count Number of rows to return (optional)
     * @param mode A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)
     * @param page Page number to return, starting with 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetActivityHistoryCall(Long characterId, Long destinyMembershipId, Integer membershipType, Integer count, Integer mode, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/"
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()))
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetActivityHistoryValidateBeforeCall(Long characterId, Long destinyMembershipId, Integer membershipType, Integer count, Integer mode, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling destiny2GetActivityHistory(Async)");
        }

        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetActivityHistory(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetActivityHistory(Async)");
        }

        return destiny2GetActivityHistoryCall(characterId, destinyMembershipId, membershipType, count, mode, page, _callback);

    }

    /**
     * 
     * Gets activity history stats for indicated character.
     * @param characterId The id of the character to retrieve. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param count Number of rows to return (optional)
     * @param mode A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)
     * @param page Page number to return, starting with 0. (optional)
     * @return Destiny2GetActivityHistory200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetActivityHistory200Response destiny2GetActivityHistory(Long characterId, Long destinyMembershipId, Integer membershipType, Integer count, Integer mode, Integer page) throws ApiException {
        ApiResponse<Destiny2GetActivityHistory200Response> localVarResp = destiny2GetActivityHistoryWithHttpInfo(characterId, destinyMembershipId, membershipType, count, mode, page);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets activity history stats for indicated character.
     * @param characterId The id of the character to retrieve. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param count Number of rows to return (optional)
     * @param mode A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)
     * @param page Page number to return, starting with 0. (optional)
     * @return ApiResponse&lt;Destiny2GetActivityHistory200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetActivityHistory200Response> destiny2GetActivityHistoryWithHttpInfo(Long characterId, Long destinyMembershipId, Integer membershipType, Integer count, Integer mode, Integer page) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetActivityHistoryValidateBeforeCall(characterId, destinyMembershipId, membershipType, count, mode, page, null);
        Type localVarReturnType = new TypeToken<Destiny2GetActivityHistory200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets activity history stats for indicated character.
     * @param characterId The id of the character to retrieve. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param count Number of rows to return (optional)
     * @param mode A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation. (optional)
     * @param page Page number to return, starting with 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetActivityHistoryAsync(Long characterId, Long destinyMembershipId, Integer membershipType, Integer count, Integer mode, Integer page, final ApiCallback<Destiny2GetActivityHistory200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetActivityHistoryValidateBeforeCall(characterId, destinyMembershipId, membershipType, count, mode, page, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetActivityHistory200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetCharacter
     * @param characterId ID of the character. (required)
     * @param destinyMembershipId Destiny membership ID. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetCharacterCall(Long characterId, Long destinyMembershipId, Integer membershipType, List<Integer> components, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/"
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()))
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (components != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "components", components));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetCharacterValidateBeforeCall(Long characterId, Long destinyMembershipId, Integer membershipType, List<Integer> components, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling destiny2GetCharacter(Async)");
        }

        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetCharacter(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetCharacter(Async)");
        }

        return destiny2GetCharacterCall(characterId, destinyMembershipId, membershipType, components, _callback);

    }

    /**
     * 
     * Returns character information for the supplied character.
     * @param characterId ID of the character. (required)
     * @param destinyMembershipId Destiny membership ID. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return Destiny2GetCharacter200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetCharacter200Response destiny2GetCharacter(Long characterId, Long destinyMembershipId, Integer membershipType, List<Integer> components) throws ApiException {
        ApiResponse<Destiny2GetCharacter200Response> localVarResp = destiny2GetCharacterWithHttpInfo(characterId, destinyMembershipId, membershipType, components);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns character information for the supplied character.
     * @param characterId ID of the character. (required)
     * @param destinyMembershipId Destiny membership ID. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return ApiResponse&lt;Destiny2GetCharacter200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetCharacter200Response> destiny2GetCharacterWithHttpInfo(Long characterId, Long destinyMembershipId, Integer membershipType, List<Integer> components) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetCharacterValidateBeforeCall(characterId, destinyMembershipId, membershipType, components, null);
        Type localVarReturnType = new TypeToken<Destiny2GetCharacter200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns character information for the supplied character.
     * @param characterId ID of the character. (required)
     * @param destinyMembershipId Destiny membership ID. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetCharacterAsync(Long characterId, Long destinyMembershipId, Integer membershipType, List<Integer> components, final ApiCallback<Destiny2GetCharacter200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetCharacterValidateBeforeCall(characterId, destinyMembershipId, membershipType, components, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetCharacter200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetClanAggregateStats
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetClanAggregateStatsCall(Long groupId, String modes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Stats/AggregateClanStats/{groupId}/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modes", modes));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetClanAggregateStatsValidateBeforeCall(Long groupId, String modes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling destiny2GetClanAggregateStats(Async)");
        }

        return destiny2GetClanAggregateStatsCall(groupId, modes, _callback);

    }

    /**
     * 
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @return Destiny2GetClanAggregateStats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetClanAggregateStats200Response destiny2GetClanAggregateStats(Long groupId, String modes) throws ApiException {
        ApiResponse<Destiny2GetClanAggregateStats200Response> localVarResp = destiny2GetClanAggregateStatsWithHttpInfo(groupId, modes);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @return ApiResponse&lt;Destiny2GetClanAggregateStats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetClanAggregateStats200Response> destiny2GetClanAggregateStatsWithHttpInfo(Long groupId, String modes) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetClanAggregateStatsValidateBeforeCall(groupId, modes, null);
        Type localVarReturnType = new TypeToken<Destiny2GetClanAggregateStats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetClanAggregateStatsAsync(Long groupId, String modes, final ApiCallback<Destiny2GetClanAggregateStats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetClanAggregateStatsValidateBeforeCall(groupId, modes, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetClanAggregateStats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetClanBannerSource
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetClanBannerSourceCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Clan/ClanBannerDictionary/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetClanBannerSourceValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2GetClanBannerSourceCall(_callback);

    }

    /**
     * 
     * Returns the dictionary of values for the Clan Banner
     * @return Destiny2GetClanBannerSource200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetClanBannerSource200Response destiny2GetClanBannerSource() throws ApiException {
        ApiResponse<Destiny2GetClanBannerSource200Response> localVarResp = destiny2GetClanBannerSourceWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the dictionary of values for the Clan Banner
     * @return ApiResponse&lt;Destiny2GetClanBannerSource200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetClanBannerSource200Response> destiny2GetClanBannerSourceWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2GetClanBannerSourceValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2GetClanBannerSource200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the dictionary of values for the Clan Banner
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetClanBannerSourceAsync(final ApiCallback<Destiny2GetClanBannerSource200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetClanBannerSourceValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2GetClanBannerSource200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetClanLeaderboards
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetClanLeaderboardsCall(Long groupId, Integer maxtop, String modes, String statid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Stats/Leaderboards/Clans/{groupId}/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxtop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxtop", maxtop));
        }

        if (modes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modes", modes));
        }

        if (statid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statid", statid));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetClanLeaderboardsValidateBeforeCall(Long groupId, Integer maxtop, String modes, String statid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling destiny2GetClanLeaderboards(Async)");
        }

        return destiny2GetClanLeaderboardsCall(groupId, maxtop, modes, statid, _callback);

    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @return Destiny2GetClanLeaderboards200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetClanLeaderboards200Response destiny2GetClanLeaderboards(Long groupId, Integer maxtop, String modes, String statid) throws ApiException {
        ApiResponse<Destiny2GetClanLeaderboards200Response> localVarResp = destiny2GetClanLeaderboardsWithHttpInfo(groupId, maxtop, modes, statid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @return ApiResponse&lt;Destiny2GetClanLeaderboards200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetClanLeaderboards200Response> destiny2GetClanLeaderboardsWithHttpInfo(Long groupId, Integer maxtop, String modes, String statid) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetClanLeaderboardsValidateBeforeCall(groupId, maxtop, modes, statid, null);
        Type localVarReturnType = new TypeToken<Destiny2GetClanLeaderboards200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param groupId Group ID of the clan whose leaderboards you wish to fetch. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetClanLeaderboardsAsync(Long groupId, Integer maxtop, String modes, String statid, final ApiCallback<Destiny2GetClanLeaderboards200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetClanLeaderboardsValidateBeforeCall(groupId, maxtop, modes, statid, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetClanLeaderboards200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetClanWeeklyRewardState
     * @param groupId A valid group id of clan. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Represents a runtime instance of a user&#39;s milestone status. Live Milestone data should be combined with DestinyMilestoneDefinition data to show the user a picture of what is available for them to do in the game, and their status in regards to said \&quot;things to do.\&quot; Consider it a big, wonky to-do list, or Advisors 3.0 for those who remember the Destiny 1 API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetClanWeeklyRewardStateCall(Long groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Clan/{groupId}/WeeklyRewardState/"
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetClanWeeklyRewardStateValidateBeforeCall(Long groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling destiny2GetClanWeeklyRewardState(Async)");
        }

        return destiny2GetClanWeeklyRewardStateCall(groupId, _callback);

    }

    /**
     * 
     * Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
     * @param groupId A valid group id of clan. (required)
     * @return Destiny2GetClanWeeklyRewardState200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Represents a runtime instance of a user&#39;s milestone status. Live Milestone data should be combined with DestinyMilestoneDefinition data to show the user a picture of what is available for them to do in the game, and their status in regards to said \&quot;things to do.\&quot; Consider it a big, wonky to-do list, or Advisors 3.0 for those who remember the Destiny 1 API. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetClanWeeklyRewardState200Response destiny2GetClanWeeklyRewardState(Long groupId) throws ApiException {
        ApiResponse<Destiny2GetClanWeeklyRewardState200Response> localVarResp = destiny2GetClanWeeklyRewardStateWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
     * @param groupId A valid group id of clan. (required)
     * @return ApiResponse&lt;Destiny2GetClanWeeklyRewardState200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Represents a runtime instance of a user&#39;s milestone status. Live Milestone data should be combined with DestinyMilestoneDefinition data to show the user a picture of what is available for them to do in the game, and their status in regards to said \&quot;things to do.\&quot; Consider it a big, wonky to-do list, or Advisors 3.0 for those who remember the Destiny 1 API. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetClanWeeklyRewardState200Response> destiny2GetClanWeeklyRewardStateWithHttpInfo(Long groupId) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetClanWeeklyRewardStateValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<Destiny2GetClanWeeklyRewardState200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
     * @param groupId A valid group id of clan. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Represents a runtime instance of a user&#39;s milestone status. Live Milestone data should be combined with DestinyMilestoneDefinition data to show the user a picture of what is available for them to do in the game, and their status in regards to said \&quot;things to do.\&quot; Consider it a big, wonky to-do list, or Advisors 3.0 for those who remember the Destiny 1 API. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetClanWeeklyRewardStateAsync(Long groupId, final ApiCallback<Destiny2GetClanWeeklyRewardState200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetClanWeeklyRewardStateValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetClanWeeklyRewardState200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetCollectibleNodeDetails
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting collectible detail info. (required)
     * @param collectiblePresentationNodeHash The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node. (required)
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the detailed information about a Collectible Presentation Node and any Collectibles that are direct descendants. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetCollectibleNodeDetailsCall(Long characterId, Integer collectiblePresentationNodeHash, Long destinyMembershipId, Integer membershipType, List<Integer> components, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Collectibles/{collectiblePresentationNodeHash}/"
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()))
            .replace("{" + "collectiblePresentationNodeHash" + "}", localVarApiClient.escapeString(collectiblePresentationNodeHash.toString()))
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (components != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "components", components));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetCollectibleNodeDetailsValidateBeforeCall(Long characterId, Integer collectiblePresentationNodeHash, Long destinyMembershipId, Integer membershipType, List<Integer> components, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling destiny2GetCollectibleNodeDetails(Async)");
        }

        // verify the required parameter 'collectiblePresentationNodeHash' is set
        if (collectiblePresentationNodeHash == null) {
            throw new ApiException("Missing the required parameter 'collectiblePresentationNodeHash' when calling destiny2GetCollectibleNodeDetails(Async)");
        }

        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetCollectibleNodeDetails(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetCollectibleNodeDetails(Async)");
        }

        return destiny2GetCollectibleNodeDetailsCall(characterId, collectiblePresentationNodeHash, destinyMembershipId, membershipType, components, _callback);

    }

    /**
     * 
     * Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting collectible detail info. (required)
     * @param collectiblePresentationNodeHash The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node. (required)
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return Destiny2GetCollectibleNodeDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the detailed information about a Collectible Presentation Node and any Collectibles that are direct descendants. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetCollectibleNodeDetails200Response destiny2GetCollectibleNodeDetails(Long characterId, Integer collectiblePresentationNodeHash, Long destinyMembershipId, Integer membershipType, List<Integer> components) throws ApiException {
        ApiResponse<Destiny2GetCollectibleNodeDetails200Response> localVarResp = destiny2GetCollectibleNodeDetailsWithHttpInfo(characterId, collectiblePresentationNodeHash, destinyMembershipId, membershipType, components);
        return localVarResp.getData();
    }

    /**
     * 
     * Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting collectible detail info. (required)
     * @param collectiblePresentationNodeHash The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node. (required)
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return ApiResponse&lt;Destiny2GetCollectibleNodeDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the detailed information about a Collectible Presentation Node and any Collectibles that are direct descendants. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetCollectibleNodeDetails200Response> destiny2GetCollectibleNodeDetailsWithHttpInfo(Long characterId, Integer collectiblePresentationNodeHash, Long destinyMembershipId, Integer membershipType, List<Integer> components) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetCollectibleNodeDetailsValidateBeforeCall(characterId, collectiblePresentationNodeHash, destinyMembershipId, membershipType, components, null);
        Type localVarReturnType = new TypeToken<Destiny2GetCollectibleNodeDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting collectible detail info. (required)
     * @param collectiblePresentationNodeHash The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node. (required)
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the detailed information about a Collectible Presentation Node and any Collectibles that are direct descendants. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetCollectibleNodeDetailsAsync(Long characterId, Integer collectiblePresentationNodeHash, Long destinyMembershipId, Integer membershipType, List<Integer> components, final ApiCallback<Destiny2GetCollectibleNodeDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetCollectibleNodeDetailsValidateBeforeCall(characterId, collectiblePresentationNodeHash, destinyMembershipId, membershipType, components, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetCollectibleNodeDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetDestinyAggregateActivityStats
     * @param characterId The specific character whose activities should be returned. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetDestinyAggregateActivityStatsCall(Long characterId, Long destinyMembershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/"
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()))
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetDestinyAggregateActivityStatsValidateBeforeCall(Long characterId, Long destinyMembershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling destiny2GetDestinyAggregateActivityStats(Async)");
        }

        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetDestinyAggregateActivityStats(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetDestinyAggregateActivityStats(Async)");
        }

        return destiny2GetDestinyAggregateActivityStatsCall(characterId, destinyMembershipId, membershipType, _callback);

    }

    /**
     * 
     * Gets all activities the character has participated in together with aggregate statistics for those activities.
     * @param characterId The specific character whose activities should be returned. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @return Destiny2GetDestinyAggregateActivityStats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetDestinyAggregateActivityStats200Response destiny2GetDestinyAggregateActivityStats(Long characterId, Long destinyMembershipId, Integer membershipType) throws ApiException {
        ApiResponse<Destiny2GetDestinyAggregateActivityStats200Response> localVarResp = destiny2GetDestinyAggregateActivityStatsWithHttpInfo(characterId, destinyMembershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all activities the character has participated in together with aggregate statistics for those activities.
     * @param characterId The specific character whose activities should be returned. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @return ApiResponse&lt;Destiny2GetDestinyAggregateActivityStats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetDestinyAggregateActivityStats200Response> destiny2GetDestinyAggregateActivityStatsWithHttpInfo(Long characterId, Long destinyMembershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetDestinyAggregateActivityStatsValidateBeforeCall(characterId, destinyMembershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<Destiny2GetDestinyAggregateActivityStats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all activities the character has participated in together with aggregate statistics for those activities.
     * @param characterId The specific character whose activities should be returned. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetDestinyAggregateActivityStatsAsync(Long characterId, Long destinyMembershipId, Integer membershipType, final ApiCallback<Destiny2GetDestinyAggregateActivityStats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetDestinyAggregateActivityStatsValidateBeforeCall(characterId, destinyMembershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetDestinyAggregateActivityStats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetDestinyEntityDefinition
     * @param entityType The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation. (required)
     * @param hashIdentifier The hash identifier for the specific Entity you want returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provides common properties for destiny definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetDestinyEntityDefinitionCall(String entityType, Integer hashIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Manifest/{entityType}/{hashIdentifier}/"
            .replace("{" + "entityType" + "}", localVarApiClient.escapeString(entityType.toString()))
            .replace("{" + "hashIdentifier" + "}", localVarApiClient.escapeString(hashIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetDestinyEntityDefinitionValidateBeforeCall(String entityType, Integer hashIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityType' is set
        if (entityType == null) {
            throw new ApiException("Missing the required parameter 'entityType' when calling destiny2GetDestinyEntityDefinition(Async)");
        }

        // verify the required parameter 'hashIdentifier' is set
        if (hashIdentifier == null) {
            throw new ApiException("Missing the required parameter 'hashIdentifier' when calling destiny2GetDestinyEntityDefinition(Async)");
        }

        return destiny2GetDestinyEntityDefinitionCall(entityType, hashIdentifier, _callback);

    }

    /**
     * 
     * Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
     * @param entityType The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation. (required)
     * @param hashIdentifier The hash identifier for the specific Entity you want returned. (required)
     * @return Destiny2GetDestinyEntityDefinition200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provides common properties for destiny definitions. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetDestinyEntityDefinition200Response destiny2GetDestinyEntityDefinition(String entityType, Integer hashIdentifier) throws ApiException {
        ApiResponse<Destiny2GetDestinyEntityDefinition200Response> localVarResp = destiny2GetDestinyEntityDefinitionWithHttpInfo(entityType, hashIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
     * @param entityType The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation. (required)
     * @param hashIdentifier The hash identifier for the specific Entity you want returned. (required)
     * @return ApiResponse&lt;Destiny2GetDestinyEntityDefinition200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provides common properties for destiny definitions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetDestinyEntityDefinition200Response> destiny2GetDestinyEntityDefinitionWithHttpInfo(String entityType, Integer hashIdentifier) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetDestinyEntityDefinitionValidateBeforeCall(entityType, hashIdentifier, null);
        Type localVarReturnType = new TypeToken<Destiny2GetDestinyEntityDefinition200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
     * @param entityType The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation. (required)
     * @param hashIdentifier The hash identifier for the specific Entity you want returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Provides common properties for destiny definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetDestinyEntityDefinitionAsync(String entityType, Integer hashIdentifier, final ApiCallback<Destiny2GetDestinyEntityDefinition200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetDestinyEntityDefinitionValidateBeforeCall(entityType, hashIdentifier, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetDestinyEntityDefinition200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetDestinyManifest
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetDestinyManifestCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Manifest/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetDestinyManifestValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2GetDestinyManifestCall(_callback);

    }

    /**
     * 
     * Returns the current version of the manifest as a json object.
     * @return Destiny2GetDestinyManifest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetDestinyManifest200Response destiny2GetDestinyManifest() throws ApiException {
        ApiResponse<Destiny2GetDestinyManifest200Response> localVarResp = destiny2GetDestinyManifestWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the current version of the manifest as a json object.
     * @return ApiResponse&lt;Destiny2GetDestinyManifest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetDestinyManifest200Response> destiny2GetDestinyManifestWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2GetDestinyManifestValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2GetDestinyManifest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the current version of the manifest as a json object.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetDestinyManifestAsync(final ApiCallback<Destiny2GetDestinyManifest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetDestinyManifestValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2GetDestinyManifest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetHistoricalStats
     * @param characterId The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param dayend Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)
     * @param daystart First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)
     * @param groups Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)
     * @param modes Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param periodType Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetHistoricalStatsCall(Long characterId, Long destinyMembershipId, Integer membershipType, OffsetDateTime dayend, OffsetDateTime daystart, List<Integer> groups, List<Integer> modes, Integer periodType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/"
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()))
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dayend != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dayend", dayend));
        }

        if (daystart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("daystart", daystart));
        }

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        if (modes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "modes", modes));
        }

        if (periodType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodType", periodType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetHistoricalStatsValidateBeforeCall(Long characterId, Long destinyMembershipId, Integer membershipType, OffsetDateTime dayend, OffsetDateTime daystart, List<Integer> groups, List<Integer> modes, Integer periodType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling destiny2GetHistoricalStats(Async)");
        }

        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetHistoricalStats(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetHistoricalStats(Async)");
        }

        return destiny2GetHistoricalStatsCall(characterId, destinyMembershipId, membershipType, dayend, daystart, groups, modes, periodType, _callback);

    }

    /**
     * 
     * Gets historical stats for indicated character.
     * @param characterId The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param dayend Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)
     * @param daystart First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)
     * @param groups Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)
     * @param modes Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param periodType Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)
     * @return Destiny2GetHistoricalStats200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetHistoricalStats200Response destiny2GetHistoricalStats(Long characterId, Long destinyMembershipId, Integer membershipType, OffsetDateTime dayend, OffsetDateTime daystart, List<Integer> groups, List<Integer> modes, Integer periodType) throws ApiException {
        ApiResponse<Destiny2GetHistoricalStats200Response> localVarResp = destiny2GetHistoricalStatsWithHttpInfo(characterId, destinyMembershipId, membershipType, dayend, daystart, groups, modes, periodType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets historical stats for indicated character.
     * @param characterId The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param dayend Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)
     * @param daystart First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)
     * @param groups Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)
     * @param modes Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param periodType Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)
     * @return ApiResponse&lt;Destiny2GetHistoricalStats200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetHistoricalStats200Response> destiny2GetHistoricalStatsWithHttpInfo(Long characterId, Long destinyMembershipId, Integer membershipType, OffsetDateTime dayend, OffsetDateTime daystart, List<Integer> groups, List<Integer> modes, Integer periodType) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetHistoricalStatsValidateBeforeCall(characterId, destinyMembershipId, membershipType, dayend, daystart, groups, modes, periodType, null);
        Type localVarReturnType = new TypeToken<Destiny2GetHistoricalStats200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets historical stats for indicated character.
     * @param characterId The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param dayend Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)
     * @param daystart First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request. (optional)
     * @param groups Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals (optional)
     * @param modes Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param periodType Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetHistoricalStatsAsync(Long characterId, Long destinyMembershipId, Integer membershipType, OffsetDateTime dayend, OffsetDateTime daystart, List<Integer> groups, List<Integer> modes, Integer periodType, final ApiCallback<Destiny2GetHistoricalStats200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetHistoricalStatsValidateBeforeCall(characterId, destinyMembershipId, membershipType, dayend, daystart, groups, modes, periodType, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetHistoricalStats200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetHistoricalStatsDefinition
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetHistoricalStatsDefinitionCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Stats/Definition/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetHistoricalStatsDefinitionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2GetHistoricalStatsDefinitionCall(_callback);

    }

    /**
     * 
     * Gets historical stats definitions.
     * @return Destiny2GetHistoricalStatsDefinition200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetHistoricalStatsDefinition200Response destiny2GetHistoricalStatsDefinition() throws ApiException {
        ApiResponse<Destiny2GetHistoricalStatsDefinition200Response> localVarResp = destiny2GetHistoricalStatsDefinitionWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Gets historical stats definitions.
     * @return ApiResponse&lt;Destiny2GetHistoricalStatsDefinition200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetHistoricalStatsDefinition200Response> destiny2GetHistoricalStatsDefinitionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2GetHistoricalStatsDefinitionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2GetHistoricalStatsDefinition200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets historical stats definitions.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetHistoricalStatsDefinitionAsync(final ApiCallback<Destiny2GetHistoricalStatsDefinition200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetHistoricalStatsDefinitionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2GetHistoricalStatsDefinition200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetHistoricalStatsForAccount
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param groups Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetHistoricalStatsForAccountCall(Long destinyMembershipId, Integer membershipType, List<Integer> groups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/"
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "groups", groups));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetHistoricalStatsForAccountValidateBeforeCall(Long destinyMembershipId, Integer membershipType, List<Integer> groups, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetHistoricalStatsForAccount(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetHistoricalStatsForAccount(Async)");
        }

        return destiny2GetHistoricalStatsForAccountCall(destinyMembershipId, membershipType, groups, _callback);

    }

    /**
     * 
     * Gets aggregate historical stats organized around each character for a given account.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param groups Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)
     * @return Destiny2GetHistoricalStatsForAccount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetHistoricalStatsForAccount200Response destiny2GetHistoricalStatsForAccount(Long destinyMembershipId, Integer membershipType, List<Integer> groups) throws ApiException {
        ApiResponse<Destiny2GetHistoricalStatsForAccount200Response> localVarResp = destiny2GetHistoricalStatsForAccountWithHttpInfo(destinyMembershipId, membershipType, groups);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets aggregate historical stats organized around each character for a given account.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param groups Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)
     * @return ApiResponse&lt;Destiny2GetHistoricalStatsForAccount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetHistoricalStatsForAccount200Response> destiny2GetHistoricalStatsForAccountWithHttpInfo(Long destinyMembershipId, Integer membershipType, List<Integer> groups) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetHistoricalStatsForAccountValidateBeforeCall(destinyMembershipId, membershipType, groups, null);
        Type localVarReturnType = new TypeToken<Destiny2GetHistoricalStatsForAccount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets aggregate historical stats organized around each character for a given account.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param groups Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetHistoricalStatsForAccountAsync(Long destinyMembershipId, Integer membershipType, List<Integer> groups, final ApiCallback<Destiny2GetHistoricalStatsForAccount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetHistoricalStatsForAccountValidateBeforeCall(destinyMembershipId, membershipType, groups, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetHistoricalStatsForAccount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetItem
     * @param destinyMembershipId The membership ID of the destiny profile. (required)
     * @param itemInstanceId The Instance ID of the destiny item. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn&#39;t have an \&quot;itemInstanceId\&quot;: for those, get your information from the DestinyInventoryDefinition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetItemCall(Long destinyMembershipId, Long itemInstanceId, Integer membershipType, List<Integer> components, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/"
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "itemInstanceId" + "}", localVarApiClient.escapeString(itemInstanceId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (components != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "components", components));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetItemValidateBeforeCall(Long destinyMembershipId, Long itemInstanceId, Integer membershipType, List<Integer> components, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetItem(Async)");
        }

        // verify the required parameter 'itemInstanceId' is set
        if (itemInstanceId == null) {
            throw new ApiException("Missing the required parameter 'itemInstanceId' when calling destiny2GetItem(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetItem(Async)");
        }

        return destiny2GetItemCall(destinyMembershipId, itemInstanceId, membershipType, components, _callback);

    }

    /**
     * 
     * Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
     * @param destinyMembershipId The membership ID of the destiny profile. (required)
     * @param itemInstanceId The Instance ID of the destiny item. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return Destiny2GetItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn&#39;t have an \&quot;itemInstanceId\&quot;: for those, get your information from the DestinyInventoryDefinition. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetItem200Response destiny2GetItem(Long destinyMembershipId, Long itemInstanceId, Integer membershipType, List<Integer> components) throws ApiException {
        ApiResponse<Destiny2GetItem200Response> localVarResp = destiny2GetItemWithHttpInfo(destinyMembershipId, itemInstanceId, membershipType, components);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
     * @param destinyMembershipId The membership ID of the destiny profile. (required)
     * @param itemInstanceId The Instance ID of the destiny item. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return ApiResponse&lt;Destiny2GetItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn&#39;t have an \&quot;itemInstanceId\&quot;: for those, get your information from the DestinyInventoryDefinition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetItem200Response> destiny2GetItemWithHttpInfo(Long destinyMembershipId, Long itemInstanceId, Integer membershipType, List<Integer> components) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetItemValidateBeforeCall(destinyMembershipId, itemInstanceId, membershipType, components, null);
        Type localVarReturnType = new TypeToken<Destiny2GetItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
     * @param destinyMembershipId The membership ID of the destiny profile. (required)
     * @param itemInstanceId The Instance ID of the destiny item. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn&#39;t have an \&quot;itemInstanceId\&quot;: for those, get your information from the DestinyInventoryDefinition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetItemAsync(Long destinyMembershipId, Long itemInstanceId, Integer membershipType, List<Integer> components, final ApiCallback<Destiny2GetItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetItemValidateBeforeCall(destinyMembershipId, itemInstanceId, membershipType, components, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetLeaderboards
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetLeaderboardsCall(Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/"
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxtop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxtop", maxtop));
        }

        if (modes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modes", modes));
        }

        if (statid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statid", statid));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetLeaderboardsValidateBeforeCall(Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetLeaderboards(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetLeaderboards(Async)");
        }

        return destiny2GetLeaderboardsCall(destinyMembershipId, membershipType, maxtop, modes, statid, _callback);

    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @return Destiny2GetClanLeaderboards200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetClanLeaderboards200Response destiny2GetLeaderboards(Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid) throws ApiException {
        ApiResponse<Destiny2GetClanLeaderboards200Response> localVarResp = destiny2GetLeaderboardsWithHttpInfo(destinyMembershipId, membershipType, maxtop, modes, statid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @return ApiResponse&lt;Destiny2GetClanLeaderboards200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetClanLeaderboards200Response> destiny2GetLeaderboardsWithHttpInfo(Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetLeaderboardsValidateBeforeCall(destinyMembershipId, membershipType, maxtop, modes, statid, null);
        Type localVarReturnType = new TypeToken<Destiny2GetClanLeaderboards200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetLeaderboardsAsync(Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid, final ApiCallback<Destiny2GetClanLeaderboards200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetLeaderboardsValidateBeforeCall(destinyMembershipId, membershipType, maxtop, modes, statid, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetClanLeaderboards200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetLeaderboardsForCharacter
     * @param characterId The specific character to build the leaderboard around for the provided Destiny Membership. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetLeaderboardsForCharacterCall(Long characterId, Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/"
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()))
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxtop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxtop", maxtop));
        }

        if (modes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modes", modes));
        }

        if (statid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statid", statid));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetLeaderboardsForCharacterValidateBeforeCall(Long characterId, Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling destiny2GetLeaderboardsForCharacter(Async)");
        }

        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetLeaderboardsForCharacter(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetLeaderboardsForCharacter(Async)");
        }

        return destiny2GetLeaderboardsForCharacterCall(characterId, destinyMembershipId, membershipType, maxtop, modes, statid, _callback);

    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param characterId The specific character to build the leaderboard around for the provided Destiny Membership. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @return Destiny2GetClanLeaderboards200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetClanLeaderboards200Response destiny2GetLeaderboardsForCharacter(Long characterId, Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid) throws ApiException {
        ApiResponse<Destiny2GetClanLeaderboards200Response> localVarResp = destiny2GetLeaderboardsForCharacterWithHttpInfo(characterId, destinyMembershipId, membershipType, maxtop, modes, statid);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param characterId The specific character to build the leaderboard around for the provided Destiny Membership. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @return ApiResponse&lt;Destiny2GetClanLeaderboards200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetClanLeaderboards200Response> destiny2GetLeaderboardsForCharacterWithHttpInfo(Long characterId, Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetLeaderboardsForCharacterValidateBeforeCall(characterId, destinyMembershipId, membershipType, maxtop, modes, statid, null);
        Type localVarReturnType = new TypeToken<Destiny2GetClanLeaderboards200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * @param characterId The specific character to build the leaderboard around for the provided Destiny Membership. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param maxtop Maximum number of top players to return. Use a large number to get entire leaderboard. (optional)
     * @param modes List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited. (optional)
     * @param statid ID of stat to return rather than returning all Leaderboard stats. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetLeaderboardsForCharacterAsync(Long characterId, Long destinyMembershipId, Integer membershipType, Integer maxtop, String modes, String statid, final ApiCallback<Destiny2GetClanLeaderboards200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetLeaderboardsForCharacterValidateBeforeCall(characterId, destinyMembershipId, membershipType, maxtop, modes, statid, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetClanLeaderboards200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetLinkedProfiles
     * @param membershipId The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work! (required)
     * @param membershipType The type for the membership whose linked Destiny accounts you want returned. (required)
     * @param getAllMemberships (optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> I know what you seek. You seek linked accounts. Found them, you have.  This contract returns a minimal amount of data about Destiny Accounts that are linked through your Bungie.Net account. We will not return accounts in this response whose </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetLinkedProfilesCall(Long membershipId, Integer membershipType, Boolean getAllMemberships, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Profile/{membershipId}/LinkedProfiles/"
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (getAllMemberships != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("getAllMemberships", getAllMemberships));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetLinkedProfilesValidateBeforeCall(Long membershipId, Integer membershipType, Boolean getAllMemberships, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling destiny2GetLinkedProfiles(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetLinkedProfiles(Async)");
        }

        return destiny2GetLinkedProfilesCall(membershipId, membershipType, getAllMemberships, _callback);

    }

    /**
     * 
     * Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
     * @param membershipId The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work! (required)
     * @param membershipType The type for the membership whose linked Destiny accounts you want returned. (required)
     * @param getAllMemberships (optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what. (optional)
     * @return Destiny2GetLinkedProfiles200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> I know what you seek. You seek linked accounts. Found them, you have.  This contract returns a minimal amount of data about Destiny Accounts that are linked through your Bungie.Net account. We will not return accounts in this response whose </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetLinkedProfiles200Response destiny2GetLinkedProfiles(Long membershipId, Integer membershipType, Boolean getAllMemberships) throws ApiException {
        ApiResponse<Destiny2GetLinkedProfiles200Response> localVarResp = destiny2GetLinkedProfilesWithHttpInfo(membershipId, membershipType, getAllMemberships);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
     * @param membershipId The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work! (required)
     * @param membershipType The type for the membership whose linked Destiny accounts you want returned. (required)
     * @param getAllMemberships (optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what. (optional)
     * @return ApiResponse&lt;Destiny2GetLinkedProfiles200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> I know what you seek. You seek linked accounts. Found them, you have.  This contract returns a minimal amount of data about Destiny Accounts that are linked through your Bungie.Net account. We will not return accounts in this response whose </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetLinkedProfiles200Response> destiny2GetLinkedProfilesWithHttpInfo(Long membershipId, Integer membershipType, Boolean getAllMemberships) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetLinkedProfilesValidateBeforeCall(membershipId, membershipType, getAllMemberships, null);
        Type localVarReturnType = new TypeToken<Destiny2GetLinkedProfiles200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
     * @param membershipId The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don&#39;t pass us a PSN membership ID and the XBox membership type, it&#39;s not going to work! (required)
     * @param membershipType The type for the membership whose linked Destiny accounts you want returned. (required)
     * @param getAllMemberships (optional) if set to &#39;true&#39;, all memberships regardless of whether they&#39;re obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> I know what you seek. You seek linked accounts. Found them, you have.  This contract returns a minimal amount of data about Destiny Accounts that are linked through your Bungie.Net account. We will not return accounts in this response whose </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetLinkedProfilesAsync(Long membershipId, Integer membershipType, Boolean getAllMemberships, final ApiCallback<Destiny2GetLinkedProfiles200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetLinkedProfilesValidateBeforeCall(membershipId, membershipType, getAllMemberships, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetLinkedProfiles200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetPostGameCarnageReport
     * @param activityId The ID of the activity whose PGCR is requested. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetPostGameCarnageReportCall(Long activityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Stats/PostGameCarnageReport/{activityId}/"
            .replace("{" + "activityId" + "}", localVarApiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetPostGameCarnageReportValidateBeforeCall(Long activityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling destiny2GetPostGameCarnageReport(Async)");
        }

        return destiny2GetPostGameCarnageReportCall(activityId, _callback);

    }

    /**
     * 
     * Gets the available post game carnage report for the activity ID.
     * @param activityId The ID of the activity whose PGCR is requested. (required)
     * @return Destiny2GetPostGameCarnageReport200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetPostGameCarnageReport200Response destiny2GetPostGameCarnageReport(Long activityId) throws ApiException {
        ApiResponse<Destiny2GetPostGameCarnageReport200Response> localVarResp = destiny2GetPostGameCarnageReportWithHttpInfo(activityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the available post game carnage report for the activity ID.
     * @param activityId The ID of the activity whose PGCR is requested. (required)
     * @return ApiResponse&lt;Destiny2GetPostGameCarnageReport200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetPostGameCarnageReport200Response> destiny2GetPostGameCarnageReportWithHttpInfo(Long activityId) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetPostGameCarnageReportValidateBeforeCall(activityId, null);
        Type localVarReturnType = new TypeToken<Destiny2GetPostGameCarnageReport200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the available post game carnage report for the activity ID.
     * @param activityId The ID of the activity whose PGCR is requested. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetPostGameCarnageReportAsync(Long activityId, final ApiCallback<Destiny2GetPostGameCarnageReport200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetPostGameCarnageReportValidateBeforeCall(activityId, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetPostGameCarnageReport200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetProfile
     * @param destinyMembershipId Destiny membership ID. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for GetDestinyProfile, with components for character and item-level data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetProfileCall(Long destinyMembershipId, Integer membershipType, List<Integer> components, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/"
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (components != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "components", components));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetProfileValidateBeforeCall(Long destinyMembershipId, Integer membershipType, List<Integer> components, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetProfile(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetProfile(Async)");
        }

        return destiny2GetProfileCall(destinyMembershipId, membershipType, components, _callback);

    }

    /**
     * 
     * Returns Destiny Profile information for the supplied membership.
     * @param destinyMembershipId Destiny membership ID. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return Destiny2GetProfile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for GetDestinyProfile, with components for character and item-level data. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetProfile200Response destiny2GetProfile(Long destinyMembershipId, Integer membershipType, List<Integer> components) throws ApiException {
        ApiResponse<Destiny2GetProfile200Response> localVarResp = destiny2GetProfileWithHttpInfo(destinyMembershipId, membershipType, components);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns Destiny Profile information for the supplied membership.
     * @param destinyMembershipId Destiny membership ID. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return ApiResponse&lt;Destiny2GetProfile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for GetDestinyProfile, with components for character and item-level data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetProfile200Response> destiny2GetProfileWithHttpInfo(Long destinyMembershipId, Integer membershipType, List<Integer> components) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetProfileValidateBeforeCall(destinyMembershipId, membershipType, components, null);
        Type localVarReturnType = new TypeToken<Destiny2GetProfile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns Destiny Profile information for the supplied membership.
     * @param destinyMembershipId Destiny membership ID. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for GetDestinyProfile, with components for character and item-level data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetProfileAsync(Long destinyMembershipId, Integer membershipType, List<Integer> components, final ApiCallback<Destiny2GetProfile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetProfileValidateBeforeCall(destinyMembershipId, membershipType, components, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetProfile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetPublicMilestoneContent
     * @param milestoneHash The identifier for the milestone to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Represents localized, extended content related to Milestones. This is intentionally returned by a separate endpoint and not with Character-level Milestone data because we do not put localized data into standard Destiny responses, both for brevity of response and for caching purposes. If you really need this data, hit the Milestone Content endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetPublicMilestoneContentCall(Integer milestoneHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Milestones/{milestoneHash}/Content/"
            .replace("{" + "milestoneHash" + "}", localVarApiClient.escapeString(milestoneHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetPublicMilestoneContentValidateBeforeCall(Integer milestoneHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'milestoneHash' is set
        if (milestoneHash == null) {
            throw new ApiException("Missing the required parameter 'milestoneHash' when calling destiny2GetPublicMilestoneContent(Async)");
        }

        return destiny2GetPublicMilestoneContentCall(milestoneHash, _callback);

    }

    /**
     * 
     * Gets custom localized content for the milestone of the given hash, if it exists.
     * @param milestoneHash The identifier for the milestone to be returned. (required)
     * @return Destiny2GetPublicMilestoneContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Represents localized, extended content related to Milestones. This is intentionally returned by a separate endpoint and not with Character-level Milestone data because we do not put localized data into standard Destiny responses, both for brevity of response and for caching purposes. If you really need this data, hit the Milestone Content endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetPublicMilestoneContent200Response destiny2GetPublicMilestoneContent(Integer milestoneHash) throws ApiException {
        ApiResponse<Destiny2GetPublicMilestoneContent200Response> localVarResp = destiny2GetPublicMilestoneContentWithHttpInfo(milestoneHash);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets custom localized content for the milestone of the given hash, if it exists.
     * @param milestoneHash The identifier for the milestone to be returned. (required)
     * @return ApiResponse&lt;Destiny2GetPublicMilestoneContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Represents localized, extended content related to Milestones. This is intentionally returned by a separate endpoint and not with Character-level Milestone data because we do not put localized data into standard Destiny responses, both for brevity of response and for caching purposes. If you really need this data, hit the Milestone Content endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetPublicMilestoneContent200Response> destiny2GetPublicMilestoneContentWithHttpInfo(Integer milestoneHash) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetPublicMilestoneContentValidateBeforeCall(milestoneHash, null);
        Type localVarReturnType = new TypeToken<Destiny2GetPublicMilestoneContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets custom localized content for the milestone of the given hash, if it exists.
     * @param milestoneHash The identifier for the milestone to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Represents localized, extended content related to Milestones. This is intentionally returned by a separate endpoint and not with Character-level Milestone data because we do not put localized data into standard Destiny responses, both for brevity of response and for caching purposes. If you really need this data, hit the Milestone Content endpoint. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetPublicMilestoneContentAsync(Integer milestoneHash, final ApiCallback<Destiny2GetPublicMilestoneContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetPublicMilestoneContentValidateBeforeCall(milestoneHash, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetPublicMilestoneContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetPublicMilestones
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetPublicMilestonesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Milestones/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetPublicMilestonesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2GetPublicMilestonesCall(_callback);

    }

    /**
     * 
     * Gets public information about currently available Milestones.
     * @return Destiny2GetPublicMilestones200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetPublicMilestones200Response destiny2GetPublicMilestones() throws ApiException {
        ApiResponse<Destiny2GetPublicMilestones200Response> localVarResp = destiny2GetPublicMilestonesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Gets public information about currently available Milestones.
     * @return ApiResponse&lt;Destiny2GetPublicMilestones200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetPublicMilestones200Response> destiny2GetPublicMilestonesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2GetPublicMilestonesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2GetPublicMilestones200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets public information about currently available Milestones.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetPublicMilestonesAsync(final ApiCallback<Destiny2GetPublicMilestones200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetPublicMilestonesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2GetPublicMilestones200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetPublicVendors
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all valid components for the public Vendors endpoint.   It is a decisively smaller subset of data compared to what we can get when we know the specific user making the request.   If you want any of the other data - item details, whether or not you can buy it, etc... you&#39;ll have to call in the context of a character. I know, sad but true. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetPublicVendorsCall(List<Integer> components, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Vendors/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (components != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "components", components));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetPublicVendorsValidateBeforeCall(List<Integer> components, final ApiCallback _callback) throws ApiException {
        return destiny2GetPublicVendorsCall(components, _callback);

    }

    /**
     * 
     * Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return Destiny2GetPublicVendors200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all valid components for the public Vendors endpoint.   It is a decisively smaller subset of data compared to what we can get when we know the specific user making the request.   If you want any of the other data - item details, whether or not you can buy it, etc... you&#39;ll have to call in the context of a character. I know, sad but true. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetPublicVendors200Response destiny2GetPublicVendors(List<Integer> components) throws ApiException {
        ApiResponse<Destiny2GetPublicVendors200Response> localVarResp = destiny2GetPublicVendorsWithHttpInfo(components);
        return localVarResp.getData();
    }

    /**
     * 
     * Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return ApiResponse&lt;Destiny2GetPublicVendors200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all valid components for the public Vendors endpoint.   It is a decisively smaller subset of data compared to what we can get when we know the specific user making the request.   If you want any of the other data - item details, whether or not you can buy it, etc... you&#39;ll have to call in the context of a character. I know, sad but true. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetPublicVendors200Response> destiny2GetPublicVendorsWithHttpInfo(List<Integer> components) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetPublicVendorsValidateBeforeCall(components, null);
        Type localVarReturnType = new TypeToken<Destiny2GetPublicVendors200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all valid components for the public Vendors endpoint.   It is a decisively smaller subset of data compared to what we can get when we know the specific user making the request.   If you want any of the other data - item details, whether or not you can buy it, etc... you&#39;ll have to call in the context of a character. I know, sad but true. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetPublicVendorsAsync(List<Integer> components, final ApiCallback<Destiny2GetPublicVendors200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetPublicVendorsValidateBeforeCall(components, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetPublicVendors200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetUniqueWeaponHistory
     * @param characterId The id of the character to retrieve. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetUniqueWeaponHistoryCall(Long characterId, Long destinyMembershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/"
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()))
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetUniqueWeaponHistoryValidateBeforeCall(Long characterId, Long destinyMembershipId, Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling destiny2GetUniqueWeaponHistory(Async)");
        }

        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetUniqueWeaponHistory(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetUniqueWeaponHistory(Async)");
        }

        return destiny2GetUniqueWeaponHistoryCall(characterId, destinyMembershipId, membershipType, _callback);

    }

    /**
     * 
     * Gets details about unique weapon usage, including all exotic weapons.
     * @param characterId The id of the character to retrieve. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @return Destiny2GetUniqueWeaponHistory200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetUniqueWeaponHistory200Response destiny2GetUniqueWeaponHistory(Long characterId, Long destinyMembershipId, Integer membershipType) throws ApiException {
        ApiResponse<Destiny2GetUniqueWeaponHistory200Response> localVarResp = destiny2GetUniqueWeaponHistoryWithHttpInfo(characterId, destinyMembershipId, membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets details about unique weapon usage, including all exotic weapons.
     * @param characterId The id of the character to retrieve. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @return ApiResponse&lt;Destiny2GetUniqueWeaponHistory200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetUniqueWeaponHistory200Response> destiny2GetUniqueWeaponHistoryWithHttpInfo(Long characterId, Long destinyMembershipId, Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetUniqueWeaponHistoryValidateBeforeCall(characterId, destinyMembershipId, membershipType, null);
        Type localVarReturnType = new TypeToken<Destiny2GetUniqueWeaponHistory200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets details about unique weapon usage, including all exotic weapons.
     * @param characterId The id of the character to retrieve. (required)
     * @param destinyMembershipId The Destiny membershipId of the user to retrieve. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetUniqueWeaponHistoryAsync(Long characterId, Long destinyMembershipId, Integer membershipType, final ApiCallback<Destiny2GetUniqueWeaponHistory200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetUniqueWeaponHistoryValidateBeforeCall(characterId, destinyMembershipId, membershipType, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetUniqueWeaponHistory200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetVendor
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting vendor info. (required)
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param vendorHash The Hash identifier of the Vendor to be returned. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all of the components for a vendor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetVendorCall(Long characterId, Long destinyMembershipId, Integer membershipType, Integer vendorHash, List<Integer> components, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/"
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()))
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()))
            .replace("{" + "vendorHash" + "}", localVarApiClient.escapeString(vendorHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (components != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "components", components));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetVendorValidateBeforeCall(Long characterId, Long destinyMembershipId, Integer membershipType, Integer vendorHash, List<Integer> components, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling destiny2GetVendor(Async)");
        }

        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetVendor(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetVendor(Async)");
        }

        // verify the required parameter 'vendorHash' is set
        if (vendorHash == null) {
            throw new ApiException("Missing the required parameter 'vendorHash' when calling destiny2GetVendor(Async)");
        }

        return destiny2GetVendorCall(characterId, destinyMembershipId, membershipType, vendorHash, components, _callback);

    }

    /**
     * 
     * Get the details of a specific Vendor.
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting vendor info. (required)
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param vendorHash The Hash identifier of the Vendor to be returned. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return Destiny2GetVendor200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all of the components for a vendor. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetVendor200Response destiny2GetVendor(Long characterId, Long destinyMembershipId, Integer membershipType, Integer vendorHash, List<Integer> components) throws ApiException {
        ApiResponse<Destiny2GetVendor200Response> localVarResp = destiny2GetVendorWithHttpInfo(characterId, destinyMembershipId, membershipType, vendorHash, components);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the details of a specific Vendor.
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting vendor info. (required)
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param vendorHash The Hash identifier of the Vendor to be returned. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @return ApiResponse&lt;Destiny2GetVendor200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all of the components for a vendor. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetVendor200Response> destiny2GetVendorWithHttpInfo(Long characterId, Long destinyMembershipId, Integer membershipType, Integer vendorHash, List<Integer> components) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetVendorValidateBeforeCall(characterId, destinyMembershipId, membershipType, vendorHash, components, null);
        Type localVarReturnType = new TypeToken<Destiny2GetVendor200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the details of a specific Vendor.
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting vendor info. (required)
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param vendorHash The Hash identifier of the Vendor to be returned. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all of the components for a vendor. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetVendorAsync(Long characterId, Long destinyMembershipId, Integer membershipType, Integer vendorHash, List<Integer> components, final ApiCallback<Destiny2GetVendor200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetVendorValidateBeforeCall(characterId, destinyMembershipId, membershipType, vendorHash, components, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetVendor200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2GetVendors
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting vendor info. (required)
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param filter The filter of what vendors and items to return, if any. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all of the components for all requested vendors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetVendorsCall(Long characterId, Long destinyMembershipId, Integer membershipType, List<Integer> components, Integer filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/"
            .replace("{" + "characterId" + "}", localVarApiClient.escapeString(characterId.toString()))
            .replace("{" + "destinyMembershipId" + "}", localVarApiClient.escapeString(destinyMembershipId.toString()))
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (components != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "components", components));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2GetVendorsValidateBeforeCall(Long characterId, Long destinyMembershipId, Integer membershipType, List<Integer> components, Integer filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling destiny2GetVendors(Async)");
        }

        // verify the required parameter 'destinyMembershipId' is set
        if (destinyMembershipId == null) {
            throw new ApiException("Missing the required parameter 'destinyMembershipId' when calling destiny2GetVendors(Async)");
        }

        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2GetVendors(Async)");
        }

        return destiny2GetVendorsCall(characterId, destinyMembershipId, membershipType, components, filter, _callback);

    }

    /**
     * 
     * Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting vendor info. (required)
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param filter The filter of what vendors and items to return, if any. (optional)
     * @return Destiny2GetVendors200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all of the components for all requested vendors. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2GetVendors200Response destiny2GetVendors(Long characterId, Long destinyMembershipId, Integer membershipType, List<Integer> components, Integer filter) throws ApiException {
        ApiResponse<Destiny2GetVendors200Response> localVarResp = destiny2GetVendorsWithHttpInfo(characterId, destinyMembershipId, membershipType, components, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting vendor info. (required)
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param filter The filter of what vendors and items to return, if any. (optional)
     * @return ApiResponse&lt;Destiny2GetVendors200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all of the components for all requested vendors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2GetVendors200Response> destiny2GetVendorsWithHttpInfo(Long characterId, Long destinyMembershipId, Integer membershipType, List<Integer> components, Integer filter) throws ApiException {
        okhttp3.Call localVarCall = destiny2GetVendorsValidateBeforeCall(characterId, destinyMembershipId, membershipType, components, filter, null);
        Type localVarReturnType = new TypeToken<Destiny2GetVendors200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
     * @param characterId The Destiny Character ID of the character for whom we&#39;re getting vendor info. (required)
     * @param destinyMembershipId Destiny membership ID of another user. You may be denied. (required)
     * @param membershipType A valid non-BungieNet membership type. (required)
     * @param components A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results. (optional)
     * @param filter The filter of what vendors and items to return, if any. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing all of the components for all requested vendors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2GetVendorsAsync(Long characterId, Long destinyMembershipId, Integer membershipType, List<Integer> components, Integer filter, final ApiCallback<Destiny2GetVendors200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2GetVendorsValidateBeforeCall(characterId, destinyMembershipId, membershipType, components, filter, _callback);
        Type localVarReturnType = new TypeToken<Destiny2GetVendors200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2InsertSocketPlug
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2InsertSocketPlugCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Items/InsertSocketPlug/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2InsertSocketPlugValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2InsertSocketPlugCall(_callback);

    }

    /**
     * 
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
     * @return Destiny2InsertSocketPlug200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2InsertSocketPlug200Response destiny2InsertSocketPlug() throws ApiException {
        ApiResponse<Destiny2InsertSocketPlug200Response> localVarResp = destiny2InsertSocketPlugWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
     * @return ApiResponse&lt;Destiny2InsertSocketPlug200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2InsertSocketPlug200Response> destiny2InsertSocketPlugWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2InsertSocketPlugValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2InsertSocketPlug200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2InsertSocketPlugAsync(final ApiCallback<Destiny2InsertSocketPlug200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2InsertSocketPlugValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2InsertSocketPlug200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2InsertSocketPlugFree
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2InsertSocketPlugFreeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Items/InsertSocketPlugFree/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2InsertSocketPlugFreeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2InsertSocketPlugFreeCall(_callback);

    }

    /**
     * 
     * Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
     * @return Destiny2InsertSocketPlug200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2InsertSocketPlug200Response destiny2InsertSocketPlugFree() throws ApiException {
        ApiResponse<Destiny2InsertSocketPlug200Response> localVarResp = destiny2InsertSocketPlugFreeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
     * @return ApiResponse&lt;Destiny2InsertSocketPlug200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2InsertSocketPlug200Response> destiny2InsertSocketPlugFreeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2InsertSocketPlugFreeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2InsertSocketPlug200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2InsertSocketPlugFreeAsync(final ApiCallback<Destiny2InsertSocketPlug200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2InsertSocketPlugFreeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2InsertSocketPlug200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2PullFromPostmaster
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2PullFromPostmasterCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Items/PullFromPostmaster/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2PullFromPostmasterValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2PullFromPostmasterCall(_callback);

    }

    /**
     * 
     * Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response destiny2PullFromPostmaster() throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = destiny2PullFromPostmasterWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> destiny2PullFromPostmasterWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2PullFromPostmasterValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2PullFromPostmasterAsync(final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2PullFromPostmasterValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2ReportOffensivePostGameCarnageReportPlayer
     * @param activityId The ID of the activity where you ran into the brigand that you&#39;re reporting. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2ReportOffensivePostGameCarnageReportPlayerCall(Long activityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Stats/PostGameCarnageReport/{activityId}/Report/"
            .replace("{" + "activityId" + "}", localVarApiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2ReportOffensivePostGameCarnageReportPlayerValidateBeforeCall(Long activityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling destiny2ReportOffensivePostGameCarnageReportPlayer(Async)");
        }

        return destiny2ReportOffensivePostGameCarnageReportPlayerCall(activityId, _callback);

    }

    /**
     * 
     * Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
     * @param activityId The ID of the activity where you ran into the brigand that you&#39;re reporting. (required)
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response destiny2ReportOffensivePostGameCarnageReportPlayer(Long activityId) throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = destiny2ReportOffensivePostGameCarnageReportPlayerWithHttpInfo(activityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
     * @param activityId The ID of the activity where you ran into the brigand that you&#39;re reporting. (required)
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> destiny2ReportOffensivePostGameCarnageReportPlayerWithHttpInfo(Long activityId) throws ApiException {
        okhttp3.Call localVarCall = destiny2ReportOffensivePostGameCarnageReportPlayerValidateBeforeCall(activityId, null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
     * @param activityId The ID of the activity where you ran into the brigand that you&#39;re reporting. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2ReportOffensivePostGameCarnageReportPlayerAsync(Long activityId, final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2ReportOffensivePostGameCarnageReportPlayerValidateBeforeCall(activityId, _callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2SearchDestinyEntities
     * @param searchTerm The string to use when searching for Destiny entities. (required)
     * @param type The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. (required)
     * @param page Page number to return, starting with 0. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results of a search for Destiny content. This will be improved on over time, I&#39;ve been doing some experimenting to see what might be useful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2SearchDestinyEntitiesCall(String searchTerm, String type, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Armory/Search/{type}/{searchTerm}/"
            .replace("{" + "searchTerm" + "}", localVarApiClient.escapeString(searchTerm.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2SearchDestinyEntitiesValidateBeforeCall(String searchTerm, String type, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchTerm' is set
        if (searchTerm == null) {
            throw new ApiException("Missing the required parameter 'searchTerm' when calling destiny2SearchDestinyEntities(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling destiny2SearchDestinyEntities(Async)");
        }

        return destiny2SearchDestinyEntitiesCall(searchTerm, type, page, _callback);

    }

    /**
     * 
     * Gets a page list of Destiny items.
     * @param searchTerm The string to use when searching for Destiny entities. (required)
     * @param type The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. (required)
     * @param page Page number to return, starting with 0. (optional)
     * @return Destiny2SearchDestinyEntities200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results of a search for Destiny content. This will be improved on over time, I&#39;ve been doing some experimenting to see what might be useful. </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2SearchDestinyEntities200Response destiny2SearchDestinyEntities(String searchTerm, String type, Integer page) throws ApiException {
        ApiResponse<Destiny2SearchDestinyEntities200Response> localVarResp = destiny2SearchDestinyEntitiesWithHttpInfo(searchTerm, type, page);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a page list of Destiny items.
     * @param searchTerm The string to use when searching for Destiny entities. (required)
     * @param type The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. (required)
     * @param page Page number to return, starting with 0. (optional)
     * @return ApiResponse&lt;Destiny2SearchDestinyEntities200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results of a search for Destiny content. This will be improved on over time, I&#39;ve been doing some experimenting to see what might be useful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2SearchDestinyEntities200Response> destiny2SearchDestinyEntitiesWithHttpInfo(String searchTerm, String type, Integer page) throws ApiException {
        okhttp3.Call localVarCall = destiny2SearchDestinyEntitiesValidateBeforeCall(searchTerm, type, page, null);
        Type localVarReturnType = new TypeToken<Destiny2SearchDestinyEntities200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a page list of Destiny items.
     * @param searchTerm The string to use when searching for Destiny entities. (required)
     * @param type The type of entity for whom you would like results. These correspond to the entity&#39;s definition contract name. For instance, if you are looking for items, this property should be &#39;DestinyInventoryItemDefinition&#39;. (required)
     * @param page Page number to return, starting with 0. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The results of a search for Destiny content. This will be improved on over time, I&#39;ve been doing some experimenting to see what might be useful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2SearchDestinyEntitiesAsync(String searchTerm, String type, Integer page, final ApiCallback<Destiny2SearchDestinyEntities200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2SearchDestinyEntitiesValidateBeforeCall(searchTerm, type, page, _callback);
        Type localVarReturnType = new TypeToken<Destiny2SearchDestinyEntities200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2SearchDestinyPlayerByBungieName
     * @param membershipType A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2SearchDestinyPlayerByBungieNameCall(Integer membershipType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/SearchDestinyPlayerByBungieName/{membershipType}/"
            .replace("{" + "membershipType" + "}", localVarApiClient.escapeString(membershipType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2SearchDestinyPlayerByBungieNameValidateBeforeCall(Integer membershipType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membershipType' is set
        if (membershipType == null) {
            throw new ApiException("Missing the required parameter 'membershipType' when calling destiny2SearchDestinyPlayerByBungieName(Async)");
        }

        return destiny2SearchDestinyPlayerByBungieNameCall(membershipType, _callback);

    }

    /**
     * 
     * Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
     * @param membershipType A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All. (required)
     * @return Destiny2SearchDestinyPlayerByBungieName200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2SearchDestinyPlayerByBungieName200Response destiny2SearchDestinyPlayerByBungieName(Integer membershipType) throws ApiException {
        ApiResponse<Destiny2SearchDestinyPlayerByBungieName200Response> localVarResp = destiny2SearchDestinyPlayerByBungieNameWithHttpInfo(membershipType);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
     * @param membershipType A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All. (required)
     * @return ApiResponse&lt;Destiny2SearchDestinyPlayerByBungieName200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2SearchDestinyPlayerByBungieName200Response> destiny2SearchDestinyPlayerByBungieNameWithHttpInfo(Integer membershipType) throws ApiException {
        okhttp3.Call localVarCall = destiny2SearchDestinyPlayerByBungieNameValidateBeforeCall(membershipType, null);
        Type localVarReturnType = new TypeToken<Destiny2SearchDestinyPlayerByBungieName200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
     * @param membershipType A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2SearchDestinyPlayerByBungieNameAsync(Integer membershipType, final ApiCallback<Destiny2SearchDestinyPlayerByBungieName200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2SearchDestinyPlayerByBungieNameValidateBeforeCall(membershipType, _callback);
        Type localVarReturnType = new TypeToken<Destiny2SearchDestinyPlayerByBungieName200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2SetItemLockState
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2SetItemLockStateCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Items/SetLockState/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2SetItemLockStateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2SetItemLockStateCall(_callback);

    }

    /**
     * 
     * Set the Lock State for an instanced item. You must have a valid Destiny Account.
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response destiny2SetItemLockState() throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = destiny2SetItemLockStateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Set the Lock State for an instanced item. You must have a valid Destiny Account.
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> destiny2SetItemLockStateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2SetItemLockStateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set the Lock State for an instanced item. You must have a valid Destiny Account.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2SetItemLockStateAsync(final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2SetItemLockStateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2SetQuestTrackedState
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2SetQuestTrackedStateCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Items/SetTrackedState/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2SetQuestTrackedStateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2SetQuestTrackedStateCall(_callback);

    }

    /**
     * 
     * Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it&#39;s an item.
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response destiny2SetQuestTrackedState() throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = destiny2SetQuestTrackedStateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it&#39;s an item.
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> destiny2SetQuestTrackedStateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2SetQuestTrackedStateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it&#39;s an item.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2SetQuestTrackedStateAsync(final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2SetQuestTrackedStateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2SnapshotLoadout
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2SnapshotLoadoutCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Loadouts/SnapshotLoadout/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2SnapshotLoadoutValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2SnapshotLoadoutCall(_callback);

    }

    /**
     * 
     * Snapshot a loadout with the currently equipped items.
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response destiny2SnapshotLoadout() throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = destiny2SnapshotLoadoutWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Snapshot a loadout with the currently equipped items.
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> destiny2SnapshotLoadoutWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2SnapshotLoadoutValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Snapshot a loadout with the currently equipped items.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2SnapshotLoadoutAsync(final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2SnapshotLoadoutValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2TransferItem
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2TransferItemCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Items/TransferItem/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2TransferItemValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2TransferItemCall(_callback);

    }

    /**
     * 
     * Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response destiny2TransferItem() throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = destiny2TransferItemWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> destiny2TransferItemWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2TransferItemValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2TransferItemAsync(final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2TransferItemValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for destiny2UpdateLoadoutIdentifiers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2UpdateLoadoutIdentifiersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Destiny2/Actions/Loadouts/UpdateLoadoutIdentifiers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call destiny2UpdateLoadoutIdentifiersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return destiny2UpdateLoadoutIdentifiersCall(_callback);

    }

    /**
     * 
     * Update the color, icon, and name of a loadout.
     * @return Destiny2EquipItem200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public Destiny2EquipItem200Response destiny2UpdateLoadoutIdentifiers() throws ApiException {
        ApiResponse<Destiny2EquipItem200Response> localVarResp = destiny2UpdateLoadoutIdentifiersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Update the color, icon, and name of a loadout.
     * @return ApiResponse&lt;Destiny2EquipItem200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Destiny2EquipItem200Response> destiny2UpdateLoadoutIdentifiersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = destiny2UpdateLoadoutIdentifiersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the color, icon, and name of a loadout.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Look at the Response property for more information about the nature of this response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call destiny2UpdateLoadoutIdentifiersAsync(final ApiCallback<Destiny2EquipItem200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = destiny2UpdateLoadoutIdentifiersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Destiny2EquipItem200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
