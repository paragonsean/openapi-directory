/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDestinyProgressionResetEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a current character&#39;s status with a Progression. A progression is a value that can increase with activity and has levels. Think Character Level and Reputation Levels. Combine this \&quot;live\&quot; data with the related DestinyProgressionDefinition for a full picture of the Progression.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDestinyProgression {
  public static final String SERIALIZED_NAME_CURRENT_PROGRESS = "currentProgress";
  @SerializedName(SERIALIZED_NAME_CURRENT_PROGRESS)
  private Integer currentProgress;

  public static final String SERIALIZED_NAME_CURRENT_RESET_COUNT = "currentResetCount";
  @SerializedName(SERIALIZED_NAME_CURRENT_RESET_COUNT)
  private Integer currentResetCount;

  public static final String SERIALIZED_NAME_DAILY_LIMIT = "dailyLimit";
  @SerializedName(SERIALIZED_NAME_DAILY_LIMIT)
  private Integer dailyLimit;

  public static final String SERIALIZED_NAME_DAILY_PROGRESS = "dailyProgress";
  @SerializedName(SERIALIZED_NAME_DAILY_PROGRESS)
  private Integer dailyProgress;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_LEVEL_CAP = "levelCap";
  @SerializedName(SERIALIZED_NAME_LEVEL_CAP)
  private Integer levelCap;

  public static final String SERIALIZED_NAME_NEXT_LEVEL_AT = "nextLevelAt";
  @SerializedName(SERIALIZED_NAME_NEXT_LEVEL_AT)
  private Integer nextLevelAt;

  public static final String SERIALIZED_NAME_PROGRESS_TO_NEXT_LEVEL = "progressToNextLevel";
  @SerializedName(SERIALIZED_NAME_PROGRESS_TO_NEXT_LEVEL)
  private Integer progressToNextLevel;

  public static final String SERIALIZED_NAME_PROGRESSION_HASH = "progressionHash";
  @SerializedName(SERIALIZED_NAME_PROGRESSION_HASH)
  private Integer progressionHash;

  public static final String SERIALIZED_NAME_REWARD_ITEM_STATES = "rewardItemStates";
  @SerializedName(SERIALIZED_NAME_REWARD_ITEM_STATES)
  private List<Integer> rewardItemStates = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEASON_RESETS = "seasonResets";
  @SerializedName(SERIALIZED_NAME_SEASON_RESETS)
  private List<DestinyDestinyProgressionResetEntry> seasonResets = new ArrayList<>();

  public static final String SERIALIZED_NAME_STEP_INDEX = "stepIndex";
  @SerializedName(SERIALIZED_NAME_STEP_INDEX)
  private Integer stepIndex;

  public static final String SERIALIZED_NAME_WEEKLY_LIMIT = "weeklyLimit";
  @SerializedName(SERIALIZED_NAME_WEEKLY_LIMIT)
  private Integer weeklyLimit;

  public static final String SERIALIZED_NAME_WEEKLY_PROGRESS = "weeklyProgress";
  @SerializedName(SERIALIZED_NAME_WEEKLY_PROGRESS)
  private Integer weeklyProgress;

  public DestinyDestinyProgression() {
  }

  public DestinyDestinyProgression currentProgress(Integer currentProgress) {
    this.currentProgress = currentProgress;
    return this;
  }

  /**
   * This is the total amount of progress obtained overall for this progression (for instance, the total amount of Character Level experience earned)
   * @return currentProgress
   */
  @javax.annotation.Nullable
  public Integer getCurrentProgress() {
    return currentProgress;
  }

  public void setCurrentProgress(Integer currentProgress) {
    this.currentProgress = currentProgress;
  }


  public DestinyDestinyProgression currentResetCount(Integer currentResetCount) {
    this.currentResetCount = currentResetCount;
    return this;
  }

  /**
   * The number of resets of this progression you&#39;ve executed this season, if applicable to this progression.
   * @return currentResetCount
   */
  @javax.annotation.Nullable
  public Integer getCurrentResetCount() {
    return currentResetCount;
  }

  public void setCurrentResetCount(Integer currentResetCount) {
    this.currentResetCount = currentResetCount;
  }


  public DestinyDestinyProgression dailyLimit(Integer dailyLimit) {
    this.dailyLimit = dailyLimit;
    return this;
  }

  /**
   * If this progression has a daily limit, this is that limit.
   * @return dailyLimit
   */
  @javax.annotation.Nullable
  public Integer getDailyLimit() {
    return dailyLimit;
  }

  public void setDailyLimit(Integer dailyLimit) {
    this.dailyLimit = dailyLimit;
  }


  public DestinyDestinyProgression dailyProgress(Integer dailyProgress) {
    this.dailyProgress = dailyProgress;
    return this;
  }

  /**
   * The amount of progress earned today for this progression.
   * @return dailyProgress
   */
  @javax.annotation.Nullable
  public Integer getDailyProgress() {
    return dailyProgress;
  }

  public void setDailyProgress(Integer dailyProgress) {
    this.dailyProgress = dailyProgress;
  }


  public DestinyDestinyProgression level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * This is the level of the progression (for instance, the Character Level).
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public DestinyDestinyProgression levelCap(Integer levelCap) {
    this.levelCap = levelCap;
    return this;
  }

  /**
   * This is the maximum possible level you can achieve for this progression (for example, the maximum character level obtainable)
   * @return levelCap
   */
  @javax.annotation.Nullable
  public Integer getLevelCap() {
    return levelCap;
  }

  public void setLevelCap(Integer levelCap) {
    this.levelCap = levelCap;
  }


  public DestinyDestinyProgression nextLevelAt(Integer nextLevelAt) {
    this.nextLevelAt = nextLevelAt;
    return this;
  }

  /**
   * The total amount of progression (i.e. \&quot;Experience\&quot;) needed in order to reach the next level.
   * @return nextLevelAt
   */
  @javax.annotation.Nullable
  public Integer getNextLevelAt() {
    return nextLevelAt;
  }

  public void setNextLevelAt(Integer nextLevelAt) {
    this.nextLevelAt = nextLevelAt;
  }


  public DestinyDestinyProgression progressToNextLevel(Integer progressToNextLevel) {
    this.progressToNextLevel = progressToNextLevel;
    return this;
  }

  /**
   * The amount of progression (i.e. \&quot;Experience\&quot;) needed to reach the next level of this Progression. Jeez, progression is such an overloaded word.
   * @return progressToNextLevel
   */
  @javax.annotation.Nullable
  public Integer getProgressToNextLevel() {
    return progressToNextLevel;
  }

  public void setProgressToNextLevel(Integer progressToNextLevel) {
    this.progressToNextLevel = progressToNextLevel;
  }


  public DestinyDestinyProgression progressionHash(Integer progressionHash) {
    this.progressionHash = progressionHash;
    return this;
  }

  /**
   * The hash identifier of the Progression in question. Use it to look up the DestinyProgressionDefinition in static data.
   * @return progressionHash
   */
  @javax.annotation.Nullable
  public Integer getProgressionHash() {
    return progressionHash;
  }

  public void setProgressionHash(Integer progressionHash) {
    this.progressionHash = progressionHash;
  }


  public DestinyDestinyProgression rewardItemStates(List<Integer> rewardItemStates) {
    this.rewardItemStates = rewardItemStates;
    return this;
  }

  public DestinyDestinyProgression addRewardItemStatesItem(Integer rewardItemStatesItem) {
    if (this.rewardItemStates == null) {
      this.rewardItemStates = new ArrayList<>();
    }
    this.rewardItemStates.add(rewardItemStatesItem);
    return this;
  }

  /**
   * Information about historical rewards for this progression, if there is any data for it.
   * @return rewardItemStates
   */
  @javax.annotation.Nullable
  public List<Integer> getRewardItemStates() {
    return rewardItemStates;
  }

  public void setRewardItemStates(List<Integer> rewardItemStates) {
    this.rewardItemStates = rewardItemStates;
  }


  public DestinyDestinyProgression seasonResets(List<DestinyDestinyProgressionResetEntry> seasonResets) {
    this.seasonResets = seasonResets;
    return this;
  }

  public DestinyDestinyProgression addSeasonResetsItem(DestinyDestinyProgressionResetEntry seasonResetsItem) {
    if (this.seasonResets == null) {
      this.seasonResets = new ArrayList<>();
    }
    this.seasonResets.add(seasonResetsItem);
    return this;
  }

  /**
   * Information about historical resets of this progression, if there is any data for it.
   * @return seasonResets
   */
  @javax.annotation.Nullable
  public List<DestinyDestinyProgressionResetEntry> getSeasonResets() {
    return seasonResets;
  }

  public void setSeasonResets(List<DestinyDestinyProgressionResetEntry> seasonResets) {
    this.seasonResets = seasonResets;
  }


  public DestinyDestinyProgression stepIndex(Integer stepIndex) {
    this.stepIndex = stepIndex;
    return this;
  }

  /**
   * Progressions define their levels in \&quot;steps\&quot;. Since the last step may be repeatable, the user may be at a higher level than the actual Step achieved in the progression. Not necessarily useful, but potentially interesting for those cruising the API. Relate this to the \&quot;steps\&quot; property of the DestinyProgression to see which step the user is on, if you care about that. (Note that this is Content Version dependent since it refers to indexes.)
   * @return stepIndex
   */
  @javax.annotation.Nullable
  public Integer getStepIndex() {
    return stepIndex;
  }

  public void setStepIndex(Integer stepIndex) {
    this.stepIndex = stepIndex;
  }


  public DestinyDestinyProgression weeklyLimit(Integer weeklyLimit) {
    this.weeklyLimit = weeklyLimit;
    return this;
  }

  /**
   * If this progression has a weekly limit, this is that limit.
   * @return weeklyLimit
   */
  @javax.annotation.Nullable
  public Integer getWeeklyLimit() {
    return weeklyLimit;
  }

  public void setWeeklyLimit(Integer weeklyLimit) {
    this.weeklyLimit = weeklyLimit;
  }


  public DestinyDestinyProgression weeklyProgress(Integer weeklyProgress) {
    this.weeklyProgress = weeklyProgress;
    return this;
  }

  /**
   * The amount of progress earned toward this progression in the current week.
   * @return weeklyProgress
   */
  @javax.annotation.Nullable
  public Integer getWeeklyProgress() {
    return weeklyProgress;
  }

  public void setWeeklyProgress(Integer weeklyProgress) {
    this.weeklyProgress = weeklyProgress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDestinyProgression destinyDestinyProgression = (DestinyDestinyProgression) o;
    return Objects.equals(this.currentProgress, destinyDestinyProgression.currentProgress) &&
        Objects.equals(this.currentResetCount, destinyDestinyProgression.currentResetCount) &&
        Objects.equals(this.dailyLimit, destinyDestinyProgression.dailyLimit) &&
        Objects.equals(this.dailyProgress, destinyDestinyProgression.dailyProgress) &&
        Objects.equals(this.level, destinyDestinyProgression.level) &&
        Objects.equals(this.levelCap, destinyDestinyProgression.levelCap) &&
        Objects.equals(this.nextLevelAt, destinyDestinyProgression.nextLevelAt) &&
        Objects.equals(this.progressToNextLevel, destinyDestinyProgression.progressToNextLevel) &&
        Objects.equals(this.progressionHash, destinyDestinyProgression.progressionHash) &&
        Objects.equals(this.rewardItemStates, destinyDestinyProgression.rewardItemStates) &&
        Objects.equals(this.seasonResets, destinyDestinyProgression.seasonResets) &&
        Objects.equals(this.stepIndex, destinyDestinyProgression.stepIndex) &&
        Objects.equals(this.weeklyLimit, destinyDestinyProgression.weeklyLimit) &&
        Objects.equals(this.weeklyProgress, destinyDestinyProgression.weeklyProgress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentProgress, currentResetCount, dailyLimit, dailyProgress, level, levelCap, nextLevelAt, progressToNextLevel, progressionHash, rewardItemStates, seasonResets, stepIndex, weeklyLimit, weeklyProgress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDestinyProgression {\n");
    sb.append("    currentProgress: ").append(toIndentedString(currentProgress)).append("\n");
    sb.append("    currentResetCount: ").append(toIndentedString(currentResetCount)).append("\n");
    sb.append("    dailyLimit: ").append(toIndentedString(dailyLimit)).append("\n");
    sb.append("    dailyProgress: ").append(toIndentedString(dailyProgress)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    levelCap: ").append(toIndentedString(levelCap)).append("\n");
    sb.append("    nextLevelAt: ").append(toIndentedString(nextLevelAt)).append("\n");
    sb.append("    progressToNextLevel: ").append(toIndentedString(progressToNextLevel)).append("\n");
    sb.append("    progressionHash: ").append(toIndentedString(progressionHash)).append("\n");
    sb.append("    rewardItemStates: ").append(toIndentedString(rewardItemStates)).append("\n");
    sb.append("    seasonResets: ").append(toIndentedString(seasonResets)).append("\n");
    sb.append("    stepIndex: ").append(toIndentedString(stepIndex)).append("\n");
    sb.append("    weeklyLimit: ").append(toIndentedString(weeklyLimit)).append("\n");
    sb.append("    weeklyProgress: ").append(toIndentedString(weeklyProgress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentProgress");
    openapiFields.add("currentResetCount");
    openapiFields.add("dailyLimit");
    openapiFields.add("dailyProgress");
    openapiFields.add("level");
    openapiFields.add("levelCap");
    openapiFields.add("nextLevelAt");
    openapiFields.add("progressToNextLevel");
    openapiFields.add("progressionHash");
    openapiFields.add("rewardItemStates");
    openapiFields.add("seasonResets");
    openapiFields.add("stepIndex");
    openapiFields.add("weeklyLimit");
    openapiFields.add("weeklyProgress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDestinyProgression
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDestinyProgression.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDestinyProgression is not found in the empty JSON string", DestinyDestinyProgression.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDestinyProgression.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDestinyProgression` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("rewardItemStates") != null && !jsonObj.get("rewardItemStates").isJsonNull() && !jsonObj.get("rewardItemStates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rewardItemStates` to be an array in the JSON string but got `%s`", jsonObj.get("rewardItemStates").toString()));
      }
      if (jsonObj.get("seasonResets") != null && !jsonObj.get("seasonResets").isJsonNull()) {
        JsonArray jsonArrayseasonResets = jsonObj.getAsJsonArray("seasonResets");
        if (jsonArrayseasonResets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seasonResets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seasonResets` to be an array in the JSON string but got `%s`", jsonObj.get("seasonResets").toString()));
          }

          // validate the optional field `seasonResets` (array)
          for (int i = 0; i < jsonArrayseasonResets.size(); i++) {
            DestinyDestinyProgressionResetEntry.validateJsonElement(jsonArrayseasonResets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDestinyProgression.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDestinyProgression' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDestinyProgression> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDestinyProgression.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDestinyProgression>() {
           @Override
           public void write(JsonWriter out, DestinyDestinyProgression value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDestinyProgression read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDestinyProgression given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDestinyProgression
   * @throws IOException if the JSON string is invalid with respect to DestinyDestinyProgression
   */
  public static DestinyDestinyProgression fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDestinyProgression.class);
  }

  /**
   * Convert an instance of DestinyDestinyProgression to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

