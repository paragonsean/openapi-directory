/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsDestinyFactionVendorDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * These definitions represent Factions in the game. Factions have ended up unilaterally being related to Vendors that represent them, but that need not necessarily be the case.  A Faction is really just an entity that has a related progression for which a character can gain experience. In Destiny 1, Dead Orbit was an example of a Faction: there happens to be a Vendor that represents Dead Orbit (and indeed, DestinyVendorDefinition.factionHash defines to this relationship), but Dead Orbit could theoretically exist without the Vendor that provides rewards.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyFactionDefinition {
  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_PROGRESSION_HASH = "progressionHash";
  @SerializedName(SERIALIZED_NAME_PROGRESSION_HASH)
  private Integer progressionHash;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_REWARD_ITEM_HASH = "rewardItemHash";
  @SerializedName(SERIALIZED_NAME_REWARD_ITEM_HASH)
  private Integer rewardItemHash;

  public static final String SERIALIZED_NAME_REWARD_VENDOR_HASH = "rewardVendorHash";
  @SerializedName(SERIALIZED_NAME_REWARD_VENDOR_HASH)
  private Integer rewardVendorHash;

  public static final String SERIALIZED_NAME_TOKEN_VALUES = "tokenValues";
  @SerializedName(SERIALIZED_NAME_TOKEN_VALUES)
  private Map<String, Integer> tokenValues = new HashMap<>();

  public static final String SERIALIZED_NAME_VENDORS = "vendors";
  @SerializedName(SERIALIZED_NAME_VENDORS)
  private List<DestinyDefinitionsDestinyFactionVendorDefinition> vendors = new ArrayList<>();

  public DestinyDefinitionsDestinyFactionDefinition() {
  }

  public DestinyDefinitionsDestinyFactionDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinyFactionDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDestinyFactionDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinyFactionDefinition progressionHash(Integer progressionHash) {
    this.progressionHash = progressionHash;
    return this;
  }

  /**
   * The hash identifier for the DestinyProgressionDefinition that indicates the character&#39;s relationship with this faction in terms of experience and levels.
   * @return progressionHash
   */
  @javax.annotation.Nullable
  public Integer getProgressionHash() {
    return progressionHash;
  }

  public void setProgressionHash(Integer progressionHash) {
    this.progressionHash = progressionHash;
  }


  public DestinyDefinitionsDestinyFactionDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsDestinyFactionDefinition rewardItemHash(Integer rewardItemHash) {
    this.rewardItemHash = rewardItemHash;
    return this;
  }

  /**
   * The faction reward item hash, usually an engram.
   * @return rewardItemHash
   */
  @javax.annotation.Nullable
  public Integer getRewardItemHash() {
    return rewardItemHash;
  }

  public void setRewardItemHash(Integer rewardItemHash) {
    this.rewardItemHash = rewardItemHash;
  }


  public DestinyDefinitionsDestinyFactionDefinition rewardVendorHash(Integer rewardVendorHash) {
    this.rewardVendorHash = rewardVendorHash;
    return this;
  }

  /**
   * The faction reward vendor hash, used for faction engram previews.
   * @return rewardVendorHash
   */
  @javax.annotation.Nullable
  public Integer getRewardVendorHash() {
    return rewardVendorHash;
  }

  public void setRewardVendorHash(Integer rewardVendorHash) {
    this.rewardVendorHash = rewardVendorHash;
  }


  public DestinyDefinitionsDestinyFactionDefinition tokenValues(Map<String, Integer> tokenValues) {
    this.tokenValues = tokenValues;
    return this;
  }

  public DestinyDefinitionsDestinyFactionDefinition putTokenValuesItem(String key, Integer tokenValuesItem) {
    if (this.tokenValues == null) {
      this.tokenValues = new HashMap<>();
    }
    this.tokenValues.put(key, tokenValuesItem);
    return this;
  }

  /**
   * The faction token item hashes, and their respective progression values.
   * @return tokenValues
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getTokenValues() {
    return tokenValues;
  }

  public void setTokenValues(Map<String, Integer> tokenValues) {
    this.tokenValues = tokenValues;
  }


  public DestinyDefinitionsDestinyFactionDefinition vendors(List<DestinyDefinitionsDestinyFactionVendorDefinition> vendors) {
    this.vendors = vendors;
    return this;
  }

  public DestinyDefinitionsDestinyFactionDefinition addVendorsItem(DestinyDefinitionsDestinyFactionVendorDefinition vendorsItem) {
    if (this.vendors == null) {
      this.vendors = new ArrayList<>();
    }
    this.vendors.add(vendorsItem);
    return this;
  }

  /**
   * List of vendors that are associated with this faction. The last vendor that passes the unlock flag checks is the one that should be shown.
   * @return vendors
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyFactionVendorDefinition> getVendors() {
    return vendors;
  }

  public void setVendors(List<DestinyDefinitionsDestinyFactionVendorDefinition> vendors) {
    this.vendors = vendors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyFactionDefinition destinyDefinitionsDestinyFactionDefinition = (DestinyDefinitionsDestinyFactionDefinition) o;
    return Objects.equals(this.displayProperties, destinyDefinitionsDestinyFactionDefinition.displayProperties) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyFactionDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinyFactionDefinition.index) &&
        Objects.equals(this.progressionHash, destinyDefinitionsDestinyFactionDefinition.progressionHash) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyFactionDefinition.redacted) &&
        Objects.equals(this.rewardItemHash, destinyDefinitionsDestinyFactionDefinition.rewardItemHash) &&
        Objects.equals(this.rewardVendorHash, destinyDefinitionsDestinyFactionDefinition.rewardVendorHash) &&
        Objects.equals(this.tokenValues, destinyDefinitionsDestinyFactionDefinition.tokenValues) &&
        Objects.equals(this.vendors, destinyDefinitionsDestinyFactionDefinition.vendors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayProperties, hash, index, progressionHash, redacted, rewardItemHash, rewardVendorHash, tokenValues, vendors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyFactionDefinition {\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    progressionHash: ").append(toIndentedString(progressionHash)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    rewardItemHash: ").append(toIndentedString(rewardItemHash)).append("\n");
    sb.append("    rewardVendorHash: ").append(toIndentedString(rewardVendorHash)).append("\n");
    sb.append("    tokenValues: ").append(toIndentedString(tokenValues)).append("\n");
    sb.append("    vendors: ").append(toIndentedString(vendors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayProperties");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("progressionHash");
    openapiFields.add("redacted");
    openapiFields.add("rewardItemHash");
    openapiFields.add("rewardVendorHash");
    openapiFields.add("tokenValues");
    openapiFields.add("vendors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyFactionDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyFactionDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyFactionDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyFactionDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyFactionDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyFactionDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      if (jsonObj.get("vendors") != null && !jsonObj.get("vendors").isJsonNull()) {
        JsonArray jsonArrayvendors = jsonObj.getAsJsonArray("vendors");
        if (jsonArrayvendors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vendors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vendors` to be an array in the JSON string but got `%s`", jsonObj.get("vendors").toString()));
          }

          // validate the optional field `vendors` (array)
          for (int i = 0; i < jsonArrayvendors.size(); i++) {
            DestinyDefinitionsDestinyFactionVendorDefinition.validateJsonElement(jsonArrayvendors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyFactionDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyFactionDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyFactionDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyFactionDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyFactionDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyFactionDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyFactionDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyFactionDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyFactionDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyFactionDefinition
   */
  public static DestinyDefinitionsDestinyFactionDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyFactionDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyFactionDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

