/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyLocationReleaseDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A \&quot;Location\&quot; is a sort of shortcut for referring to a specific combination of Activity, Destination, Place, and even Bubble or NavPoint within a space.  Most of this data isn&#39;t intrinsically useful to us, but Objectives refer to locations, and through that we can at least infer the Activity, Destination, and Place being referred to by the Objective.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyLocationDefinition {
  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_LOCATION_RELEASES = "locationReleases";
  @SerializedName(SERIALIZED_NAME_LOCATION_RELEASES)
  private List<DestinyDefinitionsDestinyLocationReleaseDefinition> locationReleases = new ArrayList<>();

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public static final String SERIALIZED_NAME_VENDOR_HASH = "vendorHash";
  @SerializedName(SERIALIZED_NAME_VENDOR_HASH)
  private Integer vendorHash;

  public DestinyDefinitionsDestinyLocationDefinition() {
  }

  public DestinyDefinitionsDestinyLocationDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDestinyLocationDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinyLocationDefinition locationReleases(List<DestinyDefinitionsDestinyLocationReleaseDefinition> locationReleases) {
    this.locationReleases = locationReleases;
    return this;
  }

  public DestinyDefinitionsDestinyLocationDefinition addLocationReleasesItem(DestinyDefinitionsDestinyLocationReleaseDefinition locationReleasesItem) {
    if (this.locationReleases == null) {
      this.locationReleases = new ArrayList<>();
    }
    this.locationReleases.add(locationReleasesItem);
    return this;
  }

  /**
   * A Location may refer to different specific spots in the world based on the world&#39;s current state. This is a list of those potential spots, and the data we can use at runtime to determine which one of the spots is the currently valid one.
   * @return locationReleases
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsDestinyLocationReleaseDefinition> getLocationReleases() {
    return locationReleases;
  }

  public void setLocationReleases(List<DestinyDefinitionsDestinyLocationReleaseDefinition> locationReleases) {
    this.locationReleases = locationReleases;
  }


  public DestinyDefinitionsDestinyLocationDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }


  public DestinyDefinitionsDestinyLocationDefinition vendorHash(Integer vendorHash) {
    this.vendorHash = vendorHash;
    return this;
  }

  /**
   * If the location has a Vendor on it, this is the hash identifier for that Vendor. Look them up with DestinyVendorDefinition.
   * @return vendorHash
   */
  @javax.annotation.Nullable
  public Integer getVendorHash() {
    return vendorHash;
  }

  public void setVendorHash(Integer vendorHash) {
    this.vendorHash = vendorHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyLocationDefinition destinyDefinitionsDestinyLocationDefinition = (DestinyDefinitionsDestinyLocationDefinition) o;
    return Objects.equals(this.hash, destinyDefinitionsDestinyLocationDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinyLocationDefinition.index) &&
        Objects.equals(this.locationReleases, destinyDefinitionsDestinyLocationDefinition.locationReleases) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyLocationDefinition.redacted) &&
        Objects.equals(this.vendorHash, destinyDefinitionsDestinyLocationDefinition.vendorHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hash, index, locationReleases, redacted, vendorHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyLocationDefinition {\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    locationReleases: ").append(toIndentedString(locationReleases)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("    vendorHash: ").append(toIndentedString(vendorHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("locationReleases");
    openapiFields.add("redacted");
    openapiFields.add("vendorHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyLocationDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyLocationDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyLocationDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyLocationDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyLocationDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyLocationDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("locationReleases") != null && !jsonObj.get("locationReleases").isJsonNull()) {
        JsonArray jsonArraylocationReleases = jsonObj.getAsJsonArray("locationReleases");
        if (jsonArraylocationReleases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locationReleases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locationReleases` to be an array in the JSON string but got `%s`", jsonObj.get("locationReleases").toString()));
          }

          // validate the optional field `locationReleases` (array)
          for (int i = 0; i < jsonArraylocationReleases.size(); i++) {
            DestinyDefinitionsDestinyLocationReleaseDefinition.validateJsonElement(jsonArraylocationReleases.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyLocationDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyLocationDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyLocationDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyLocationDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyLocationDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyLocationDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyLocationDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyLocationDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyLocationDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyLocationDefinition
   */
  public static DestinyDefinitionsDestinyLocationDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyLocationDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyLocationDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

