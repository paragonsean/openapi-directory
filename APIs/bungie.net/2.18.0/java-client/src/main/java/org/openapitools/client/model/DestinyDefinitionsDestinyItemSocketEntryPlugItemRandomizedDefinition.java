/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinyDefinitionsDestinyPlugItemCraftingRequirements;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition {
  public static final String SERIALIZED_NAME_CRAFTING_REQUIREMENTS = "craftingRequirements";
  @SerializedName(SERIALIZED_NAME_CRAFTING_REQUIREMENTS)
  private DestinyDefinitionsDestinyPlugItemCraftingRequirements craftingRequirements;

  public static final String SERIALIZED_NAME_CURRENTLY_CAN_ROLL = "currentlyCanRoll";
  @SerializedName(SERIALIZED_NAME_CURRENTLY_CAN_ROLL)
  private Boolean currentlyCanRoll;

  public static final String SERIALIZED_NAME_PLUG_ITEM_HASH = "plugItemHash";
  @SerializedName(SERIALIZED_NAME_PLUG_ITEM_HASH)
  private Integer plugItemHash;

  public DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition() {
  }

  public DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition craftingRequirements(DestinyDefinitionsDestinyPlugItemCraftingRequirements craftingRequirements) {
    this.craftingRequirements = craftingRequirements;
    return this;
  }

  /**
   * Get craftingRequirements
   * @return craftingRequirements
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsDestinyPlugItemCraftingRequirements getCraftingRequirements() {
    return craftingRequirements;
  }

  public void setCraftingRequirements(DestinyDefinitionsDestinyPlugItemCraftingRequirements craftingRequirements) {
    this.craftingRequirements = craftingRequirements;
  }


  public DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition currentlyCanRoll(Boolean currentlyCanRoll) {
    this.currentlyCanRoll = currentlyCanRoll;
    return this;
  }

  /**
   * Indicates if the plug can be rolled on the current version of the item. For example, older versions of weapons may have plug rolls that are no longer possible on the current versions.
   * @return currentlyCanRoll
   */
  @javax.annotation.Nullable
  public Boolean getCurrentlyCanRoll() {
    return currentlyCanRoll;
  }

  public void setCurrentlyCanRoll(Boolean currentlyCanRoll) {
    this.currentlyCanRoll = currentlyCanRoll;
  }


  public DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition plugItemHash(Integer plugItemHash) {
    this.plugItemHash = plugItemHash;
    return this;
  }

  /**
   * The hash identifier of a DestinyInventoryItemDefinition representing the plug that can be inserted.
   * @return plugItemHash
   */
  @javax.annotation.Nullable
  public Integer getPlugItemHash() {
    return plugItemHash;
  }

  public void setPlugItemHash(Integer plugItemHash) {
    this.plugItemHash = plugItemHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition destinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition = (DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition) o;
    return Objects.equals(this.craftingRequirements, destinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition.craftingRequirements) &&
        Objects.equals(this.currentlyCanRoll, destinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition.currentlyCanRoll) &&
        Objects.equals(this.plugItemHash, destinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition.plugItemHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(craftingRequirements, currentlyCanRoll, plugItemHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition {\n");
    sb.append("    craftingRequirements: ").append(toIndentedString(craftingRequirements)).append("\n");
    sb.append("    currentlyCanRoll: ").append(toIndentedString(currentlyCanRoll)).append("\n");
    sb.append("    plugItemHash: ").append(toIndentedString(plugItemHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("craftingRequirements");
    openapiFields.add("currentlyCanRoll");
    openapiFields.add("plugItemHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `craftingRequirements`
      if (jsonObj.get("craftingRequirements") != null && !jsonObj.get("craftingRequirements").isJsonNull()) {
        DestinyDefinitionsDestinyPlugItemCraftingRequirements.validateJsonElement(jsonObj.get("craftingRequirements"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition
   */
  public static DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

