/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The status of a given item&#39;s socket. (which plug is inserted, if any: whether it is enabled, what \&quot;reusable\&quot; plugs can be inserted, etc...)  If I had it to do over, this would probably have a DestinyItemPlug representing the inserted item instead of most of these properties. :shrug:
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyEntitiesItemsDestinyItemSocketState {
  public static final String SERIALIZED_NAME_ENABLE_FAIL_INDEXES = "enableFailIndexes";
  @SerializedName(SERIALIZED_NAME_ENABLE_FAIL_INDEXES)
  private List<Integer> enableFailIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_IS_VISIBLE = "isVisible";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE)
  private Boolean isVisible;

  public static final String SERIALIZED_NAME_PLUG_HASH = "plugHash";
  @SerializedName(SERIALIZED_NAME_PLUG_HASH)
  private Integer plugHash;

  public DestinyEntitiesItemsDestinyItemSocketState() {
  }

  public DestinyEntitiesItemsDestinyItemSocketState enableFailIndexes(List<Integer> enableFailIndexes) {
    this.enableFailIndexes = enableFailIndexes;
    return this;
  }

  public DestinyEntitiesItemsDestinyItemSocketState addEnableFailIndexesItem(Integer enableFailIndexesItem) {
    if (this.enableFailIndexes == null) {
      this.enableFailIndexes = new ArrayList<>();
    }
    this.enableFailIndexes.add(enableFailIndexesItem);
    return this;
  }

  /**
   * If a plug is inserted but not enabled, this will be populated with indexes into the plug item definition&#39;s plug.enabledRules property, so that you can show the reasons why it is not enabled.
   * @return enableFailIndexes
   */
  @javax.annotation.Nullable
  public List<Integer> getEnableFailIndexes() {
    return enableFailIndexes;
  }

  public void setEnableFailIndexes(List<Integer> enableFailIndexes) {
    this.enableFailIndexes = enableFailIndexes;
  }


  public DestinyEntitiesItemsDestinyItemSocketState isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Even if a plug is inserted, it doesn&#39;t mean it&#39;s enabled.  This flag indicates whether the plug is active and providing its benefits.
   * @return isEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public DestinyEntitiesItemsDestinyItemSocketState isVisible(Boolean isVisible) {
    this.isVisible = isVisible;
    return this;
  }

  /**
   * A plug may theoretically provide benefits but not be visible - for instance, some older items use a plug&#39;s damage type perk to modify their own damage type. These, though they are not visible, still affect the item. This field indicates that state.  An invisible plug, while it provides benefits if it is Enabled, cannot be directly modified by the user.
   * @return isVisible
   */
  @javax.annotation.Nullable
  public Boolean getIsVisible() {
    return isVisible;
  }

  public void setIsVisible(Boolean isVisible) {
    this.isVisible = isVisible;
  }


  public DestinyEntitiesItemsDestinyItemSocketState plugHash(Integer plugHash) {
    this.plugHash = plugHash;
    return this;
  }

  /**
   * The currently active plug, if any.  Note that, because all plugs are statically defined, its effect on stats and perks can be statically determined using the plug item&#39;s definition. The stats and perks can be taken at face value on the plug item as the stats and perks it will provide to the user/item.
   * @return plugHash
   */
  @javax.annotation.Nullable
  public Integer getPlugHash() {
    return plugHash;
  }

  public void setPlugHash(Integer plugHash) {
    this.plugHash = plugHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyEntitiesItemsDestinyItemSocketState destinyEntitiesItemsDestinyItemSocketState = (DestinyEntitiesItemsDestinyItemSocketState) o;
    return Objects.equals(this.enableFailIndexes, destinyEntitiesItemsDestinyItemSocketState.enableFailIndexes) &&
        Objects.equals(this.isEnabled, destinyEntitiesItemsDestinyItemSocketState.isEnabled) &&
        Objects.equals(this.isVisible, destinyEntitiesItemsDestinyItemSocketState.isVisible) &&
        Objects.equals(this.plugHash, destinyEntitiesItemsDestinyItemSocketState.plugHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableFailIndexes, isEnabled, isVisible, plugHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyEntitiesItemsDestinyItemSocketState {\n");
    sb.append("    enableFailIndexes: ").append(toIndentedString(enableFailIndexes)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    plugHash: ").append(toIndentedString(plugHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableFailIndexes");
    openapiFields.add("isEnabled");
    openapiFields.add("isVisible");
    openapiFields.add("plugHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyEntitiesItemsDestinyItemSocketState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyEntitiesItemsDestinyItemSocketState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyEntitiesItemsDestinyItemSocketState is not found in the empty JSON string", DestinyEntitiesItemsDestinyItemSocketState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyEntitiesItemsDestinyItemSocketState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyEntitiesItemsDestinyItemSocketState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("enableFailIndexes") != null && !jsonObj.get("enableFailIndexes").isJsonNull() && !jsonObj.get("enableFailIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enableFailIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("enableFailIndexes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyEntitiesItemsDestinyItemSocketState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyEntitiesItemsDestinyItemSocketState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyEntitiesItemsDestinyItemSocketState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyEntitiesItemsDestinyItemSocketState.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyEntitiesItemsDestinyItemSocketState>() {
           @Override
           public void write(JsonWriter out, DestinyEntitiesItemsDestinyItemSocketState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyEntitiesItemsDestinyItemSocketState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyEntitiesItemsDestinyItemSocketState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyEntitiesItemsDestinyItemSocketState
   * @throws IOException if the JSON string is invalid with respect to DestinyEntitiesItemsDestinyItemSocketState
   */
  public static DestinyEntitiesItemsDestinyItemSocketState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyEntitiesItemsDestinyItemSocketState.class);
  }

  /**
   * Convert an instance of DestinyEntitiesItemsDestinyItemSocketState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

