/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The list entry view for trending items. Returns just enough to show the item on the trending page.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrendingTrendingEntry {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private Integer entityType;

  public static final String SERIALIZED_NAME_FEATURE_IMAGE = "featureImage";
  @SerializedName(SERIALIZED_NAME_FEATURE_IMAGE)
  private String featureImage;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_IS_FEATURED = "isFeatured";
  @SerializedName(SERIALIZED_NAME_IS_FEATURED)
  private Boolean isFeatured;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<TrendingTrendingEntry> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_MP4_VIDEO = "mp4Video";
  @SerializedName(SERIALIZED_NAME_MP4_VIDEO)
  private String mp4Video;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_TAGLINE = "tagline";
  @SerializedName(SERIALIZED_NAME_TAGLINE)
  private String tagline;

  public static final String SERIALIZED_NAME_WEBM_VIDEO = "webmVideo";
  @SerializedName(SERIALIZED_NAME_WEBM_VIDEO)
  private String webmVideo;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public TrendingTrendingEntry() {
  }

  public TrendingTrendingEntry creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * If the entry has a date at which it was created, this is that date.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public TrendingTrendingEntry displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The localized \&quot;display name/article title/&#39;primary localized identifier&#39;\&quot; of the entity.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public TrendingTrendingEntry endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public TrendingTrendingEntry entityType(Integer entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * An enum - unfortunately - dictating all of the possible kinds of trending items that you might get in your result set, in case you want to do custom rendering or call to get the details of the item.
   * @return entityType
   */
  @javax.annotation.Nullable
  public Integer getEntityType() {
    return entityType;
  }

  public void setEntityType(Integer entityType) {
    this.entityType = entityType;
  }


  public TrendingTrendingEntry featureImage(String featureImage) {
    this.featureImage = featureImage;
    return this;
  }

  /**
   * If isFeatured, this image will be populated with whatever the featured image is. Note that this will likely be a very large image, so don&#39;t use it all the time.
   * @return featureImage
   */
  @javax.annotation.Nullable
  public String getFeatureImage() {
    return featureImage;
  }

  public void setFeatureImage(String featureImage) {
    this.featureImage = featureImage;
  }


  public TrendingTrendingEntry identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * We don&#39;t know whether the identifier will be a string, a uint, or a long... so we&#39;re going to cast it all to a string. But either way, we need any trending item created to have a single unique identifier for its type.
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public TrendingTrendingEntry image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public TrendingTrendingEntry isFeatured(Boolean isFeatured) {
    this.isFeatured = isFeatured;
    return this;
  }

  /**
   * Get isFeatured
   * @return isFeatured
   */
  @javax.annotation.Nullable
  public Boolean getIsFeatured() {
    return isFeatured;
  }

  public void setIsFeatured(Boolean isFeatured) {
    this.isFeatured = isFeatured;
  }


  public TrendingTrendingEntry items(List<TrendingTrendingEntry> items) {
    this.items = items;
    return this;
  }

  public TrendingTrendingEntry addItemsItem(TrendingTrendingEntry itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * If the item is of entityType TrendingEntryType.Container, it may have items - also Trending Entries - contained within it. This is the ordered list of those to display under the Container&#39;s header.
   * @return items
   */
  @javax.annotation.Nullable
  public List<TrendingTrendingEntry> getItems() {
    return items;
  }

  public void setItems(List<TrendingTrendingEntry> items) {
    this.items = items;
  }


  public TrendingTrendingEntry link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public TrendingTrendingEntry mp4Video(String mp4Video) {
    this.mp4Video = mp4Video;
    return this;
  }

  /**
   * If this is populated, the entry has a related MP4 video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
   * @return mp4Video
   */
  @javax.annotation.Nullable
  public String getMp4Video() {
    return mp4Video;
  }

  public void setMp4Video(String mp4Video) {
    this.mp4Video = mp4Video;
  }


  public TrendingTrendingEntry startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public TrendingTrendingEntry tagline(String tagline) {
    this.tagline = tagline;
    return this;
  }

  /**
   * If the entity has a localized tagline/subtitle/motto/whatever, that is found here.
   * @return tagline
   */
  @javax.annotation.Nullable
  public String getTagline() {
    return tagline;
  }

  public void setTagline(String tagline) {
    this.tagline = tagline;
  }


  public TrendingTrendingEntry webmVideo(String webmVideo) {
    this.webmVideo = webmVideo;
    return this;
  }

  /**
   * If this is populated, the entry has a related WebM video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
   * @return webmVideo
   */
  @javax.annotation.Nullable
  public String getWebmVideo() {
    return webmVideo;
  }

  public void setWebmVideo(String webmVideo) {
    this.webmVideo = webmVideo;
  }


  public TrendingTrendingEntry weight(Double weight) {
    this.weight = weight;
    return this;
  }

  /**
   * The weighted score of this trending item.
   * @return weight
   */
  @javax.annotation.Nullable
  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrendingTrendingEntry trendingTrendingEntry = (TrendingTrendingEntry) o;
    return Objects.equals(this.creationDate, trendingTrendingEntry.creationDate) &&
        Objects.equals(this.displayName, trendingTrendingEntry.displayName) &&
        Objects.equals(this.endDate, trendingTrendingEntry.endDate) &&
        Objects.equals(this.entityType, trendingTrendingEntry.entityType) &&
        Objects.equals(this.featureImage, trendingTrendingEntry.featureImage) &&
        Objects.equals(this.identifier, trendingTrendingEntry.identifier) &&
        Objects.equals(this.image, trendingTrendingEntry.image) &&
        Objects.equals(this.isFeatured, trendingTrendingEntry.isFeatured) &&
        Objects.equals(this.items, trendingTrendingEntry.items) &&
        Objects.equals(this.link, trendingTrendingEntry.link) &&
        Objects.equals(this.mp4Video, trendingTrendingEntry.mp4Video) &&
        Objects.equals(this.startDate, trendingTrendingEntry.startDate) &&
        Objects.equals(this.tagline, trendingTrendingEntry.tagline) &&
        Objects.equals(this.webmVideo, trendingTrendingEntry.webmVideo) &&
        Objects.equals(this.weight, trendingTrendingEntry.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, displayName, endDate, entityType, featureImage, identifier, image, isFeatured, items, link, mp4Video, startDate, tagline, webmVideo, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrendingTrendingEntry {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    featureImage: ").append(toIndentedString(featureImage)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    isFeatured: ").append(toIndentedString(isFeatured)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    mp4Video: ").append(toIndentedString(mp4Video)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    tagline: ").append(toIndentedString(tagline)).append("\n");
    sb.append("    webmVideo: ").append(toIndentedString(webmVideo)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("displayName");
    openapiFields.add("endDate");
    openapiFields.add("entityType");
    openapiFields.add("featureImage");
    openapiFields.add("identifier");
    openapiFields.add("image");
    openapiFields.add("isFeatured");
    openapiFields.add("items");
    openapiFields.add("link");
    openapiFields.add("mp4Video");
    openapiFields.add("startDate");
    openapiFields.add("tagline");
    openapiFields.add("webmVideo");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrendingTrendingEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrendingTrendingEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrendingTrendingEntry is not found in the empty JSON string", TrendingTrendingEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrendingTrendingEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrendingTrendingEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("featureImage") != null && !jsonObj.get("featureImage").isJsonNull()) && !jsonObj.get("featureImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featureImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featureImage").toString()));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            TrendingTrendingEntry.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("mp4Video") != null && !jsonObj.get("mp4Video").isJsonNull()) && !jsonObj.get("mp4Video").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mp4Video` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mp4Video").toString()));
      }
      if ((jsonObj.get("tagline") != null && !jsonObj.get("tagline").isJsonNull()) && !jsonObj.get("tagline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagline").toString()));
      }
      if ((jsonObj.get("webmVideo") != null && !jsonObj.get("webmVideo").isJsonNull()) && !jsonObj.get("webmVideo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webmVideo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webmVideo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrendingTrendingEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrendingTrendingEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrendingTrendingEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrendingTrendingEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<TrendingTrendingEntry>() {
           @Override
           public void write(JsonWriter out, TrendingTrendingEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrendingTrendingEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrendingTrendingEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrendingTrendingEntry
   * @throws IOException if the JSON string is invalid with respect to TrendingTrendingEntry
   */
  public static TrendingTrendingEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrendingTrendingEntry.class);
  }

  /**
   * Convert an instance of TrendingTrendingEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

