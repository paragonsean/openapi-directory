/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyQuestsDestinyObjectiveProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinyComponentsKiosksDestinyKioskItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyComponentsKiosksDestinyKioskItem {
  public static final String SERIALIZED_NAME_CAN_ACQUIRE = "canAcquire";
  @SerializedName(SERIALIZED_NAME_CAN_ACQUIRE)
  private Boolean canAcquire;

  public static final String SERIALIZED_NAME_FAILURE_INDEXES = "failureIndexes";
  @SerializedName(SERIALIZED_NAME_FAILURE_INDEXES)
  private List<Integer> failureIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_FLAVOR_OBJECTIVE = "flavorObjective";
  @SerializedName(SERIALIZED_NAME_FLAVOR_OBJECTIVE)
  private DestinyQuestsDestinyObjectiveProgress flavorObjective;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public DestinyComponentsKiosksDestinyKioskItem() {
  }

  public DestinyComponentsKiosksDestinyKioskItem canAcquire(Boolean canAcquire) {
    this.canAcquire = canAcquire;
    return this;
  }

  /**
   * If true, the user can not only see the item, but they can acquire it. It is possible that a user can see a kiosk item and not be able to acquire it.
   * @return canAcquire
   */
  @javax.annotation.Nullable
  public Boolean getCanAcquire() {
    return canAcquire;
  }

  public void setCanAcquire(Boolean canAcquire) {
    this.canAcquire = canAcquire;
  }


  public DestinyComponentsKiosksDestinyKioskItem failureIndexes(List<Integer> failureIndexes) {
    this.failureIndexes = failureIndexes;
    return this;
  }

  public DestinyComponentsKiosksDestinyKioskItem addFailureIndexesItem(Integer failureIndexesItem) {
    if (this.failureIndexes == null) {
      this.failureIndexes = new ArrayList<>();
    }
    this.failureIndexes.add(failureIndexesItem);
    return this;
  }

  /**
   * Indexes into failureStrings for the Vendor, indicating the reasons why it failed if any.
   * @return failureIndexes
   */
  @javax.annotation.Nullable
  public List<Integer> getFailureIndexes() {
    return failureIndexes;
  }

  public void setFailureIndexes(List<Integer> failureIndexes) {
    this.failureIndexes = failureIndexes;
  }


  public DestinyComponentsKiosksDestinyKioskItem flavorObjective(DestinyQuestsDestinyObjectiveProgress flavorObjective) {
    this.flavorObjective = flavorObjective;
    return this;
  }

  /**
   * I may regret naming it this way - but this represents when an item has an objective that doesn&#39;t serve a beneficial purpose, but rather is used for \&quot;flavor\&quot; or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.
   * @return flavorObjective
   */
  @javax.annotation.Nullable
  public DestinyQuestsDestinyObjectiveProgress getFlavorObjective() {
    return flavorObjective;
  }

  public void setFlavorObjective(DestinyQuestsDestinyObjectiveProgress flavorObjective) {
    this.flavorObjective = flavorObjective;
  }


  public DestinyComponentsKiosksDestinyKioskItem index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the item in the related DestinyVendorDefintion&#39;s itemList property, representing the sale.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyComponentsKiosksDestinyKioskItem destinyComponentsKiosksDestinyKioskItem = (DestinyComponentsKiosksDestinyKioskItem) o;
    return Objects.equals(this.canAcquire, destinyComponentsKiosksDestinyKioskItem.canAcquire) &&
        Objects.equals(this.failureIndexes, destinyComponentsKiosksDestinyKioskItem.failureIndexes) &&
        Objects.equals(this.flavorObjective, destinyComponentsKiosksDestinyKioskItem.flavorObjective) &&
        Objects.equals(this.index, destinyComponentsKiosksDestinyKioskItem.index);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canAcquire, failureIndexes, flavorObjective, index);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyComponentsKiosksDestinyKioskItem {\n");
    sb.append("    canAcquire: ").append(toIndentedString(canAcquire)).append("\n");
    sb.append("    failureIndexes: ").append(toIndentedString(failureIndexes)).append("\n");
    sb.append("    flavorObjective: ").append(toIndentedString(flavorObjective)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canAcquire");
    openapiFields.add("failureIndexes");
    openapiFields.add("flavorObjective");
    openapiFields.add("index");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyComponentsKiosksDestinyKioskItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyComponentsKiosksDestinyKioskItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyComponentsKiosksDestinyKioskItem is not found in the empty JSON string", DestinyComponentsKiosksDestinyKioskItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyComponentsKiosksDestinyKioskItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyComponentsKiosksDestinyKioskItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("failureIndexes") != null && !jsonObj.get("failureIndexes").isJsonNull() && !jsonObj.get("failureIndexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("failureIndexes").toString()));
      }
      // validate the optional field `flavorObjective`
      if (jsonObj.get("flavorObjective") != null && !jsonObj.get("flavorObjective").isJsonNull()) {
        DestinyQuestsDestinyObjectiveProgress.validateJsonElement(jsonObj.get("flavorObjective"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyComponentsKiosksDestinyKioskItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyComponentsKiosksDestinyKioskItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyComponentsKiosksDestinyKioskItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyComponentsKiosksDestinyKioskItem.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyComponentsKiosksDestinyKioskItem>() {
           @Override
           public void write(JsonWriter out, DestinyComponentsKiosksDestinyKioskItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyComponentsKiosksDestinyKioskItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyComponentsKiosksDestinyKioskItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyComponentsKiosksDestinyKioskItem
   * @throws IOException if the JSON string is invalid with respect to DestinyComponentsKiosksDestinyKioskItem
   */
  public static DestinyComponentsKiosksDestinyKioskItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyComponentsKiosksDestinyKioskItem.class);
  }

  /**
   * Convert an instance of DestinyComponentsKiosksDestinyKioskItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

