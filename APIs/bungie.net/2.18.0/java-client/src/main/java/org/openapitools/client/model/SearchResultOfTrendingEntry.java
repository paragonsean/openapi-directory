/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QueriesPagedQuery;
import org.openapitools.client.model.TrendingTrendingEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchResultOfTrendingEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchResultOfTrendingEntry {
  public static final String SERIALIZED_NAME_HAS_MORE = "hasMore";
  @SerializedName(SERIALIZED_NAME_HAS_MORE)
  private Boolean hasMore;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private QueriesPagedQuery query;

  public static final String SERIALIZED_NAME_REPLACEMENT_CONTINUATION_TOKEN = "replacementContinuationToken";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT_CONTINUATION_TOKEN)
  private String replacementContinuationToken;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<TrendingTrendingEntry> results = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_RESULTS = "totalResults";
  @SerializedName(SERIALIZED_NAME_TOTAL_RESULTS)
  private Integer totalResults;

  public static final String SERIALIZED_NAME_USE_TOTAL_RESULTS = "useTotalResults";
  @SerializedName(SERIALIZED_NAME_USE_TOTAL_RESULTS)
  private Boolean useTotalResults;

  public SearchResultOfTrendingEntry() {
  }

  public SearchResultOfTrendingEntry hasMore(Boolean hasMore) {
    this.hasMore = hasMore;
    return this;
  }

  /**
   * Get hasMore
   * @return hasMore
   */
  @javax.annotation.Nullable
  public Boolean getHasMore() {
    return hasMore;
  }

  public void setHasMore(Boolean hasMore) {
    this.hasMore = hasMore;
  }


  public SearchResultOfTrendingEntry query(QueriesPagedQuery query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public QueriesPagedQuery getQuery() {
    return query;
  }

  public void setQuery(QueriesPagedQuery query) {
    this.query = query;
  }


  public SearchResultOfTrendingEntry replacementContinuationToken(String replacementContinuationToken) {
    this.replacementContinuationToken = replacementContinuationToken;
    return this;
  }

  /**
   * Get replacementContinuationToken
   * @return replacementContinuationToken
   */
  @javax.annotation.Nullable
  public String getReplacementContinuationToken() {
    return replacementContinuationToken;
  }

  public void setReplacementContinuationToken(String replacementContinuationToken) {
    this.replacementContinuationToken = replacementContinuationToken;
  }


  public SearchResultOfTrendingEntry results(List<TrendingTrendingEntry> results) {
    this.results = results;
    return this;
  }

  public SearchResultOfTrendingEntry addResultsItem(TrendingTrendingEntry resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

  /**
   * Get results
   * @return results
   */
  @javax.annotation.Nullable
  public List<TrendingTrendingEntry> getResults() {
    return results;
  }

  public void setResults(List<TrendingTrendingEntry> results) {
    this.results = results;
  }


  public SearchResultOfTrendingEntry totalResults(Integer totalResults) {
    this.totalResults = totalResults;
    return this;
  }

  /**
   * Get totalResults
   * @return totalResults
   */
  @javax.annotation.Nullable
  public Integer getTotalResults() {
    return totalResults;
  }

  public void setTotalResults(Integer totalResults) {
    this.totalResults = totalResults;
  }


  public SearchResultOfTrendingEntry useTotalResults(Boolean useTotalResults) {
    this.useTotalResults = useTotalResults;
    return this;
  }

  /**
   * If useTotalResults is true, then totalResults represents an accurate count.  If False, it does not, and may be estimated/only the size of the current page.  Either way, you should probably always only trust hasMore.  This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
   * @return useTotalResults
   */
  @javax.annotation.Nullable
  public Boolean getUseTotalResults() {
    return useTotalResults;
  }

  public void setUseTotalResults(Boolean useTotalResults) {
    this.useTotalResults = useTotalResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchResultOfTrendingEntry searchResultOfTrendingEntry = (SearchResultOfTrendingEntry) o;
    return Objects.equals(this.hasMore, searchResultOfTrendingEntry.hasMore) &&
        Objects.equals(this.query, searchResultOfTrendingEntry.query) &&
        Objects.equals(this.replacementContinuationToken, searchResultOfTrendingEntry.replacementContinuationToken) &&
        Objects.equals(this.results, searchResultOfTrendingEntry.results) &&
        Objects.equals(this.totalResults, searchResultOfTrendingEntry.totalResults) &&
        Objects.equals(this.useTotalResults, searchResultOfTrendingEntry.useTotalResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasMore, query, replacementContinuationToken, results, totalResults, useTotalResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchResultOfTrendingEntry {\n");
    sb.append("    hasMore: ").append(toIndentedString(hasMore)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    replacementContinuationToken: ").append(toIndentedString(replacementContinuationToken)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    totalResults: ").append(toIndentedString(totalResults)).append("\n");
    sb.append("    useTotalResults: ").append(toIndentedString(useTotalResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hasMore");
    openapiFields.add("query");
    openapiFields.add("replacementContinuationToken");
    openapiFields.add("results");
    openapiFields.add("totalResults");
    openapiFields.add("useTotalResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchResultOfTrendingEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchResultOfTrendingEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchResultOfTrendingEntry is not found in the empty JSON string", SearchResultOfTrendingEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchResultOfTrendingEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchResultOfTrendingEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        QueriesPagedQuery.validateJsonElement(jsonObj.get("query"));
      }
      if ((jsonObj.get("replacementContinuationToken") != null && !jsonObj.get("replacementContinuationToken").isJsonNull()) && !jsonObj.get("replacementContinuationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replacementContinuationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replacementContinuationToken").toString()));
      }
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
        if (jsonArrayresults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
          }

          // validate the optional field `results` (array)
          for (int i = 0; i < jsonArrayresults.size(); i++) {
            TrendingTrendingEntry.validateJsonElement(jsonArrayresults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchResultOfTrendingEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchResultOfTrendingEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchResultOfTrendingEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchResultOfTrendingEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchResultOfTrendingEntry>() {
           @Override
           public void write(JsonWriter out, SearchResultOfTrendingEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchResultOfTrendingEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchResultOfTrendingEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchResultOfTrendingEntry
   * @throws IOException if the JSON string is invalid with respect to SearchResultOfTrendingEntry
   */
  public static SearchResultOfTrendingEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchResultOfTrendingEntry.class);
  }

  /**
   * Convert an instance of SearchResultOfTrendingEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

