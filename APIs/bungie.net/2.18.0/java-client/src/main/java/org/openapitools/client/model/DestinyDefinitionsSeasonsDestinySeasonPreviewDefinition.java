/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsSeasonsDestinySeasonPreviewImageDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the promotional text, images, and links to preview this season.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<DestinyDefinitionsSeasonsDestinySeasonPreviewImageDefinition> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINK_PATH = "linkPath";
  @SerializedName(SERIALIZED_NAME_LINK_PATH)
  private String linkPath;

  public static final String SERIALIZED_NAME_VIDEO_LINK = "videoLink";
  @SerializedName(SERIALIZED_NAME_VIDEO_LINK)
  private String videoLink;

  public DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition() {
  }

  public DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A localized description of the season.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition images(List<DestinyDefinitionsSeasonsDestinySeasonPreviewImageDefinition> images) {
    this.images = images;
    return this;
  }

  public DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition addImagesItem(DestinyDefinitionsSeasonsDestinySeasonPreviewImageDefinition imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * A list of images to preview the seasonal content. Should have at least three to show.
   * @return images
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsSeasonsDestinySeasonPreviewImageDefinition> getImages() {
    return images;
  }

  public void setImages(List<DestinyDefinitionsSeasonsDestinySeasonPreviewImageDefinition> images) {
    this.images = images;
  }


  public DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition linkPath(String linkPath) {
    this.linkPath = linkPath;
    return this;
  }

  /**
   * A relative path to learn more about the season. Web browsers should be automatically redirected to the user&#39;s Bungie.net locale. For example: \&quot;/SeasonOfTheChosen\&quot; will redirect to \&quot;/7/en/Seasons/SeasonOfTheChosen\&quot; for English users.
   * @return linkPath
   */
  @javax.annotation.Nullable
  public String getLinkPath() {
    return linkPath;
  }

  public void setLinkPath(String linkPath) {
    this.linkPath = linkPath;
  }


  public DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition videoLink(String videoLink) {
    this.videoLink = videoLink;
    return this;
  }

  /**
   * An optional link to a localized video, probably YouTube.
   * @return videoLink
   */
  @javax.annotation.Nullable
  public String getVideoLink() {
    return videoLink;
  }

  public void setVideoLink(String videoLink) {
    this.videoLink = videoLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition destinyDefinitionsSeasonsDestinySeasonPreviewDefinition = (DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition) o;
    return Objects.equals(this.description, destinyDefinitionsSeasonsDestinySeasonPreviewDefinition.description) &&
        Objects.equals(this.images, destinyDefinitionsSeasonsDestinySeasonPreviewDefinition.images) &&
        Objects.equals(this.linkPath, destinyDefinitionsSeasonsDestinySeasonPreviewDefinition.linkPath) &&
        Objects.equals(this.videoLink, destinyDefinitionsSeasonsDestinySeasonPreviewDefinition.videoLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, images, linkPath, videoLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    linkPath: ").append(toIndentedString(linkPath)).append("\n");
    sb.append("    videoLink: ").append(toIndentedString(videoLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("images");
    openapiFields.add("linkPath");
    openapiFields.add("videoLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition is not found in the empty JSON string", DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            DestinyDefinitionsSeasonsDestinySeasonPreviewImageDefinition.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      if ((jsonObj.get("linkPath") != null && !jsonObj.get("linkPath").isJsonNull()) && !jsonObj.get("linkPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkPath").toString()));
      }
      if ((jsonObj.get("videoLink") != null && !jsonObj.get("videoLink").isJsonNull()) && !jsonObj.get("videoLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition
   */
  public static DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

