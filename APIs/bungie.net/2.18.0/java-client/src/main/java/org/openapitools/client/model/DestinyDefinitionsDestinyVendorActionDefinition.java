/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If a vendor can ever end up performing actions, these are the properties that will be related to those actions. I&#39;m not going to bother documenting this yet, as it is unused and unclear if it will ever be used... but in case it is ever populated and someone finds it useful, it is defined here.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyVendorActionDefinition {
  public static final String SERIALIZED_NAME_ACTION_HASH = "actionHash";
  @SerializedName(SERIALIZED_NAME_ACTION_HASH)
  private Integer actionHash;

  public static final String SERIALIZED_NAME_ACTION_ID = "actionId";
  @SerializedName(SERIALIZED_NAME_ACTION_ID)
  private String actionId;

  public static final String SERIALIZED_NAME_AUTO_PERFORM_ACTION = "autoPerformAction";
  @SerializedName(SERIALIZED_NAME_AUTO_PERFORM_ACTION)
  private Boolean autoPerformAction;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXECUTE_SECONDS = "executeSeconds";
  @SerializedName(SERIALIZED_NAME_EXECUTE_SECONDS)
  private Integer executeSeconds;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_IS_POSITIVE = "isPositive";
  @SerializedName(SERIALIZED_NAME_IS_POSITIVE)
  private Boolean isPositive;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VERB = "verb";
  @SerializedName(SERIALIZED_NAME_VERB)
  private String verb;

  public DestinyDefinitionsDestinyVendorActionDefinition() {
  }

  public DestinyDefinitionsDestinyVendorActionDefinition actionHash(Integer actionHash) {
    this.actionHash = actionHash;
    return this;
  }

  /**
   * Get actionHash
   * @return actionHash
   */
  @javax.annotation.Nullable
  public Integer getActionHash() {
    return actionHash;
  }

  public void setActionHash(Integer actionHash) {
    this.actionHash = actionHash;
  }


  public DestinyDefinitionsDestinyVendorActionDefinition actionId(String actionId) {
    this.actionId = actionId;
    return this;
  }

  /**
   * Get actionId
   * @return actionId
   */
  @javax.annotation.Nullable
  public String getActionId() {
    return actionId;
  }

  public void setActionId(String actionId) {
    this.actionId = actionId;
  }


  public DestinyDefinitionsDestinyVendorActionDefinition autoPerformAction(Boolean autoPerformAction) {
    this.autoPerformAction = autoPerformAction;
    return this;
  }

  /**
   * Get autoPerformAction
   * @return autoPerformAction
   */
  @javax.annotation.Nullable
  public Boolean getAutoPerformAction() {
    return autoPerformAction;
  }

  public void setAutoPerformAction(Boolean autoPerformAction) {
    this.autoPerformAction = autoPerformAction;
  }


  public DestinyDefinitionsDestinyVendorActionDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DestinyDefinitionsDestinyVendorActionDefinition executeSeconds(Integer executeSeconds) {
    this.executeSeconds = executeSeconds;
    return this;
  }

  /**
   * Get executeSeconds
   * @return executeSeconds
   */
  @javax.annotation.Nullable
  public Integer getExecuteSeconds() {
    return executeSeconds;
  }

  public void setExecuteSeconds(Integer executeSeconds) {
    this.executeSeconds = executeSeconds;
  }


  public DestinyDefinitionsDestinyVendorActionDefinition icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public DestinyDefinitionsDestinyVendorActionDefinition isPositive(Boolean isPositive) {
    this.isPositive = isPositive;
    return this;
  }

  /**
   * Get isPositive
   * @return isPositive
   */
  @javax.annotation.Nullable
  public Boolean getIsPositive() {
    return isPositive;
  }

  public void setIsPositive(Boolean isPositive) {
    this.isPositive = isPositive;
  }


  public DestinyDefinitionsDestinyVendorActionDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DestinyDefinitionsDestinyVendorActionDefinition verb(String verb) {
    this.verb = verb;
    return this;
  }

  /**
   * Get verb
   * @return verb
   */
  @javax.annotation.Nullable
  public String getVerb() {
    return verb;
  }

  public void setVerb(String verb) {
    this.verb = verb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyVendorActionDefinition destinyDefinitionsDestinyVendorActionDefinition = (DestinyDefinitionsDestinyVendorActionDefinition) o;
    return Objects.equals(this.actionHash, destinyDefinitionsDestinyVendorActionDefinition.actionHash) &&
        Objects.equals(this.actionId, destinyDefinitionsDestinyVendorActionDefinition.actionId) &&
        Objects.equals(this.autoPerformAction, destinyDefinitionsDestinyVendorActionDefinition.autoPerformAction) &&
        Objects.equals(this.description, destinyDefinitionsDestinyVendorActionDefinition.description) &&
        Objects.equals(this.executeSeconds, destinyDefinitionsDestinyVendorActionDefinition.executeSeconds) &&
        Objects.equals(this.icon, destinyDefinitionsDestinyVendorActionDefinition.icon) &&
        Objects.equals(this.isPositive, destinyDefinitionsDestinyVendorActionDefinition.isPositive) &&
        Objects.equals(this.name, destinyDefinitionsDestinyVendorActionDefinition.name) &&
        Objects.equals(this.verb, destinyDefinitionsDestinyVendorActionDefinition.verb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionHash, actionId, autoPerformAction, description, executeSeconds, icon, isPositive, name, verb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyVendorActionDefinition {\n");
    sb.append("    actionHash: ").append(toIndentedString(actionHash)).append("\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    autoPerformAction: ").append(toIndentedString(autoPerformAction)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    executeSeconds: ").append(toIndentedString(executeSeconds)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    isPositive: ").append(toIndentedString(isPositive)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    verb: ").append(toIndentedString(verb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionHash");
    openapiFields.add("actionId");
    openapiFields.add("autoPerformAction");
    openapiFields.add("description");
    openapiFields.add("executeSeconds");
    openapiFields.add("icon");
    openapiFields.add("isPositive");
    openapiFields.add("name");
    openapiFields.add("verb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyVendorActionDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyVendorActionDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyVendorActionDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyVendorActionDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyVendorActionDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyVendorActionDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionId") != null && !jsonObj.get("actionId").isJsonNull()) && !jsonObj.get("actionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("verb") != null && !jsonObj.get("verb").isJsonNull()) && !jsonObj.get("verb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verb").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyVendorActionDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyVendorActionDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyVendorActionDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyVendorActionDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyVendorActionDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyVendorActionDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyVendorActionDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyVendorActionDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyVendorActionDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyVendorActionDefinition
   */
  public static DestinyDefinitionsDestinyVendorActionDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyVendorActionDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyVendorActionDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

