/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;
import org.openapitools.client.model.DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition;
import org.openapitools.client.model.DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Any data we need to figure out whether this Quest Item is the currently active one for the conceptual Milestone. Even just typing this description, I already regret it.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition {
  public static final String SERIALIZED_NAME_ACTIVITIES = "activities";
  @SerializedName(SERIALIZED_NAME_ACTIVITIES)
  private Map<String, DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition> activities = new HashMap<>();

  public static final String SERIALIZED_NAME_DESTINATION_HASH = "destinationHash";
  @SerializedName(SERIALIZED_NAME_DESTINATION_HASH)
  private Integer destinationHash;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_OVERRIDE_IMAGE = "overrideImage";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_IMAGE)
  private String overrideImage;

  public static final String SERIALIZED_NAME_QUEST_ITEM_HASH = "questItemHash";
  @SerializedName(SERIALIZED_NAME_QUEST_ITEM_HASH)
  private Integer questItemHash;

  public static final String SERIALIZED_NAME_QUEST_REWARDS = "questRewards";
  @SerializedName(SERIALIZED_NAME_QUEST_REWARDS)
  private DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition questRewards;

  public DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition() {
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition activities(Map<String, DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition> activities) {
    this.activities = activities;
    return this;
  }

  public DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition putActivitiesItem(String key, DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition activitiesItem) {
    if (this.activities == null) {
      this.activities = new HashMap<>();
    }
    this.activities.put(key, activitiesItem);
    return this;
  }

  /**
   * The full set of all possible \&quot;conceptual activities\&quot; that are related to this Milestone. Tiers or alternative modes of play within these conceptual activities will be defined as sub-entities. Keyed by the Conceptual Activity Hash. Use the key to look up DestinyActivityDefinition.
   * @return activities
   */
  @javax.annotation.Nullable
  public Map<String, DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition> getActivities() {
    return activities;
  }

  public void setActivities(Map<String, DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition> activities) {
    this.activities = activities;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition destinationHash(Integer destinationHash) {
    this.destinationHash = destinationHash;
    return this;
  }

  /**
   * Sometimes, a Milestone&#39;s quest is related to an entire Destination rather than a specific activity. In that situation, this will be the hash of that Destination. Hotspots are currently the only Milestones that expose this data, but that does not preclude this data from being returned for other Milestones in the future.
   * @return destinationHash
   */
  @javax.annotation.Nullable
  public Integer getDestinationHash() {
    return destinationHash;
  }

  public void setDestinationHash(Integer destinationHash) {
    this.destinationHash = destinationHash;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * The individual quests may have different definitions from the overall milestone: if there&#39;s a specific active quest, use these displayProperties instead of that of the overall DestinyMilestoneDefinition.
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition overrideImage(String overrideImage) {
    this.overrideImage = overrideImage;
    return this;
  }

  /**
   * If populated, this image can be shown instead of the generic milestone&#39;s image when this quest is live, or it can be used to show a background image for the quest itself that differs from that of the Activity or the Milestone.
   * @return overrideImage
   */
  @javax.annotation.Nullable
  public String getOverrideImage() {
    return overrideImage;
  }

  public void setOverrideImage(String overrideImage) {
    this.overrideImage = overrideImage;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition questItemHash(Integer questItemHash) {
    this.questItemHash = questItemHash;
    return this;
  }

  /**
   * The item representing this Milestone quest. Use this hash to look up the DestinyInventoryItemDefinition for the quest to find its steps and human readable data.
   * @return questItemHash
   */
  @javax.annotation.Nullable
  public Integer getQuestItemHash() {
    return questItemHash;
  }

  public void setQuestItemHash(Integer questItemHash) {
    this.questItemHash = questItemHash;
  }


  public DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition questRewards(DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition questRewards) {
    this.questRewards = questRewards;
    return this;
  }

  /**
   * The rewards you will get for completing this quest, as best as we could extract them from our data. Sometimes, it&#39;ll be a decent amount of data. Sometimes, it&#39;s going to be sucky. Sorry.
   * @return questRewards
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition getQuestRewards() {
    return questRewards;
  }

  public void setQuestRewards(DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition questRewards) {
    this.questRewards = questRewards;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition destinyDefinitionsMilestonesDestinyMilestoneQuestDefinition = (DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition) o;
    return Objects.equals(this.activities, destinyDefinitionsMilestonesDestinyMilestoneQuestDefinition.activities) &&
        Objects.equals(this.destinationHash, destinyDefinitionsMilestonesDestinyMilestoneQuestDefinition.destinationHash) &&
        Objects.equals(this.displayProperties, destinyDefinitionsMilestonesDestinyMilestoneQuestDefinition.displayProperties) &&
        Objects.equals(this.overrideImage, destinyDefinitionsMilestonesDestinyMilestoneQuestDefinition.overrideImage) &&
        Objects.equals(this.questItemHash, destinyDefinitionsMilestonesDestinyMilestoneQuestDefinition.questItemHash) &&
        Objects.equals(this.questRewards, destinyDefinitionsMilestonesDestinyMilestoneQuestDefinition.questRewards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activities, destinationHash, displayProperties, overrideImage, questItemHash, questRewards);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition {\n");
    sb.append("    activities: ").append(toIndentedString(activities)).append("\n");
    sb.append("    destinationHash: ").append(toIndentedString(destinationHash)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    overrideImage: ").append(toIndentedString(overrideImage)).append("\n");
    sb.append("    questItemHash: ").append(toIndentedString(questItemHash)).append("\n");
    sb.append("    questRewards: ").append(toIndentedString(questRewards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activities");
    openapiFields.add("destinationHash");
    openapiFields.add("displayProperties");
    openapiFields.add("overrideImage");
    openapiFields.add("questItemHash");
    openapiFields.add("questRewards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition is not found in the empty JSON string", DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
      if ((jsonObj.get("overrideImage") != null && !jsonObj.get("overrideImage").isJsonNull()) && !jsonObj.get("overrideImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overrideImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overrideImage").toString()));
      }
      // validate the optional field `questRewards`
      if (jsonObj.get("questRewards") != null && !jsonObj.get("questRewards").isJsonNull()) {
        DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition.validateJsonElement(jsonObj.get("questRewards"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition
   */
  public static DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

