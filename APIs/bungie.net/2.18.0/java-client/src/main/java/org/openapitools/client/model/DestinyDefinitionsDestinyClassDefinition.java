/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a Character Class in Destiny 2. These are types of characters you can play, like Titan, Warlock, and Hunter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyClassDefinition {
  public static final String SERIALIZED_NAME_CLASS_TYPE = "classType";
  @SerializedName(SERIALIZED_NAME_CLASS_TYPE)
  private Integer classType;

  public static final String SERIALIZED_NAME_DISPLAY_PROPERTIES = "displayProperties";
  @SerializedName(SERIALIZED_NAME_DISPLAY_PROPERTIES)
  private DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties;

  public static final String SERIALIZED_NAME_GENDERED_CLASS_NAMES = "genderedClassNames";
  @SerializedName(SERIALIZED_NAME_GENDERED_CLASS_NAMES)
  private Map<String, String> genderedClassNames = new HashMap<>();

  public static final String SERIALIZED_NAME_GENDERED_CLASS_NAMES_BY_GENDER_HASH = "genderedClassNamesByGenderHash";
  @SerializedName(SERIALIZED_NAME_GENDERED_CLASS_NAMES_BY_GENDER_HASH)
  private Map<String, String> genderedClassNamesByGenderHash = new HashMap<>();

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private Integer hash;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_MENTOR_VENDOR_HASH = "mentorVendorHash";
  @SerializedName(SERIALIZED_NAME_MENTOR_VENDOR_HASH)
  private Integer mentorVendorHash;

  public static final String SERIALIZED_NAME_REDACTED = "redacted";
  @SerializedName(SERIALIZED_NAME_REDACTED)
  private Boolean redacted;

  public DestinyDefinitionsDestinyClassDefinition() {
  }

  public DestinyDefinitionsDestinyClassDefinition classType(Integer classType) {
    this.classType = classType;
    return this;
  }

  /**
   * In Destiny 1, we added a convenience Enumeration for referring to classes. We&#39;ve kept it, though mostly for posterity. This is the enum value for this definition&#39;s class.
   * @return classType
   */
  @javax.annotation.Nullable
  public Integer getClassType() {
    return classType;
  }

  public void setClassType(Integer classType) {
    this.classType = classType;
  }


  public DestinyDefinitionsDestinyClassDefinition displayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
    return this;
  }

  /**
   * Get displayProperties
   * @return displayProperties
   */
  @javax.annotation.Nullable
  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition getDisplayProperties() {
    return displayProperties;
  }

  public void setDisplayProperties(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition displayProperties) {
    this.displayProperties = displayProperties;
  }


  public DestinyDefinitionsDestinyClassDefinition genderedClassNames(Map<String, String> genderedClassNames) {
    this.genderedClassNames = genderedClassNames;
    return this;
  }

  public DestinyDefinitionsDestinyClassDefinition putGenderedClassNamesItem(String key, String genderedClassNamesItem) {
    if (this.genderedClassNames == null) {
      this.genderedClassNames = new HashMap<>();
    }
    this.genderedClassNames.put(key, genderedClassNamesItem);
    return this;
  }

  /**
   * A localized string referring to the singular form of the Class&#39;s name when referred to in gendered form. Keyed by the DestinyGender.
   * @return genderedClassNames
   */
  @javax.annotation.Nullable
  public Map<String, String> getGenderedClassNames() {
    return genderedClassNames;
  }

  public void setGenderedClassNames(Map<String, String> genderedClassNames) {
    this.genderedClassNames = genderedClassNames;
  }


  public DestinyDefinitionsDestinyClassDefinition genderedClassNamesByGenderHash(Map<String, String> genderedClassNamesByGenderHash) {
    this.genderedClassNamesByGenderHash = genderedClassNamesByGenderHash;
    return this;
  }

  public DestinyDefinitionsDestinyClassDefinition putGenderedClassNamesByGenderHashItem(String key, String genderedClassNamesByGenderHashItem) {
    if (this.genderedClassNamesByGenderHash == null) {
      this.genderedClassNamesByGenderHash = new HashMap<>();
    }
    this.genderedClassNamesByGenderHash.put(key, genderedClassNamesByGenderHashItem);
    return this;
  }

  /**
   * Get genderedClassNamesByGenderHash
   * @return genderedClassNamesByGenderHash
   */
  @javax.annotation.Nullable
  public Map<String, String> getGenderedClassNamesByGenderHash() {
    return genderedClassNamesByGenderHash;
  }

  public void setGenderedClassNamesByGenderHash(Map<String, String> genderedClassNamesByGenderHash) {
    this.genderedClassNamesByGenderHash = genderedClassNamesByGenderHash;
  }


  public DestinyDefinitionsDestinyClassDefinition hash(Integer hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
   * @return hash
   */
  @javax.annotation.Nullable
  public Integer getHash() {
    return hash;
  }

  public void setHash(Integer hash) {
    this.hash = hash;
  }


  public DestinyDefinitionsDestinyClassDefinition index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the entity as it was found in the investment tables.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DestinyDefinitionsDestinyClassDefinition mentorVendorHash(Integer mentorVendorHash) {
    this.mentorVendorHash = mentorVendorHash;
    return this;
  }

  /**
   * Mentors don&#39;t really mean anything anymore. Don&#39;t expect this to be populated.
   * @return mentorVendorHash
   */
  @javax.annotation.Nullable
  public Integer getMentorVendorHash() {
    return mentorVendorHash;
  }

  public void setMentorVendorHash(Integer mentorVendorHash) {
    this.mentorVendorHash = mentorVendorHash;
  }


  public DestinyDefinitionsDestinyClassDefinition redacted(Boolean redacted) {
    this.redacted = redacted;
    return this;
  }

  /**
   * If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
   * @return redacted
   */
  @javax.annotation.Nullable
  public Boolean getRedacted() {
    return redacted;
  }

  public void setRedacted(Boolean redacted) {
    this.redacted = redacted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyClassDefinition destinyDefinitionsDestinyClassDefinition = (DestinyDefinitionsDestinyClassDefinition) o;
    return Objects.equals(this.classType, destinyDefinitionsDestinyClassDefinition.classType) &&
        Objects.equals(this.displayProperties, destinyDefinitionsDestinyClassDefinition.displayProperties) &&
        Objects.equals(this.genderedClassNames, destinyDefinitionsDestinyClassDefinition.genderedClassNames) &&
        Objects.equals(this.genderedClassNamesByGenderHash, destinyDefinitionsDestinyClassDefinition.genderedClassNamesByGenderHash) &&
        Objects.equals(this.hash, destinyDefinitionsDestinyClassDefinition.hash) &&
        Objects.equals(this.index, destinyDefinitionsDestinyClassDefinition.index) &&
        Objects.equals(this.mentorVendorHash, destinyDefinitionsDestinyClassDefinition.mentorVendorHash) &&
        Objects.equals(this.redacted, destinyDefinitionsDestinyClassDefinition.redacted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classType, displayProperties, genderedClassNames, genderedClassNamesByGenderHash, hash, index, mentorVendorHash, redacted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyClassDefinition {\n");
    sb.append("    classType: ").append(toIndentedString(classType)).append("\n");
    sb.append("    displayProperties: ").append(toIndentedString(displayProperties)).append("\n");
    sb.append("    genderedClassNames: ").append(toIndentedString(genderedClassNames)).append("\n");
    sb.append("    genderedClassNamesByGenderHash: ").append(toIndentedString(genderedClassNamesByGenderHash)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    mentorVendorHash: ").append(toIndentedString(mentorVendorHash)).append("\n");
    sb.append("    redacted: ").append(toIndentedString(redacted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classType");
    openapiFields.add("displayProperties");
    openapiFields.add("genderedClassNames");
    openapiFields.add("genderedClassNamesByGenderHash");
    openapiFields.add("hash");
    openapiFields.add("index");
    openapiFields.add("mentorVendorHash");
    openapiFields.add("redacted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyClassDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyClassDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyClassDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyClassDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyClassDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyClassDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `displayProperties`
      if (jsonObj.get("displayProperties") != null && !jsonObj.get("displayProperties").isJsonNull()) {
        DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.validateJsonElement(jsonObj.get("displayProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyClassDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyClassDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyClassDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyClassDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyClassDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyClassDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyClassDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyClassDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyClassDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyClassDefinition
   */
  public static DestinyDefinitionsDestinyClassDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyClassDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyClassDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

