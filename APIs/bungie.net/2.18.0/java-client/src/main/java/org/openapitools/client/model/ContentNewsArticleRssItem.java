/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContentNewsArticleRssItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentNewsArticleRssItem {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HTML_CONTENT = "HtmlContent";
  @SerializedName(SERIALIZED_NAME_HTML_CONTENT)
  private String htmlContent;

  public static final String SERIALIZED_NAME_IMAGE_PATH = "ImagePath";
  @SerializedName(SERIALIZED_NAME_IMAGE_PATH)
  private String imagePath;

  public static final String SERIALIZED_NAME_LINK = "Link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_OPTIONAL_MOBILE_IMAGE_PATH = "OptionalMobileImagePath";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_MOBILE_IMAGE_PATH)
  private String optionalMobileImagePath;

  public static final String SERIALIZED_NAME_PUB_DATE = "PubDate";
  @SerializedName(SERIALIZED_NAME_PUB_DATE)
  private OffsetDateTime pubDate;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "UniqueIdentifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  private String uniqueIdentifier;

  public ContentNewsArticleRssItem() {
  }

  public ContentNewsArticleRssItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ContentNewsArticleRssItem htmlContent(String htmlContent) {
    this.htmlContent = htmlContent;
    return this;
  }

  /**
   * Get htmlContent
   * @return htmlContent
   */
  @javax.annotation.Nullable
  public String getHtmlContent() {
    return htmlContent;
  }

  public void setHtmlContent(String htmlContent) {
    this.htmlContent = htmlContent;
  }


  public ContentNewsArticleRssItem imagePath(String imagePath) {
    this.imagePath = imagePath;
    return this;
  }

  /**
   * Get imagePath
   * @return imagePath
   */
  @javax.annotation.Nullable
  public String getImagePath() {
    return imagePath;
  }

  public void setImagePath(String imagePath) {
    this.imagePath = imagePath;
  }


  public ContentNewsArticleRssItem link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public ContentNewsArticleRssItem optionalMobileImagePath(String optionalMobileImagePath) {
    this.optionalMobileImagePath = optionalMobileImagePath;
    return this;
  }

  /**
   * Get optionalMobileImagePath
   * @return optionalMobileImagePath
   */
  @javax.annotation.Nullable
  public String getOptionalMobileImagePath() {
    return optionalMobileImagePath;
  }

  public void setOptionalMobileImagePath(String optionalMobileImagePath) {
    this.optionalMobileImagePath = optionalMobileImagePath;
  }


  public ContentNewsArticleRssItem pubDate(OffsetDateTime pubDate) {
    this.pubDate = pubDate;
    return this;
  }

  /**
   * Get pubDate
   * @return pubDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPubDate() {
    return pubDate;
  }

  public void setPubDate(OffsetDateTime pubDate) {
    this.pubDate = pubDate;
  }


  public ContentNewsArticleRssItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ContentNewsArticleRssItem uniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * Get uniqueIdentifier
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentNewsArticleRssItem contentNewsArticleRssItem = (ContentNewsArticleRssItem) o;
    return Objects.equals(this.description, contentNewsArticleRssItem.description) &&
        Objects.equals(this.htmlContent, contentNewsArticleRssItem.htmlContent) &&
        Objects.equals(this.imagePath, contentNewsArticleRssItem.imagePath) &&
        Objects.equals(this.link, contentNewsArticleRssItem.link) &&
        Objects.equals(this.optionalMobileImagePath, contentNewsArticleRssItem.optionalMobileImagePath) &&
        Objects.equals(this.pubDate, contentNewsArticleRssItem.pubDate) &&
        Objects.equals(this.title, contentNewsArticleRssItem.title) &&
        Objects.equals(this.uniqueIdentifier, contentNewsArticleRssItem.uniqueIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, htmlContent, imagePath, link, optionalMobileImagePath, pubDate, title, uniqueIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentNewsArticleRssItem {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    htmlContent: ").append(toIndentedString(htmlContent)).append("\n");
    sb.append("    imagePath: ").append(toIndentedString(imagePath)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    optionalMobileImagePath: ").append(toIndentedString(optionalMobileImagePath)).append("\n");
    sb.append("    pubDate: ").append(toIndentedString(pubDate)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("HtmlContent");
    openapiFields.add("ImagePath");
    openapiFields.add("Link");
    openapiFields.add("OptionalMobileImagePath");
    openapiFields.add("PubDate");
    openapiFields.add("Title");
    openapiFields.add("UniqueIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentNewsArticleRssItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentNewsArticleRssItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentNewsArticleRssItem is not found in the empty JSON string", ContentNewsArticleRssItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentNewsArticleRssItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentNewsArticleRssItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("HtmlContent") != null && !jsonObj.get("HtmlContent").isJsonNull()) && !jsonObj.get("HtmlContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HtmlContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HtmlContent").toString()));
      }
      if ((jsonObj.get("ImagePath") != null && !jsonObj.get("ImagePath").isJsonNull()) && !jsonObj.get("ImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImagePath").toString()));
      }
      if ((jsonObj.get("Link") != null && !jsonObj.get("Link").isJsonNull()) && !jsonObj.get("Link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Link").toString()));
      }
      if ((jsonObj.get("OptionalMobileImagePath") != null && !jsonObj.get("OptionalMobileImagePath").isJsonNull()) && !jsonObj.get("OptionalMobileImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OptionalMobileImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OptionalMobileImagePath").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("UniqueIdentifier") != null && !jsonObj.get("UniqueIdentifier").isJsonNull()) && !jsonObj.get("UniqueIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UniqueIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UniqueIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentNewsArticleRssItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentNewsArticleRssItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentNewsArticleRssItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentNewsArticleRssItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentNewsArticleRssItem>() {
           @Override
           public void write(JsonWriter out, ContentNewsArticleRssItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentNewsArticleRssItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentNewsArticleRssItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentNewsArticleRssItem
   * @throws IOException if the JSON string is invalid with respect to ContentNewsArticleRssItem
   */
  public static ContentNewsArticleRssItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentNewsArticleRssItem.class);
  }

  /**
   * Convert an instance of ContentNewsArticleRssItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

