/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsCommonDestinyIconSequenceDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Many Destiny*Definition contracts - the \&quot;first order\&quot; entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HAS_ICON = "hasIcon";
  @SerializedName(SERIALIZED_NAME_HAS_ICON)
  private Boolean hasIcon;

  public static final String SERIALIZED_NAME_HIGH_RES_ICON = "highResIcon";
  @SerializedName(SERIALIZED_NAME_HIGH_RES_ICON)
  private String highResIcon;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_ICON_SEQUENCES = "iconSequences";
  @SerializedName(SERIALIZED_NAME_ICON_SEQUENCES)
  private List<DestinyDefinitionsCommonDestinyIconSequenceDefinition> iconSequences = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition() {
  }

  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition hasIcon(Boolean hasIcon) {
    this.hasIcon = hasIcon;
    return this;
  }

  /**
   * Get hasIcon
   * @return hasIcon
   */
  @javax.annotation.Nullable
  public Boolean getHasIcon() {
    return hasIcon;
  }

  public void setHasIcon(Boolean hasIcon) {
    this.hasIcon = hasIcon;
  }


  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition highResIcon(String highResIcon) {
    this.highResIcon = highResIcon;
    return this;
  }

  /**
   * If this item has a high-res icon (at least for now, many things won&#39;t), then the path to that icon will be here.
   * @return highResIcon
   */
  @javax.annotation.Nullable
  public String getHighResIcon() {
    return highResIcon;
  }

  public void setHighResIcon(String highResIcon) {
    this.highResIcon = highResIcon;
  }


  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Note that \&quot;icon\&quot; is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition&#39;s icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.  They are currently represented as 96px x 96px images.
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }


  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition iconSequences(List<DestinyDefinitionsCommonDestinyIconSequenceDefinition> iconSequences) {
    this.iconSequences = iconSequences;
    return this;
  }

  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition addIconSequencesItem(DestinyDefinitionsCommonDestinyIconSequenceDefinition iconSequencesItem) {
    if (this.iconSequences == null) {
      this.iconSequences = new ArrayList<>();
    }
    this.iconSequences.add(iconSequencesItem);
    return this;
  }

  /**
   * Get iconSequences
   * @return iconSequences
   */
  @javax.annotation.Nullable
  public List<DestinyDefinitionsCommonDestinyIconSequenceDefinition> getIconSequences() {
    return iconSequences;
  }

  public void setIconSequences(List<DestinyDefinitionsCommonDestinyIconSequenceDefinition> iconSequences) {
    this.iconSequences = iconSequences;
  }


  public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition destinyDefinitionsCommonDestinyDisplayPropertiesDefinition = (DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition) o;
    return Objects.equals(this.description, destinyDefinitionsCommonDestinyDisplayPropertiesDefinition.description) &&
        Objects.equals(this.hasIcon, destinyDefinitionsCommonDestinyDisplayPropertiesDefinition.hasIcon) &&
        Objects.equals(this.highResIcon, destinyDefinitionsCommonDestinyDisplayPropertiesDefinition.highResIcon) &&
        Objects.equals(this.icon, destinyDefinitionsCommonDestinyDisplayPropertiesDefinition.icon) &&
        Objects.equals(this.iconSequences, destinyDefinitionsCommonDestinyDisplayPropertiesDefinition.iconSequences) &&
        Objects.equals(this.name, destinyDefinitionsCommonDestinyDisplayPropertiesDefinition.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, hasIcon, highResIcon, icon, iconSequences, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hasIcon: ").append(toIndentedString(hasIcon)).append("\n");
    sb.append("    highResIcon: ").append(toIndentedString(highResIcon)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    iconSequences: ").append(toIndentedString(iconSequences)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("hasIcon");
    openapiFields.add("highResIcon");
    openapiFields.add("icon");
    openapiFields.add("iconSequences");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition is not found in the empty JSON string", DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("highResIcon") != null && !jsonObj.get("highResIcon").isJsonNull()) && !jsonObj.get("highResIcon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highResIcon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highResIcon").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if (jsonObj.get("iconSequences") != null && !jsonObj.get("iconSequences").isJsonNull()) {
        JsonArray jsonArrayiconSequences = jsonObj.getAsJsonArray("iconSequences");
        if (jsonArrayiconSequences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("iconSequences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `iconSequences` to be an array in the JSON string but got `%s`", jsonObj.get("iconSequences").toString()));
          }

          // validate the optional field `iconSequences` (array)
          for (int i = 0; i < jsonArrayiconSequences.size(); i++) {
            DestinyDefinitionsCommonDestinyIconSequenceDefinition.validateJsonElement(jsonArrayiconSequences.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
   */
  public static DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

