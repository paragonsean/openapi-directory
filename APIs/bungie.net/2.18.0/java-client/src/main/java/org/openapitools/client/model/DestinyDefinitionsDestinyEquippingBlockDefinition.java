/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:58.650260-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinyDefinitionsDestinyEquippingBlockDefinition {
  public static final String SERIALIZED_NAME_AMMO_TYPE = "ammoType";
  @SerializedName(SERIALIZED_NAME_AMMO_TYPE)
  private Integer ammoType;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Integer attributes;

  public static final String SERIALIZED_NAME_DISPLAY_STRINGS = "displayStrings";
  @SerializedName(SERIALIZED_NAME_DISPLAY_STRINGS)
  private List<String> displayStrings = new ArrayList<>();

  public static final String SERIALIZED_NAME_EQUIPMENT_SLOT_TYPE_HASH = "equipmentSlotTypeHash";
  @SerializedName(SERIALIZED_NAME_EQUIPMENT_SLOT_TYPE_HASH)
  private Integer equipmentSlotTypeHash;

  public static final String SERIALIZED_NAME_GEARSET_ITEM_HASH = "gearsetItemHash";
  @SerializedName(SERIALIZED_NAME_GEARSET_ITEM_HASH)
  private Integer gearsetItemHash;

  public static final String SERIALIZED_NAME_UNIQUE_LABEL = "uniqueLabel";
  @SerializedName(SERIALIZED_NAME_UNIQUE_LABEL)
  private String uniqueLabel;

  public static final String SERIALIZED_NAME_UNIQUE_LABEL_HASH = "uniqueLabelHash";
  @SerializedName(SERIALIZED_NAME_UNIQUE_LABEL_HASH)
  private Integer uniqueLabelHash;

  public DestinyDefinitionsDestinyEquippingBlockDefinition() {
  }

  public DestinyDefinitionsDestinyEquippingBlockDefinition ammoType(Integer ammoType) {
    this.ammoType = ammoType;
    return this;
  }

  /**
   * Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.
   * @return ammoType
   */
  @javax.annotation.Nullable
  public Integer getAmmoType() {
    return ammoType;
  }

  public void setAmmoType(Integer ammoType) {
    this.ammoType = ammoType;
  }


  public DestinyDefinitionsDestinyEquippingBlockDefinition attributes(Integer attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * These are custom attributes on the equippability of the item.  For now, this can only be \&quot;equip on acquire\&quot;, which would mean that the item will be automatically equipped as soon as you pick it up.
   * @return attributes
   */
  @javax.annotation.Nullable
  public Integer getAttributes() {
    return attributes;
  }

  public void setAttributes(Integer attributes) {
    this.attributes = attributes;
  }


  public DestinyDefinitionsDestinyEquippingBlockDefinition displayStrings(List<String> displayStrings) {
    this.displayStrings = displayStrings;
    return this;
  }

  public DestinyDefinitionsDestinyEquippingBlockDefinition addDisplayStringsItem(String displayStringsItem) {
    if (this.displayStrings == null) {
      this.displayStrings = new ArrayList<>();
    }
    this.displayStrings.add(displayStringsItem);
    return this;
  }

  /**
   * These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.
   * @return displayStrings
   */
  @javax.annotation.Nullable
  public List<String> getDisplayStrings() {
    return displayStrings;
  }

  public void setDisplayStrings(List<String> displayStrings) {
    this.displayStrings = displayStrings;
  }


  public DestinyDefinitionsDestinyEquippingBlockDefinition equipmentSlotTypeHash(Integer equipmentSlotTypeHash) {
    this.equipmentSlotTypeHash = equipmentSlotTypeHash;
    return this;
  }

  /**
   * An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.
   * @return equipmentSlotTypeHash
   */
  @javax.annotation.Nullable
  public Integer getEquipmentSlotTypeHash() {
    return equipmentSlotTypeHash;
  }

  public void setEquipmentSlotTypeHash(Integer equipmentSlotTypeHash) {
    this.equipmentSlotTypeHash = equipmentSlotTypeHash;
  }


  public DestinyDefinitionsDestinyEquippingBlockDefinition gearsetItemHash(Integer gearsetItemHash) {
    this.gearsetItemHash = gearsetItemHash;
    return this;
  }

  /**
   * If the item is part of a gearset, this is a reference to that gearset item.
   * @return gearsetItemHash
   */
  @javax.annotation.Nullable
  public Integer getGearsetItemHash() {
    return gearsetItemHash;
  }

  public void setGearsetItemHash(Integer gearsetItemHash) {
    this.gearsetItemHash = gearsetItemHash;
  }


  public DestinyDefinitionsDestinyEquippingBlockDefinition uniqueLabel(String uniqueLabel) {
    this.uniqueLabel = uniqueLabel;
    return this;
  }

  /**
   * If defined, this is the label used to check if the item has other items of matching types already equipped.   For instance, when you aren&#39;t allowed to equip more than one Exotic Weapon, that&#39;s because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item&#39;s uniqueLabel vs. all other already equipped items (other than the item in the slot that&#39;s about to be occupied).
   * @return uniqueLabel
   */
  @javax.annotation.Nullable
  public String getUniqueLabel() {
    return uniqueLabel;
  }

  public void setUniqueLabel(String uniqueLabel) {
    this.uniqueLabel = uniqueLabel;
  }


  public DestinyDefinitionsDestinyEquippingBlockDefinition uniqueLabelHash(Integer uniqueLabelHash) {
    this.uniqueLabelHash = uniqueLabelHash;
    return this;
  }

  /**
   * The hash of that unique label. Does not point to a specific definition.
   * @return uniqueLabelHash
   */
  @javax.annotation.Nullable
  public Integer getUniqueLabelHash() {
    return uniqueLabelHash;
  }

  public void setUniqueLabelHash(Integer uniqueLabelHash) {
    this.uniqueLabelHash = uniqueLabelHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinyDefinitionsDestinyEquippingBlockDefinition destinyDefinitionsDestinyEquippingBlockDefinition = (DestinyDefinitionsDestinyEquippingBlockDefinition) o;
    return Objects.equals(this.ammoType, destinyDefinitionsDestinyEquippingBlockDefinition.ammoType) &&
        Objects.equals(this.attributes, destinyDefinitionsDestinyEquippingBlockDefinition.attributes) &&
        Objects.equals(this.displayStrings, destinyDefinitionsDestinyEquippingBlockDefinition.displayStrings) &&
        Objects.equals(this.equipmentSlotTypeHash, destinyDefinitionsDestinyEquippingBlockDefinition.equipmentSlotTypeHash) &&
        Objects.equals(this.gearsetItemHash, destinyDefinitionsDestinyEquippingBlockDefinition.gearsetItemHash) &&
        Objects.equals(this.uniqueLabel, destinyDefinitionsDestinyEquippingBlockDefinition.uniqueLabel) &&
        Objects.equals(this.uniqueLabelHash, destinyDefinitionsDestinyEquippingBlockDefinition.uniqueLabelHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ammoType, attributes, displayStrings, equipmentSlotTypeHash, gearsetItemHash, uniqueLabel, uniqueLabelHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinyDefinitionsDestinyEquippingBlockDefinition {\n");
    sb.append("    ammoType: ").append(toIndentedString(ammoType)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    displayStrings: ").append(toIndentedString(displayStrings)).append("\n");
    sb.append("    equipmentSlotTypeHash: ").append(toIndentedString(equipmentSlotTypeHash)).append("\n");
    sb.append("    gearsetItemHash: ").append(toIndentedString(gearsetItemHash)).append("\n");
    sb.append("    uniqueLabel: ").append(toIndentedString(uniqueLabel)).append("\n");
    sb.append("    uniqueLabelHash: ").append(toIndentedString(uniqueLabelHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ammoType");
    openapiFields.add("attributes");
    openapiFields.add("displayStrings");
    openapiFields.add("equipmentSlotTypeHash");
    openapiFields.add("gearsetItemHash");
    openapiFields.add("uniqueLabel");
    openapiFields.add("uniqueLabelHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinyDefinitionsDestinyEquippingBlockDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinyDefinitionsDestinyEquippingBlockDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinyDefinitionsDestinyEquippingBlockDefinition is not found in the empty JSON string", DestinyDefinitionsDestinyEquippingBlockDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinyDefinitionsDestinyEquippingBlockDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinyDefinitionsDestinyEquippingBlockDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("displayStrings") != null && !jsonObj.get("displayStrings").isJsonNull() && !jsonObj.get("displayStrings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayStrings` to be an array in the JSON string but got `%s`", jsonObj.get("displayStrings").toString()));
      }
      if ((jsonObj.get("uniqueLabel") != null && !jsonObj.get("uniqueLabel").isJsonNull()) && !jsonObj.get("uniqueLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinyDefinitionsDestinyEquippingBlockDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinyDefinitionsDestinyEquippingBlockDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinyDefinitionsDestinyEquippingBlockDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinyDefinitionsDestinyEquippingBlockDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinyDefinitionsDestinyEquippingBlockDefinition>() {
           @Override
           public void write(JsonWriter out, DestinyDefinitionsDestinyEquippingBlockDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinyDefinitionsDestinyEquippingBlockDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinyDefinitionsDestinyEquippingBlockDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinyDefinitionsDestinyEquippingBlockDefinition
   * @throws IOException if the JSON string is invalid with respect to DestinyDefinitionsDestinyEquippingBlockDefinition
   */
  public static DestinyDefinitionsDestinyEquippingBlockDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinyDefinitionsDestinyEquippingBlockDefinition.class);
  }

  /**
   * Convert an instance of DestinyDefinitionsDestinyEquippingBlockDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

