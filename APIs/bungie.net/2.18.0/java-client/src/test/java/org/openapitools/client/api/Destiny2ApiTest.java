/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Destiny2AwaGetActionToken200Response;
import org.openapitools.client.model.Destiny2AwaInitializeRequest200Response;
import org.openapitools.client.model.Destiny2EquipItem200Response;
import org.openapitools.client.model.Destiny2EquipItems200Response;
import org.openapitools.client.model.Destiny2GetActivityHistory200Response;
import org.openapitools.client.model.Destiny2GetCharacter200Response;
import org.openapitools.client.model.Destiny2GetClanAggregateStats200Response;
import org.openapitools.client.model.Destiny2GetClanBannerSource200Response;
import org.openapitools.client.model.Destiny2GetClanLeaderboards200Response;
import org.openapitools.client.model.Destiny2GetClanWeeklyRewardState200Response;
import org.openapitools.client.model.Destiny2GetCollectibleNodeDetails200Response;
import org.openapitools.client.model.Destiny2GetDestinyAggregateActivityStats200Response;
import org.openapitools.client.model.Destiny2GetDestinyEntityDefinition200Response;
import org.openapitools.client.model.Destiny2GetDestinyManifest200Response;
import org.openapitools.client.model.Destiny2GetHistoricalStats200Response;
import org.openapitools.client.model.Destiny2GetHistoricalStatsDefinition200Response;
import org.openapitools.client.model.Destiny2GetHistoricalStatsForAccount200Response;
import org.openapitools.client.model.Destiny2GetItem200Response;
import org.openapitools.client.model.Destiny2GetLinkedProfiles200Response;
import org.openapitools.client.model.Destiny2GetPostGameCarnageReport200Response;
import org.openapitools.client.model.Destiny2GetProfile200Response;
import org.openapitools.client.model.Destiny2GetPublicMilestoneContent200Response;
import org.openapitools.client.model.Destiny2GetPublicMilestones200Response;
import org.openapitools.client.model.Destiny2GetPublicVendors200Response;
import org.openapitools.client.model.Destiny2GetUniqueWeaponHistory200Response;
import org.openapitools.client.model.Destiny2GetVendor200Response;
import org.openapitools.client.model.Destiny2GetVendors200Response;
import org.openapitools.client.model.Destiny2InsertSocketPlug200Response;
import org.openapitools.client.model.Destiny2SearchDestinyEntities200Response;
import org.openapitools.client.model.Destiny2SearchDestinyPlayerByBungieName200Response;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Destiny2Api
 */
@Disabled
public class Destiny2ApiTest {

    private final Destiny2Api api = new Destiny2Api();

    /**
     * Returns the action token if user approves the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2AwaGetActionTokenTest() throws ApiException {
        String correlationId = null;
        Destiny2AwaGetActionToken200Response response = api.destiny2AwaGetActionToken(correlationId);
        // TODO: test validations
    }

    /**
     * Initialize a request to perform an advanced write action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2AwaInitializeRequestTest() throws ApiException {
        Destiny2AwaInitializeRequest200Response response = api.destiny2AwaInitializeRequest();
        // TODO: test validations
    }

    /**
     * Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2AwaProvideAuthorizationResultTest() throws ApiException {
        Destiny2EquipItem200Response response = api.destiny2AwaProvideAuthorizationResult();
        // TODO: test validations
    }

    /**
     * Clear the identifiers and items of a loadout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2ClearLoadoutTest() throws ApiException {
        Destiny2EquipItem200Response response = api.destiny2ClearLoadout();
        // TODO: test validations
    }

    /**
     * Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2EquipItemTest() throws ApiException {
        Destiny2EquipItem200Response response = api.destiny2EquipItem();
        // TODO: test validations
    }

    /**
     * Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2EquipItemsTest() throws ApiException {
        Destiny2EquipItems200Response response = api.destiny2EquipItems();
        // TODO: test validations
    }

    /**
     * Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2EquipLoadoutTest() throws ApiException {
        Destiny2EquipItem200Response response = api.destiny2EquipLoadout();
        // TODO: test validations
    }

    /**
     * Gets activity history stats for indicated character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetActivityHistoryTest() throws ApiException {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        Integer count = null;
        Integer mode = null;
        Integer page = null;
        Destiny2GetActivityHistory200Response response = api.destiny2GetActivityHistory(characterId, destinyMembershipId, membershipType, count, mode, page);
        // TODO: test validations
    }

    /**
     * Returns character information for the supplied character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetCharacterTest() throws ApiException {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        List<Integer> components = null;
        Destiny2GetCharacter200Response response = api.destiny2GetCharacter(characterId, destinyMembershipId, membershipType, components);
        // TODO: test validations
    }

    /**
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetClanAggregateStatsTest() throws ApiException {
        Long groupId = null;
        String modes = null;
        Destiny2GetClanAggregateStats200Response response = api.destiny2GetClanAggregateStats(groupId, modes);
        // TODO: test validations
    }

    /**
     * Returns the dictionary of values for the Clan Banner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetClanBannerSourceTest() throws ApiException {
        Destiny2GetClanBannerSource200Response response = api.destiny2GetClanBannerSource();
        // TODO: test validations
    }

    /**
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetClanLeaderboardsTest() throws ApiException {
        Long groupId = null;
        Integer maxtop = null;
        String modes = null;
        String statid = null;
        Destiny2GetClanLeaderboards200Response response = api.destiny2GetClanLeaderboards(groupId, maxtop, modes, statid);
        // TODO: test validations
    }

    /**
     * Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetClanWeeklyRewardStateTest() throws ApiException {
        Long groupId = null;
        Destiny2GetClanWeeklyRewardState200Response response = api.destiny2GetClanWeeklyRewardState(groupId);
        // TODO: test validations
    }

    /**
     * Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetCollectibleNodeDetailsTest() throws ApiException {
        Long characterId = null;
        Integer collectiblePresentationNodeHash = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        List<Integer> components = null;
        Destiny2GetCollectibleNodeDetails200Response response = api.destiny2GetCollectibleNodeDetails(characterId, collectiblePresentationNodeHash, destinyMembershipId, membershipType, components);
        // TODO: test validations
    }

    /**
     * Gets all activities the character has participated in together with aggregate statistics for those activities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetDestinyAggregateActivityStatsTest() throws ApiException {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        Destiny2GetDestinyAggregateActivityStats200Response response = api.destiny2GetDestinyAggregateActivityStats(characterId, destinyMembershipId, membershipType);
        // TODO: test validations
    }

    /**
     * Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don&#39;t use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetDestinyEntityDefinitionTest() throws ApiException {
        String entityType = null;
        Integer hashIdentifier = null;
        Destiny2GetDestinyEntityDefinition200Response response = api.destiny2GetDestinyEntityDefinition(entityType, hashIdentifier);
        // TODO: test validations
    }

    /**
     * Returns the current version of the manifest as a json object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetDestinyManifestTest() throws ApiException {
        Destiny2GetDestinyManifest200Response response = api.destiny2GetDestinyManifest();
        // TODO: test validations
    }

    /**
     * Gets historical stats for indicated character.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetHistoricalStatsTest() throws ApiException {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        OffsetDateTime dayend = null;
        OffsetDateTime daystart = null;
        List<Integer> groups = null;
        List<Integer> modes = null;
        Integer periodType = null;
        Destiny2GetHistoricalStats200Response response = api.destiny2GetHistoricalStats(characterId, destinyMembershipId, membershipType, dayend, daystart, groups, modes, periodType);
        // TODO: test validations
    }

    /**
     * Gets historical stats definitions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetHistoricalStatsDefinitionTest() throws ApiException {
        Destiny2GetHistoricalStatsDefinition200Response response = api.destiny2GetHistoricalStatsDefinition();
        // TODO: test validations
    }

    /**
     * Gets aggregate historical stats organized around each character for a given account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetHistoricalStatsForAccountTest() throws ApiException {
        Long destinyMembershipId = null;
        Integer membershipType = null;
        List<Integer> groups = null;
        Destiny2GetHistoricalStatsForAccount200Response response = api.destiny2GetHistoricalStatsForAccount(destinyMembershipId, membershipType, groups);
        // TODO: test validations
    }

    /**
     * Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetItemTest() throws ApiException {
        Long destinyMembershipId = null;
        Long itemInstanceId = null;
        Integer membershipType = null;
        List<Integer> components = null;
        Destiny2GetItem200Response response = api.destiny2GetItem(destinyMembershipId, itemInstanceId, membershipType, components);
        // TODO: test validations
    }

    /**
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetLeaderboardsTest() throws ApiException {
        Long destinyMembershipId = null;
        Integer membershipType = null;
        Integer maxtop = null;
        String modes = null;
        String statid = null;
        Destiny2GetClanLeaderboards200Response response = api.destiny2GetLeaderboards(destinyMembershipId, membershipType, maxtop, modes, statid);
        // TODO: test validations
    }

    /**
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetLeaderboardsForCharacterTest() throws ApiException {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        Integer maxtop = null;
        String modes = null;
        String statid = null;
        Destiny2GetClanLeaderboards200Response response = api.destiny2GetLeaderboardsForCharacter(characterId, destinyMembershipId, membershipType, maxtop, modes, statid);
        // TODO: test validations
    }

    /**
     * Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetLinkedProfilesTest() throws ApiException {
        Long membershipId = null;
        Integer membershipType = null;
        Boolean getAllMemberships = null;
        Destiny2GetLinkedProfiles200Response response = api.destiny2GetLinkedProfiles(membershipId, membershipType, getAllMemberships);
        // TODO: test validations
    }

    /**
     * Gets the available post game carnage report for the activity ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetPostGameCarnageReportTest() throws ApiException {
        Long activityId = null;
        Destiny2GetPostGameCarnageReport200Response response = api.destiny2GetPostGameCarnageReport(activityId);
        // TODO: test validations
    }

    /**
     * Returns Destiny Profile information for the supplied membership.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetProfileTest() throws ApiException {
        Long destinyMembershipId = null;
        Integer membershipType = null;
        List<Integer> components = null;
        Destiny2GetProfile200Response response = api.destiny2GetProfile(destinyMembershipId, membershipType, components);
        // TODO: test validations
    }

    /**
     * Gets custom localized content for the milestone of the given hash, if it exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetPublicMilestoneContentTest() throws ApiException {
        Integer milestoneHash = null;
        Destiny2GetPublicMilestoneContent200Response response = api.destiny2GetPublicMilestoneContent(milestoneHash);
        // TODO: test validations
    }

    /**
     * Gets public information about currently available Milestones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetPublicMilestonesTest() throws ApiException {
        Destiny2GetPublicMilestones200Response response = api.destiny2GetPublicMilestones();
        // TODO: test validations
    }

    /**
     * Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetPublicVendorsTest() throws ApiException {
        List<Integer> components = null;
        Destiny2GetPublicVendors200Response response = api.destiny2GetPublicVendors(components);
        // TODO: test validations
    }

    /**
     * Gets details about unique weapon usage, including all exotic weapons.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetUniqueWeaponHistoryTest() throws ApiException {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        Destiny2GetUniqueWeaponHistory200Response response = api.destiny2GetUniqueWeaponHistory(characterId, destinyMembershipId, membershipType);
        // TODO: test validations
    }

    /**
     * Get the details of a specific Vendor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetVendorTest() throws ApiException {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        Integer vendorHash = null;
        List<Integer> components = null;
        Destiny2GetVendor200Response response = api.destiny2GetVendor(characterId, destinyMembershipId, membershipType, vendorHash, components);
        // TODO: test validations
    }

    /**
     * Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetVendorsTest() throws ApiException {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        List<Integer> components = null;
        Integer filter = null;
        Destiny2GetVendors200Response response = api.destiny2GetVendors(characterId, destinyMembershipId, membershipType, components, filter);
        // TODO: test validations
    }

    /**
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2InsertSocketPlugTest() throws ApiException {
        Destiny2InsertSocketPlug200Response response = api.destiny2InsertSocketPlug();
        // TODO: test validations
    }

    /**
     * Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2InsertSocketPlugFreeTest() throws ApiException {
        Destiny2InsertSocketPlug200Response response = api.destiny2InsertSocketPlugFree();
        // TODO: test validations
    }

    /**
     * Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2PullFromPostmasterTest() throws ApiException {
        Destiny2EquipItem200Response response = api.destiny2PullFromPostmaster();
        // TODO: test validations
    }

    /**
     * Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2ReportOffensivePostGameCarnageReportPlayerTest() throws ApiException {
        Long activityId = null;
        Destiny2EquipItem200Response response = api.destiny2ReportOffensivePostGameCarnageReportPlayer(activityId);
        // TODO: test validations
    }

    /**
     * Gets a page list of Destiny items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2SearchDestinyEntitiesTest() throws ApiException {
        String searchTerm = null;
        String type = null;
        Integer page = null;
        Destiny2SearchDestinyEntities200Response response = api.destiny2SearchDestinyEntities(searchTerm, type, page);
        // TODO: test validations
    }

    /**
     * Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2SearchDestinyPlayerByBungieNameTest() throws ApiException {
        Integer membershipType = null;
        Destiny2SearchDestinyPlayerByBungieName200Response response = api.destiny2SearchDestinyPlayerByBungieName(membershipType);
        // TODO: test validations
    }

    /**
     * Set the Lock State for an instanced item. You must have a valid Destiny Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2SetItemLockStateTest() throws ApiException {
        Destiny2EquipItem200Response response = api.destiny2SetItemLockState();
        // TODO: test validations
    }

    /**
     * Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it&#39;s an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2SetQuestTrackedStateTest() throws ApiException {
        Destiny2EquipItem200Response response = api.destiny2SetQuestTrackedState();
        // TODO: test validations
    }

    /**
     * Snapshot a loadout with the currently equipped items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2SnapshotLoadoutTest() throws ApiException {
        Destiny2EquipItem200Response response = api.destiny2SnapshotLoadout();
        // TODO: test validations
    }

    /**
     * Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it&#39;s an instanced item. itshappening.gif
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2TransferItemTest() throws ApiException {
        Destiny2EquipItem200Response response = api.destiny2TransferItem();
        // TODO: test validations
    }

    /**
     * Update the color, icon, and name of a loadout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2UpdateLoadoutIdentifiersTest() throws ApiException {
        Destiny2EquipItem200Response response = api.destiny2UpdateLoadoutIdentifiers();
        // TODO: test validations
    }

}
