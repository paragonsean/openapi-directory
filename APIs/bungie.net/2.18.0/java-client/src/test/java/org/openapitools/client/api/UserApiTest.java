/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetAvailableLocales200Response;
import org.openapitools.client.model.UserGetAvailableThemes200Response;
import org.openapitools.client.model.UserGetBungieNetUserById200Response;
import org.openapitools.client.model.UserGetCredentialTypesForTargetAccount200Response;
import org.openapitools.client.model.UserGetMembershipDataById200Response;
import org.openapitools.client.model.UserGetMembershipFromHardLinkedCredential200Response;
import org.openapitools.client.model.UserSearchByGlobalNamePost200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Returns a list of all available user themes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetAvailableThemesTest() throws ApiException {
        UserGetAvailableThemes200Response response = api.userGetAvailableThemes();
        // TODO: test validations
    }

    /**
     * Loads a bungienet user by membership id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetBungieNetUserByIdTest() throws ApiException {
        Long id = null;
        UserGetBungieNetUserById200Response response = api.userGetBungieNetUserById(id);
        // TODO: test validations
    }

    /**
     * Returns a list of credential types attached to the requested account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetCredentialTypesForTargetAccountTest() throws ApiException {
        Long membershipId = null;
        UserGetCredentialTypesForTargetAccount200Response response = api.userGetCredentialTypesForTargetAccount(membershipId);
        // TODO: test validations
    }

    /**
     * Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetMembershipDataByIdTest() throws ApiException {
        Long membershipId = null;
        Integer membershipType = null;
        UserGetMembershipDataById200Response response = api.userGetMembershipDataById(membershipId, membershipType);
        // TODO: test validations
    }

    /**
     * Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetMembershipDataForCurrentUserTest() throws ApiException {
        UserGetMembershipDataById200Response response = api.userGetMembershipDataForCurrentUser();
        // TODO: test validations
    }

    /**
     * Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetMembershipFromHardLinkedCredentialTest() throws ApiException {
        String credential = null;
        Integer crType = null;
        UserGetMembershipFromHardLinkedCredential200Response response = api.userGetMembershipFromHardLinkedCredential(credential, crType);
        // TODO: test validations
    }

    /**
     * Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userGetSanitizedPlatformDisplayNamesTest() throws ApiException {
        Long membershipId = null;
        GetAvailableLocales200Response response = api.userGetSanitizedPlatformDisplayNames(membershipId);
        // TODO: test validations
    }

    /**
     * Given the prefix of a global display name, returns all users who share that name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userSearchByGlobalNamePostTest() throws ApiException {
        Integer page = null;
        UserSearchByGlobalNamePost200Response response = api.userSearchByGlobalNamePost(page);
        // TODO: test validations
    }

    /**
     * [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userSearchByGlobalNamePrefixTest() throws ApiException {
        String displayNamePrefix = null;
        Integer page = null;
        UserSearchByGlobalNamePost200Response response = api.userSearchByGlobalNamePrefix(displayNamePrefix, page);
        // TODO: test validations
    }

}
