/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Destiny2EquipItem200Response;
import org.openapitools.client.model.ForumGetTopicForContent200Response;
import org.openapitools.client.model.GetAvailableLocales200Response;
import org.openapitools.client.model.GroupV2ApproveAllPending200Response;
import org.openapitools.client.model.GroupV2GetAdminsAndFounderOfGroup200Response;
import org.openapitools.client.model.GroupV2GetAvailableThemes200Response;
import org.openapitools.client.model.GroupV2GetBannedMembersOfGroup200Response;
import org.openapitools.client.model.GroupV2GetGroupByName200Response;
import org.openapitools.client.model.GroupV2GetGroupOptionalConversations200Response;
import org.openapitools.client.model.GroupV2GetGroupsForMember200Response;
import org.openapitools.client.model.GroupV2GetInvitedIndividuals200Response;
import org.openapitools.client.model.GroupV2GetPotentialGroupsForMember200Response;
import org.openapitools.client.model.GroupV2GetRecommendedGroups200Response;
import org.openapitools.client.model.GroupV2GetUserClanInviteSetting200Response;
import org.openapitools.client.model.GroupV2GroupSearch200Response;
import org.openapitools.client.model.GroupV2IndividualGroupInvite200Response;
import org.openapitools.client.model.GroupV2KickMember200Response;
import org.openapitools.client.model.GroupV2RecoverGroupForFounder200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupV2Api
 */
@Disabled
public class GroupV2ApiTest {

    private final GroupV2Api api = new GroupV2Api();

    /**
     * An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2AbdicateFoundershipTest() throws ApiException {
        Long founderIdNew = null;
        Long groupId = null;
        Integer membershipType = null;
        GroupV2GetUserClanInviteSetting200Response response = api.groupV2AbdicateFoundership(founderIdNew, groupId, membershipType);
        // TODO: test validations
    }

    /**
     * Add a new optional conversation/chat channel. Requires admin permissions to the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2AddOptionalConversationTest() throws ApiException {
        Long groupId = null;
        ForumGetTopicForContent200Response response = api.groupV2AddOptionalConversation(groupId);
        // TODO: test validations
    }

    /**
     * Approve all of the pending users for the given group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2ApproveAllPendingTest() throws ApiException {
        Long groupId = null;
        GroupV2ApproveAllPending200Response response = api.groupV2ApproveAllPending(groupId);
        // TODO: test validations
    }

    /**
     * Approve the given membershipId to join the group/clan as long as they have applied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2ApprovePendingTest() throws ApiException {
        Long groupId = null;
        Long membershipId = null;
        Integer membershipType = null;
        GroupV2GetUserClanInviteSetting200Response response = api.groupV2ApprovePending(groupId, membershipId, membershipType);
        // TODO: test validations
    }

    /**
     * Approve all of the pending users for the given group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2ApprovePendingForListTest() throws ApiException {
        Long groupId = null;
        GroupV2ApproveAllPending200Response response = api.groupV2ApprovePendingForList(groupId);
        // TODO: test validations
    }

    /**
     * Bans the requested member from the requested group for the specified period of time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2BanMemberTest() throws ApiException {
        Long groupId = null;
        Long membershipId = null;
        Integer membershipType = null;
        Destiny2EquipItem200Response response = api.groupV2BanMember(groupId, membershipId, membershipType);
        // TODO: test validations
    }

    /**
     * Deny all of the pending users for the given group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2DenyAllPendingTest() throws ApiException {
        Long groupId = null;
        GroupV2ApproveAllPending200Response response = api.groupV2DenyAllPending(groupId);
        // TODO: test validations
    }

    /**
     * Deny all of the pending users for the given group that match the passed-in .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2DenyPendingForListTest() throws ApiException {
        Long groupId = null;
        GroupV2ApproveAllPending200Response response = api.groupV2DenyPendingForList(groupId);
        // TODO: test validations
    }

    /**
     * Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2EditClanBannerTest() throws ApiException {
        Long groupId = null;
        Destiny2EquipItem200Response response = api.groupV2EditClanBanner(groupId);
        // TODO: test validations
    }

    /**
     * Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2EditFounderOptionsTest() throws ApiException {
        Long groupId = null;
        Destiny2EquipItem200Response response = api.groupV2EditFounderOptions(groupId);
        // TODO: test validations
    }

    /**
     * Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2EditGroupTest() throws ApiException {
        Long groupId = null;
        Destiny2EquipItem200Response response = api.groupV2EditGroup(groupId);
        // TODO: test validations
    }

    /**
     * Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2EditGroupMembershipTest() throws ApiException {
        Long groupId = null;
        Long membershipId = null;
        Integer membershipType = null;
        Integer memberType = null;
        Destiny2EquipItem200Response response = api.groupV2EditGroupMembership(groupId, membershipId, membershipType, memberType);
        // TODO: test validations
    }

    /**
     * Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2EditOptionalConversationTest() throws ApiException {
        Long conversationId = null;
        Long groupId = null;
        ForumGetTopicForContent200Response response = api.groupV2EditOptionalConversation(conversationId, groupId);
        // TODO: test validations
    }

    /**
     * Get the list of members in a given group who are of admin level or higher.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetAdminsAndFounderOfGroupTest() throws ApiException {
        Integer currentpage = null;
        Long groupId = null;
        GroupV2GetAdminsAndFounderOfGroup200Response response = api.groupV2GetAdminsAndFounderOfGroup(currentpage, groupId);
        // TODO: test validations
    }

    /**
     * Returns a list of all available group avatars for the signed-in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetAvailableAvatarsTest() throws ApiException {
        GetAvailableLocales200Response response = api.groupV2GetAvailableAvatars();
        // TODO: test validations
    }

    /**
     * Returns a list of all available group themes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetAvailableThemesTest() throws ApiException {
        GroupV2GetAvailableThemes200Response response = api.groupV2GetAvailableThemes();
        // TODO: test validations
    }

    /**
     * Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetBannedMembersOfGroupTest() throws ApiException {
        Integer currentpage = null;
        Long groupId = null;
        GroupV2GetBannedMembersOfGroup200Response response = api.groupV2GetBannedMembersOfGroup(currentpage, groupId);
        // TODO: test validations
    }

    /**
     * Get information about a specific group of the given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetGroupTest() throws ApiException {
        Long groupId = null;
        GroupV2GetGroupByName200Response response = api.groupV2GetGroup(groupId);
        // TODO: test validations
    }

    /**
     * Get information about a specific group with the given name and type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetGroupByNameTest() throws ApiException {
        String groupName = null;
        Integer groupType = null;
        GroupV2GetGroupByName200Response response = api.groupV2GetGroupByName(groupName, groupType);
        // TODO: test validations
    }

    /**
     * Get information about a specific group with the given name and type. The POST version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetGroupByNameV2Test() throws ApiException {
        GroupV2GetGroupByName200Response response = api.groupV2GetGroupByNameV2();
        // TODO: test validations
    }

    /**
     * Gets a list of available optional conversation channels and their settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetGroupOptionalConversationsTest() throws ApiException {
        Long groupId = null;
        GroupV2GetGroupOptionalConversations200Response response = api.groupV2GetGroupOptionalConversations(groupId);
        // TODO: test validations
    }

    /**
     * Get information about the groups that a given member has joined.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetGroupsForMemberTest() throws ApiException {
        Integer filter = null;
        Integer groupType = null;
        Long membershipId = null;
        Integer membershipType = null;
        GroupV2GetGroupsForMember200Response response = api.groupV2GetGroupsForMember(filter, groupType, membershipId, membershipType);
        // TODO: test validations
    }

    /**
     * Get the list of users who have been invited into the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetInvitedIndividualsTest() throws ApiException {
        Integer currentpage = null;
        Long groupId = null;
        GroupV2GetInvitedIndividuals200Response response = api.groupV2GetInvitedIndividuals(currentpage, groupId);
        // TODO: test validations
    }

    /**
     * Get the list of members in a given group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetMembersOfGroupTest() throws ApiException {
        Integer currentpage = null;
        Long groupId = null;
        Integer memberType = null;
        String nameSearch = null;
        GroupV2GetAdminsAndFounderOfGroup200Response response = api.groupV2GetMembersOfGroup(currentpage, groupId, memberType, nameSearch);
        // TODO: test validations
    }

    /**
     * Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetPendingMembershipsTest() throws ApiException {
        Integer currentpage = null;
        Long groupId = null;
        GroupV2GetInvitedIndividuals200Response response = api.groupV2GetPendingMemberships(currentpage, groupId);
        // TODO: test validations
    }

    /**
     * Get information about the groups that a given member has applied to or been invited to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetPotentialGroupsForMemberTest() throws ApiException {
        Integer filter = null;
        Integer groupType = null;
        Long membershipId = null;
        Integer membershipType = null;
        GroupV2GetPotentialGroupsForMember200Response response = api.groupV2GetPotentialGroupsForMember(filter, groupType, membershipId, membershipType);
        // TODO: test validations
    }

    /**
     * Gets groups recommended for you based on the groups to whom those you follow belong.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetRecommendedGroupsTest() throws ApiException {
        Integer createDateRange = null;
        Integer groupType = null;
        GroupV2GetRecommendedGroups200Response response = api.groupV2GetRecommendedGroups(createDateRange, groupType);
        // TODO: test validations
    }

    /**
     * Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GetUserClanInviteSettingTest() throws ApiException {
        Integer mType = null;
        GroupV2GetUserClanInviteSetting200Response response = api.groupV2GetUserClanInviteSetting(mType);
        // TODO: test validations
    }

    /**
     * Search for Groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2GroupSearchTest() throws ApiException {
        GroupV2GroupSearch200Response response = api.groupV2GroupSearch();
        // TODO: test validations
    }

    /**
     * Invite a user to join this group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2IndividualGroupInviteTest() throws ApiException {
        Long groupId = null;
        Long membershipId = null;
        Integer membershipType = null;
        GroupV2IndividualGroupInvite200Response response = api.groupV2IndividualGroupInvite(groupId, membershipId, membershipType);
        // TODO: test validations
    }

    /**
     * Cancels a pending invitation to join a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2IndividualGroupInviteCancelTest() throws ApiException {
        Long groupId = null;
        Long membershipId = null;
        Integer membershipType = null;
        GroupV2IndividualGroupInvite200Response response = api.groupV2IndividualGroupInviteCancel(groupId, membershipId, membershipType);
        // TODO: test validations
    }

    /**
     * Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2KickMemberTest() throws ApiException {
        Long groupId = null;
        Long membershipId = null;
        Integer membershipType = null;
        GroupV2KickMember200Response response = api.groupV2KickMember(groupId, membershipId, membershipType);
        // TODO: test validations
    }

    /**
     * Allows a founder to manually recover a group they can see in game but not on bungie.net
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2RecoverGroupForFounderTest() throws ApiException {
        Integer groupType = null;
        Long membershipId = null;
        Integer membershipType = null;
        GroupV2RecoverGroupForFounder200Response response = api.groupV2RecoverGroupForFounder(groupType, membershipId, membershipType);
        // TODO: test validations
    }

    /**
     * Unbans the requested member, allowing them to re-apply for membership.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupV2UnbanMemberTest() throws ApiException {
        Long groupId = null;
        Long membershipId = null;
        Integer membershipType = null;
        Destiny2EquipItem200Response response = api.groupV2UnbanMember(groupId, membershipId, membershipType);
        // TODO: test validations
    }

}
