/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Destiny2GetClanAggregateStats200Response;
import org.openapitools.client.model.Destiny2GetClanLeaderboards200Response;
import org.openapitools.client.model.Destiny2GetPublicVendors200Response;
import org.openapitools.client.model.Destiny2InsertSocketPlug200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PreviewApi
 */
@Disabled
public class PreviewApiTest {

    private final PreviewApi api = new PreviewApi();

    /**
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetClanAggregateStats_0Test() throws ApiException {
        Long groupId = null;
        String modes = null;
        Destiny2GetClanAggregateStats200Response response = api.destiny2GetClanAggregateStats_0(groupId, modes);
        // TODO: test validations
    }

    /**
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetClanLeaderboards_0Test() throws ApiException {
        Long groupId = null;
        Integer maxtop = null;
        String modes = null;
        String statid = null;
        Destiny2GetClanLeaderboards200Response response = api.destiny2GetClanLeaderboards_0(groupId, maxtop, modes, statid);
        // TODO: test validations
    }

    /**
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetLeaderboardsForCharacter_0Test() throws ApiException {
        Long characterId = null;
        Long destinyMembershipId = null;
        Integer membershipType = null;
        Integer maxtop = null;
        String modes = null;
        String statid = null;
        Destiny2GetClanLeaderboards200Response response = api.destiny2GetLeaderboardsForCharacter_0(characterId, destinyMembershipId, membershipType, maxtop, modes, statid);
        // TODO: test validations
    }

    /**
     * Gets leaderboards with the signed in user&#39;s friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetLeaderboards_0Test() throws ApiException {
        Long destinyMembershipId = null;
        Integer membershipType = null;
        Integer maxtop = null;
        String modes = null;
        String statid = null;
        Destiny2GetClanLeaderboards200Response response = api.destiny2GetLeaderboards_0(destinyMembershipId, membershipType, maxtop, modes, statid);
        // TODO: test validations
    }

    /**
     * Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor&#39;s available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: &#39;It&#39;s a long story...&#39;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2GetPublicVendors_0Test() throws ApiException {
        List<Integer> components = null;
        Destiny2GetPublicVendors200Response response = api.destiny2GetPublicVendors_0(components);
        // TODO: test validations
    }

    /**
     * Insert a &#39;free&#39; plug into an item&#39;s socket. This does not require &#39;Advanced Write Action&#39; authorization and is available to 3rd-party apps, but will only work on &#39;free and reversible&#39; socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2InsertSocketPlugFree_0Test() throws ApiException {
        Destiny2InsertSocketPlug200Response response = api.destiny2InsertSocketPlugFree_0();
        // TODO: test validations
    }

    /**
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it&#39;s much more G-rated than you might be guessing. We haven&#39;t decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for &#39;InsertPlugs&#39; from the account owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destiny2InsertSocketPlug_0Test() throws ApiException {
        Destiny2InsertSocketPlug200Response response = api.destiny2InsertSocketPlug_0();
        // TODO: test validations
    }

}
