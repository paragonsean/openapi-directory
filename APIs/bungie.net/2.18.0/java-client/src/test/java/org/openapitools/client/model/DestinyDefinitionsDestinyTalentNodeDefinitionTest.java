/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DestinyDefinitionsDestinyNodeActivationRequirement;
import org.openapitools.client.model.DestinyDefinitionsDestinyNodeStepDefinition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DestinyDefinitionsDestinyTalentNodeDefinition
 */
public class DestinyDefinitionsDestinyTalentNodeDefinitionTest {
    private final DestinyDefinitionsDestinyTalentNodeDefinition model = new DestinyDefinitionsDestinyTalentNodeDefinition();

    /**
     * Model tests for DestinyDefinitionsDestinyTalentNodeDefinition
     */
    @Test
    public void testDestinyDefinitionsDestinyTalentNodeDefinition() {
        // TODO: test DestinyDefinitionsDestinyTalentNodeDefinition
    }

    /**
     * Test the property 'autoUnlocks'
     */
    @Test
    public void autoUnlocksTest() {
        // TODO: test autoUnlocks
    }

    /**
     * Test the property 'binaryPairNodeIndex'
     */
    @Test
    public void binaryPairNodeIndexTest() {
        // TODO: test binaryPairNodeIndex
    }

    /**
     * Test the property 'column'
     */
    @Test
    public void columnTest() {
        // TODO: test column
    }

    /**
     * Test the property 'exclusiveWithNodeHashes'
     */
    @Test
    public void exclusiveWithNodeHashesTest() {
        // TODO: test exclusiveWithNodeHashes
    }

    /**
     * Test the property 'groupHash'
     */
    @Test
    public void groupHashTest() {
        // TODO: test groupHash
    }

    /**
     * Test the property 'ignoreForCompletion'
     */
    @Test
    public void ignoreForCompletionTest() {
        // TODO: test ignoreForCompletion
    }

    /**
     * Test the property 'isRandom'
     */
    @Test
    public void isRandomTest() {
        // TODO: test isRandom
    }

    /**
     * Test the property 'isRandomRepurchasable'
     */
    @Test
    public void isRandomRepurchasableTest() {
        // TODO: test isRandomRepurchasable
    }

    /**
     * Test the property 'lastStepRepeats'
     */
    @Test
    public void lastStepRepeatsTest() {
        // TODO: test lastStepRepeats
    }

    /**
     * Test the property 'layoutIdentifier'
     */
    @Test
    public void layoutIdentifierTest() {
        // TODO: test layoutIdentifier
    }

    /**
     * Test the property 'loreHash'
     */
    @Test
    public void loreHashTest() {
        // TODO: test loreHash
    }

    /**
     * Test the property 'nodeHash'
     */
    @Test
    public void nodeHashTest() {
        // TODO: test nodeHash
    }

    /**
     * Test the property 'nodeIndex'
     */
    @Test
    public void nodeIndexTest() {
        // TODO: test nodeIndex
    }

    /**
     * Test the property 'nodeStyleIdentifier'
     */
    @Test
    public void nodeStyleIdentifierTest() {
        // TODO: test nodeStyleIdentifier
    }

    /**
     * Test the property 'prerequisiteNodeIndexes'
     */
    @Test
    public void prerequisiteNodeIndexesTest() {
        // TODO: test prerequisiteNodeIndexes
    }

    /**
     * Test the property 'randomActivationRequirement'
     */
    @Test
    public void randomActivationRequirementTest() {
        // TODO: test randomActivationRequirement
    }

    /**
     * Test the property 'randomStartProgressionBarAtProgression'
     */
    @Test
    public void randomStartProgressionBarAtProgressionTest() {
        // TODO: test randomStartProgressionBarAtProgression
    }

    /**
     * Test the property 'row'
     */
    @Test
    public void rowTest() {
        // TODO: test row
    }

    /**
     * Test the property 'steps'
     */
    @Test
    public void stepsTest() {
        // TODO: test steps
    }

}
