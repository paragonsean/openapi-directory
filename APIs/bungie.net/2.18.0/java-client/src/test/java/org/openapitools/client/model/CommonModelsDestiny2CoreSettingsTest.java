/*
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.18.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CommonModelsDestiny2CoreSettings
 */
public class CommonModelsDestiny2CoreSettingsTest {
    private final CommonModelsDestiny2CoreSettings model = new CommonModelsDestiny2CoreSettings();

    /**
     * Model tests for CommonModelsDestiny2CoreSettings
     */
    @Test
    public void testCommonModelsDestiny2CoreSettings() {
        // TODO: test CommonModelsDestiny2CoreSettings
    }

    /**
     * Test the property 'activeSealsRootNodeHash'
     */
    @Test
    public void activeSealsRootNodeHashTest() {
        // TODO: test activeSealsRootNodeHash
    }

    /**
     * Test the property 'activeTriumphsRootNodeHash'
     */
    @Test
    public void activeTriumphsRootNodeHashTest() {
        // TODO: test activeTriumphsRootNodeHash
    }

    /**
     * Test the property 'ammoTypeHeavyIcon'
     */
    @Test
    public void ammoTypeHeavyIconTest() {
        // TODO: test ammoTypeHeavyIcon
    }

    /**
     * Test the property 'ammoTypePrimaryIcon'
     */
    @Test
    public void ammoTypePrimaryIconTest() {
        // TODO: test ammoTypePrimaryIcon
    }

    /**
     * Test the property 'ammoTypeSpecialIcon'
     */
    @Test
    public void ammoTypeSpecialIconTest() {
        // TODO: test ammoTypeSpecialIcon
    }

    /**
     * Test the property 'badgesRootNode'
     */
    @Test
    public void badgesRootNodeTest() {
        // TODO: test badgesRootNode
    }

    /**
     * Test the property 'collectionRootNode'
     */
    @Test
    public void collectionRootNodeTest() {
        // TODO: test collectionRootNode
    }

    /**
     * Test the property 'craftingRootNodeHash'
     */
    @Test
    public void craftingRootNodeHashTest() {
        // TODO: test craftingRootNodeHash
    }

    /**
     * Test the property 'currentRankProgressionHashes'
     */
    @Test
    public void currentRankProgressionHashesTest() {
        // TODO: test currentRankProgressionHashes
    }

    /**
     * Test the property 'currentSeasonHash'
     */
    @Test
    public void currentSeasonHashTest() {
        // TODO: test currentSeasonHash
    }

    /**
     * Test the property 'currentSeasonalArtifactHash'
     */
    @Test
    public void currentSeasonalArtifactHashTest() {
        // TODO: test currentSeasonalArtifactHash
    }

    /**
     * Test the property 'exoticCatalystsRootNodeHash'
     */
    @Test
    public void exoticCatalystsRootNodeHashTest() {
        // TODO: test exoticCatalystsRootNodeHash
    }

    /**
     * Test the property 'futureSeasonHashes'
     */
    @Test
    public void futureSeasonHashesTest() {
        // TODO: test futureSeasonHashes
    }

    /**
     * Test the property 'guardianRankConstantsHash'
     */
    @Test
    public void guardianRankConstantsHashTest() {
        // TODO: test guardianRankConstantsHash
    }

    /**
     * Test the property 'guardianRanksRootNodeHash'
     */
    @Test
    public void guardianRanksRootNodeHashTest() {
        // TODO: test guardianRanksRootNodeHash
    }

    /**
     * Test the property 'insertPlugFreeBlockedSocketTypeHashes'
     */
    @Test
    public void insertPlugFreeBlockedSocketTypeHashesTest() {
        // TODO: test insertPlugFreeBlockedSocketTypeHashes
    }

    /**
     * Test the property 'insertPlugFreeProtectedPlugItemHashes'
     */
    @Test
    public void insertPlugFreeProtectedPlugItemHashesTest() {
        // TODO: test insertPlugFreeProtectedPlugItemHashes
    }

    /**
     * Test the property 'legacySealsRootNodeHash'
     */
    @Test
    public void legacySealsRootNodeHashTest() {
        // TODO: test legacySealsRootNodeHash
    }

    /**
     * Test the property 'legacyTriumphsRootNodeHash'
     */
    @Test
    public void legacyTriumphsRootNodeHashTest() {
        // TODO: test legacyTriumphsRootNodeHash
    }

    /**
     * Test the property 'loadoutConstantsHash'
     */
    @Test
    public void loadoutConstantsHashTest() {
        // TODO: test loadoutConstantsHash
    }

    /**
     * Test the property 'loreRootNodeHash'
     */
    @Test
    public void loreRootNodeHashTest() {
        // TODO: test loreRootNodeHash
    }

    /**
     * Test the property 'medalsRootNode'
     */
    @Test
    public void medalsRootNodeTest() {
        // TODO: test medalsRootNode
    }

    /**
     * Test the property 'medalsRootNodeHash'
     */
    @Test
    public void medalsRootNodeHashTest() {
        // TODO: test medalsRootNodeHash
    }

    /**
     * Test the property 'metricsRootNode'
     */
    @Test
    public void metricsRootNodeTest() {
        // TODO: test metricsRootNode
    }

    /**
     * Test the property 'pastSeasonHashes'
     */
    @Test
    public void pastSeasonHashesTest() {
        // TODO: test pastSeasonHashes
    }

    /**
     * Test the property 'recordsRootNode'
     */
    @Test
    public void recordsRootNodeTest() {
        // TODO: test recordsRootNode
    }

    /**
     * Test the property 'seasonalChallengesPresentationNodeHash'
     */
    @Test
    public void seasonalChallengesPresentationNodeHashTest() {
        // TODO: test seasonalChallengesPresentationNodeHash
    }

    /**
     * Test the property 'undiscoveredCollectibleImage'
     */
    @Test
    public void undiscoveredCollectibleImageTest() {
        // TODO: test undiscoveredCollectibleImage
    }

}
