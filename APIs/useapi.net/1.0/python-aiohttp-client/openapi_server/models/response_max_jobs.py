# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResponseMaxJobs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, error: str=None, executing_jobs: List[str]=None):
        """ResponseMaxJobs - a model defined in OpenAPI

        :param code: The code of this ResponseMaxJobs.
        :param error: The error of this ResponseMaxJobs.
        :param executing_jobs: The executing_jobs of this ResponseMaxJobs.
        """
        self.openapi_types = {
            'code': int,
            'error': str,
            'executing_jobs': List[str]
        }

        self.attribute_map = {
            'code': 'code',
            'error': 'error',
            'executing_jobs': 'executingJobs'
        }

        self._code = code
        self._error = error
        self._executing_jobs = executing_jobs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseMaxJobs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The responseMaxJobs of this ResponseMaxJobs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ResponseMaxJobs.


        :return: The code of this ResponseMaxJobs.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ResponseMaxJobs.


        :param code: The code of this ResponseMaxJobs.
        :type code: int
        """
        allowed_values = [429]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def error(self):
        """Gets the error of this ResponseMaxJobs.


        :return: The error of this ResponseMaxJobs.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ResponseMaxJobs.


        :param error: The error of this ResponseMaxJobs.
        :type error: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def executing_jobs(self):
        """Gets the executing_jobs of this ResponseMaxJobs.


        :return: The executing_jobs of this ResponseMaxJobs.
        :rtype: List[str]
        """
        return self._executing_jobs

    @executing_jobs.setter
    def executing_jobs(self, executing_jobs):
        """Sets the executing_jobs of this ResponseMaxJobs.


        :param executing_jobs: The executing_jobs of this ResponseMaxJobs.
        :type executing_jobs: List[str]
        """
        if executing_jobs is None:
            raise ValueError("Invalid value for `executing_jobs`, must not be `None`")

        self._executing_jobs = executing_jobs
