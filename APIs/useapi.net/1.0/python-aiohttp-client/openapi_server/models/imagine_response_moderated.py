# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImagineResponseModerated(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, error: str=None, jobid: str=None, status: str=None):
        """ImagineResponseModerated - a model defined in OpenAPI

        :param code: The code of this ImagineResponseModerated.
        :param error: The error of this ImagineResponseModerated.
        :param jobid: The jobid of this ImagineResponseModerated.
        :param status: The status of this ImagineResponseModerated.
        """
        self.openapi_types = {
            'code': int,
            'error': str,
            'jobid': str,
            'status': str
        }

        self.attribute_map = {
            'code': 'code',
            'error': 'error',
            'jobid': 'jobid',
            'status': 'status'
        }

        self._code = code
        self._error = error
        self._jobid = jobid
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImagineResponseModerated':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The imagineResponseModerated of this ImagineResponseModerated.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ImagineResponseModerated.


        :return: The code of this ImagineResponseModerated.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ImagineResponseModerated.


        :param code: The code of this ImagineResponseModerated.
        :type code: int
        """
        allowed_values = [422]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def error(self):
        """Gets the error of this ImagineResponseModerated.


        :return: The error of this ImagineResponseModerated.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ImagineResponseModerated.


        :param error: The error of this ImagineResponseModerated.
        :type error: str
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def jobid(self):
        """Gets the jobid of this ImagineResponseModerated.


        :return: The jobid of this ImagineResponseModerated.
        :rtype: str
        """
        return self._jobid

    @jobid.setter
    def jobid(self, jobid):
        """Sets the jobid of this ImagineResponseModerated.


        :param jobid: The jobid of this ImagineResponseModerated.
        :type jobid: str
        """
        if jobid is None:
            raise ValueError("Invalid value for `jobid`, must not be `None`")

        self._jobid = jobid

    @property
    def status(self):
        """Gets the status of this ImagineResponseModerated.


        :return: The status of this ImagineResponseModerated.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImagineResponseModerated.


        :param status: The status of this ImagineResponseModerated.
        :type status: str
        """
        allowed_values = ["moderated"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
