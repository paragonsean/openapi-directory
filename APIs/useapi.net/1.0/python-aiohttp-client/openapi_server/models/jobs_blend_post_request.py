# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobsBlendPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blend_dimensions: str=None, blend_urls: List[str]=None, channel: str=None, discord: str=None, max_jobs: int=None, reply_ref: str=None, reply_url: str=None, server: str=None):
        """JobsBlendPostRequest - a model defined in OpenAPI

        :param blend_dimensions: The blend_dimensions of this JobsBlendPostRequest.
        :param blend_urls: The blend_urls of this JobsBlendPostRequest.
        :param channel: The channel of this JobsBlendPostRequest.
        :param discord: The discord of this JobsBlendPostRequest.
        :param max_jobs: The max_jobs of this JobsBlendPostRequest.
        :param reply_ref: The reply_ref of this JobsBlendPostRequest.
        :param reply_url: The reply_url of this JobsBlendPostRequest.
        :param server: The server of this JobsBlendPostRequest.
        """
        self.openapi_types = {
            'blend_dimensions': str,
            'blend_urls': List[str],
            'channel': str,
            'discord': str,
            'max_jobs': int,
            'reply_ref': str,
            'reply_url': str,
            'server': str
        }

        self.attribute_map = {
            'blend_dimensions': 'blendDimensions',
            'blend_urls': 'blendUrls',
            'channel': 'channel',
            'discord': 'discord',
            'max_jobs': 'maxJobs',
            'reply_ref': 'replyRef',
            'reply_url': 'replyUrl',
            'server': 'server'
        }

        self._blend_dimensions = blend_dimensions
        self._blend_urls = blend_urls
        self._channel = channel
        self._discord = discord
        self._max_jobs = max_jobs
        self._reply_ref = reply_ref
        self._reply_url = reply_url
        self._server = server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobsBlendPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _jobs_blend_post_request of this JobsBlendPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blend_dimensions(self):
        """Gets the blend_dimensions of this JobsBlendPostRequest.


        :return: The blend_dimensions of this JobsBlendPostRequest.
        :rtype: str
        """
        return self._blend_dimensions

    @blend_dimensions.setter
    def blend_dimensions(self, blend_dimensions):
        """Sets the blend_dimensions of this JobsBlendPostRequest.


        :param blend_dimensions: The blend_dimensions of this JobsBlendPostRequest.
        :type blend_dimensions: str
        """
        allowed_values = ["Portrait", "Square", "Landscape"]  # noqa: E501
        if blend_dimensions not in allowed_values:
            raise ValueError(
                "Invalid value for `blend_dimensions` ({0}), must be one of {1}"
                .format(blend_dimensions, allowed_values)
            )

        self._blend_dimensions = blend_dimensions

    @property
    def blend_urls(self):
        """Gets the blend_urls of this JobsBlendPostRequest.

        Must contain at least 2 valid URL image links, up to 5 URL image links supported

        :return: The blend_urls of this JobsBlendPostRequest.
        :rtype: List[str]
        """
        return self._blend_urls

    @blend_urls.setter
    def blend_urls(self, blend_urls):
        """Sets the blend_urls of this JobsBlendPostRequest.

        Must contain at least 2 valid URL image links, up to 5 URL image links supported

        :param blend_urls: The blend_urls of this JobsBlendPostRequest.
        :type blend_urls: List[str]
        """
        if blend_urls is None:
            raise ValueError("Invalid value for `blend_urls`, must not be `None`")
        if blend_urls is not None and len(blend_urls) > 5:
            raise ValueError("Invalid value for `blend_urls`, number of items must be less than or equal to `5`")
        if blend_urls is not None and len(blend_urls) < 2:
            raise ValueError("Invalid value for `blend_urls`, number of items must be greater than or equal to `2`")

        self._blend_urls = blend_urls

    @property
    def channel(self):
        """Gets the channel of this JobsBlendPostRequest.

        Discord channel id

        :return: The channel of this JobsBlendPostRequest.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this JobsBlendPostRequest.

        Discord channel id

        :param channel: The channel of this JobsBlendPostRequest.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def discord(self):
        """Gets the discord of this JobsBlendPostRequest.

        Discord token

        :return: The discord of this JobsBlendPostRequest.
        :rtype: str
        """
        return self._discord

    @discord.setter
    def discord(self, discord):
        """Sets the discord of this JobsBlendPostRequest.

        Discord token

        :param discord: The discord of this JobsBlendPostRequest.
        :type discord: str
        """
        if discord is None:
            raise ValueError("Invalid value for `discord`, must not be `None`")

        self._discord = discord

    @property
    def max_jobs(self):
        """Gets the max_jobs of this JobsBlendPostRequest.

        Optional Maximum Concurrent Jobs for current Midjourney subscription

        :return: The max_jobs of this JobsBlendPostRequest.
        :rtype: int
        """
        return self._max_jobs

    @max_jobs.setter
    def max_jobs(self, max_jobs):
        """Sets the max_jobs of this JobsBlendPostRequest.

        Optional Maximum Concurrent Jobs for current Midjourney subscription

        :param max_jobs: The max_jobs of this JobsBlendPostRequest.
        :type max_jobs: int
        """
        if max_jobs is not None and max_jobs > 15:
            raise ValueError("Invalid value for `max_jobs`, must be a value less than or equal to `15`")
        if max_jobs is not None and max_jobs < 1:
            raise ValueError("Invalid value for `max_jobs`, must be a value greater than or equal to `1`")

        self._max_jobs = max_jobs

    @property
    def reply_ref(self):
        """Gets the reply_ref of this JobsBlendPostRequest.

        Optional reference id which will be stored and returned along with this job response / result

        :return: The reply_ref of this JobsBlendPostRequest.
        :rtype: str
        """
        return self._reply_ref

    @reply_ref.setter
    def reply_ref(self, reply_ref):
        """Sets the reply_ref of this JobsBlendPostRequest.

        Optional reference id which will be stored and returned along with this job response / result

        :param reply_ref: The reply_ref of this JobsBlendPostRequest.
        :type reply_ref: str
        """

        self._reply_ref = reply_ref

    @property
    def reply_url(self):
        """Gets the reply_url of this JobsBlendPostRequest.

        Optional callback URL, API will call the provided replyUrl once generation completed

        :return: The reply_url of this JobsBlendPostRequest.
        :rtype: str
        """
        return self._reply_url

    @reply_url.setter
    def reply_url(self, reply_url):
        """Sets the reply_url of this JobsBlendPostRequest.

        Optional callback URL, API will call the provided replyUrl once generation completed

        :param reply_url: The reply_url of this JobsBlendPostRequest.
        :type reply_url: str
        """

        self._reply_url = reply_url

    @property
    def server(self):
        """Gets the server of this JobsBlendPostRequest.

        Discord server id

        :return: The server of this JobsBlendPostRequest.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this JobsBlendPostRequest.

        Discord server id

        :param server: The server of this JobsBlendPostRequest.
        :type server: str
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")

        self._server = server
