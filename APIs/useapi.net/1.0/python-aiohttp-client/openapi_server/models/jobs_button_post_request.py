# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobsButtonPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, button: str=None, discord: str=None, jobid: str=None, max_jobs: int=None, reply_ref: str=None, reply_url: str=None):
        """JobsButtonPostRequest - a model defined in OpenAPI

        :param button: The button of this JobsButtonPostRequest.
        :param discord: The discord of this JobsButtonPostRequest.
        :param jobid: The jobid of this JobsButtonPostRequest.
        :param max_jobs: The max_jobs of this JobsButtonPostRequest.
        :param reply_ref: The reply_ref of this JobsButtonPostRequest.
        :param reply_url: The reply_url of this JobsButtonPostRequest.
        """
        self.openapi_types = {
            'button': str,
            'discord': str,
            'jobid': str,
            'max_jobs': int,
            'reply_ref': str,
            'reply_url': str
        }

        self.attribute_map = {
            'button': 'button',
            'discord': 'discord',
            'jobid': 'jobid',
            'max_jobs': 'maxJobs',
            'reply_ref': 'replyRef',
            'reply_url': 'replyUrl'
        }

        self._button = button
        self._discord = discord
        self._jobid = jobid
        self._max_jobs = max_jobs
        self._reply_ref = reply_ref
        self._reply_url = reply_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobsButtonPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _jobs_button_post_request of this JobsButtonPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def button(self):
        """Gets the button of this JobsButtonPostRequest.

        button from buttons array of job referenced via jobid

        :return: The button of this JobsButtonPostRequest.
        :rtype: str
        """
        return self._button

    @button.setter
    def button(self, button):
        """Sets the button of this JobsButtonPostRequest.

        button from buttons array of job referenced via jobid

        :param button: The button of this JobsButtonPostRequest.
        :type button: str
        """
        allowed_values = ["U1", "U2", "U3", "U4", "V1", "V2", "V3", "V4", "⬅️", "➡️", "⬆️", "⬇️", "🔄", "Vary (Strong)", "Vary (Subtle)", "Zoom Out 1.5x", "Zoom Out 2x", "Make Square", "Make Variations", "Remaster"]  # noqa: E501
        if button not in allowed_values:
            raise ValueError(
                "Invalid value for `button` ({0}), must be one of {1}"
                .format(button, allowed_values)
            )

        self._button = button

    @property
    def discord(self):
        """Gets the discord of this JobsButtonPostRequest.

        Optional Discord token, if provided will override discord value of referenced jobid

        :return: The discord of this JobsButtonPostRequest.
        :rtype: str
        """
        return self._discord

    @discord.setter
    def discord(self, discord):
        """Sets the discord of this JobsButtonPostRequest.

        Optional Discord token, if provided will override discord value of referenced jobid

        :param discord: The discord of this JobsButtonPostRequest.
        :type discord: str
        """

        self._discord = discord

    @property
    def jobid(self):
        """Gets the jobid of this JobsButtonPostRequest.

        jobid of successfully completed (status set to completed) jobs/imagine or jobs/button job

        :return: The jobid of this JobsButtonPostRequest.
        :rtype: str
        """
        return self._jobid

    @jobid.setter
    def jobid(self, jobid):
        """Sets the jobid of this JobsButtonPostRequest.

        jobid of successfully completed (status set to completed) jobs/imagine or jobs/button job

        :param jobid: The jobid of this JobsButtonPostRequest.
        :type jobid: str
        """
        if jobid is None:
            raise ValueError("Invalid value for `jobid`, must not be `None`")

        self._jobid = jobid

    @property
    def max_jobs(self):
        """Gets the max_jobs of this JobsButtonPostRequest.

        Optional Maximum Concurrent Jobs for current Midjourney subscription

        :return: The max_jobs of this JobsButtonPostRequest.
        :rtype: int
        """
        return self._max_jobs

    @max_jobs.setter
    def max_jobs(self, max_jobs):
        """Sets the max_jobs of this JobsButtonPostRequest.

        Optional Maximum Concurrent Jobs for current Midjourney subscription

        :param max_jobs: The max_jobs of this JobsButtonPostRequest.
        :type max_jobs: int
        """
        if max_jobs is not None and max_jobs > 15:
            raise ValueError("Invalid value for `max_jobs`, must be a value less than or equal to `15`")
        if max_jobs is not None and max_jobs < 1:
            raise ValueError("Invalid value for `max_jobs`, must be a value greater than or equal to `1`")

        self._max_jobs = max_jobs

    @property
    def reply_ref(self):
        """Gets the reply_ref of this JobsButtonPostRequest.

        Optional reference id which will be stored and returned along with this job response / result

        :return: The reply_ref of this JobsButtonPostRequest.
        :rtype: str
        """
        return self._reply_ref

    @reply_ref.setter
    def reply_ref(self, reply_ref):
        """Sets the reply_ref of this JobsButtonPostRequest.

        Optional reference id which will be stored and returned along with this job response / result

        :param reply_ref: The reply_ref of this JobsButtonPostRequest.
        :type reply_ref: str
        """

        self._reply_ref = reply_ref

    @property
    def reply_url(self):
        """Gets the reply_url of this JobsButtonPostRequest.

        Optional callback URL, API will call the provided replyUrl once generation completed

        :return: The reply_url of this JobsButtonPostRequest.
        :rtype: str
        """
        return self._reply_url

    @reply_url.setter
    def reply_url(self, reply_url):
        """Sets the reply_url of this JobsButtonPostRequest.

        Optional callback URL, API will call the provided replyUrl once generation completed

        :param reply_url: The reply_url of this JobsButtonPostRequest.
        :type reply_url: str
        """

        self._reply_url = reply_url
