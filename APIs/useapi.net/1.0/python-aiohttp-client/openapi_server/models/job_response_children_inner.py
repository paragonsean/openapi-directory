# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobResponseChildrenInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, button: str=None, jobid: str=None, message_id: str=None):
        """JobResponseChildrenInner - a model defined in OpenAPI

        :param button: The button of this JobResponseChildrenInner.
        :param jobid: The jobid of this JobResponseChildrenInner.
        :param message_id: The message_id of this JobResponseChildrenInner.
        """
        self.openapi_types = {
            'button': str,
            'jobid': str,
            'message_id': str
        }

        self.attribute_map = {
            'button': 'button',
            'jobid': 'jobid',
            'message_id': 'messageId'
        }

        self._button = button
        self._jobid = jobid
        self._message_id = message_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobResponseChildrenInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The jobResponse_children_inner of this JobResponseChildrenInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def button(self):
        """Gets the button of this JobResponseChildrenInner.


        :return: The button of this JobResponseChildrenInner.
        :rtype: str
        """
        return self._button

    @button.setter
    def button(self, button):
        """Sets the button of this JobResponseChildrenInner.


        :param button: The button of this JobResponseChildrenInner.
        :type button: str
        """
        allowed_values = ["U1", "U2", "U3", "U4", "V1", "V2", "V3", "V4", "‚¨ÖÔ∏è", "‚û°Ô∏è", "‚¨ÜÔ∏è", "‚¨áÔ∏è", "üîÑ", "Vary (Strong)", "Vary (Subtle)", "Zoom Out 1.5x", "Zoom Out 2x", "Make Square", "Make Variations", "Remaster"]  # noqa: E501
        if button not in allowed_values:
            raise ValueError(
                "Invalid value for `button` ({0}), must be one of {1}"
                .format(button, allowed_values)
            )

        self._button = button

    @property
    def jobid(self):
        """Gets the jobid of this JobResponseChildrenInner.


        :return: The jobid of this JobResponseChildrenInner.
        :rtype: str
        """
        return self._jobid

    @jobid.setter
    def jobid(self, jobid):
        """Sets the jobid of this JobResponseChildrenInner.


        :param jobid: The jobid of this JobResponseChildrenInner.
        :type jobid: str
        """
        if jobid is None:
            raise ValueError("Invalid value for `jobid`, must not be `None`")

        self._jobid = jobid

    @property
    def message_id(self):
        """Gets the message_id of this JobResponseChildrenInner.


        :return: The message_id of this JobResponseChildrenInner.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this JobResponseChildrenInner.


        :param message_id: The message_id of this JobResponseChildrenInner.
        :type message_id: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")

        self._message_id = message_id
