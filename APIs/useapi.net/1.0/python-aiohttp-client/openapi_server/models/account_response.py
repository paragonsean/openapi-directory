# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, email: str=None, name: str=None, sub: str=None, verified: str=None):
        """AccountResponse - a model defined in OpenAPI

        :param created: The created of this AccountResponse.
        :param email: The email of this AccountResponse.
        :param name: The name of this AccountResponse.
        :param sub: The sub of this AccountResponse.
        :param verified: The verified of this AccountResponse.
        """
        self.openapi_types = {
            'created': str,
            'email': str,
            'name': str,
            'sub': str,
            'verified': str
        }

        self.attribute_map = {
            'created': 'created',
            'email': 'email',
            'name': 'name',
            'sub': 'sub',
            'verified': 'verified'
        }

        self._created = created
        self._email = email
        self._name = name
        self._sub = sub
        self._verified = verified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accountResponse of this AccountResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this AccountResponse.


        :return: The created of this AccountResponse.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AccountResponse.


        :param created: The created of this AccountResponse.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def email(self):
        """Gets the email of this AccountResponse.


        :return: The email of this AccountResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountResponse.


        :param email: The email of this AccountResponse.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def name(self):
        """Gets the name of this AccountResponse.


        :return: The name of this AccountResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountResponse.


        :param name: The name of this AccountResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sub(self):
        """Gets the sub of this AccountResponse.


        :return: The sub of this AccountResponse.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this AccountResponse.


        :param sub: The sub of this AccountResponse.
        :type sub: str
        """
        if sub is None:
            raise ValueError("Invalid value for `sub`, must not be `None`")

        self._sub = sub

    @property
    def verified(self):
        """Gets the verified of this AccountResponse.


        :return: The verified of this AccountResponse.
        :rtype: str
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this AccountResponse.


        :param verified: The verified of this AccountResponse.
        :type verified: str
        """
        if verified is None:
            raise ValueError("Invalid value for `verified`, must not be `None`")

        self._verified = verified
