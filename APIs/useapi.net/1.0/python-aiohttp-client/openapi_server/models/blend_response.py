# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BlendResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blend_dimensions: str=None, blend_urls: List[str]=None, channel: str=None, code: int=None, content: str=None, created: str=None, jobid: str=None, max_jobs: int=None, message_id: str=None, server: str=None, status: str=None, timestamp: str=None, updated: str=None, verb: str=None):
        """BlendResponse - a model defined in OpenAPI

        :param blend_dimensions: The blend_dimensions of this BlendResponse.
        :param blend_urls: The blend_urls of this BlendResponse.
        :param channel: The channel of this BlendResponse.
        :param code: The code of this BlendResponse.
        :param content: The content of this BlendResponse.
        :param created: The created of this BlendResponse.
        :param jobid: The jobid of this BlendResponse.
        :param max_jobs: The max_jobs of this BlendResponse.
        :param message_id: The message_id of this BlendResponse.
        :param server: The server of this BlendResponse.
        :param status: The status of this BlendResponse.
        :param timestamp: The timestamp of this BlendResponse.
        :param updated: The updated of this BlendResponse.
        :param verb: The verb of this BlendResponse.
        """
        self.openapi_types = {
            'blend_dimensions': str,
            'blend_urls': List[str],
            'channel': str,
            'code': int,
            'content': str,
            'created': str,
            'jobid': str,
            'max_jobs': int,
            'message_id': str,
            'server': str,
            'status': str,
            'timestamp': str,
            'updated': str,
            'verb': str
        }

        self.attribute_map = {
            'blend_dimensions': 'blendDimensions',
            'blend_urls': 'blendUrls',
            'channel': 'channel',
            'code': 'code',
            'content': 'content',
            'created': 'created',
            'jobid': 'jobid',
            'max_jobs': 'maxJobs',
            'message_id': 'messageId',
            'server': 'server',
            'status': 'status',
            'timestamp': 'timestamp',
            'updated': 'updated',
            'verb': 'verb'
        }

        self._blend_dimensions = blend_dimensions
        self._blend_urls = blend_urls
        self._channel = channel
        self._code = code
        self._content = content
        self._created = created
        self._jobid = jobid
        self._max_jobs = max_jobs
        self._message_id = message_id
        self._server = server
        self._status = status
        self._timestamp = timestamp
        self._updated = updated
        self._verb = verb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlendResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The blendResponse of this BlendResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blend_dimensions(self):
        """Gets the blend_dimensions of this BlendResponse.


        :return: The blend_dimensions of this BlendResponse.
        :rtype: str
        """
        return self._blend_dimensions

    @blend_dimensions.setter
    def blend_dimensions(self, blend_dimensions):
        """Sets the blend_dimensions of this BlendResponse.


        :param blend_dimensions: The blend_dimensions of this BlendResponse.
        :type blend_dimensions: str
        """
        allowed_values = ["Portrait", "Square", "Landscape"]  # noqa: E501
        if blend_dimensions not in allowed_values:
            raise ValueError(
                "Invalid value for `blend_dimensions` ({0}), must be one of {1}"
                .format(blend_dimensions, allowed_values)
            )

        self._blend_dimensions = blend_dimensions

    @property
    def blend_urls(self):
        """Gets the blend_urls of this BlendResponse.


        :return: The blend_urls of this BlendResponse.
        :rtype: List[str]
        """
        return self._blend_urls

    @blend_urls.setter
    def blend_urls(self, blend_urls):
        """Sets the blend_urls of this BlendResponse.


        :param blend_urls: The blend_urls of this BlendResponse.
        :type blend_urls: List[str]
        """
        if blend_urls is None:
            raise ValueError("Invalid value for `blend_urls`, must not be `None`")

        self._blend_urls = blend_urls

    @property
    def channel(self):
        """Gets the channel of this BlendResponse.


        :return: The channel of this BlendResponse.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this BlendResponse.


        :param channel: The channel of this BlendResponse.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def code(self):
        """Gets the code of this BlendResponse.


        :return: The code of this BlendResponse.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BlendResponse.


        :param code: The code of this BlendResponse.
        :type code: int
        """
        allowed_values = [200]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def content(self):
        """Gets the content of this BlendResponse.

        Contains message generated by Midjourney reflecting current generation parameters and progress

        :return: The content of this BlendResponse.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this BlendResponse.

        Contains message generated by Midjourney reflecting current generation parameters and progress

        :param content: The content of this BlendResponse.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def created(self):
        """Gets the created of this BlendResponse.


        :return: The created of this BlendResponse.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this BlendResponse.


        :param created: The created of this BlendResponse.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def jobid(self):
        """Gets the jobid of this BlendResponse.

        Use returned jobid value to retrieve job status and results

        :return: The jobid of this BlendResponse.
        :rtype: str
        """
        return self._jobid

    @jobid.setter
    def jobid(self, jobid):
        """Sets the jobid of this BlendResponse.

        Use returned jobid value to retrieve job status and results

        :param jobid: The jobid of this BlendResponse.
        :type jobid: str
        """
        if jobid is None:
            raise ValueError("Invalid value for `jobid`, must not be `None`")

        self._jobid = jobid

    @property
    def max_jobs(self):
        """Gets the max_jobs of this BlendResponse.


        :return: The max_jobs of this BlendResponse.
        :rtype: int
        """
        return self._max_jobs

    @max_jobs.setter
    def max_jobs(self, max_jobs):
        """Sets the max_jobs of this BlendResponse.


        :param max_jobs: The max_jobs of this BlendResponse.
        :type max_jobs: int
        """
        if max_jobs is None:
            raise ValueError("Invalid value for `max_jobs`, must not be `None`")

        self._max_jobs = max_jobs

    @property
    def message_id(self):
        """Gets the message_id of this BlendResponse.


        :return: The message_id of this BlendResponse.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this BlendResponse.


        :param message_id: The message_id of this BlendResponse.
        :type message_id: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")

        self._message_id = message_id

    @property
    def server(self):
        """Gets the server of this BlendResponse.


        :return: The server of this BlendResponse.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this BlendResponse.


        :param server: The server of this BlendResponse.
        :type server: str
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")

        self._server = server

    @property
    def status(self):
        """Gets the status of this BlendResponse.


        :return: The status of this BlendResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BlendResponse.


        :param status: The status of this BlendResponse.
        :type status: str
        """
        allowed_values = ["started"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this BlendResponse.


        :return: The timestamp of this BlendResponse.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BlendResponse.


        :param timestamp: The timestamp of this BlendResponse.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def updated(self):
        """Gets the updated of this BlendResponse.


        :return: The updated of this BlendResponse.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this BlendResponse.


        :param updated: The updated of this BlendResponse.
        :type updated: str
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")

        self._updated = updated

    @property
    def verb(self):
        """Gets the verb of this BlendResponse.


        :return: The verb of this BlendResponse.
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this BlendResponse.


        :param verb: The verb of this BlendResponse.
        :type verb: str
        """
        allowed_values = ["blend"]  # noqa: E501
        if verb not in allowed_values:
            raise ValueError(
                "Invalid value for `verb` ({0}), must be one of {1}"
                .format(verb, allowed_values)
            )

        self._verb = verb
