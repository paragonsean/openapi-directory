# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ButtonResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, button: str=None, channel: str=None, code: int=None, created: str=None, jobid: str=None, max_jobs: int=None, parent_job_id: str=None, server: str=None, status: str=None, updated: str=None, verb: str=None):
        """ButtonResponse - a model defined in OpenAPI

        :param button: The button of this ButtonResponse.
        :param channel: The channel of this ButtonResponse.
        :param code: The code of this ButtonResponse.
        :param created: The created of this ButtonResponse.
        :param jobid: The jobid of this ButtonResponse.
        :param max_jobs: The max_jobs of this ButtonResponse.
        :param parent_job_id: The parent_job_id of this ButtonResponse.
        :param server: The server of this ButtonResponse.
        :param status: The status of this ButtonResponse.
        :param updated: The updated of this ButtonResponse.
        :param verb: The verb of this ButtonResponse.
        """
        self.openapi_types = {
            'button': str,
            'channel': str,
            'code': int,
            'created': str,
            'jobid': str,
            'max_jobs': int,
            'parent_job_id': str,
            'server': str,
            'status': str,
            'updated': str,
            'verb': str
        }

        self.attribute_map = {
            'button': 'button',
            'channel': 'channel',
            'code': 'code',
            'created': 'created',
            'jobid': 'jobid',
            'max_jobs': 'maxJobs',
            'parent_job_id': 'parentJobId',
            'server': 'server',
            'status': 'status',
            'updated': 'updated',
            'verb': 'verb'
        }

        self._button = button
        self._channel = channel
        self._code = code
        self._created = created
        self._jobid = jobid
        self._max_jobs = max_jobs
        self._parent_job_id = parent_job_id
        self._server = server
        self._status = status
        self._updated = updated
        self._verb = verb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ButtonResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The buttonResponse of this ButtonResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def button(self):
        """Gets the button of this ButtonResponse.


        :return: The button of this ButtonResponse.
        :rtype: str
        """
        return self._button

    @button.setter
    def button(self, button):
        """Sets the button of this ButtonResponse.


        :param button: The button of this ButtonResponse.
        :type button: str
        """
        allowed_values = ["U1", "U2", "U3", "U4", "V1", "V2", "V3", "V4", "‚¨ÖÔ∏è", "‚û°Ô∏è", "‚¨ÜÔ∏è", "‚¨áÔ∏è", "üîÑ", "Vary (Strong)", "Vary (Subtle)", "Zoom Out 1.5x", "Zoom Out 2x", "Make Square", "Make Variations", "Remaster"]  # noqa: E501
        if button not in allowed_values:
            raise ValueError(
                "Invalid value for `button` ({0}), must be one of {1}"
                .format(button, allowed_values)
            )

        self._button = button

    @property
    def channel(self):
        """Gets the channel of this ButtonResponse.


        :return: The channel of this ButtonResponse.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ButtonResponse.


        :param channel: The channel of this ButtonResponse.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def code(self):
        """Gets the code of this ButtonResponse.


        :return: The code of this ButtonResponse.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ButtonResponse.


        :param code: The code of this ButtonResponse.
        :type code: int
        """
        allowed_values = [200]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def created(self):
        """Gets the created of this ButtonResponse.


        :return: The created of this ButtonResponse.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ButtonResponse.


        :param created: The created of this ButtonResponse.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def jobid(self):
        """Gets the jobid of this ButtonResponse.

        Use returned jobid value to retrieve job status and results

        :return: The jobid of this ButtonResponse.
        :rtype: str
        """
        return self._jobid

    @jobid.setter
    def jobid(self, jobid):
        """Sets the jobid of this ButtonResponse.

        Use returned jobid value to retrieve job status and results

        :param jobid: The jobid of this ButtonResponse.
        :type jobid: str
        """
        if jobid is None:
            raise ValueError("Invalid value for `jobid`, must not be `None`")

        self._jobid = jobid

    @property
    def max_jobs(self):
        """Gets the max_jobs of this ButtonResponse.


        :return: The max_jobs of this ButtonResponse.
        :rtype: int
        """
        return self._max_jobs

    @max_jobs.setter
    def max_jobs(self, max_jobs):
        """Sets the max_jobs of this ButtonResponse.


        :param max_jobs: The max_jobs of this ButtonResponse.
        :type max_jobs: int
        """
        if max_jobs is None:
            raise ValueError("Invalid value for `max_jobs`, must not be `None`")

        self._max_jobs = max_jobs

    @property
    def parent_job_id(self):
        """Gets the parent_job_id of this ButtonResponse.


        :return: The parent_job_id of this ButtonResponse.
        :rtype: str
        """
        return self._parent_job_id

    @parent_job_id.setter
    def parent_job_id(self, parent_job_id):
        """Sets the parent_job_id of this ButtonResponse.


        :param parent_job_id: The parent_job_id of this ButtonResponse.
        :type parent_job_id: str
        """
        if parent_job_id is None:
            raise ValueError("Invalid value for `parent_job_id`, must not be `None`")

        self._parent_job_id = parent_job_id

    @property
    def server(self):
        """Gets the server of this ButtonResponse.


        :return: The server of this ButtonResponse.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ButtonResponse.


        :param server: The server of this ButtonResponse.
        :type server: str
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")

        self._server = server

    @property
    def status(self):
        """Gets the status of this ButtonResponse.


        :return: The status of this ButtonResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ButtonResponse.


        :param status: The status of this ButtonResponse.
        :type status: str
        """
        allowed_values = ["started", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this ButtonResponse.


        :return: The updated of this ButtonResponse.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ButtonResponse.


        :param updated: The updated of this ButtonResponse.
        :type updated: str
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")

        self._updated = updated

    @property
    def verb(self):
        """Gets the verb of this ButtonResponse.


        :return: The verb of this ButtonResponse.
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this ButtonResponse.


        :param verb: The verb of this ButtonResponse.
        :type verb: str
        """
        allowed_values = ["button"]  # noqa: E501
        if verb not in allowed_values:
            raise ValueError(
                "Invalid value for `verb` ({0}), must be one of {1}"
                .format(verb, allowed_values)
            )

        self._verb = verb
