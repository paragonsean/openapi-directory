/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountResponse.h"
#include "OAIBlendResponse.h"
#include "OAIButtonResponse.h"
#include "OAIButtonResponseErrorUpscaled.h"
#include "OAIDescribeResponse.h"
#include "OAIImagineResponse.h"
#include "OAIImagineResponseModerated.h"
#include "OAIJobCancelResponse.h"
#include "OAIJobResponse.h"
#include "OAIResponseError.h"
#include "OAIResponseMaxJobs.h"
#include "OAI_jobs_blend_post_request.h"
#include "OAI_jobs_button_post_request.h"
#include "OAI_jobs_describe_post_request.h"
#include "OAI_jobs_imagine_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void accountGet();

    /**
    * @param[in]  oai_jobs_blend_post_request OAI_jobs_blend_post_request [required]
    */
    virtual void jobsBlendPost(const OAI_jobs_blend_post_request &oai_jobs_blend_post_request);

    /**
    * @param[in]  oai_jobs_button_post_request OAI_jobs_button_post_request [required]
    */
    virtual void jobsButtonPost(const OAI_jobs_button_post_request &oai_jobs_button_post_request);

    /**
    * @param[in]  jobid QString [required]
    */
    virtual void jobsCancelGet(const QString &jobid);

    /**
    * @param[in]  oai_jobs_describe_post_request OAI_jobs_describe_post_request [required]
    */
    virtual void jobsDescribePost(const OAI_jobs_describe_post_request &oai_jobs_describe_post_request);


    virtual void jobsGet();

    /**
    * @param[in]  jobid QString [required]
    */
    virtual void jobsGet_1(const QString &jobid);

    /**
    * @param[in]  oai_jobs_imagine_post_request OAI_jobs_imagine_post_request [required]
    */
    virtual void jobsImaginePost(const OAI_jobs_imagine_post_request &oai_jobs_imagine_post_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountGetCallback(OAIHttpRequestWorker *worker);
    void jobsBlendPostCallback(OAIHttpRequestWorker *worker);
    void jobsButtonPostCallback(OAIHttpRequestWorker *worker);
    void jobsCancelGetCallback(OAIHttpRequestWorker *worker);
    void jobsDescribePostCallback(OAIHttpRequestWorker *worker);
    void jobsGetCallback(OAIHttpRequestWorker *worker);
    void jobsGet_1Callback(OAIHttpRequestWorker *worker);
    void jobsImaginePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountGetSignal(OAIAccountResponse summary);
    void jobsBlendPostSignal(OAIBlendResponse summary);
    void jobsButtonPostSignal(OAIButtonResponse summary);
    void jobsCancelGetSignal(OAIJobCancelResponse summary);
    void jobsDescribePostSignal(OAIDescribeResponse summary);
    void jobsGetSignal(QList<QString> summary);
    void jobsGet_1Signal(OAIJobResponse summary);
    void jobsImaginePostSignal(OAIImagineResponse summary);


    void accountGetSignalFull(OAIHttpRequestWorker *worker, OAIAccountResponse summary);
    void jobsBlendPostSignalFull(OAIHttpRequestWorker *worker, OAIBlendResponse summary);
    void jobsButtonPostSignalFull(OAIHttpRequestWorker *worker, OAIButtonResponse summary);
    void jobsCancelGetSignalFull(OAIHttpRequestWorker *worker, OAIJobCancelResponse summary);
    void jobsDescribePostSignalFull(OAIHttpRequestWorker *worker, OAIDescribeResponse summary);
    void jobsGetSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void jobsGet_1SignalFull(OAIHttpRequestWorker *worker, OAIJobResponse summary);
    void jobsImaginePostSignalFull(OAIHttpRequestWorker *worker, OAIImagineResponse summary);

    Q_DECL_DEPRECATED_X("Use accountGetSignalError() instead")
    void accountGetSignalE(OAIAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSignalError(OAIAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsBlendPostSignalError() instead")
    void jobsBlendPostSignalE(OAIBlendResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsBlendPostSignalError(OAIBlendResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsButtonPostSignalError() instead")
    void jobsButtonPostSignalE(OAIButtonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsButtonPostSignalError(OAIButtonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsCancelGetSignalError() instead")
    void jobsCancelGetSignalE(OAIJobCancelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCancelGetSignalError(OAIJobCancelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsDescribePostSignalError() instead")
    void jobsDescribePostSignalE(OAIDescribeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsDescribePostSignalError(OAIDescribeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetSignalError() instead")
    void jobsGetSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGet_1SignalError() instead")
    void jobsGet_1SignalE(OAIJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGet_1SignalError(OAIJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsImaginePostSignalError() instead")
    void jobsImaginePostSignalE(OAIImagineResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsImaginePostSignalError(OAIImagineResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountGetSignalErrorFull() instead")
    void accountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsBlendPostSignalErrorFull() instead")
    void jobsBlendPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsBlendPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsButtonPostSignalErrorFull() instead")
    void jobsButtonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsButtonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsCancelGetSignalErrorFull() instead")
    void jobsCancelGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCancelGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsDescribePostSignalErrorFull() instead")
    void jobsDescribePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsDescribePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetSignalErrorFull() instead")
    void jobsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGet_1SignalErrorFull() instead")
    void jobsGet_1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGet_1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsImaginePostSignalErrorFull() instead")
    void jobsImaginePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsImaginePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
