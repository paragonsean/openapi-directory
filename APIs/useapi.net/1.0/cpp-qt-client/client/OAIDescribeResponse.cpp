/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeResponse::OAIDescribeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeResponse::OAIDescribeResponse() {
    this->initializeModel();
}

OAIDescribeResponse::~OAIDescribeResponse() {}

void OAIDescribeResponse::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_describe_url_isSet = false;
    m_describe_url_isValid = false;

    m_embeds_isSet = false;
    m_embeds_isValid = false;

    m_jobid_isSet = false;
    m_jobid_isValid = false;

    m_max_jobs_isSet = false;
    m_max_jobs_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_verb_isSet = false;
    m_verb_isValid = false;
}

void OAIDescribeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeResponse::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_describe_url_isValid = ::OpenAPI::fromJsonValue(m_describe_url, json[QString("describeUrl")]);
    m_describe_url_isSet = !json[QString("describeUrl")].isNull() && m_describe_url_isValid;

    m_embeds_isValid = ::OpenAPI::fromJsonValue(m_embeds, json[QString("embeds")]);
    m_embeds_isSet = !json[QString("embeds")].isNull() && m_embeds_isValid;

    m_jobid_isValid = ::OpenAPI::fromJsonValue(m_jobid, json[QString("jobid")]);
    m_jobid_isSet = !json[QString("jobid")].isNull() && m_jobid_isValid;

    m_max_jobs_isValid = ::OpenAPI::fromJsonValue(m_max_jobs, json[QString("maxJobs")]);
    m_max_jobs_isSet = !json[QString("maxJobs")].isNull() && m_max_jobs_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_verb_isValid = ::OpenAPI::fromJsonValue(m_verb, json[QString("verb")]);
    m_verb_isSet = !json[QString("verb")].isNull() && m_verb_isValid;
}

QString OAIDescribeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_describe_url_isSet) {
        obj.insert(QString("describeUrl"), ::OpenAPI::toJsonValue(m_describe_url));
    }
    if (m_embeds.size() > 0) {
        obj.insert(QString("embeds"), ::OpenAPI::toJsonValue(m_embeds));
    }
    if (m_jobid_isSet) {
        obj.insert(QString("jobid"), ::OpenAPI::toJsonValue(m_jobid));
    }
    if (m_max_jobs_isSet) {
        obj.insert(QString("maxJobs"), ::OpenAPI::toJsonValue(m_max_jobs));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_verb_isSet) {
        obj.insert(QString("verb"), ::OpenAPI::toJsonValue(m_verb));
    }
    return obj;
}

QString OAIDescribeResponse::getChannel() const {
    return m_channel;
}
void OAIDescribeResponse::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIDescribeResponse::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIDescribeResponse::is_channel_Valid() const{
    return m_channel_isValid;
}

qint32 OAIDescribeResponse::getCode() const {
    return m_code;
}
void OAIDescribeResponse::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIDescribeResponse::is_code_Set() const{
    return m_code_isSet;
}

bool OAIDescribeResponse::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIDescribeResponse::getContent() const {
    return m_content;
}
void OAIDescribeResponse::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIDescribeResponse::is_content_Set() const{
    return m_content_isSet;
}

bool OAIDescribeResponse::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIDescribeResponse::getCreated() const {
    return m_created;
}
void OAIDescribeResponse::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDescribeResponse::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDescribeResponse::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIDescribeResponse::getDescribeUrl() const {
    return m_describe_url;
}
void OAIDescribeResponse::setDescribeUrl(const QString &describe_url) {
    m_describe_url = describe_url;
    m_describe_url_isSet = true;
}

bool OAIDescribeResponse::is_describe_url_Set() const{
    return m_describe_url_isSet;
}

bool OAIDescribeResponse::is_describe_url_Valid() const{
    return m_describe_url_isValid;
}

QList<OAIDescribeResponse_embeds_inner> OAIDescribeResponse::getEmbeds() const {
    return m_embeds;
}
void OAIDescribeResponse::setEmbeds(const QList<OAIDescribeResponse_embeds_inner> &embeds) {
    m_embeds = embeds;
    m_embeds_isSet = true;
}

bool OAIDescribeResponse::is_embeds_Set() const{
    return m_embeds_isSet;
}

bool OAIDescribeResponse::is_embeds_Valid() const{
    return m_embeds_isValid;
}

QString OAIDescribeResponse::getJobid() const {
    return m_jobid;
}
void OAIDescribeResponse::setJobid(const QString &jobid) {
    m_jobid = jobid;
    m_jobid_isSet = true;
}

bool OAIDescribeResponse::is_jobid_Set() const{
    return m_jobid_isSet;
}

bool OAIDescribeResponse::is_jobid_Valid() const{
    return m_jobid_isValid;
}

qint32 OAIDescribeResponse::getMaxJobs() const {
    return m_max_jobs;
}
void OAIDescribeResponse::setMaxJobs(const qint32 &max_jobs) {
    m_max_jobs = max_jobs;
    m_max_jobs_isSet = true;
}

bool OAIDescribeResponse::is_max_jobs_Set() const{
    return m_max_jobs_isSet;
}

bool OAIDescribeResponse::is_max_jobs_Valid() const{
    return m_max_jobs_isValid;
}

QString OAIDescribeResponse::getMessageId() const {
    return m_message_id;
}
void OAIDescribeResponse::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIDescribeResponse::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIDescribeResponse::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIDescribeResponse::getServer() const {
    return m_server;
}
void OAIDescribeResponse::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIDescribeResponse::is_server_Set() const{
    return m_server_isSet;
}

bool OAIDescribeResponse::is_server_Valid() const{
    return m_server_isValid;
}

QString OAIDescribeResponse::getStatus() const {
    return m_status;
}
void OAIDescribeResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeResponse::getTimestamp() const {
    return m_timestamp;
}
void OAIDescribeResponse::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIDescribeResponse::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDescribeResponse::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIDescribeResponse::getUpdated() const {
    return m_updated;
}
void OAIDescribeResponse::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIDescribeResponse::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIDescribeResponse::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIDescribeResponse::getVerb() const {
    return m_verb;
}
void OAIDescribeResponse::setVerb(const QString &verb) {
    m_verb = verb;
    m_verb_isSet = true;
}

bool OAIDescribeResponse::is_verb_Set() const{
    return m_verb_isSet;
}

bool OAIDescribeResponse::is_verb_Valid() const{
    return m_verb_isValid;
}

bool OAIDescribeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_describe_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embeds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_isValid && m_code_isValid && m_content_isValid && m_created_isValid && m_describe_url_isValid && m_jobid_isValid && m_max_jobs_isValid && m_message_id_isValid && m_server_isValid && m_status_isValid && m_timestamp_isValid && m_updated_isValid && m_verb_isValid && true;
}

} // namespace OpenAPI
