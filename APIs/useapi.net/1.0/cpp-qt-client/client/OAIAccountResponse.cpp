/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountResponse::OAIAccountResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountResponse::OAIAccountResponse() {
    this->initializeModel();
}

OAIAccountResponse::~OAIAccountResponse() {}

void OAIAccountResponse::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sub_isSet = false;
    m_sub_isValid = false;

    m_verified_isSet = false;
    m_verified_isValid = false;
}

void OAIAccountResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountResponse::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sub_isValid = ::OpenAPI::fromJsonValue(m_sub, json[QString("sub")]);
    m_sub_isSet = !json[QString("sub")].isNull() && m_sub_isValid;

    m_verified_isValid = ::OpenAPI::fromJsonValue(m_verified, json[QString("verified")]);
    m_verified_isSet = !json[QString("verified")].isNull() && m_verified_isValid;
}

QString OAIAccountResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sub_isSet) {
        obj.insert(QString("sub"), ::OpenAPI::toJsonValue(m_sub));
    }
    if (m_verified_isSet) {
        obj.insert(QString("verified"), ::OpenAPI::toJsonValue(m_verified));
    }
    return obj;
}

QString OAIAccountResponse::getCreated() const {
    return m_created;
}
void OAIAccountResponse::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAccountResponse::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAccountResponse::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIAccountResponse::getEmail() const {
    return m_email;
}
void OAIAccountResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAccountResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAccountResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAccountResponse::getName() const {
    return m_name;
}
void OAIAccountResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccountResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccountResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccountResponse::getSub() const {
    return m_sub;
}
void OAIAccountResponse::setSub(const QString &sub) {
    m_sub = sub;
    m_sub_isSet = true;
}

bool OAIAccountResponse::is_sub_Set() const{
    return m_sub_isSet;
}

bool OAIAccountResponse::is_sub_Valid() const{
    return m_sub_isValid;
}

QString OAIAccountResponse::getVerified() const {
    return m_verified;
}
void OAIAccountResponse::setVerified(const QString &verified) {
    m_verified = verified;
    m_verified_isSet = true;
}

bool OAIAccountResponse::is_verified_Set() const{
    return m_verified_isSet;
}

bool OAIAccountResponse::is_verified_Valid() const{
    return m_verified_isValid;
}

bool OAIAccountResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_isValid && m_email_isValid && m_name_isValid && m_sub_isValid && m_verified_isValid && true;
}

} // namespace OpenAPI
