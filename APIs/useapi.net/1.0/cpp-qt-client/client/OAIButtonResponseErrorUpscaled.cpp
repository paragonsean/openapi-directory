/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIButtonResponseErrorUpscaled.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIButtonResponseErrorUpscaled::OAIButtonResponseErrorUpscaled(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIButtonResponseErrorUpscaled::OAIButtonResponseErrorUpscaled() {
    this->initializeModel();
}

OAIButtonResponseErrorUpscaled::~OAIButtonResponseErrorUpscaled() {}

void OAIButtonResponseErrorUpscaled::initializeModel() {

    m_button_isSet = false;
    m_button_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_jobid_isSet = false;
    m_jobid_isValid = false;
}

void OAIButtonResponseErrorUpscaled::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIButtonResponseErrorUpscaled::fromJsonObject(QJsonObject json) {

    m_button_isValid = ::OpenAPI::fromJsonValue(m_button, json[QString("button")]);
    m_button_isSet = !json[QString("button")].isNull() && m_button_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_jobid_isValid = ::OpenAPI::fromJsonValue(m_jobid, json[QString("jobid")]);
    m_jobid_isSet = !json[QString("jobid")].isNull() && m_jobid_isValid;
}

QString OAIButtonResponseErrorUpscaled::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIButtonResponseErrorUpscaled::asJsonObject() const {
    QJsonObject obj;
    if (m_button_isSet) {
        obj.insert(QString("button"), ::OpenAPI::toJsonValue(m_button));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_jobid_isSet) {
        obj.insert(QString("jobid"), ::OpenAPI::toJsonValue(m_jobid));
    }
    return obj;
}

QString OAIButtonResponseErrorUpscaled::getButton() const {
    return m_button;
}
void OAIButtonResponseErrorUpscaled::setButton(const QString &button) {
    m_button = button;
    m_button_isSet = true;
}

bool OAIButtonResponseErrorUpscaled::is_button_Set() const{
    return m_button_isSet;
}

bool OAIButtonResponseErrorUpscaled::is_button_Valid() const{
    return m_button_isValid;
}

qint32 OAIButtonResponseErrorUpscaled::getCode() const {
    return m_code;
}
void OAIButtonResponseErrorUpscaled::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIButtonResponseErrorUpscaled::is_code_Set() const{
    return m_code_isSet;
}

bool OAIButtonResponseErrorUpscaled::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIButtonResponseErrorUpscaled::getError() const {
    return m_error;
}
void OAIButtonResponseErrorUpscaled::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIButtonResponseErrorUpscaled::is_error_Set() const{
    return m_error_isSet;
}

bool OAIButtonResponseErrorUpscaled::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIButtonResponseErrorUpscaled::getJobid() const {
    return m_jobid;
}
void OAIButtonResponseErrorUpscaled::setJobid(const QString &jobid) {
    m_jobid = jobid;
    m_jobid_isSet = true;
}

bool OAIButtonResponseErrorUpscaled::is_jobid_Set() const{
    return m_jobid_isSet;
}

bool OAIButtonResponseErrorUpscaled::is_jobid_Valid() const{
    return m_jobid_isValid;
}

bool OAIButtonResponseErrorUpscaled::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_button_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIButtonResponseErrorUpscaled::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_button_isValid && m_code_isValid && m_error_isValid && m_jobid_isValid && true;
}

} // namespace OpenAPI
