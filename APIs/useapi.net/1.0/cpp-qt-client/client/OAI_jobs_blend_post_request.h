/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_jobs_blend_post_request.h
 *
 * 
 */

#ifndef OAI_jobs_blend_post_request_H
#define OAI_jobs_blend_post_request_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_jobs_blend_post_request : public OAIObject {
public:
    OAI_jobs_blend_post_request();
    OAI_jobs_blend_post_request(QString json);
    ~OAI_jobs_blend_post_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBlendDimensions() const;
    void setBlendDimensions(const QString &blend_dimensions);
    bool is_blend_dimensions_Set() const;
    bool is_blend_dimensions_Valid() const;

    QList<QString> getBlendUrls() const;
    void setBlendUrls(const QList<QString> &blend_urls);
    bool is_blend_urls_Set() const;
    bool is_blend_urls_Valid() const;

    QString getChannel() const;
    void setChannel(const QString &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    QString getDiscord() const;
    void setDiscord(const QString &discord);
    bool is_discord_Set() const;
    bool is_discord_Valid() const;

    qint32 getMaxJobs() const;
    void setMaxJobs(const qint32 &max_jobs);
    bool is_max_jobs_Set() const;
    bool is_max_jobs_Valid() const;

    QString getReplyRef() const;
    void setReplyRef(const QString &reply_ref);
    bool is_reply_ref_Set() const;
    bool is_reply_ref_Valid() const;

    QString getReplyUrl() const;
    void setReplyUrl(const QString &reply_url);
    bool is_reply_url_Set() const;
    bool is_reply_url_Valid() const;

    QString getServer() const;
    void setServer(const QString &server);
    bool is_server_Set() const;
    bool is_server_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_blend_dimensions;
    bool m_blend_dimensions_isSet;
    bool m_blend_dimensions_isValid;

    QList<QString> m_blend_urls;
    bool m_blend_urls_isSet;
    bool m_blend_urls_isValid;

    QString m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    QString m_discord;
    bool m_discord_isSet;
    bool m_discord_isValid;

    qint32 m_max_jobs;
    bool m_max_jobs_isSet;
    bool m_max_jobs_isValid;

    QString m_reply_ref;
    bool m_reply_ref_isSet;
    bool m_reply_ref_isValid;

    QString m_reply_url;
    bool m_reply_url_isSet;
    bool m_reply_url_isValid;

    QString m_server;
    bool m_server_isSet;
    bool m_server_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_jobs_blend_post_request)

#endif // OAI_jobs_blend_post_request_H
