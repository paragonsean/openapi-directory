/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImagineResponseModerated.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImagineResponseModerated::OAIImagineResponseModerated(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImagineResponseModerated::OAIImagineResponseModerated() {
    this->initializeModel();
}

OAIImagineResponseModerated::~OAIImagineResponseModerated() {}

void OAIImagineResponseModerated::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_jobid_isSet = false;
    m_jobid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIImagineResponseModerated::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImagineResponseModerated::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_jobid_isValid = ::OpenAPI::fromJsonValue(m_jobid, json[QString("jobid")]);
    m_jobid_isSet = !json[QString("jobid")].isNull() && m_jobid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIImagineResponseModerated::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImagineResponseModerated::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_jobid_isSet) {
        obj.insert(QString("jobid"), ::OpenAPI::toJsonValue(m_jobid));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIImagineResponseModerated::getCode() const {
    return m_code;
}
void OAIImagineResponseModerated::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIImagineResponseModerated::is_code_Set() const{
    return m_code_isSet;
}

bool OAIImagineResponseModerated::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIImagineResponseModerated::getError() const {
    return m_error;
}
void OAIImagineResponseModerated::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIImagineResponseModerated::is_error_Set() const{
    return m_error_isSet;
}

bool OAIImagineResponseModerated::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIImagineResponseModerated::getJobid() const {
    return m_jobid;
}
void OAIImagineResponseModerated::setJobid(const QString &jobid) {
    m_jobid = jobid;
    m_jobid_isSet = true;
}

bool OAIImagineResponseModerated::is_jobid_Set() const{
    return m_jobid_isSet;
}

bool OAIImagineResponseModerated::is_jobid_Valid() const{
    return m_jobid_isValid;
}

QString OAIImagineResponseModerated::getStatus() const {
    return m_status;
}
void OAIImagineResponseModerated::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIImagineResponseModerated::is_status_Set() const{
    return m_status_isSet;
}

bool OAIImagineResponseModerated::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIImagineResponseModerated::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImagineResponseModerated::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_error_isValid && m_jobid_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
