/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobResponse_children_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobResponse_children_inner::OAIJobResponse_children_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobResponse_children_inner::OAIJobResponse_children_inner() {
    this->initializeModel();
}

OAIJobResponse_children_inner::~OAIJobResponse_children_inner() {}

void OAIJobResponse_children_inner::initializeModel() {

    m_button_isSet = false;
    m_button_isValid = false;

    m_jobid_isSet = false;
    m_jobid_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;
}

void OAIJobResponse_children_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobResponse_children_inner::fromJsonObject(QJsonObject json) {

    m_button_isValid = ::OpenAPI::fromJsonValue(m_button, json[QString("button")]);
    m_button_isSet = !json[QString("button")].isNull() && m_button_isValid;

    m_jobid_isValid = ::OpenAPI::fromJsonValue(m_jobid, json[QString("jobid")]);
    m_jobid_isSet = !json[QString("jobid")].isNull() && m_jobid_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;
}

QString OAIJobResponse_children_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobResponse_children_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_button_isSet) {
        obj.insert(QString("button"), ::OpenAPI::toJsonValue(m_button));
    }
    if (m_jobid_isSet) {
        obj.insert(QString("jobid"), ::OpenAPI::toJsonValue(m_jobid));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    return obj;
}

QString OAIJobResponse_children_inner::getButton() const {
    return m_button;
}
void OAIJobResponse_children_inner::setButton(const QString &button) {
    m_button = button;
    m_button_isSet = true;
}

bool OAIJobResponse_children_inner::is_button_Set() const{
    return m_button_isSet;
}

bool OAIJobResponse_children_inner::is_button_Valid() const{
    return m_button_isValid;
}

QString OAIJobResponse_children_inner::getJobid() const {
    return m_jobid;
}
void OAIJobResponse_children_inner::setJobid(const QString &jobid) {
    m_jobid = jobid;
    m_jobid_isSet = true;
}

bool OAIJobResponse_children_inner::is_jobid_Set() const{
    return m_jobid_isSet;
}

bool OAIJobResponse_children_inner::is_jobid_Valid() const{
    return m_jobid_isValid;
}

QString OAIJobResponse_children_inner::getMessageId() const {
    return m_message_id;
}
void OAIJobResponse_children_inner::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIJobResponse_children_inner::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIJobResponse_children_inner::is_message_id_Valid() const{
    return m_message_id_isValid;
}

bool OAIJobResponse_children_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_button_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobResponse_children_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_button_isValid && m_jobid_isValid && m_message_id_isValid && true;
}

} // namespace OpenAPI
