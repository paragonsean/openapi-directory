/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobResponse::OAIJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobResponse::OAIJobResponse() {
    this->initializeModel();
}

OAIJobResponse::~OAIJobResponse() {}

void OAIJobResponse::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_blend_dimensions_isSet = false;
    m_blend_dimensions_isValid = false;

    m_blend_urls_isSet = false;
    m_blend_urls_isValid = false;

    m_button_isSet = false;
    m_button_isValid = false;

    m_buttons_isSet = false;
    m_buttons_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_describe_url_isSet = false;
    m_describe_url_isValid = false;

    m_embeds_isSet = false;
    m_embeds_isValid = false;

    m_jobid_isSet = false;
    m_jobid_isValid = false;

    m_max_jobs_isSet = false;
    m_max_jobs_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_parent_job_id_isSet = false;
    m_parent_job_id_isValid = false;

    m_prompt_isSet = false;
    m_prompt_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_verb_isSet = false;
    m_verb_isValid = false;
}

void OAIJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobResponse::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_blend_dimensions_isValid = ::OpenAPI::fromJsonValue(m_blend_dimensions, json[QString("blendDimensions")]);
    m_blend_dimensions_isSet = !json[QString("blendDimensions")].isNull() && m_blend_dimensions_isValid;

    m_blend_urls_isValid = ::OpenAPI::fromJsonValue(m_blend_urls, json[QString("blendUrls")]);
    m_blend_urls_isSet = !json[QString("blendUrls")].isNull() && m_blend_urls_isValid;

    m_button_isValid = ::OpenAPI::fromJsonValue(m_button, json[QString("button")]);
    m_button_isSet = !json[QString("button")].isNull() && m_button_isValid;

    m_buttons_isValid = ::OpenAPI::fromJsonValue(m_buttons, json[QString("buttons")]);
    m_buttons_isSet = !json[QString("buttons")].isNull() && m_buttons_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_describe_url_isValid = ::OpenAPI::fromJsonValue(m_describe_url, json[QString("describeUrl")]);
    m_describe_url_isSet = !json[QString("describeUrl")].isNull() && m_describe_url_isValid;

    m_embeds_isValid = ::OpenAPI::fromJsonValue(m_embeds, json[QString("embeds")]);
    m_embeds_isSet = !json[QString("embeds")].isNull() && m_embeds_isValid;

    m_jobid_isValid = ::OpenAPI::fromJsonValue(m_jobid, json[QString("jobid")]);
    m_jobid_isSet = !json[QString("jobid")].isNull() && m_jobid_isValid;

    m_max_jobs_isValid = ::OpenAPI::fromJsonValue(m_max_jobs, json[QString("maxJobs")]);
    m_max_jobs_isSet = !json[QString("maxJobs")].isNull() && m_max_jobs_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_parent_job_id_isValid = ::OpenAPI::fromJsonValue(m_parent_job_id, json[QString("parentJobId")]);
    m_parent_job_id_isSet = !json[QString("parentJobId")].isNull() && m_parent_job_id_isValid;

    m_prompt_isValid = ::OpenAPI::fromJsonValue(m_prompt, json[QString("prompt")]);
    m_prompt_isSet = !json[QString("prompt")].isNull() && m_prompt_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_verb_isValid = ::OpenAPI::fromJsonValue(m_verb, json[QString("verb")]);
    m_verb_isSet = !json[QString("verb")].isNull() && m_verb_isValid;
}

QString OAIJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_blend_dimensions_isSet) {
        obj.insert(QString("blendDimensions"), ::OpenAPI::toJsonValue(m_blend_dimensions));
    }
    if (m_blend_urls.size() > 0) {
        obj.insert(QString("blendUrls"), ::OpenAPI::toJsonValue(m_blend_urls));
    }
    if (m_button_isSet) {
        obj.insert(QString("button"), ::OpenAPI::toJsonValue(m_button));
    }
    if (m_buttons.size() > 0) {
        obj.insert(QString("buttons"), ::OpenAPI::toJsonValue(m_buttons));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_describe_url_isSet) {
        obj.insert(QString("describeUrl"), ::OpenAPI::toJsonValue(m_describe_url));
    }
    if (m_embeds.size() > 0) {
        obj.insert(QString("embeds"), ::OpenAPI::toJsonValue(m_embeds));
    }
    if (m_jobid_isSet) {
        obj.insert(QString("jobid"), ::OpenAPI::toJsonValue(m_jobid));
    }
    if (m_max_jobs_isSet) {
        obj.insert(QString("maxJobs"), ::OpenAPI::toJsonValue(m_max_jobs));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_parent_job_id_isSet) {
        obj.insert(QString("parentJobId"), ::OpenAPI::toJsonValue(m_parent_job_id));
    }
    if (m_prompt_isSet) {
        obj.insert(QString("prompt"), ::OpenAPI::toJsonValue(m_prompt));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_verb_isSet) {
        obj.insert(QString("verb"), ::OpenAPI::toJsonValue(m_verb));
    }
    return obj;
}

QList<OAIJobResponse_attachments_inner> OAIJobResponse::getAttachments() const {
    return m_attachments;
}
void OAIJobResponse::setAttachments(const QList<OAIJobResponse_attachments_inner> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIJobResponse::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIJobResponse::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIJobResponse::getBlendDimensions() const {
    return m_blend_dimensions;
}
void OAIJobResponse::setBlendDimensions(const QString &blend_dimensions) {
    m_blend_dimensions = blend_dimensions;
    m_blend_dimensions_isSet = true;
}

bool OAIJobResponse::is_blend_dimensions_Set() const{
    return m_blend_dimensions_isSet;
}

bool OAIJobResponse::is_blend_dimensions_Valid() const{
    return m_blend_dimensions_isValid;
}

QList<QString> OAIJobResponse::getBlendUrls() const {
    return m_blend_urls;
}
void OAIJobResponse::setBlendUrls(const QList<QString> &blend_urls) {
    m_blend_urls = blend_urls;
    m_blend_urls_isSet = true;
}

bool OAIJobResponse::is_blend_urls_Set() const{
    return m_blend_urls_isSet;
}

bool OAIJobResponse::is_blend_urls_Valid() const{
    return m_blend_urls_isValid;
}

QString OAIJobResponse::getButton() const {
    return m_button;
}
void OAIJobResponse::setButton(const QString &button) {
    m_button = button;
    m_button_isSet = true;
}

bool OAIJobResponse::is_button_Set() const{
    return m_button_isSet;
}

bool OAIJobResponse::is_button_Valid() const{
    return m_button_isValid;
}

QList<QString> OAIJobResponse::getButtons() const {
    return m_buttons;
}
void OAIJobResponse::setButtons(const QList<QString> &buttons) {
    m_buttons = buttons;
    m_buttons_isSet = true;
}

bool OAIJobResponse::is_buttons_Set() const{
    return m_buttons_isSet;
}

bool OAIJobResponse::is_buttons_Valid() const{
    return m_buttons_isValid;
}

QString OAIJobResponse::getChannel() const {
    return m_channel;
}
void OAIJobResponse::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIJobResponse::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIJobResponse::is_channel_Valid() const{
    return m_channel_isValid;
}

QList<OAIJobResponse_children_inner> OAIJobResponse::getChildren() const {
    return m_children;
}
void OAIJobResponse::setChildren(const QList<OAIJobResponse_children_inner> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIJobResponse::is_children_Set() const{
    return m_children_isSet;
}

bool OAIJobResponse::is_children_Valid() const{
    return m_children_isValid;
}

qint32 OAIJobResponse::getCode() const {
    return m_code;
}
void OAIJobResponse::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIJobResponse::is_code_Set() const{
    return m_code_isSet;
}

bool OAIJobResponse::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIJobResponse::getContent() const {
    return m_content;
}
void OAIJobResponse::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIJobResponse::is_content_Set() const{
    return m_content_isSet;
}

bool OAIJobResponse::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIJobResponse::getCreated() const {
    return m_created;
}
void OAIJobResponse::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIJobResponse::is_created_Set() const{
    return m_created_isSet;
}

bool OAIJobResponse::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIJobResponse::getDescribeUrl() const {
    return m_describe_url;
}
void OAIJobResponse::setDescribeUrl(const QString &describe_url) {
    m_describe_url = describe_url;
    m_describe_url_isSet = true;
}

bool OAIJobResponse::is_describe_url_Set() const{
    return m_describe_url_isSet;
}

bool OAIJobResponse::is_describe_url_Valid() const{
    return m_describe_url_isValid;
}

QList<OAIDescribeResponse_embeds_inner> OAIJobResponse::getEmbeds() const {
    return m_embeds;
}
void OAIJobResponse::setEmbeds(const QList<OAIDescribeResponse_embeds_inner> &embeds) {
    m_embeds = embeds;
    m_embeds_isSet = true;
}

bool OAIJobResponse::is_embeds_Set() const{
    return m_embeds_isSet;
}

bool OAIJobResponse::is_embeds_Valid() const{
    return m_embeds_isValid;
}

QString OAIJobResponse::getJobid() const {
    return m_jobid;
}
void OAIJobResponse::setJobid(const QString &jobid) {
    m_jobid = jobid;
    m_jobid_isSet = true;
}

bool OAIJobResponse::is_jobid_Set() const{
    return m_jobid_isSet;
}

bool OAIJobResponse::is_jobid_Valid() const{
    return m_jobid_isValid;
}

qint32 OAIJobResponse::getMaxJobs() const {
    return m_max_jobs;
}
void OAIJobResponse::setMaxJobs(const qint32 &max_jobs) {
    m_max_jobs = max_jobs;
    m_max_jobs_isSet = true;
}

bool OAIJobResponse::is_max_jobs_Set() const{
    return m_max_jobs_isSet;
}

bool OAIJobResponse::is_max_jobs_Valid() const{
    return m_max_jobs_isValid;
}

QString OAIJobResponse::getMessageId() const {
    return m_message_id;
}
void OAIJobResponse::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIJobResponse::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIJobResponse::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIJobResponse::getParentJobId() const {
    return m_parent_job_id;
}
void OAIJobResponse::setParentJobId(const QString &parent_job_id) {
    m_parent_job_id = parent_job_id;
    m_parent_job_id_isSet = true;
}

bool OAIJobResponse::is_parent_job_id_Set() const{
    return m_parent_job_id_isSet;
}

bool OAIJobResponse::is_parent_job_id_Valid() const{
    return m_parent_job_id_isValid;
}

QString OAIJobResponse::getPrompt() const {
    return m_prompt;
}
void OAIJobResponse::setPrompt(const QString &prompt) {
    m_prompt = prompt;
    m_prompt_isSet = true;
}

bool OAIJobResponse::is_prompt_Set() const{
    return m_prompt_isSet;
}

bool OAIJobResponse::is_prompt_Valid() const{
    return m_prompt_isValid;
}

QString OAIJobResponse::getServer() const {
    return m_server;
}
void OAIJobResponse::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIJobResponse::is_server_Set() const{
    return m_server_isSet;
}

bool OAIJobResponse::is_server_Valid() const{
    return m_server_isValid;
}

QString OAIJobResponse::getStatus() const {
    return m_status;
}
void OAIJobResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIJobResponse::getTimestamp() const {
    return m_timestamp;
}
void OAIJobResponse::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIJobResponse::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIJobResponse::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIJobResponse::getUpdated() const {
    return m_updated;
}
void OAIJobResponse::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIJobResponse::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIJobResponse::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIJobResponse::getVerb() const {
    return m_verb;
}
void OAIJobResponse::setVerb(const QString &verb) {
    m_verb = verb;
    m_verb_isSet = true;
}

bool OAIJobResponse::is_verb_Set() const{
    return m_verb_isSet;
}

bool OAIJobResponse::is_verb_Valid() const{
    return m_verb_isValid;
}

bool OAIJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blend_dimensions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blend_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_button_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buttons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_describe_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embeds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_isValid && m_code_isValid && m_created_isValid && m_jobid_isValid && m_max_jobs_isValid && m_server_isValid && m_status_isValid && m_verb_isValid && true;
}

} // namespace OpenAPI
