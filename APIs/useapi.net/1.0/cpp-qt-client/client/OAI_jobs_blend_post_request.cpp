/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_jobs_blend_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_jobs_blend_post_request::OAI_jobs_blend_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_jobs_blend_post_request::OAI_jobs_blend_post_request() {
    this->initializeModel();
}

OAI_jobs_blend_post_request::~OAI_jobs_blend_post_request() {}

void OAI_jobs_blend_post_request::initializeModel() {

    m_blend_dimensions_isSet = false;
    m_blend_dimensions_isValid = false;

    m_blend_urls_isSet = false;
    m_blend_urls_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_discord_isSet = false;
    m_discord_isValid = false;

    m_max_jobs_isSet = false;
    m_max_jobs_isValid = false;

    m_reply_ref_isSet = false;
    m_reply_ref_isValid = false;

    m_reply_url_isSet = false;
    m_reply_url_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;
}

void OAI_jobs_blend_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_jobs_blend_post_request::fromJsonObject(QJsonObject json) {

    m_blend_dimensions_isValid = ::OpenAPI::fromJsonValue(m_blend_dimensions, json[QString("blendDimensions")]);
    m_blend_dimensions_isSet = !json[QString("blendDimensions")].isNull() && m_blend_dimensions_isValid;

    m_blend_urls_isValid = ::OpenAPI::fromJsonValue(m_blend_urls, json[QString("blendUrls")]);
    m_blend_urls_isSet = !json[QString("blendUrls")].isNull() && m_blend_urls_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_discord_isValid = ::OpenAPI::fromJsonValue(m_discord, json[QString("discord")]);
    m_discord_isSet = !json[QString("discord")].isNull() && m_discord_isValid;

    m_max_jobs_isValid = ::OpenAPI::fromJsonValue(m_max_jobs, json[QString("maxJobs")]);
    m_max_jobs_isSet = !json[QString("maxJobs")].isNull() && m_max_jobs_isValid;

    m_reply_ref_isValid = ::OpenAPI::fromJsonValue(m_reply_ref, json[QString("replyRef")]);
    m_reply_ref_isSet = !json[QString("replyRef")].isNull() && m_reply_ref_isValid;

    m_reply_url_isValid = ::OpenAPI::fromJsonValue(m_reply_url, json[QString("replyUrl")]);
    m_reply_url_isSet = !json[QString("replyUrl")].isNull() && m_reply_url_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;
}

QString OAI_jobs_blend_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_jobs_blend_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_blend_dimensions_isSet) {
        obj.insert(QString("blendDimensions"), ::OpenAPI::toJsonValue(m_blend_dimensions));
    }
    if (m_blend_urls.size() > 0) {
        obj.insert(QString("blendUrls"), ::OpenAPI::toJsonValue(m_blend_urls));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_discord_isSet) {
        obj.insert(QString("discord"), ::OpenAPI::toJsonValue(m_discord));
    }
    if (m_max_jobs_isSet) {
        obj.insert(QString("maxJobs"), ::OpenAPI::toJsonValue(m_max_jobs));
    }
    if (m_reply_ref_isSet) {
        obj.insert(QString("replyRef"), ::OpenAPI::toJsonValue(m_reply_ref));
    }
    if (m_reply_url_isSet) {
        obj.insert(QString("replyUrl"), ::OpenAPI::toJsonValue(m_reply_url));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    return obj;
}

QString OAI_jobs_blend_post_request::getBlendDimensions() const {
    return m_blend_dimensions;
}
void OAI_jobs_blend_post_request::setBlendDimensions(const QString &blend_dimensions) {
    m_blend_dimensions = blend_dimensions;
    m_blend_dimensions_isSet = true;
}

bool OAI_jobs_blend_post_request::is_blend_dimensions_Set() const{
    return m_blend_dimensions_isSet;
}

bool OAI_jobs_blend_post_request::is_blend_dimensions_Valid() const{
    return m_blend_dimensions_isValid;
}

QList<QString> OAI_jobs_blend_post_request::getBlendUrls() const {
    return m_blend_urls;
}
void OAI_jobs_blend_post_request::setBlendUrls(const QList<QString> &blend_urls) {
    m_blend_urls = blend_urls;
    m_blend_urls_isSet = true;
}

bool OAI_jobs_blend_post_request::is_blend_urls_Set() const{
    return m_blend_urls_isSet;
}

bool OAI_jobs_blend_post_request::is_blend_urls_Valid() const{
    return m_blend_urls_isValid;
}

QString OAI_jobs_blend_post_request::getChannel() const {
    return m_channel;
}
void OAI_jobs_blend_post_request::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAI_jobs_blend_post_request::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAI_jobs_blend_post_request::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAI_jobs_blend_post_request::getDiscord() const {
    return m_discord;
}
void OAI_jobs_blend_post_request::setDiscord(const QString &discord) {
    m_discord = discord;
    m_discord_isSet = true;
}

bool OAI_jobs_blend_post_request::is_discord_Set() const{
    return m_discord_isSet;
}

bool OAI_jobs_blend_post_request::is_discord_Valid() const{
    return m_discord_isValid;
}

qint32 OAI_jobs_blend_post_request::getMaxJobs() const {
    return m_max_jobs;
}
void OAI_jobs_blend_post_request::setMaxJobs(const qint32 &max_jobs) {
    m_max_jobs = max_jobs;
    m_max_jobs_isSet = true;
}

bool OAI_jobs_blend_post_request::is_max_jobs_Set() const{
    return m_max_jobs_isSet;
}

bool OAI_jobs_blend_post_request::is_max_jobs_Valid() const{
    return m_max_jobs_isValid;
}

QString OAI_jobs_blend_post_request::getReplyRef() const {
    return m_reply_ref;
}
void OAI_jobs_blend_post_request::setReplyRef(const QString &reply_ref) {
    m_reply_ref = reply_ref;
    m_reply_ref_isSet = true;
}

bool OAI_jobs_blend_post_request::is_reply_ref_Set() const{
    return m_reply_ref_isSet;
}

bool OAI_jobs_blend_post_request::is_reply_ref_Valid() const{
    return m_reply_ref_isValid;
}

QString OAI_jobs_blend_post_request::getReplyUrl() const {
    return m_reply_url;
}
void OAI_jobs_blend_post_request::setReplyUrl(const QString &reply_url) {
    m_reply_url = reply_url;
    m_reply_url_isSet = true;
}

bool OAI_jobs_blend_post_request::is_reply_url_Set() const{
    return m_reply_url_isSet;
}

bool OAI_jobs_blend_post_request::is_reply_url_Valid() const{
    return m_reply_url_isValid;
}

QString OAI_jobs_blend_post_request::getServer() const {
    return m_server;
}
void OAI_jobs_blend_post_request::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAI_jobs_blend_post_request::is_server_Set() const{
    return m_server_isSet;
}

bool OAI_jobs_blend_post_request::is_server_Valid() const{
    return m_server_isValid;
}

bool OAI_jobs_blend_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blend_dimensions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blend_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discord_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_jobs_blend_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_blend_urls_isValid && m_channel_isValid && m_discord_isValid && m_server_isValid && true;
}

} // namespace OpenAPI
