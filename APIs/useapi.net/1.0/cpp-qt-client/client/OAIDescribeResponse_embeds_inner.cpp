/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeResponse_embeds_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeResponse_embeds_inner::OAIDescribeResponse_embeds_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeResponse_embeds_inner::OAIDescribeResponse_embeds_inner() {
    this->initializeModel();
}

OAIDescribeResponse_embeds_inner::~OAIDescribeResponse_embeds_inner() {}

void OAIDescribeResponse_embeds_inner::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDescribeResponse_embeds_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeResponse_embeds_inner::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDescribeResponse_embeds_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeResponse_embeds_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDescribeResponse_embeds_inner::getDescription() const {
    return m_description;
}
void OAIDescribeResponse_embeds_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeResponse_embeds_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeResponse_embeds_inner::is_description_Valid() const{
    return m_description_isValid;
}

OAIDescribeResponse_embeds_inner_image OAIDescribeResponse_embeds_inner::getImage() const {
    return m_image;
}
void OAIDescribeResponse_embeds_inner::setImage(const OAIDescribeResponse_embeds_inner_image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIDescribeResponse_embeds_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAIDescribeResponse_embeds_inner::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIDescribeResponse_embeds_inner::getType() const {
    return m_type;
}
void OAIDescribeResponse_embeds_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDescribeResponse_embeds_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDescribeResponse_embeds_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDescribeResponse_embeds_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeResponse_embeds_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
