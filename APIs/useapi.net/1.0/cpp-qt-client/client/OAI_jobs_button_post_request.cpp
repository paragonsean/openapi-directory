/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_jobs_button_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_jobs_button_post_request::OAI_jobs_button_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_jobs_button_post_request::OAI_jobs_button_post_request() {
    this->initializeModel();
}

OAI_jobs_button_post_request::~OAI_jobs_button_post_request() {}

void OAI_jobs_button_post_request::initializeModel() {

    m_button_isSet = false;
    m_button_isValid = false;

    m_discord_isSet = false;
    m_discord_isValid = false;

    m_jobid_isSet = false;
    m_jobid_isValid = false;

    m_max_jobs_isSet = false;
    m_max_jobs_isValid = false;

    m_reply_ref_isSet = false;
    m_reply_ref_isValid = false;

    m_reply_url_isSet = false;
    m_reply_url_isValid = false;
}

void OAI_jobs_button_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_jobs_button_post_request::fromJsonObject(QJsonObject json) {

    m_button_isValid = ::OpenAPI::fromJsonValue(m_button, json[QString("button")]);
    m_button_isSet = !json[QString("button")].isNull() && m_button_isValid;

    m_discord_isValid = ::OpenAPI::fromJsonValue(m_discord, json[QString("discord")]);
    m_discord_isSet = !json[QString("discord")].isNull() && m_discord_isValid;

    m_jobid_isValid = ::OpenAPI::fromJsonValue(m_jobid, json[QString("jobid")]);
    m_jobid_isSet = !json[QString("jobid")].isNull() && m_jobid_isValid;

    m_max_jobs_isValid = ::OpenAPI::fromJsonValue(m_max_jobs, json[QString("maxJobs")]);
    m_max_jobs_isSet = !json[QString("maxJobs")].isNull() && m_max_jobs_isValid;

    m_reply_ref_isValid = ::OpenAPI::fromJsonValue(m_reply_ref, json[QString("replyRef")]);
    m_reply_ref_isSet = !json[QString("replyRef")].isNull() && m_reply_ref_isValid;

    m_reply_url_isValid = ::OpenAPI::fromJsonValue(m_reply_url, json[QString("replyUrl")]);
    m_reply_url_isSet = !json[QString("replyUrl")].isNull() && m_reply_url_isValid;
}

QString OAI_jobs_button_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_jobs_button_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_button_isSet) {
        obj.insert(QString("button"), ::OpenAPI::toJsonValue(m_button));
    }
    if (m_discord_isSet) {
        obj.insert(QString("discord"), ::OpenAPI::toJsonValue(m_discord));
    }
    if (m_jobid_isSet) {
        obj.insert(QString("jobid"), ::OpenAPI::toJsonValue(m_jobid));
    }
    if (m_max_jobs_isSet) {
        obj.insert(QString("maxJobs"), ::OpenAPI::toJsonValue(m_max_jobs));
    }
    if (m_reply_ref_isSet) {
        obj.insert(QString("replyRef"), ::OpenAPI::toJsonValue(m_reply_ref));
    }
    if (m_reply_url_isSet) {
        obj.insert(QString("replyUrl"), ::OpenAPI::toJsonValue(m_reply_url));
    }
    return obj;
}

QString OAI_jobs_button_post_request::getButton() const {
    return m_button;
}
void OAI_jobs_button_post_request::setButton(const QString &button) {
    m_button = button;
    m_button_isSet = true;
}

bool OAI_jobs_button_post_request::is_button_Set() const{
    return m_button_isSet;
}

bool OAI_jobs_button_post_request::is_button_Valid() const{
    return m_button_isValid;
}

QString OAI_jobs_button_post_request::getDiscord() const {
    return m_discord;
}
void OAI_jobs_button_post_request::setDiscord(const QString &discord) {
    m_discord = discord;
    m_discord_isSet = true;
}

bool OAI_jobs_button_post_request::is_discord_Set() const{
    return m_discord_isSet;
}

bool OAI_jobs_button_post_request::is_discord_Valid() const{
    return m_discord_isValid;
}

QString OAI_jobs_button_post_request::getJobid() const {
    return m_jobid;
}
void OAI_jobs_button_post_request::setJobid(const QString &jobid) {
    m_jobid = jobid;
    m_jobid_isSet = true;
}

bool OAI_jobs_button_post_request::is_jobid_Set() const{
    return m_jobid_isSet;
}

bool OAI_jobs_button_post_request::is_jobid_Valid() const{
    return m_jobid_isValid;
}

qint32 OAI_jobs_button_post_request::getMaxJobs() const {
    return m_max_jobs;
}
void OAI_jobs_button_post_request::setMaxJobs(const qint32 &max_jobs) {
    m_max_jobs = max_jobs;
    m_max_jobs_isSet = true;
}

bool OAI_jobs_button_post_request::is_max_jobs_Set() const{
    return m_max_jobs_isSet;
}

bool OAI_jobs_button_post_request::is_max_jobs_Valid() const{
    return m_max_jobs_isValid;
}

QString OAI_jobs_button_post_request::getReplyRef() const {
    return m_reply_ref;
}
void OAI_jobs_button_post_request::setReplyRef(const QString &reply_ref) {
    m_reply_ref = reply_ref;
    m_reply_ref_isSet = true;
}

bool OAI_jobs_button_post_request::is_reply_ref_Set() const{
    return m_reply_ref_isSet;
}

bool OAI_jobs_button_post_request::is_reply_ref_Valid() const{
    return m_reply_ref_isValid;
}

QString OAI_jobs_button_post_request::getReplyUrl() const {
    return m_reply_url;
}
void OAI_jobs_button_post_request::setReplyUrl(const QString &reply_url) {
    m_reply_url = reply_url;
    m_reply_url_isSet = true;
}

bool OAI_jobs_button_post_request::is_reply_url_Set() const{
    return m_reply_url_isSet;
}

bool OAI_jobs_button_post_request::is_reply_url_Valid() const{
    return m_reply_url_isValid;
}

bool OAI_jobs_button_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_button_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discord_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_jobs_button_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_button_isValid && m_jobid_isValid && true;
}

} // namespace OpenAPI
