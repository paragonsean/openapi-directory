/*
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountResponse;
import org.openapitools.client.model.BlendResponse;
import org.openapitools.client.model.ButtonResponse;
import org.openapitools.client.model.ButtonResponseErrorUpscaled;
import org.openapitools.client.model.DescribeResponse;
import org.openapitools.client.model.ImagineResponse;
import org.openapitools.client.model.ImagineResponseModerated;
import org.openapitools.client.model.JobCancelResponse;
import org.openapitools.client.model.JobResponse;
import org.openapitools.client.model.JobsBlendPostRequest;
import org.openapitools.client.model.JobsButtonPostRequest;
import org.openapitools.client.model.JobsDescribePostRequest;
import org.openapitools.client.model.JobsImaginePostRequest;
import org.openapitools.client.model.ResponseError;
import org.openapitools.client.model.ResponseMaxJobs;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return accountGetCall(_callback);

    }

    /**
     * 
     * Retrieve account information
     * @return AccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public AccountResponse accountGet() throws ApiException {
        ApiResponse<AccountResponse> localVarResp = accountGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve account information
     * @return ApiResponse&lt;AccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountResponse> accountGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = accountGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve account information
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetAsync(final ApiCallback<AccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsBlendPost
     * @param jobsBlendPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> blendUrls, discord, server or channel value is missing, one of blendUrls values not a valid URL or URL which can not be retrieved </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to find posted message, likely moderated or invalid url </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/blend requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsBlendPostCall(JobsBlendPostRequest jobsBlendPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobsBlendPostRequest;

        // create path and map variables
        String localVarPath = "/jobs/blend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsBlendPostValidateBeforeCall(JobsBlendPostRequest jobsBlendPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobsBlendPostRequest' is set
        if (jobsBlendPostRequest == null) {
            throw new ApiException("Missing the required parameter 'jobsBlendPostRequest' when calling jobsBlendPost(Async)");
        }

        return jobsBlendPostCall(jobsBlendPostRequest, _callback);

    }

    /**
     * 
     * Submit the Midjourney /blend command
     * @param jobsBlendPostRequest  (required)
     * @return BlendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> blendUrls, discord, server or channel value is missing, one of blendUrls values not a valid URL or URL which can not be retrieved </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to find posted message, likely moderated or invalid url </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/blend requests </td><td>  -  </td></tr>
     </table>
     */
    public BlendResponse jobsBlendPost(JobsBlendPostRequest jobsBlendPostRequest) throws ApiException {
        ApiResponse<BlendResponse> localVarResp = jobsBlendPostWithHttpInfo(jobsBlendPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Submit the Midjourney /blend command
     * @param jobsBlendPostRequest  (required)
     * @return ApiResponse&lt;BlendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> blendUrls, discord, server or channel value is missing, one of blendUrls values not a valid URL or URL which can not be retrieved </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to find posted message, likely moderated or invalid url </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/blend requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlendResponse> jobsBlendPostWithHttpInfo(JobsBlendPostRequest jobsBlendPostRequest) throws ApiException {
        okhttp3.Call localVarCall = jobsBlendPostValidateBeforeCall(jobsBlendPostRequest, null);
        Type localVarReturnType = new TypeToken<BlendResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submit the Midjourney /blend command
     * @param jobsBlendPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> blendUrls, discord, server or channel value is missing, one of blendUrls values not a valid URL or URL which can not be retrieved </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to find posted message, likely moderated or invalid url </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/blend requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsBlendPostAsync(JobsBlendPostRequest jobsBlendPostRequest, final ApiCallback<BlendResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsBlendPostValidateBeforeCall(jobsBlendPostRequest, _callback);
        Type localVarReturnType = new TypeToken<BlendResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsButtonPost
     * @param jobsButtonPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Button not supported or not found in jobid buttons array </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to locate jobid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Upscale button already executed by jobid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> jobid or button value is missing </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/button requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsButtonPostCall(JobsButtonPostRequest jobsButtonPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobsButtonPostRequest;

        // create path and map variables
        String localVarPath = "/jobs/button";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsButtonPostValidateBeforeCall(JobsButtonPostRequest jobsButtonPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobsButtonPostRequest' is set
        if (jobsButtonPostRequest == null) {
            throw new ApiException("Missing the required parameter 'jobsButtonPostRequest' when calling jobsButtonPost(Async)");
        }

        return jobsButtonPostCall(jobsButtonPostRequest, _callback);

    }

    /**
     * 
     * Submit the Midjourney /imagine command
     * @param jobsButtonPostRequest  (required)
     * @return ButtonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Button not supported or not found in jobid buttons array </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to locate jobid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Upscale button already executed by jobid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> jobid or button value is missing </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/button requests </td><td>  -  </td></tr>
     </table>
     */
    public ButtonResponse jobsButtonPost(JobsButtonPostRequest jobsButtonPostRequest) throws ApiException {
        ApiResponse<ButtonResponse> localVarResp = jobsButtonPostWithHttpInfo(jobsButtonPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Submit the Midjourney /imagine command
     * @param jobsButtonPostRequest  (required)
     * @return ApiResponse&lt;ButtonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Button not supported or not found in jobid buttons array </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to locate jobid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Upscale button already executed by jobid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> jobid or button value is missing </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/button requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ButtonResponse> jobsButtonPostWithHttpInfo(JobsButtonPostRequest jobsButtonPostRequest) throws ApiException {
        okhttp3.Call localVarCall = jobsButtonPostValidateBeforeCall(jobsButtonPostRequest, null);
        Type localVarReturnType = new TypeToken<ButtonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submit the Midjourney /imagine command
     * @param jobsButtonPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Button not supported or not found in jobid buttons array </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to locate jobid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Upscale button already executed by jobid </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> jobid or button value is missing </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/button requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsButtonPostAsync(JobsButtonPostRequest jobsButtonPostRequest, final ApiCallback<ButtonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsButtonPostValidateBeforeCall(jobsButtonPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ButtonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsCancelGet
     * @param jobid jobid value returned by jobs/imagine, jobs/button, jobs/blend or jobs/describe (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Query param jobid not provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to locate jobid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCancelGetCall(String jobid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/cancel/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobid", jobid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsCancelGetValidateBeforeCall(String jobid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsCancelGet(Async)");
        }

        return jobsCancelGetCall(jobid, _callback);

    }

    /**
     * 
     * Cancel execution of job created by jobs/imagine, jobs/button, jobs/blend or jobs/describe
     * @param jobid jobid value returned by jobs/imagine, jobs/button, jobs/blend or jobs/describe (required)
     * @return JobCancelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Query param jobid not provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to locate jobid </td><td>  -  </td></tr>
     </table>
     */
    public JobCancelResponse jobsCancelGet(String jobid) throws ApiException {
        ApiResponse<JobCancelResponse> localVarResp = jobsCancelGetWithHttpInfo(jobid);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancel execution of job created by jobs/imagine, jobs/button, jobs/blend or jobs/describe
     * @param jobid jobid value returned by jobs/imagine, jobs/button, jobs/blend or jobs/describe (required)
     * @return ApiResponse&lt;JobCancelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Query param jobid not provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to locate jobid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobCancelResponse> jobsCancelGetWithHttpInfo(String jobid) throws ApiException {
        okhttp3.Call localVarCall = jobsCancelGetValidateBeforeCall(jobid, null);
        Type localVarReturnType = new TypeToken<JobCancelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancel execution of job created by jobs/imagine, jobs/button, jobs/blend or jobs/describe
     * @param jobid jobid value returned by jobs/imagine, jobs/button, jobs/blend or jobs/describe (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Query param jobid not provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to locate jobid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCancelGetAsync(String jobid, final ApiCallback<JobCancelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsCancelGetValidateBeforeCall(jobid, _callback);
        Type localVarReturnType = new TypeToken<JobCancelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsDescribePost
     * @param jobsDescribePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> describeUrl, discord, server or channel value is missing, describeUrl value not a valid URL or URL which can not be retrieved </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to find posted message, likely moderated or invalid url </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/blend requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsDescribePostCall(JobsDescribePostRequest jobsDescribePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobsDescribePostRequest;

        // create path and map variables
        String localVarPath = "/jobs/describe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsDescribePostValidateBeforeCall(JobsDescribePostRequest jobsDescribePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobsDescribePostRequest' is set
        if (jobsDescribePostRequest == null) {
            throw new ApiException("Missing the required parameter 'jobsDescribePostRequest' when calling jobsDescribePost(Async)");
        }

        return jobsDescribePostCall(jobsDescribePostRequest, _callback);

    }

    /**
     * 
     * Submit the Midjourney /describe command
     * @param jobsDescribePostRequest  (required)
     * @return DescribeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> describeUrl, discord, server or channel value is missing, describeUrl value not a valid URL or URL which can not be retrieved </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to find posted message, likely moderated or invalid url </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/blend requests </td><td>  -  </td></tr>
     </table>
     */
    public DescribeResponse jobsDescribePost(JobsDescribePostRequest jobsDescribePostRequest) throws ApiException {
        ApiResponse<DescribeResponse> localVarResp = jobsDescribePostWithHttpInfo(jobsDescribePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Submit the Midjourney /describe command
     * @param jobsDescribePostRequest  (required)
     * @return ApiResponse&lt;DescribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> describeUrl, discord, server or channel value is missing, describeUrl value not a valid URL or URL which can not be retrieved </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to find posted message, likely moderated or invalid url </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/blend requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeResponse> jobsDescribePostWithHttpInfo(JobsDescribePostRequest jobsDescribePostRequest) throws ApiException {
        okhttp3.Call localVarCall = jobsDescribePostValidateBeforeCall(jobsDescribePostRequest, null);
        Type localVarReturnType = new TypeToken<DescribeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submit the Midjourney /describe command
     * @param jobsDescribePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> describeUrl, discord, server or channel value is missing, describeUrl value not a valid URL or URL which can not be retrieved </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to find posted message, likely moderated or invalid url </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/blend requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsDescribePostAsync(JobsDescribePostRequest jobsDescribePostRequest, final ApiCallback<DescribeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsDescribePostValidateBeforeCall(jobsDescribePostRequest, _callback);
        Type localVarReturnType = new TypeToken<DescribeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return jobsGetCall(_callback);

    }

    /**
     * 
     * Get list of currently executing jobs
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<String> jobsGet() throws ApiException {
        ApiResponse<List<String>> localVarResp = jobsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of currently executing jobs
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> jobsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of currently executing jobs
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsGet_0
     * @param jobid jobid value returned by jobs/imagine, jobs/button, jobs/blend or jobs/describe (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Query param jobid not provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to locate jobid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGet_0Call(String jobid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobid", jobid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsGet_0ValidateBeforeCall(String jobid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsGet_0(Async)");
        }

        return jobsGet_0Call(jobid, _callback);

    }

    /**
     * 
     * Retrieve status and results of jobs/imagine, jobs/button, jobs/blend or jobs/describe
     * @param jobid jobid value returned by jobs/imagine, jobs/button, jobs/blend or jobs/describe (required)
     * @return JobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Query param jobid not provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to locate jobid </td><td>  -  </td></tr>
     </table>
     */
    public JobResponse jobsGet_0(String jobid) throws ApiException {
        ApiResponse<JobResponse> localVarResp = jobsGet_0WithHttpInfo(jobid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve status and results of jobs/imagine, jobs/button, jobs/blend or jobs/describe
     * @param jobid jobid value returned by jobs/imagine, jobs/button, jobs/blend or jobs/describe (required)
     * @return ApiResponse&lt;JobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Query param jobid not provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to locate jobid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResponse> jobsGet_0WithHttpInfo(String jobid) throws ApiException {
        okhttp3.Call localVarCall = jobsGet_0ValidateBeforeCall(jobid, null);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve status and results of jobs/imagine, jobs/button, jobs/blend or jobs/describe
     * @param jobid jobid value returned by jobs/imagine, jobs/button, jobs/blend or jobs/describe (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Query param jobid not provided </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unable to locate jobid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGet_0Async(String jobid, final ApiCallback<JobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsGet_0ValidateBeforeCall(jobid, _callback);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsImaginePost
     * @param jobsImaginePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> prompt, discord, server or channel value is missing </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> prompt, replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to find posted message, likely moderated or invalid prompt </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/imagine requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsImaginePostCall(JobsImaginePostRequest jobsImaginePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobsImaginePostRequest;

        // create path and map variables
        String localVarPath = "/jobs/imagine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsImaginePostValidateBeforeCall(JobsImaginePostRequest jobsImaginePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobsImaginePostRequest' is set
        if (jobsImaginePostRequest == null) {
            throw new ApiException("Missing the required parameter 'jobsImaginePostRequest' when calling jobsImaginePost(Async)");
        }

        return jobsImaginePostCall(jobsImaginePostRequest, _callback);

    }

    /**
     * 
     * Submit the Midjourney /imagine command
     * @param jobsImaginePostRequest  (required)
     * @return ImagineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> prompt, discord, server or channel value is missing </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> prompt, replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to find posted message, likely moderated or invalid prompt </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/imagine requests </td><td>  -  </td></tr>
     </table>
     */
    public ImagineResponse jobsImaginePost(JobsImaginePostRequest jobsImaginePostRequest) throws ApiException {
        ApiResponse<ImagineResponse> localVarResp = jobsImaginePostWithHttpInfo(jobsImaginePostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Submit the Midjourney /imagine command
     * @param jobsImaginePostRequest  (required)
     * @return ApiResponse&lt;ImagineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> prompt, discord, server or channel value is missing </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> prompt, replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to find posted message, likely moderated or invalid prompt </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/imagine requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImagineResponse> jobsImaginePostWithHttpInfo(JobsImaginePostRequest jobsImaginePostRequest) throws ApiException {
        okhttp3.Call localVarCall = jobsImaginePostValidateBeforeCall(jobsImaginePostRequest, null);
        Type localVarReturnType = new TypeToken<ImagineResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submit the Midjourney /imagine command
     * @param jobsImaginePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> prompt, discord, server or channel value is missing </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> prompt, replyRef or replyUrl is too long </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to find posted message, likely moderated or invalid prompt </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API query is full and can not accept new jobs/imagine requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsImaginePostAsync(JobsImaginePostRequest jobsImaginePostRequest, final ApiCallback<ImagineResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsImaginePostValidateBeforeCall(jobsImaginePostRequest, _callback);
        Type localVarReturnType = new TypeToken<ImagineResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
