/*
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BlendResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:16.048354-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BlendResponse {
  /**
   * Gets or Sets blendDimensions
   */
  @JsonAdapter(BlendDimensionsEnum.Adapter.class)
  public enum BlendDimensionsEnum {
    PORTRAIT("Portrait"),
    
    SQUARE("Square"),
    
    LANDSCAPE("Landscape");

    private String value;

    BlendDimensionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BlendDimensionsEnum fromValue(String value) {
      for (BlendDimensionsEnum b : BlendDimensionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BlendDimensionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlendDimensionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlendDimensionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BlendDimensionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BlendDimensionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BLEND_DIMENSIONS = "blendDimensions";
  @SerializedName(SERIALIZED_NAME_BLEND_DIMENSIONS)
  private BlendDimensionsEnum blendDimensions;

  public static final String SERIALIZED_NAME_BLEND_URLS = "blendUrls";
  @SerializedName(SERIALIZED_NAME_BLEND_URLS)
  private List<String> blendUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  /**
   * Gets or Sets code
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    NUMBER_200(200);

    private Integer value;

    CodeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(Integer value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_JOBID = "jobid";
  @SerializedName(SERIALIZED_NAME_JOBID)
  private String jobid;

  public static final String SERIALIZED_NAME_MAX_JOBS = "maxJobs";
  @SerializedName(SERIALIZED_NAME_MAX_JOBS)
  private Integer maxJobs;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STARTED("started");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  /**
   * Gets or Sets verb
   */
  @JsonAdapter(VerbEnum.Adapter.class)
  public enum VerbEnum {
    BLEND("blend");

    private String value;

    VerbEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerbEnum fromValue(String value) {
      for (VerbEnum b : VerbEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerbEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerbEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerbEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerbEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VerbEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERB = "verb";
  @SerializedName(SERIALIZED_NAME_VERB)
  private VerbEnum verb;

  public BlendResponse() {
  }

  public BlendResponse blendDimensions(BlendDimensionsEnum blendDimensions) {
    this.blendDimensions = blendDimensions;
    return this;
  }

  /**
   * Get blendDimensions
   * @return blendDimensions
   */
  @javax.annotation.Nullable
  public BlendDimensionsEnum getBlendDimensions() {
    return blendDimensions;
  }

  public void setBlendDimensions(BlendDimensionsEnum blendDimensions) {
    this.blendDimensions = blendDimensions;
  }


  public BlendResponse blendUrls(List<String> blendUrls) {
    this.blendUrls = blendUrls;
    return this;
  }

  public BlendResponse addBlendUrlsItem(String blendUrlsItem) {
    if (this.blendUrls == null) {
      this.blendUrls = new ArrayList<>();
    }
    this.blendUrls.add(blendUrlsItem);
    return this;
  }

  /**
   * Get blendUrls
   * @return blendUrls
   */
  @javax.annotation.Nonnull
  public List<String> getBlendUrls() {
    return blendUrls;
  }

  public void setBlendUrls(List<String> blendUrls) {
    this.blendUrls = blendUrls;
  }


  public BlendResponse channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nonnull
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public BlendResponse code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nonnull
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public BlendResponse content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Contains message generated by Midjourney reflecting current generation parameters and progress
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public BlendResponse created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nonnull
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public BlendResponse jobid(String jobid) {
    this.jobid = jobid;
    return this;
  }

  /**
   * Use returned jobid value to retrieve job status and results
   * @return jobid
   */
  @javax.annotation.Nonnull
  public String getJobid() {
    return jobid;
  }

  public void setJobid(String jobid) {
    this.jobid = jobid;
  }


  public BlendResponse maxJobs(Integer maxJobs) {
    this.maxJobs = maxJobs;
    return this;
  }

  /**
   * Get maxJobs
   * @return maxJobs
   */
  @javax.annotation.Nonnull
  public Integer getMaxJobs() {
    return maxJobs;
  }

  public void setMaxJobs(Integer maxJobs) {
    this.maxJobs = maxJobs;
  }


  public BlendResponse messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Get messageId
   * @return messageId
   */
  @javax.annotation.Nonnull
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public BlendResponse server(String server) {
    this.server = server;
    return this;
  }

  /**
   * Get server
   * @return server
   */
  @javax.annotation.Nonnull
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  public BlendResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public BlendResponse timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public BlendResponse updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nonnull
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public BlendResponse verb(VerbEnum verb) {
    this.verb = verb;
    return this;
  }

  /**
   * Get verb
   * @return verb
   */
  @javax.annotation.Nonnull
  public VerbEnum getVerb() {
    return verb;
  }

  public void setVerb(VerbEnum verb) {
    this.verb = verb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlendResponse blendResponse = (BlendResponse) o;
    return Objects.equals(this.blendDimensions, blendResponse.blendDimensions) &&
        Objects.equals(this.blendUrls, blendResponse.blendUrls) &&
        Objects.equals(this.channel, blendResponse.channel) &&
        Objects.equals(this.code, blendResponse.code) &&
        Objects.equals(this.content, blendResponse.content) &&
        Objects.equals(this.created, blendResponse.created) &&
        Objects.equals(this.jobid, blendResponse.jobid) &&
        Objects.equals(this.maxJobs, blendResponse.maxJobs) &&
        Objects.equals(this.messageId, blendResponse.messageId) &&
        Objects.equals(this.server, blendResponse.server) &&
        Objects.equals(this.status, blendResponse.status) &&
        Objects.equals(this.timestamp, blendResponse.timestamp) &&
        Objects.equals(this.updated, blendResponse.updated) &&
        Objects.equals(this.verb, blendResponse.verb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blendDimensions, blendUrls, channel, code, content, created, jobid, maxJobs, messageId, server, status, timestamp, updated, verb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlendResponse {\n");
    sb.append("    blendDimensions: ").append(toIndentedString(blendDimensions)).append("\n");
    sb.append("    blendUrls: ").append(toIndentedString(blendUrls)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    jobid: ").append(toIndentedString(jobid)).append("\n");
    sb.append("    maxJobs: ").append(toIndentedString(maxJobs)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    verb: ").append(toIndentedString(verb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blendDimensions");
    openapiFields.add("blendUrls");
    openapiFields.add("channel");
    openapiFields.add("code");
    openapiFields.add("content");
    openapiFields.add("created");
    openapiFields.add("jobid");
    openapiFields.add("maxJobs");
    openapiFields.add("messageId");
    openapiFields.add("server");
    openapiFields.add("status");
    openapiFields.add("timestamp");
    openapiFields.add("updated");
    openapiFields.add("verb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("blendUrls");
    openapiRequiredFields.add("channel");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("jobid");
    openapiRequiredFields.add("maxJobs");
    openapiRequiredFields.add("messageId");
    openapiRequiredFields.add("server");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("updated");
    openapiRequiredFields.add("verb");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlendResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlendResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlendResponse is not found in the empty JSON string", BlendResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlendResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlendResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlendResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blendDimensions") != null && !jsonObj.get("blendDimensions").isJsonNull()) && !jsonObj.get("blendDimensions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blendDimensions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blendDimensions").toString()));
      }
      // validate the optional field `blendDimensions`
      if (jsonObj.get("blendDimensions") != null && !jsonObj.get("blendDimensions").isJsonNull()) {
        BlendDimensionsEnum.validateJsonElement(jsonObj.get("blendDimensions"));
      }
      // ensure the required json array is present
      if (jsonObj.get("blendUrls") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("blendUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blendUrls` to be an array in the JSON string but got `%s`", jsonObj.get("blendUrls").toString()));
      }
      if (!jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      // validate the required field `code`
      CodeEnum.validateJsonElement(jsonObj.get("code"));
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (!jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if (!jsonObj.get("jobid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobid").toString()));
      }
      if (!jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if (!jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if (!jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if (!jsonObj.get("verb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verb").toString()));
      }
      // validate the required field `verb`
      VerbEnum.validateJsonElement(jsonObj.get("verb"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlendResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlendResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlendResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlendResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BlendResponse>() {
           @Override
           public void write(JsonWriter out, BlendResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlendResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlendResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlendResponse
   * @throws IOException if the JSON string is invalid with respect to BlendResponse
   */
  public static BlendResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlendResponse.class);
  }

  /**
   * Convert an instance of BlendResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

