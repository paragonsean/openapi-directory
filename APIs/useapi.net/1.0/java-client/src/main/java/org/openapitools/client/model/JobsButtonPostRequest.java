/*
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobsButtonPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:16.048354-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobsButtonPostRequest {
  /**
   * button from buttons array of job referenced via jobid
   */
  @JsonAdapter(ButtonEnum.Adapter.class)
  public enum ButtonEnum {
    U1("U1"),
    
    U2("U2"),
    
    U3("U3"),
    
    U4("U4"),
    
    V1("V1"),
    
    V2("V2"),
    
    V3("V3"),
    
    V4("V4"),
    
    u("‚¨ÖÔ∏è"),
    
    u2("‚û°Ô∏è"),
    
    u3("‚¨ÜÔ∏è"),
    
    u4("‚¨áÔ∏è"),
    
    u5("üîÑ"),
    
    VARY_STRONG_("Vary (Strong)"),
    
    VARY_SUBTLE_("Vary (Subtle)"),
    
    ZOOM_OUT_1_5X("Zoom Out 1.5x"),
    
    ZOOM_OUT_2X("Zoom Out 2x"),
    
    MAKE_SQUARE("Make Square"),
    
    MAKE_VARIATIONS("Make Variations"),
    
    REMASTER("Remaster");

    private String value;

    ButtonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ButtonEnum fromValue(String value) {
      for (ButtonEnum b : ButtonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ButtonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ButtonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ButtonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ButtonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ButtonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUTTON = "button";
  @SerializedName(SERIALIZED_NAME_BUTTON)
  private ButtonEnum button;

  public static final String SERIALIZED_NAME_DISCORD = "discord";
  @SerializedName(SERIALIZED_NAME_DISCORD)
  private String discord;

  public static final String SERIALIZED_NAME_JOBID = "jobid";
  @SerializedName(SERIALIZED_NAME_JOBID)
  private String jobid;

  public static final String SERIALIZED_NAME_MAX_JOBS = "maxJobs";
  @SerializedName(SERIALIZED_NAME_MAX_JOBS)
  private Integer maxJobs;

  public static final String SERIALIZED_NAME_REPLY_REF = "replyRef";
  @SerializedName(SERIALIZED_NAME_REPLY_REF)
  private String replyRef;

  public static final String SERIALIZED_NAME_REPLY_URL = "replyUrl";
  @SerializedName(SERIALIZED_NAME_REPLY_URL)
  private String replyUrl;

  public JobsButtonPostRequest() {
  }

  public JobsButtonPostRequest button(ButtonEnum button) {
    this.button = button;
    return this;
  }

  /**
   * button from buttons array of job referenced via jobid
   * @return button
   */
  @javax.annotation.Nonnull
  public ButtonEnum getButton() {
    return button;
  }

  public void setButton(ButtonEnum button) {
    this.button = button;
  }


  public JobsButtonPostRequest discord(String discord) {
    this.discord = discord;
    return this;
  }

  /**
   * Optional Discord token, if provided will override discord value of referenced jobid
   * @return discord
   */
  @javax.annotation.Nullable
  public String getDiscord() {
    return discord;
  }

  public void setDiscord(String discord) {
    this.discord = discord;
  }


  public JobsButtonPostRequest jobid(String jobid) {
    this.jobid = jobid;
    return this;
  }

  /**
   * jobid of successfully completed (status set to completed) jobs/imagine or jobs/button job
   * @return jobid
   */
  @javax.annotation.Nonnull
  public String getJobid() {
    return jobid;
  }

  public void setJobid(String jobid) {
    this.jobid = jobid;
  }


  public JobsButtonPostRequest maxJobs(Integer maxJobs) {
    this.maxJobs = maxJobs;
    return this;
  }

  /**
   * Optional Maximum Concurrent Jobs for current Midjourney subscription
   * minimum: 1
   * maximum: 15
   * @return maxJobs
   */
  @javax.annotation.Nullable
  public Integer getMaxJobs() {
    return maxJobs;
  }

  public void setMaxJobs(Integer maxJobs) {
    this.maxJobs = maxJobs;
  }


  public JobsButtonPostRequest replyRef(String replyRef) {
    this.replyRef = replyRef;
    return this;
  }

  /**
   * Optional reference id which will be stored and returned along with this job response / result
   * @return replyRef
   */
  @javax.annotation.Nullable
  public String getReplyRef() {
    return replyRef;
  }

  public void setReplyRef(String replyRef) {
    this.replyRef = replyRef;
  }


  public JobsButtonPostRequest replyUrl(String replyUrl) {
    this.replyUrl = replyUrl;
    return this;
  }

  /**
   * Optional callback URL, API will call the provided replyUrl once generation completed
   * @return replyUrl
   */
  @javax.annotation.Nullable
  public String getReplyUrl() {
    return replyUrl;
  }

  public void setReplyUrl(String replyUrl) {
    this.replyUrl = replyUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobsButtonPostRequest jobsButtonPostRequest = (JobsButtonPostRequest) o;
    return Objects.equals(this.button, jobsButtonPostRequest.button) &&
        Objects.equals(this.discord, jobsButtonPostRequest.discord) &&
        Objects.equals(this.jobid, jobsButtonPostRequest.jobid) &&
        Objects.equals(this.maxJobs, jobsButtonPostRequest.maxJobs) &&
        Objects.equals(this.replyRef, jobsButtonPostRequest.replyRef) &&
        Objects.equals(this.replyUrl, jobsButtonPostRequest.replyUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(button, discord, jobid, maxJobs, replyRef, replyUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobsButtonPostRequest {\n");
    sb.append("    button: ").append(toIndentedString(button)).append("\n");
    sb.append("    discord: ").append(toIndentedString(discord)).append("\n");
    sb.append("    jobid: ").append(toIndentedString(jobid)).append("\n");
    sb.append("    maxJobs: ").append(toIndentedString(maxJobs)).append("\n");
    sb.append("    replyRef: ").append(toIndentedString(replyRef)).append("\n");
    sb.append("    replyUrl: ").append(toIndentedString(replyUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("button");
    openapiFields.add("discord");
    openapiFields.add("jobid");
    openapiFields.add("maxJobs");
    openapiFields.add("replyRef");
    openapiFields.add("replyUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("button");
    openapiRequiredFields.add("jobid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobsButtonPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobsButtonPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobsButtonPostRequest is not found in the empty JSON string", JobsButtonPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobsButtonPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobsButtonPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobsButtonPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("button").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `button` to be a primitive type in the JSON string but got `%s`", jsonObj.get("button").toString()));
      }
      // validate the required field `button`
      ButtonEnum.validateJsonElement(jsonObj.get("button"));
      if ((jsonObj.get("discord") != null && !jsonObj.get("discord").isJsonNull()) && !jsonObj.get("discord").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discord` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discord").toString()));
      }
      if (!jsonObj.get("jobid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobid").toString()));
      }
      if ((jsonObj.get("replyRef") != null && !jsonObj.get("replyRef").isJsonNull()) && !jsonObj.get("replyRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyRef").toString()));
      }
      if ((jsonObj.get("replyUrl") != null && !jsonObj.get("replyUrl").isJsonNull()) && !jsonObj.get("replyUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobsButtonPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobsButtonPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobsButtonPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobsButtonPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<JobsButtonPostRequest>() {
           @Override
           public void write(JsonWriter out, JobsButtonPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobsButtonPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobsButtonPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobsButtonPostRequest
   * @throws IOException if the JSON string is invalid with respect to JobsButtonPostRequest
   */
  public static JobsButtonPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobsButtonPostRequest.class);
  }

  /**
   * Convert an instance of JobsButtonPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

