/*
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ButtonResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:16.048354-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ButtonResponse {
  /**
   * Gets or Sets button
   */
  @JsonAdapter(ButtonEnum.Adapter.class)
  public enum ButtonEnum {
    U1("U1"),
    
    U2("U2"),
    
    U3("U3"),
    
    U4("U4"),
    
    V1("V1"),
    
    V2("V2"),
    
    V3("V3"),
    
    V4("V4"),
    
    u("‚¨ÖÔ∏è"),
    
    u2("‚û°Ô∏è"),
    
    u3("‚¨ÜÔ∏è"),
    
    u4("‚¨áÔ∏è"),
    
    u5("üîÑ"),
    
    VARY_STRONG_("Vary (Strong)"),
    
    VARY_SUBTLE_("Vary (Subtle)"),
    
    ZOOM_OUT_1_5X("Zoom Out 1.5x"),
    
    ZOOM_OUT_2X("Zoom Out 2x"),
    
    MAKE_SQUARE("Make Square"),
    
    MAKE_VARIATIONS("Make Variations"),
    
    REMASTER("Remaster");

    private String value;

    ButtonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ButtonEnum fromValue(String value) {
      for (ButtonEnum b : ButtonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ButtonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ButtonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ButtonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ButtonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ButtonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUTTON = "button";
  @SerializedName(SERIALIZED_NAME_BUTTON)
  private ButtonEnum button;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  /**
   * Gets or Sets code
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    NUMBER_200(200);

    private Integer value;

    CodeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(Integer value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_JOBID = "jobid";
  @SerializedName(SERIALIZED_NAME_JOBID)
  private String jobid;

  public static final String SERIALIZED_NAME_MAX_JOBS = "maxJobs";
  @SerializedName(SERIALIZED_NAME_MAX_JOBS)
  private Integer maxJobs;

  public static final String SERIALIZED_NAME_PARENT_JOB_ID = "parentJobId";
  @SerializedName(SERIALIZED_NAME_PARENT_JOB_ID)
  private String parentJobId;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STARTED("started"),
    
    COMPLETED("completed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  /**
   * Gets or Sets verb
   */
  @JsonAdapter(VerbEnum.Adapter.class)
  public enum VerbEnum {
    BUTTON("button");

    private String value;

    VerbEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerbEnum fromValue(String value) {
      for (VerbEnum b : VerbEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerbEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerbEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerbEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerbEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VerbEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERB = "verb";
  @SerializedName(SERIALIZED_NAME_VERB)
  private VerbEnum verb;

  public ButtonResponse() {
  }

  public ButtonResponse button(ButtonEnum button) {
    this.button = button;
    return this;
  }

  /**
   * Get button
   * @return button
   */
  @javax.annotation.Nonnull
  public ButtonEnum getButton() {
    return button;
  }

  public void setButton(ButtonEnum button) {
    this.button = button;
  }


  public ButtonResponse channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nonnull
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public ButtonResponse code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nonnull
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public ButtonResponse created(String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nonnull
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public ButtonResponse jobid(String jobid) {
    this.jobid = jobid;
    return this;
  }

  /**
   * Use returned jobid value to retrieve job status and results
   * @return jobid
   */
  @javax.annotation.Nonnull
  public String getJobid() {
    return jobid;
  }

  public void setJobid(String jobid) {
    this.jobid = jobid;
  }


  public ButtonResponse maxJobs(Integer maxJobs) {
    this.maxJobs = maxJobs;
    return this;
  }

  /**
   * Get maxJobs
   * @return maxJobs
   */
  @javax.annotation.Nonnull
  public Integer getMaxJobs() {
    return maxJobs;
  }

  public void setMaxJobs(Integer maxJobs) {
    this.maxJobs = maxJobs;
  }


  public ButtonResponse parentJobId(String parentJobId) {
    this.parentJobId = parentJobId;
    return this;
  }

  /**
   * Get parentJobId
   * @return parentJobId
   */
  @javax.annotation.Nonnull
  public String getParentJobId() {
    return parentJobId;
  }

  public void setParentJobId(String parentJobId) {
    this.parentJobId = parentJobId;
  }


  public ButtonResponse server(String server) {
    this.server = server;
    return this;
  }

  /**
   * Get server
   * @return server
   */
  @javax.annotation.Nonnull
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  public ButtonResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ButtonResponse updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nonnull
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public ButtonResponse verb(VerbEnum verb) {
    this.verb = verb;
    return this;
  }

  /**
   * Get verb
   * @return verb
   */
  @javax.annotation.Nonnull
  public VerbEnum getVerb() {
    return verb;
  }

  public void setVerb(VerbEnum verb) {
    this.verb = verb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ButtonResponse buttonResponse = (ButtonResponse) o;
    return Objects.equals(this.button, buttonResponse.button) &&
        Objects.equals(this.channel, buttonResponse.channel) &&
        Objects.equals(this.code, buttonResponse.code) &&
        Objects.equals(this.created, buttonResponse.created) &&
        Objects.equals(this.jobid, buttonResponse.jobid) &&
        Objects.equals(this.maxJobs, buttonResponse.maxJobs) &&
        Objects.equals(this.parentJobId, buttonResponse.parentJobId) &&
        Objects.equals(this.server, buttonResponse.server) &&
        Objects.equals(this.status, buttonResponse.status) &&
        Objects.equals(this.updated, buttonResponse.updated) &&
        Objects.equals(this.verb, buttonResponse.verb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(button, channel, code, created, jobid, maxJobs, parentJobId, server, status, updated, verb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ButtonResponse {\n");
    sb.append("    button: ").append(toIndentedString(button)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    jobid: ").append(toIndentedString(jobid)).append("\n");
    sb.append("    maxJobs: ").append(toIndentedString(maxJobs)).append("\n");
    sb.append("    parentJobId: ").append(toIndentedString(parentJobId)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    verb: ").append(toIndentedString(verb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("button");
    openapiFields.add("channel");
    openapiFields.add("code");
    openapiFields.add("created");
    openapiFields.add("jobid");
    openapiFields.add("maxJobs");
    openapiFields.add("parentJobId");
    openapiFields.add("server");
    openapiFields.add("status");
    openapiFields.add("updated");
    openapiFields.add("verb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("button");
    openapiRequiredFields.add("channel");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("jobid");
    openapiRequiredFields.add("maxJobs");
    openapiRequiredFields.add("parentJobId");
    openapiRequiredFields.add("server");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("updated");
    openapiRequiredFields.add("verb");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ButtonResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ButtonResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ButtonResponse is not found in the empty JSON string", ButtonResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ButtonResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ButtonResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ButtonResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("button").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `button` to be a primitive type in the JSON string but got `%s`", jsonObj.get("button").toString()));
      }
      // validate the required field `button`
      ButtonEnum.validateJsonElement(jsonObj.get("button"));
      if (!jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      // validate the required field `code`
      CodeEnum.validateJsonElement(jsonObj.get("code"));
      if (!jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if (!jsonObj.get("jobid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobid").toString()));
      }
      if (!jsonObj.get("parentJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentJobId").toString()));
      }
      if (!jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if (!jsonObj.get("verb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verb").toString()));
      }
      // validate the required field `verb`
      VerbEnum.validateJsonElement(jsonObj.get("verb"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ButtonResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ButtonResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ButtonResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ButtonResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ButtonResponse>() {
           @Override
           public void write(JsonWriter out, ButtonResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ButtonResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ButtonResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ButtonResponse
   * @throws IOException if the JSON string is invalid with respect to ButtonResponse
   */
  public static ButtonResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ButtonResponse.class);
  }

  /**
   * Convert an instance of ButtonResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

