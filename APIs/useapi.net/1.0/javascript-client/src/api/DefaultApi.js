/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountResponse from '../model/AccountResponse';
import BlendResponse from '../model/BlendResponse';
import ButtonResponse from '../model/ButtonResponse';
import ButtonResponseErrorUpscaled from '../model/ButtonResponseErrorUpscaled';
import DescribeResponse from '../model/DescribeResponse';
import ImagineResponse from '../model/ImagineResponse';
import ImagineResponseModerated from '../model/ImagineResponseModerated';
import JobCancelResponse from '../model/JobCancelResponse';
import JobResponse from '../model/JobResponse';
import JobsBlendPostRequest from '../model/JobsBlendPostRequest';
import JobsButtonPostRequest from '../model/JobsButtonPostRequest';
import JobsDescribePostRequest from '../model/JobsDescribePostRequest';
import JobsImaginePostRequest from '../model/JobsImaginePostRequest';
import ResponseError from '../model/ResponseError';
import ResponseMaxJobs from '../model/ResponseMaxJobs';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountGet operation.
     * @callback module:api/DefaultApi~accountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve account information
     * @param {module:api/DefaultApi~accountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountResponse}
     */
    accountGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountResponse;
      return this.apiClient.callApi(
        '/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsBlendPost operation.
     * @callback module:api/DefaultApi~jobsBlendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlendResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit the Midjourney /blend command
     * @param {module:model/JobsBlendPostRequest} jobsBlendPostRequest 
     * @param {module:api/DefaultApi~jobsBlendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlendResponse}
     */
    jobsBlendPost(jobsBlendPostRequest, callback) {
      let postBody = jobsBlendPostRequest;
      // verify the required parameter 'jobsBlendPostRequest' is set
      if (jobsBlendPostRequest === undefined || jobsBlendPostRequest === null) {
        throw new Error("Missing the required parameter 'jobsBlendPostRequest' when calling jobsBlendPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BlendResponse;
      return this.apiClient.callApi(
        '/jobs/blend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsButtonPost operation.
     * @callback module:api/DefaultApi~jobsButtonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ButtonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit the Midjourney /imagine command
     * @param {module:model/JobsButtonPostRequest} jobsButtonPostRequest 
     * @param {module:api/DefaultApi~jobsButtonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ButtonResponse}
     */
    jobsButtonPost(jobsButtonPostRequest, callback) {
      let postBody = jobsButtonPostRequest;
      // verify the required parameter 'jobsButtonPostRequest' is set
      if (jobsButtonPostRequest === undefined || jobsButtonPostRequest === null) {
        throw new Error("Missing the required parameter 'jobsButtonPostRequest' when calling jobsButtonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ButtonResponse;
      return this.apiClient.callApi(
        '/jobs/button', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsCancelGet operation.
     * @callback module:api/DefaultApi~jobsCancelGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobCancelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel execution of job created by jobs/imagine, jobs/button, jobs/blend or jobs/describe
     * @param {String} jobid jobid value returned by jobs/imagine, jobs/button, jobs/blend or jobs/describe
     * @param {module:api/DefaultApi~jobsCancelGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobCancelResponse}
     */
    jobsCancelGet(jobid, callback) {
      let postBody = null;
      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling jobsCancelGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'jobid': jobid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobCancelResponse;
      return this.apiClient.callApi(
        '/jobs/cancel/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsDescribePost operation.
     * @callback module:api/DefaultApi~jobsDescribePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit the Midjourney /describe command
     * @param {module:model/JobsDescribePostRequest} jobsDescribePostRequest 
     * @param {module:api/DefaultApi~jobsDescribePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeResponse}
     */
    jobsDescribePost(jobsDescribePostRequest, callback) {
      let postBody = jobsDescribePostRequest;
      // verify the required parameter 'jobsDescribePostRequest' is set
      if (jobsDescribePostRequest === undefined || jobsDescribePostRequest === null) {
        throw new Error("Missing the required parameter 'jobsDescribePostRequest' when calling jobsDescribePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeResponse;
      return this.apiClient.callApi(
        '/jobs/describe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsGet operation.
     * @callback module:api/DefaultApi~jobsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of currently executing jobs
     * @param {module:api/DefaultApi~jobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    jobsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsGet_0 operation.
     * @callback module:api/DefaultApi~jobsGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve status and results of jobs/imagine, jobs/button, jobs/blend or jobs/describe
     * @param {String} jobid jobid value returned by jobs/imagine, jobs/button, jobs/blend or jobs/describe
     * @param {module:api/DefaultApi~jobsGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResponse}
     */
    jobsGet_0(jobid, callback) {
      let postBody = null;
      // verify the required parameter 'jobid' is set
      if (jobid === undefined || jobid === null) {
        throw new Error("Missing the required parameter 'jobid' when calling jobsGet_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'jobid': jobid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobResponse;
      return this.apiClient.callApi(
        '/jobs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsImaginePost operation.
     * @callback module:api/DefaultApi~jobsImaginePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit the Midjourney /imagine command
     * @param {module:model/JobsImaginePostRequest} jobsImaginePostRequest 
     * @param {module:api/DefaultApi~jobsImaginePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagineResponse}
     */
    jobsImaginePost(jobsImaginePostRequest, callback) {
      let postBody = jobsImaginePostRequest;
      // verify the required parameter 'jobsImaginePostRequest' is set
      if (jobsImaginePostRequest === undefined || jobsImaginePostRequest === null) {
        throw new Error("Missing the required parameter 'jobsImaginePostRequest' when calling jobsImaginePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImagineResponse;
      return this.apiClient.callApi(
        '/jobs/imagine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
