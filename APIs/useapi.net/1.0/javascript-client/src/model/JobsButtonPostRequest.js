/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JobsButtonPostRequest model module.
 * @module model/JobsButtonPostRequest
 * @version 1.0
 */
class JobsButtonPostRequest {
    /**
     * Constructs a new <code>JobsButtonPostRequest</code>.
     * @alias module:model/JobsButtonPostRequest
     * @param button {module:model/JobsButtonPostRequest.ButtonEnum} button from buttons array of job referenced via jobid
     * @param jobid {String} jobid of successfully completed (status set to completed) jobs/imagine or jobs/button job
     */
    constructor(button, jobid) { 
        
        JobsButtonPostRequest.initialize(this, button, jobid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, button, jobid) { 
        obj['button'] = button;
        obj['jobid'] = jobid;
    }

    /**
     * Constructs a <code>JobsButtonPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobsButtonPostRequest} obj Optional instance to populate.
     * @return {module:model/JobsButtonPostRequest} The populated <code>JobsButtonPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobsButtonPostRequest();

            if (data.hasOwnProperty('button')) {
                obj['button'] = ApiClient.convertToType(data['button'], 'String');
            }
            if (data.hasOwnProperty('discord')) {
                obj['discord'] = ApiClient.convertToType(data['discord'], 'String');
            }
            if (data.hasOwnProperty('jobid')) {
                obj['jobid'] = ApiClient.convertToType(data['jobid'], 'String');
            }
            if (data.hasOwnProperty('maxJobs')) {
                obj['maxJobs'] = ApiClient.convertToType(data['maxJobs'], 'Number');
            }
            if (data.hasOwnProperty('replyRef')) {
                obj['replyRef'] = ApiClient.convertToType(data['replyRef'], 'String');
            }
            if (data.hasOwnProperty('replyUrl')) {
                obj['replyUrl'] = ApiClient.convertToType(data['replyUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobsButtonPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobsButtonPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobsButtonPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['button'] && !(typeof data['button'] === 'string' || data['button'] instanceof String)) {
            throw new Error("Expected the field `button` to be a primitive type in the JSON string but got " + data['button']);
        }
        // ensure the json data is a string
        if (data['discord'] && !(typeof data['discord'] === 'string' || data['discord'] instanceof String)) {
            throw new Error("Expected the field `discord` to be a primitive type in the JSON string but got " + data['discord']);
        }
        // ensure the json data is a string
        if (data['jobid'] && !(typeof data['jobid'] === 'string' || data['jobid'] instanceof String)) {
            throw new Error("Expected the field `jobid` to be a primitive type in the JSON string but got " + data['jobid']);
        }
        // ensure the json data is a string
        if (data['replyRef'] && !(typeof data['replyRef'] === 'string' || data['replyRef'] instanceof String)) {
            throw new Error("Expected the field `replyRef` to be a primitive type in the JSON string but got " + data['replyRef']);
        }
        // ensure the json data is a string
        if (data['replyUrl'] && !(typeof data['replyUrl'] === 'string' || data['replyUrl'] instanceof String)) {
            throw new Error("Expected the field `replyUrl` to be a primitive type in the JSON string but got " + data['replyUrl']);
        }

        return true;
    }


}

JobsButtonPostRequest.RequiredProperties = ["button", "jobid"];

/**
 * button from buttons array of job referenced via jobid
 * @member {module:model/JobsButtonPostRequest.ButtonEnum} button
 */
JobsButtonPostRequest.prototype['button'] = undefined;

/**
 * Optional Discord token, if provided will override discord value of referenced jobid
 * @member {String} discord
 */
JobsButtonPostRequest.prototype['discord'] = undefined;

/**
 * jobid of successfully completed (status set to completed) jobs/imagine or jobs/button job
 * @member {String} jobid
 */
JobsButtonPostRequest.prototype['jobid'] = undefined;

/**
 * Optional Maximum Concurrent Jobs for current Midjourney subscription
 * @member {Number} maxJobs
 */
JobsButtonPostRequest.prototype['maxJobs'] = undefined;

/**
 * Optional reference id which will be stored and returned along with this job response / result
 * @member {String} replyRef
 */
JobsButtonPostRequest.prototype['replyRef'] = undefined;

/**
 * Optional callback URL, API will call the provided replyUrl once generation completed
 * @member {String} replyUrl
 */
JobsButtonPostRequest.prototype['replyUrl'] = undefined;





/**
 * Allowed values for the <code>button</code> property.
 * @enum {String}
 * @readonly
 */
JobsButtonPostRequest['ButtonEnum'] = {

    /**
     * value: "U1"
     * @const
     */
    "U1": "U1",

    /**
     * value: "U2"
     * @const
     */
    "U2": "U2",

    /**
     * value: "U3"
     * @const
     */
    "U3": "U3",

    /**
     * value: "U4"
     * @const
     */
    "U4": "U4",

    /**
     * value: "V1"
     * @const
     */
    "V1": "V1",

    /**
     * value: "V2"
     * @const
     */
    "V2": "V2",

    /**
     * value: "V3"
     * @const
     */
    "V3": "V3",

    /**
     * value: "V4"
     * @const
     */
    "V4": "V4",

    /**
     * value: "‚¨ÖÔ∏è"
     * @const
     */
    "‚¨ÖÔ∏è": "‚¨ÖÔ∏è",

    /**
     * value: "‚û°Ô∏è"
     * @const
     */
    "‚û°Ô∏è": "‚û°Ô∏è",

    /**
     * value: "‚¨ÜÔ∏è"
     * @const
     */
    "‚¨ÜÔ∏è": "‚¨ÜÔ∏è",

    /**
     * value: "‚¨áÔ∏è"
     * @const
     */
    "‚¨áÔ∏è": "‚¨áÔ∏è",

    /**
     * value: "üîÑ"
     * @const
     */
    "üîÑ": "üîÑ",

    /**
     * value: "Vary (Strong)"
     * @const
     */
    "Vary (Strong)": "Vary (Strong)",

    /**
     * value: "Vary (Subtle)"
     * @const
     */
    "Vary (Subtle)": "Vary (Subtle)",

    /**
     * value: "Zoom Out 1.5x"
     * @const
     */
    "Zoom Out 1.5x": "Zoom Out 1.5x",

    /**
     * value: "Zoom Out 2x"
     * @const
     */
    "Zoom Out 2x": "Zoom Out 2x",

    /**
     * value: "Make Square"
     * @const
     */
    "Make Square": "Make Square",

    /**
     * value: "Make Variations"
     * @const
     */
    "Make Variations": "Make Variations",

    /**
     * value: "Remaster"
     * @const
     */
    "Remaster": "Remaster"
};



export default JobsButtonPostRequest;

