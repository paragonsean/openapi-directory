/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImagineResponseModerated model module.
 * @module model/ImagineResponseModerated
 * @version 1.0
 */
class ImagineResponseModerated {
    /**
     * Constructs a new <code>ImagineResponseModerated</code>.
     * @alias module:model/ImagineResponseModerated
     * @param code {module:model/ImagineResponseModerated.CodeEnum} 
     * @param error {String} 
     * @param jobid {String} 
     * @param status {module:model/ImagineResponseModerated.StatusEnum} 
     */
    constructor(code, error, jobid, status) { 
        
        ImagineResponseModerated.initialize(this, code, error, jobid, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, error, jobid, status) { 
        obj['code'] = code;
        obj['error'] = error;
        obj['jobid'] = jobid;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>ImagineResponseModerated</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImagineResponseModerated} obj Optional instance to populate.
     * @return {module:model/ImagineResponseModerated} The populated <code>ImagineResponseModerated</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImagineResponseModerated();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'Number');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('jobid')) {
                obj['jobid'] = ApiClient.convertToType(data['jobid'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImagineResponseModerated</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImagineResponseModerated</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImagineResponseModerated.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['jobid'] && !(typeof data['jobid'] === 'string' || data['jobid'] instanceof String)) {
            throw new Error("Expected the field `jobid` to be a primitive type in the JSON string but got " + data['jobid']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

ImagineResponseModerated.RequiredProperties = ["code", "error", "jobid", "status"];

/**
 * @member {module:model/ImagineResponseModerated.CodeEnum} code
 */
ImagineResponseModerated.prototype['code'] = undefined;

/**
 * @member {String} error
 */
ImagineResponseModerated.prototype['error'] = undefined;

/**
 * @member {String} jobid
 */
ImagineResponseModerated.prototype['jobid'] = undefined;

/**
 * @member {module:model/ImagineResponseModerated.StatusEnum} status
 */
ImagineResponseModerated.prototype['status'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {Number}
 * @readonly
 */
ImagineResponseModerated['CodeEnum'] = {

    /**
     * value: 422
     * @const
     */
    "422": 422
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ImagineResponseModerated['StatusEnum'] = {

    /**
     * value: "moderated"
     * @const
     */
    "moderated": "moderated"
};



export default ImagineResponseModerated;

