/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BlendResponse model module.
 * @module model/BlendResponse
 * @version 1.0
 */
class BlendResponse {
    /**
     * Constructs a new <code>BlendResponse</code>.
     * @alias module:model/BlendResponse
     * @param blendUrls {Array.<String>} 
     * @param channel {String} 
     * @param code {module:model/BlendResponse.CodeEnum} 
     * @param content {String} Contains message generated by Midjourney reflecting current generation parameters and progress
     * @param created {String} 
     * @param jobid {String} Use returned jobid value to retrieve job status and results
     * @param maxJobs {Number} 
     * @param messageId {String} 
     * @param server {String} 
     * @param status {module:model/BlendResponse.StatusEnum} 
     * @param timestamp {String} 
     * @param updated {String} 
     * @param verb {module:model/BlendResponse.VerbEnum} 
     */
    constructor(blendUrls, channel, code, content, created, jobid, maxJobs, messageId, server, status, timestamp, updated, verb) { 
        
        BlendResponse.initialize(this, blendUrls, channel, code, content, created, jobid, maxJobs, messageId, server, status, timestamp, updated, verb);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blendUrls, channel, code, content, created, jobid, maxJobs, messageId, server, status, timestamp, updated, verb) { 
        obj['blendUrls'] = blendUrls;
        obj['channel'] = channel;
        obj['code'] = code;
        obj['content'] = content;
        obj['created'] = created;
        obj['jobid'] = jobid;
        obj['maxJobs'] = maxJobs;
        obj['messageId'] = messageId;
        obj['server'] = server;
        obj['status'] = status;
        obj['timestamp'] = timestamp;
        obj['updated'] = updated;
        obj['verb'] = verb;
    }

    /**
     * Constructs a <code>BlendResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlendResponse} obj Optional instance to populate.
     * @return {module:model/BlendResponse} The populated <code>BlendResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlendResponse();

            if (data.hasOwnProperty('blendDimensions')) {
                obj['blendDimensions'] = ApiClient.convertToType(data['blendDimensions'], 'String');
            }
            if (data.hasOwnProperty('blendUrls')) {
                obj['blendUrls'] = ApiClient.convertToType(data['blendUrls'], ['String']);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'Number');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('jobid')) {
                obj['jobid'] = ApiClient.convertToType(data['jobid'], 'String');
            }
            if (data.hasOwnProperty('maxJobs')) {
                obj['maxJobs'] = ApiClient.convertToType(data['maxJobs'], 'Number');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('server')) {
                obj['server'] = ApiClient.convertToType(data['server'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
            if (data.hasOwnProperty('verb')) {
                obj['verb'] = ApiClient.convertToType(data['verb'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlendResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlendResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BlendResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['blendDimensions'] && !(typeof data['blendDimensions'] === 'string' || data['blendDimensions'] instanceof String)) {
            throw new Error("Expected the field `blendDimensions` to be a primitive type in the JSON string but got " + data['blendDimensions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blendUrls'])) {
            throw new Error("Expected the field `blendUrls` to be an array in the JSON data but got " + data['blendUrls']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['jobid'] && !(typeof data['jobid'] === 'string' || data['jobid'] instanceof String)) {
            throw new Error("Expected the field `jobid` to be a primitive type in the JSON string but got " + data['jobid']);
        }
        // ensure the json data is a string
        if (data['messageId'] && !(typeof data['messageId'] === 'string' || data['messageId'] instanceof String)) {
            throw new Error("Expected the field `messageId` to be a primitive type in the JSON string but got " + data['messageId']);
        }
        // ensure the json data is a string
        if (data['server'] && !(typeof data['server'] === 'string' || data['server'] instanceof String)) {
            throw new Error("Expected the field `server` to be a primitive type in the JSON string but got " + data['server']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }
        // ensure the json data is a string
        if (data['verb'] && !(typeof data['verb'] === 'string' || data['verb'] instanceof String)) {
            throw new Error("Expected the field `verb` to be a primitive type in the JSON string but got " + data['verb']);
        }

        return true;
    }


}

BlendResponse.RequiredProperties = ["blendUrls", "channel", "code", "content", "created", "jobid", "maxJobs", "messageId", "server", "status", "timestamp", "updated", "verb"];

/**
 * @member {module:model/BlendResponse.BlendDimensionsEnum} blendDimensions
 */
BlendResponse.prototype['blendDimensions'] = undefined;

/**
 * @member {Array.<String>} blendUrls
 */
BlendResponse.prototype['blendUrls'] = undefined;

/**
 * @member {String} channel
 */
BlendResponse.prototype['channel'] = undefined;

/**
 * @member {module:model/BlendResponse.CodeEnum} code
 */
BlendResponse.prototype['code'] = undefined;

/**
 * Contains message generated by Midjourney reflecting current generation parameters and progress
 * @member {String} content
 */
BlendResponse.prototype['content'] = undefined;

/**
 * @member {String} created
 */
BlendResponse.prototype['created'] = undefined;

/**
 * Use returned jobid value to retrieve job status and results
 * @member {String} jobid
 */
BlendResponse.prototype['jobid'] = undefined;

/**
 * @member {Number} maxJobs
 */
BlendResponse.prototype['maxJobs'] = undefined;

/**
 * @member {String} messageId
 */
BlendResponse.prototype['messageId'] = undefined;

/**
 * @member {String} server
 */
BlendResponse.prototype['server'] = undefined;

/**
 * @member {module:model/BlendResponse.StatusEnum} status
 */
BlendResponse.prototype['status'] = undefined;

/**
 * @member {String} timestamp
 */
BlendResponse.prototype['timestamp'] = undefined;

/**
 * @member {String} updated
 */
BlendResponse.prototype['updated'] = undefined;

/**
 * @member {module:model/BlendResponse.VerbEnum} verb
 */
BlendResponse.prototype['verb'] = undefined;





/**
 * Allowed values for the <code>blendDimensions</code> property.
 * @enum {String}
 * @readonly
 */
BlendResponse['BlendDimensionsEnum'] = {

    /**
     * value: "Portrait"
     * @const
     */
    "Portrait": "Portrait",

    /**
     * value: "Square"
     * @const
     */
    "Square": "Square",

    /**
     * value: "Landscape"
     * @const
     */
    "Landscape": "Landscape"
};


/**
 * Allowed values for the <code>code</code> property.
 * @enum {Number}
 * @readonly
 */
BlendResponse['CodeEnum'] = {

    /**
     * value: 200
     * @const
     */
    "200": 200
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
BlendResponse['StatusEnum'] = {

    /**
     * value: "started"
     * @const
     */
    "started": "started"
};


/**
 * Allowed values for the <code>verb</code> property.
 * @enum {String}
 * @readonly
 */
BlendResponse['VerbEnum'] = {

    /**
     * value: "blend"
     * @const
     */
    "blend": "blend"
};



export default BlendResponse;

