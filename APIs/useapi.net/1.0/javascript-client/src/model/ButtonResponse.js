/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ButtonResponse model module.
 * @module model/ButtonResponse
 * @version 1.0
 */
class ButtonResponse {
    /**
     * Constructs a new <code>ButtonResponse</code>.
     * @alias module:model/ButtonResponse
     * @param button {module:model/ButtonResponse.ButtonEnum} 
     * @param channel {String} 
     * @param code {module:model/ButtonResponse.CodeEnum} 
     * @param created {String} 
     * @param jobid {String} Use returned jobid value to retrieve job status and results
     * @param maxJobs {Number} 
     * @param parentJobId {String} 
     * @param server {String} 
     * @param status {module:model/ButtonResponse.StatusEnum} 
     * @param updated {String} 
     * @param verb {module:model/ButtonResponse.VerbEnum} 
     */
    constructor(button, channel, code, created, jobid, maxJobs, parentJobId, server, status, updated, verb) { 
        
        ButtonResponse.initialize(this, button, channel, code, created, jobid, maxJobs, parentJobId, server, status, updated, verb);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, button, channel, code, created, jobid, maxJobs, parentJobId, server, status, updated, verb) { 
        obj['button'] = button;
        obj['channel'] = channel;
        obj['code'] = code;
        obj['created'] = created;
        obj['jobid'] = jobid;
        obj['maxJobs'] = maxJobs;
        obj['parentJobId'] = parentJobId;
        obj['server'] = server;
        obj['status'] = status;
        obj['updated'] = updated;
        obj['verb'] = verb;
    }

    /**
     * Constructs a <code>ButtonResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ButtonResponse} obj Optional instance to populate.
     * @return {module:model/ButtonResponse} The populated <code>ButtonResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ButtonResponse();

            if (data.hasOwnProperty('button')) {
                obj['button'] = ApiClient.convertToType(data['button'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('jobid')) {
                obj['jobid'] = ApiClient.convertToType(data['jobid'], 'String');
            }
            if (data.hasOwnProperty('maxJobs')) {
                obj['maxJobs'] = ApiClient.convertToType(data['maxJobs'], 'Number');
            }
            if (data.hasOwnProperty('parentJobId')) {
                obj['parentJobId'] = ApiClient.convertToType(data['parentJobId'], 'String');
            }
            if (data.hasOwnProperty('server')) {
                obj['server'] = ApiClient.convertToType(data['server'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
            if (data.hasOwnProperty('verb')) {
                obj['verb'] = ApiClient.convertToType(data['verb'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ButtonResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ButtonResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ButtonResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['button'] && !(typeof data['button'] === 'string' || data['button'] instanceof String)) {
            throw new Error("Expected the field `button` to be a primitive type in the JSON string but got " + data['button']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['jobid'] && !(typeof data['jobid'] === 'string' || data['jobid'] instanceof String)) {
            throw new Error("Expected the field `jobid` to be a primitive type in the JSON string but got " + data['jobid']);
        }
        // ensure the json data is a string
        if (data['parentJobId'] && !(typeof data['parentJobId'] === 'string' || data['parentJobId'] instanceof String)) {
            throw new Error("Expected the field `parentJobId` to be a primitive type in the JSON string but got " + data['parentJobId']);
        }
        // ensure the json data is a string
        if (data['server'] && !(typeof data['server'] === 'string' || data['server'] instanceof String)) {
            throw new Error("Expected the field `server` to be a primitive type in the JSON string but got " + data['server']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }
        // ensure the json data is a string
        if (data['verb'] && !(typeof data['verb'] === 'string' || data['verb'] instanceof String)) {
            throw new Error("Expected the field `verb` to be a primitive type in the JSON string but got " + data['verb']);
        }

        return true;
    }


}

ButtonResponse.RequiredProperties = ["button", "channel", "code", "created", "jobid", "maxJobs", "parentJobId", "server", "status", "updated", "verb"];

/**
 * @member {module:model/ButtonResponse.ButtonEnum} button
 */
ButtonResponse.prototype['button'] = undefined;

/**
 * @member {String} channel
 */
ButtonResponse.prototype['channel'] = undefined;

/**
 * @member {module:model/ButtonResponse.CodeEnum} code
 */
ButtonResponse.prototype['code'] = undefined;

/**
 * @member {String} created
 */
ButtonResponse.prototype['created'] = undefined;

/**
 * Use returned jobid value to retrieve job status and results
 * @member {String} jobid
 */
ButtonResponse.prototype['jobid'] = undefined;

/**
 * @member {Number} maxJobs
 */
ButtonResponse.prototype['maxJobs'] = undefined;

/**
 * @member {String} parentJobId
 */
ButtonResponse.prototype['parentJobId'] = undefined;

/**
 * @member {String} server
 */
ButtonResponse.prototype['server'] = undefined;

/**
 * @member {module:model/ButtonResponse.StatusEnum} status
 */
ButtonResponse.prototype['status'] = undefined;

/**
 * @member {String} updated
 */
ButtonResponse.prototype['updated'] = undefined;

/**
 * @member {module:model/ButtonResponse.VerbEnum} verb
 */
ButtonResponse.prototype['verb'] = undefined;





/**
 * Allowed values for the <code>button</code> property.
 * @enum {String}
 * @readonly
 */
ButtonResponse['ButtonEnum'] = {

    /**
     * value: "U1"
     * @const
     */
    "U1": "U1",

    /**
     * value: "U2"
     * @const
     */
    "U2": "U2",

    /**
     * value: "U3"
     * @const
     */
    "U3": "U3",

    /**
     * value: "U4"
     * @const
     */
    "U4": "U4",

    /**
     * value: "V1"
     * @const
     */
    "V1": "V1",

    /**
     * value: "V2"
     * @const
     */
    "V2": "V2",

    /**
     * value: "V3"
     * @const
     */
    "V3": "V3",

    /**
     * value: "V4"
     * @const
     */
    "V4": "V4",

    /**
     * value: "‚¨ÖÔ∏è"
     * @const
     */
    "‚¨ÖÔ∏è": "‚¨ÖÔ∏è",

    /**
     * value: "‚û°Ô∏è"
     * @const
     */
    "‚û°Ô∏è": "‚û°Ô∏è",

    /**
     * value: "‚¨ÜÔ∏è"
     * @const
     */
    "‚¨ÜÔ∏è": "‚¨ÜÔ∏è",

    /**
     * value: "‚¨áÔ∏è"
     * @const
     */
    "‚¨áÔ∏è": "‚¨áÔ∏è",

    /**
     * value: "üîÑ"
     * @const
     */
    "üîÑ": "üîÑ",

    /**
     * value: "Vary (Strong)"
     * @const
     */
    "Vary (Strong)": "Vary (Strong)",

    /**
     * value: "Vary (Subtle)"
     * @const
     */
    "Vary (Subtle)": "Vary (Subtle)",

    /**
     * value: "Zoom Out 1.5x"
     * @const
     */
    "Zoom Out 1.5x": "Zoom Out 1.5x",

    /**
     * value: "Zoom Out 2x"
     * @const
     */
    "Zoom Out 2x": "Zoom Out 2x",

    /**
     * value: "Make Square"
     * @const
     */
    "Make Square": "Make Square",

    /**
     * value: "Make Variations"
     * @const
     */
    "Make Variations": "Make Variations",

    /**
     * value: "Remaster"
     * @const
     */
    "Remaster": "Remaster"
};


/**
 * Allowed values for the <code>code</code> property.
 * @enum {Number}
 * @readonly
 */
ButtonResponse['CodeEnum'] = {

    /**
     * value: 200
     * @const
     */
    "200": 200
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ButtonResponse['StatusEnum'] = {

    /**
     * value: "started"
     * @const
     */
    "started": "started",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed"
};


/**
 * Allowed values for the <code>verb</code> property.
 * @enum {String}
 * @readonly
 */
ButtonResponse['VerbEnum'] = {

    /**
     * value: "button"
     * @const
     */
    "button": "button"
};



export default ButtonResponse;

