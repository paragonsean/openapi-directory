/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JobsDescribePostRequest model module.
 * @module model/JobsDescribePostRequest
 * @version 1.0
 */
class JobsDescribePostRequest {
    /**
     * Constructs a new <code>JobsDescribePostRequest</code>.
     * @alias module:model/JobsDescribePostRequest
     * @param channel {String} Discord channel id
     * @param describeUrl {String} Must contain valid URL image link
     * @param discord {String} Discord token
     * @param server {String} Discord server id
     */
    constructor(channel, describeUrl, discord, server) { 
        
        JobsDescribePostRequest.initialize(this, channel, describeUrl, discord, server);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channel, describeUrl, discord, server) { 
        obj['channel'] = channel;
        obj['describeUrl'] = describeUrl;
        obj['discord'] = discord;
        obj['server'] = server;
    }

    /**
     * Constructs a <code>JobsDescribePostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobsDescribePostRequest} obj Optional instance to populate.
     * @return {module:model/JobsDescribePostRequest} The populated <code>JobsDescribePostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobsDescribePostRequest();

            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('describeUrl')) {
                obj['describeUrl'] = ApiClient.convertToType(data['describeUrl'], 'String');
            }
            if (data.hasOwnProperty('discord')) {
                obj['discord'] = ApiClient.convertToType(data['discord'], 'String');
            }
            if (data.hasOwnProperty('maxJobs')) {
                obj['maxJobs'] = ApiClient.convertToType(data['maxJobs'], 'Number');
            }
            if (data.hasOwnProperty('replyRef')) {
                obj['replyRef'] = ApiClient.convertToType(data['replyRef'], 'String');
            }
            if (data.hasOwnProperty('replyUrl')) {
                obj['replyUrl'] = ApiClient.convertToType(data['replyUrl'], 'String');
            }
            if (data.hasOwnProperty('server')) {
                obj['server'] = ApiClient.convertToType(data['server'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobsDescribePostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobsDescribePostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobsDescribePostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['describeUrl'] && !(typeof data['describeUrl'] === 'string' || data['describeUrl'] instanceof String)) {
            throw new Error("Expected the field `describeUrl` to be a primitive type in the JSON string but got " + data['describeUrl']);
        }
        // ensure the json data is a string
        if (data['discord'] && !(typeof data['discord'] === 'string' || data['discord'] instanceof String)) {
            throw new Error("Expected the field `discord` to be a primitive type in the JSON string but got " + data['discord']);
        }
        // ensure the json data is a string
        if (data['replyRef'] && !(typeof data['replyRef'] === 'string' || data['replyRef'] instanceof String)) {
            throw new Error("Expected the field `replyRef` to be a primitive type in the JSON string but got " + data['replyRef']);
        }
        // ensure the json data is a string
        if (data['replyUrl'] && !(typeof data['replyUrl'] === 'string' || data['replyUrl'] instanceof String)) {
            throw new Error("Expected the field `replyUrl` to be a primitive type in the JSON string but got " + data['replyUrl']);
        }
        // ensure the json data is a string
        if (data['server'] && !(typeof data['server'] === 'string' || data['server'] instanceof String)) {
            throw new Error("Expected the field `server` to be a primitive type in the JSON string but got " + data['server']);
        }

        return true;
    }


}

JobsDescribePostRequest.RequiredProperties = ["channel", "describeUrl", "discord", "server"];

/**
 * Discord channel id
 * @member {String} channel
 */
JobsDescribePostRequest.prototype['channel'] = undefined;

/**
 * Must contain valid URL image link
 * @member {String} describeUrl
 */
JobsDescribePostRequest.prototype['describeUrl'] = undefined;

/**
 * Discord token
 * @member {String} discord
 */
JobsDescribePostRequest.prototype['discord'] = undefined;

/**
 * Optional Maximum Concurrent Jobs for current Midjourney subscription
 * @member {Number} maxJobs
 */
JobsDescribePostRequest.prototype['maxJobs'] = undefined;

/**
 * Optional reference id which will be stored and returned along with this job response / result
 * @member {String} replyRef
 */
JobsDescribePostRequest.prototype['replyRef'] = undefined;

/**
 * Optional callback URL, API will call the provided replyUrl once generation completed
 * @member {String} replyUrl
 */
JobsDescribePostRequest.prototype['replyUrl'] = undefined;

/**
 * Discord server id
 * @member {String} server
 */
JobsDescribePostRequest.prototype['server'] = undefined;






export default JobsDescribePostRequest;

