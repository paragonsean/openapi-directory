/**
 * Midjourney REST API by useapi.net
 * Simple, reliable and affordable way to use Midjourney via standard REST API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountResponse model module.
 * @module model/AccountResponse
 * @version 1.0
 */
class AccountResponse {
    /**
     * Constructs a new <code>AccountResponse</code>.
     * @alias module:model/AccountResponse
     * @param created {String} 
     * @param email {String} 
     * @param name {String} 
     * @param sub {String} 
     * @param verified {String} 
     */
    constructor(created, email, name, sub, verified) { 
        
        AccountResponse.initialize(this, created, email, name, sub, verified);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, created, email, name, sub, verified) { 
        obj['created'] = created;
        obj['email'] = email;
        obj['name'] = name;
        obj['sub'] = sub;
        obj['verified'] = verified;
    }

    /**
     * Constructs a <code>AccountResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountResponse} obj Optional instance to populate.
     * @return {module:model/AccountResponse} The populated <code>AccountResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountResponse();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sub')) {
                obj['sub'] = ApiClient.convertToType(data['sub'], 'String');
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sub'] && !(typeof data['sub'] === 'string' || data['sub'] instanceof String)) {
            throw new Error("Expected the field `sub` to be a primitive type in the JSON string but got " + data['sub']);
        }
        // ensure the json data is a string
        if (data['verified'] && !(typeof data['verified'] === 'string' || data['verified'] instanceof String)) {
            throw new Error("Expected the field `verified` to be a primitive type in the JSON string but got " + data['verified']);
        }

        return true;
    }


}

AccountResponse.RequiredProperties = ["created", "email", "name", "sub", "verified"];

/**
 * @member {String} created
 */
AccountResponse.prototype['created'] = undefined;

/**
 * @member {String} email
 */
AccountResponse.prototype['email'] = undefined;

/**
 * @member {String} name
 */
AccountResponse.prototype['name'] = undefined;

/**
 * @member {String} sub
 */
AccountResponse.prototype['sub'] = undefined;

/**
 * @member {String} verified
 */
AccountResponse.prototype['verified'] = undefined;






export default AccountResponse;

