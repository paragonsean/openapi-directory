# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollectionDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, source: str=None):
        """CollectionDefinition - a model defined in OpenAPI

        :param name: The name of this CollectionDefinition.
        :param source: The source of this CollectionDefinition.
        """
        self.openapi_types = {
            'name': str,
            'source': str
        }

        self.attribute_map = {
            'name': 'name',
            'source': 'source'
        }

        self._name = name
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectionDefinition of this CollectionDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CollectionDefinition.

        The unique name of a collection.

        :return: The name of this CollectionDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CollectionDefinition.

        The unique name of a collection.

        :param name: The name of this CollectionDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def source(self):
        """Gets the source of this CollectionDefinition.

        The unique name of an index.

        :return: The source of this CollectionDefinition.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CollectionDefinition.

        The unique name of an index.

        :param source: The source of this CollectionDefinition.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")
        if source is not None and len(source) > 45:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `45`")
        if source is not None and len(source) < 1:
            raise ValueError("Invalid value for `source`, length must be greater than or equal to `1`")

        self._source = source
