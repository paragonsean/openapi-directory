# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sparse_vector_data import SparseVectorData
from openapi_server import util


class UpsertVector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, metadata: Dict[str, object]=None, sparse_values: SparseVectorData=None, values: List[float]=None):
        """UpsertVector - a model defined in OpenAPI

        :param id: The id of this UpsertVector.
        :param metadata: The metadata of this UpsertVector.
        :param sparse_values: The sparse_values of this UpsertVector.
        :param values: The values of this UpsertVector.
        """
        self.openapi_types = {
            'id': str,
            'metadata': Dict[str, object],
            'sparse_values': SparseVectorData,
            'values': List[float]
        }

        self.attribute_map = {
            'id': 'id',
            'metadata': 'metadata',
            'sparse_values': 'sparseValues',
            'values': 'values'
        }

        self._id = id
        self._metadata = metadata
        self._sparse_values = sparse_values
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpsertVector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpsertVector of this UpsertVector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UpsertVector.

        The unique ID of a vector

        :return: The id of this UpsertVector.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpsertVector.

        The unique ID of a vector

        :param id: The id of this UpsertVector.
        :type id: str
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this UpsertVector.


        :return: The metadata of this UpsertVector.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpsertVector.


        :param metadata: The metadata of this UpsertVector.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def sparse_values(self):
        """Gets the sparse_values of this UpsertVector.


        :return: The sparse_values of this UpsertVector.
        :rtype: SparseVectorData
        """
        return self._sparse_values

    @sparse_values.setter
    def sparse_values(self, sparse_values):
        """Sets the sparse_values of this UpsertVector.


        :param sparse_values: The sparse_values of this UpsertVector.
        :type sparse_values: SparseVectorData
        """

        self._sparse_values = sparse_values

    @property
    def values(self):
        """Gets the values of this UpsertVector.

        Vector dense data. This should be the same length as the dimension of the index being queried.

        :return: The values of this UpsertVector.
        :rtype: List[float]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this UpsertVector.

        Vector dense data. This should be the same length as the dimension of the index being queried.

        :param values: The values of this UpsertVector.
        :type values: List[float]
        """

        self._values = values
