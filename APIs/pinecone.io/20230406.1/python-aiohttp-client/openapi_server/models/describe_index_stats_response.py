# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.index_namespace_stats import IndexNamespaceStats
from openapi_server import util


class DescribeIndexStatsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension: int=None, index_fullness: float=None, namespaces: Dict[str, IndexNamespaceStats]=None, total_vector_count: int=None):
        """DescribeIndexStatsResponse - a model defined in OpenAPI

        :param dimension: The dimension of this DescribeIndexStatsResponse.
        :param index_fullness: The index_fullness of this DescribeIndexStatsResponse.
        :param namespaces: The namespaces of this DescribeIndexStatsResponse.
        :param total_vector_count: The total_vector_count of this DescribeIndexStatsResponse.
        """
        self.openapi_types = {
            'dimension': int,
            'index_fullness': float,
            'namespaces': Dict[str, IndexNamespaceStats],
            'total_vector_count': int
        }

        self.attribute_map = {
            'dimension': 'dimension',
            'index_fullness': 'indexFullness',
            'namespaces': 'namespaces',
            'total_vector_count': 'totalVectorCount'
        }

        self._dimension = dimension
        self._index_fullness = index_fullness
        self._namespaces = namespaces
        self._total_vector_count = total_vector_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeIndexStatsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeIndexStatsResponse of this DescribeIndexStatsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension(self):
        """Gets the dimension of this DescribeIndexStatsResponse.

        The number of dimensions in the vector representation

        :return: The dimension of this DescribeIndexStatsResponse.
        :rtype: int
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this DescribeIndexStatsResponse.

        The number of dimensions in the vector representation

        :param dimension: The dimension of this DescribeIndexStatsResponse.
        :type dimension: int
        """
        if dimension is not None and dimension > 20000:
            raise ValueError("Invalid value for `dimension`, must be a value less than or equal to `20000`")
        if dimension is not None and dimension < 1:
            raise ValueError("Invalid value for `dimension`, must be a value greater than or equal to `1`")

        self._dimension = dimension

    @property
    def index_fullness(self):
        """Gets the index_fullness of this DescribeIndexStatsResponse.

        The fullness of the index, regardless of whether a metadata filter expression was passed. The granularity of this metric is 10%.

        :return: The index_fullness of this DescribeIndexStatsResponse.
        :rtype: float
        """
        return self._index_fullness

    @index_fullness.setter
    def index_fullness(self, index_fullness):
        """Sets the index_fullness of this DescribeIndexStatsResponse.

        The fullness of the index, regardless of whether a metadata filter expression was passed. The granularity of this metric is 10%.

        :param index_fullness: The index_fullness of this DescribeIndexStatsResponse.
        :type index_fullness: float
        """

        self._index_fullness = index_fullness

    @property
    def namespaces(self):
        """Gets the namespaces of this DescribeIndexStatsResponse.


        :return: The namespaces of this DescribeIndexStatsResponse.
        :rtype: Dict[str, IndexNamespaceStats]
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces):
        """Sets the namespaces of this DescribeIndexStatsResponse.


        :param namespaces: The namespaces of this DescribeIndexStatsResponse.
        :type namespaces: Dict[str, IndexNamespaceStats]
        """

        self._namespaces = namespaces

    @property
    def total_vector_count(self):
        """Gets the total_vector_count of this DescribeIndexStatsResponse.


        :return: The total_vector_count of this DescribeIndexStatsResponse.
        :rtype: int
        """
        return self._total_vector_count

    @total_vector_count.setter
    def total_vector_count(self, total_vector_count):
        """Sets the total_vector_count of this DescribeIndexStatsResponse.


        :param total_vector_count: The total_vector_count of this DescribeIndexStatsResponse.
        :type total_vector_count: int
        """

        self._total_vector_count = total_vector_count
