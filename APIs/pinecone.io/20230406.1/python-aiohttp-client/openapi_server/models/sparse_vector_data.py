# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SparseVectorData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, indices: List[int]=None, values: List[float]=None):
        """SparseVectorData - a model defined in OpenAPI

        :param indices: The indices of this SparseVectorData.
        :param values: The values of this SparseVectorData.
        """
        self.openapi_types = {
            'indices': List[int],
            'values': List[float]
        }

        self.attribute_map = {
            'indices': 'indices',
            'values': 'values'
        }

        self._indices = indices
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SparseVectorData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SparseVectorData of this SparseVectorData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def indices(self):
        """Gets the indices of this SparseVectorData.

        The indices of the sparse data.

        :return: The indices of this SparseVectorData.
        :rtype: List[int]
        """
        return self._indices

    @indices.setter
    def indices(self, indices):
        """Sets the indices of this SparseVectorData.

        The indices of the sparse data.

        :param indices: The indices of this SparseVectorData.
        :type indices: List[int]
        """
        if indices is None:
            raise ValueError("Invalid value for `indices`, must not be `None`")

        self._indices = indices

    @property
    def values(self):
        """Gets the values of this SparseVectorData.

        The corresponding values of the sparse data, which must be the same length as the indices.

        :return: The values of this SparseVectorData.
        :rtype: List[float]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this SparseVectorData.

        The corresponding values of the sparse data, which must be the same length as the indices.

        :param values: The values of this SparseVectorData.
        :type values: List[float]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
