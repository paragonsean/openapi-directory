# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Collection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, size: int=None, status: str=None):
        """Collection - a model defined in OpenAPI

        :param name: The name of this Collection.
        :param size: The size of this Collection.
        :param status: The status of this Collection.
        """
        self.openapi_types = {
            'name': str,
            'size': int,
            'status': str
        }

        self.attribute_map = {
            'name': 'name',
            'size': 'size',
            'status': 'status'
        }

        self._name = name
        self._size = size
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Collection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Collection of this Collection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Collection.

        The unique name of a collection.

        :return: The name of this Collection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Collection.

        The unique name of a collection.

        :param name: The name of this Collection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def size(self):
        """Gets the size of this Collection.


        :return: The size of this Collection.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Collection.


        :param size: The size of this Collection.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def status(self):
        """Gets the status of this Collection.

        The current status of a collection.

        :return: The status of this Collection.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Collection.

        The current status of a collection.

        :param status: The status of this Collection.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
