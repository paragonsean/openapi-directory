# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete_all: bool=False, filter: Dict[str, object]=None, ids: List[str]=None, namespace: str=None):
        """DeleteRequest - a model defined in OpenAPI

        :param delete_all: The delete_all of this DeleteRequest.
        :param filter: The filter of this DeleteRequest.
        :param ids: The ids of this DeleteRequest.
        :param namespace: The namespace of this DeleteRequest.
        """
        self.openapi_types = {
            'delete_all': bool,
            'filter': Dict[str, object],
            'ids': List[str],
            'namespace': str
        }

        self.attribute_map = {
            'delete_all': 'deleteAll',
            'filter': 'filter',
            'ids': 'ids',
            'namespace': 'namespace'
        }

        self._delete_all = delete_all
        self._filter = filter
        self._ids = ids
        self._namespace = namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteRequest of this DeleteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete_all(self):
        """Gets the delete_all of this DeleteRequest.


        :return: The delete_all of this DeleteRequest.
        :rtype: bool
        """
        return self._delete_all

    @delete_all.setter
    def delete_all(self, delete_all):
        """Sets the delete_all of this DeleteRequest.


        :param delete_all: The delete_all of this DeleteRequest.
        :type delete_all: bool
        """

        self._delete_all = delete_all

    @property
    def filter(self):
        """Gets the filter of this DeleteRequest.

        If this parameter is present, the operation only affects vectors that satisfy the filter. See https://www.pinecone.io/docs/metadata-filtering/.

        :return: The filter of this DeleteRequest.
        :rtype: Dict[str, object]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this DeleteRequest.

        If this parameter is present, the operation only affects vectors that satisfy the filter. See https://www.pinecone.io/docs/metadata-filtering/.

        :param filter: The filter of this DeleteRequest.
        :type filter: Dict[str, object]
        """

        self._filter = filter

    @property
    def ids(self):
        """Gets the ids of this DeleteRequest.


        :return: The ids of this DeleteRequest.
        :rtype: List[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this DeleteRequest.


        :param ids: The ids of this DeleteRequest.
        :type ids: List[str]
        """

        self._ids = ids

    @property
    def namespace(self):
        """Gets the namespace of this DeleteRequest.

        An index namespace name

        :return: The namespace of this DeleteRequest.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DeleteRequest.

        An index namespace name

        :param namespace: The namespace of this DeleteRequest.
        :type namespace: str
        """

        self._namespace = namespace
