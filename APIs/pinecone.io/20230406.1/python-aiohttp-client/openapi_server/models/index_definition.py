# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.index_metadata_config import IndexMetadataConfig
from openapi_server.models.index_metric import IndexMetric
from openapi_server.models.pod_type import PodType
from openapi_server import util


class IndexDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension: int=None, metadata_config: IndexMetadataConfig=None, metric: IndexMetric=None, name: str=None, pod_type: PodType=None, pods: int=1, replicas: int=1, source_collection: str=None):
        """IndexDefinition - a model defined in OpenAPI

        :param dimension: The dimension of this IndexDefinition.
        :param metadata_config: The metadata_config of this IndexDefinition.
        :param metric: The metric of this IndexDefinition.
        :param name: The name of this IndexDefinition.
        :param pod_type: The pod_type of this IndexDefinition.
        :param pods: The pods of this IndexDefinition.
        :param replicas: The replicas of this IndexDefinition.
        :param source_collection: The source_collection of this IndexDefinition.
        """
        self.openapi_types = {
            'dimension': int,
            'metadata_config': IndexMetadataConfig,
            'metric': IndexMetric,
            'name': str,
            'pod_type': PodType,
            'pods': int,
            'replicas': int,
            'source_collection': str
        }

        self.attribute_map = {
            'dimension': 'dimension',
            'metadata_config': 'metadata_config',
            'metric': 'metric',
            'name': 'name',
            'pod_type': 'pod_type',
            'pods': 'pods',
            'replicas': 'replicas',
            'source_collection': 'source_collection'
        }

        self._dimension = dimension
        self._metadata_config = metadata_config
        self._metric = metric
        self._name = name
        self._pod_type = pod_type
        self._pods = pods
        self._replicas = replicas
        self._source_collection = source_collection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndexDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IndexDefinition of this IndexDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension(self):
        """Gets the dimension of this IndexDefinition.

        The number of dimensions in the vector representation

        :return: The dimension of this IndexDefinition.
        :rtype: int
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this IndexDefinition.

        The number of dimensions in the vector representation

        :param dimension: The dimension of this IndexDefinition.
        :type dimension: int
        """
        if dimension is None:
            raise ValueError("Invalid value for `dimension`, must not be `None`")
        if dimension is not None and dimension > 20000:
            raise ValueError("Invalid value for `dimension`, must be a value less than or equal to `20000`")
        if dimension is not None and dimension < 1:
            raise ValueError("Invalid value for `dimension`, must be a value greater than or equal to `1`")

        self._dimension = dimension

    @property
    def metadata_config(self):
        """Gets the metadata_config of this IndexDefinition.


        :return: The metadata_config of this IndexDefinition.
        :rtype: IndexMetadataConfig
        """
        return self._metadata_config

    @metadata_config.setter
    def metadata_config(self, metadata_config):
        """Sets the metadata_config of this IndexDefinition.


        :param metadata_config: The metadata_config of this IndexDefinition.
        :type metadata_config: IndexMetadataConfig
        """

        self._metadata_config = metadata_config

    @property
    def metric(self):
        """Gets the metric of this IndexDefinition.


        :return: The metric of this IndexDefinition.
        :rtype: IndexMetric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this IndexDefinition.


        :param metric: The metric of this IndexDefinition.
        :type metric: IndexMetric
        """

        self._metric = metric

    @property
    def name(self):
        """Gets the name of this IndexDefinition.

        The unique name of an index.

        :return: The name of this IndexDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndexDefinition.

        The unique name of an index.

        :param name: The name of this IndexDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 45:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `45`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def pod_type(self):
        """Gets the pod_type of this IndexDefinition.


        :return: The pod_type of this IndexDefinition.
        :rtype: PodType
        """
        return self._pod_type

    @pod_type.setter
    def pod_type(self, pod_type):
        """Sets the pod_type of this IndexDefinition.


        :param pod_type: The pod_type of this IndexDefinition.
        :type pod_type: PodType
        """

        self._pod_type = pod_type

    @property
    def pods(self):
        """Gets the pods of this IndexDefinition.

        The number of pods for the index to use,including replicas.

        :return: The pods of this IndexDefinition.
        :rtype: int
        """
        return self._pods

    @pods.setter
    def pods(self, pods):
        """Sets the pods of this IndexDefinition.

        The number of pods for the index to use,including replicas.

        :param pods: The pods of this IndexDefinition.
        :type pods: int
        """
        if pods is not None and pods < 1:
            raise ValueError("Invalid value for `pods`, must be a value greater than or equal to `1`")

        self._pods = pods

    @property
    def replicas(self):
        """Gets the replicas of this IndexDefinition.

        The number of replicas. Replicas duplicate your index. They provide higher availability and throughput.

        :return: The replicas of this IndexDefinition.
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this IndexDefinition.

        The number of replicas. Replicas duplicate your index. They provide higher availability and throughput.

        :param replicas: The replicas of this IndexDefinition.
        :type replicas: int
        """
        if replicas is not None and replicas < 1:
            raise ValueError("Invalid value for `replicas`, must be a value greater than or equal to `1`")

        self._replicas = replicas

    @property
    def source_collection(self):
        """Gets the source_collection of this IndexDefinition.

        The unique name of a collection.

        :return: The source_collection of this IndexDefinition.
        :rtype: str
        """
        return self._source_collection

    @source_collection.setter
    def source_collection(self, source_collection):
        """Sets the source_collection of this IndexDefinition.

        The unique name of a collection.

        :param source_collection: The source_collection of this IndexDefinition.
        :type source_collection: str
        """

        self._source_collection = source_collection
