# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sparse_vector_data import SparseVectorData
from openapi_server import util


class QueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: Dict[str, object]=None, id: str=None, include_metadata: bool=False, include_values: bool=False, namespace: str=None, sparse_vector: SparseVectorData=None, top_k: int=100, vector: List[float]=None):
        """QueryRequest - a model defined in OpenAPI

        :param filter: The filter of this QueryRequest.
        :param id: The id of this QueryRequest.
        :param include_metadata: The include_metadata of this QueryRequest.
        :param include_values: The include_values of this QueryRequest.
        :param namespace: The namespace of this QueryRequest.
        :param sparse_vector: The sparse_vector of this QueryRequest.
        :param top_k: The top_k of this QueryRequest.
        :param vector: The vector of this QueryRequest.
        """
        self.openapi_types = {
            'filter': Dict[str, object],
            'id': str,
            'include_metadata': bool,
            'include_values': bool,
            'namespace': str,
            'sparse_vector': SparseVectorData,
            'top_k': int,
            'vector': List[float]
        }

        self.attribute_map = {
            'filter': 'filter',
            'id': 'id',
            'include_metadata': 'includeMetadata',
            'include_values': 'includeValues',
            'namespace': 'namespace',
            'sparse_vector': 'sparseVector',
            'top_k': 'topK',
            'vector': 'vector'
        }

        self._filter = filter
        self._id = id
        self._include_metadata = include_metadata
        self._include_values = include_values
        self._namespace = namespace
        self._sparse_vector = sparse_vector
        self._top_k = top_k
        self._vector = vector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryRequest of this QueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this QueryRequest.

        If this parameter is present, the operation only affects vectors that satisfy the filter. See https://www.pinecone.io/docs/metadata-filtering/.

        :return: The filter of this QueryRequest.
        :rtype: Dict[str, object]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this QueryRequest.

        If this parameter is present, the operation only affects vectors that satisfy the filter. See https://www.pinecone.io/docs/metadata-filtering/.

        :param filter: The filter of this QueryRequest.
        :type filter: Dict[str, object]
        """

        self._filter = filter

    @property
    def id(self):
        """Gets the id of this QueryRequest.

        The unique ID of a vector

        :return: The id of this QueryRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueryRequest.

        The unique ID of a vector

        :param id: The id of this QueryRequest.
        :type id: str
        """

        self._id = id

    @property
    def include_metadata(self):
        """Gets the include_metadata of this QueryRequest.


        :return: The include_metadata of this QueryRequest.
        :rtype: bool
        """
        return self._include_metadata

    @include_metadata.setter
    def include_metadata(self, include_metadata):
        """Sets the include_metadata of this QueryRequest.


        :param include_metadata: The include_metadata of this QueryRequest.
        :type include_metadata: bool
        """

        self._include_metadata = include_metadata

    @property
    def include_values(self):
        """Gets the include_values of this QueryRequest.


        :return: The include_values of this QueryRequest.
        :rtype: bool
        """
        return self._include_values

    @include_values.setter
    def include_values(self, include_values):
        """Sets the include_values of this QueryRequest.


        :param include_values: The include_values of this QueryRequest.
        :type include_values: bool
        """

        self._include_values = include_values

    @property
    def namespace(self):
        """Gets the namespace of this QueryRequest.

        An index namespace name

        :return: The namespace of this QueryRequest.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this QueryRequest.

        An index namespace name

        :param namespace: The namespace of this QueryRequest.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def sparse_vector(self):
        """Gets the sparse_vector of this QueryRequest.


        :return: The sparse_vector of this QueryRequest.
        :rtype: SparseVectorData
        """
        return self._sparse_vector

    @sparse_vector.setter
    def sparse_vector(self, sparse_vector):
        """Sets the sparse_vector of this QueryRequest.


        :param sparse_vector: The sparse_vector of this QueryRequest.
        :type sparse_vector: SparseVectorData
        """

        self._sparse_vector = sparse_vector

    @property
    def top_k(self):
        """Gets the top_k of this QueryRequest.

        The number of results to return for each query.

        :return: The top_k of this QueryRequest.
        :rtype: int
        """
        return self._top_k

    @top_k.setter
    def top_k(self, top_k):
        """Sets the top_k of this QueryRequest.

        The number of results to return for each query.

        :param top_k: The top_k of this QueryRequest.
        :type top_k: int
        """
        if top_k is None:
            raise ValueError("Invalid value for `top_k`, must not be `None`")
        if top_k is not None and top_k > 10000:
            raise ValueError("Invalid value for `top_k`, must be a value less than or equal to `10000`")
        if top_k is not None and top_k < 0:
            raise ValueError("Invalid value for `top_k`, must be a value greater than or equal to `0`")

        self._top_k = top_k

    @property
    def vector(self):
        """Gets the vector of this QueryRequest.

        Vector dense data. This should be the same length as the dimension of the index being queried.

        :return: The vector of this QueryRequest.
        :rtype: List[float]
        """
        return self._vector

    @vector.setter
    def vector(self, vector):
        """Sets the vector of this QueryRequest.

        Vector dense data. This should be the same length as the dimension of the index being queried.

        :param vector: The vector of this QueryRequest.
        :type vector: List[float]
        """

        self._vector = vector
