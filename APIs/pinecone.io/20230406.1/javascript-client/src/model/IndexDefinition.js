/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IndexMetadataConfig from './IndexMetadataConfig';
import IndexMetric from './IndexMetric';
import PodType from './PodType';

/**
 * The IndexDefinition model module.
 * @module model/IndexDefinition
 * @version 20230406.1
 */
class IndexDefinition {
    /**
     * Constructs a new <code>IndexDefinition</code>.
     * @alias module:model/IndexDefinition
     * @param dimension {Number} The number of dimensions in the vector representation
     * @param name {String} The unique name of an index.
     */
    constructor(dimension, name) { 
        
        IndexDefinition.initialize(this, dimension, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dimension, name) { 
        obj['dimension'] = dimension;
        obj['name'] = name;
        obj['pods'] = 1;
        obj['replicas'] = 1;
    }

    /**
     * Constructs a <code>IndexDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IndexDefinition} obj Optional instance to populate.
     * @return {module:model/IndexDefinition} The populated <code>IndexDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IndexDefinition();

            if (data.hasOwnProperty('dimension')) {
                obj['dimension'] = ApiClient.convertToType(data['dimension'], 'Number');
            }
            if (data.hasOwnProperty('metadata_config')) {
                obj['metadata_config'] = IndexMetadataConfig.constructFromObject(data['metadata_config']);
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = IndexMetric.constructFromObject(data['metric']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pod_type')) {
                obj['pod_type'] = PodType.constructFromObject(data['pod_type']);
            }
            if (data.hasOwnProperty('pods')) {
                obj['pods'] = ApiClient.convertToType(data['pods'], 'Number');
            }
            if (data.hasOwnProperty('replicas')) {
                obj['replicas'] = ApiClient.convertToType(data['replicas'], 'Number');
            }
            if (data.hasOwnProperty('source_collection')) {
                obj['source_collection'] = ApiClient.convertToType(data['source_collection'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IndexDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IndexDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IndexDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `metadata_config`
        if (data['metadata_config']) { // data not null
          IndexMetadataConfig.validateJSON(data['metadata_config']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['source_collection'] && !(typeof data['source_collection'] === 'string' || data['source_collection'] instanceof String)) {
            throw new Error("Expected the field `source_collection` to be a primitive type in the JSON string but got " + data['source_collection']);
        }

        return true;
    }


}

IndexDefinition.RequiredProperties = ["dimension", "name"];

/**
 * The number of dimensions in the vector representation
 * @member {Number} dimension
 */
IndexDefinition.prototype['dimension'] = undefined;

/**
 * @member {module:model/IndexMetadataConfig} metadata_config
 */
IndexDefinition.prototype['metadata_config'] = undefined;

/**
 * @member {module:model/IndexMetric} metric
 */
IndexDefinition.prototype['metric'] = undefined;

/**
 * The unique name of an index.
 * @member {String} name
 */
IndexDefinition.prototype['name'] = undefined;

/**
 * @member {module:model/PodType} pod_type
 */
IndexDefinition.prototype['pod_type'] = undefined;

/**
 * The number of pods for the index to use,including replicas.
 * @member {Number} pods
 * @default 1
 */
IndexDefinition.prototype['pods'] = 1;

/**
 * The number of replicas. Replicas duplicate your index. They provide higher availability and throughput.
 * @member {Number} replicas
 * @default 1
 */
IndexDefinition.prototype['replicas'] = 1;

/**
 * The unique name of a collection.
 * @member {String} source_collection
 */
IndexDefinition.prototype['source_collection'] = undefined;






export default IndexDefinition;

