/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SparseVectorData from './SparseVectorData';

/**
 * The QueryRequest model module.
 * @module model/QueryRequest
 * @version 20230406.1
 */
class QueryRequest {
    /**
     * Constructs a new <code>QueryRequest</code>.
     * @alias module:model/QueryRequest
     * @param topK {Number} The number of results to return for each query.
     */
    constructor(topK) { 
        
        QueryRequest.initialize(this, topK);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, topK) { 
        obj['includeMetadata'] = false;
        obj['includeValues'] = false;
        obj['topK'] = topK || 100;
    }

    /**
     * Constructs a <code>QueryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryRequest} obj Optional instance to populate.
     * @return {module:model/QueryRequest} The populated <code>QueryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryRequest();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], {'String': Object});
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('includeMetadata')) {
                obj['includeMetadata'] = ApiClient.convertToType(data['includeMetadata'], 'Boolean');
            }
            if (data.hasOwnProperty('includeValues')) {
                obj['includeValues'] = ApiClient.convertToType(data['includeValues'], 'Boolean');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('sparseVector')) {
                obj['sparseVector'] = SparseVectorData.constructFromObject(data['sparseVector']);
            }
            if (data.hasOwnProperty('topK')) {
                obj['topK'] = ApiClient.convertToType(data['topK'], 'Number');
            }
            if (data.hasOwnProperty('vector')) {
                obj['vector'] = ApiClient.convertToType(data['vector'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueryRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // validate the optional field `sparseVector`
        if (data['sparseVector']) { // data not null
          SparseVectorData.validateJSON(data['sparseVector']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vector'])) {
            throw new Error("Expected the field `vector` to be an array in the JSON data but got " + data['vector']);
        }

        return true;
    }


}

QueryRequest.RequiredProperties = ["topK"];

/**
 * If this parameter is present, the operation only affects vectors that satisfy the filter. See https://www.pinecone.io/docs/metadata-filtering/.
 * @member {Object.<String, Object>} filter
 */
QueryRequest.prototype['filter'] = undefined;

/**
 * The unique ID of a vector
 * @member {String} id
 */
QueryRequest.prototype['id'] = undefined;

/**
 * @member {Boolean} includeMetadata
 * @default false
 */
QueryRequest.prototype['includeMetadata'] = false;

/**
 * @member {Boolean} includeValues
 * @default false
 */
QueryRequest.prototype['includeValues'] = false;

/**
 * An index namespace name
 * @member {String} namespace
 */
QueryRequest.prototype['namespace'] = undefined;

/**
 * @member {module:model/SparseVectorData} sparseVector
 */
QueryRequest.prototype['sparseVector'] = undefined;

/**
 * The number of results to return for each query.
 * @member {Number} topK
 * @default 100
 */
QueryRequest.prototype['topK'] = 100;

/**
 * Vector dense data. This should be the same length as the dimension of the index being queried.
 * @member {Array.<Number>} vector
 */
QueryRequest.prototype['vector'] = undefined;






export default QueryRequest;

