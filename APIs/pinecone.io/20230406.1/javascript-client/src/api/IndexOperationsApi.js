/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Collection from '../model/Collection';
import CollectionDefinition from '../model/CollectionDefinition';
import Index from '../model/Index';
import IndexConfiguration from '../model/IndexConfiguration';
import IndexDefinition from '../model/IndexDefinition';

/**
* IndexOperations service.
* @module api/IndexOperationsApi
* @version 20230406.1
*/
export default class IndexOperationsApi {

    /**
    * Constructs a new IndexOperationsApi. 
    * @alias module:api/IndexOperationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the configureIndex operation.
     * @callback module:api/IndexOperationsApi~configureIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure index
     * This operation specifies the pod type and number of replicas for an index.
     * @param {String} indexName 
     * @param {module:model/IndexConfiguration} indexConfiguration 
     * @param {module:api/IndexOperationsApi~configureIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configureIndex(indexName, indexConfiguration, callback) {
      let postBody = indexConfiguration;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling configureIndex");
      }
      // verify the required parameter 'indexConfiguration' is set
      if (indexConfiguration === undefined || indexConfiguration === null) {
        throw new Error("Missing the required parameter 'indexConfiguration' when calling configureIndex");
      }

      let pathParams = {
        'indexName': indexName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/databases/{indexName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCollection operation.
     * @callback module:api/IndexOperationsApi~createCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create collection
     * This operation creates a Pinecone collection.
     * @param {module:model/CollectionDefinition} collectionDefinition 
     * @param {module:api/IndexOperationsApi~createCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createCollection(collectionDefinition, callback) {
      let postBody = collectionDefinition;
      // verify the required parameter 'collectionDefinition' is set
      if (collectionDefinition === undefined || collectionDefinition === null) {
        throw new Error("Missing the required parameter 'collectionDefinition' when calling createCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIndex operation.
     * @callback module:api/IndexOperationsApi~createIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create index
     * This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of replicas to use, and more.
     * @param {module:model/IndexDefinition} indexDefinition 
     * @param {module:api/IndexOperationsApi~createIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createIndex(indexDefinition, callback) {
      let postBody = indexDefinition;
      // verify the required parameter 'indexDefinition' is set
      if (indexDefinition === undefined || indexDefinition === null) {
        throw new Error("Missing the required parameter 'indexDefinition' when calling createIndex");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/databases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollection operation.
     * @callback module:api/IndexOperationsApi~deleteCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Collection
     * This operation deletes an existing collection.
     * @param {String} collectionName 
     * @param {module:api/IndexOperationsApi~deleteCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCollection(collectionName, callback) {
      let postBody = null;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling deleteCollection");
      }

      let pathParams = {
        'collectionName': collectionName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIndex operation.
     * @callback module:api/IndexOperationsApi~deleteIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Index
     * This operation deletes an existing index.
     * @param {String} indexName 
     * @param {module:api/IndexOperationsApi~deleteIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIndex(indexName, callback) {
      let postBody = null;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling deleteIndex");
      }

      let pathParams = {
        'indexName': indexName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/databases/{indexName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCollection operation.
     * @callback module:api/IndexOperationsApi~describeCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe collection
     * Get a description of a collection.
     * @param {String} collectionName 
     * @param {module:api/IndexOperationsApi~describeCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    describeCollection(collectionName, callback) {
      let postBody = null;
      // verify the required parameter 'collectionName' is set
      if (collectionName === undefined || collectionName === null) {
        throw new Error("Missing the required parameter 'collectionName' when calling describeCollection");
      }

      let pathParams = {
        'collectionName': collectionName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/collections/{collectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeIndex operation.
     * @callback module:api/IndexOperationsApi~describeIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Index} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe index
     * Get a description of an index.
     * @param {String} indexName 
     * @param {module:api/IndexOperationsApi~describeIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Index}
     */
    describeIndex(indexName, callback) {
      let postBody = null;
      // verify the required parameter 'indexName' is set
      if (indexName === undefined || indexName === null) {
        throw new Error("Missing the required parameter 'indexName' when calling describeIndex");
      }

      let pathParams = {
        'indexName': indexName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = Index;
      return this.apiClient.callApi(
        '/databases/{indexName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCollections operation.
     * @callback module:api/IndexOperationsApi~listCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List collections
     * This operation returns a list of your Pinecone collections.
     * @param {module:api/IndexOperationsApi~listCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listCollections(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIndexes operation.
     * @callback module:api/IndexOperationsApi~listIndexesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List indexes
     * This operation returns a list of your Pinecone indexes.
     * @param {module:api/IndexOperationsApi~listIndexesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listIndexes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/databases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
