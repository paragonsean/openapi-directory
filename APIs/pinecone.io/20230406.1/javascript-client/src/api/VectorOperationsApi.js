/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteRequest from '../model/DeleteRequest';
import DescribeIndexStatsRequest from '../model/DescribeIndexStatsRequest';
import DescribeIndexStatsResponse from '../model/DescribeIndexStatsResponse';
import FetchRequest from '../model/FetchRequest';
import FetchResponse from '../model/FetchResponse';
import QueryRequest from '../model/QueryRequest';
import QueryResponse from '../model/QueryResponse';
import UpdateRequest from '../model/UpdateRequest';
import UpsertRequest from '../model/UpsertRequest';
import UpsertResponse from '../model/UpsertResponse';

/**
* VectorOperations service.
* @module api/VectorOperationsApi
* @version 20230406.1
*/
export default class VectorOperationsApi {

    /**
    * Constructs a new VectorOperationsApi. 
    * @alias module:api/VectorOperationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/VectorOperationsApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * The `Delete` operation deletes vectors, by id, from a single namespace. You can delete items by their id, from a single namespace.
     * @param {module:model/DeleteRequest} deleteRequest 
     * @param {module:api/VectorOperationsApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    callDelete(deleteRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteRequest;
      // verify the required parameter 'deleteRequest' is set
      if (deleteRequest === undefined || deleteRequest === null) {
        throw new Error("Missing the required parameter 'deleteRequest' when calling callDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      let basePaths = ['https://{index_name}-{project_id}.svc.{environment}.pinecone.io'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/vectors/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the describeIndexStats operation.
     * @callback module:api/VectorOperationsApi~describeIndexStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeIndexStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe Index Stats
     * The `DescribeIndexStats` operation returns statistics about the index's contents, including the vector count per namespace and the number of dimensions.
     * @param {module:model/DescribeIndexStatsRequest} describeIndexStatsRequest 
     * @param {module:api/VectorOperationsApi~describeIndexStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeIndexStatsResponse}
     */
    describeIndexStats(describeIndexStatsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeIndexStatsRequest;
      // verify the required parameter 'describeIndexStatsRequest' is set
      if (describeIndexStatsRequest === undefined || describeIndexStatsRequest === null) {
        throw new Error("Missing the required parameter 'describeIndexStatsRequest' when calling describeIndexStats");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeIndexStatsResponse;
      let basePaths = ['https://{index_name}-{project_id}.svc.{environment}.pinecone.io'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/describe_index_stats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the fetch operation.
     * @callback module:api/VectorOperationsApi~fetchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FetchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch
     * The `Fetch` operation looks up and returns vectors, by ID, from a single namespace. The returned vectors include the vector data and/or metadata.
     * @param {module:model/FetchRequest} fetchRequest 
     * @param {module:api/VectorOperationsApi~fetchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FetchResponse}
     */
    fetch(fetchRequest, opts, callback) {
      opts = opts || {};
      let postBody = fetchRequest;
      // verify the required parameter 'fetchRequest' is set
      if (fetchRequest === undefined || fetchRequest === null) {
        throw new Error("Missing the required parameter 'fetchRequest' when calling fetch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FetchResponse;
      let basePaths = ['https://{index_name}-{project_id}.svc.{environment}.pinecone.io'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/vectors/fetch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the query operation.
     * @callback module:api/VectorOperationsApi~queryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query
     * The `Query` operation searches a namespace, using a query vector. It retrieves the ids of the most similar items in a namespace, along with their similarity scores.
     * @param {module:model/QueryRequest} queryRequest 
     * @param {module:api/VectorOperationsApi~queryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryResponse}
     */
    query(queryRequest, opts, callback) {
      opts = opts || {};
      let postBody = queryRequest;
      // verify the required parameter 'queryRequest' is set
      if (queryRequest === undefined || queryRequest === null) {
        throw new Error("Missing the required parameter 'queryRequest' when calling query");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueryResponse;
      let basePaths = ['https://{index_name}-{project_id}.svc.{environment}.pinecone.io'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/VectorOperationsApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch
     * The `Update` operation updates vector in a namespace. If a value is included, it will overwrite the previous value. If a set_metadata is included, the values of the fields specified in it will be added or overwrite the previous value.
     * @param {module:model/UpdateRequest} updateRequest 
     * @param {module:api/VectorOperationsApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    update(updateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRequest;
      // verify the required parameter 'updateRequest' is set
      if (updateRequest === undefined || updateRequest === null) {
        throw new Error("Missing the required parameter 'updateRequest' when calling update");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      let basePaths = ['https://{index_name}-{project_id}.svc.{environment}.pinecone.io'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/vectors/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the upsert operation.
     * @callback module:api/VectorOperationsApi~upsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpsertResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upsert
     * The Upsert operation writes vectors into a namespace. If a new value is upserted for an existing vector id, it will overwrite the previous value.
     * @param {module:model/UpsertRequest} upsertRequest 
     * @param {module:api/VectorOperationsApi~upsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpsertResponse}
     */
    upsert(upsertRequest, opts, callback) {
      opts = opts || {};
      let postBody = upsertRequest;
      // verify the required parameter 'upsertRequest' is set
      if (upsertRequest === undefined || upsertRequest === null) {
        throw new Error("Missing the required parameter 'upsertRequest' when calling upsert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpsertResponse;
      let basePaths = ['https://{index_name}-{project_id}.svc.{environment}.pinecone.io'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/vectors/upsert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
