/*
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeleteRequest;
import org.openapitools.client.model.DescribeIndexStatsRequest;
import org.openapitools.client.model.DescribeIndexStatsResponse;
import org.openapitools.client.model.FetchRequest;
import org.openapitools.client.model.FetchResponse;
import org.openapitools.client.model.QueryRequest;
import org.openapitools.client.model.QueryResponse;
import org.openapitools.client.model.UpdateRequest;
import org.openapitools.client.model.UpsertRequest;
import org.openapitools.client.model.UpsertResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VectorOperationsApi
 */
@Disabled
public class VectorOperationsApiTest {

    private final VectorOperationsApi api = new VectorOperationsApi();

    /**
     * Delete
     *
     * The &#x60;Delete&#x60; operation deletes vectors, by id, from a single namespace. You can delete items by their id, from a single namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        DeleteRequest deleteRequest = null;
        Object response = api.delete(deleteRequest);
        // TODO: test validations
    }

    /**
     * Describe Index Stats
     *
     * The &#x60;DescribeIndexStats&#x60; operation returns statistics about the index&#39;s contents, including the vector count per namespace and the number of dimensions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeIndexStatsTest() throws ApiException {
        DescribeIndexStatsRequest describeIndexStatsRequest = null;
        DescribeIndexStatsResponse response = api.describeIndexStats(describeIndexStatsRequest);
        // TODO: test validations
    }

    /**
     * Fetch
     *
     * The &#x60;Fetch&#x60; operation looks up and returns vectors, by ID, from a single namespace. The returned vectors include the vector data and/or metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchTest() throws ApiException {
        FetchRequest fetchRequest = null;
        FetchResponse response = api.fetch(fetchRequest);
        // TODO: test validations
    }

    /**
     * Query
     *
     * The &#x60;Query&#x60; operation searches a namespace, using a query vector. It retrieves the ids of the most similar items in a namespace, along with their similarity scores.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        QueryRequest queryRequest = null;
        QueryResponse response = api.query(queryRequest);
        // TODO: test validations
    }

    /**
     * Fetch
     *
     * The &#x60;Update&#x60; operation updates vector in a namespace. If a value is included, it will overwrite the previous value. If a set_metadata is included, the values of the fields specified in it will be added or overwrite the previous value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        UpdateRequest updateRequest = null;
        Object response = api.update(updateRequest);
        // TODO: test validations
    }

    /**
     * Upsert
     *
     * The Upsert operation writes vectors into a namespace. If a new value is upserted for an existing vector id, it will overwrite the previous value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertTest() throws ApiException {
        UpsertRequest upsertRequest = null;
        UpsertResponse response = api.upsert(upsertRequest);
        // TODO: test validations
    }

}
