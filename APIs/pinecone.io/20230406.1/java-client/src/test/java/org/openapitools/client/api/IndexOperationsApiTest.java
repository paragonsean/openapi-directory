/*
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Collection;
import org.openapitools.client.model.CollectionDefinition;
import org.openapitools.client.model.Index;
import org.openapitools.client.model.IndexConfiguration;
import org.openapitools.client.model.IndexDefinition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IndexOperationsApi
 */
@Disabled
public class IndexOperationsApiTest {

    private final IndexOperationsApi api = new IndexOperationsApi();

    /**
     * Configure index
     *
     * This operation specifies the pod type and number of replicas for an index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureIndexTest() throws ApiException {
        String indexName = null;
        IndexConfiguration indexConfiguration = null;
        api.configureIndex(indexName, indexConfiguration);
        // TODO: test validations
    }

    /**
     * Create collection
     *
     * This operation creates a Pinecone collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCollectionTest() throws ApiException {
        CollectionDefinition collectionDefinition = null;
        api.createCollection(collectionDefinition);
        // TODO: test validations
    }

    /**
     * Create index
     *
     * This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of replicas to use, and more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIndexTest() throws ApiException {
        IndexDefinition indexDefinition = null;
        api.createIndex(indexDefinition);
        // TODO: test validations
    }

    /**
     * Delete Collection
     *
     * This operation deletes an existing collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCollectionTest() throws ApiException {
        String collectionName = null;
        api.deleteCollection(collectionName);
        // TODO: test validations
    }

    /**
     * Delete Index
     *
     * This operation deletes an existing index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIndexTest() throws ApiException {
        String indexName = null;
        api.deleteIndex(indexName);
        // TODO: test validations
    }

    /**
     * Describe collection
     *
     * Get a description of a collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCollectionTest() throws ApiException {
        String collectionName = null;
        Collection response = api.describeCollection(collectionName);
        // TODO: test validations
    }

    /**
     * Describe index
     *
     * Get a description of an index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeIndexTest() throws ApiException {
        String indexName = null;
        Index response = api.describeIndex(indexName);
        // TODO: test validations
    }

    /**
     * List collections
     *
     * This operation returns a list of your Pinecone collections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCollectionsTest() throws ApiException {
        List<String> response = api.listCollections();
        // TODO: test validations
    }

    /**
     * List indexes
     *
     * This operation returns a list of your Pinecone indexes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIndexesTest() throws ApiException {
        List<String> response = api.listIndexes();
        // TODO: test validations
    }

}
