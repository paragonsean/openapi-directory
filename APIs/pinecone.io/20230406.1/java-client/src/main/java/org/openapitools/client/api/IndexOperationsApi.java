/*
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Collection;
import org.openapitools.client.model.CollectionDefinition;
import org.openapitools.client.model.Index;
import org.openapitools.client.model.IndexConfiguration;
import org.openapitools.client.model.IndexDefinition;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IndexOperationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IndexOperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IndexOperationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for configureIndex
     * @param indexName  (required)
     * @param indexConfiguration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The index has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Quota exceeded, or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configureIndexCall(String indexName, IndexConfiguration indexConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = indexConfiguration;

        // create path and map variables
        String localVarPath = "/databases/{indexName}"
            .replace("{" + "indexName" + "}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configureIndexValidateBeforeCall(String indexName, IndexConfiguration indexConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling configureIndex(Async)");
        }

        // verify the required parameter 'indexConfiguration' is set
        if (indexConfiguration == null) {
            throw new ApiException("Missing the required parameter 'indexConfiguration' when calling configureIndex(Async)");
        }

        return configureIndexCall(indexName, indexConfiguration, _callback);

    }

    /**
     * Configure index
     * This operation specifies the pod type and number of replicas for an index.
     * @param indexName  (required)
     * @param indexConfiguration  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The index has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Quota exceeded, or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public void configureIndex(String indexName, IndexConfiguration indexConfiguration) throws ApiException {
        configureIndexWithHttpInfo(indexName, indexConfiguration);
    }

    /**
     * Configure index
     * This operation specifies the pod type and number of replicas for an index.
     * @param indexName  (required)
     * @param indexConfiguration  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The index has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Quota exceeded, or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> configureIndexWithHttpInfo(String indexName, IndexConfiguration indexConfiguration) throws ApiException {
        okhttp3.Call localVarCall = configureIndexValidateBeforeCall(indexName, indexConfiguration, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Configure index (asynchronously)
     * This operation specifies the pod type and number of replicas for an index.
     * @param indexName  (required)
     * @param indexConfiguration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The index has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Quota exceeded, or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configureIndexAsync(String indexName, IndexConfiguration indexConfiguration, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = configureIndexValidateBeforeCall(indexName, indexConfiguration, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCollection
     * @param collectionDefinition  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The collection has been successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Quota exceeded, or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A collection with the name provided already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCollectionCall(CollectionDefinition collectionDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionDefinition;

        // create path and map variables
        String localVarPath = "/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCollectionValidateBeforeCall(CollectionDefinition collectionDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionDefinition' is set
        if (collectionDefinition == null) {
            throw new ApiException("Missing the required parameter 'collectionDefinition' when calling createCollection(Async)");
        }

        return createCollectionCall(collectionDefinition, _callback);

    }

    /**
     * Create collection
     * This operation creates a Pinecone collection.
     * @param collectionDefinition  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The collection has been successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Quota exceeded, or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A collection with the name provided already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public void createCollection(CollectionDefinition collectionDefinition) throws ApiException {
        createCollectionWithHttpInfo(collectionDefinition);
    }

    /**
     * Create collection
     * This operation creates a Pinecone collection.
     * @param collectionDefinition  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The collection has been successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Quota exceeded, or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A collection with the name provided already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createCollectionWithHttpInfo(CollectionDefinition collectionDefinition) throws ApiException {
        okhttp3.Call localVarCall = createCollectionValidateBeforeCall(collectionDefinition, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create collection (asynchronously)
     * This operation creates a Pinecone collection.
     * @param collectionDefinition  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The collection has been successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Quota exceeded, or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A collection with the name provided already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCollectionAsync(CollectionDefinition collectionDefinition, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCollectionValidateBeforeCall(collectionDefinition, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createIndex
     * @param indexDefinition  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The collection has been successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Quota exceeded, or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Index of given name already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIndexCall(IndexDefinition indexDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = indexDefinition;

        // create path and map variables
        String localVarPath = "/databases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIndexValidateBeforeCall(IndexDefinition indexDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'indexDefinition' is set
        if (indexDefinition == null) {
            throw new ApiException("Missing the required parameter 'indexDefinition' when calling createIndex(Async)");
        }

        return createIndexCall(indexDefinition, _callback);

    }

    /**
     * Create index
     * This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of replicas to use, and more.
     * @param indexDefinition  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The collection has been successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Quota exceeded, or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Index of given name already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public void createIndex(IndexDefinition indexDefinition) throws ApiException {
        createIndexWithHttpInfo(indexDefinition);
    }

    /**
     * Create index
     * This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of replicas to use, and more.
     * @param indexDefinition  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The collection has been successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Quota exceeded, or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Index of given name already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createIndexWithHttpInfo(IndexDefinition indexDefinition) throws ApiException {
        okhttp3.Call localVarCall = createIndexValidateBeforeCall(indexDefinition, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create index (asynchronously)
     * This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of replicas to use, and more.
     * @param indexDefinition  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The collection has been successfully created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Quota exceeded, or invalid parameters. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Index of given name already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIndexAsync(IndexDefinition indexDefinition, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIndexValidateBeforeCall(indexDefinition, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCollection
     * @param collectionName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The collection has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollectionCall(String collectionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{collectionName}"
            .replace("{" + "collectionName" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCollectionValidateBeforeCall(String collectionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling deleteCollection(Async)");
        }

        return deleteCollectionCall(collectionName, _callback);

    }

    /**
     * Delete Collection
     * This operation deletes an existing collection.
     * @param collectionName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The collection has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCollection(String collectionName) throws ApiException {
        deleteCollectionWithHttpInfo(collectionName);
    }

    /**
     * Delete Collection
     * This operation deletes an existing collection.
     * @param collectionName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The collection has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCollectionWithHttpInfo(String collectionName) throws ApiException {
        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(collectionName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Collection (asynchronously)
     * This operation deletes an existing collection.
     * @param collectionName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The collection has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollectionAsync(String collectionName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(collectionName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIndex
     * @param indexName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The index has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIndexCall(String indexName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databases/{indexName}"
            .replace("{" + "indexName" + "}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIndexValidateBeforeCall(String indexName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling deleteIndex(Async)");
        }

        return deleteIndexCall(indexName, _callback);

    }

    /**
     * Delete Index
     * This operation deletes an existing index.
     * @param indexName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The index has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteIndex(String indexName) throws ApiException {
        deleteIndexWithHttpInfo(indexName);
    }

    /**
     * Delete Index
     * This operation deletes an existing index.
     * @param indexName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The index has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteIndexWithHttpInfo(String indexName) throws ApiException {
        okhttp3.Call localVarCall = deleteIndexValidateBeforeCall(indexName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Index (asynchronously)
     * This operation deletes an existing index.
     * @param indexName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The index has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIndexAsync(String indexName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIndexValidateBeforeCall(indexName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeCollection
     * @param collectionName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the collections in your current project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeCollectionCall(String collectionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections/{collectionName}"
            .replace("{" + "collectionName" + "}", localVarApiClient.escapeString(collectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeCollectionValidateBeforeCall(String collectionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionName' is set
        if (collectionName == null) {
            throw new ApiException("Missing the required parameter 'collectionName' when calling describeCollection(Async)");
        }

        return describeCollectionCall(collectionName, _callback);

    }

    /**
     * Describe collection
     * Get a description of a collection.
     * @param collectionName  (required)
     * @return Collection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the collections in your current project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public Collection describeCollection(String collectionName) throws ApiException {
        ApiResponse<Collection> localVarResp = describeCollectionWithHttpInfo(collectionName);
        return localVarResp.getData();
    }

    /**
     * Describe collection
     * Get a description of a collection.
     * @param collectionName  (required)
     * @return ApiResponse&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the collections in your current project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Collection> describeCollectionWithHttpInfo(String collectionName) throws ApiException {
        okhttp3.Call localVarCall = describeCollectionValidateBeforeCall(collectionName, null);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Describe collection (asynchronously)
     * Get a description of a collection.
     * @param collectionName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the collections in your current project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeCollectionAsync(String collectionName, final ApiCallback<Collection> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeCollectionValidateBeforeCall(collectionName, _callback);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeIndex
     * @param indexName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the collections in your current project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeIndexCall(String indexName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databases/{indexName}"
            .replace("{" + "indexName" + "}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeIndexValidateBeforeCall(String indexName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling describeIndex(Async)");
        }

        return describeIndexCall(indexName, _callback);

    }

    /**
     * Describe index
     * Get a description of an index.
     * @param indexName  (required)
     * @return Index
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the collections in your current project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public Index describeIndex(String indexName) throws ApiException {
        ApiResponse<Index> localVarResp = describeIndexWithHttpInfo(indexName);
        return localVarResp.getData();
    }

    /**
     * Describe index
     * Get a description of an index.
     * @param indexName  (required)
     * @return ApiResponse&lt;Index&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the collections in your current project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Index> describeIndexWithHttpInfo(String indexName) throws ApiException {
        okhttp3.Call localVarCall = describeIndexValidateBeforeCall(indexName, null);
        Type localVarReturnType = new TypeToken<Index>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Describe index (asynchronously)
     * Get a description of an index.
     * @param indexName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the collections in your current project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeIndexAsync(String indexName, final ApiCallback<Index> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeIndexValidateBeforeCall(indexName, _callback);
        Type localVarReturnType = new TypeToken<Index>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCollections
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the collections in your current project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCollectionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCollectionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCollectionsCall(_callback);

    }

    /**
     * List collections
     * This operation returns a list of your Pinecone collections.
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the collections in your current project. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> listCollections() throws ApiException {
        ApiResponse<List<String>> localVarResp = listCollectionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List collections
     * This operation returns a list of your Pinecone collections.
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the collections in your current project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> listCollectionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCollectionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List collections (asynchronously)
     * This operation returns a list of your Pinecone collections.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the collections in your current project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCollectionsAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCollectionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIndexes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the indexes that you have previously created, and which are associated with the given API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIndexesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIndexesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listIndexesCall(_callback);

    }

    /**
     * List indexes
     * This operation returns a list of your Pinecone indexes.
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the indexes that you have previously created, and which are associated with the given API key </td><td>  -  </td></tr>
     </table>
     */
    public List<String> listIndexes() throws ApiException {
        ApiResponse<List<String>> localVarResp = listIndexesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List indexes
     * This operation returns a list of your Pinecone indexes.
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the indexes that you have previously created, and which are associated with the given API key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> listIndexesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listIndexesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List indexes (asynchronously)
     * This operation returns a list of your Pinecone indexes.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the indexes that you have previously created, and which are associated with the given API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIndexesAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIndexesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
