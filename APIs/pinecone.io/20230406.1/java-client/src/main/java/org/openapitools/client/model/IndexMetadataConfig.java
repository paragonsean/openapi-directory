/*
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for the behavior of Pinecone&#39;s internal metadata index. By default, all metadata is indexed; when metadata_config is present, only specified metadata fields are indexed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:47.388417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IndexMetadataConfig {
  public static final String SERIALIZED_NAME_INDEXED = "indexed";
  @SerializedName(SERIALIZED_NAME_INDEXED)
  private List<String> indexed = new ArrayList<>();

  public IndexMetadataConfig() {
  }

  public IndexMetadataConfig indexed(List<String> indexed) {
    this.indexed = indexed;
    return this;
  }

  public IndexMetadataConfig addIndexedItem(String indexedItem) {
    if (this.indexed == null) {
      this.indexed = new ArrayList<>();
    }
    this.indexed.add(indexedItem);
    return this;
  }

  /**
   * Get indexed
   * @return indexed
   */
  @javax.annotation.Nullable
  public List<String> getIndexed() {
    return indexed;
  }

  public void setIndexed(List<String> indexed) {
    this.indexed = indexed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexMetadataConfig indexMetadataConfig = (IndexMetadataConfig) o;
    return Objects.equals(this.indexed, indexMetadataConfig.indexed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexMetadataConfig {\n");
    sb.append("    indexed: ").append(toIndentedString(indexed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("indexed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndexMetadataConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndexMetadataConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndexMetadataConfig is not found in the empty JSON string", IndexMetadataConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndexMetadataConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndexMetadataConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("indexed") != null && !jsonObj.get("indexed").isJsonNull() && !jsonObj.get("indexed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexed` to be an array in the JSON string but got `%s`", jsonObj.get("indexed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndexMetadataConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndexMetadataConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndexMetadataConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndexMetadataConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<IndexMetadataConfig>() {
           @Override
           public void write(JsonWriter out, IndexMetadataConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndexMetadataConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndexMetadataConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndexMetadataConfig
   * @throws IOException if the JSON string is invalid with respect to IndexMetadataConfig
   */
  public static IndexMetadataConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndexMetadataConfig.class);
  }

  /**
   * Convert an instance of IndexMetadataConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

