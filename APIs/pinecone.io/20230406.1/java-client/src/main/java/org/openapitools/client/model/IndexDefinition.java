/*
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IndexMetadataConfig;
import org.openapitools.client.model.IndexMetric;
import org.openapitools.client.model.PodType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IndexDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:47.388417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IndexDefinition {
  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private Integer dimension;

  public static final String SERIALIZED_NAME_METADATA_CONFIG = "metadata_config";
  @SerializedName(SERIALIZED_NAME_METADATA_CONFIG)
  private IndexMetadataConfig metadataConfig;

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private IndexMetric metric;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POD_TYPE = "pod_type";
  @SerializedName(SERIALIZED_NAME_POD_TYPE)
  private PodType podType;

  public static final String SERIALIZED_NAME_PODS = "pods";
  @SerializedName(SERIALIZED_NAME_PODS)
  private Integer pods = 1;

  public static final String SERIALIZED_NAME_REPLICAS = "replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  private Integer replicas = 1;

  public static final String SERIALIZED_NAME_SOURCE_COLLECTION = "source_collection";
  @SerializedName(SERIALIZED_NAME_SOURCE_COLLECTION)
  private String sourceCollection;

  public IndexDefinition() {
  }

  public IndexDefinition dimension(Integer dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * The number of dimensions in the vector representation
   * minimum: 1
   * maximum: 20000
   * @return dimension
   */
  @javax.annotation.Nonnull
  public Integer getDimension() {
    return dimension;
  }

  public void setDimension(Integer dimension) {
    this.dimension = dimension;
  }


  public IndexDefinition metadataConfig(IndexMetadataConfig metadataConfig) {
    this.metadataConfig = metadataConfig;
    return this;
  }

  /**
   * Get metadataConfig
   * @return metadataConfig
   */
  @javax.annotation.Nullable
  public IndexMetadataConfig getMetadataConfig() {
    return metadataConfig;
  }

  public void setMetadataConfig(IndexMetadataConfig metadataConfig) {
    this.metadataConfig = metadataConfig;
  }


  public IndexDefinition metric(IndexMetric metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Get metric
   * @return metric
   */
  @javax.annotation.Nullable
  public IndexMetric getMetric() {
    return metric;
  }

  public void setMetric(IndexMetric metric) {
    this.metric = metric;
  }


  public IndexDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique name of an index.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public IndexDefinition podType(PodType podType) {
    this.podType = podType;
    return this;
  }

  /**
   * Get podType
   * @return podType
   */
  @javax.annotation.Nullable
  public PodType getPodType() {
    return podType;
  }

  public void setPodType(PodType podType) {
    this.podType = podType;
  }


  public IndexDefinition pods(Integer pods) {
    this.pods = pods;
    return this;
  }

  /**
   * The number of pods for the index to use,including replicas.
   * minimum: 1
   * @return pods
   */
  @javax.annotation.Nullable
  public Integer getPods() {
    return pods;
  }

  public void setPods(Integer pods) {
    this.pods = pods;
  }


  public IndexDefinition replicas(Integer replicas) {
    this.replicas = replicas;
    return this;
  }

  /**
   * The number of replicas. Replicas duplicate your index. They provide higher availability and throughput.
   * minimum: 1
   * @return replicas
   */
  @javax.annotation.Nullable
  public Integer getReplicas() {
    return replicas;
  }

  public void setReplicas(Integer replicas) {
    this.replicas = replicas;
  }


  public IndexDefinition sourceCollection(String sourceCollection) {
    this.sourceCollection = sourceCollection;
    return this;
  }

  /**
   * The unique name of a collection.
   * @return sourceCollection
   */
  @javax.annotation.Nullable
  public String getSourceCollection() {
    return sourceCollection;
  }

  public void setSourceCollection(String sourceCollection) {
    this.sourceCollection = sourceCollection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndexDefinition indexDefinition = (IndexDefinition) o;
    return Objects.equals(this.dimension, indexDefinition.dimension) &&
        Objects.equals(this.metadataConfig, indexDefinition.metadataConfig) &&
        Objects.equals(this.metric, indexDefinition.metric) &&
        Objects.equals(this.name, indexDefinition.name) &&
        Objects.equals(this.podType, indexDefinition.podType) &&
        Objects.equals(this.pods, indexDefinition.pods) &&
        Objects.equals(this.replicas, indexDefinition.replicas) &&
        Objects.equals(this.sourceCollection, indexDefinition.sourceCollection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimension, metadataConfig, metric, name, podType, pods, replicas, sourceCollection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndexDefinition {\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    metadataConfig: ").append(toIndentedString(metadataConfig)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    podType: ").append(toIndentedString(podType)).append("\n");
    sb.append("    pods: ").append(toIndentedString(pods)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    sourceCollection: ").append(toIndentedString(sourceCollection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimension");
    openapiFields.add("metadata_config");
    openapiFields.add("metric");
    openapiFields.add("name");
    openapiFields.add("pod_type");
    openapiFields.add("pods");
    openapiFields.add("replicas");
    openapiFields.add("source_collection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dimension");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IndexDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IndexDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IndexDefinition is not found in the empty JSON string", IndexDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IndexDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IndexDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IndexDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `metadata_config`
      if (jsonObj.get("metadata_config") != null && !jsonObj.get("metadata_config").isJsonNull()) {
        IndexMetadataConfig.validateJsonElement(jsonObj.get("metadata_config"));
      }
      // validate the optional field `metric`
      if (jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) {
        IndexMetric.validateJsonElement(jsonObj.get("metric"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `pod_type`
      if (jsonObj.get("pod_type") != null && !jsonObj.get("pod_type").isJsonNull()) {
        PodType.validateJsonElement(jsonObj.get("pod_type"));
      }
      if ((jsonObj.get("source_collection") != null && !jsonObj.get("source_collection").isJsonNull()) && !jsonObj.get("source_collection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_collection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_collection").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IndexDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IndexDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IndexDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IndexDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<IndexDefinition>() {
           @Override
           public void write(JsonWriter out, IndexDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IndexDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IndexDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IndexDefinition
   * @throws IOException if the JSON string is invalid with respect to IndexDefinition
   */
  public static IndexDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IndexDefinition.class);
  }

  /**
   * Convert an instance of IndexDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

