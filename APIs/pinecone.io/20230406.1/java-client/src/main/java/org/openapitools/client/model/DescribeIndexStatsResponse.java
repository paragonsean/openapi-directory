/*
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.IndexNamespaceStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeIndexStatsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:47.388417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeIndexStatsResponse {
  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private Integer dimension;

  public static final String SERIALIZED_NAME_INDEX_FULLNESS = "indexFullness";
  @SerializedName(SERIALIZED_NAME_INDEX_FULLNESS)
  private Float indexFullness;

  public static final String SERIALIZED_NAME_NAMESPACES = "namespaces";
  @SerializedName(SERIALIZED_NAME_NAMESPACES)
  private Map<String, IndexNamespaceStats> namespaces = new HashMap<>();

  public static final String SERIALIZED_NAME_TOTAL_VECTOR_COUNT = "totalVectorCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_VECTOR_COUNT)
  private Long totalVectorCount;

  public DescribeIndexStatsResponse() {
  }

  public DescribeIndexStatsResponse dimension(Integer dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * The number of dimensions in the vector representation
   * minimum: 1
   * maximum: 20000
   * @return dimension
   */
  @javax.annotation.Nullable
  public Integer getDimension() {
    return dimension;
  }

  public void setDimension(Integer dimension) {
    this.dimension = dimension;
  }


  public DescribeIndexStatsResponse indexFullness(Float indexFullness) {
    this.indexFullness = indexFullness;
    return this;
  }

  /**
   * The fullness of the index, regardless of whether a metadata filter expression was passed. The granularity of this metric is 10%.
   * @return indexFullness
   */
  @javax.annotation.Nullable
  public Float getIndexFullness() {
    return indexFullness;
  }

  public void setIndexFullness(Float indexFullness) {
    this.indexFullness = indexFullness;
  }


  public DescribeIndexStatsResponse namespaces(Map<String, IndexNamespaceStats> namespaces) {
    this.namespaces = namespaces;
    return this;
  }

  public DescribeIndexStatsResponse putNamespacesItem(String key, IndexNamespaceStats namespacesItem) {
    if (this.namespaces == null) {
      this.namespaces = new HashMap<>();
    }
    this.namespaces.put(key, namespacesItem);
    return this;
  }

  /**
   * Get namespaces
   * @return namespaces
   */
  @javax.annotation.Nullable
  public Map<String, IndexNamespaceStats> getNamespaces() {
    return namespaces;
  }

  public void setNamespaces(Map<String, IndexNamespaceStats> namespaces) {
    this.namespaces = namespaces;
  }


  public DescribeIndexStatsResponse totalVectorCount(Long totalVectorCount) {
    this.totalVectorCount = totalVectorCount;
    return this;
  }

  /**
   * Get totalVectorCount
   * @return totalVectorCount
   */
  @javax.annotation.Nullable
  public Long getTotalVectorCount() {
    return totalVectorCount;
  }

  public void setTotalVectorCount(Long totalVectorCount) {
    this.totalVectorCount = totalVectorCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeIndexStatsResponse describeIndexStatsResponse = (DescribeIndexStatsResponse) o;
    return Objects.equals(this.dimension, describeIndexStatsResponse.dimension) &&
        Objects.equals(this.indexFullness, describeIndexStatsResponse.indexFullness) &&
        Objects.equals(this.namespaces, describeIndexStatsResponse.namespaces) &&
        Objects.equals(this.totalVectorCount, describeIndexStatsResponse.totalVectorCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimension, indexFullness, namespaces, totalVectorCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeIndexStatsResponse {\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    indexFullness: ").append(toIndentedString(indexFullness)).append("\n");
    sb.append("    namespaces: ").append(toIndentedString(namespaces)).append("\n");
    sb.append("    totalVectorCount: ").append(toIndentedString(totalVectorCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimension");
    openapiFields.add("indexFullness");
    openapiFields.add("namespaces");
    openapiFields.add("totalVectorCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeIndexStatsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeIndexStatsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeIndexStatsResponse is not found in the empty JSON string", DescribeIndexStatsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeIndexStatsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeIndexStatsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeIndexStatsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeIndexStatsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeIndexStatsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeIndexStatsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeIndexStatsResponse>() {
           @Override
           public void write(JsonWriter out, DescribeIndexStatsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeIndexStatsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeIndexStatsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeIndexStatsResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeIndexStatsResponse
   */
  public static DescribeIndexStatsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeIndexStatsResponse.class);
  }

  /**
   * Convert an instance of DescribeIndexStatsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

