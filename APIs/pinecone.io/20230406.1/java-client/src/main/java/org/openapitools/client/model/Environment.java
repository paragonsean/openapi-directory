/*
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets Environment
 */
@JsonAdapter(Environment.Adapter.class)
public enum Environment {
  
  US_WEST1_GCP("us-west1-gcp"),
  
  US_WEST4_GCP("us-west4-gcp"),
  
  US_CENTRAL1_GCP("us-central1-gcp"),
  
  US_EAST1_GCP("us-east1-gcp"),
  
  US_EAST4_GCP("us-east4-gcp"),
  
  EU_WEST1_GCP("eu-west1-gcp"),
  
  US_EAST1_AWS("us-east1-aws");

  private String value;

  Environment(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Environment fromValue(String value) {
    for (Environment b : Environment.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Environment> {
    @Override
    public void write(final JsonWriter jsonWriter, final Environment enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Environment read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Environment.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Environment.fromValue(value);
  }
}

