/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteRequest::OAIDeleteRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteRequest::OAIDeleteRequest() {
    this->initializeModel();
}

OAIDeleteRequest::~OAIDeleteRequest() {}

void OAIDeleteRequest::initializeModel() {

    m_delete_all_isSet = false;
    m_delete_all_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;
}

void OAIDeleteRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteRequest::fromJsonObject(QJsonObject json) {

    m_delete_all_isValid = ::OpenAPI::fromJsonValue(m_delete_all, json[QString("deleteAll")]);
    m_delete_all_isSet = !json[QString("deleteAll")].isNull() && m_delete_all_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;
}

QString OAIDeleteRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_delete_all_isSet) {
        obj.insert(QString("deleteAll"), ::OpenAPI::toJsonValue(m_delete_all));
    }
    if (m_filter.size() > 0) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_ids.size() > 0) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    return obj;
}

bool OAIDeleteRequest::isDeleteAll() const {
    return m_delete_all;
}
void OAIDeleteRequest::setDeleteAll(const bool &delete_all) {
    m_delete_all = delete_all;
    m_delete_all_isSet = true;
}

bool OAIDeleteRequest::is_delete_all_Set() const{
    return m_delete_all_isSet;
}

bool OAIDeleteRequest::is_delete_all_Valid() const{
    return m_delete_all_isValid;
}

QMap<QString, QJsonValue> OAIDeleteRequest::getFilter() const {
    return m_filter;
}
void OAIDeleteRequest::setFilter(const QMap<QString, QJsonValue> &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIDeleteRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIDeleteRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QList<QString> OAIDeleteRequest::getIds() const {
    return m_ids;
}
void OAIDeleteRequest::setIds(const QList<QString> &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIDeleteRequest::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIDeleteRequest::is_ids_Valid() const{
    return m_ids_isValid;
}

QString OAIDeleteRequest::getRNamespace() const {
    return m_r_namespace;
}
void OAIDeleteRequest::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIDeleteRequest::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIDeleteRequest::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

bool OAIDeleteRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delete_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
