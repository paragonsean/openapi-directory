/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVectorOperationsApi_H
#define OAI_OAIVectorOperationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeleteRequest.h"
#include "OAIDescribeIndexStatsRequest.h"
#include "OAIDescribeIndexStatsResponse.h"
#include "OAIFetchRequest.h"
#include "OAIFetchResponse.h"
#include "OAIObject.h"
#include "OAIQueryRequest.h"
#include "OAIQueryResponse.h"
#include "OAIUpdateRequest.h"
#include "OAIUpsertRequest.h"
#include "OAIUpsertResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVectorOperationsApi : public QObject {
    Q_OBJECT

public:
    OAIVectorOperationsApi(const int timeOut = 0);
    ~OAIVectorOperationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_describe_index_stats_request OAIDescribeIndexStatsRequest [required]
    */
    virtual void describeIndexStats(const OAIDescribeIndexStatsRequest &oai_describe_index_stats_request);

    /**
    * @param[in]  oai_fetch_request OAIFetchRequest [required]
    */
    virtual void fetch(const OAIFetchRequest &oai_fetch_request);

    /**
    * @param[in]  oai_query_request OAIQueryRequest [required]
    */
    virtual void query(const OAIQueryRequest &oai_query_request);

    /**
    * @param[in]  oai_delete_request OAIDeleteRequest [required]
    */
    virtual void r_delete(const OAIDeleteRequest &oai_delete_request);

    /**
    * @param[in]  oai_update_request OAIUpdateRequest [required]
    */
    virtual void update(const OAIUpdateRequest &oai_update_request);

    /**
    * @param[in]  oai_upsert_request OAIUpsertRequest [required]
    */
    virtual void upsert(const OAIUpsertRequest &oai_upsert_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void describeIndexStatsCallback(OAIHttpRequestWorker *worker);
    void fetchCallback(OAIHttpRequestWorker *worker);
    void queryCallback(OAIHttpRequestWorker *worker);
    void r_deleteCallback(OAIHttpRequestWorker *worker);
    void updateCallback(OAIHttpRequestWorker *worker);
    void upsertCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void describeIndexStatsSignal(OAIDescribeIndexStatsResponse summary);
    void fetchSignal(OAIFetchResponse summary);
    void querySignal(OAIQueryResponse summary);
    void r_deleteSignal(OAIObject summary);
    void updateSignal(OAIObject summary);
    void upsertSignal(OAIUpsertResponse summary);


    void describeIndexStatsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeIndexStatsResponse summary);
    void fetchSignalFull(OAIHttpRequestWorker *worker, OAIFetchResponse summary);
    void querySignalFull(OAIHttpRequestWorker *worker, OAIQueryResponse summary);
    void r_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void upsertSignalFull(OAIHttpRequestWorker *worker, OAIUpsertResponse summary);

    Q_DECL_DEPRECATED_X("Use describeIndexStatsSignalError() instead")
    void describeIndexStatsSignalE(OAIDescribeIndexStatsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeIndexStatsSignalError(OAIDescribeIndexStatsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSignalError() instead")
    void fetchSignalE(OAIFetchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSignalError(OAIFetchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use querySignalError() instead")
    void querySignalE(OAIQueryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void querySignalError(OAIQueryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_deleteSignalError() instead")
    void r_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void r_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalError() instead")
    void updateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertSignalError() instead")
    void upsertSignalE(OAIUpsertResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void upsertSignalError(OAIUpsertResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use describeIndexStatsSignalErrorFull() instead")
    void describeIndexStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeIndexStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchSignalErrorFull() instead")
    void fetchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use querySignalErrorFull() instead")
    void querySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void querySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_deleteSignalErrorFull() instead")
    void r_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalErrorFull() instead")
    void updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertSignalErrorFull() instead")
    void upsertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upsertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
