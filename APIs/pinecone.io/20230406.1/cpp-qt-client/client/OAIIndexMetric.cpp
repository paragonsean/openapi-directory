/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndexMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndexMetric::OAIIndexMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndexMetric::OAIIndexMetric() {
    this->initializeModel();
}

OAIIndexMetric::~OAIIndexMetric() {}

void OAIIndexMetric::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIIndexMetric::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIIndexMetric::fromJson(QString jsonString) {
    
    if ( jsonString.compare("euclidean", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIndexMetric::EUCLIDEAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cosine", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIndexMetric::COSINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dotproduct", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIndexMetric::DOTPRODUCT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIIndexMetric::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIIndexMetric::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIIndexMetric::EUCLIDEAN:
            val = "euclidean";
            break;
        case eOAIIndexMetric::COSINE:
            val = "cosine";
            break;
        case eOAIIndexMetric::DOTPRODUCT:
            val = "dotproduct";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIIndexMetric::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIIndexMetric::eOAIIndexMetric OAIIndexMetric::getValue() const {
    return m_value;
}

void OAIIndexMetric::setValue(const OAIIndexMetric::eOAIIndexMetric& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIIndexMetric::isSet() const {
    
    return m_value_isSet;
}

bool OAIIndexMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
