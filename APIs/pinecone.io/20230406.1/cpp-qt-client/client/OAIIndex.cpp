/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndex.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndex::OAIIndex(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndex::OAIIndex() {
    this->initializeModel();
}

OAIIndex::~OAIIndex() {}

void OAIIndex::initializeModel() {

    m_database_isSet = false;
    m_database_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIIndex::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndex::fromJsonObject(QJsonObject json) {

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIIndex::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndex::asJsonObject() const {
    QJsonObject obj;
    if (m_database.isSet()) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIIndexDatabase OAIIndex::getDatabase() const {
    return m_database;
}
void OAIIndex::setDatabase(const OAIIndexDatabase &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIIndex::is_database_Set() const{
    return m_database_isSet;
}

bool OAIIndex::is_database_Valid() const{
    return m_database_isValid;
}

OAIIndexStatus OAIIndex::getStatus() const {
    return m_status;
}
void OAIIndex::setStatus(const OAIIndexStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIIndex::is_status_Set() const{
    return m_status_isSet;
}

bool OAIIndex::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIIndex::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndex::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
