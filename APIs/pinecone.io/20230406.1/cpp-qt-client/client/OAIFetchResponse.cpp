/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFetchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFetchResponse::OAIFetchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFetchResponse::OAIFetchResponse() {
    this->initializeModel();
}

OAIFetchResponse::~OAIFetchResponse() {}

void OAIFetchResponse::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_vectors_isSet = false;
    m_vectors_isValid = false;
}

void OAIFetchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFetchResponse::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    if(json["vectors"].isObject()){
        auto varmap = json["vectors"].toObject().toVariantMap();
        m_vectors_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<float> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_vectors_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_vectors_isSet &= !jval.isNull() && m_vectors_isValid;
                m_vectors.insert(m_vectors.end(), val, item);
            }
        }
    }
}

QString OAIFetchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFetchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_vectors.size() > 0) {
        
        obj.insert(QString("vectors"), toJsonValue(m_vectors));
    }
    return obj;
}

QString OAIFetchResponse::getRNamespace() const {
    return m_r_namespace;
}
void OAIFetchResponse::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIFetchResponse::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIFetchResponse::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QMap<QString, QList> OAIFetchResponse::getVectors() const {
    return m_vectors;
}
void OAIFetchResponse::setVectors(const QMap<QString, QList> &vectors) {
    m_vectors = vectors;
    m_vectors_isSet = true;
}

bool OAIFetchResponse::is_vectors_Set() const{
    return m_vectors_isSet;
}

bool OAIFetchResponse::is_vectors_Valid() const{
    return m_vectors_isValid;
}

bool OAIFetchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vectors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFetchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
