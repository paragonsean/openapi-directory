/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndexStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndexStatus::OAIIndexStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndexStatus::OAIIndexStatus() {
    this->initializeModel();
}

OAIIndexStatus::~OAIIndexStatus() {}

void OAIIndexStatus::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_ready_isSet = false;
    m_ready_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIIndexStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndexStatus::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_ready_isValid = ::OpenAPI::fromJsonValue(m_ready, json[QString("ready")]);
    m_ready_isSet = !json[QString("ready")].isNull() && m_ready_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIIndexStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndexStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_ready_isSet) {
        obj.insert(QString("ready"), ::OpenAPI::toJsonValue(m_ready));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIIndexStatus::getHost() const {
    return m_host;
}
void OAIIndexStatus::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIIndexStatus::is_host_Set() const{
    return m_host_isSet;
}

bool OAIIndexStatus::is_host_Valid() const{
    return m_host_isValid;
}

qint32 OAIIndexStatus::getPort() const {
    return m_port;
}
void OAIIndexStatus::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIIndexStatus::is_port_Set() const{
    return m_port_isSet;
}

bool OAIIndexStatus::is_port_Valid() const{
    return m_port_isValid;
}

bool OAIIndexStatus::isReady() const {
    return m_ready;
}
void OAIIndexStatus::setReady(const bool &ready) {
    m_ready = ready;
    m_ready_isSet = true;
}

bool OAIIndexStatus::is_ready_Set() const{
    return m_ready_isSet;
}

bool OAIIndexStatus::is_ready_Valid() const{
    return m_ready_isValid;
}

OAIIndexState OAIIndexStatus::getState() const {
    return m_state;
}
void OAIIndexStatus::setState(const OAIIndexState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIIndexStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAIIndexStatus::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIIndexStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ready_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndexStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
