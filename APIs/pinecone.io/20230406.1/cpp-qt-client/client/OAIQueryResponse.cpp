/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryResponse::OAIQueryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryResponse::OAIQueryResponse() {
    this->initializeModel();
}

OAIQueryResponse::~OAIQueryResponse() {}

void OAIQueryResponse::initializeModel() {

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;
}

void OAIQueryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryResponse::fromJsonObject(QJsonObject json) {

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("matches")]);
    m_matches_isSet = !json[QString("matches")].isNull() && m_matches_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;
}

QString OAIQueryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_matches.size() > 0) {
        obj.insert(QString("matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    return obj;
}

QList<OAIQueryMatch> OAIQueryResponse::getMatches() const {
    return m_matches;
}
void OAIQueryResponse::setMatches(const QList<OAIQueryMatch> &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAIQueryResponse::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAIQueryResponse::is_matches_Valid() const{
    return m_matches_isValid;
}

QString OAIQueryResponse::getRNamespace() const {
    return m_r_namespace;
}
void OAIQueryResponse::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIQueryResponse::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIQueryResponse::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

bool OAIQueryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
