/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndexDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndexDefinition::OAIIndexDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndexDefinition::OAIIndexDefinition() {
    this->initializeModel();
}

OAIIndexDefinition::~OAIIndexDefinition() {}

void OAIIndexDefinition::initializeModel() {

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_metadata_config_isSet = false;
    m_metadata_config_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pod_type_isSet = false;
    m_pod_type_isValid = false;

    m_pods_isSet = false;
    m_pods_isValid = false;

    m_replicas_isSet = false;
    m_replicas_isValid = false;

    m_source_collection_isSet = false;
    m_source_collection_isValid = false;
}

void OAIIndexDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndexDefinition::fromJsonObject(QJsonObject json) {

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_metadata_config_isValid = ::OpenAPI::fromJsonValue(m_metadata_config, json[QString("metadata_config")]);
    m_metadata_config_isSet = !json[QString("metadata_config")].isNull() && m_metadata_config_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pod_type_isValid = ::OpenAPI::fromJsonValue(m_pod_type, json[QString("pod_type")]);
    m_pod_type_isSet = !json[QString("pod_type")].isNull() && m_pod_type_isValid;

    m_pods_isValid = ::OpenAPI::fromJsonValue(m_pods, json[QString("pods")]);
    m_pods_isSet = !json[QString("pods")].isNull() && m_pods_isValid;

    m_replicas_isValid = ::OpenAPI::fromJsonValue(m_replicas, json[QString("replicas")]);
    m_replicas_isSet = !json[QString("replicas")].isNull() && m_replicas_isValid;

    m_source_collection_isValid = ::OpenAPI::fromJsonValue(m_source_collection, json[QString("source_collection")]);
    m_source_collection_isSet = !json[QString("source_collection")].isNull() && m_source_collection_isValid;
}

QString OAIIndexDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndexDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_isSet) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_metadata_config.isSet()) {
        obj.insert(QString("metadata_config"), ::OpenAPI::toJsonValue(m_metadata_config));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pod_type.isSet()) {
        obj.insert(QString("pod_type"), ::OpenAPI::toJsonValue(m_pod_type));
    }
    if (m_pods_isSet) {
        obj.insert(QString("pods"), ::OpenAPI::toJsonValue(m_pods));
    }
    if (m_replicas_isSet) {
        obj.insert(QString("replicas"), ::OpenAPI::toJsonValue(m_replicas));
    }
    if (m_source_collection_isSet) {
        obj.insert(QString("source_collection"), ::OpenAPI::toJsonValue(m_source_collection));
    }
    return obj;
}

qint32 OAIIndexDefinition::getDimension() const {
    return m_dimension;
}
void OAIIndexDefinition::setDimension(const qint32 &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIIndexDefinition::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIIndexDefinition::is_dimension_Valid() const{
    return m_dimension_isValid;
}

OAIIndexMetadataConfig OAIIndexDefinition::getMetadataConfig() const {
    return m_metadata_config;
}
void OAIIndexDefinition::setMetadataConfig(const OAIIndexMetadataConfig &metadata_config) {
    m_metadata_config = metadata_config;
    m_metadata_config_isSet = true;
}

bool OAIIndexDefinition::is_metadata_config_Set() const{
    return m_metadata_config_isSet;
}

bool OAIIndexDefinition::is_metadata_config_Valid() const{
    return m_metadata_config_isValid;
}

OAIIndexMetric OAIIndexDefinition::getMetric() const {
    return m_metric;
}
void OAIIndexDefinition::setMetric(const OAIIndexMetric &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIIndexDefinition::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIIndexDefinition::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAIIndexDefinition::getName() const {
    return m_name;
}
void OAIIndexDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIndexDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIndexDefinition::is_name_Valid() const{
    return m_name_isValid;
}

OAIPodType OAIIndexDefinition::getPodType() const {
    return m_pod_type;
}
void OAIIndexDefinition::setPodType(const OAIPodType &pod_type) {
    m_pod_type = pod_type;
    m_pod_type_isSet = true;
}

bool OAIIndexDefinition::is_pod_type_Set() const{
    return m_pod_type_isSet;
}

bool OAIIndexDefinition::is_pod_type_Valid() const{
    return m_pod_type_isValid;
}

qint32 OAIIndexDefinition::getPods() const {
    return m_pods;
}
void OAIIndexDefinition::setPods(const qint32 &pods) {
    m_pods = pods;
    m_pods_isSet = true;
}

bool OAIIndexDefinition::is_pods_Set() const{
    return m_pods_isSet;
}

bool OAIIndexDefinition::is_pods_Valid() const{
    return m_pods_isValid;
}

qint32 OAIIndexDefinition::getReplicas() const {
    return m_replicas;
}
void OAIIndexDefinition::setReplicas(const qint32 &replicas) {
    m_replicas = replicas;
    m_replicas_isSet = true;
}

bool OAIIndexDefinition::is_replicas_Set() const{
    return m_replicas_isSet;
}

bool OAIIndexDefinition::is_replicas_Valid() const{
    return m_replicas_isValid;
}

QString OAIIndexDefinition::getSourceCollection() const {
    return m_source_collection;
}
void OAIIndexDefinition::setSourceCollection(const QString &source_collection) {
    m_source_collection = source_collection;
    m_source_collection_isSet = true;
}

bool OAIIndexDefinition::is_source_collection_Set() const{
    return m_source_collection_isSet;
}

bool OAIIndexDefinition::is_source_collection_Valid() const{
    return m_source_collection_isValid;
}

bool OAIIndexDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_collection_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndexDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dimension_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
