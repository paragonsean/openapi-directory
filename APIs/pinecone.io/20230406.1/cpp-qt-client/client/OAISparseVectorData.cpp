/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISparseVectorData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISparseVectorData::OAISparseVectorData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISparseVectorData::OAISparseVectorData() {
    this->initializeModel();
}

OAISparseVectorData::~OAISparseVectorData() {}

void OAISparseVectorData::initializeModel() {

    m_indices_isSet = false;
    m_indices_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAISparseVectorData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISparseVectorData::fromJsonObject(QJsonObject json) {

    m_indices_isValid = ::OpenAPI::fromJsonValue(m_indices, json[QString("indices")]);
    m_indices_isSet = !json[QString("indices")].isNull() && m_indices_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAISparseVectorData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISparseVectorData::asJsonObject() const {
    QJsonObject obj;
    if (m_indices.size() > 0) {
        obj.insert(QString("indices"), ::OpenAPI::toJsonValue(m_indices));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList<qint64> OAISparseVectorData::getIndices() const {
    return m_indices;
}
void OAISparseVectorData::setIndices(const QList<qint64> &indices) {
    m_indices = indices;
    m_indices_isSet = true;
}

bool OAISparseVectorData::is_indices_Set() const{
    return m_indices_isSet;
}

bool OAISparseVectorData::is_indices_Valid() const{
    return m_indices_isValid;
}

QList<float> OAISparseVectorData::getValues() const {
    return m_values;
}
void OAISparseVectorData::setValues(const QList<float> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAISparseVectorData::is_values_Set() const{
    return m_values_isSet;
}

bool OAISparseVectorData::is_values_Valid() const{
    return m_values_isValid;
}

bool OAISparseVectorData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_indices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISparseVectorData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_indices_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
