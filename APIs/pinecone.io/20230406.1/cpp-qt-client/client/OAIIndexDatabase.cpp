/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndexDatabase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndexDatabase::OAIIndexDatabase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndexDatabase::OAIIndexDatabase() {
    this->initializeModel();
}

OAIIndexDatabase::~OAIIndexDatabase() {}

void OAIIndexDatabase::initializeModel() {

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pod_type_isSet = false;
    m_pod_type_isValid = false;

    m_pods_isSet = false;
    m_pods_isValid = false;

    m_replicas_isSet = false;
    m_replicas_isValid = false;

    m_shards_isSet = false;
    m_shards_isValid = false;
}

void OAIIndexDatabase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndexDatabase::fromJsonObject(QJsonObject json) {

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pod_type_isValid = ::OpenAPI::fromJsonValue(m_pod_type, json[QString("pod_type")]);
    m_pod_type_isSet = !json[QString("pod_type")].isNull() && m_pod_type_isValid;

    m_pods_isValid = ::OpenAPI::fromJsonValue(m_pods, json[QString("pods")]);
    m_pods_isSet = !json[QString("pods")].isNull() && m_pods_isValid;

    m_replicas_isValid = ::OpenAPI::fromJsonValue(m_replicas, json[QString("replicas")]);
    m_replicas_isSet = !json[QString("replicas")].isNull() && m_replicas_isValid;

    m_shards_isValid = ::OpenAPI::fromJsonValue(m_shards, json[QString("shards")]);
    m_shards_isSet = !json[QString("shards")].isNull() && m_shards_isValid;
}

QString OAIIndexDatabase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndexDatabase::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_isSet) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pod_type.isSet()) {
        obj.insert(QString("pod_type"), ::OpenAPI::toJsonValue(m_pod_type));
    }
    if (m_pods_isSet) {
        obj.insert(QString("pods"), ::OpenAPI::toJsonValue(m_pods));
    }
    if (m_replicas_isSet) {
        obj.insert(QString("replicas"), ::OpenAPI::toJsonValue(m_replicas));
    }
    if (m_shards_isSet) {
        obj.insert(QString("shards"), ::OpenAPI::toJsonValue(m_shards));
    }
    return obj;
}

qint32 OAIIndexDatabase::getDimension() const {
    return m_dimension;
}
void OAIIndexDatabase::setDimension(const qint32 &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIIndexDatabase::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIIndexDatabase::is_dimension_Valid() const{
    return m_dimension_isValid;
}

OAIIndexMetric OAIIndexDatabase::getMetric() const {
    return m_metric;
}
void OAIIndexDatabase::setMetric(const OAIIndexMetric &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIIndexDatabase::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIIndexDatabase::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAIIndexDatabase::getName() const {
    return m_name;
}
void OAIIndexDatabase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIndexDatabase::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIndexDatabase::is_name_Valid() const{
    return m_name_isValid;
}

OAIPodType OAIIndexDatabase::getPodType() const {
    return m_pod_type;
}
void OAIIndexDatabase::setPodType(const OAIPodType &pod_type) {
    m_pod_type = pod_type;
    m_pod_type_isSet = true;
}

bool OAIIndexDatabase::is_pod_type_Set() const{
    return m_pod_type_isSet;
}

bool OAIIndexDatabase::is_pod_type_Valid() const{
    return m_pod_type_isValid;
}

qint32 OAIIndexDatabase::getPods() const {
    return m_pods;
}
void OAIIndexDatabase::setPods(const qint32 &pods) {
    m_pods = pods;
    m_pods_isSet = true;
}

bool OAIIndexDatabase::is_pods_Set() const{
    return m_pods_isSet;
}

bool OAIIndexDatabase::is_pods_Valid() const{
    return m_pods_isValid;
}

qint32 OAIIndexDatabase::getReplicas() const {
    return m_replicas;
}
void OAIIndexDatabase::setReplicas(const qint32 &replicas) {
    m_replicas = replicas;
    m_replicas_isSet = true;
}

bool OAIIndexDatabase::is_replicas_Set() const{
    return m_replicas_isSet;
}

bool OAIIndexDatabase::is_replicas_Valid() const{
    return m_replicas_isValid;
}

qint32 OAIIndexDatabase::getShards() const {
    return m_shards;
}
void OAIIndexDatabase::setShards(const qint32 &shards) {
    m_shards = shards;
    m_shards_isSet = true;
}

bool OAIIndexDatabase::is_shards_Set() const{
    return m_shards_isSet;
}

bool OAIIndexDatabase::is_shards_Valid() const{
    return m_shards_isValid;
}

bool OAIIndexDatabase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pods_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shards_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndexDatabase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
