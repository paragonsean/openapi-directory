/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndexState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndexState::OAIIndexState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndexState::OAIIndexState() {
    this->initializeModel();
}

OAIIndexState::~OAIIndexState() {}

void OAIIndexState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIIndexState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIIndexState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Initializing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIndexState::INITIALIZING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ScalingUp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIndexState::SCALINGUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ScalingDown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIndexState::SCALINGDOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terminating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIndexState::TERMINATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ready", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIndexState::READY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIIndexState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIIndexState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIIndexState::INITIALIZING:
            val = "Initializing";
            break;
        case eOAIIndexState::SCALINGUP:
            val = "ScalingUp";
            break;
        case eOAIIndexState::SCALINGDOWN:
            val = "ScalingDown";
            break;
        case eOAIIndexState::TERMINATING:
            val = "Terminating";
            break;
        case eOAIIndexState::READY:
            val = "Ready";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIIndexState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIIndexState::eOAIIndexState OAIIndexState::getValue() const {
    return m_value;
}

void OAIIndexState::setValue(const OAIIndexState::eOAIIndexState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIIndexState::isSet() const {
    
    return m_value_isSet;
}

bool OAIIndexState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
