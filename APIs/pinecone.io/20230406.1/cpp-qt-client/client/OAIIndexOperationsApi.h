/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIndexOperationsApi_H
#define OAI_OAIIndexOperationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICollection.h"
#include "OAICollectionDefinition.h"
#include "OAIIndex.h"
#include "OAIIndexConfiguration.h"
#include "OAIIndexDefinition.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIndexOperationsApi : public QObject {
    Q_OBJECT

public:
    OAIIndexOperationsApi(const int timeOut = 0);
    ~OAIIndexOperationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  index_name QString [required]
    * @param[in]  oai_index_configuration OAIIndexConfiguration [required]
    */
    virtual void configureIndex(const QString &index_name, const OAIIndexConfiguration &oai_index_configuration);

    /**
    * @param[in]  oai_collection_definition OAICollectionDefinition [required]
    */
    virtual void createCollection(const OAICollectionDefinition &oai_collection_definition);

    /**
    * @param[in]  oai_index_definition OAIIndexDefinition [required]
    */
    virtual void createIndex(const OAIIndexDefinition &oai_index_definition);

    /**
    * @param[in]  collection_name QString [required]
    */
    virtual void deleteCollection(const QString &collection_name);

    /**
    * @param[in]  index_name QString [required]
    */
    virtual void deleteIndex(const QString &index_name);

    /**
    * @param[in]  collection_name QString [required]
    */
    virtual void describeCollection(const QString &collection_name);

    /**
    * @param[in]  index_name QString [required]
    */
    virtual void describeIndex(const QString &index_name);


    virtual void listCollections();


    virtual void listIndexes();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void configureIndexCallback(OAIHttpRequestWorker *worker);
    void createCollectionCallback(OAIHttpRequestWorker *worker);
    void createIndexCallback(OAIHttpRequestWorker *worker);
    void deleteCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteIndexCallback(OAIHttpRequestWorker *worker);
    void describeCollectionCallback(OAIHttpRequestWorker *worker);
    void describeIndexCallback(OAIHttpRequestWorker *worker);
    void listCollectionsCallback(OAIHttpRequestWorker *worker);
    void listIndexesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void configureIndexSignal();
    void createCollectionSignal();
    void createIndexSignal();
    void deleteCollectionSignal();
    void deleteIndexSignal();
    void describeCollectionSignal(OAICollection summary);
    void describeIndexSignal(OAIIndex summary);
    void listCollectionsSignal(QList<QString> summary);
    void listIndexesSignal(QList<QString> summary);


    void configureIndexSignalFull(OAIHttpRequestWorker *worker);
    void createCollectionSignalFull(OAIHttpRequestWorker *worker);
    void createIndexSignalFull(OAIHttpRequestWorker *worker);
    void deleteCollectionSignalFull(OAIHttpRequestWorker *worker);
    void deleteIndexSignalFull(OAIHttpRequestWorker *worker);
    void describeCollectionSignalFull(OAIHttpRequestWorker *worker, OAICollection summary);
    void describeIndexSignalFull(OAIHttpRequestWorker *worker, OAIIndex summary);
    void listCollectionsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void listIndexesSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);

    Q_DECL_DEPRECATED_X("Use configureIndexSignalError() instead")
    void configureIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void configureIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCollectionSignalError() instead")
    void createCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIndexSignalError() instead")
    void createIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCollectionSignalError() instead")
    void deleteCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIndexSignalError() instead")
    void deleteIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCollectionSignalError() instead")
    void describeCollectionSignalE(OAICollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCollectionSignalError(OAICollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeIndexSignalError() instead")
    void describeIndexSignalE(OAIIndex summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeIndexSignalError(OAIIndex summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCollectionsSignalError() instead")
    void listCollectionsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCollectionsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIndexesSignalError() instead")
    void listIndexesSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIndexesSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use configureIndexSignalErrorFull() instead")
    void configureIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configureIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCollectionSignalErrorFull() instead")
    void createCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createIndexSignalErrorFull() instead")
    void createIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCollectionSignalErrorFull() instead")
    void deleteCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIndexSignalErrorFull() instead")
    void deleteIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCollectionSignalErrorFull() instead")
    void describeCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeIndexSignalErrorFull() instead")
    void describeIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCollectionsSignalErrorFull() instead")
    void listCollectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCollectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIndexesSignalErrorFull() instead")
    void listIndexesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIndexesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
