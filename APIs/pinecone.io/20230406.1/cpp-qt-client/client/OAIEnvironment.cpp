/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironment::OAIEnvironment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironment::OAIEnvironment() {
    this->initializeModel();
}

OAIEnvironment::~OAIEnvironment() {}

void OAIEnvironment::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEnvironment::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEnvironment::fromJson(QString jsonString) {
    
    if ( jsonString.compare("us-west1-gcp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironment::US_WEST1_GCP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("us-west4-gcp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironment::US_WEST4_GCP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("us-central1-gcp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironment::US_CENTRAL1_GCP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("us-east1-gcp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironment::US_EAST1_GCP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("us-east4-gcp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironment::US_EAST4_GCP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("eu-west1-gcp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironment::EU_WEST1_GCP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("us-east1-aws", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEnvironment::US_EAST1_AWS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEnvironment::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEnvironment::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEnvironment::US_WEST1_GCP:
            val = "us-west1-gcp";
            break;
        case eOAIEnvironment::US_WEST4_GCP:
            val = "us-west4-gcp";
            break;
        case eOAIEnvironment::US_CENTRAL1_GCP:
            val = "us-central1-gcp";
            break;
        case eOAIEnvironment::US_EAST1_GCP:
            val = "us-east1-gcp";
            break;
        case eOAIEnvironment::US_EAST4_GCP:
            val = "us-east4-gcp";
            break;
        case eOAIEnvironment::EU_WEST1_GCP:
            val = "eu-west1-gcp";
            break;
        case eOAIEnvironment::US_EAST1_AWS:
            val = "us-east1-aws";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEnvironment::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEnvironment::eOAIEnvironment OAIEnvironment::getValue() const {
    return m_value;
}

void OAIEnvironment::setValue(const OAIEnvironment::eOAIEnvironment& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEnvironment::isSet() const {
    
    return m_value_isSet;
}

bool OAIEnvironment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
