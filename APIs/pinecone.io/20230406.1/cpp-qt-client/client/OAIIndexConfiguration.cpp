/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndexConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndexConfiguration::OAIIndexConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndexConfiguration::OAIIndexConfiguration() {
    this->initializeModel();
}

OAIIndexConfiguration::~OAIIndexConfiguration() {}

void OAIIndexConfiguration::initializeModel() {

    m_pod_type_isSet = false;
    m_pod_type_isValid = false;

    m_replicas_isSet = false;
    m_replicas_isValid = false;
}

void OAIIndexConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndexConfiguration::fromJsonObject(QJsonObject json) {

    m_pod_type_isValid = ::OpenAPI::fromJsonValue(m_pod_type, json[QString("pod_type")]);
    m_pod_type_isSet = !json[QString("pod_type")].isNull() && m_pod_type_isValid;

    m_replicas_isValid = ::OpenAPI::fromJsonValue(m_replicas, json[QString("replicas")]);
    m_replicas_isSet = !json[QString("replicas")].isNull() && m_replicas_isValid;
}

QString OAIIndexConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndexConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_pod_type.isSet()) {
        obj.insert(QString("pod_type"), ::OpenAPI::toJsonValue(m_pod_type));
    }
    if (m_replicas_isSet) {
        obj.insert(QString("replicas"), ::OpenAPI::toJsonValue(m_replicas));
    }
    return obj;
}

OAIPodType OAIIndexConfiguration::getPodType() const {
    return m_pod_type;
}
void OAIIndexConfiguration::setPodType(const OAIPodType &pod_type) {
    m_pod_type = pod_type;
    m_pod_type_isSet = true;
}

bool OAIIndexConfiguration::is_pod_type_Set() const{
    return m_pod_type_isSet;
}

bool OAIIndexConfiguration::is_pod_type_Valid() const{
    return m_pod_type_isValid;
}

qint32 OAIIndexConfiguration::getReplicas() const {
    return m_replicas;
}
void OAIIndexConfiguration::setReplicas(const qint32 &replicas) {
    m_replicas = replicas;
    m_replicas_isSet = true;
}

bool OAIIndexConfiguration::is_replicas_Set() const{
    return m_replicas_isSet;
}

bool OAIIndexConfiguration::is_replicas_Valid() const{
    return m_replicas_isValid;
}

bool OAIIndexConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pod_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndexConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
