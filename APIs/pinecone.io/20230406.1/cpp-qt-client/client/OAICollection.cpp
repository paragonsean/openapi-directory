/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollection::OAICollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollection::OAICollection() {
    this->initializeModel();
}

OAICollection::~OAICollection() {}

void OAICollection::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollection::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollection::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICollection::getName() const {
    return m_name;
}
void OAICollection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICollection::is_name_Set() const{
    return m_name_isSet;
}

bool OAICollection::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAICollection::getSize() const {
    return m_size;
}
void OAICollection::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAICollection::is_size_Set() const{
    return m_size_isSet;
}

bool OAICollection::is_size_Valid() const{
    return m_size_isValid;
}

QString OAICollection::getStatus() const {
    return m_status;
}
void OAICollection::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICollection::is_status_Set() const{
    return m_status_isSet;
}

bool OAICollection::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_size_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
