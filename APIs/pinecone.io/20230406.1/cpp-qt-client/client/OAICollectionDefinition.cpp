/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectionDefinition::OAICollectionDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectionDefinition::OAICollectionDefinition() {
    this->initializeModel();
}

OAICollectionDefinition::~OAICollectionDefinition() {}

void OAICollectionDefinition::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAICollectionDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectionDefinition::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAICollectionDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectionDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAICollectionDefinition::getName() const {
    return m_name;
}
void OAICollectionDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICollectionDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAICollectionDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICollectionDefinition::getSource() const {
    return m_source;
}
void OAICollectionDefinition::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICollectionDefinition::is_source_Set() const{
    return m_source_isSet;
}

bool OAICollectionDefinition::is_source_Valid() const{
    return m_source_isValid;
}

bool OAICollectionDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectionDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
