/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeIndexStatsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeIndexStatsResponse::OAIDescribeIndexStatsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeIndexStatsResponse::OAIDescribeIndexStatsResponse() {
    this->initializeModel();
}

OAIDescribeIndexStatsResponse::~OAIDescribeIndexStatsResponse() {}

void OAIDescribeIndexStatsResponse::initializeModel() {

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_index_fullness_isSet = false;
    m_index_fullness_isValid = false;

    m_namespaces_isSet = false;
    m_namespaces_isValid = false;

    m_total_vector_count_isSet = false;
    m_total_vector_count_isValid = false;
}

void OAIDescribeIndexStatsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeIndexStatsResponse::fromJsonObject(QJsonObject json) {

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_index_fullness_isValid = ::OpenAPI::fromJsonValue(m_index_fullness, json[QString("indexFullness")]);
    m_index_fullness_isSet = !json[QString("indexFullness")].isNull() && m_index_fullness_isValid;

    m_namespaces_isValid = ::OpenAPI::fromJsonValue(m_namespaces, json[QString("namespaces")]);
    m_namespaces_isSet = !json[QString("namespaces")].isNull() && m_namespaces_isValid;

    m_total_vector_count_isValid = ::OpenAPI::fromJsonValue(m_total_vector_count, json[QString("totalVectorCount")]);
    m_total_vector_count_isSet = !json[QString("totalVectorCount")].isNull() && m_total_vector_count_isValid;
}

QString OAIDescribeIndexStatsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeIndexStatsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_isSet) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_index_fullness_isSet) {
        obj.insert(QString("indexFullness"), ::OpenAPI::toJsonValue(m_index_fullness));
    }
    if (m_namespaces.size() > 0) {
        obj.insert(QString("namespaces"), ::OpenAPI::toJsonValue(m_namespaces));
    }
    if (m_total_vector_count_isSet) {
        obj.insert(QString("totalVectorCount"), ::OpenAPI::toJsonValue(m_total_vector_count));
    }
    return obj;
}

qint32 OAIDescribeIndexStatsResponse::getDimension() const {
    return m_dimension;
}
void OAIDescribeIndexStatsResponse::setDimension(const qint32 &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIDescribeIndexStatsResponse::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIDescribeIndexStatsResponse::is_dimension_Valid() const{
    return m_dimension_isValid;
}

float OAIDescribeIndexStatsResponse::getIndexFullness() const {
    return m_index_fullness;
}
void OAIDescribeIndexStatsResponse::setIndexFullness(const float &index_fullness) {
    m_index_fullness = index_fullness;
    m_index_fullness_isSet = true;
}

bool OAIDescribeIndexStatsResponse::is_index_fullness_Set() const{
    return m_index_fullness_isSet;
}

bool OAIDescribeIndexStatsResponse::is_index_fullness_Valid() const{
    return m_index_fullness_isValid;
}

QMap<QString, OAIIndexNamespaceStats> OAIDescribeIndexStatsResponse::getNamespaces() const {
    return m_namespaces;
}
void OAIDescribeIndexStatsResponse::setNamespaces(const QMap<QString, OAIIndexNamespaceStats> &namespaces) {
    m_namespaces = namespaces;
    m_namespaces_isSet = true;
}

bool OAIDescribeIndexStatsResponse::is_namespaces_Set() const{
    return m_namespaces_isSet;
}

bool OAIDescribeIndexStatsResponse::is_namespaces_Valid() const{
    return m_namespaces_isValid;
}

qint64 OAIDescribeIndexStatsResponse::getTotalVectorCount() const {
    return m_total_vector_count;
}
void OAIDescribeIndexStatsResponse::setTotalVectorCount(const qint64 &total_vector_count) {
    m_total_vector_count = total_vector_count;
    m_total_vector_count_isSet = true;
}

bool OAIDescribeIndexStatsResponse::is_total_vector_count_Set() const{
    return m_total_vector_count_isSet;
}

bool OAIDescribeIndexStatsResponse::is_total_vector_count_Valid() const{
    return m_total_vector_count_isValid;
}

bool OAIDescribeIndexStatsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_fullness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_vector_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeIndexStatsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
