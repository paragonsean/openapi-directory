/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRequest::OAIUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRequest::OAIUpdateRequest() {
    this->initializeModel();
}

OAIUpdateRequest::~OAIUpdateRequest() {}

void OAIUpdateRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_set_metadata_isSet = false;
    m_set_metadata_isValid = false;

    m_sparse_values_isSet = false;
    m_sparse_values_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_set_metadata_isValid = ::OpenAPI::fromJsonValue(m_set_metadata, json[QString("setMetadata")]);
    m_set_metadata_isSet = !json[QString("setMetadata")].isNull() && m_set_metadata_isValid;

    m_sparse_values_isValid = ::OpenAPI::fromJsonValue(m_sparse_values, json[QString("sparseValues")]);
    m_sparse_values_isSet = !json[QString("sparseValues")].isNull() && m_sparse_values_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_set_metadata.size() > 0) {
        obj.insert(QString("setMetadata"), ::OpenAPI::toJsonValue(m_set_metadata));
    }
    if (m_sparse_values.isSet()) {
        obj.insert(QString("sparseValues"), ::OpenAPI::toJsonValue(m_sparse_values));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIUpdateRequest::getId() const {
    return m_id;
}
void OAIUpdateRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdateRequest::getRNamespace() const {
    return m_r_namespace;
}
void OAIUpdateRequest::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIUpdateRequest::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIUpdateRequest::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QMap<QString, QJsonValue> OAIUpdateRequest::getSetMetadata() const {
    return m_set_metadata;
}
void OAIUpdateRequest::setSetMetadata(const QMap<QString, QJsonValue> &set_metadata) {
    m_set_metadata = set_metadata;
    m_set_metadata_isSet = true;
}

bool OAIUpdateRequest::is_set_metadata_Set() const{
    return m_set_metadata_isSet;
}

bool OAIUpdateRequest::is_set_metadata_Valid() const{
    return m_set_metadata_isValid;
}

OAISparseVectorData OAIUpdateRequest::getSparseValues() const {
    return m_sparse_values;
}
void OAIUpdateRequest::setSparseValues(const OAISparseVectorData &sparse_values) {
    m_sparse_values = sparse_values;
    m_sparse_values_isSet = true;
}

bool OAIUpdateRequest::is_sparse_values_Set() const{
    return m_sparse_values_isSet;
}

bool OAIUpdateRequest::is_sparse_values_Valid() const{
    return m_sparse_values_isValid;
}

QList<float> OAIUpdateRequest::getValues() const {
    return m_values;
}
void OAIUpdateRequest::setValues(const QList<float> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIUpdateRequest::is_values_Set() const{
    return m_values_isSet;
}

bool OAIUpdateRequest::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sparse_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
