/**
 * Pinecone API
 * Pinecone is a vector database. This is an unofficial, community-managed OpenAPI spec that (should) accurately model the Pinecone API. This project was developed independent of and is unaffiliated with Pinecone Systems. Users should switch to the official API spec, if and when Pinecone releases it.
 *
 * The version of the OpenAPI document: 20230406.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodType::OAIPodType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodType::OAIPodType() {
    this->initializeModel();
}

OAIPodType::~OAIPodType() {}

void OAIPodType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPodType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPodType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("s1.x1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPodType::S1_X1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("s1.x2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPodType::S1_X2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("s1.x4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPodType::S1_X4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("s1.x8", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPodType::S1_X8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("p1.x1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPodType::P1_X1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("p1.x2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPodType::P1_X2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("p1.x4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPodType::P1_X4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("p1.x8", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPodType::P1_X8;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("p2.x1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPodType::P2_X1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("p2.x2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPodType::P2_X2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("p2.x4", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPodType::P2_X4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("p2.x8", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPodType::P2_X8;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPodType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPodType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPodType::S1_X1:
            val = "s1.x1";
            break;
        case eOAIPodType::S1_X2:
            val = "s1.x2";
            break;
        case eOAIPodType::S1_X4:
            val = "s1.x4";
            break;
        case eOAIPodType::S1_X8:
            val = "s1.x8";
            break;
        case eOAIPodType::P1_X1:
            val = "p1.x1";
            break;
        case eOAIPodType::P1_X2:
            val = "p1.x2";
            break;
        case eOAIPodType::P1_X4:
            val = "p1.x4";
            break;
        case eOAIPodType::P1_X8:
            val = "p1.x8";
            break;
        case eOAIPodType::P2_X1:
            val = "p2.x1";
            break;
        case eOAIPodType::P2_X2:
            val = "p2.x2";
            break;
        case eOAIPodType::P2_X4:
            val = "p2.x4";
            break;
        case eOAIPodType::P2_X8:
            val = "p2.x8";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPodType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPodType::eOAIPodType OAIPodType::getValue() const {
    return m_value;
}

void OAIPodType::setValue(const OAIPodType::eOAIPodType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPodType::isSet() const {
    
    return m_value_isSet;
}

bool OAIPodType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
