/**
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisit::OAIVisit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisit::OAIVisit() {
    this->initializeModel();
}

OAIVisit::~OAIVisit() {}

void OAIVisit::initializeModel() {

    m_last_pageview_id_isSet = false;
    m_last_pageview_id_isValid = false;

    m_pageview_id_isSet = false;
    m_pageview_id_isValid = false;

    m_visit_id_isSet = false;
    m_visit_id_isValid = false;

    m_visitor_id_isSet = false;
    m_visitor_id_isValid = false;
}

void OAIVisit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisit::fromJsonObject(QJsonObject json) {

    m_last_pageview_id_isValid = ::OpenAPI::fromJsonValue(m_last_pageview_id, json[QString("last_pageview_id")]);
    m_last_pageview_id_isSet = !json[QString("last_pageview_id")].isNull() && m_last_pageview_id_isValid;

    m_pageview_id_isValid = ::OpenAPI::fromJsonValue(m_pageview_id, json[QString("pageview_id")]);
    m_pageview_id_isSet = !json[QString("pageview_id")].isNull() && m_pageview_id_isValid;

    m_visit_id_isValid = ::OpenAPI::fromJsonValue(m_visit_id, json[QString("visit_id")]);
    m_visit_id_isSet = !json[QString("visit_id")].isNull() && m_visit_id_isValid;

    m_visitor_id_isValid = ::OpenAPI::fromJsonValue(m_visitor_id, json[QString("visitor_id")]);
    m_visitor_id_isSet = !json[QString("visitor_id")].isNull() && m_visitor_id_isValid;
}

QString OAIVisit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisit::asJsonObject() const {
    QJsonObject obj;
    if (m_last_pageview_id_isSet) {
        obj.insert(QString("last_pageview_id"), ::OpenAPI::toJsonValue(m_last_pageview_id));
    }
    if (m_pageview_id_isSet) {
        obj.insert(QString("pageview_id"), ::OpenAPI::toJsonValue(m_pageview_id));
    }
    if (m_visit_id_isSet) {
        obj.insert(QString("visit_id"), ::OpenAPI::toJsonValue(m_visit_id));
    }
    if (m_visitor_id_isSet) {
        obj.insert(QString("visitor_id"), ::OpenAPI::toJsonValue(m_visitor_id));
    }
    return obj;
}

QString OAIVisit::getLastPageviewId() const {
    return m_last_pageview_id;
}
void OAIVisit::setLastPageviewId(const QString &last_pageview_id) {
    m_last_pageview_id = last_pageview_id;
    m_last_pageview_id_isSet = true;
}

bool OAIVisit::is_last_pageview_id_Set() const{
    return m_last_pageview_id_isSet;
}

bool OAIVisit::is_last_pageview_id_Valid() const{
    return m_last_pageview_id_isValid;
}

QString OAIVisit::getPageviewId() const {
    return m_pageview_id;
}
void OAIVisit::setPageviewId(const QString &pageview_id) {
    m_pageview_id = pageview_id;
    m_pageview_id_isSet = true;
}

bool OAIVisit::is_pageview_id_Set() const{
    return m_pageview_id_isSet;
}

bool OAIVisit::is_pageview_id_Valid() const{
    return m_pageview_id_isValid;
}

QString OAIVisit::getVisitId() const {
    return m_visit_id;
}
void OAIVisit::setVisitId(const QString &visit_id) {
    m_visit_id = visit_id;
    m_visit_id_isSet = true;
}

bool OAIVisit::is_visit_id_Set() const{
    return m_visit_id_isSet;
}

bool OAIVisit::is_visit_id_Valid() const{
    return m_visit_id_isValid;
}

QString OAIVisit::getVisitorId() const {
    return m_visitor_id;
}
void OAIVisit::setVisitorId(const QString &visitor_id) {
    m_visitor_id = visitor_id;
    m_visitor_id_isSet = true;
}

bool OAIVisit::is_visitor_id_Set() const{
    return m_visitor_id_isSet;
}

bool OAIVisit::is_visitor_id_Valid() const{
    return m_visitor_id_isValid;
}

bool OAIVisit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_pageview_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pageview_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visitor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_last_pageview_id_isValid && m_pageview_id_isValid && m_visit_id_isValid && m_visitor_id_isValid && true;
}

} // namespace OpenAPI
