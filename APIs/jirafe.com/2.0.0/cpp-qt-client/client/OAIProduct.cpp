/**
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_ancestors_isSet = false;
    m_ancestors_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_base_product_isSet = false;
    m_base_product_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_catalog_isSet = false;
    m_catalog_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_change_date_isSet = false;
    m_change_date_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_is_order_isSet = false;
    m_is_order_isValid = false;

    m_is_sku_isSet = false;
    m_is_sku_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_vendors_isSet = false;
    m_vendors_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_ancestors_isValid = ::OpenAPI::fromJsonValue(m_ancestors, json[QString("ancestors")]);
    m_ancestors_isSet = !json[QString("ancestors")].isNull() && m_ancestors_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_base_product_isValid = ::OpenAPI::fromJsonValue(m_base_product, json[QString("base_product")]);
    m_base_product_isSet = !json[QString("base_product")].isNull() && m_base_product_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_catalog_isValid = ::OpenAPI::fromJsonValue(m_catalog, json[QString("catalog")]);
    m_catalog_isSet = !json[QString("catalog")].isNull() && m_catalog_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_change_date_isValid = ::OpenAPI::fromJsonValue(m_change_date, json[QString("change_date")]);
    m_change_date_isSet = !json[QString("change_date")].isNull() && m_change_date_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("create_date")]);
    m_create_date_isSet = !json[QString("create_date")].isNull() && m_create_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_is_order_isValid = ::OpenAPI::fromJsonValue(m_is_order, json[QString("is_order")]);
    m_is_order_isSet = !json[QString("is_order")].isNull() && m_is_order_isValid;

    m_is_sku_isValid = ::OpenAPI::fromJsonValue(m_is_sku, json[QString("is_sku")]);
    m_is_sku_isSet = !json[QString("is_sku")].isNull() && m_is_sku_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;

    m_vendors_isValid = ::OpenAPI::fromJsonValue(m_vendors, json[QString("vendors")]);
    m_vendors_isSet = !json[QString("vendors")].isNull() && m_vendors_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_ancestors.size() > 0) {
        obj.insert(QString("ancestors"), ::OpenAPI::toJsonValue(m_ancestors));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_base_product.isSet()) {
        obj.insert(QString("base_product"), ::OpenAPI::toJsonValue(m_base_product));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_catalog.isSet()) {
        obj.insert(QString("catalog"), ::OpenAPI::toJsonValue(m_catalog));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_change_date_isSet) {
        obj.insert(QString("change_date"), ::OpenAPI::toJsonValue(m_change_date));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("create_date"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_is_order_isSet) {
        obj.insert(QString("is_order"), ::OpenAPI::toJsonValue(m_is_order));
    }
    if (m_is_sku_isSet) {
        obj.insert(QString("is_sku"), ::OpenAPI::toJsonValue(m_is_sku));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_urls.isSet()) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_vendors.size() > 0) {
        obj.insert(QString("vendors"), ::OpenAPI::toJsonValue(m_vendors));
    }
    return obj;
}

QList<QString> OAIProduct::getAncestors() const {
    return m_ancestors;
}
void OAIProduct::setAncestors(const QList<QString> &ancestors) {
    m_ancestors = ancestors;
    m_ancestors_isSet = true;
}

bool OAIProduct::is_ancestors_Set() const{
    return m_ancestors_isSet;
}

bool OAIProduct::is_ancestors_Valid() const{
    return m_ancestors_isValid;
}

QSet<OAIAttribute> OAIProduct::getAttributes() const {
    return m_attributes;
}
void OAIProduct::setAttributes(const QSet<OAIAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIProduct::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIProduct::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIBaseProduct OAIProduct::getBaseProduct() const {
    return m_base_product;
}
void OAIProduct::setBaseProduct(const OAIBaseProduct &base_product) {
    m_base_product = base_product;
    m_base_product_isSet = true;
}

bool OAIProduct::is_base_product_Set() const{
    return m_base_product_isSet;
}

bool OAIProduct::is_base_product_Valid() const{
    return m_base_product_isValid;
}

QString OAIProduct::getBrand() const {
    return m_brand;
}
void OAIProduct::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIProduct::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIProduct::is_brand_Valid() const{
    return m_brand_isValid;
}

OAICatalog OAIProduct::getCatalog() const {
    return m_catalog;
}
void OAIProduct::setCatalog(const OAICatalog &catalog) {
    m_catalog = catalog;
    m_catalog_isSet = true;
}

bool OAIProduct::is_catalog_Set() const{
    return m_catalog_isSet;
}

bool OAIProduct::is_catalog_Valid() const{
    return m_catalog_isValid;
}

QSet<OAICategory> OAIProduct::getCategories() const {
    return m_categories;
}
void OAIProduct::setCategories(const QSet<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIProduct::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIProduct::is_categories_Valid() const{
    return m_categories_isValid;
}

QDateTime OAIProduct::getChangeDate() const {
    return m_change_date;
}
void OAIProduct::setChangeDate(const QDateTime &change_date) {
    m_change_date = change_date;
    m_change_date_isSet = true;
}

bool OAIProduct::is_change_date_Set() const{
    return m_change_date_isSet;
}

bool OAIProduct::is_change_date_Valid() const{
    return m_change_date_isValid;
}

QString OAIProduct::getCode() const {
    return m_code;
}
void OAIProduct::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIProduct::is_code_Set() const{
    return m_code_isSet;
}

bool OAIProduct::is_code_Valid() const{
    return m_code_isValid;
}

QDateTime OAIProduct::getCreateDate() const {
    return m_create_date;
}
void OAIProduct::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIProduct::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIProduct::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAIProduct::getId() const {
    return m_id;
}
void OAIProduct::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProduct::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProduct::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIObject> OAIProduct::getImages() const {
    return m_images;
}
void OAIProduct::setImages(const QList<OAIObject> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIProduct::is_images_Set() const{
    return m_images_isSet;
}

bool OAIProduct::is_images_Valid() const{
    return m_images_isValid;
}

bool OAIProduct::isIsOrder() const {
    return m_is_order;
}
void OAIProduct::setIsOrder(const bool &is_order) {
    m_is_order = is_order;
    m_is_order_isSet = true;
}

bool OAIProduct::is_is_order_Set() const{
    return m_is_order_isSet;
}

bool OAIProduct::is_is_order_Valid() const{
    return m_is_order_isValid;
}

bool OAIProduct::isIsSku() const {
    return m_is_sku;
}
void OAIProduct::setIsSku(const bool &is_sku) {
    m_is_sku = is_sku;
    m_is_sku_isSet = true;
}

bool OAIProduct::is_is_sku_Set() const{
    return m_is_sku_isSet;
}

bool OAIProduct::is_is_sku_Valid() const{
    return m_is_sku_isValid;
}

QString OAIProduct::getName() const {
    return m_name;
}
void OAIProduct::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProduct::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProduct::is_name_Valid() const{
    return m_name_isValid;
}

double OAIProduct::getRating() const {
    return m_rating;
}
void OAIProduct::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIProduct::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIProduct::is_rating_Valid() const{
    return m_rating_isValid;
}

OAIUrl OAIProduct::getUrls() const {
    return m_urls;
}
void OAIProduct::setUrls(const OAIUrl &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIProduct::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIProduct::is_urls_Valid() const{
    return m_urls_isValid;
}

QList<OAIVendor> OAIProduct::getVendors() const {
    return m_vendors;
}
void OAIProduct::setVendors(const QList<OAIVendor> &vendors) {
    m_vendors = vendors;
    m_vendors_isSet = true;
}

bool OAIProduct::is_vendors_Set() const{
    return m_vendors_isSet;
}

bool OAIProduct::is_vendors_Valid() const{
    return m_vendors_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ancestors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_change_date_isValid && m_code_isValid && m_create_date_isValid && m_id_isValid && m_is_order_isValid && m_is_sku_isValid && true;
}

} // namespace OpenAPI
