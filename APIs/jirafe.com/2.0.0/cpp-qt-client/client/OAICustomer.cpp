/**
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer::OAICustomer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer::OAICustomer() {
    this->initializeModel();
}

OAICustomer::~OAICustomer() {}

void OAICustomer::initializeModel() {

    m_active_flag_isSet = false;
    m_active_flag_isValid = false;

    m_change_date_isSet = false;
    m_change_date_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_cookies_isSet = false;
    m_cookies_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_marketing_opt_in_isSet = false;
    m_marketing_opt_in_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;
}

void OAICustomer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer::fromJsonObject(QJsonObject json) {

    m_active_flag_isValid = ::OpenAPI::fromJsonValue(m_active_flag, json[QString("active_flag")]);
    m_active_flag_isSet = !json[QString("active_flag")].isNull() && m_active_flag_isValid;

    m_change_date_isValid = ::OpenAPI::fromJsonValue(m_change_date, json[QString("change_date")]);
    m_change_date_isSet = !json[QString("change_date")].isNull() && m_change_date_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_cookies_isValid = ::OpenAPI::fromJsonValue(m_cookies, json[QString("cookies")]);
    m_cookies_isSet = !json[QString("cookies")].isNull() && m_cookies_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("create_date")]);
    m_create_date_isSet = !json[QString("create_date")].isNull() && m_create_date_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_marketing_opt_in_isValid = ::OpenAPI::fromJsonValue(m_marketing_opt_in, json[QString("marketing_opt_in")]);
    m_marketing_opt_in_isSet = !json[QString("marketing_opt_in")].isNull() && m_marketing_opt_in_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;
}

QString OAICustomer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer::asJsonObject() const {
    QJsonObject obj;
    if (m_active_flag_isSet) {
        obj.insert(QString("active_flag"), ::OpenAPI::toJsonValue(m_active_flag));
    }
    if (m_change_date_isSet) {
        obj.insert(QString("change_date"), ::OpenAPI::toJsonValue(m_change_date));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_cookies_isSet) {
        obj.insert(QString("cookies"), ::OpenAPI::toJsonValue(m_cookies));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("create_date"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_marketing_opt_in_isSet) {
        obj.insert(QString("marketing_opt_in"), ::OpenAPI::toJsonValue(m_marketing_opt_in));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    return obj;
}

bool OAICustomer::isActiveFlag() const {
    return m_active_flag;
}
void OAICustomer::setActiveFlag(const bool &active_flag) {
    m_active_flag = active_flag;
    m_active_flag_isSet = true;
}

bool OAICustomer::is_active_flag_Set() const{
    return m_active_flag_isSet;
}

bool OAICustomer::is_active_flag_Valid() const{
    return m_active_flag_isValid;
}

QDateTime OAICustomer::getChangeDate() const {
    return m_change_date;
}
void OAICustomer::setChangeDate(const QDateTime &change_date) {
    m_change_date = change_date;
    m_change_date_isSet = true;
}

bool OAICustomer::is_change_date_Set() const{
    return m_change_date_isSet;
}

bool OAICustomer::is_change_date_Valid() const{
    return m_change_date_isValid;
}

QString OAICustomer::getCompany() const {
    return m_company;
}
void OAICustomer::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAICustomer::is_company_Set() const{
    return m_company_isSet;
}

bool OAICustomer::is_company_Valid() const{
    return m_company_isValid;
}

OAIObject OAICustomer::getCookies() const {
    return m_cookies;
}
void OAICustomer::setCookies(const OAIObject &cookies) {
    m_cookies = cookies;
    m_cookies_isSet = true;
}

bool OAICustomer::is_cookies_Set() const{
    return m_cookies_isSet;
}

bool OAICustomer::is_cookies_Valid() const{
    return m_cookies_isValid;
}

QDateTime OAICustomer::getCreateDate() const {
    return m_create_date;
}
void OAICustomer::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAICustomer::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAICustomer::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAICustomer::getDepartment() const {
    return m_department;
}
void OAICustomer::setDepartment(const QString &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAICustomer::is_department_Set() const{
    return m_department_isSet;
}

bool OAICustomer::is_department_Valid() const{
    return m_department_isValid;
}

QString OAICustomer::getEmail() const {
    return m_email;
}
void OAICustomer::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICustomer::is_email_Set() const{
    return m_email_isSet;
}

bool OAICustomer::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICustomer::getFirstName() const {
    return m_first_name;
}
void OAICustomer::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAICustomer::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAICustomer::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAICustomer::getId() const {
    return m_id;
}
void OAICustomer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomer::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICustomer::getLastName() const {
    return m_last_name;
}
void OAICustomer::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAICustomer::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAICustomer::is_last_name_Valid() const{
    return m_last_name_isValid;
}

bool OAICustomer::isMarketingOptIn() const {
    return m_marketing_opt_in;
}
void OAICustomer::setMarketingOptIn(const bool &marketing_opt_in) {
    m_marketing_opt_in = marketing_opt_in;
    m_marketing_opt_in_isSet = true;
}

bool OAICustomer::is_marketing_opt_in_Set() const{
    return m_marketing_opt_in_isSet;
}

bool OAICustomer::is_marketing_opt_in_Valid() const{
    return m_marketing_opt_in_isValid;
}

QString OAICustomer::getName() const {
    return m_name;
}
void OAICustomer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomer::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomer::getPhone() const {
    return m_phone;
}
void OAICustomer::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAICustomer::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAICustomer::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAICustomer::getPosition() const {
    return m_position;
}
void OAICustomer::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAICustomer::is_position_Set() const{
    return m_position_isSet;
}

bool OAICustomer::is_position_Valid() const{
    return m_position_isValid;
}

bool OAICustomer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_opt_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_change_date_isValid && m_create_date_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
