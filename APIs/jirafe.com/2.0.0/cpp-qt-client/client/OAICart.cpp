/**
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICart::OAICart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICart::OAICart() {
    this->initializeModel();
}

OAICart::~OAICart() {}

void OAICart::initializeModel() {

    m_cart_id_isSet = false;
    m_cart_id_isValid = false;

    m_change_date_isSet = false;
    m_change_date_isValid = false;

    m_cookies_isSet = false;
    m_cookies_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_previous_items_isSet = false;
    m_previous_items_isValid = false;

    m_subtotal_isSet = false;
    m_subtotal_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_discounts_isSet = false;
    m_total_discounts_isValid = false;

    m_total_payment_cost_isSet = false;
    m_total_payment_cost_isValid = false;

    m_total_shipping_isSet = false;
    m_total_shipping_isValid = false;

    m_total_tax_isSet = false;
    m_total_tax_isValid = false;

    m_visit_isSet = false;
    m_visit_isValid = false;
}

void OAICart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICart::fromJsonObject(QJsonObject json) {

    m_cart_id_isValid = ::OpenAPI::fromJsonValue(m_cart_id, json[QString("cart_id")]);
    m_cart_id_isSet = !json[QString("cart_id")].isNull() && m_cart_id_isValid;

    m_change_date_isValid = ::OpenAPI::fromJsonValue(m_change_date, json[QString("change_date")]);
    m_change_date_isSet = !json[QString("change_date")].isNull() && m_change_date_isValid;

    m_cookies_isValid = ::OpenAPI::fromJsonValue(m_cookies, json[QString("cookies")]);
    m_cookies_isSet = !json[QString("cookies")].isNull() && m_cookies_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("create_date")]);
    m_create_date_isSet = !json[QString("create_date")].isNull() && m_create_date_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_previous_items_isValid = ::OpenAPI::fromJsonValue(m_previous_items, json[QString("previous_items")]);
    m_previous_items_isSet = !json[QString("previous_items")].isNull() && m_previous_items_isValid;

    m_subtotal_isValid = ::OpenAPI::fromJsonValue(m_subtotal, json[QString("subtotal")]);
    m_subtotal_isSet = !json[QString("subtotal")].isNull() && m_subtotal_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_total_discounts_isValid = ::OpenAPI::fromJsonValue(m_total_discounts, json[QString("total_discounts")]);
    m_total_discounts_isSet = !json[QString("total_discounts")].isNull() && m_total_discounts_isValid;

    m_total_payment_cost_isValid = ::OpenAPI::fromJsonValue(m_total_payment_cost, json[QString("total_payment_cost")]);
    m_total_payment_cost_isSet = !json[QString("total_payment_cost")].isNull() && m_total_payment_cost_isValid;

    m_total_shipping_isValid = ::OpenAPI::fromJsonValue(m_total_shipping, json[QString("total_shipping")]);
    m_total_shipping_isSet = !json[QString("total_shipping")].isNull() && m_total_shipping_isValid;

    m_total_tax_isValid = ::OpenAPI::fromJsonValue(m_total_tax, json[QString("total_tax")]);
    m_total_tax_isSet = !json[QString("total_tax")].isNull() && m_total_tax_isValid;

    m_visit_isValid = ::OpenAPI::fromJsonValue(m_visit, json[QString("visit")]);
    m_visit_isSet = !json[QString("visit")].isNull() && m_visit_isValid;
}

QString OAICart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICart::asJsonObject() const {
    QJsonObject obj;
    if (m_cart_id_isSet) {
        obj.insert(QString("cart_id"), ::OpenAPI::toJsonValue(m_cart_id));
    }
    if (m_change_date_isSet) {
        obj.insert(QString("change_date"), ::OpenAPI::toJsonValue(m_change_date));
    }
    if (m_cookies_isSet) {
        obj.insert(QString("cookies"), ::OpenAPI::toJsonValue(m_cookies));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("create_date"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_previous_items.size() > 0) {
        obj.insert(QString("previous_items"), ::OpenAPI::toJsonValue(m_previous_items));
    }
    if (m_subtotal_isSet) {
        obj.insert(QString("subtotal"), ::OpenAPI::toJsonValue(m_subtotal));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_discounts_isSet) {
        obj.insert(QString("total_discounts"), ::OpenAPI::toJsonValue(m_total_discounts));
    }
    if (m_total_payment_cost_isSet) {
        obj.insert(QString("total_payment_cost"), ::OpenAPI::toJsonValue(m_total_payment_cost));
    }
    if (m_total_shipping_isSet) {
        obj.insert(QString("total_shipping"), ::OpenAPI::toJsonValue(m_total_shipping));
    }
    if (m_total_tax_isSet) {
        obj.insert(QString("total_tax"), ::OpenAPI::toJsonValue(m_total_tax));
    }
    if (m_visit.isSet()) {
        obj.insert(QString("visit"), ::OpenAPI::toJsonValue(m_visit));
    }
    return obj;
}

QString OAICart::getCartId() const {
    return m_cart_id;
}
void OAICart::setCartId(const QString &cart_id) {
    m_cart_id = cart_id;
    m_cart_id_isSet = true;
}

bool OAICart::is_cart_id_Set() const{
    return m_cart_id_isSet;
}

bool OAICart::is_cart_id_Valid() const{
    return m_cart_id_isValid;
}

QDateTime OAICart::getChangeDate() const {
    return m_change_date;
}
void OAICart::setChangeDate(const QDateTime &change_date) {
    m_change_date = change_date;
    m_change_date_isSet = true;
}

bool OAICart::is_change_date_Set() const{
    return m_change_date_isSet;
}

bool OAICart::is_change_date_Valid() const{
    return m_change_date_isValid;
}

OAIObject OAICart::getCookies() const {
    return m_cookies;
}
void OAICart::setCookies(const OAIObject &cookies) {
    m_cookies = cookies;
    m_cookies_isSet = true;
}

bool OAICart::is_cookies_Set() const{
    return m_cookies_isSet;
}

bool OAICart::is_cookies_Valid() const{
    return m_cookies_isValid;
}

QDateTime OAICart::getCreateDate() const {
    return m_create_date;
}
void OAICart::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAICart::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAICart::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAICart::getCurrency() const {
    return m_currency;
}
void OAICart::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICart::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICart::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICustomer OAICart::getCustomer() const {
    return m_customer;
}
void OAICart::setCustomer(const OAICustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAICart::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAICart::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAICart::getId() const {
    return m_id;
}
void OAICart::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICart::is_id_Set() const{
    return m_id_isSet;
}

bool OAICart::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAICartItem> OAICart::getItems() const {
    return m_items;
}
void OAICart::setItems(const QList<OAICartItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAICart::is_items_Set() const{
    return m_items_isSet;
}

bool OAICart::is_items_Valid() const{
    return m_items_isValid;
}

QList<OAICartItem> OAICart::getPreviousItems() const {
    return m_previous_items;
}
void OAICart::setPreviousItems(const QList<OAICartItem> &previous_items) {
    m_previous_items = previous_items;
    m_previous_items_isSet = true;
}

bool OAICart::is_previous_items_Set() const{
    return m_previous_items_isSet;
}

bool OAICart::is_previous_items_Valid() const{
    return m_previous_items_isValid;
}

double OAICart::getSubtotal() const {
    return m_subtotal;
}
void OAICart::setSubtotal(const double &subtotal) {
    m_subtotal = subtotal;
    m_subtotal_isSet = true;
}

bool OAICart::is_subtotal_Set() const{
    return m_subtotal_isSet;
}

bool OAICart::is_subtotal_Valid() const{
    return m_subtotal_isValid;
}

double OAICart::getTotal() const {
    return m_total;
}
void OAICart::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAICart::is_total_Set() const{
    return m_total_isSet;
}

bool OAICart::is_total_Valid() const{
    return m_total_isValid;
}

double OAICart::getTotalDiscounts() const {
    return m_total_discounts;
}
void OAICart::setTotalDiscounts(const double &total_discounts) {
    m_total_discounts = total_discounts;
    m_total_discounts_isSet = true;
}

bool OAICart::is_total_discounts_Set() const{
    return m_total_discounts_isSet;
}

bool OAICart::is_total_discounts_Valid() const{
    return m_total_discounts_isValid;
}

double OAICart::getTotalPaymentCost() const {
    return m_total_payment_cost;
}
void OAICart::setTotalPaymentCost(const double &total_payment_cost) {
    m_total_payment_cost = total_payment_cost;
    m_total_payment_cost_isSet = true;
}

bool OAICart::is_total_payment_cost_Set() const{
    return m_total_payment_cost_isSet;
}

bool OAICart::is_total_payment_cost_Valid() const{
    return m_total_payment_cost_isValid;
}

double OAICart::getTotalShipping() const {
    return m_total_shipping;
}
void OAICart::setTotalShipping(const double &total_shipping) {
    m_total_shipping = total_shipping;
    m_total_shipping_isSet = true;
}

bool OAICart::is_total_shipping_Set() const{
    return m_total_shipping_isSet;
}

bool OAICart::is_total_shipping_Valid() const{
    return m_total_shipping_isValid;
}

double OAICart::getTotalTax() const {
    return m_total_tax;
}
void OAICart::setTotalTax(const double &total_tax) {
    m_total_tax = total_tax;
    m_total_tax_isSet = true;
}

bool OAICart::is_total_tax_Set() const{
    return m_total_tax_isSet;
}

bool OAICart::is_total_tax_Valid() const{
    return m_total_tax_isValid;
}

OAIVisit OAICart::getVisit() const {
    return m_visit;
}
void OAICart::setVisit(const OAIVisit &visit) {
    m_visit = visit;
    m_visit_isSet = true;
}

bool OAICart::is_visit_Set() const{
    return m_visit_isSet;
}

bool OAICart::is_visit_Valid() const{
    return m_visit_isValid;
}

bool OAICart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_payment_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICart::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_change_date_isValid && m_create_date_isValid && m_currency_isValid && m_customer_isValid && m_id_isValid && m_items_isValid && m_subtotal_isValid && m_total_isValid && m_total_discounts_isValid && m_total_payment_cost_isValid && m_total_shipping_isValid && m_total_tax_isValid && true;
}

} // namespace OpenAPI
