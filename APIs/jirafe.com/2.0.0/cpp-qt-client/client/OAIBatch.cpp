/**
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatch::OAIBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatch::OAIBatch() {
    this->initializeModel();
}

OAIBatch::~OAIBatch() {}

void OAIBatch::initializeModel() {

    m_cart_isSet = false;
    m_cart_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_employee_isSet = false;
    m_employee_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;
}

void OAIBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatch::fromJsonObject(QJsonObject json) {

    m_cart_isValid = ::OpenAPI::fromJsonValue(m_cart, json[QString("cart")]);
    m_cart_isSet = !json[QString("cart")].isNull() && m_cart_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_employee_isValid = ::OpenAPI::fromJsonValue(m_employee, json[QString("employee")]);
    m_employee_isSet = !json[QString("employee")].isNull() && m_employee_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;
}

QString OAIBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_cart.size() > 0) {
        obj.insert(QString("cart"), ::OpenAPI::toJsonValue(m_cart));
    }
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_customer.size() > 0) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_employee.size() > 0) {
        obj.insert(QString("employee"), ::OpenAPI::toJsonValue(m_employee));
    }
    if (m_order.size() > 0) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_product.size() > 0) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    return obj;
}

QList<OAICart> OAIBatch::getCart() const {
    return m_cart;
}
void OAIBatch::setCart(const QList<OAICart> &cart) {
    m_cart = cart;
    m_cart_isSet = true;
}

bool OAIBatch::is_cart_Set() const{
    return m_cart_isSet;
}

bool OAIBatch::is_cart_Valid() const{
    return m_cart_isValid;
}

QList<OAICategory> OAIBatch::getCategory() const {
    return m_category;
}
void OAIBatch::setCategory(const QList<OAICategory> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIBatch::is_category_Set() const{
    return m_category_isSet;
}

bool OAIBatch::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAICustomer> OAIBatch::getCustomer() const {
    return m_customer;
}
void OAIBatch::setCustomer(const QList<OAICustomer> &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIBatch::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIBatch::is_customer_Valid() const{
    return m_customer_isValid;
}

QList<OAIObject> OAIBatch::getEmployee() const {
    return m_employee;
}
void OAIBatch::setEmployee(const QList<OAIObject> &employee) {
    m_employee = employee;
    m_employee_isSet = true;
}

bool OAIBatch::is_employee_Set() const{
    return m_employee_isSet;
}

bool OAIBatch::is_employee_Valid() const{
    return m_employee_isValid;
}

QList<OAIOrder> OAIBatch::getOrder() const {
    return m_order;
}
void OAIBatch::setOrder(const QList<OAIOrder> &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIBatch::is_order_Set() const{
    return m_order_isSet;
}

bool OAIBatch::is_order_Valid() const{
    return m_order_isValid;
}

QList<OAIProduct> OAIBatch::getProduct() const {
    return m_product;
}
void OAIBatch::setProduct(const QList<OAIProduct> &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIBatch::is_product_Set() const{
    return m_product_isSet;
}

bool OAIBatch::is_product_Valid() const{
    return m_product_isValid;
}

bool OAIBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cart.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
