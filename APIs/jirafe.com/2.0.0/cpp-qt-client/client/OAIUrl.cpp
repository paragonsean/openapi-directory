/**
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrl::OAIUrl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrl::OAIUrl() {
    this->initializeModel();
}

OAIUrl::~OAIUrl() {}

void OAIUrl::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_store_isSet = false;
    m_store_isValid = false;
}

void OAIUrl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrl::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_store_isValid = ::OpenAPI::fromJsonValue(m_store, json[QString("store")]);
    m_store_isSet = !json[QString("store")].isNull() && m_store_isValid;
}

QString OAIUrl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrl::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_store_isSet) {
        obj.insert(QString("store"), ::OpenAPI::toJsonValue(m_store));
    }
    return obj;
}

QString OAIUrl::getAdmin() const {
    return m_admin;
}
void OAIUrl::setAdmin(const QString &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIUrl::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIUrl::is_admin_Valid() const{
    return m_admin_isValid;
}

QString OAIUrl::getStore() const {
    return m_store;
}
void OAIUrl::setStore(const QString &store) {
    m_store = store;
    m_store_isSet = true;
}

bool OAIUrl::is_store_Set() const{
    return m_store_isSet;
}

bool OAIUrl::is_store_Valid() const{
    return m_store_isValid;
}

bool OAIUrl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
