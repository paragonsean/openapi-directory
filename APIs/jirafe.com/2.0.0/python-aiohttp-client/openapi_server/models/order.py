# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer import Customer
from openapi_server.models.order_item import OrderItem
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cart_id: str=None, change_date: datetime=None, create_date: datetime=None, currency: str=None, customer: Customer=None, items: List[OrderItem]=None, order_date: datetime=None, order_number: str=None, previous_items: List[OrderItem]=None, status: str='accepted', subtotal: float=None, total: float=None, total_discounts: float=None, total_payment_cost: float=None, total_shipping: float=None, total_tax: float=None):
        """Order - a model defined in OpenAPI

        :param cart_id: The cart_id of this Order.
        :param change_date: The change_date of this Order.
        :param create_date: The create_date of this Order.
        :param currency: The currency of this Order.
        :param customer: The customer of this Order.
        :param items: The items of this Order.
        :param order_date: The order_date of this Order.
        :param order_number: The order_number of this Order.
        :param previous_items: The previous_items of this Order.
        :param status: The status of this Order.
        :param subtotal: The subtotal of this Order.
        :param total: The total of this Order.
        :param total_discounts: The total_discounts of this Order.
        :param total_payment_cost: The total_payment_cost of this Order.
        :param total_shipping: The total_shipping of this Order.
        :param total_tax: The total_tax of this Order.
        """
        self.openapi_types = {
            'cart_id': str,
            'change_date': datetime,
            'create_date': datetime,
            'currency': str,
            'customer': Customer,
            'items': List[OrderItem],
            'order_date': datetime,
            'order_number': str,
            'previous_items': List[OrderItem],
            'status': str,
            'subtotal': float,
            'total': float,
            'total_discounts': float,
            'total_payment_cost': float,
            'total_shipping': float,
            'total_tax': float
        }

        self.attribute_map = {
            'cart_id': 'cart_id',
            'change_date': 'change_date',
            'create_date': 'create_date',
            'currency': 'currency',
            'customer': 'customer',
            'items': 'items',
            'order_date': 'order_date',
            'order_number': 'order_number',
            'previous_items': 'previous_items',
            'status': 'status',
            'subtotal': 'subtotal',
            'total': 'total',
            'total_discounts': 'total_discounts',
            'total_payment_cost': 'total_payment_cost',
            'total_shipping': 'total_shipping',
            'total_tax': 'total_tax'
        }

        self._cart_id = cart_id
        self._change_date = change_date
        self._create_date = create_date
        self._currency = currency
        self._customer = customer
        self._items = items
        self._order_date = order_date
        self._order_number = order_number
        self._previous_items = previous_items
        self._status = status
        self._subtotal = subtotal
        self._total = total
        self._total_discounts = total_discounts
        self._total_payment_cost = total_payment_cost
        self._total_shipping = total_shipping
        self._total_tax = total_tax

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order of this Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cart_id(self):
        """Gets the cart_id of this Order.


        :return: The cart_id of this Order.
        :rtype: str
        """
        return self._cart_id

    @cart_id.setter
    def cart_id(self, cart_id):
        """Sets the cart_id of this Order.


        :param cart_id: The cart_id of this Order.
        :type cart_id: str
        """

        self._cart_id = cart_id

    @property
    def change_date(self):
        """Gets the change_date of this Order.


        :return: The change_date of this Order.
        :rtype: datetime
        """
        return self._change_date

    @change_date.setter
    def change_date(self, change_date):
        """Sets the change_date of this Order.


        :param change_date: The change_date of this Order.
        :type change_date: datetime
        """
        if change_date is None:
            raise ValueError("Invalid value for `change_date`, must not be `None`")

        self._change_date = change_date

    @property
    def create_date(self):
        """Gets the create_date of this Order.


        :return: The create_date of this Order.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Order.


        :param create_date: The create_date of this Order.
        :type create_date: datetime
        """
        if create_date is None:
            raise ValueError("Invalid value for `create_date`, must not be `None`")

        self._create_date = create_date

    @property
    def currency(self):
        """Gets the currency of this Order.


        :return: The currency of this Order.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Order.


        :param currency: The currency of this Order.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def customer(self):
        """Gets the customer of this Order.


        :return: The customer of this Order.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Order.


        :param customer: The customer of this Order.
        :type customer: Customer
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    @property
    def items(self):
        """Gets the items of this Order.


        :return: The items of this Order.
        :rtype: List[OrderItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Order.


        :param items: The items of this Order.
        :type items: List[OrderItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def order_date(self):
        """Gets the order_date of this Order.


        :return: The order_date of this Order.
        :rtype: datetime
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this Order.


        :param order_date: The order_date of this Order.
        :type order_date: datetime
        """
        if order_date is None:
            raise ValueError("Invalid value for `order_date`, must not be `None`")

        self._order_date = order_date

    @property
    def order_number(self):
        """Gets the order_number of this Order.


        :return: The order_number of this Order.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this Order.


        :param order_number: The order_number of this Order.
        :type order_number: str
        """
        if order_number is None:
            raise ValueError("Invalid value for `order_number`, must not be `None`")

        self._order_number = order_number

    @property
    def previous_items(self):
        """Gets the previous_items of this Order.


        :return: The previous_items of this Order.
        :rtype: List[OrderItem]
        """
        return self._previous_items

    @previous_items.setter
    def previous_items(self, previous_items):
        """Sets the previous_items of this Order.


        :param previous_items: The previous_items of this Order.
        :type previous_items: List[OrderItem]
        """

        self._previous_items = previous_items

    @property
    def status(self):
        """Gets the status of this Order.


        :return: The status of this Order.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.


        :param status: The status of this Order.
        :type status: str
        """
        allowed_values = ["accepted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subtotal(self):
        """Gets the subtotal of this Order.


        :return: The subtotal of this Order.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this Order.


        :param subtotal: The subtotal of this Order.
        :type subtotal: float
        """
        if subtotal is None:
            raise ValueError("Invalid value for `subtotal`, must not be `None`")

        self._subtotal = subtotal

    @property
    def total(self):
        """Gets the total of this Order.


        :return: The total of this Order.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Order.


        :param total: The total of this Order.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def total_discounts(self):
        """Gets the total_discounts of this Order.


        :return: The total_discounts of this Order.
        :rtype: float
        """
        return self._total_discounts

    @total_discounts.setter
    def total_discounts(self, total_discounts):
        """Sets the total_discounts of this Order.


        :param total_discounts: The total_discounts of this Order.
        :type total_discounts: float
        """
        if total_discounts is None:
            raise ValueError("Invalid value for `total_discounts`, must not be `None`")

        self._total_discounts = total_discounts

    @property
    def total_payment_cost(self):
        """Gets the total_payment_cost of this Order.


        :return: The total_payment_cost of this Order.
        :rtype: float
        """
        return self._total_payment_cost

    @total_payment_cost.setter
    def total_payment_cost(self, total_payment_cost):
        """Sets the total_payment_cost of this Order.


        :param total_payment_cost: The total_payment_cost of this Order.
        :type total_payment_cost: float
        """
        if total_payment_cost is None:
            raise ValueError("Invalid value for `total_payment_cost`, must not be `None`")

        self._total_payment_cost = total_payment_cost

    @property
    def total_shipping(self):
        """Gets the total_shipping of this Order.


        :return: The total_shipping of this Order.
        :rtype: float
        """
        return self._total_shipping

    @total_shipping.setter
    def total_shipping(self, total_shipping):
        """Sets the total_shipping of this Order.


        :param total_shipping: The total_shipping of this Order.
        :type total_shipping: float
        """
        if total_shipping is None:
            raise ValueError("Invalid value for `total_shipping`, must not be `None`")

        self._total_shipping = total_shipping

    @property
    def total_tax(self):
        """Gets the total_tax of this Order.


        :return: The total_tax of this Order.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this Order.


        :param total_tax: The total_tax of this Order.
        :type total_tax: float
        """
        if total_tax is None:
            raise ValueError("Invalid value for `total_tax`, must not be `None`")

        self._total_tax = total_tax
