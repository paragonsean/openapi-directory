# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product import Product
from openapi_server import util


class CartItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cart_item_number: str=None, change_date: datetime=None, create_date: datetime=None, discount_price: float=None, id: str=None, price: float=None, product: Product=None, quantity: int=None):
        """CartItem - a model defined in OpenAPI

        :param cart_item_number: The cart_item_number of this CartItem.
        :param change_date: The change_date of this CartItem.
        :param create_date: The create_date of this CartItem.
        :param discount_price: The discount_price of this CartItem.
        :param id: The id of this CartItem.
        :param price: The price of this CartItem.
        :param product: The product of this CartItem.
        :param quantity: The quantity of this CartItem.
        """
        self.openapi_types = {
            'cart_item_number': str,
            'change_date': datetime,
            'create_date': datetime,
            'discount_price': float,
            'id': str,
            'price': float,
            'product': Product,
            'quantity': int
        }

        self.attribute_map = {
            'cart_item_number': 'cart_item_number',
            'change_date': 'change_date',
            'create_date': 'create_date',
            'discount_price': 'discount_price',
            'id': 'id',
            'price': 'price',
            'product': 'product',
            'quantity': 'quantity'
        }

        self._cart_item_number = cart_item_number
        self._change_date = change_date
        self._create_date = create_date
        self._discount_price = discount_price
        self._id = id
        self._price = price
        self._product = product
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CartItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CartItem of this CartItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cart_item_number(self):
        """Gets the cart_item_number of this CartItem.


        :return: The cart_item_number of this CartItem.
        :rtype: str
        """
        return self._cart_item_number

    @cart_item_number.setter
    def cart_item_number(self, cart_item_number):
        """Sets the cart_item_number of this CartItem.


        :param cart_item_number: The cart_item_number of this CartItem.
        :type cart_item_number: str
        """
        if cart_item_number is None:
            raise ValueError("Invalid value for `cart_item_number`, must not be `None`")

        self._cart_item_number = cart_item_number

    @property
    def change_date(self):
        """Gets the change_date of this CartItem.


        :return: The change_date of this CartItem.
        :rtype: datetime
        """
        return self._change_date

    @change_date.setter
    def change_date(self, change_date):
        """Sets the change_date of this CartItem.


        :param change_date: The change_date of this CartItem.
        :type change_date: datetime
        """
        if change_date is None:
            raise ValueError("Invalid value for `change_date`, must not be `None`")

        self._change_date = change_date

    @property
    def create_date(self):
        """Gets the create_date of this CartItem.


        :return: The create_date of this CartItem.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this CartItem.


        :param create_date: The create_date of this CartItem.
        :type create_date: datetime
        """
        if create_date is None:
            raise ValueError("Invalid value for `create_date`, must not be `None`")

        self._create_date = create_date

    @property
    def discount_price(self):
        """Gets the discount_price of this CartItem.


        :return: The discount_price of this CartItem.
        :rtype: float
        """
        return self._discount_price

    @discount_price.setter
    def discount_price(self, discount_price):
        """Sets the discount_price of this CartItem.


        :param discount_price: The discount_price of this CartItem.
        :type discount_price: float
        """
        if discount_price is None:
            raise ValueError("Invalid value for `discount_price`, must not be `None`")
        if discount_price is not None and discount_price > 9007199254740992:
            raise ValueError("Invalid value for `discount_price`, must be a value less than or equal to `9007199254740992`")
        if discount_price is not None and discount_price < 0:
            raise ValueError("Invalid value for `discount_price`, must be a value greater than or equal to `0`")

        self._discount_price = discount_price

    @property
    def id(self):
        """Gets the id of this CartItem.


        :return: The id of this CartItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CartItem.


        :param id: The id of this CartItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def price(self):
        """Gets the price of this CartItem.


        :return: The price of this CartItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CartItem.


        :param price: The price of this CartItem.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")
        if price is not None and price > 9007199254740992:
            raise ValueError("Invalid value for `price`, must be a value less than or equal to `9007199254740992`")
        if price is not None and price < 0:
            raise ValueError("Invalid value for `price`, must be a value greater than or equal to `0`")

        self._price = price

    @property
    def product(self):
        """Gets the product of this CartItem.


        :return: The product of this CartItem.
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CartItem.


        :param product: The product of this CartItem.
        :type product: Product
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")

        self._product = product

    @property
    def quantity(self):
        """Gets the quantity of this CartItem.


        :return: The quantity of this CartItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CartItem.


        :param quantity: The quantity of this CartItem.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")
        if quantity is not None and quantity > 9007199254740992:
            raise ValueError("Invalid value for `quantity`, must be a value less than or equal to `9007199254740992`")
        if quantity is not None and quantity < -9007199254740992:
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `-9007199254740992`")

        self._quantity = quantity
