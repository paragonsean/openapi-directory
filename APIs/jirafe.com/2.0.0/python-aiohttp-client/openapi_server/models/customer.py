# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Customer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_flag: bool=True, change_date: datetime=None, company: str=None, cookies: object=None, create_date: datetime=None, department: str=None, email: str=None, first_name: str=None, id: str=None, last_name: str=None, marketing_opt_in: bool=None, name: str=None, phone: str=None, position: str=None):
        """Customer - a model defined in OpenAPI

        :param active_flag: The active_flag of this Customer.
        :param change_date: The change_date of this Customer.
        :param company: The company of this Customer.
        :param cookies: The cookies of this Customer.
        :param create_date: The create_date of this Customer.
        :param department: The department of this Customer.
        :param email: The email of this Customer.
        :param first_name: The first_name of this Customer.
        :param id: The id of this Customer.
        :param last_name: The last_name of this Customer.
        :param marketing_opt_in: The marketing_opt_in of this Customer.
        :param name: The name of this Customer.
        :param phone: The phone of this Customer.
        :param position: The position of this Customer.
        """
        self.openapi_types = {
            'active_flag': bool,
            'change_date': datetime,
            'company': str,
            'cookies': object,
            'create_date': datetime,
            'department': str,
            'email': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'marketing_opt_in': bool,
            'name': str,
            'phone': str,
            'position': str
        }

        self.attribute_map = {
            'active_flag': 'active_flag',
            'change_date': 'change_date',
            'company': 'company',
            'cookies': 'cookies',
            'create_date': 'create_date',
            'department': 'department',
            'email': 'email',
            'first_name': 'first_name',
            'id': 'id',
            'last_name': 'last_name',
            'marketing_opt_in': 'marketing_opt_in',
            'name': 'name',
            'phone': 'phone',
            'position': 'position'
        }

        self._active_flag = active_flag
        self._change_date = change_date
        self._company = company
        self._cookies = cookies
        self._create_date = create_date
        self._department = department
        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._marketing_opt_in = marketing_opt_in
        self._name = name
        self._phone = phone
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Customer of this Customer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_flag(self):
        """Gets the active_flag of this Customer.


        :return: The active_flag of this Customer.
        :rtype: bool
        """
        return self._active_flag

    @active_flag.setter
    def active_flag(self, active_flag):
        """Sets the active_flag of this Customer.


        :param active_flag: The active_flag of this Customer.
        :type active_flag: bool
        """

        self._active_flag = active_flag

    @property
    def change_date(self):
        """Gets the change_date of this Customer.


        :return: The change_date of this Customer.
        :rtype: datetime
        """
        return self._change_date

    @change_date.setter
    def change_date(self, change_date):
        """Sets the change_date of this Customer.


        :param change_date: The change_date of this Customer.
        :type change_date: datetime
        """
        if change_date is None:
            raise ValueError("Invalid value for `change_date`, must not be `None`")

        self._change_date = change_date

    @property
    def company(self):
        """Gets the company of this Customer.


        :return: The company of this Customer.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Customer.


        :param company: The company of this Customer.
        :type company: str
        """

        self._company = company

    @property
    def cookies(self):
        """Gets the cookies of this Customer.


        :return: The cookies of this Customer.
        :rtype: object
        """
        return self._cookies

    @cookies.setter
    def cookies(self, cookies):
        """Sets the cookies of this Customer.


        :param cookies: The cookies of this Customer.
        :type cookies: object
        """

        self._cookies = cookies

    @property
    def create_date(self):
        """Gets the create_date of this Customer.


        :return: The create_date of this Customer.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Customer.


        :param create_date: The create_date of this Customer.
        :type create_date: datetime
        """
        if create_date is None:
            raise ValueError("Invalid value for `create_date`, must not be `None`")

        self._create_date = create_date

    @property
    def department(self):
        """Gets the department of this Customer.


        :return: The department of this Customer.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Customer.


        :param department: The department of this Customer.
        :type department: str
        """

        self._department = department

    @property
    def email(self):
        """Gets the email of this Customer.


        :return: The email of this Customer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Customer.


        :param email: The email of this Customer.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Customer.


        :return: The first_name of this Customer.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Customer.


        :param first_name: The first_name of this Customer.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Customer.


        :return: The id of this Customer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Customer.


        :param id: The id of this Customer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this Customer.


        :return: The last_name of this Customer.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Customer.


        :param last_name: The last_name of this Customer.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def marketing_opt_in(self):
        """Gets the marketing_opt_in of this Customer.


        :return: The marketing_opt_in of this Customer.
        :rtype: bool
        """
        return self._marketing_opt_in

    @marketing_opt_in.setter
    def marketing_opt_in(self, marketing_opt_in):
        """Sets the marketing_opt_in of this Customer.


        :param marketing_opt_in: The marketing_opt_in of this Customer.
        :type marketing_opt_in: bool
        """

        self._marketing_opt_in = marketing_opt_in

    @property
    def name(self):
        """Gets the name of this Customer.


        :return: The name of this Customer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Customer.


        :param name: The name of this Customer.
        :type name: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this Customer.


        :return: The phone of this Customer.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Customer.


        :param phone: The phone of this Customer.
        :type phone: str
        """

        self._phone = phone

    @property
    def position(self):
        """Gets the position of this Customer.


        :return: The position of this Customer.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Customer.


        :param position: The position of this Customer.
        :type position: str
        """

        self._position = position
