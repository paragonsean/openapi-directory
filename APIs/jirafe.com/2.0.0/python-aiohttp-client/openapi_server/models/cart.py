# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cart_item import CartItem
from openapi_server.models.customer import Customer
from openapi_server.models.visit import Visit
from openapi_server import util


class Cart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cart_id: str=None, change_date: datetime=None, cookies: object=None, create_date: datetime=None, currency: str=None, customer: Customer=None, id: str=None, items: List[CartItem]=None, previous_items: List[CartItem]=None, subtotal: float=None, total: float=None, total_discounts: float=None, total_payment_cost: float=None, total_shipping: float=None, total_tax: float=None, visit: Visit=None):
        """Cart - a model defined in OpenAPI

        :param cart_id: The cart_id of this Cart.
        :param change_date: The change_date of this Cart.
        :param cookies: The cookies of this Cart.
        :param create_date: The create_date of this Cart.
        :param currency: The currency of this Cart.
        :param customer: The customer of this Cart.
        :param id: The id of this Cart.
        :param items: The items of this Cart.
        :param previous_items: The previous_items of this Cart.
        :param subtotal: The subtotal of this Cart.
        :param total: The total of this Cart.
        :param total_discounts: The total_discounts of this Cart.
        :param total_payment_cost: The total_payment_cost of this Cart.
        :param total_shipping: The total_shipping of this Cart.
        :param total_tax: The total_tax of this Cart.
        :param visit: The visit of this Cart.
        """
        self.openapi_types = {
            'cart_id': str,
            'change_date': datetime,
            'cookies': object,
            'create_date': datetime,
            'currency': str,
            'customer': Customer,
            'id': str,
            'items': List[CartItem],
            'previous_items': List[CartItem],
            'subtotal': float,
            'total': float,
            'total_discounts': float,
            'total_payment_cost': float,
            'total_shipping': float,
            'total_tax': float,
            'visit': Visit
        }

        self.attribute_map = {
            'cart_id': 'cart_id',
            'change_date': 'change_date',
            'cookies': 'cookies',
            'create_date': 'create_date',
            'currency': 'currency',
            'customer': 'customer',
            'id': 'id',
            'items': 'items',
            'previous_items': 'previous_items',
            'subtotal': 'subtotal',
            'total': 'total',
            'total_discounts': 'total_discounts',
            'total_payment_cost': 'total_payment_cost',
            'total_shipping': 'total_shipping',
            'total_tax': 'total_tax',
            'visit': 'visit'
        }

        self._cart_id = cart_id
        self._change_date = change_date
        self._cookies = cookies
        self._create_date = create_date
        self._currency = currency
        self._customer = customer
        self._id = id
        self._items = items
        self._previous_items = previous_items
        self._subtotal = subtotal
        self._total = total
        self._total_discounts = total_discounts
        self._total_payment_cost = total_payment_cost
        self._total_shipping = total_shipping
        self._total_tax = total_tax
        self._visit = visit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cart of this Cart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cart_id(self):
        """Gets the cart_id of this Cart.


        :return: The cart_id of this Cart.
        :rtype: str
        """
        return self._cart_id

    @cart_id.setter
    def cart_id(self, cart_id):
        """Sets the cart_id of this Cart.


        :param cart_id: The cart_id of this Cart.
        :type cart_id: str
        """

        self._cart_id = cart_id

    @property
    def change_date(self):
        """Gets the change_date of this Cart.


        :return: The change_date of this Cart.
        :rtype: datetime
        """
        return self._change_date

    @change_date.setter
    def change_date(self, change_date):
        """Sets the change_date of this Cart.


        :param change_date: The change_date of this Cart.
        :type change_date: datetime
        """
        if change_date is None:
            raise ValueError("Invalid value for `change_date`, must not be `None`")

        self._change_date = change_date

    @property
    def cookies(self):
        """Gets the cookies of this Cart.


        :return: The cookies of this Cart.
        :rtype: object
        """
        return self._cookies

    @cookies.setter
    def cookies(self, cookies):
        """Sets the cookies of this Cart.


        :param cookies: The cookies of this Cart.
        :type cookies: object
        """

        self._cookies = cookies

    @property
    def create_date(self):
        """Gets the create_date of this Cart.


        :return: The create_date of this Cart.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Cart.


        :param create_date: The create_date of this Cart.
        :type create_date: datetime
        """
        if create_date is None:
            raise ValueError("Invalid value for `create_date`, must not be `None`")

        self._create_date = create_date

    @property
    def currency(self):
        """Gets the currency of this Cart.


        :return: The currency of this Cart.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Cart.


        :param currency: The currency of this Cart.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def customer(self):
        """Gets the customer of this Cart.


        :return: The customer of this Cart.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Cart.


        :param customer: The customer of this Cart.
        :type customer: Customer
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    @property
    def id(self):
        """Gets the id of this Cart.


        :return: The id of this Cart.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cart.


        :param id: The id of this Cart.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def items(self):
        """Gets the items of this Cart.


        :return: The items of this Cart.
        :rtype: List[CartItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Cart.


        :param items: The items of this Cart.
        :type items: List[CartItem]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def previous_items(self):
        """Gets the previous_items of this Cart.


        :return: The previous_items of this Cart.
        :rtype: List[CartItem]
        """
        return self._previous_items

    @previous_items.setter
    def previous_items(self, previous_items):
        """Sets the previous_items of this Cart.


        :param previous_items: The previous_items of this Cart.
        :type previous_items: List[CartItem]
        """

        self._previous_items = previous_items

    @property
    def subtotal(self):
        """Gets the subtotal of this Cart.


        :return: The subtotal of this Cart.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this Cart.


        :param subtotal: The subtotal of this Cart.
        :type subtotal: float
        """
        if subtotal is None:
            raise ValueError("Invalid value for `subtotal`, must not be `None`")

        self._subtotal = subtotal

    @property
    def total(self):
        """Gets the total of this Cart.


        :return: The total of this Cart.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Cart.


        :param total: The total of this Cart.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")
        if total is not None and total > 9007199254740992:
            raise ValueError("Invalid value for `total`, must be a value less than or equal to `9007199254740992`")
        if total is not None and total < 0:
            raise ValueError("Invalid value for `total`, must be a value greater than or equal to `0`")

        self._total = total

    @property
    def total_discounts(self):
        """Gets the total_discounts of this Cart.


        :return: The total_discounts of this Cart.
        :rtype: float
        """
        return self._total_discounts

    @total_discounts.setter
    def total_discounts(self, total_discounts):
        """Sets the total_discounts of this Cart.


        :param total_discounts: The total_discounts of this Cart.
        :type total_discounts: float
        """
        if total_discounts is None:
            raise ValueError("Invalid value for `total_discounts`, must not be `None`")
        if total_discounts is not None and total_discounts > 9007199254740992:
            raise ValueError("Invalid value for `total_discounts`, must be a value less than or equal to `9007199254740992`")
        if total_discounts is not None and total_discounts < 0:
            raise ValueError("Invalid value for `total_discounts`, must be a value greater than or equal to `0`")

        self._total_discounts = total_discounts

    @property
    def total_payment_cost(self):
        """Gets the total_payment_cost of this Cart.


        :return: The total_payment_cost of this Cart.
        :rtype: float
        """
        return self._total_payment_cost

    @total_payment_cost.setter
    def total_payment_cost(self, total_payment_cost):
        """Sets the total_payment_cost of this Cart.


        :param total_payment_cost: The total_payment_cost of this Cart.
        :type total_payment_cost: float
        """
        if total_payment_cost is None:
            raise ValueError("Invalid value for `total_payment_cost`, must not be `None`")
        if total_payment_cost is not None and total_payment_cost > 9007199254740992:
            raise ValueError("Invalid value for `total_payment_cost`, must be a value less than or equal to `9007199254740992`")
        if total_payment_cost is not None and total_payment_cost < 0:
            raise ValueError("Invalid value for `total_payment_cost`, must be a value greater than or equal to `0`")

        self._total_payment_cost = total_payment_cost

    @property
    def total_shipping(self):
        """Gets the total_shipping of this Cart.


        :return: The total_shipping of this Cart.
        :rtype: float
        """
        return self._total_shipping

    @total_shipping.setter
    def total_shipping(self, total_shipping):
        """Sets the total_shipping of this Cart.


        :param total_shipping: The total_shipping of this Cart.
        :type total_shipping: float
        """
        if total_shipping is None:
            raise ValueError("Invalid value for `total_shipping`, must not be `None`")
        if total_shipping is not None and total_shipping > 9007199254740992:
            raise ValueError("Invalid value for `total_shipping`, must be a value less than or equal to `9007199254740992`")
        if total_shipping is not None and total_shipping < 0:
            raise ValueError("Invalid value for `total_shipping`, must be a value greater than or equal to `0`")

        self._total_shipping = total_shipping

    @property
    def total_tax(self):
        """Gets the total_tax of this Cart.


        :return: The total_tax of this Cart.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this Cart.


        :param total_tax: The total_tax of this Cart.
        :type total_tax: float
        """
        if total_tax is None:
            raise ValueError("Invalid value for `total_tax`, must not be `None`")
        if total_tax is not None and total_tax > 9007199254740992:
            raise ValueError("Invalid value for `total_tax`, must be a value less than or equal to `9007199254740992`")
        if total_tax is not None and total_tax < 0:
            raise ValueError("Invalid value for `total_tax`, must be a value greater than or equal to `0`")

        self._total_tax = total_tax

    @property
    def visit(self):
        """Gets the visit of this Cart.


        :return: The visit of this Cart.
        :rtype: Visit
        """
        return self._visit

    @visit.setter
    def visit(self, visit):
        """Sets the visit of this Cart.


        :param visit: The visit of this Cart.
        :type visit: Visit
        """

        self._visit = visit
