# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute import Attribute
from openapi_server.models.base_product import BaseProduct
from openapi_server.models.catalog import Catalog
from openapi_server.models.category import Category
from openapi_server.models.url import Url
from openapi_server.models.vendor import Vendor
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ancestors: List[str]=None, attributes: list[Attribute]=None, base_product: BaseProduct=None, brand: str=None, catalog: Catalog=None, categories: list[Category]=None, change_date: datetime=None, code: str=None, create_date: datetime=None, id: str=None, images: List[object]=None, is_order: bool=None, is_sku: bool=None, name: str=None, rating: float=None, urls: Url=None, vendors: List[Vendor]=None):
        """Product - a model defined in OpenAPI

        :param ancestors: The ancestors of this Product.
        :param attributes: The attributes of this Product.
        :param base_product: The base_product of this Product.
        :param brand: The brand of this Product.
        :param catalog: The catalog of this Product.
        :param categories: The categories of this Product.
        :param change_date: The change_date of this Product.
        :param code: The code of this Product.
        :param create_date: The create_date of this Product.
        :param id: The id of this Product.
        :param images: The images of this Product.
        :param is_order: The is_order of this Product.
        :param is_sku: The is_sku of this Product.
        :param name: The name of this Product.
        :param rating: The rating of this Product.
        :param urls: The urls of this Product.
        :param vendors: The vendors of this Product.
        """
        self.openapi_types = {
            'ancestors': List[str],
            'attributes': list[Attribute],
            'base_product': BaseProduct,
            'brand': str,
            'catalog': Catalog,
            'categories': list[Category],
            'change_date': datetime,
            'code': str,
            'create_date': datetime,
            'id': str,
            'images': List[object],
            'is_order': bool,
            'is_sku': bool,
            'name': str,
            'rating': float,
            'urls': Url,
            'vendors': List[Vendor]
        }

        self.attribute_map = {
            'ancestors': 'ancestors',
            'attributes': 'attributes',
            'base_product': 'base_product',
            'brand': 'brand',
            'catalog': 'catalog',
            'categories': 'categories',
            'change_date': 'change_date',
            'code': 'code',
            'create_date': 'create_date',
            'id': 'id',
            'images': 'images',
            'is_order': 'is_order',
            'is_sku': 'is_sku',
            'name': 'name',
            'rating': 'rating',
            'urls': 'urls',
            'vendors': 'vendors'
        }

        self._ancestors = ancestors
        self._attributes = attributes
        self._base_product = base_product
        self._brand = brand
        self._catalog = catalog
        self._categories = categories
        self._change_date = change_date
        self._code = code
        self._create_date = create_date
        self._id = id
        self._images = images
        self._is_order = is_order
        self._is_sku = is_sku
        self._name = name
        self._rating = rating
        self._urls = urls
        self._vendors = vendors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ancestors(self):
        """Gets the ancestors of this Product.


        :return: The ancestors of this Product.
        :rtype: List[str]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """Sets the ancestors of this Product.


        :param ancestors: The ancestors of this Product.
        :type ancestors: List[str]
        """

        self._ancestors = ancestors

    @property
    def attributes(self):
        """Gets the attributes of this Product.


        :return: The attributes of this Product.
        :rtype: list[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Product.


        :param attributes: The attributes of this Product.
        :type attributes: list[Attribute]
        """

        self._attributes = attributes

    @property
    def base_product(self):
        """Gets the base_product of this Product.


        :return: The base_product of this Product.
        :rtype: BaseProduct
        """
        return self._base_product

    @base_product.setter
    def base_product(self, base_product):
        """Sets the base_product of this Product.


        :param base_product: The base_product of this Product.
        :type base_product: BaseProduct
        """

        self._base_product = base_product

    @property
    def brand(self):
        """Gets the brand of this Product.


        :return: The brand of this Product.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Product.


        :param brand: The brand of this Product.
        :type brand: str
        """

        self._brand = brand

    @property
    def catalog(self):
        """Gets the catalog of this Product.


        :return: The catalog of this Product.
        :rtype: Catalog
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this Product.


        :param catalog: The catalog of this Product.
        :type catalog: Catalog
        """

        self._catalog = catalog

    @property
    def categories(self):
        """Gets the categories of this Product.


        :return: The categories of this Product.
        :rtype: list[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Product.


        :param categories: The categories of this Product.
        :type categories: list[Category]
        """

        self._categories = categories

    @property
    def change_date(self):
        """Gets the change_date of this Product.


        :return: The change_date of this Product.
        :rtype: datetime
        """
        return self._change_date

    @change_date.setter
    def change_date(self, change_date):
        """Sets the change_date of this Product.


        :param change_date: The change_date of this Product.
        :type change_date: datetime
        """
        if change_date is None:
            raise ValueError("Invalid value for `change_date`, must not be `None`")

        self._change_date = change_date

    @property
    def code(self):
        """Gets the code of this Product.


        :return: The code of this Product.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Product.


        :param code: The code of this Product.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def create_date(self):
        """Gets the create_date of this Product.


        :return: The create_date of this Product.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Product.


        :param create_date: The create_date of this Product.
        :type create_date: datetime
        """
        if create_date is None:
            raise ValueError("Invalid value for `create_date`, must not be `None`")

        self._create_date = create_date

    @property
    def id(self):
        """Gets the id of this Product.


        :return: The id of this Product.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.


        :param id: The id of this Product.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this Product.


        :return: The images of this Product.
        :rtype: List[object]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Product.


        :param images: The images of this Product.
        :type images: List[object]
        """

        self._images = images

    @property
    def is_order(self):
        """Gets the is_order of this Product.


        :return: The is_order of this Product.
        :rtype: bool
        """
        return self._is_order

    @is_order.setter
    def is_order(self, is_order):
        """Sets the is_order of this Product.


        :param is_order: The is_order of this Product.
        :type is_order: bool
        """
        if is_order is None:
            raise ValueError("Invalid value for `is_order`, must not be `None`")

        self._is_order = is_order

    @property
    def is_sku(self):
        """Gets the is_sku of this Product.


        :return: The is_sku of this Product.
        :rtype: bool
        """
        return self._is_sku

    @is_sku.setter
    def is_sku(self, is_sku):
        """Sets the is_sku of this Product.


        :param is_sku: The is_sku of this Product.
        :type is_sku: bool
        """
        if is_sku is None:
            raise ValueError("Invalid value for `is_sku`, must not be `None`")

        self._is_sku = is_sku

    @property
    def name(self):
        """Gets the name of this Product.


        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.


        :param name: The name of this Product.
        :type name: str
        """

        self._name = name

    @property
    def rating(self):
        """Gets the rating of this Product.


        :return: The rating of this Product.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Product.


        :param rating: The rating of this Product.
        :type rating: float
        """

        self._rating = rating

    @property
    def urls(self):
        """Gets the urls of this Product.


        :return: The urls of this Product.
        :rtype: Url
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Product.


        :param urls: The urls of this Product.
        :type urls: Url
        """

        self._urls = urls

    @property
    def vendors(self):
        """Gets the vendors of this Product.


        :return: The vendors of this Product.
        :rtype: List[Vendor]
        """
        return self._vendors

    @vendors.setter
    def vendors(self, vendors):
        """Sets the vendors of this Product.


        :param vendors: The vendors of this Product.
        :type vendors: List[Vendor]
        """

        self._vendors = vendors
