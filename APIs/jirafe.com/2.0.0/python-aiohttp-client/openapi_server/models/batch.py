# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cart import Cart
from openapi_server.models.category import Category
from openapi_server.models.customer import Customer
from openapi_server.models.order import Order
from openapi_server.models.product import Product
from openapi_server import util


class Batch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cart: List[Cart]=None, category: List[Category]=None, customer: List[Customer]=None, employee: List[object]=None, order: List[Order]=None, product: List[Product]=None):
        """Batch - a model defined in OpenAPI

        :param cart: The cart of this Batch.
        :param category: The category of this Batch.
        :param customer: The customer of this Batch.
        :param employee: The employee of this Batch.
        :param order: The order of this Batch.
        :param product: The product of this Batch.
        """
        self.openapi_types = {
            'cart': List[Cart],
            'category': List[Category],
            'customer': List[Customer],
            'employee': List[object],
            'order': List[Order],
            'product': List[Product]
        }

        self.attribute_map = {
            'cart': 'cart',
            'category': 'category',
            'customer': 'customer',
            'employee': 'employee',
            'order': 'order',
            'product': 'product'
        }

        self._cart = cart
        self._category = category
        self._customer = customer
        self._employee = employee
        self._order = order
        self._product = product

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Batch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Batch of this Batch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cart(self):
        """Gets the cart of this Batch.


        :return: The cart of this Batch.
        :rtype: List[Cart]
        """
        return self._cart

    @cart.setter
    def cart(self, cart):
        """Sets the cart of this Batch.


        :param cart: The cart of this Batch.
        :type cart: List[Cart]
        """

        self._cart = cart

    @property
    def category(self):
        """Gets the category of this Batch.


        :return: The category of this Batch.
        :rtype: List[Category]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Batch.


        :param category: The category of this Batch.
        :type category: List[Category]
        """

        self._category = category

    @property
    def customer(self):
        """Gets the customer of this Batch.


        :return: The customer of this Batch.
        :rtype: List[Customer]
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Batch.


        :param customer: The customer of this Batch.
        :type customer: List[Customer]
        """

        self._customer = customer

    @property
    def employee(self):
        """Gets the employee of this Batch.


        :return: The employee of this Batch.
        :rtype: List[object]
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this Batch.


        :param employee: The employee of this Batch.
        :type employee: List[object]
        """

        self._employee = employee

    @property
    def order(self):
        """Gets the order of this Batch.


        :return: The order of this Batch.
        :rtype: List[Order]
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Batch.


        :param order: The order of this Batch.
        :type order: List[Order]
        """

        self._order = order

    @property
    def product(self):
        """Gets the product of this Batch.


        :return: The product of this Batch.
        :rtype: List[Product]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Batch.


        :param product: The product of this Batch.
        :type product: List[Product]
        """

        self._product = product
