# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderCancelled(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancel_date: datetime=None, order_number: str=None, status: str='cancelled'):
        """OrderCancelled - a model defined in OpenAPI

        :param cancel_date: The cancel_date of this OrderCancelled.
        :param order_number: The order_number of this OrderCancelled.
        :param status: The status of this OrderCancelled.
        """
        self.openapi_types = {
            'cancel_date': datetime,
            'order_number': str,
            'status': str
        }

        self.attribute_map = {
            'cancel_date': 'cancel_date',
            'order_number': 'order_number',
            'status': 'status'
        }

        self._cancel_date = cancel_date
        self._order_number = order_number
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderCancelled':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderCancelled of this OrderCancelled.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancel_date(self):
        """Gets the cancel_date of this OrderCancelled.


        :return: The cancel_date of this OrderCancelled.
        :rtype: datetime
        """
        return self._cancel_date

    @cancel_date.setter
    def cancel_date(self, cancel_date):
        """Sets the cancel_date of this OrderCancelled.


        :param cancel_date: The cancel_date of this OrderCancelled.
        :type cancel_date: datetime
        """
        if cancel_date is None:
            raise ValueError("Invalid value for `cancel_date`, must not be `None`")

        self._cancel_date = cancel_date

    @property
    def order_number(self):
        """Gets the order_number of this OrderCancelled.


        :return: The order_number of this OrderCancelled.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this OrderCancelled.


        :param order_number: The order_number of this OrderCancelled.
        :type order_number: str
        """
        if order_number is None:
            raise ValueError("Invalid value for `order_number`, must not be `None`")

        self._order_number = order_number

    @property
    def status(self):
        """Gets the status of this OrderCancelled.


        :return: The status of this OrderCancelled.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderCancelled.


        :param status: The status of this OrderCancelled.
        :type status: str
        """
        allowed_values = ["cancelled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
