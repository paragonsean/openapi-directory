# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Visit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_pageview_id: str=None, pageview_id: str=None, visit_id: str=None, visitor_id: str=None):
        """Visit - a model defined in OpenAPI

        :param last_pageview_id: The last_pageview_id of this Visit.
        :param pageview_id: The pageview_id of this Visit.
        :param visit_id: The visit_id of this Visit.
        :param visitor_id: The visitor_id of this Visit.
        """
        self.openapi_types = {
            'last_pageview_id': str,
            'pageview_id': str,
            'visit_id': str,
            'visitor_id': str
        }

        self.attribute_map = {
            'last_pageview_id': 'last_pageview_id',
            'pageview_id': 'pageview_id',
            'visit_id': 'visit_id',
            'visitor_id': 'visitor_id'
        }

        self._last_pageview_id = last_pageview_id
        self._pageview_id = pageview_id
        self._visit_id = visit_id
        self._visitor_id = visitor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Visit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Visit of this Visit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_pageview_id(self):
        """Gets the last_pageview_id of this Visit.


        :return: The last_pageview_id of this Visit.
        :rtype: str
        """
        return self._last_pageview_id

    @last_pageview_id.setter
    def last_pageview_id(self, last_pageview_id):
        """Sets the last_pageview_id of this Visit.


        :param last_pageview_id: The last_pageview_id of this Visit.
        :type last_pageview_id: str
        """
        if last_pageview_id is None:
            raise ValueError("Invalid value for `last_pageview_id`, must not be `None`")

        self._last_pageview_id = last_pageview_id

    @property
    def pageview_id(self):
        """Gets the pageview_id of this Visit.


        :return: The pageview_id of this Visit.
        :rtype: str
        """
        return self._pageview_id

    @pageview_id.setter
    def pageview_id(self, pageview_id):
        """Sets the pageview_id of this Visit.


        :param pageview_id: The pageview_id of this Visit.
        :type pageview_id: str
        """
        if pageview_id is None:
            raise ValueError("Invalid value for `pageview_id`, must not be `None`")

        self._pageview_id = pageview_id

    @property
    def visit_id(self):
        """Gets the visit_id of this Visit.


        :return: The visit_id of this Visit.
        :rtype: str
        """
        return self._visit_id

    @visit_id.setter
    def visit_id(self, visit_id):
        """Sets the visit_id of this Visit.


        :param visit_id: The visit_id of this Visit.
        :type visit_id: str
        """
        if visit_id is None:
            raise ValueError("Invalid value for `visit_id`, must not be `None`")

        self._visit_id = visit_id

    @property
    def visitor_id(self):
        """Gets the visitor_id of this Visit.


        :return: The visitor_id of this Visit.
        :rtype: str
        """
        return self._visitor_id

    @visitor_id.setter
    def visitor_id(self, visitor_id):
        """Sets the visitor_id of this Visit.


        :param visitor_id: The visitor_id of this Visit.
        :type visitor_id: str
        """
        if visitor_id is None:
            raise ValueError("Invalid value for `visitor_id`, must not be `None`")

        self._visitor_id = visitor_id
