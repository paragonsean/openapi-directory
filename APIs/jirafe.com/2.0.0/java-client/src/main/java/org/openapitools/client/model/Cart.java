/*
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CartItem;
import org.openapitools.client.model.Customer;
import org.openapitools.client.model.Visit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Cart
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:45.949679-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cart {
  public static final String SERIALIZED_NAME_CART_ID = "cart_id";
  @SerializedName(SERIALIZED_NAME_CART_ID)
  private String cartId;

  public static final String SERIALIZED_NAME_CHANGE_DATE = "change_date";
  @SerializedName(SERIALIZED_NAME_CHANGE_DATE)
  private OffsetDateTime changeDate;

  public static final String SERIALIZED_NAME_COOKIES = "cookies";
  @SerializedName(SERIALIZED_NAME_COOKIES)
  private Object cookies;

  public static final String SERIALIZED_NAME_CREATE_DATE = "create_date";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<CartItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREVIOUS_ITEMS = "previous_items";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_ITEMS)
  private List<CartItem> previousItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private BigDecimal subtotal;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNTS = "total_discounts";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNTS)
  private BigDecimal totalDiscounts;

  public static final String SERIALIZED_NAME_TOTAL_PAYMENT_COST = "total_payment_cost";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAYMENT_COST)
  private BigDecimal totalPaymentCost;

  public static final String SERIALIZED_NAME_TOTAL_SHIPPING = "total_shipping";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHIPPING)
  private BigDecimal totalShipping;

  public static final String SERIALIZED_NAME_TOTAL_TAX = "total_tax";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX)
  private BigDecimal totalTax;

  public static final String SERIALIZED_NAME_VISIT = "visit";
  @SerializedName(SERIALIZED_NAME_VISIT)
  private Visit visit;

  public Cart() {
  }

  public Cart cartId(String cartId) {
    this.cartId = cartId;
    return this;
  }

  /**
   * Get cartId
   * @return cartId
   */
  @javax.annotation.Nullable
  public String getCartId() {
    return cartId;
  }

  public void setCartId(String cartId) {
    this.cartId = cartId;
  }


  public Cart changeDate(OffsetDateTime changeDate) {
    this.changeDate = changeDate;
    return this;
  }

  /**
   * Get changeDate
   * @return changeDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getChangeDate() {
    return changeDate;
  }

  public void setChangeDate(OffsetDateTime changeDate) {
    this.changeDate = changeDate;
  }


  public Cart cookies(Object cookies) {
    this.cookies = cookies;
    return this;
  }

  /**
   * Get cookies
   * @return cookies
   */
  @javax.annotation.Nullable
  public Object getCookies() {
    return cookies;
  }

  public void setCookies(Object cookies) {
    this.cookies = cookies;
  }


  public Cart createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public Cart currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Cart customer(Customer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nonnull
  public Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Customer customer) {
    this.customer = customer;
  }


  public Cart id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Cart items(List<CartItem> items) {
    this.items = items;
    return this;
  }

  public Cart addItemsItem(CartItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nonnull
  public List<CartItem> getItems() {
    return items;
  }

  public void setItems(List<CartItem> items) {
    this.items = items;
  }


  public Cart previousItems(List<CartItem> previousItems) {
    this.previousItems = previousItems;
    return this;
  }

  public Cart addPreviousItemsItem(CartItem previousItemsItem) {
    if (this.previousItems == null) {
      this.previousItems = new ArrayList<>();
    }
    this.previousItems.add(previousItemsItem);
    return this;
  }

  /**
   * Get previousItems
   * @return previousItems
   */
  @javax.annotation.Nullable
  public List<CartItem> getPreviousItems() {
    return previousItems;
  }

  public void setPreviousItems(List<CartItem> previousItems) {
    this.previousItems = previousItems;
  }


  public Cart subtotal(BigDecimal subtotal) {
    this.subtotal = subtotal;
    return this;
  }

  /**
   * Get subtotal
   * @return subtotal
   */
  @javax.annotation.Nonnull
  public BigDecimal getSubtotal() {
    return subtotal;
  }

  public void setSubtotal(BigDecimal subtotal) {
    this.subtotal = subtotal;
  }


  public Cart total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * minimum: 0
   * maximum: 9007199254740992
   * @return total
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public Cart totalDiscounts(BigDecimal totalDiscounts) {
    this.totalDiscounts = totalDiscounts;
    return this;
  }

  /**
   * Get totalDiscounts
   * minimum: 0
   * maximum: 9007199254740992
   * @return totalDiscounts
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotalDiscounts() {
    return totalDiscounts;
  }

  public void setTotalDiscounts(BigDecimal totalDiscounts) {
    this.totalDiscounts = totalDiscounts;
  }


  public Cart totalPaymentCost(BigDecimal totalPaymentCost) {
    this.totalPaymentCost = totalPaymentCost;
    return this;
  }

  /**
   * Get totalPaymentCost
   * minimum: 0
   * maximum: 9007199254740992
   * @return totalPaymentCost
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotalPaymentCost() {
    return totalPaymentCost;
  }

  public void setTotalPaymentCost(BigDecimal totalPaymentCost) {
    this.totalPaymentCost = totalPaymentCost;
  }


  public Cart totalShipping(BigDecimal totalShipping) {
    this.totalShipping = totalShipping;
    return this;
  }

  /**
   * Get totalShipping
   * minimum: 0
   * maximum: 9007199254740992
   * @return totalShipping
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotalShipping() {
    return totalShipping;
  }

  public void setTotalShipping(BigDecimal totalShipping) {
    this.totalShipping = totalShipping;
  }


  public Cart totalTax(BigDecimal totalTax) {
    this.totalTax = totalTax;
    return this;
  }

  /**
   * Get totalTax
   * minimum: 0
   * maximum: 9007199254740992
   * @return totalTax
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotalTax() {
    return totalTax;
  }

  public void setTotalTax(BigDecimal totalTax) {
    this.totalTax = totalTax;
  }


  public Cart visit(Visit visit) {
    this.visit = visit;
    return this;
  }

  /**
   * Get visit
   * @return visit
   */
  @javax.annotation.Nullable
  public Visit getVisit() {
    return visit;
  }

  public void setVisit(Visit visit) {
    this.visit = visit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cart cart = (Cart) o;
    return Objects.equals(this.cartId, cart.cartId) &&
        Objects.equals(this.changeDate, cart.changeDate) &&
        Objects.equals(this.cookies, cart.cookies) &&
        Objects.equals(this.createDate, cart.createDate) &&
        Objects.equals(this.currency, cart.currency) &&
        Objects.equals(this.customer, cart.customer) &&
        Objects.equals(this.id, cart.id) &&
        Objects.equals(this.items, cart.items) &&
        Objects.equals(this.previousItems, cart.previousItems) &&
        Objects.equals(this.subtotal, cart.subtotal) &&
        Objects.equals(this.total, cart.total) &&
        Objects.equals(this.totalDiscounts, cart.totalDiscounts) &&
        Objects.equals(this.totalPaymentCost, cart.totalPaymentCost) &&
        Objects.equals(this.totalShipping, cart.totalShipping) &&
        Objects.equals(this.totalTax, cart.totalTax) &&
        Objects.equals(this.visit, cart.visit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cartId, changeDate, cookies, createDate, currency, customer, id, items, previousItems, subtotal, total, totalDiscounts, totalPaymentCost, totalShipping, totalTax, visit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cart {\n");
    sb.append("    cartId: ").append(toIndentedString(cartId)).append("\n");
    sb.append("    changeDate: ").append(toIndentedString(changeDate)).append("\n");
    sb.append("    cookies: ").append(toIndentedString(cookies)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    previousItems: ").append(toIndentedString(previousItems)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalDiscounts: ").append(toIndentedString(totalDiscounts)).append("\n");
    sb.append("    totalPaymentCost: ").append(toIndentedString(totalPaymentCost)).append("\n");
    sb.append("    totalShipping: ").append(toIndentedString(totalShipping)).append("\n");
    sb.append("    totalTax: ").append(toIndentedString(totalTax)).append("\n");
    sb.append("    visit: ").append(toIndentedString(visit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cart_id");
    openapiFields.add("change_date");
    openapiFields.add("cookies");
    openapiFields.add("create_date");
    openapiFields.add("currency");
    openapiFields.add("customer");
    openapiFields.add("id");
    openapiFields.add("items");
    openapiFields.add("previous_items");
    openapiFields.add("subtotal");
    openapiFields.add("total");
    openapiFields.add("total_discounts");
    openapiFields.add("total_payment_cost");
    openapiFields.add("total_shipping");
    openapiFields.add("total_tax");
    openapiFields.add("visit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("change_date");
    openapiRequiredFields.add("create_date");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("customer");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("subtotal");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("total_discounts");
    openapiRequiredFields.add("total_payment_cost");
    openapiRequiredFields.add("total_shipping");
    openapiRequiredFields.add("total_tax");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cart
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cart is not found in the empty JSON string", Cart.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Cart.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cart_id") != null && !jsonObj.get("cart_id").isJsonNull()) && !jsonObj.get("cart_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cart_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cart_id").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `customer`
      Customer.validateJsonElement(jsonObj.get("customer"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        CartItem.validateJsonElement(jsonArrayitems.get(i));
      };
      if (jsonObj.get("previous_items") != null && !jsonObj.get("previous_items").isJsonNull()) {
        JsonArray jsonArraypreviousItems = jsonObj.getAsJsonArray("previous_items");
        if (jsonArraypreviousItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("previous_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `previous_items` to be an array in the JSON string but got `%s`", jsonObj.get("previous_items").toString()));
          }

          // validate the optional field `previous_items` (array)
          for (int i = 0; i < jsonArraypreviousItems.size(); i++) {
            CartItem.validateJsonElement(jsonArraypreviousItems.get(i));
          };
        }
      }
      // validate the optional field `visit`
      if (jsonObj.get("visit") != null && !jsonObj.get("visit").isJsonNull()) {
        Visit.validateJsonElement(jsonObj.get("visit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cart.class));

       return (TypeAdapter<T>) new TypeAdapter<Cart>() {
           @Override
           public void write(JsonWriter out, Cart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cart read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cart given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cart
   * @throws IOException if the JSON string is invalid with respect to Cart
   */
  public static Cart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cart.class);
  }

  /**
   * Convert an instance of Cart to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

