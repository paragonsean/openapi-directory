/*
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Cart;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.Customer;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.Product;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Batch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:45.949679-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Batch {
  public static final String SERIALIZED_NAME_CART = "cart";
  @SerializedName(SERIALIZED_NAME_CART)
  private List<Cart> cart = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private List<Category> category = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private List<Customer> customer = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMPLOYEE = "employee";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE)
  private List<Object> employee = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private List<Order> order = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private List<Product> product = new ArrayList<>();

  public Batch() {
  }

  public Batch cart(List<Cart> cart) {
    this.cart = cart;
    return this;
  }

  public Batch addCartItem(Cart cartItem) {
    if (this.cart == null) {
      this.cart = new ArrayList<>();
    }
    this.cart.add(cartItem);
    return this;
  }

  /**
   * Get cart
   * @return cart
   */
  @javax.annotation.Nullable
  public List<Cart> getCart() {
    return cart;
  }

  public void setCart(List<Cart> cart) {
    this.cart = cart;
  }


  public Batch category(List<Category> category) {
    this.category = category;
    return this;
  }

  public Batch addCategoryItem(Category categoryItem) {
    if (this.category == null) {
      this.category = new ArrayList<>();
    }
    this.category.add(categoryItem);
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public List<Category> getCategory() {
    return category;
  }

  public void setCategory(List<Category> category) {
    this.category = category;
  }


  public Batch customer(List<Customer> customer) {
    this.customer = customer;
    return this;
  }

  public Batch addCustomerItem(Customer customerItem) {
    if (this.customer == null) {
      this.customer = new ArrayList<>();
    }
    this.customer.add(customerItem);
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public List<Customer> getCustomer() {
    return customer;
  }

  public void setCustomer(List<Customer> customer) {
    this.customer = customer;
  }


  public Batch employee(List<Object> employee) {
    this.employee = employee;
    return this;
  }

  public Batch addEmployeeItem(Object employeeItem) {
    if (this.employee == null) {
      this.employee = new ArrayList<>();
    }
    this.employee.add(employeeItem);
    return this;
  }

  /**
   * Get employee
   * @return employee
   */
  @javax.annotation.Nullable
  public List<Object> getEmployee() {
    return employee;
  }

  public void setEmployee(List<Object> employee) {
    this.employee = employee;
  }


  public Batch order(List<Order> order) {
    this.order = order;
    return this;
  }

  public Batch addOrderItem(Order orderItem) {
    if (this.order == null) {
      this.order = new ArrayList<>();
    }
    this.order.add(orderItem);
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public List<Order> getOrder() {
    return order;
  }

  public void setOrder(List<Order> order) {
    this.order = order;
  }


  public Batch product(List<Product> product) {
    this.product = product;
    return this;
  }

  public Batch addProductItem(Product productItem) {
    if (this.product == null) {
      this.product = new ArrayList<>();
    }
    this.product.add(productItem);
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public List<Product> getProduct() {
    return product;
  }

  public void setProduct(List<Product> product) {
    this.product = product;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Batch batch = (Batch) o;
    return Objects.equals(this.cart, batch.cart) &&
        Objects.equals(this.category, batch.category) &&
        Objects.equals(this.customer, batch.customer) &&
        Objects.equals(this.employee, batch.employee) &&
        Objects.equals(this.order, batch.order) &&
        Objects.equals(this.product, batch.product);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cart, category, customer, employee, order, product);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Batch {\n");
    sb.append("    cart: ").append(toIndentedString(cart)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cart");
    openapiFields.add("category");
    openapiFields.add("customer");
    openapiFields.add("employee");
    openapiFields.add("order");
    openapiFields.add("product");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Batch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Batch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Batch is not found in the empty JSON string", Batch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Batch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Batch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cart") != null && !jsonObj.get("cart").isJsonNull()) {
        JsonArray jsonArraycart = jsonObj.getAsJsonArray("cart");
        if (jsonArraycart != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cart").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cart` to be an array in the JSON string but got `%s`", jsonObj.get("cart").toString()));
          }

          // validate the optional field `cart` (array)
          for (int i = 0; i < jsonArraycart.size(); i++) {
            Cart.validateJsonElement(jsonArraycart.get(i));
          };
        }
      }
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        JsonArray jsonArraycategory = jsonObj.getAsJsonArray("category");
        if (jsonArraycategory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("category").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
          }

          // validate the optional field `category` (array)
          for (int i = 0; i < jsonArraycategory.size(); i++) {
            Category.validateJsonElement(jsonArraycategory.get(i));
          };
        }
      }
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        JsonArray jsonArraycustomer = jsonObj.getAsJsonArray("customer");
        if (jsonArraycustomer != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customer").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customer` to be an array in the JSON string but got `%s`", jsonObj.get("customer").toString()));
          }

          // validate the optional field `customer` (array)
          for (int i = 0; i < jsonArraycustomer.size(); i++) {
            Customer.validateJsonElement(jsonArraycustomer.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("employee") != null && !jsonObj.get("employee").isJsonNull() && !jsonObj.get("employee").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee` to be an array in the JSON string but got `%s`", jsonObj.get("employee").toString()));
      }
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        JsonArray jsonArrayorder = jsonObj.getAsJsonArray("order");
        if (jsonArrayorder != null) {
          // ensure the json data is an array
          if (!jsonObj.get("order").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `order` to be an array in the JSON string but got `%s`", jsonObj.get("order").toString()));
          }

          // validate the optional field `order` (array)
          for (int i = 0; i < jsonArrayorder.size(); i++) {
            Order.validateJsonElement(jsonArrayorder.get(i));
          };
        }
      }
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        JsonArray jsonArrayproduct = jsonObj.getAsJsonArray("product");
        if (jsonArrayproduct != null) {
          // ensure the json data is an array
          if (!jsonObj.get("product").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `product` to be an array in the JSON string but got `%s`", jsonObj.get("product").toString()));
          }

          // validate the optional field `product` (array)
          for (int i = 0; i < jsonArrayproduct.size(); i++) {
            Product.validateJsonElement(jsonArrayproduct.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Batch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Batch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Batch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Batch.class));

       return (TypeAdapter<T>) new TypeAdapter<Batch>() {
           @Override
           public void write(JsonWriter out, Batch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Batch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Batch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Batch
   * @throws IOException if the JSON string is invalid with respect to Batch
   */
  public static Batch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Batch.class);
  }

  /**
   * Convert an instance of Batch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

