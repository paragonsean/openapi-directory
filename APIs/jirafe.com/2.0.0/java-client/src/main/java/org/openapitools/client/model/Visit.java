/*
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Visit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:45.949679-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Visit {
  public static final String SERIALIZED_NAME_LAST_PAGEVIEW_ID = "last_pageview_id";
  @SerializedName(SERIALIZED_NAME_LAST_PAGEVIEW_ID)
  private String lastPageviewId;

  public static final String SERIALIZED_NAME_PAGEVIEW_ID = "pageview_id";
  @SerializedName(SERIALIZED_NAME_PAGEVIEW_ID)
  private String pageviewId;

  public static final String SERIALIZED_NAME_VISIT_ID = "visit_id";
  @SerializedName(SERIALIZED_NAME_VISIT_ID)
  private String visitId;

  public static final String SERIALIZED_NAME_VISITOR_ID = "visitor_id";
  @SerializedName(SERIALIZED_NAME_VISITOR_ID)
  private String visitorId;

  public Visit() {
  }

  public Visit lastPageviewId(String lastPageviewId) {
    this.lastPageviewId = lastPageviewId;
    return this;
  }

  /**
   * Get lastPageviewId
   * @return lastPageviewId
   */
  @javax.annotation.Nonnull
  public String getLastPageviewId() {
    return lastPageviewId;
  }

  public void setLastPageviewId(String lastPageviewId) {
    this.lastPageviewId = lastPageviewId;
  }


  public Visit pageviewId(String pageviewId) {
    this.pageviewId = pageviewId;
    return this;
  }

  /**
   * Get pageviewId
   * @return pageviewId
   */
  @javax.annotation.Nonnull
  public String getPageviewId() {
    return pageviewId;
  }

  public void setPageviewId(String pageviewId) {
    this.pageviewId = pageviewId;
  }


  public Visit visitId(String visitId) {
    this.visitId = visitId;
    return this;
  }

  /**
   * Get visitId
   * @return visitId
   */
  @javax.annotation.Nonnull
  public String getVisitId() {
    return visitId;
  }

  public void setVisitId(String visitId) {
    this.visitId = visitId;
  }


  public Visit visitorId(String visitorId) {
    this.visitorId = visitorId;
    return this;
  }

  /**
   * Get visitorId
   * @return visitorId
   */
  @javax.annotation.Nonnull
  public String getVisitorId() {
    return visitorId;
  }

  public void setVisitorId(String visitorId) {
    this.visitorId = visitorId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Visit visit = (Visit) o;
    return Objects.equals(this.lastPageviewId, visit.lastPageviewId) &&
        Objects.equals(this.pageviewId, visit.pageviewId) &&
        Objects.equals(this.visitId, visit.visitId) &&
        Objects.equals(this.visitorId, visit.visitorId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastPageviewId, pageviewId, visitId, visitorId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Visit {\n");
    sb.append("    lastPageviewId: ").append(toIndentedString(lastPageviewId)).append("\n");
    sb.append("    pageviewId: ").append(toIndentedString(pageviewId)).append("\n");
    sb.append("    visitId: ").append(toIndentedString(visitId)).append("\n");
    sb.append("    visitorId: ").append(toIndentedString(visitorId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("last_pageview_id");
    openapiFields.add("pageview_id");
    openapiFields.add("visit_id");
    openapiFields.add("visitor_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("last_pageview_id");
    openapiRequiredFields.add("pageview_id");
    openapiRequiredFields.add("visit_id");
    openapiRequiredFields.add("visitor_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Visit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Visit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Visit is not found in the empty JSON string", Visit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Visit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Visit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Visit.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("last_pageview_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_pageview_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_pageview_id").toString()));
      }
      if (!jsonObj.get("pageview_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageview_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageview_id").toString()));
      }
      if (!jsonObj.get("visit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visit_id").toString()));
      }
      if (!jsonObj.get("visitor_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitor_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitor_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Visit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Visit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Visit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Visit.class));

       return (TypeAdapter<T>) new TypeAdapter<Visit>() {
           @Override
           public void write(JsonWriter out, Visit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Visit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Visit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Visit
   * @throws IOException if the JSON string is invalid with respect to Visit
   */
  public static Visit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Visit.class);
  }

  /**
   * Convert an instance of Visit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

