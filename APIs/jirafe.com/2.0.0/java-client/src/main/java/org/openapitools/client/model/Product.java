/*
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.Attribute;
import org.openapitools.client.model.BaseProduct;
import org.openapitools.client.model.Catalog;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.Url;
import org.openapitools.client.model.Vendor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Product
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:45.949679-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Product {
  public static final String SERIALIZED_NAME_ANCESTORS = "ancestors";
  @SerializedName(SERIALIZED_NAME_ANCESTORS)
  private List<String> ancestors = new ArrayList<>();

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Set<Attribute> attributes = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_BASE_PRODUCT = "base_product";
  @SerializedName(SERIALIZED_NAME_BASE_PRODUCT)
  private BaseProduct baseProduct;

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_CATALOG = "catalog";
  @SerializedName(SERIALIZED_NAME_CATALOG)
  private Catalog catalog;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private Set<Category> categories = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CHANGE_DATE = "change_date";
  @SerializedName(SERIALIZED_NAME_CHANGE_DATE)
  private OffsetDateTime changeDate;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CREATE_DATE = "create_date";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<Object> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_ORDER = "is_order";
  @SerializedName(SERIALIZED_NAME_IS_ORDER)
  private Boolean isOrder;

  public static final String SERIALIZED_NAME_IS_SKU = "is_sku";
  @SerializedName(SERIALIZED_NAME_IS_SKU)
  private Boolean isSku;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private BigDecimal rating;

  public static final String SERIALIZED_NAME_URLS = "urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private Url urls;

  public static final String SERIALIZED_NAME_VENDORS = "vendors";
  @SerializedName(SERIALIZED_NAME_VENDORS)
  private List<Vendor> vendors = new ArrayList<>();

  public Product() {
  }

  public Product ancestors(List<String> ancestors) {
    this.ancestors = ancestors;
    return this;
  }

  public Product addAncestorsItem(String ancestorsItem) {
    if (this.ancestors == null) {
      this.ancestors = new ArrayList<>();
    }
    this.ancestors.add(ancestorsItem);
    return this;
  }

  /**
   * Get ancestors
   * @return ancestors
   */
  @javax.annotation.Nullable
  public List<String> getAncestors() {
    return ancestors;
  }

  public void setAncestors(List<String> ancestors) {
    this.ancestors = ancestors;
  }


  public Product attributes(Set<Attribute> attributes) {
    this.attributes = attributes;
    return this;
  }

  public Product addAttributesItem(Attribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new LinkedHashSet<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Set<Attribute> getAttributes() {
    return attributes;
  }

  public void setAttributes(Set<Attribute> attributes) {
    this.attributes = attributes;
  }


  public Product baseProduct(BaseProduct baseProduct) {
    this.baseProduct = baseProduct;
    return this;
  }

  /**
   * Get baseProduct
   * @return baseProduct
   */
  @javax.annotation.Nullable
  public BaseProduct getBaseProduct() {
    return baseProduct;
  }

  public void setBaseProduct(BaseProduct baseProduct) {
    this.baseProduct = baseProduct;
  }


  public Product brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Get brand
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public Product catalog(Catalog catalog) {
    this.catalog = catalog;
    return this;
  }

  /**
   * Get catalog
   * @return catalog
   */
  @javax.annotation.Nullable
  public Catalog getCatalog() {
    return catalog;
  }

  public void setCatalog(Catalog catalog) {
    this.catalog = catalog;
  }


  public Product categories(Set<Category> categories) {
    this.categories = categories;
    return this;
  }

  public Product addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new LinkedHashSet<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public Set<Category> getCategories() {
    return categories;
  }

  public void setCategories(Set<Category> categories) {
    this.categories = categories;
  }


  public Product changeDate(OffsetDateTime changeDate) {
    this.changeDate = changeDate;
    return this;
  }

  /**
   * Get changeDate
   * @return changeDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getChangeDate() {
    return changeDate;
  }

  public void setChangeDate(OffsetDateTime changeDate) {
    this.changeDate = changeDate;
  }


  public Product code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Product createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public Product id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Product images(List<Object> images) {
    this.images = images;
    return this;
  }

  public Product addImagesItem(Object imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nullable
  public List<Object> getImages() {
    return images;
  }

  public void setImages(List<Object> images) {
    this.images = images;
  }


  public Product isOrder(Boolean isOrder) {
    this.isOrder = isOrder;
    return this;
  }

  /**
   * Get isOrder
   * @return isOrder
   */
  @javax.annotation.Nonnull
  public Boolean getIsOrder() {
    return isOrder;
  }

  public void setIsOrder(Boolean isOrder) {
    this.isOrder = isOrder;
  }


  public Product isSku(Boolean isSku) {
    this.isSku = isSku;
    return this;
  }

  /**
   * Get isSku
   * @return isSku
   */
  @javax.annotation.Nonnull
  public Boolean getIsSku() {
    return isSku;
  }

  public void setIsSku(Boolean isSku) {
    this.isSku = isSku;
  }


  public Product name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Product rating(BigDecimal rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public BigDecimal getRating() {
    return rating;
  }

  public void setRating(BigDecimal rating) {
    this.rating = rating;
  }


  public Product urls(Url urls) {
    this.urls = urls;
    return this;
  }

  /**
   * Get urls
   * @return urls
   */
  @javax.annotation.Nullable
  public Url getUrls() {
    return urls;
  }

  public void setUrls(Url urls) {
    this.urls = urls;
  }


  public Product vendors(List<Vendor> vendors) {
    this.vendors = vendors;
    return this;
  }

  public Product addVendorsItem(Vendor vendorsItem) {
    if (this.vendors == null) {
      this.vendors = new ArrayList<>();
    }
    this.vendors.add(vendorsItem);
    return this;
  }

  /**
   * Get vendors
   * @return vendors
   */
  @javax.annotation.Nullable
  public List<Vendor> getVendors() {
    return vendors;
  }

  public void setVendors(List<Vendor> vendors) {
    this.vendors = vendors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Product product = (Product) o;
    return Objects.equals(this.ancestors, product.ancestors) &&
        Objects.equals(this.attributes, product.attributes) &&
        Objects.equals(this.baseProduct, product.baseProduct) &&
        Objects.equals(this.brand, product.brand) &&
        Objects.equals(this.catalog, product.catalog) &&
        Objects.equals(this.categories, product.categories) &&
        Objects.equals(this.changeDate, product.changeDate) &&
        Objects.equals(this.code, product.code) &&
        Objects.equals(this.createDate, product.createDate) &&
        Objects.equals(this.id, product.id) &&
        Objects.equals(this.images, product.images) &&
        Objects.equals(this.isOrder, product.isOrder) &&
        Objects.equals(this.isSku, product.isSku) &&
        Objects.equals(this.name, product.name) &&
        Objects.equals(this.rating, product.rating) &&
        Objects.equals(this.urls, product.urls) &&
        Objects.equals(this.vendors, product.vendors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ancestors, attributes, baseProduct, brand, catalog, categories, changeDate, code, createDate, id, images, isOrder, isSku, name, rating, urls, vendors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Product {\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    baseProduct: ").append(toIndentedString(baseProduct)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    catalog: ").append(toIndentedString(catalog)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    changeDate: ").append(toIndentedString(changeDate)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    isOrder: ").append(toIndentedString(isOrder)).append("\n");
    sb.append("    isSku: ").append(toIndentedString(isSku)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("    vendors: ").append(toIndentedString(vendors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ancestors");
    openapiFields.add("attributes");
    openapiFields.add("base_product");
    openapiFields.add("brand");
    openapiFields.add("catalog");
    openapiFields.add("categories");
    openapiFields.add("change_date");
    openapiFields.add("code");
    openapiFields.add("create_date");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("is_order");
    openapiFields.add("is_sku");
    openapiFields.add("name");
    openapiFields.add("rating");
    openapiFields.add("urls");
    openapiFields.add("vendors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("change_date");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("create_date");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("is_order");
    openapiRequiredFields.add("is_sku");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Product
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Product.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Product is not found in the empty JSON string", Product.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Product.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Product` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Product.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ancestors") != null && !jsonObj.get("ancestors").isJsonNull() && !jsonObj.get("ancestors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ancestors` to be an array in the JSON string but got `%s`", jsonObj.get("ancestors").toString()));
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            Attribute.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      // validate the optional field `base_product`
      if (jsonObj.get("base_product") != null && !jsonObj.get("base_product").isJsonNull()) {
        BaseProduct.validateJsonElement(jsonObj.get("base_product"));
      }
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      // validate the optional field `catalog`
      if (jsonObj.get("catalog") != null && !jsonObj.get("catalog").isJsonNull()) {
        Catalog.validateJsonElement(jsonObj.get("catalog"));
      }
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            Category.validateJsonElement(jsonArraycategories.get(i));
          };
        }
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull() && !jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `urls`
      if (jsonObj.get("urls") != null && !jsonObj.get("urls").isJsonNull()) {
        Url.validateJsonElement(jsonObj.get("urls"));
      }
      if (jsonObj.get("vendors") != null && !jsonObj.get("vendors").isJsonNull()) {
        JsonArray jsonArrayvendors = jsonObj.getAsJsonArray("vendors");
        if (jsonArrayvendors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vendors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vendors` to be an array in the JSON string but got `%s`", jsonObj.get("vendors").toString()));
          }

          // validate the optional field `vendors` (array)
          for (int i = 0; i < jsonArrayvendors.size(); i++) {
            Vendor.validateJsonElement(jsonArrayvendors.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Product.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Product' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Product> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Product.class));

       return (TypeAdapter<T>) new TypeAdapter<Product>() {
           @Override
           public void write(JsonWriter out, Product value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Product read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Product given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Product
   * @throws IOException if the JSON string is invalid with respect to Product
   */
  public static Product fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Product.class);
  }

  /**
   * Convert an instance of Product to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

