/**
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Product from './Product';

/**
 * The CartItem model module.
 * @module model/CartItem
 * @version 2.0.0
 */
class CartItem {
    /**
     * Constructs a new <code>CartItem</code>.
     * @alias module:model/CartItem
     * @param cartItemNumber {String} 
     * @param changeDate {Date} 
     * @param createDate {Date} 
     * @param discountPrice {Number} 
     * @param id {String} 
     * @param price {Number} 
     * @param product {module:model/Product} 
     * @param quantity {Number} 
     */
    constructor(cartItemNumber, changeDate, createDate, discountPrice, id, price, product, quantity) { 
        
        CartItem.initialize(this, cartItemNumber, changeDate, createDate, discountPrice, id, price, product, quantity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cartItemNumber, changeDate, createDate, discountPrice, id, price, product, quantity) { 
        obj['cart_item_number'] = cartItemNumber;
        obj['change_date'] = changeDate;
        obj['create_date'] = createDate;
        obj['discount_price'] = discountPrice;
        obj['id'] = id;
        obj['price'] = price;
        obj['product'] = product;
        obj['quantity'] = quantity;
    }

    /**
     * Constructs a <code>CartItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CartItem} obj Optional instance to populate.
     * @return {module:model/CartItem} The populated <code>CartItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CartItem();

            if (data.hasOwnProperty('cart_item_number')) {
                obj['cart_item_number'] = ApiClient.convertToType(data['cart_item_number'], 'String');
            }
            if (data.hasOwnProperty('change_date')) {
                obj['change_date'] = ApiClient.convertToType(data['change_date'], 'Date');
            }
            if (data.hasOwnProperty('create_date')) {
                obj['create_date'] = ApiClient.convertToType(data['create_date'], 'Date');
            }
            if (data.hasOwnProperty('discount_price')) {
                obj['discount_price'] = ApiClient.convertToType(data['discount_price'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = Product.constructFromObject(data['product']);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CartItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CartItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CartItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cart_item_number'] && !(typeof data['cart_item_number'] === 'string' || data['cart_item_number'] instanceof String)) {
            throw new Error("Expected the field `cart_item_number` to be a primitive type in the JSON string but got " + data['cart_item_number']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `product`
        if (data['product']) { // data not null
          Product.validateJSON(data['product']);
        }

        return true;
    }


}

CartItem.RequiredProperties = ["cart_item_number", "change_date", "create_date", "discount_price", "id", "price", "product", "quantity"];

/**
 * @member {String} cart_item_number
 */
CartItem.prototype['cart_item_number'] = undefined;

/**
 * @member {Date} change_date
 */
CartItem.prototype['change_date'] = undefined;

/**
 * @member {Date} create_date
 */
CartItem.prototype['create_date'] = undefined;

/**
 * @member {Number} discount_price
 */
CartItem.prototype['discount_price'] = undefined;

/**
 * @member {String} id
 */
CartItem.prototype['id'] = undefined;

/**
 * @member {Number} price
 */
CartItem.prototype['price'] = undefined;

/**
 * @member {module:model/Product} product
 */
CartItem.prototype['product'] = undefined;

/**
 * @member {Number} quantity
 */
CartItem.prototype['quantity'] = undefined;






export default CartItem;

