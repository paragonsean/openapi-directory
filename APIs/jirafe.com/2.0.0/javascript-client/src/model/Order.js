/**
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Customer from './Customer';
import OrderItem from './OrderItem';

/**
 * The Order model module.
 * @module model/Order
 * @version 2.0.0
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * @alias module:model/Order
     * @param changeDate {Date} 
     * @param createDate {Date} 
     * @param currency {String} 
     * @param customer {module:model/Customer} 
     * @param items {Array.<module:model/OrderItem>} 
     * @param orderDate {Date} 
     * @param orderNumber {String} 
     * @param status {module:model/Order.StatusEnum} 
     * @param subtotal {Number} 
     * @param total {Number} 
     * @param totalDiscounts {Number} 
     * @param totalPaymentCost {Number} 
     * @param totalShipping {Number} 
     * @param totalTax {Number} 
     */
    constructor(changeDate, createDate, currency, customer, items, orderDate, orderNumber, status, subtotal, total, totalDiscounts, totalPaymentCost, totalShipping, totalTax) { 
        
        Order.initialize(this, changeDate, createDate, currency, customer, items, orderDate, orderNumber, status, subtotal, total, totalDiscounts, totalPaymentCost, totalShipping, totalTax);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, changeDate, createDate, currency, customer, items, orderDate, orderNumber, status, subtotal, total, totalDiscounts, totalPaymentCost, totalShipping, totalTax) { 
        obj['change_date'] = changeDate;
        obj['create_date'] = createDate;
        obj['currency'] = currency;
        obj['customer'] = customer;
        obj['items'] = items;
        obj['order_date'] = orderDate;
        obj['order_number'] = orderNumber;
        obj['status'] = status || 'accepted';
        obj['subtotal'] = subtotal;
        obj['total'] = total;
        obj['total_discounts'] = totalDiscounts;
        obj['total_payment_cost'] = totalPaymentCost;
        obj['total_shipping'] = totalShipping;
        obj['total_tax'] = totalTax;
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('cart_id')) {
                obj['cart_id'] = ApiClient.convertToType(data['cart_id'], 'String');
            }
            if (data.hasOwnProperty('change_date')) {
                obj['change_date'] = ApiClient.convertToType(data['change_date'], 'Date');
            }
            if (data.hasOwnProperty('create_date')) {
                obj['create_date'] = ApiClient.convertToType(data['create_date'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = Customer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [OrderItem]);
            }
            if (data.hasOwnProperty('order_date')) {
                obj['order_date'] = ApiClient.convertToType(data['order_date'], 'Date');
            }
            if (data.hasOwnProperty('order_number')) {
                obj['order_number'] = ApiClient.convertToType(data['order_number'], 'String');
            }
            if (data.hasOwnProperty('previous_items')) {
                obj['previous_items'] = ApiClient.convertToType(data['previous_items'], [OrderItem]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subtotal')) {
                obj['subtotal'] = ApiClient.convertToType(data['subtotal'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('total_discounts')) {
                obj['total_discounts'] = ApiClient.convertToType(data['total_discounts'], 'Number');
            }
            if (data.hasOwnProperty('total_payment_cost')) {
                obj['total_payment_cost'] = ApiClient.convertToType(data['total_payment_cost'], 'Number');
            }
            if (data.hasOwnProperty('total_shipping')) {
                obj['total_shipping'] = ApiClient.convertToType(data['total_shipping'], 'Number');
            }
            if (data.hasOwnProperty('total_tax')) {
                obj['total_tax'] = ApiClient.convertToType(data['total_tax'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Order</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Order</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Order.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cart_id'] && !(typeof data['cart_id'] === 'string' || data['cart_id'] instanceof String)) {
            throw new Error("Expected the field `cart_id` to be a primitive type in the JSON string but got " + data['cart_id']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          Customer.validateJSON(data['customer']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                OrderItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['order_number'] && !(typeof data['order_number'] === 'string' || data['order_number'] instanceof String)) {
            throw new Error("Expected the field `order_number` to be a primitive type in the JSON string but got " + data['order_number']);
        }
        if (data['previous_items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['previous_items'])) {
                throw new Error("Expected the field `previous_items` to be an array in the JSON data but got " + data['previous_items']);
            }
            // validate the optional field `previous_items` (array)
            for (const item of data['previous_items']) {
                OrderItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Order.RequiredProperties = ["change_date", "create_date", "currency", "customer", "items", "order_date", "order_number", "status", "subtotal", "total", "total_discounts", "total_payment_cost", "total_shipping", "total_tax"];

/**
 * @member {String} cart_id
 */
Order.prototype['cart_id'] = undefined;

/**
 * @member {Date} change_date
 */
Order.prototype['change_date'] = undefined;

/**
 * @member {Date} create_date
 */
Order.prototype['create_date'] = undefined;

/**
 * @member {String} currency
 */
Order.prototype['currency'] = undefined;

/**
 * @member {module:model/Customer} customer
 */
Order.prototype['customer'] = undefined;

/**
 * @member {Array.<module:model/OrderItem>} items
 */
Order.prototype['items'] = undefined;

/**
 * @member {Date} order_date
 */
Order.prototype['order_date'] = undefined;

/**
 * @member {String} order_number
 */
Order.prototype['order_number'] = undefined;

/**
 * @member {Array.<module:model/OrderItem>} previous_items
 */
Order.prototype['previous_items'] = undefined;

/**
 * @member {module:model/Order.StatusEnum} status
 * @default 'accepted'
 */
Order.prototype['status'] = 'accepted';

/**
 * @member {Number} subtotal
 */
Order.prototype['subtotal'] = undefined;

/**
 * @member {Number} total
 */
Order.prototype['total'] = undefined;

/**
 * @member {Number} total_discounts
 */
Order.prototype['total_discounts'] = undefined;

/**
 * @member {Number} total_payment_cost
 */
Order.prototype['total_payment_cost'] = undefined;

/**
 * @member {Number} total_shipping
 */
Order.prototype['total_shipping'] = undefined;

/**
 * @member {Number} total_tax
 */
Order.prototype['total_tax'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Order['StatusEnum'] = {

    /**
     * value: "accepted"
     * @const
     */
    "accepted": "accepted"
};



export default Order;

