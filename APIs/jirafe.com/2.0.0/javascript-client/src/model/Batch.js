/**
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cart from './Cart';
import Category from './Category';
import Customer from './Customer';
import Order from './Order';
import Product from './Product';

/**
 * The Batch model module.
 * @module model/Batch
 * @version 2.0.0
 */
class Batch {
    /**
     * Constructs a new <code>Batch</code>.
     * @alias module:model/Batch
     */
    constructor() { 
        
        Batch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Batch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Batch} obj Optional instance to populate.
     * @return {module:model/Batch} The populated <code>Batch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Batch();

            if (data.hasOwnProperty('cart')) {
                obj['cart'] = ApiClient.convertToType(data['cart'], [Cart]);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], [Category]);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = ApiClient.convertToType(data['customer'], [Customer]);
            }
            if (data.hasOwnProperty('employee')) {
                obj['employee'] = ApiClient.convertToType(data['employee'], [Object]);
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], [Order]);
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], [Product]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Batch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Batch</code>.
     */
    static validateJSON(data) {
        if (data['cart']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cart'])) {
                throw new Error("Expected the field `cart` to be an array in the JSON data but got " + data['cart']);
            }
            // validate the optional field `cart` (array)
            for (const item of data['cart']) {
                Cart.validateJSON(item);
            };
        }
        if (data['category']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['category'])) {
                throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
            }
            // validate the optional field `category` (array)
            for (const item of data['category']) {
                Category.validateJSON(item);
            };
        }
        if (data['customer']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customer'])) {
                throw new Error("Expected the field `customer` to be an array in the JSON data but got " + data['customer']);
            }
            // validate the optional field `customer` (array)
            for (const item of data['customer']) {
                Customer.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['employee'])) {
            throw new Error("Expected the field `employee` to be an array in the JSON data but got " + data['employee']);
        }
        if (data['order']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['order'])) {
                throw new Error("Expected the field `order` to be an array in the JSON data but got " + data['order']);
            }
            // validate the optional field `order` (array)
            for (const item of data['order']) {
                Order.validateJSON(item);
            };
        }
        if (data['product']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['product'])) {
                throw new Error("Expected the field `product` to be an array in the JSON data but got " + data['product']);
            }
            // validate the optional field `product` (array)
            for (const item of data['product']) {
                Product.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Cart>} cart
 */
Batch.prototype['cart'] = undefined;

/**
 * @member {Array.<module:model/Category>} category
 */
Batch.prototype['category'] = undefined;

/**
 * @member {Array.<module:model/Customer>} customer
 */
Batch.prototype['customer'] = undefined;

/**
 * @member {Array.<Object>} employee
 */
Batch.prototype['employee'] = undefined;

/**
 * @member {Array.<module:model/Order>} order
 */
Batch.prototype['order'] = undefined;

/**
 * @member {Array.<module:model/Product>} product
 */
Batch.prototype['product'] = undefined;






export default Batch;

