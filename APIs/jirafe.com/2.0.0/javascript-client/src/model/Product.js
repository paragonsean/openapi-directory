/**
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attribute from './Attribute';
import BaseProduct from './BaseProduct';
import Catalog from './Catalog';
import Category from './Category';
import Url from './Url';
import Vendor from './Vendor';

/**
 * The Product model module.
 * @module model/Product
 * @version 2.0.0
 */
class Product {
    /**
     * Constructs a new <code>Product</code>.
     * @alias module:model/Product
     * @param changeDate {Date} 
     * @param code {String} 
     * @param createDate {Date} 
     * @param id {String} 
     * @param isOrder {Boolean} 
     * @param isSku {Boolean} 
     */
    constructor(changeDate, code, createDate, id, isOrder, isSku) { 
        
        Product.initialize(this, changeDate, code, createDate, id, isOrder, isSku);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, changeDate, code, createDate, id, isOrder, isSku) { 
        obj['change_date'] = changeDate;
        obj['code'] = code;
        obj['create_date'] = createDate;
        obj['id'] = id;
        obj['is_order'] = isOrder;
        obj['is_sku'] = isSku;
    }

    /**
     * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Product} obj Optional instance to populate.
     * @return {module:model/Product} The populated <code>Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Product();

            if (data.hasOwnProperty('ancestors')) {
                obj['ancestors'] = ApiClient.convertToType(data['ancestors'], ['String']);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [Attribute]);
            }
            if (data.hasOwnProperty('base_product')) {
                obj['base_product'] = BaseProduct.constructFromObject(data['base_product']);
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('catalog')) {
                obj['catalog'] = Catalog.constructFromObject(data['catalog']);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
            if (data.hasOwnProperty('change_date')) {
                obj['change_date'] = ApiClient.convertToType(data['change_date'], 'Date');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('create_date')) {
                obj['create_date'] = ApiClient.convertToType(data['create_date'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Object]);
            }
            if (data.hasOwnProperty('is_order')) {
                obj['is_order'] = ApiClient.convertToType(data['is_order'], 'Boolean');
            }
            if (data.hasOwnProperty('is_sku')) {
                obj['is_sku'] = ApiClient.convertToType(data['is_sku'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rating')) {
                obj['rating'] = ApiClient.convertToType(data['rating'], 'Number');
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = Url.constructFromObject(data['urls']);
            }
            if (data.hasOwnProperty('vendors')) {
                obj['vendors'] = ApiClient.convertToType(data['vendors'], [Vendor]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Product</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Product</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Product.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ancestors'])) {
            throw new Error("Expected the field `ancestors` to be an array in the JSON data but got " + data['ancestors']);
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                Attribute.validateJSON(item);
            };
        }
        // validate the optional field `base_product`
        if (data['base_product']) { // data not null
          BaseProduct.validateJSON(data['base_product']);
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // validate the optional field `catalog`
        if (data['catalog']) { // data not null
          Catalog.validateJSON(data['catalog']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['images'])) {
            throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `urls`
        if (data['urls']) { // data not null
          Url.validateJSON(data['urls']);
        }
        if (data['vendors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vendors'])) {
                throw new Error("Expected the field `vendors` to be an array in the JSON data but got " + data['vendors']);
            }
            // validate the optional field `vendors` (array)
            for (const item of data['vendors']) {
                Vendor.validateJSON(item);
            };
        }

        return true;
    }


}

Product.RequiredProperties = ["change_date", "code", "create_date", "id", "is_order", "is_sku"];

/**
 * @member {Array.<String>} ancestors
 */
Product.prototype['ancestors'] = undefined;

/**
 * @member {Array.<module:model/Attribute>} attributes
 */
Product.prototype['attributes'] = undefined;

/**
 * @member {module:model/BaseProduct} base_product
 */
Product.prototype['base_product'] = undefined;

/**
 * @member {String} brand
 */
Product.prototype['brand'] = undefined;

/**
 * @member {module:model/Catalog} catalog
 */
Product.prototype['catalog'] = undefined;

/**
 * @member {Array.<module:model/Category>} categories
 */
Product.prototype['categories'] = undefined;

/**
 * @member {Date} change_date
 */
Product.prototype['change_date'] = undefined;

/**
 * @member {String} code
 */
Product.prototype['code'] = undefined;

/**
 * @member {Date} create_date
 */
Product.prototype['create_date'] = undefined;

/**
 * @member {String} id
 */
Product.prototype['id'] = undefined;

/**
 * @member {Array.<Object>} images
 */
Product.prototype['images'] = undefined;

/**
 * @member {Boolean} is_order
 */
Product.prototype['is_order'] = undefined;

/**
 * @member {Boolean} is_sku
 */
Product.prototype['is_sku'] = undefined;

/**
 * @member {String} name
 */
Product.prototype['name'] = undefined;

/**
 * @member {Number} rating
 */
Product.prototype['rating'] = undefined;

/**
 * @member {module:model/Url} urls
 */
Product.prototype['urls'] = undefined;

/**
 * @member {Array.<module:model/Vendor>} vendors
 */
Product.prototype['vendors'] = undefined;






export default Product;

