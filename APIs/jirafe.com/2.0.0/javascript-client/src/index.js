/**
 * Jirafe Events
 * API endpoins for sending Jirafe events
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@jirafe.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Attribute from './model/Attribute';
import BaseProduct from './model/BaseProduct';
import Batch from './model/Batch';
import Cart from './model/Cart';
import CartItem from './model/CartItem';
import Catalog from './model/Catalog';
import Category from './model/Category';
import Customer from './model/Customer';
import Order from './model/Order';
import OrderCancelled from './model/OrderCancelled';
import OrderItem from './model/OrderItem';
import ParentCategory from './model/ParentCategory';
import Product from './model/Product';
import Url from './model/Url';
import Vendor from './model/Vendor';
import Visit from './model/Visit';
import BatchApi from './api/BatchApi';
import CartApi from './api/CartApi';
import CategoryApi from './api/CategoryApi';
import CustomerApi from './api/CustomerApi';
import OrderApi from './api/OrderApi';
import ProductApi from './api/ProductApi';


/**
* API endpoins for sending Jirafe events.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var JirafeEvents = require('index'); // See note below*.
* var xxxSvc = new JirafeEvents.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new JirafeEvents.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new JirafeEvents.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new JirafeEvents.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Attribute model constructor.
     * @property {module:model/Attribute}
     */
    Attribute,

    /**
     * The BaseProduct model constructor.
     * @property {module:model/BaseProduct}
     */
    BaseProduct,

    /**
     * The Batch model constructor.
     * @property {module:model/Batch}
     */
    Batch,

    /**
     * The Cart model constructor.
     * @property {module:model/Cart}
     */
    Cart,

    /**
     * The CartItem model constructor.
     * @property {module:model/CartItem}
     */
    CartItem,

    /**
     * The Catalog model constructor.
     * @property {module:model/Catalog}
     */
    Catalog,

    /**
     * The Category model constructor.
     * @property {module:model/Category}
     */
    Category,

    /**
     * The Customer model constructor.
     * @property {module:model/Customer}
     */
    Customer,

    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order,

    /**
     * The OrderCancelled model constructor.
     * @property {module:model/OrderCancelled}
     */
    OrderCancelled,

    /**
     * The OrderItem model constructor.
     * @property {module:model/OrderItem}
     */
    OrderItem,

    /**
     * The ParentCategory model constructor.
     * @property {module:model/ParentCategory}
     */
    ParentCategory,

    /**
     * The Product model constructor.
     * @property {module:model/Product}
     */
    Product,

    /**
     * The Url model constructor.
     * @property {module:model/Url}
     */
    Url,

    /**
     * The Vendor model constructor.
     * @property {module:model/Vendor}
     */
    Vendor,

    /**
     * The Visit model constructor.
     * @property {module:model/Visit}
     */
    Visit,

    /**
    * The BatchApi service constructor.
    * @property {module:api/BatchApi}
    */
    BatchApi,

    /**
    * The CartApi service constructor.
    * @property {module:api/CartApi}
    */
    CartApi,

    /**
    * The CategoryApi service constructor.
    * @property {module:api/CategoryApi}
    */
    CategoryApi,

    /**
    * The CustomerApi service constructor.
    * @property {module:api/CustomerApi}
    */
    CustomerApi,

    /**
    * The OrderApi service constructor.
    * @property {module:api/OrderApi}
    */
    OrderApi,

    /**
    * The ProductApi service constructor.
    * @property {module:api/ProductApi}
    */
    ProductApi
};
