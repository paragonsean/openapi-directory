# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CostType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_group_number: int=None, is_barred: bool=None, last_updated: datetime=None, name: str=None, number: int=None, object_version: str=None, vat_code: str=None):
        """CostType - a model defined in OpenAPI

        :param cost_group_number: The cost_group_number of this CostType.
        :param is_barred: The is_barred of this CostType.
        :param last_updated: The last_updated of this CostType.
        :param name: The name of this CostType.
        :param number: The number of this CostType.
        :param object_version: The object_version of this CostType.
        :param vat_code: The vat_code of this CostType.
        """
        self.openapi_types = {
            'cost_group_number': int,
            'is_barred': bool,
            'last_updated': datetime,
            'name': str,
            'number': int,
            'object_version': str,
            'vat_code': str
        }

        self.attribute_map = {
            'cost_group_number': 'costGroupNumber',
            'is_barred': 'isBarred',
            'last_updated': 'lastUpdated',
            'name': 'name',
            'number': 'number',
            'object_version': 'objectVersion',
            'vat_code': 'vatCode'
        }

        self._cost_group_number = cost_group_number
        self._is_barred = is_barred
        self._last_updated = last_updated
        self._name = name
        self._number = number
        self._object_version = object_version
        self._vat_code = vat_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostType of this CostType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_group_number(self):
        """Gets the cost_group_number of this CostType.

        The number of the cost type group that the cost type belongs to.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>

        :return: The cost_group_number of this CostType.
        :rtype: int
        """
        return self._cost_group_number

    @cost_group_number.setter
    def cost_group_number(self, cost_group_number):
        """Sets the cost_group_number of this CostType.

        The number of the cost type group that the cost type belongs to.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>

        :param cost_group_number: The cost_group_number of this CostType.
        :type cost_group_number: int
        """
        if cost_group_number is None:
            raise ValueError("Invalid value for `cost_group_number`, must not be `None`")

        self._cost_group_number = cost_group_number

    @property
    def is_barred(self):
        """Gets the is_barred of this CostType.

        It shows whether the cost type can be used to create expenses or not.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The is_barred of this CostType.
        :rtype: bool
        """
        return self._is_barred

    @is_barred.setter
    def is_barred(self, is_barred):
        """Sets the is_barred of this CostType.

        It shows whether the cost type can be used to create expenses or not.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param is_barred: The is_barred of this CostType.
        :type is_barred: bool
        """

        self._is_barred = is_barred

    @property
    def last_updated(self):
        """Gets the last_updated of this CostType.

        The date when the cost type was last updated.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The last_updated of this CostType.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CostType.

        The date when the cost type was last updated.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param last_updated: The last_updated of this CostType.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this CostType.

        Name of the cost type.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: true</p>

        :return: The name of this CostType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CostType.

        Name of the cost type.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: true</p>

        :param name: The name of this CostType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def number(self):
        """Gets the number of this CostType.

        The unique number of the cost type.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The number of this CostType.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CostType.

        The unique number of the cost type.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param number: The number of this CostType.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and number > 999999999:
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `999999999`")
        if number is not None and number < 1:
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `1`")

        self._number = number

    @property
    def object_version(self):
        """Gets the object_version of this CostType.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The object_version of this CostType.
        :rtype: str
        """
        return self._object_version

    @object_version.setter
    def object_version(self, object_version):
        """Sets the object_version of this CostType.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param object_version: The object_version of this CostType.
        :type object_version: str
        """

        self._object_version = object_version

    @property
    def vat_code(self):
        """Gets the vat_code of this CostType.

        The code for the Vat that's going to be applied.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>

        :return: The vat_code of this CostType.
        :rtype: str
        """
        return self._vat_code

    @vat_code.setter
    def vat_code(self, vat_code):
        """Sets the vat_code of this CostType.

        The code for the Vat that's going to be applied.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: true</p>

        :param vat_code: The vat_code of this CostType.
        :type vat_code: str
        """

        self._vat_code = vat_code
