# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MileagePrices(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_price: float=None, cost_rate: float=None, number: int=None, sales_price: float=None, sales_rate: float=None):
        """MileagePrices - a model defined in OpenAPI

        :param cost_price: The cost_price of this MileagePrices.
        :param cost_rate: The cost_rate of this MileagePrices.
        :param number: The number of this MileagePrices.
        :param sales_price: The sales_price of this MileagePrices.
        :param sales_rate: The sales_rate of this MileagePrices.
        """
        self.openapi_types = {
            'cost_price': float,
            'cost_rate': float,
            'number': int,
            'sales_price': float,
            'sales_rate': float
        }

        self.attribute_map = {
            'cost_price': 'costPrice',
            'cost_rate': 'costRate',
            'number': 'number',
            'sales_price': 'salesPrice',
            'sales_rate': 'salesRate'
        }

        self._cost_price = cost_price
        self._cost_rate = cost_rate
        self._number = number
        self._sales_price = sales_price
        self._sales_rate = sales_rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MileagePrices':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MileagePrices of this MileagePrices.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_price(self):
        """Gets the cost_price of this MileagePrices.

        The total cost of the trip, calculated based on the mileage cost rates.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The cost_price of this MileagePrices.
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this MileagePrices.

        The total cost of the trip, calculated based on the mileage cost rates.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param cost_price: The cost_price of this MileagePrices.
        :type cost_price: float
        """

        self._cost_price = cost_price

    @property
    def cost_rate(self):
        """Gets the cost_rate of this MileagePrices.

        The cost of the trip per mile, provided by the mileage setup.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The cost_rate of this MileagePrices.
        :rtype: float
        """
        return self._cost_rate

    @cost_rate.setter
    def cost_rate(self, cost_rate):
        """Sets the cost_rate of this MileagePrices.

        The cost of the trip per mile, provided by the mileage setup.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param cost_rate: The cost_rate of this MileagePrices.
        :type cost_rate: float
        """

        self._cost_rate = cost_rate

    @property
    def number(self):
        """Gets the number of this MileagePrices.

        The mileage entry identifier.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The number of this MileagePrices.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this MileagePrices.

        The mileage entry identifier.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param number: The number of this MileagePrices.
        :type number: int
        """

        self._number = number

    @property
    def sales_price(self):
        """Gets the sales_price of this MileagePrices.

        The total sales price of the trip, calculated based on the mileage sales rates.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The sales_price of this MileagePrices.
        :rtype: float
        """
        return self._sales_price

    @sales_price.setter
    def sales_price(self, sales_price):
        """Sets the sales_price of this MileagePrices.

        The total sales price of the trip, calculated based on the mileage sales rates.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param sales_price: The sales_price of this MileagePrices.
        :type sales_price: float
        """

        self._sales_price = sales_price

    @property
    def sales_rate(self):
        """Gets the sales_rate of this MileagePrices.

        The sales price of the trip per mile, provided by the mileage setup.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The sales_rate of this MileagePrices.
        :rtype: float
        """
        return self._sales_rate

    @sales_rate.setter
    def sales_rate(self, sales_rate):
        """Sets the sales_rate of this MileagePrices.

        The sales price of the trip per mile, provided by the mileage setup.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param sales_rate: The sales_rate of this MileagePrices.
        :type sales_rate: float
        """

        self._sales_rate = sales_rate
