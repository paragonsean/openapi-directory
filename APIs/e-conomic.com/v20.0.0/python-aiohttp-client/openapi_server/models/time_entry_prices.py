# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeEntryPrices(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_price: float=None, number: int=None, sales_price: float=None):
        """TimeEntryPrices - a model defined in OpenAPI

        :param cost_price: The cost_price of this TimeEntryPrices.
        :param number: The number of this TimeEntryPrices.
        :param sales_price: The sales_price of this TimeEntryPrices.
        """
        self.openapi_types = {
            'cost_price': float,
            'number': int,
            'sales_price': float
        }

        self.attribute_map = {
            'cost_price': 'costPrice',
            'number': 'number',
            'sales_price': 'salesPrice'
        }

        self._cost_price = cost_price
        self._number = number
        self._sales_price = sales_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeEntryPrices':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeEntryPrices of this TimeEntryPrices.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_price(self):
        """Gets the cost_price of this TimeEntryPrices.

        The time entry cost price, calculated based on the activity cost price or on the employee cost price when no activity price is provided.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The cost_price of this TimeEntryPrices.
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this TimeEntryPrices.

        The time entry cost price, calculated based on the activity cost price or on the employee cost price when no activity price is provided.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param cost_price: The cost_price of this TimeEntryPrices.
        :type cost_price: float
        """

        self._cost_price = cost_price

    @property
    def number(self):
        """Gets the number of this TimeEntryPrices.

        The time entry identifier.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The number of this TimeEntryPrices.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TimeEntryPrices.

        The time entry identifier.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param number: The number of this TimeEntryPrices.
        :type number: int
        """

        self._number = number

    @property
    def sales_price(self):
        """Gets the sales_price of this TimeEntryPrices.

        The time entry sales price, calculated based on the activity sales price or on the employee sales price when no activity price is provided.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The sales_price of this TimeEntryPrices.
        :rtype: float
        """
        return self._sales_price

    @sales_price.setter
    def sales_price(self, sales_price):
        """Sets the sales_price of this TimeEntryPrices.

        The time entry sales price, calculated based on the activity sales price or on the employee sales price when no activity price is provided.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param sales_price: The sales_price of this TimeEntryPrices.
        :type sales_price: float
        """

        self._sales_price = sales_price
