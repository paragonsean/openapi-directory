# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_date: datetime=None, contact_person_id: int=None, cost_price: float=None, customer_number: int=None, delivery_date: datetime=None, delivery_location_number: int=None, department_number: int=None, description: str=None, fixed_price: float=None, invoiced_total: float=None, is_barred: bool=None, is_closed: bool=None, is_main_project: bool=None, is_mileage_invoiced: bool=None, last_updated: datetime=None, main_project_number: int=None, mileage: float=None, name: str=None, number: int=None, object_version: str=None, other_responsible_employee_number: int=None, project_group_number: int=None, responsible_employee_number: int=None, sales_price: float=None, status: int=None):
        """Project - a model defined in OpenAPI

        :param closed_date: The closed_date of this Project.
        :param contact_person_id: The contact_person_id of this Project.
        :param cost_price: The cost_price of this Project.
        :param customer_number: The customer_number of this Project.
        :param delivery_date: The delivery_date of this Project.
        :param delivery_location_number: The delivery_location_number of this Project.
        :param department_number: The department_number of this Project.
        :param description: The description of this Project.
        :param fixed_price: The fixed_price of this Project.
        :param invoiced_total: The invoiced_total of this Project.
        :param is_barred: The is_barred of this Project.
        :param is_closed: The is_closed of this Project.
        :param is_main_project: The is_main_project of this Project.
        :param is_mileage_invoiced: The is_mileage_invoiced of this Project.
        :param last_updated: The last_updated of this Project.
        :param main_project_number: The main_project_number of this Project.
        :param mileage: The mileage of this Project.
        :param name: The name of this Project.
        :param number: The number of this Project.
        :param object_version: The object_version of this Project.
        :param other_responsible_employee_number: The other_responsible_employee_number of this Project.
        :param project_group_number: The project_group_number of this Project.
        :param responsible_employee_number: The responsible_employee_number of this Project.
        :param sales_price: The sales_price of this Project.
        :param status: The status of this Project.
        """
        self.openapi_types = {
            'closed_date': datetime,
            'contact_person_id': int,
            'cost_price': float,
            'customer_number': int,
            'delivery_date': datetime,
            'delivery_location_number': int,
            'department_number': int,
            'description': str,
            'fixed_price': float,
            'invoiced_total': float,
            'is_barred': bool,
            'is_closed': bool,
            'is_main_project': bool,
            'is_mileage_invoiced': bool,
            'last_updated': datetime,
            'main_project_number': int,
            'mileage': float,
            'name': str,
            'number': int,
            'object_version': str,
            'other_responsible_employee_number': int,
            'project_group_number': int,
            'responsible_employee_number': int,
            'sales_price': float,
            'status': int
        }

        self.attribute_map = {
            'closed_date': 'closedDate',
            'contact_person_id': 'contactPersonId',
            'cost_price': 'costPrice',
            'customer_number': 'customerNumber',
            'delivery_date': 'deliveryDate',
            'delivery_location_number': 'deliveryLocationNumber',
            'department_number': 'departmentNumber',
            'description': 'description',
            'fixed_price': 'fixedPrice',
            'invoiced_total': 'invoicedTotal',
            'is_barred': 'isBarred',
            'is_closed': 'isClosed',
            'is_main_project': 'isMainProject',
            'is_mileage_invoiced': 'isMileageInvoiced',
            'last_updated': 'lastUpdated',
            'main_project_number': 'mainProjectNumber',
            'mileage': 'mileage',
            'name': 'name',
            'number': 'number',
            'object_version': 'objectVersion',
            'other_responsible_employee_number': 'otherResponsibleEmployeeNumber',
            'project_group_number': 'projectGroupNumber',
            'responsible_employee_number': 'responsibleEmployeeNumber',
            'sales_price': 'salesPrice',
            'status': 'status'
        }

        self._closed_date = closed_date
        self._contact_person_id = contact_person_id
        self._cost_price = cost_price
        self._customer_number = customer_number
        self._delivery_date = delivery_date
        self._delivery_location_number = delivery_location_number
        self._department_number = department_number
        self._description = description
        self._fixed_price = fixed_price
        self._invoiced_total = invoiced_total
        self._is_barred = is_barred
        self._is_closed = is_closed
        self._is_main_project = is_main_project
        self._is_mileage_invoiced = is_mileage_invoiced
        self._last_updated = last_updated
        self._main_project_number = main_project_number
        self._mileage = mileage
        self._name = name
        self._number = number
        self._object_version = object_version
        self._other_responsible_employee_number = other_responsible_employee_number
        self._project_group_number = project_group_number
        self._responsible_employee_number = responsible_employee_number
        self._sales_price = sales_price
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_date(self):
        """Gets the closed_date of this Project.

        The date when the project was closed and booked.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The closed_date of this Project.
        :rtype: datetime
        """
        return self._closed_date

    @closed_date.setter
    def closed_date(self, closed_date):
        """Sets the closed_date of this Project.

        The date when the project was closed and booked.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param closed_date: The closed_date of this Project.
        :type closed_date: datetime
        """

        self._closed_date = closed_date

    @property
    def contact_person_id(self):
        """Gets the contact_person_id of this Project.

        The number of the contact person. Has to be from the same customer as the one defined in the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The contact_person_id of this Project.
        :rtype: int
        """
        return self._contact_person_id

    @contact_person_id.setter
    def contact_person_id(self, contact_person_id):
        """Sets the contact_person_id of this Project.

        The number of the contact person. Has to be from the same customer as the one defined in the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param contact_person_id: The contact_person_id of this Project.
        :type contact_person_id: int
        """

        self._contact_person_id = contact_person_id

    @property
    def cost_price(self):
        """Gets the cost_price of this Project.

        Sum of registrations based on cost price for the project<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The cost_price of this Project.
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this Project.

        Sum of registrations based on cost price for the project<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param cost_price: The cost_price of this Project.
        :type cost_price: float
        """

        self._cost_price = cost_price

    @property
    def customer_number(self):
        """Gets the customer_number of this Project.

        Number of customer this project is for. Required if project type is not Internal.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The customer_number of this Project.
        :rtype: int
        """
        return self._customer_number

    @customer_number.setter
    def customer_number(self, customer_number):
        """Sets the customer_number of this Project.

        Number of customer this project is for. Required if project type is not Internal.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param customer_number: The customer_number of this Project.
        :type customer_number: int
        """
        if customer_number is not None and customer_number > 999999999:
            raise ValueError("Invalid value for `customer_number`, must be a value less than or equal to `999999999`")
        if customer_number is not None and customer_number < 1:
            raise ValueError("Invalid value for `customer_number`, must be a value greater than or equal to `1`")

        self._customer_number = customer_number

    @property
    def delivery_date(self):
        """Gets the delivery_date of this Project.

        The project delivery date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The delivery_date of this Project.
        :rtype: datetime
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this Project.

        The project delivery date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param delivery_date: The delivery_date of this Project.
        :type delivery_date: datetime
        """

        self._delivery_date = delivery_date

    @property
    def delivery_location_number(self):
        """Gets the delivery_location_number of this Project.

        The location number used to deliver the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The delivery_location_number of this Project.
        :rtype: int
        """
        return self._delivery_location_number

    @delivery_location_number.setter
    def delivery_location_number(self, delivery_location_number):
        """Sets the delivery_location_number of this Project.

        The location number used to deliver the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param delivery_location_number: The delivery_location_number of this Project.
        :type delivery_location_number: int
        """

        self._delivery_location_number = delivery_location_number

    @property
    def department_number(self):
        """Gets the department_number of this Project.

        Only relevant if the user uses addon dimensions<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The department_number of this Project.
        :rtype: int
        """
        return self._department_number

    @department_number.setter
    def department_number(self, department_number):
        """Sets the department_number of this Project.

        Only relevant if the user uses addon dimensions<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param department_number: The department_number of this Project.
        :type department_number: int
        """

        self._department_number = department_number

    @property
    def description(self):
        """Gets the description of this Project.

        Text describing the project.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.

        Text describing the project.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param description: The description of this Project.
        :type description: str
        """
        if description is not None and len(description) > 2500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2500`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def fixed_price(self):
        """Gets the fixed_price of this Project.

        If a fixed price is agreed upon with a customer, this can be utilized. It is not retrieved when invoicing, however, so it is only used for reporting.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The fixed_price of this Project.
        :rtype: float
        """
        return self._fixed_price

    @fixed_price.setter
    def fixed_price(self, fixed_price):
        """Sets the fixed_price of this Project.

        If a fixed price is agreed upon with a customer, this can be utilized. It is not retrieved when invoicing, however, so it is only used for reporting.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param fixed_price: The fixed_price of this Project.
        :type fixed_price: float
        """

        self._fixed_price = fixed_price

    @property
    def invoiced_total(self):
        """Gets the invoiced_total of this Project.

        Sum of invoiced amount for the project<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The invoiced_total of this Project.
        :rtype: float
        """
        return self._invoiced_total

    @invoiced_total.setter
    def invoiced_total(self, invoiced_total):
        """Sets the invoiced_total of this Project.

        Sum of invoiced amount for the project<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param invoiced_total: The invoiced_total of this Project.
        :type invoiced_total: float
        """

        self._invoiced_total = invoiced_total

    @property
    def is_barred(self):
        """Gets the is_barred of this Project.

        Barred projects cannot retrieve registrations<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The is_barred of this Project.
        :rtype: bool
        """
        return self._is_barred

    @is_barred.setter
    def is_barred(self, is_barred):
        """Sets the is_barred of this Project.

        Barred projects cannot retrieve registrations<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param is_barred: The is_barred of this Project.
        :type is_barred: bool
        """

        self._is_barred = is_barred

    @property
    def is_closed(self):
        """Gets the is_closed of this Project.

        Shows if the project is closed. Closed project can't accept more entries.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The is_closed of this Project.
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this Project.

        Shows if the project is closed. Closed project can't accept more entries.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param is_closed: The is_closed of this Project.
        :type is_closed: bool
        """

        self._is_closed = is_closed

    @property
    def is_main_project(self):
        """Gets the is_main_project of this Project.

        Decides whether the project is a main-project or sub-project. If false, it is a sub-project. If true, it is a main-project. Main-projects are grouping of projects. Main-project can't have entries, only sub-projects can.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The is_main_project of this Project.
        :rtype: bool
        """
        return self._is_main_project

    @is_main_project.setter
    def is_main_project(self, is_main_project):
        """Sets the is_main_project of this Project.

        Decides whether the project is a main-project or sub-project. If false, it is a sub-project. If true, it is a main-project. Main-projects are grouping of projects. Main-project can't have entries, only sub-projects can.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param is_main_project: The is_main_project of this Project.
        :type is_main_project: bool
        """

        self._is_main_project = is_main_project

    @property
    def is_mileage_invoiced(self):
        """Gets the is_mileage_invoiced of this Project.

        Determines whether mileage should be included on sales invoices of the project<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The is_mileage_invoiced of this Project.
        :rtype: bool
        """
        return self._is_mileage_invoiced

    @is_mileage_invoiced.setter
    def is_mileage_invoiced(self, is_mileage_invoiced):
        """Sets the is_mileage_invoiced of this Project.

        Determines whether mileage should be included on sales invoices of the project<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param is_mileage_invoiced: The is_mileage_invoiced of this Project.
        :type is_mileage_invoiced: bool
        """

        self._is_mileage_invoiced = is_mileage_invoiced

    @property
    def last_updated(self):
        """Gets the last_updated of this Project.

        The date and time when this project was last updated. Use it in the filter to retrieve only updated projects.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The last_updated of this Project.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Project.

        The date and time when this project was last updated. Use it in the filter to retrieve only updated projects.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param last_updated: The last_updated of this Project.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def main_project_number(self):
        """Gets the main_project_number of this Project.

        The number of the main project, if this is a sub project linked to a main project. It can be null for both main and sub projects (sub project can exist not linked to any main project, like standalone project).<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The main_project_number of this Project.
        :rtype: int
        """
        return self._main_project_number

    @main_project_number.setter
    def main_project_number(self, main_project_number):
        """Sets the main_project_number of this Project.

        The number of the main project, if this is a sub project linked to a main project. It can be null for both main and sub projects (sub project can exist not linked to any main project, like standalone project).<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param main_project_number: The main_project_number of this Project.
        :type main_project_number: int
        """

        self._main_project_number = main_project_number

    @property
    def mileage(self):
        """Gets the mileage of this Project.

        Default amount of mileage for the project<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The mileage of this Project.
        :rtype: float
        """
        return self._mileage

    @mileage.setter
    def mileage(self, mileage):
        """Sets the mileage of this Project.

        Default amount of mileage for the project<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param mileage: The mileage of this Project.
        :type mileage: float
        """

        self._mileage = mileage

    @property
    def name(self):
        """Gets the name of this Project.

        Name of the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>

        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        Name of the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>

        :param name: The name of this Project.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def number(self):
        """Gets the number of this Project.

        The unique number of the project. If it's not provided in the POST requests, it's auto-generated.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The number of this Project.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Project.

        The unique number of the project. If it's not provided in the POST requests, it's auto-generated.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param number: The number of this Project.
        :type number: int
        """
        if number is not None and number > 999999999:
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `999999999`")
        if number is not None and number < 0:
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `0`")

        self._number = number

    @property
    def object_version(self):
        """Gets the object_version of this Project.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The object_version of this Project.
        :rtype: str
        """
        return self._object_version

    @object_version.setter
    def object_version(self, object_version):
        """Sets the object_version of this Project.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param object_version: The object_version of this Project.
        :type object_version: str
        """

        self._object_version = object_version

    @property
    def other_responsible_employee_number(self):
        """Gets the other_responsible_employee_number of this Project.

        Second employee number that is responsible for the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The other_responsible_employee_number of this Project.
        :rtype: int
        """
        return self._other_responsible_employee_number

    @other_responsible_employee_number.setter
    def other_responsible_employee_number(self, other_responsible_employee_number):
        """Sets the other_responsible_employee_number of this Project.

        Second employee number that is responsible for the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param other_responsible_employee_number: The other_responsible_employee_number of this Project.
        :type other_responsible_employee_number: int
        """

        self._other_responsible_employee_number = other_responsible_employee_number

    @property
    def project_group_number(self):
        """Gets the project_group_number of this Project.

        The number of the project group that this project belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The project_group_number of this Project.
        :rtype: int
        """
        return self._project_group_number

    @project_group_number.setter
    def project_group_number(self, project_group_number):
        """Sets the project_group_number of this Project.

        The number of the project group that this project belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param project_group_number: The project_group_number of this Project.
        :type project_group_number: int
        """
        if project_group_number is None:
            raise ValueError("Invalid value for `project_group_number`, must not be `None`")

        self._project_group_number = project_group_number

    @property
    def responsible_employee_number(self):
        """Gets the responsible_employee_number of this Project.

        The employee number that is responsible for the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The responsible_employee_number of this Project.
        :rtype: int
        """
        return self._responsible_employee_number

    @responsible_employee_number.setter
    def responsible_employee_number(self, responsible_employee_number):
        """Sets the responsible_employee_number of this Project.

        The employee number that is responsible for the project.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param responsible_employee_number: The responsible_employee_number of this Project.
        :type responsible_employee_number: int
        """

        self._responsible_employee_number = responsible_employee_number

    @property
    def sales_price(self):
        """Gets the sales_price of this Project.

        Sum of registrations based on sales price for the project<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The sales_price of this Project.
        :rtype: float
        """
        return self._sales_price

    @sales_price.setter
    def sales_price(self, sales_price):
        """Sets the sales_price of this Project.

        Sum of registrations based on sales price for the project<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param sales_price: The sales_price of this Project.
        :type sales_price: float
        """

        self._sales_price = sales_price

    @property
    def status(self):
        """Gets the status of this Project.

        The number of the project status. Project status is a separate manageable resource.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The status of this Project.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Project.

        The number of the project status. Project status is a separate manageable resource.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param status: The status of this Project.
        :type status: int
        """

        self._status = status
