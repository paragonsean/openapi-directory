# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.employee_type import EmployeeType
from openapi_server import util


class ProjectEmployee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, can_approve: bool=None, can_invoice: bool=None, city: str=None, cost_price_after: float=None, cost_price_before: float=None, cut_off_date: date=None, employee_type: EmployeeType=None, group_number: int=None, is_barred: bool=None, is_user: bool=None, name: str=None, number: int=None, object_version: str=None, sales_price_after: float=None, sales_price_before: float=None, user_id: str=None, zip_code: str=None):
        """ProjectEmployee - a model defined in OpenAPI

        :param address: The address of this ProjectEmployee.
        :param can_approve: The can_approve of this ProjectEmployee.
        :param can_invoice: The can_invoice of this ProjectEmployee.
        :param city: The city of this ProjectEmployee.
        :param cost_price_after: The cost_price_after of this ProjectEmployee.
        :param cost_price_before: The cost_price_before of this ProjectEmployee.
        :param cut_off_date: The cut_off_date of this ProjectEmployee.
        :param employee_type: The employee_type of this ProjectEmployee.
        :param group_number: The group_number of this ProjectEmployee.
        :param is_barred: The is_barred of this ProjectEmployee.
        :param is_user: The is_user of this ProjectEmployee.
        :param name: The name of this ProjectEmployee.
        :param number: The number of this ProjectEmployee.
        :param object_version: The object_version of this ProjectEmployee.
        :param sales_price_after: The sales_price_after of this ProjectEmployee.
        :param sales_price_before: The sales_price_before of this ProjectEmployee.
        :param user_id: The user_id of this ProjectEmployee.
        :param zip_code: The zip_code of this ProjectEmployee.
        """
        self.openapi_types = {
            'address': str,
            'can_approve': bool,
            'can_invoice': bool,
            'city': str,
            'cost_price_after': float,
            'cost_price_before': float,
            'cut_off_date': date,
            'employee_type': EmployeeType,
            'group_number': int,
            'is_barred': bool,
            'is_user': bool,
            'name': str,
            'number': int,
            'object_version': str,
            'sales_price_after': float,
            'sales_price_before': float,
            'user_id': str,
            'zip_code': str
        }

        self.attribute_map = {
            'address': 'address',
            'can_approve': 'canApprove',
            'can_invoice': 'canInvoice',
            'city': 'city',
            'cost_price_after': 'costPriceAfter',
            'cost_price_before': 'costPriceBefore',
            'cut_off_date': 'cutOffDate',
            'employee_type': 'employeeType',
            'group_number': 'groupNumber',
            'is_barred': 'isBarred',
            'is_user': 'isUser',
            'name': 'name',
            'number': 'number',
            'object_version': 'objectVersion',
            'sales_price_after': 'salesPriceAfter',
            'sales_price_before': 'salesPriceBefore',
            'user_id': 'userId',
            'zip_code': 'zipCode'
        }

        self._address = address
        self._can_approve = can_approve
        self._can_invoice = can_invoice
        self._city = city
        self._cost_price_after = cost_price_after
        self._cost_price_before = cost_price_before
        self._cut_off_date = cut_off_date
        self._employee_type = employee_type
        self._group_number = group_number
        self._is_barred = is_barred
        self._is_user = is_user
        self._name = name
        self._number = number
        self._object_version = object_version
        self._sales_price_after = sales_price_after
        self._sales_price_before = sales_price_before
        self._user_id = user_id
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectEmployee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectEmployee of this ProjectEmployee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ProjectEmployee.

        Employee's home address.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The address of this ProjectEmployee.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ProjectEmployee.

        Employee's home address.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param address: The address of this ProjectEmployee.
        :type address: str
        """
        if address is not None and len(address) > 100:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `100`")
        if address is not None and len(address) < 0:
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `0`")

        self._address = address

    @property
    def can_approve(self):
        """Gets the can_approve of this ProjectEmployee.

        Shows if the employee can approve for example time entries.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The can_approve of this ProjectEmployee.
        :rtype: bool
        """
        return self._can_approve

    @can_approve.setter
    def can_approve(self, can_approve):
        """Sets the can_approve of this ProjectEmployee.

        Shows if the employee can approve for example time entries.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param can_approve: The can_approve of this ProjectEmployee.
        :type can_approve: bool
        """
        if can_approve is None:
            raise ValueError("Invalid value for `can_approve`, must not be `None`")

        self._can_approve = can_approve

    @property
    def can_invoice(self):
        """Gets the can_invoice of this ProjectEmployee.

        Shows if the employee can take for example a time entry to the invoice process.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The can_invoice of this ProjectEmployee.
        :rtype: bool
        """
        return self._can_invoice

    @can_invoice.setter
    def can_invoice(self, can_invoice):
        """Sets the can_invoice of this ProjectEmployee.

        Shows if the employee can take for example a time entry to the invoice process.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param can_invoice: The can_invoice of this ProjectEmployee.
        :type can_invoice: bool
        """
        if can_invoice is None:
            raise ValueError("Invalid value for `can_invoice`, must not be `None`")

        self._can_invoice = can_invoice

    @property
    def city(self):
        """Gets the city of this ProjectEmployee.

        Employee's city of residence.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The city of this ProjectEmployee.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ProjectEmployee.

        Employee's city of residence.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param city: The city of this ProjectEmployee.
        :type city: str
        """
        if city is not None and len(city) > 50:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `50`")
        if city is not None and len(city) < 0:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `0`")

        self._city = city

    @property
    def cost_price_after(self):
        """Gets the cost_price_after of this ProjectEmployee.

        The cost after the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The cost_price_after of this ProjectEmployee.
        :rtype: float
        """
        return self._cost_price_after

    @cost_price_after.setter
    def cost_price_after(self, cost_price_after):
        """Sets the cost_price_after of this ProjectEmployee.

        The cost after the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param cost_price_after: The cost_price_after of this ProjectEmployee.
        :type cost_price_after: float
        """

        self._cost_price_after = cost_price_after

    @property
    def cost_price_before(self):
        """Gets the cost_price_before of this ProjectEmployee.

        The cost before the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The cost_price_before of this ProjectEmployee.
        :rtype: float
        """
        return self._cost_price_before

    @cost_price_before.setter
    def cost_price_before(self, cost_price_before):
        """Sets the cost_price_before of this ProjectEmployee.

        The cost before the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param cost_price_before: The cost_price_before of this ProjectEmployee.
        :type cost_price_before: float
        """

        self._cost_price_before = cost_price_before

    @property
    def cut_off_date(self):
        """Gets the cut_off_date of this ProjectEmployee.

        By default, salesPriceBefore is used, unless a cutoffDate and salesPriceAfter is determined. The cutoffDate serves the purpose of choosing which date the salesPriceAfter shall apply from. It can be null if only salesPriceBefore should apply.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: true</p>

        :return: The cut_off_date of this ProjectEmployee.
        :rtype: date
        """
        return self._cut_off_date

    @cut_off_date.setter
    def cut_off_date(self, cut_off_date):
        """Sets the cut_off_date of this ProjectEmployee.

        By default, salesPriceBefore is used, unless a cutoffDate and salesPriceAfter is determined. The cutoffDate serves the purpose of choosing which date the salesPriceAfter shall apply from. It can be null if only salesPriceBefore should apply.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: true</p>

        :param cut_off_date: The cut_off_date of this ProjectEmployee.
        :type cut_off_date: date
        """

        self._cut_off_date = cut_off_date

    @property
    def employee_type(self):
        """Gets the employee_type of this ProjectEmployee.

        Employee types:  - 0: No user in e-conomic  - 1: Time Logger  - 2: Project Manager  - 3: Mobile Time Logger<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: false</p>

        :return: The employee_type of this ProjectEmployee.
        :rtype: EmployeeType
        """
        return self._employee_type

    @employee_type.setter
    def employee_type(self, employee_type):
        """Sets the employee_type of this ProjectEmployee.

        Employee types:  - 0: No user in e-conomic  - 1: Time Logger  - 2: Project Manager  - 3: Mobile Time Logger<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: false</p>

        :param employee_type: The employee_type of this ProjectEmployee.
        :type employee_type: EmployeeType
        """

        self._employee_type = employee_type

    @property
    def group_number(self):
        """Gets the group_number of this ProjectEmployee.

        The number of the employee group that this employee belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The group_number of this ProjectEmployee.
        :rtype: int
        """
        return self._group_number

    @group_number.setter
    def group_number(self, group_number):
        """Sets the group_number of this ProjectEmployee.

        The number of the employee group that this employee belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param group_number: The group_number of this ProjectEmployee.
        :type group_number: int
        """
        if group_number is None:
            raise ValueError("Invalid value for `group_number`, must not be `None`")

        self._group_number = group_number

    @property
    def is_barred(self):
        """Gets the is_barred of this ProjectEmployee.

        Shows if the employee can be registered on or is barred.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The is_barred of this ProjectEmployee.
        :rtype: bool
        """
        return self._is_barred

    @is_barred.setter
    def is_barred(self, is_barred):
        """Sets the is_barred of this ProjectEmployee.

        Shows if the employee can be registered on or is barred.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param is_barred: The is_barred of this ProjectEmployee.
        :type is_barred: bool
        """
        if is_barred is None:
            raise ValueError("Invalid value for `is_barred`, must not be `None`")

        self._is_barred = is_barred

    @property
    def is_user(self):
        """Gets the is_user of this ProjectEmployee.

        Shows if the employee is also a user.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The is_user of this ProjectEmployee.
        :rtype: bool
        """
        return self._is_user

    @is_user.setter
    def is_user(self, is_user):
        """Sets the is_user of this ProjectEmployee.

        Shows if the employee is also a user.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param is_user: The is_user of this ProjectEmployee.
        :type is_user: bool
        """

        self._is_user = is_user

    @property
    def name(self):
        """Gets the name of this ProjectEmployee.

        Name of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>

        :return: The name of this ProjectEmployee.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectEmployee.

        Name of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>

        :param name: The name of this ProjectEmployee.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def number(self):
        """Gets the number of this ProjectEmployee.

        The unique number of the project employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The number of this ProjectEmployee.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ProjectEmployee.

        The unique number of the project employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param number: The number of this ProjectEmployee.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and number > 999999:
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `999999`")
        if number is not None and number < 1:
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `1`")

        self._number = number

    @property
    def object_version(self):
        """Gets the object_version of this ProjectEmployee.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The object_version of this ProjectEmployee.
        :rtype: str
        """
        return self._object_version

    @object_version.setter
    def object_version(self, object_version):
        """Sets the object_version of this ProjectEmployee.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param object_version: The object_version of this ProjectEmployee.
        :type object_version: str
        """

        self._object_version = object_version

    @property
    def sales_price_after(self):
        """Gets the sales_price_after of this ProjectEmployee.

        The sale price after the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The sales_price_after of this ProjectEmployee.
        :rtype: float
        """
        return self._sales_price_after

    @sales_price_after.setter
    def sales_price_after(self, sales_price_after):
        """Sets the sales_price_after of this ProjectEmployee.

        The sale price after the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param sales_price_after: The sales_price_after of this ProjectEmployee.
        :type sales_price_after: float
        """

        self._sales_price_after = sales_price_after

    @property
    def sales_price_before(self):
        """Gets the sales_price_before of this ProjectEmployee.

        The sale price before the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The sales_price_before of this ProjectEmployee.
        :rtype: float
        """
        return self._sales_price_before

    @sales_price_before.setter
    def sales_price_before(self, sales_price_before):
        """Sets the sales_price_before of this ProjectEmployee.

        The sale price before the cut off date.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param sales_price_before: The sales_price_before of this ProjectEmployee.
        :type sales_price_before: float
        """

        self._sales_price_before = sales_price_before

    @property
    def user_id(self):
        """Gets the user_id of this ProjectEmployee.

        User id of the employee if it's a user.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The user_id of this ProjectEmployee.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ProjectEmployee.

        User id of the employee if it's a user.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param user_id: The user_id of this ProjectEmployee.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def zip_code(self):
        """Gets the zip_code of this ProjectEmployee.

        Employee's zip code.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The zip_code of this ProjectEmployee.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this ProjectEmployee.

        Employee's zip code.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param zip_code: The zip_code of this ProjectEmployee.
        :type zip_code: str
        """
        if zip_code is not None and len(zip_code) > 50:
            raise ValueError("Invalid value for `zip_code`, length must be less than or equal to `50`")
        if zip_code is not None and len(zip_code) < 0:
            raise ValueError("Invalid value for `zip_code`, length must be greater than or equal to `0`")

        self._zip_code = zip_code
