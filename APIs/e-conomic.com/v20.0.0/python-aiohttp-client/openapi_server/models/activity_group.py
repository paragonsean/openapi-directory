# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_group_type import ActivityGroupType
from openapi_server.models.ongoing_account_type import OngoingAccountType
from openapi_server import util


class ActivityGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_account_closed: int=None, cost_account_ongoing: int=None, cost_account_ongoing_type: OngoingAccountType=None, cost_contra_account_ongoing: int=None, include_cost_price_in_finance: bool=None, include_sales_price_in_finance: bool=None, name: str=None, number: int=None, object_version: str=None, sales_account_closed: int=None, sales_account_ongoing: int=None, sales_account_ongoing_type: OngoingAccountType=None, sales_contra_account_ongoing: int=None, type: ActivityGroupType=None):
        """ActivityGroup - a model defined in OpenAPI

        :param cost_account_closed: The cost_account_closed of this ActivityGroup.
        :param cost_account_ongoing: The cost_account_ongoing of this ActivityGroup.
        :param cost_account_ongoing_type: The cost_account_ongoing_type of this ActivityGroup.
        :param cost_contra_account_ongoing: The cost_contra_account_ongoing of this ActivityGroup.
        :param include_cost_price_in_finance: The include_cost_price_in_finance of this ActivityGroup.
        :param include_sales_price_in_finance: The include_sales_price_in_finance of this ActivityGroup.
        :param name: The name of this ActivityGroup.
        :param number: The number of this ActivityGroup.
        :param object_version: The object_version of this ActivityGroup.
        :param sales_account_closed: The sales_account_closed of this ActivityGroup.
        :param sales_account_ongoing: The sales_account_ongoing of this ActivityGroup.
        :param sales_account_ongoing_type: The sales_account_ongoing_type of this ActivityGroup.
        :param sales_contra_account_ongoing: The sales_contra_account_ongoing of this ActivityGroup.
        :param type: The type of this ActivityGroup.
        """
        self.openapi_types = {
            'cost_account_closed': int,
            'cost_account_ongoing': int,
            'cost_account_ongoing_type': OngoingAccountType,
            'cost_contra_account_ongoing': int,
            'include_cost_price_in_finance': bool,
            'include_sales_price_in_finance': bool,
            'name': str,
            'number': int,
            'object_version': str,
            'sales_account_closed': int,
            'sales_account_ongoing': int,
            'sales_account_ongoing_type': OngoingAccountType,
            'sales_contra_account_ongoing': int,
            'type': ActivityGroupType
        }

        self.attribute_map = {
            'cost_account_closed': 'costAccountClosed',
            'cost_account_ongoing': 'costAccountOngoing',
            'cost_account_ongoing_type': 'costAccountOngoingType',
            'cost_contra_account_ongoing': 'costContraAccountOngoing',
            'include_cost_price_in_finance': 'includeCostPriceInFinance',
            'include_sales_price_in_finance': 'includeSalesPriceInFinance',
            'name': 'name',
            'number': 'number',
            'object_version': 'objectVersion',
            'sales_account_closed': 'salesAccountClosed',
            'sales_account_ongoing': 'salesAccountOngoing',
            'sales_account_ongoing_type': 'salesAccountOngoingType',
            'sales_contra_account_ongoing': 'salesContraAccountOngoing',
            'type': 'type'
        }

        self._cost_account_closed = cost_account_closed
        self._cost_account_ongoing = cost_account_ongoing
        self._cost_account_ongoing_type = cost_account_ongoing_type
        self._cost_contra_account_ongoing = cost_contra_account_ongoing
        self._include_cost_price_in_finance = include_cost_price_in_finance
        self._include_sales_price_in_finance = include_sales_price_in_finance
        self._name = name
        self._number = number
        self._object_version = object_version
        self._sales_account_closed = sales_account_closed
        self._sales_account_ongoing = sales_account_ongoing
        self._sales_account_ongoing_type = sales_account_ongoing_type
        self._sales_contra_account_ongoing = sales_contra_account_ongoing
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityGroup of this ActivityGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_account_closed(self):
        """Gets the cost_account_closed of this ActivityGroup.

        The account number to register costs for closed activities.     If includeCostPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.     Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The cost_account_closed of this ActivityGroup.
        :rtype: int
        """
        return self._cost_account_closed

    @cost_account_closed.setter
    def cost_account_closed(self, cost_account_closed):
        """Sets the cost_account_closed of this ActivityGroup.

        The account number to register costs for closed activities.     If includeCostPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.     Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param cost_account_closed: The cost_account_closed of this ActivityGroup.
        :type cost_account_closed: int
        """

        self._cost_account_closed = cost_account_closed

    @property
    def cost_account_ongoing(self):
        """Gets the cost_account_ongoing of this ActivityGroup.

        The account number to register costs for ongoing activities.     If includeCostPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.     Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The cost_account_ongoing of this ActivityGroup.
        :rtype: int
        """
        return self._cost_account_ongoing

    @cost_account_ongoing.setter
    def cost_account_ongoing(self, cost_account_ongoing):
        """Sets the cost_account_ongoing of this ActivityGroup.

        The account number to register costs for ongoing activities.     If includeCostPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.     Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param cost_account_ongoing: The cost_account_ongoing of this ActivityGroup.
        :type cost_account_ongoing: int
        """

        self._cost_account_ongoing = cost_account_ongoing

    @property
    def cost_account_ongoing_type(self):
        """Gets the cost_account_ongoing_type of this ActivityGroup.

        The type of account for costs for ongoing activities:  - 0: Debit  - 1: Credit     If includeCostPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The cost_account_ongoing_type of this ActivityGroup.
        :rtype: OngoingAccountType
        """
        return self._cost_account_ongoing_type

    @cost_account_ongoing_type.setter
    def cost_account_ongoing_type(self, cost_account_ongoing_type):
        """Sets the cost_account_ongoing_type of this ActivityGroup.

        The type of account for costs for ongoing activities:  - 0: Debit  - 1: Credit     If includeCostPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param cost_account_ongoing_type: The cost_account_ongoing_type of this ActivityGroup.
        :type cost_account_ongoing_type: OngoingAccountType
        """

        self._cost_account_ongoing_type = cost_account_ongoing_type

    @property
    def cost_contra_account_ongoing(self):
        """Gets the cost_contra_account_ongoing of this ActivityGroup.

        The contra account number to register costs for ongoing activities.     If includeCostPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.     Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The cost_contra_account_ongoing of this ActivityGroup.
        :rtype: int
        """
        return self._cost_contra_account_ongoing

    @cost_contra_account_ongoing.setter
    def cost_contra_account_ongoing(self, cost_contra_account_ongoing):
        """Sets the cost_contra_account_ongoing of this ActivityGroup.

        The contra account number to register costs for ongoing activities.     If includeCostPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.     Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param cost_contra_account_ongoing: The cost_contra_account_ongoing of this ActivityGroup.
        :type cost_contra_account_ongoing: int
        """

        self._cost_contra_account_ongoing = cost_contra_account_ongoing

    @property
    def include_cost_price_in_finance(self):
        """Gets the include_cost_price_in_finance of this ActivityGroup.

        If set to true, activity costs will be included in accounting.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The include_cost_price_in_finance of this ActivityGroup.
        :rtype: bool
        """
        return self._include_cost_price_in_finance

    @include_cost_price_in_finance.setter
    def include_cost_price_in_finance(self, include_cost_price_in_finance):
        """Sets the include_cost_price_in_finance of this ActivityGroup.

        If set to true, activity costs will be included in accounting.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param include_cost_price_in_finance: The include_cost_price_in_finance of this ActivityGroup.
        :type include_cost_price_in_finance: bool
        """

        self._include_cost_price_in_finance = include_cost_price_in_finance

    @property
    def include_sales_price_in_finance(self):
        """Gets the include_sales_price_in_finance of this ActivityGroup.

        If set to true, activity revenue will be included in accounting.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The include_sales_price_in_finance of this ActivityGroup.
        :rtype: bool
        """
        return self._include_sales_price_in_finance

    @include_sales_price_in_finance.setter
    def include_sales_price_in_finance(self, include_sales_price_in_finance):
        """Sets the include_sales_price_in_finance of this ActivityGroup.

        If set to true, activity revenue will be included in accounting.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param include_sales_price_in_finance: The include_sales_price_in_finance of this ActivityGroup.
        :type include_sales_price_in_finance: bool
        """

        self._include_sales_price_in_finance = include_sales_price_in_finance

    @property
    def name(self):
        """Gets the name of this ActivityGroup.

        Name of the activity group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: true</p>

        :return: The name of this ActivityGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityGroup.

        Name of the activity group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: true</p>

        :param name: The name of this ActivityGroup.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def number(self):
        """Gets the number of this ActivityGroup.

        The unique number of the activity group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The number of this ActivityGroup.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ActivityGroup.

        The unique number of the activity group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param number: The number of this ActivityGroup.
        :type number: int
        """

        self._number = number

    @property
    def object_version(self):
        """Gets the object_version of this ActivityGroup.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The object_version of this ActivityGroup.
        :rtype: str
        """
        return self._object_version

    @object_version.setter
    def object_version(self, object_version):
        """Sets the object_version of this ActivityGroup.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param object_version: The object_version of this ActivityGroup.
        :type object_version: str
        """

        self._object_version = object_version

    @property
    def sales_account_closed(self):
        """Gets the sales_account_closed of this ActivityGroup.

        The account number to register revenue for closed activities.     If includeSalesPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.     Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The sales_account_closed of this ActivityGroup.
        :rtype: int
        """
        return self._sales_account_closed

    @sales_account_closed.setter
    def sales_account_closed(self, sales_account_closed):
        """Sets the sales_account_closed of this ActivityGroup.

        The account number to register revenue for closed activities.     If includeSalesPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.     Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param sales_account_closed: The sales_account_closed of this ActivityGroup.
        :type sales_account_closed: int
        """

        self._sales_account_closed = sales_account_closed

    @property
    def sales_account_ongoing(self):
        """Gets the sales_account_ongoing of this ActivityGroup.

        The account number to register revenue for ongoing activities.     If includeSalesPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.     Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The sales_account_ongoing of this ActivityGroup.
        :rtype: int
        """
        return self._sales_account_ongoing

    @sales_account_ongoing.setter
    def sales_account_ongoing(self, sales_account_ongoing):
        """Sets the sales_account_ongoing of this ActivityGroup.

        The account number to register revenue for ongoing activities.     If includeSalesPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.     Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param sales_account_ongoing: The sales_account_ongoing of this ActivityGroup.
        :type sales_account_ongoing: int
        """

        self._sales_account_ongoing = sales_account_ongoing

    @property
    def sales_account_ongoing_type(self):
        """Gets the sales_account_ongoing_type of this ActivityGroup.

        The type of account for revenue from ongoing activities:  - 0: Debit  - 1: Credit     If includeSalesPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The sales_account_ongoing_type of this ActivityGroup.
        :rtype: OngoingAccountType
        """
        return self._sales_account_ongoing_type

    @sales_account_ongoing_type.setter
    def sales_account_ongoing_type(self, sales_account_ongoing_type):
        """Sets the sales_account_ongoing_type of this ActivityGroup.

        The type of account for revenue from ongoing activities:  - 0: Debit  - 1: Credit     If includeSalesPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param sales_account_ongoing_type: The sales_account_ongoing_type of this ActivityGroup.
        :type sales_account_ongoing_type: OngoingAccountType
        """

        self._sales_account_ongoing_type = sales_account_ongoing_type

    @property
    def sales_contra_account_ongoing(self):
        """Gets the sales_contra_account_ongoing of this ActivityGroup.

        The contra account number to register revenue for ongoing activities.     If includeSalesPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.     Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The sales_contra_account_ongoing of this ActivityGroup.
        :rtype: int
        """
        return self._sales_contra_account_ongoing

    @sales_contra_account_ongoing.setter
    def sales_contra_account_ongoing(self, sales_contra_account_ongoing):
        """Sets the sales_contra_account_ongoing of this ActivityGroup.

        The contra account number to register revenue for ongoing activities.     If includeSalesPriceInFinance is set to true, this property is required.     Otherwise, it cannot be provided.     Only accessible accounts (not barred) with accountType==\"status\" or \"profitAndLoss\" are allowed.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param sales_contra_account_ongoing: The sales_contra_account_ongoing of this ActivityGroup.
        :type sales_contra_account_ongoing: int
        """

        self._sales_contra_account_ongoing = sales_contra_account_ongoing

    @property
    def type(self):
        """Gets the type of this ActivityGroup.

        Activity group types:  - 1: Productive, Invoiceable  - 2: Productive, Non-Invoiceable  - 3: Unproductive<p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: true</p>

        :return: The type of this ActivityGroup.
        :rtype: ActivityGroupType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActivityGroup.

        Activity group types:  - 1: Productive, Invoiceable  - 2: Productive, Non-Invoiceable  - 3: Unproductive<p class='filter'>Filterable: eq, ne</p><p class='sort'>Sortable: true</p>

        :param type: The type of this ActivityGroup.
        :type type: ActivityGroupType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
