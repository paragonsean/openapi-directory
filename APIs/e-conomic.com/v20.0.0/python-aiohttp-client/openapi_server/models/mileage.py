# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Mileage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, distance: float=None, employee_number: int=None, _from: str=None, include_approve: bool=None, is_approved: bool=None, number: int=None, object_version: str=None, project_number: int=None, to: str=None):
        """Mileage - a model defined in OpenAPI

        :param _date: The _date of this Mileage.
        :param distance: The distance of this Mileage.
        :param employee_number: The employee_number of this Mileage.
        :param _from: The _from of this Mileage.
        :param include_approve: The include_approve of this Mileage.
        :param is_approved: The is_approved of this Mileage.
        :param number: The number of this Mileage.
        :param object_version: The object_version of this Mileage.
        :param project_number: The project_number of this Mileage.
        :param to: The to of this Mileage.
        """
        self.openapi_types = {
            '_date': datetime,
            'distance': float,
            'employee_number': int,
            '_from': str,
            'include_approve': bool,
            'is_approved': bool,
            'number': int,
            'object_version': str,
            'project_number': int,
            'to': str
        }

        self.attribute_map = {
            '_date': 'date',
            'distance': 'distance',
            'employee_number': 'employeeNumber',
            '_from': 'from',
            'include_approve': 'includeApprove',
            'is_approved': 'isApproved',
            'number': 'number',
            'object_version': 'objectVersion',
            'project_number': 'projectNumber',
            'to': 'to'
        }

        self.__date = _date
        self._distance = distance
        self._employee_number = employee_number
        self.__from = _from
        self._include_approve = include_approve
        self._is_approved = is_approved
        self._number = number
        self._object_version = object_version
        self._project_number = project_number
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Mileage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Mileage of this Mileage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this Mileage.

        The date of the project mileage entry<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The _date of this Mileage.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Mileage.

        The date of the project mileage entry<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param _date: The _date of this Mileage.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def distance(self):
        """Gets the distance of this Mileage.

        The distance amount that the mileage registration should contain<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The distance of this Mileage.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Mileage.

        The distance amount that the mileage registration should contain<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param distance: The distance of this Mileage.
        :type distance: float
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")

        self._distance = distance

    @property
    def employee_number(self):
        """Gets the employee_number of this Mileage.

        The employee number of the project mileage entry<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The employee_number of this Mileage.
        :rtype: int
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this Mileage.

        The employee number of the project mileage entry<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param employee_number: The employee_number of this Mileage.
        :type employee_number: int
        """
        if employee_number is None:
            raise ValueError("Invalid value for `employee_number`, must not be `None`")

        self._employee_number = employee_number

    @property
    def _from(self):
        """Gets the _from of this Mileage.

        The starting place of the travel which the mileage registration reflects<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The _from of this Mileage.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Mileage.

        The starting place of the travel which the mileage registration reflects<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param _from: The _from of this Mileage.
        :type _from: str
        """

        self.__from = _from

    @property
    def include_approve(self):
        """Gets the include_approve of this Mileage.

        By default it is true, so a user with rights will be able to approve.        Once it is approved, field becomes false and it will be impossible to approve ever again.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The include_approve of this Mileage.
        :rtype: bool
        """
        return self._include_approve

    @include_approve.setter
    def include_approve(self, include_approve):
        """Sets the include_approve of this Mileage.

        By default it is true, so a user with rights will be able to approve.        Once it is approved, field becomes false and it will be impossible to approve ever again.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param include_approve: The include_approve of this Mileage.
        :type include_approve: bool
        """

        self._include_approve = include_approve

    @property
    def is_approved(self):
        """Gets the is_approved of this Mileage.

        Value specifying if the mileage was approved. If it was approved, it can not be updated anymore.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The is_approved of this Mileage.
        :rtype: bool
        """
        return self._is_approved

    @is_approved.setter
    def is_approved(self, is_approved):
        """Sets the is_approved of this Mileage.

        Value specifying if the mileage was approved. If it was approved, it can not be updated anymore.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param is_approved: The is_approved of this Mileage.
        :type is_approved: bool
        """

        self._is_approved = is_approved

    @property
    def number(self):
        """Gets the number of this Mileage.

        The unique number of the project mileage entry<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The number of this Mileage.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Mileage.

        The unique number of the project mileage entry<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param number: The number of this Mileage.
        :type number: int
        """

        self._number = number

    @property
    def object_version(self):
        """Gets the object_version of this Mileage.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The object_version of this Mileage.
        :rtype: str
        """
        return self._object_version

    @object_version.setter
    def object_version(self, object_version):
        """Sets the object_version of this Mileage.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param object_version: The object_version of this Mileage.
        :type object_version: str
        """

        self._object_version = object_version

    @property
    def project_number(self):
        """Gets the project_number of this Mileage.

        The project number of the project mileage entry<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The project_number of this Mileage.
        :rtype: int
        """
        return self._project_number

    @project_number.setter
    def project_number(self, project_number):
        """Sets the project_number of this Mileage.

        The project number of the project mileage entry<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param project_number: The project_number of this Mileage.
        :type project_number: int
        """
        if project_number is None:
            raise ValueError("Invalid value for `project_number`, must not be `None`")

        self._project_number = project_number

    @property
    def to(self):
        """Gets the to of this Mileage.

        The destination of the travel which the mileage registration reflects<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The to of this Mileage.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Mileage.

        The destination of the travel which the mileage registration reflects<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param to: The to of this Mileage.
        :type to: str
        """

        self._to = to
