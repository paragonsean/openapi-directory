# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Employee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: bool=None, email: str=None, group_number: int=None, name: str=None, number: int=None, object_version: str=None, phone: str=None):
        """Employee - a model defined in OpenAPI

        :param access: The access of this Employee.
        :param email: The email of this Employee.
        :param group_number: The group_number of this Employee.
        :param name: The name of this Employee.
        :param number: The number of this Employee.
        :param object_version: The object_version of this Employee.
        :param phone: The phone of this Employee.
        """
        self.openapi_types = {
            'access': bool,
            'email': str,
            'group_number': int,
            'name': str,
            'number': int,
            'object_version': str,
            'phone': str
        }

        self.attribute_map = {
            'access': 'access',
            'email': 'email',
            'group_number': 'groupNumber',
            'name': 'name',
            'number': 'number',
            'object_version': 'objectVersion',
            'phone': 'phone'
        }

        self._access = access
        self._email = email
        self._group_number = group_number
        self._name = name
        self._number = number
        self._object_version = object_version
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Employee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Employee of this Employee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this Employee.

        Shows if the employee can be registered on or is barred.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The access of this Employee.
        :rtype: bool
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this Employee.

        Shows if the employee can be registered on or is barred.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param access: The access of this Employee.
        :type access: bool
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")

        self._access = access

    @property
    def email(self):
        """Gets the email of this Employee.

        Employee's email address.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The email of this Employee.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Employee.

        Employee's email address.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param email: The email of this Employee.
        :type email: str
        """
        if email is not None and len(email) > 50:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `50`")
        if email is not None and len(email) < 0:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `0`")

        self._email = email

    @property
    def group_number(self):
        """Gets the group_number of this Employee.

        The number of the employee group that this employee belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The group_number of this Employee.
        :rtype: int
        """
        return self._group_number

    @group_number.setter
    def group_number(self, group_number):
        """Sets the group_number of this Employee.

        The number of the employee group that this employee belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param group_number: The group_number of this Employee.
        :type group_number: int
        """
        if group_number is None:
            raise ValueError("Invalid value for `group_number`, must not be `None`")

        self._group_number = group_number

    @property
    def name(self):
        """Gets the name of this Employee.

        Name of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>

        :return: The name of this Employee.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Employee.

        Name of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>

        :param name: The name of this Employee.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def number(self):
        """Gets the number of this Employee.

        The unique number of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The number of this Employee.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Employee.

        The unique number of the employee.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param number: The number of this Employee.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and number > 999999:
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `999999`")
        if number is not None and number < 0:
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `0`")

        self._number = number

    @property
    def object_version(self):
        """Gets the object_version of this Employee.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The object_version of this Employee.
        :rtype: str
        """
        return self._object_version

    @object_version.setter
    def object_version(self, object_version):
        """Sets the object_version of this Employee.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param object_version: The object_version of this Employee.
        :type object_version: str
        """

        self._object_version = object_version

    @property
    def phone(self):
        """Gets the phone of this Employee.

        Employee's telephone number.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The phone of this Employee.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Employee.

        Employee's telephone number.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param phone: The phone of this Employee.
        :type phone: str
        """
        if phone is not None and len(phone) > 20:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `20`")
        if phone is not None and len(phone) < 0:
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `0`")

        self._phone = phone
