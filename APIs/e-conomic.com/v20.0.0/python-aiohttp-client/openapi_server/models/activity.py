# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Activity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_price_markup_percentage: float=None, cutoff_date: datetime=None, group_number: int=None, hide_in_search: bool=None, in_lieu_code: int=None, is_accessible: bool=None, name: str=None, number: int=None, object_version: str=None, sales_price_after: float=None, sales_price_before: float=None):
        """Activity - a model defined in OpenAPI

        :param cost_price_markup_percentage: The cost_price_markup_percentage of this Activity.
        :param cutoff_date: The cutoff_date of this Activity.
        :param group_number: The group_number of this Activity.
        :param hide_in_search: The hide_in_search of this Activity.
        :param in_lieu_code: The in_lieu_code of this Activity.
        :param is_accessible: The is_accessible of this Activity.
        :param name: The name of this Activity.
        :param number: The number of this Activity.
        :param object_version: The object_version of this Activity.
        :param sales_price_after: The sales_price_after of this Activity.
        :param sales_price_before: The sales_price_before of this Activity.
        """
        self.openapi_types = {
            'cost_price_markup_percentage': float,
            'cutoff_date': datetime,
            'group_number': int,
            'hide_in_search': bool,
            'in_lieu_code': int,
            'is_accessible': bool,
            'name': str,
            'number': int,
            'object_version': str,
            'sales_price_after': float,
            'sales_price_before': float
        }

        self.attribute_map = {
            'cost_price_markup_percentage': 'costPriceMarkupPercentage',
            'cutoff_date': 'cutoffDate',
            'group_number': 'groupNumber',
            'hide_in_search': 'hideInSearch',
            'in_lieu_code': 'inLieuCode',
            'is_accessible': 'isAccessible',
            'name': 'name',
            'number': 'number',
            'object_version': 'objectVersion',
            'sales_price_after': 'salesPriceAfter',
            'sales_price_before': 'salesPriceBefore'
        }

        self._cost_price_markup_percentage = cost_price_markup_percentage
        self._cutoff_date = cutoff_date
        self._group_number = group_number
        self._hide_in_search = hide_in_search
        self._in_lieu_code = in_lieu_code
        self._is_accessible = is_accessible
        self._name = name
        self._number = number
        self._object_version = object_version
        self._sales_price_after = sales_price_after
        self._sales_price_before = sales_price_before

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activity of this Activity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_price_markup_percentage(self):
        """Gets the cost_price_markup_percentage of this Activity.

        If cost prices are utilized on employees, this can be used to determine a markup percentage for the given activity.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The cost_price_markup_percentage of this Activity.
        :rtype: float
        """
        return self._cost_price_markup_percentage

    @cost_price_markup_percentage.setter
    def cost_price_markup_percentage(self, cost_price_markup_percentage):
        """Sets the cost_price_markup_percentage of this Activity.

        If cost prices are utilized on employees, this can be used to determine a markup percentage for the given activity.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param cost_price_markup_percentage: The cost_price_markup_percentage of this Activity.
        :type cost_price_markup_percentage: float
        """

        self._cost_price_markup_percentage = cost_price_markup_percentage

    @property
    def cutoff_date(self):
        """Gets the cutoff_date of this Activity.

        Date where price should change from before to after.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The cutoff_date of this Activity.
        :rtype: datetime
        """
        return self._cutoff_date

    @cutoff_date.setter
    def cutoff_date(self, cutoff_date):
        """Sets the cutoff_date of this Activity.

        Date where price should change from before to after.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param cutoff_date: The cutoff_date of this Activity.
        :type cutoff_date: datetime
        """

        self._cutoff_date = cutoff_date

    @property
    def group_number(self):
        """Gets the group_number of this Activity.

        The number of the activity group that this activity belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The group_number of this Activity.
        :rtype: int
        """
        return self._group_number

    @group_number.setter
    def group_number(self, group_number):
        """Sets the group_number of this Activity.

        The number of the activity group that this activity belongs.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param group_number: The group_number of this Activity.
        :type group_number: int
        """
        if group_number is None:
            raise ValueError("Invalid value for `group_number`, must not be `None`")

        self._group_number = group_number

    @property
    def hide_in_search(self):
        """Gets the hide_in_search of this Activity.

        Hides an activity from employees when registering in e-conomic UI.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The hide_in_search of this Activity.
        :rtype: bool
        """
        return self._hide_in_search

    @hide_in_search.setter
    def hide_in_search(self, hide_in_search):
        """Sets the hide_in_search of this Activity.

        Hides an activity from employees when registering in e-conomic UI.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param hide_in_search: The hide_in_search of this Activity.
        :type hide_in_search: bool
        """

        self._hide_in_search = hide_in_search

    @property
    def in_lieu_code(self):
        """Gets the in_lieu_code of this Activity.

        If time in lieu is used, this defines which code the activity should utilize when registered upon.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The in_lieu_code of this Activity.
        :rtype: int
        """
        return self._in_lieu_code

    @in_lieu_code.setter
    def in_lieu_code(self, in_lieu_code):
        """Sets the in_lieu_code of this Activity.

        If time in lieu is used, this defines which code the activity should utilize when registered upon.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param in_lieu_code: The in_lieu_code of this Activity.
        :type in_lieu_code: int
        """

        self._in_lieu_code = in_lieu_code

    @property
    def is_accessible(self):
        """Gets the is_accessible of this Activity.

        Defines whether the activity can be registered upon.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The is_accessible of this Activity.
        :rtype: bool
        """
        return self._is_accessible

    @is_accessible.setter
    def is_accessible(self, is_accessible):
        """Sets the is_accessible of this Activity.

        Defines whether the activity can be registered upon.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param is_accessible: The is_accessible of this Activity.
        :type is_accessible: bool
        """

        self._is_accessible = is_accessible

    @property
    def name(self):
        """Gets the name of this Activity.

        Name of the activity.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>

        :return: The name of this Activity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Activity.

        Name of the activity.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>

        :param name: The name of this Activity.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def number(self):
        """Gets the number of this Activity.

        The unique number of the activity.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The number of this Activity.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Activity.

        The unique number of the activity.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param number: The number of this Activity.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and number > 999999999:
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `999999999`")
        if number is not None and number < 1:
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `1`")

        self._number = number

    @property
    def object_version(self):
        """Gets the object_version of this Activity.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The object_version of this Activity.
        :rtype: str
        """
        return self._object_version

    @object_version.setter
    def object_version(self, object_version):
        """Sets the object_version of this Activity.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param object_version: The object_version of this Activity.
        :type object_version: str
        """

        self._object_version = object_version

    @property
    def sales_price_after(self):
        """Gets the sales_price_after of this Activity.

        Price to be used after defined cut off date if defined.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The sales_price_after of this Activity.
        :rtype: float
        """
        return self._sales_price_after

    @sales_price_after.setter
    def sales_price_after(self, sales_price_after):
        """Sets the sales_price_after of this Activity.

        Price to be used after defined cut off date if defined.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param sales_price_after: The sales_price_after of this Activity.
        :type sales_price_after: float
        """

        self._sales_price_after = sales_price_after

    @property
    def sales_price_before(self):
        """Gets the sales_price_before of this Activity.

        Price for a given activity. This will be utilized if no special price is defined.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The sales_price_before of this Activity.
        :rtype: float
        """
        return self._sales_price_before

    @sales_price_before.setter
    def sales_price_before(self, sales_price_before):
        """Sets the sales_price_before of this Activity.

        Price for a given activity. This will be utilized if no special price is defined.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param sales_price_before: The sales_price_before of this Activity.
        :type sales_price_before: float
        """

        self._sales_price_before = sales_price_before
