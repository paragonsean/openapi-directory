# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_number: int=None, _date: datetime=None, employee_number: int=None, is_approved: bool=None, is_reconciled: bool=None, last_updated: datetime=None, number: int=None, number_of_hours: float=None, object_version: str=None, project_number: int=None, text: str=None):
        """TimeEntry - a model defined in OpenAPI

        :param activity_number: The activity_number of this TimeEntry.
        :param _date: The _date of this TimeEntry.
        :param employee_number: The employee_number of this TimeEntry.
        :param is_approved: The is_approved of this TimeEntry.
        :param is_reconciled: The is_reconciled of this TimeEntry.
        :param last_updated: The last_updated of this TimeEntry.
        :param number: The number of this TimeEntry.
        :param number_of_hours: The number_of_hours of this TimeEntry.
        :param object_version: The object_version of this TimeEntry.
        :param project_number: The project_number of this TimeEntry.
        :param text: The text of this TimeEntry.
        """
        self.openapi_types = {
            'activity_number': int,
            '_date': datetime,
            'employee_number': int,
            'is_approved': bool,
            'is_reconciled': bool,
            'last_updated': datetime,
            'number': int,
            'number_of_hours': float,
            'object_version': str,
            'project_number': int,
            'text': str
        }

        self.attribute_map = {
            'activity_number': 'activityNumber',
            '_date': 'date',
            'employee_number': 'employeeNumber',
            'is_approved': 'isApproved',
            'is_reconciled': 'isReconciled',
            'last_updated': 'lastUpdated',
            'number': 'number',
            'number_of_hours': 'numberOfHours',
            'object_version': 'objectVersion',
            'project_number': 'projectNumber',
            'text': 'text'
        }

        self._activity_number = activity_number
        self.__date = _date
        self._employee_number = employee_number
        self._is_approved = is_approved
        self._is_reconciled = is_reconciled
        self._last_updated = last_updated
        self._number = number
        self._number_of_hours = number_of_hours
        self._object_version = object_version
        self._project_number = project_number
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeEntry of this TimeEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_number(self):
        """Gets the activity_number of this TimeEntry.

        The activity identifier of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The activity_number of this TimeEntry.
        :rtype: int
        """
        return self._activity_number

    @activity_number.setter
    def activity_number(self, activity_number):
        """Sets the activity_number of this TimeEntry.

        The activity identifier of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param activity_number: The activity_number of this TimeEntry.
        :type activity_number: int
        """
        if activity_number is None:
            raise ValueError("Invalid value for `activity_number`, must not be `None`")

        self._activity_number = activity_number

    @property
    def _date(self):
        """Gets the _date of this TimeEntry.

        The date of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The _date of this TimeEntry.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this TimeEntry.

        The date of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param _date: The _date of this TimeEntry.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def employee_number(self):
        """Gets the employee_number of this TimeEntry.

        The employee identifier of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The employee_number of this TimeEntry.
        :rtype: int
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this TimeEntry.

        The employee identifier of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param employee_number: The employee_number of this TimeEntry.
        :type employee_number: int
        """
        if employee_number is None:
            raise ValueError("Invalid value for `employee_number`, must not be `None`")

        self._employee_number = employee_number

    @property
    def is_approved(self):
        """Gets the is_approved of this TimeEntry.

        Bool value specifying if the time entry was approved. If time entry was approved, it can not be updated anymore.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The is_approved of this TimeEntry.
        :rtype: bool
        """
        return self._is_approved

    @is_approved.setter
    def is_approved(self, is_approved):
        """Sets the is_approved of this TimeEntry.

        Bool value specifying if the time entry was approved. If time entry was approved, it can not be updated anymore.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param is_approved: The is_approved of this TimeEntry.
        :type is_approved: bool
        """

        self._is_approved = is_approved

    @property
    def is_reconciled(self):
        """Gets the is_reconciled of this TimeEntry.

        Bool value specifying if the time entry was reconciled.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The is_reconciled of this TimeEntry.
        :rtype: bool
        """
        return self._is_reconciled

    @is_reconciled.setter
    def is_reconciled(self, is_reconciled):
        """Sets the is_reconciled of this TimeEntry.

        Bool value specifying if the time entry was reconciled.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param is_reconciled: The is_reconciled of this TimeEntry.
        :type is_reconciled: bool
        """

        self._is_reconciled = is_reconciled

    @property
    def last_updated(self):
        """Gets the last_updated of this TimeEntry.

        The time entry last updated date.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :return: The last_updated of this TimeEntry.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this TimeEntry.

        The time entry last updated date.<p class='filter'>Read-only: true</p><p class='filter'>Filterable: eq, ne, lt, lte, gt, gte</p><p class='sort'>Sortable: false</p>

        :param last_updated: The last_updated of this TimeEntry.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def number(self):
        """Gets the number of this TimeEntry.

        The time entry identifier.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The number of this TimeEntry.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TimeEntry.

        The time entry identifier.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param number: The number of this TimeEntry.
        :type number: int
        """

        self._number = number

    @property
    def number_of_hours(self):
        """Gets the number_of_hours of this TimeEntry.

        Number of hours of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The number_of_hours of this TimeEntry.
        :rtype: float
        """
        return self._number_of_hours

    @number_of_hours.setter
    def number_of_hours(self, number_of_hours):
        """Sets the number_of_hours of this TimeEntry.

        Number of hours of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param number_of_hours: The number_of_hours of this TimeEntry.
        :type number_of_hours: float
        """

        self._number_of_hours = number_of_hours

    @property
    def object_version(self):
        """Gets the object_version of this TimeEntry.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The object_version of this TimeEntry.
        :rtype: str
        """
        return self._object_version

    @object_version.setter
    def object_version(self, object_version):
        """Sets the object_version of this TimeEntry.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param object_version: The object_version of this TimeEntry.
        :type object_version: str
        """

        self._object_version = object_version

    @property
    def project_number(self):
        """Gets the project_number of this TimeEntry.

        The project identifier of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :return: The project_number of this TimeEntry.
        :rtype: int
        """
        return self._project_number

    @project_number.setter
    def project_number(self, project_number):
        """Sets the project_number of this TimeEntry.

        The project identifier of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: false</p>

        :param project_number: The project_number of this TimeEntry.
        :type project_number: int
        """
        if project_number is None:
            raise ValueError("Invalid value for `project_number`, must not be `None`")

        self._project_number = project_number

    @property
    def text(self):
        """Gets the text of this TimeEntry.

        Text description of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>

        :return: The text of this TimeEntry.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TimeEntry.

        Text description of time entry.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>

        :param text: The text of this TimeEntry.
        :type text: str
        """

        self._text = text
