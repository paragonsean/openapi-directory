# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectEmployeeGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, number: int=None, object_version: str=None):
        """ProjectEmployeeGroup - a model defined in OpenAPI

        :param name: The name of this ProjectEmployeeGroup.
        :param number: The number of this ProjectEmployeeGroup.
        :param object_version: The object_version of this ProjectEmployeeGroup.
        """
        self.openapi_types = {
            'name': str,
            'number': int,
            'object_version': str
        }

        self.attribute_map = {
            'name': 'name',
            'number': 'number',
            'object_version': 'objectVersion'
        }

        self._name = name
        self._number = number
        self._object_version = object_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectEmployeeGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectEmployeeGroup of this ProjectEmployeeGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ProjectEmployeeGroup.

        Name of the employee group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>

        :return: The name of this ProjectEmployeeGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectEmployeeGroup.

        Name of the employee group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin, like</p><p class='sort'>Sortable: false</p>

        :param name: The name of this ProjectEmployeeGroup.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def number(self):
        """Gets the number of this ProjectEmployeeGroup.

        The unique number of the employee group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :return: The number of this ProjectEmployeeGroup.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ProjectEmployeeGroup.

        The unique number of the employee group.<p class='filter'>Filterable: eq, ne, lt, lte, gt, gte, in, nin</p><p class='sort'>Sortable: true</p>

        :param number: The number of this ProjectEmployeeGroup.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")
        if number is not None and number > 999999999:
            raise ValueError("Invalid value for `number`, must be a value less than or equal to `999999999`")
        if number is not None and number < 1:
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `1`")

        self._number = number

    @property
    def object_version(self):
        """Gets the object_version of this ProjectEmployeeGroup.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :return: The object_version of this ProjectEmployeeGroup.
        :rtype: str
        """
        return self._object_version

    @object_version.setter
    def object_version(self, object_version):
        """Sets the object_version of this ProjectEmployeeGroup.

        The object version, required for PUT requests.<p class='filter'>Filterable: not filterable</p><p class='sort'>Sortable: false</p>

        :param object_version: The object_version of this ProjectEmployeeGroup.
        :type object_version: str
        """

        self._object_version = object_version
